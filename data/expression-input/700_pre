[math3, ., analysis, ., MultivariateFunction, ;, @, Deprecated, public, class, NelderMeadSimplex, extends, AbstractSimplex, {, private, static, final, double, DEFAULT_RHO, =]
[public, class, NelderMeadSimplex, extends, AbstractSimplex, {, private, static, final, double, DEFAULT_RHO, =, 1, ;, private, static, final, double, DEFAULT_KHI, =]
[final, double, DEFAULT_RHO, =, 1, ;, private, static, final, double, DEFAULT_KHI, =, 2, ;, private, static, final, double, DEFAULT_GAMMA, =]
[final, double, DEFAULT_KHI, =, 2, ;, private, static, final, double, DEFAULT_GAMMA, =, 0.5, ;, private, static, final, double, DEFAULT_SIGMA, =]
[private, final, double, gamma, ;, private, final, double, sigma, ;, public, NelderMeadSimplex, (, final, int, n, ), {, this, (]
[double, gamma, ;, private, final, double, sigma, ;, public, NelderMeadSimplex, (, final, int, n, ), {, this, (, n, ,]
[(, n, ,, 1d, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (]
[,, 1d, ), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,]
[), ;, }, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,, sideLength, ,]
[}, public, NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,, sideLength, ,, DEFAULT_RHO, ,]
[NelderMeadSimplex, (, final, int, n, ,, double, sideLength, ), {, this, (, n, ,, sideLength, ,, DEFAULT_RHO, ,, DEFAULT_KHI, ,]
[final, int, n, ,, double, sideLength, ), {, this, (, n, ,, sideLength, ,, DEFAULT_RHO, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,]
[,, final, double, rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (]
[double, rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, n, ,]
[final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, n, ,, sideLength, ), ;]
[final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, n, ,, sideLength, ), ;]
[final, double, gamma, ,, final, double, sigma, ), {, super, (, n, ,, sideLength, ), ;, this, ., rho, =]
[gamma, ,, final, double, sigma, ), {, super, (, n, ,, sideLength, ), ;, this, ., rho, =, rho, ;]
[gamma, ,, final, double, sigma, ), {, super, (, n, ,, sideLength, ), ;, this, ., rho, =, rho, ;]
[sigma, ), {, super, (, n, ,, sideLength, ), ;, this, ., rho, =, rho, ;, this, ., khi, =]
[{, super, (, n, ,, sideLength, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;]
[{, super, (, n, ,, sideLength, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;]
[,, sideLength, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =]
[,, final, double, rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, this, (]
[double, rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, this, (, n, ,]
[,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, this, (, n, ,, 1d, ,]
[double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, this, (, n, ,, 1d, ,, rho, ,]
[,, final, double, gamma, ,, final, double, sigma, ), {, this, (, n, ,, 1d, ,, rho, ,, khi, ,]
[double, gamma, ,, final, double, sigma, ), {, this, (, n, ,, 1d, ,, rho, ,, khi, ,, gamma, ,]
[khi, ,, gamma, ,, sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (]
[gamma, ,, sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,]
[sigma, ), ;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,, DEFAULT_RHO, ,]
[;, }, public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,, DEFAULT_RHO, ,, DEFAULT_KHI, ,]
[public, NelderMeadSimplex, (, final, double, [, ], steps, ), {, this, (, steps, ,, DEFAULT_RHO, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,]
[,, final, double, rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (]
[rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, steps, ), ;]
[rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, steps, ), ;]
[khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, steps, ), ;, this, ., rho, =]
[final, double, gamma, ,, final, double, sigma, ), {, super, (, steps, ), ;, this, ., rho, =, rho, ;]
[final, double, gamma, ,, final, double, sigma, ), {, super, (, steps, ), ;, this, ., rho, =, rho, ;]
[final, double, sigma, ), {, super, (, steps, ), ;, this, ., rho, =, rho, ;, this, ., khi, =]
[sigma, ), {, super, (, steps, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;]
[sigma, ), {, super, (, steps, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;]
[(, steps, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =]
[., sigma, =, sigma, ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (]
[=, sigma, ;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,]
[;, }, public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,, DEFAULT_RHO, ,]
[public, NelderMeadSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,, DEFAULT_RHO, ,, DEFAULT_KHI, ,]
[(, final, double, [, ], [, ], referenceSimplex, ), {, this, (, referenceSimplex, ,, DEFAULT_RHO, ,, DEFAULT_KHI, ,, DEFAULT_GAMMA, ,]
[,, final, double, rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (]
[rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, referenceSimplex, ), ;]
[rho, ,, final, double, khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, referenceSimplex, ), ;]
[khi, ,, final, double, gamma, ,, final, double, sigma, ), {, super, (, referenceSimplex, ), ;, this, ., rho, =]
[final, double, gamma, ,, final, double, sigma, ), {, super, (, referenceSimplex, ), ;, this, ., rho, =, rho, ;]
[final, double, gamma, ,, final, double, sigma, ), {, super, (, referenceSimplex, ), ;, this, ., rho, =, rho, ;]
[final, double, sigma, ), {, super, (, referenceSimplex, ), ;, this, ., rho, =, rho, ;, this, ., khi, =]
[sigma, ), {, super, (, referenceSimplex, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;]
[sigma, ), {, super, (, referenceSimplex, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;]
[(, referenceSimplex, ), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[), ;, this, ., rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;]
[rho, =, rho, ;, this, ., khi, =, khi, ;, this, ., gamma, =, gamma, ;, this, ., sigma, =]
[public, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, final, int, n, =]
[final, Comparator, <, PointValuePair, >, comparator, ), {, final, int, n, =, getDimension, (, ), ;, final, PointValuePair, best, =]
[<, PointValuePair, >, comparator, ), {, final, int, n, =, getDimension, (, ), ;, final, PointValuePair, best, =, getPoint, (]
[int, n, =, getDimension, (, ), ;, final, PointValuePair, best, =, getPoint, (, 0, ), ;, final, PointValuePair, secondBest, =]
[=, getDimension, (, ), ;, final, PointValuePair, best, =, getPoint, (, 0, ), ;, final, PointValuePair, secondBest, =, getPoint, (]
[=, getDimension, (, ), ;, final, PointValuePair, best, =, getPoint, (, 0, ), ;, final, PointValuePair, secondBest, =, getPoint, (]
[(, ), ;, final, PointValuePair, best, =, getPoint, (, 0, ), ;, final, PointValuePair, secondBest, =, getPoint, (, n, -]
[getPoint, (, 0, ), ;, final, PointValuePair, secondBest, =, getPoint, (, n, -, 1, ), ;, final, PointValuePair, worst, =]
[0, ), ;, final, PointValuePair, secondBest, =, getPoint, (, n, -, 1, ), ;, final, PointValuePair, worst, =, getPoint, (]
[n, -, 1, ), ;, final, PointValuePair, worst, =, getPoint, (, n, ), ;, final, double, [, ], xWorst, =]
[n, -, 1, ), ;, final, PointValuePair, worst, =, getPoint, (, n, ), ;, final, double, [, ], xWorst, =]
[), ;, final, double, [, ], xWorst, =, worst, ., getPointRef, (, ), ;, final, double, [, ], centroid, =]
[double, [, ], xWorst, =, worst, ., getPointRef, (, ), ;, final, double, [, ], centroid, =, new, double, []
[(, ), ;, final, double, [, ], centroid, =, new, double, [, n, ], ;, for, (, int, i, =]
[;, final, double, [, ], centroid, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], centroid, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], centroid, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], centroid, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], centroid, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ], x, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ], x, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ], x, =, getPoint, (]
[final, double, [, ], x, =, getPoint, (, i, ), ., getPointRef, (, ), ;, for, (, int, j, =]
[[, ], x, =, getPoint, (, i, ), ., getPointRef, (, ), ;, for, (, int, j, =, 0, ;]
[[, ], x, =, getPoint, (, i, ), ., getPointRef, (, ), ;, for, (, int, j, =, 0, ;]
[x, =, getPoint, (, i, ), ., getPointRef, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[getPoint, (, i, ), ., getPointRef, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[getPoint, (, i, ), ., getPointRef, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[., getPointRef, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[., getPointRef, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[(, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, [, j, ], +=]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, [, j, ], +=]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, [, j, ], +=, x, []
[j, ++, ), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling, =]
[j, ++, ), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling, =]
[), {, centroid, [, j, ], +=, x, [, j, ], ;, }, }, final, double, scaling, =, 1.0, /]
[x, [, j, ], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =]
[j, ], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0, ;]
[j, ], ;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0, ;]
[;, }, }, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0, ;, j, <]
[}, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[}, final, double, scaling, =, 1.0, /, n, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[=, 1.0, /, n, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, 1.0, /, n, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[/, n, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, centroid, [, j, ], *=]
[n, ;, j, ++, ), {, centroid, [, j, ], *=, scaling, ;, }, final, double, [, ], xR, =]
[++, ), {, centroid, [, j, ], *=, scaling, ;, }, final, double, [, ], xR, =, new, double, []
[scaling, ;, }, final, double, [, ], xR, =, new, double, [, n, ], ;, for, (, int, j, =]
[}, final, double, [, ], xR, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[}, final, double, [, ], xR, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[double, [, ], xR, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <]
[], xR, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[], xR, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xR, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xR, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xR, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xR, [, j, ], =]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, []
[0, ;, j, <, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +]
[0, ;, j, <, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +]
[j, <, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *]
[<, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (]
[<, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (]
[<, n, ;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (]
[;, j, ++, ), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, []
[), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, [, j, ], -]
[), {, xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, [, j, ], -]
[xR, [, j, ], =, centroid, [, j, ], +, rho, *, (, centroid, [, j, ], -, xWorst, []
[+, rho, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =]
[(, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (]
[[, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,]
[[, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,]
[xWorst, [, j, ], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (]
[], ), ;, }, final, PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,]
[PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, ), ;, if, (]
[PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, ), ;, if, (]
[PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, ), ;, if, (]
[PointValuePair, reflected, =, new, PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, ), ;, if, (]
[PointValuePair, (, xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (]
[xR, ,, evaluationFunction, ., value, (, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,]
[., value, (, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=]
[(, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&]
[(, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&]
[(, xR, ), ,, false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&]
[false, ), ;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, ., compare, (]
[;, if, (, comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected, ,]
[comparator, ., compare, (, best, ,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <]
[(, best, ,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {]
[,, reflected, ), <=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (]
[), <=, 0, &&, comparator, ., compare, (, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,]
[(, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (]
[(, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (]
[(, reflected, ,, secondBest, ), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (]
[), <, 0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (]
[0, ), {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (, reflected, ,]
[replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, else, if, (, comparator, ., compare, (, reflected, ,, best, ), <]
[if, (, comparator, ., compare, (, reflected, ,, best, ), <, 0, ), {, final, double, [, ], xE, =]
[., compare, (, reflected, ,, best, ), <, 0, ), {, final, double, [, ], xE, =, new, double, []
[0, ), {, final, double, [, ], xE, =, new, double, [, n, ], ;, for, (, int, j, =]
[{, final, double, [, ], xE, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[{, final, double, [, ], xE, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[double, [, ], xE, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <]
[], xE, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[], xE, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xE, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xE, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xE, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xE, [, j, ], =]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, []
[0, ;, j, <, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +]
[0, ;, j, <, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +]
[j, <, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *]
[<, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (]
[<, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (]
[<, n, ;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (]
[;, j, ++, ), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, []
[), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, [, j, ], -]
[), {, xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, [, j, ], -]
[xE, [, j, ], =, centroid, [, j, ], +, khi, *, (, xR, [, j, ], -, centroid, []
[+, khi, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =]
[(, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (]
[[, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,]
[[, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,]
[centroid, [, j, ], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (]
[], ), ;, }, final, PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,]
[PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, ), ;, if, (]
[PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, ), ;, if, (]
[PointValuePair, expanded, =, new, PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, ), ;, if, (]
[PointValuePair, (, xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, ), ;, if, (, comparator, ., compare, (]
[xE, ,, evaluationFunction, ., value, (, xE, ), ,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,]
[., value, (, xE, ), ,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <]
[xE, ), ,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <, 0, ), {]
[,, false, ), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (]
[), ;, if, (, comparator, ., compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,]
[compare, (, expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {]
[expanded, ,, reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {, replaceWorstPoint, (]
[reflected, ), <, 0, ), {, replaceWorstPoint, (, expanded, ,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,]
[,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (]
[,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (]
[,, comparator, ), ;, }, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (]
[}, else, {, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (, comparator, ., compare, (]
[{, replaceWorstPoint, (, reflected, ,, comparator, ), ;, }, }, else, {, if, (, comparator, ., compare, (, reflected, ,]
[reflected, ,, comparator, ), ;, }, }, else, {, if, (, comparator, ., compare, (, reflected, ,, worst, ), <]
[if, (, comparator, ., compare, (, reflected, ,, worst, ), <, 0, ), {, final, double, [, ], xC, =]
[., compare, (, reflected, ,, worst, ), <, 0, ), {, final, double, [, ], xC, =, new, double, []
[0, ), {, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =]
[{, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[{, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <]
[], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, []
[0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +]
[0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +]
[j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *]
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (]
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (]
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (]
[;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, []
[), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, [, j, ], -]
[), {, xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, [, j, ], -]
[xC, [, j, ], =, centroid, [, j, ], +, gamma, *, (, xR, [, j, ], -, centroid, []
[+, gamma, *, (, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =]
[(, xR, [, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (]
[[, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,]
[[, j, ], -, centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,]
[centroid, [, j, ], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (]
[], ), ;, }, final, PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,]
[PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (]
[PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (]
[PointValuePair, outContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (]
[PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (]
[xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,]
[., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=]
[xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=, 0, ), {]
[,, false, ), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=, 0, ), {, replaceWorstPoint, (]
[), ;, if, (, comparator, ., compare, (, outContracted, ,, reflected, ), <=, 0, ), {, replaceWorstPoint, (, outContracted, ,]
[{, replaceWorstPoint, (, outContracted, ,, comparator, ), ;, return, ;, }, }, else, {, final, double, [, ], xC, =]
[outContracted, ,, comparator, ), ;, return, ;, }, }, else, {, final, double, [, ], xC, =, new, double, []
[}, else, {, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =]
[{, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[{, final, double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[double, [, ], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <]
[], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[], xC, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, []
[0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -]
[0, ;, j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -]
[j, <, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *]
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (]
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (]
[<, n, ;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (]
[;, j, ++, ), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, []
[), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ], -]
[), {, xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ], -]
[xC, [, j, ], =, centroid, [, j, ], -, gamma, *, (, centroid, [, j, ], -, xWorst, []
[-, gamma, *, (, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =]
[(, centroid, [, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (]
[[, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,]
[[, j, ], -, xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,]
[xWorst, [, j, ], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (]
[], ), ;, }, final, PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,]
[PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (]
[PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (]
[PointValuePair, inContracted, =, new, PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (]
[PointValuePair, (, xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (]
[xC, ,, evaluationFunction, ., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,]
[., value, (, xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <]
[xC, ), ,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <, 0, ), {]
[,, false, ), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <, 0, ), {, replaceWorstPoint, (]
[), ;, if, (, comparator, ., compare, (, inContracted, ,, worst, ), <, 0, ), {, replaceWorstPoint, (, inContracted, ,]
[0, ), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double, [, ], xSmallest, =]
[0, ), {, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double, [, ], xSmallest, =]
[{, replaceWorstPoint, (, inContracted, ,, comparator, ), ;, return, ;, }, }, final, double, [, ], xSmallest, =, getPoint, (]
[final, double, [, ], xSmallest, =, getPoint, (, 0, ), ., getPointRef, (, ), ;, for, (, int, i, =]
[[, ], xSmallest, =, getPoint, (, 0, ), ., getPointRef, (, ), ;, for, (, int, i, =, 1, ;]
[[, ], xSmallest, =, getPoint, (, 0, ), ., getPointRef, (, ), ;, for, (, int, i, =, 1, ;]
[xSmallest, =, getPoint, (, 0, ), ., getPointRef, (, ), ;, for, (, int, i, =, 1, ;, i, <=]
[getPoint, (, 0, ), ., getPointRef, (, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;]
[getPoint, (, 0, ), ., getPointRef, (, ), ;, for, (, int, i, =, 1, ;, i, <=, n, ;]
[(, int, i, =, 1, ;, i, <=, n, ;, i, ++, ), {, final, double, [, ], x, =]
[(, int, i, =, 1, ;, i, <=, n, ;, i, ++, ), {, final, double, [, ], x, =]
[i, =, 1, ;, i, <=, n, ;, i, ++, ), {, final, double, [, ], x, =, getPoint, (]
[final, double, [, ], x, =, getPoint, (, i, ), ., getPoint, (, ), ;, for, (, int, j, =]
[[, ], x, =, getPoint, (, i, ), ., getPoint, (, ), ;, for, (, int, j, =, 0, ;]
[[, ], x, =, getPoint, (, i, ), ., getPoint, (, ), ;, for, (, int, j, =, 0, ;]
[x, =, getPoint, (, i, ), ., getPoint, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[getPoint, (, i, ), ., getPoint, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[getPoint, (, i, ), ., getPoint, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[., getPoint, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[., getPoint, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[(, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, x, []
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, x, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, x, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, x, [, j, ], =]
[int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, []
[0, ;, j, <, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +]
[0, ;, j, <, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +]
[j, <, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *]
[<, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (]
[<, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (]
[<, n, ;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (]
[;, j, ++, ), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, []
[), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -]
[), {, x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -]
[x, [, j, ], =, xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -, xSmallest, []
[xSmallest, [, j, ], +, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], ), ;, }]
[j, ], +, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (]
[+, sigma, *, (, x, [, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,]
[(, x, [, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (]
[[, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,]
[[, j, ], -, xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,]
[xSmallest, [, j, ], ), ;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,]
[;, }, setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;, }]
[setPoint, (, i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;, }, evaluate, (]
[i, ,, new, PointValuePair, (, x, ,, Double, ., NaN, ,, false, ), ), ;, }, evaluate, (, evaluationFunction, ,]
