[class, ReplaceMessages, extends, JsMessageVisitor, {, private, final, MessageBundle, bundle, ;, private, final, boolean, strictReplacement, ;, static, final, DiagnosticType, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, =]
[class, ReplaceMessages, extends, JsMessageVisitor, {, private, final, MessageBundle, bundle, ;, private, final, boolean, strictReplacement, ;, static, final, DiagnosticType, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, =]
[{, private, final, MessageBundle, bundle, ;, private, final, boolean, strictReplacement, ;, static, final, DiagnosticType, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, =, DiagnosticType, ., error, (]
[final, MessageBundle, bundle, ;, private, final, boolean, strictReplacement, ;, static, final, DiagnosticType, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, =, DiagnosticType, ., error, (, "JSC_BUNDLE_DOES_NOT_HAVE_THE_MESSAGE", ,]
[AbstractCompiler, compiler, ,, MessageBundle, bundle, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,, boolean, strictReplacement, ), {, super, (]
[,, MessageBundle, bundle, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,, boolean, strictReplacement, ), {, super, (, compiler, ,]
[bundle, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,, boolean, strictReplacement, ), {, super, (, compiler, ,, checkDuplicatedMessages, ,]
[boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,, boolean, strictReplacement, ), {, super, (, compiler, ,, checkDuplicatedMessages, ,, style, ,]
[boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ,, boolean, strictReplacement, ), {, super, (, compiler, ,, checkDuplicatedMessages, ,, style, ,]
[,, boolean, strictReplacement, ), {, super, (, compiler, ,, checkDuplicatedMessages, ,, style, ,, bundle, ., idGenerator, (, ), ), ;]
[,, boolean, strictReplacement, ), {, super, (, compiler, ,, checkDuplicatedMessages, ,, style, ,, bundle, ., idGenerator, (, ), ), ;]
[{, super, (, compiler, ,, checkDuplicatedMessages, ,, style, ,, bundle, ., idGenerator, (, ), ), ;, this, ., bundle, =]
[(, compiler, ,, checkDuplicatedMessages, ,, style, ,, bundle, ., idGenerator, (, ), ), ;, this, ., bundle, =, bundle, ;]
[(, compiler, ,, checkDuplicatedMessages, ,, style, ,, bundle, ., idGenerator, (, ), ), ;, this, ., bundle, =, bundle, ;]
[,, style, ,, bundle, ., idGenerator, (, ), ), ;, this, ., bundle, =, bundle, ;, this, ., strictReplacement, =]
[;, }, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =]
[}, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =, (]
[}, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =, (]
[}, @, Override, void, processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =, (]
[processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =, (, bundle, ., getMessage, (]
[processMessageFallback, (, Node, callNode, ,, JsMessage, message1, ,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =, (, bundle, ., getMessage, (]
[,, JsMessage, message2, ), {, boolean, isFirstMessageTranslated, =, (, bundle, ., getMessage, (, message1, ., getId, (, ), ), !=]
[isFirstMessageTranslated, =, (, bundle, ., getMessage, (, message1, ., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =]
[=, (, bundle, ., getMessage, (, message1, ., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (]
[=, (, bundle, ., getMessage, (, message1, ., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (]
[=, (, bundle, ., getMessage, (, message1, ., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (]
[getMessage, (, message1, ., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (]
[getMessage, (, message1, ., getId, (, ), ), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (]
[), !=, null, ), ;, boolean, isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=]
[isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =]
[isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =]
[isSecondMessageTranslated, =, (, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =]
[(, bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&]
[bundle, ., getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !]
[getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?]
[getMessage, (, message2, ., getId, (, ), ), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?]
[getId, (, ), ), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (]
[), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :]
[), !=, null, ), ;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :]
[;, Node, replacementNode, =, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (]
[=, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;]
[=, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;]
[=, isSecondMessageTranslated, &&, !, isFirstMessageTranslated, ?, callNode, ., getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;]
[getChildAtIndex, (, 2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, ), ., replaceChild, (]
[2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,]
[2, ), :, callNode, ., getChildAtIndex, (, 1, ), ;, callNode, ., getParent, (, ), ., replaceChild, (, callNode, ,]
[(, ), ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, JsMessage, replacement, =]
[(, ), ), ;, }, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, JsMessage, replacement, =]
[}, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, JsMessage, replacement, =, bundle, ., getMessage, (]
[}, @, Override, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, JsMessage, replacement, =, bundle, ., getMessage, (]
[JsMessageDefinition, definition, ), {, JsMessage, replacement, =, bundle, ., getMessage, (, message, ., getId, (, ), ), ;, if, (]
[JsMessageDefinition, definition, ), {, JsMessage, replacement, =, bundle, ., getMessage, (, message, ., getId, (, ), ), ;, if, (]
[), {, JsMessage, replacement, =, bundle, ., getMessage, (, message, ., getId, (, ), ), ;, if, (, replacement, ==]
[bundle, ., getMessage, (, message, ., getId, (, ), ), ;, if, (, replacement, ==, null, ), {, if, (]
[(, message, ., getId, (, ), ), ;, if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {]
[(, message, ., getId, (, ), ), ;, if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {]
[(, ), ), ;, if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {, compiler, ., report, (]
[(, ), ), ;, if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {, compiler, ., report, (]
[if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make, (]
[if, (, replacement, ==, null, ), {, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make, (]
[{, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,]
[{, if, (, strictReplacement, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,]
[report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,]
[report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, definition, ., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,]
[., getMessageNode, (, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), ), ), ;, return, ;, }, else, {]
[(, ), ,, BUNDLE_DOES_NOT_HAVE_THE_MESSAGE, ,, message, ., getId, (, ), ), ), ;, return, ;, }, else, {, replacement, =]
[), ), ;, return, ;, }, else, {, replacement, =, message, ;, }, }, Node, newValue, ;, Node, msgNode, =]
[), ), ;, return, ;, }, else, {, replacement, =, message, ;, }, }, Node, newValue, ;, Node, msgNode, =]
[replacement, =, message, ;, }, }, Node, newValue, ;, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, try, {]
[message, ;, }, }, Node, newValue, ;, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, try, {, newValue, =]
[}, }, Node, newValue, ;, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, try, {, newValue, =, getNewValueNode, (]
[Node, newValue, ;, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, try, {, newValue, =, getNewValueNode, (, replacement, ,]
[), ;, try, {, newValue, =, getNewValueNode, (, replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {]
[), ;, try, {, newValue, =, getNewValueNode, (, replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {]
[newValue, =, getNewValueNode, (, replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (]
[newValue, =, getNewValueNode, (, replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (]
[replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[replacement, ,, msgNode, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,]
[catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,]
[report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,]
[report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,]
[getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;]
[), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, newValue, =]
[(, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (]
[(, ), ,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (]
[,, MESSAGE_TREE_MALFORMED, ,, e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=]
[e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {]
[e, ., getMessage, (, ), ), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {]
[), ), ), ;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (]
[;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;]
[;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;]
[;, newValue, =, msgNode, ;, }, if, (, newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;]
[newValue, !=, msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (]
[msgNode, ), {, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,]
[newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;]
[newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;]
[(, ), ;, }, }, private, Node, getNewValueNode, (, JsMessage, message, ,, Node, origValueNode, ), throws, MalformedException, {, switch, (]
[(, ), ;, }, }, private, Node, getNewValueNode, (, JsMessage, message, ,, Node, origValueNode, ), throws, MalformedException, {, switch, (]
[(, JsMessage, message, ,, Node, origValueNode, ), throws, MalformedException, {, switch, (, origValueNode, ., getType, (, ), ), {, case]
[(, JsMessage, message, ,, Node, origValueNode, ), throws, MalformedException, {, switch, (, origValueNode, ., getType, (, ), ), {, case]
[Node, origValueNode, ), throws, MalformedException, {, switch, (, origValueNode, ., getType, (, ), ), {, case, Token, ., FUNCTION, :]
[), throws, MalformedException, {, switch, (, origValueNode, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, updateFunctionNode, (]
[MalformedException, {, switch, (, origValueNode, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, updateFunctionNode, (, message, ,]
[origValueNode, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return]
[(, ), ), {, case, Token, ., FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode, ;, case]
[(, ), ), {, case, Token, ., FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode, ;, case]
[FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =]
[FUNCTION, :, updateFunctionNode, (, message, ,, origValueNode, ), ;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =]
[;, return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, ), ;, if, (]
[return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, ), ;, if, (, !]
[return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, ), ;, if, (, !]
[return, origValueNode, ;, case, Token, ., STRING, :, String, newString, =, message, ., toString, (, ), ;, if, (, !]
[String, newString, =, message, ., toString, (, ), ;, if, (, !, origValueNode, ., getString, (, ), ., equals, (]
[., toString, (, ), ;, if, (, !, origValueNode, ., getString, (, ), ., equals, (, newString, ), ), {]
[., toString, (, ), ;, if, (, !, origValueNode, ., getString, (, ), ., equals, (, newString, ), ), {]
[;, if, (, !, origValueNode, ., getString, (, ), ., equals, (, newString, ), ), {, origValueNode, ., setString, (]
[!, origValueNode, ., getString, (, ), ., equals, (, newString, ), ), {, origValueNode, ., setString, (, newString, ), ;]
[!, origValueNode, ., getString, (, ), ., equals, (, newString, ), ), {, origValueNode, ., setString, (, newString, ), ;]
[(, newString, ), ), {, origValueNode, ., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return]
[), {, origValueNode, ., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case]
[), {, origValueNode, ., setString, (, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case]
[(, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD, :, return]
[(, newString, ), ;, compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD, :, return]
[compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD, :, return, IR, ., string, (]
[compiler, ., reportCodeChange, (, ), ;, }, return, origValueNode, ;, case, Token, ., ADD, :, return, IR, ., string, (]
[origValueNode, ;, case, Token, ., ADD, :, return, IR, ., string, (, message, ., toString, (, ), ), ;, case]
[origValueNode, ;, case, Token, ., ADD, :, return, IR, ., string, (, message, ., toString, (, ), ), ;, case]
[ADD, :, return, IR, ., string, (, message, ., toString, (, ), ), ;, case, Token, ., CALL, :, return]
[return, IR, ., string, (, message, ., toString, (, ), ), ;, case, Token, ., CALL, :, return, replaceCallNode, (]
[., string, (, message, ., toString, (, ), ), ;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,]
[(, ), ), ;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw]
[;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (]
[;, case, Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (]
[Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +]
[Token, ., CALL, :, return, replaceCallNode, (, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +]
[(, message, ,, origValueNode, ), ;, default, :, throw, new, MalformedException, (, "Expected FUNCTION, STRING, or ADD node; found: ", +, origValueNode, ., getType, (, ), ,]
[), ,, origValueNode, ), ;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {]
[origValueNode, ), ;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode, (]
[;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode, (, functionNode, ,]
[;, }, }, private, void, updateFunctionNode, (, JsMessage, message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode, (, functionNode, ,]
[message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode, (, functionNode, ,, Token, ., FUNCTION, ), ;, Node, nameNode, =]
[message, ,, Node, functionNode, ), throws, MalformedException, {, checkNode, (, functionNode, ,, Token, ., FUNCTION, ), ;, Node, nameNode, =]
[MalformedException, {, checkNode, (, functionNode, ,, Token, ., FUNCTION, ), ;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;]
[checkNode, (, functionNode, ,, Token, ., FUNCTION, ), ;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (]
[functionNode, ,, Token, ., FUNCTION, ), ;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,]
[functionNode, ,, Token, ., FUNCTION, ), ;, Node, nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,]
[nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =]
[nameNode, =, functionNode, ., getFirstChild, (, ), ;, checkNode, (, nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =]
[), ;, checkNode, (, nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;]
[checkNode, (, nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (]
[nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,]
[nameNode, ,, Token, ., NAME, ), ;, Node, argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,]
[argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =]
[argListNode, =, nameNode, ., getNext, (, ), ;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =]
[), ;, checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;]
[checkNode, (, argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode, (]
[argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode, (, oldBlockNode, ,]
[argListNode, ,, Token, ., PARAM_LIST, ), ;, Node, oldBlockNode, =, argListNode, ., getNext, (, ), ;, checkNode, (, oldBlockNode, ,]
[., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK, ), ;, Iterator, <, CharSequence, >, iterator, =]
[., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK, ), ;, Iterator, <, CharSequence, >, iterator, =]
[., getNext, (, ), ;, checkNode, (, oldBlockNode, ,, Token, ., BLOCK, ), ;, Iterator, <, CharSequence, >, iterator, =]
[;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (, ), ., iterator, (, ), ;, Node, valueNode, =]
[;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (, ), ., iterator, (, ), ;, Node, valueNode, =]
[;, Iterator, <, CharSequence, >, iterator, =, message, ., parts, (, ), ., iterator, (, ), ;, Node, valueNode, =]
[=, message, ., parts, (, ), ., iterator, (, ), ;, Node, valueNode, =, iterator, ., hasNext, (, ), ?]
[., parts, (, ), ., iterator, (, ), ;, Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (]
[(, ), ., iterator, (, ), ;, Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,]
[iterator, (, ), ;, Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :]
[iterator, (, ), ;, Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :]
[Node, valueNode, =, iterator, ., hasNext, (, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :, IR, ., string, (]
[(, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =]
[(, ), ?, constructAddOrStringNode, (, iterator, ,, argListNode, ), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =]
[(, iterator, ,, argListNode, ), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =, IR, ., block, (]
[(, iterator, ,, argListNode, ), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =, IR, ., block, (]
[), :, IR, ., string, (, "", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (]
["", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (]
["", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (]
["", ), ;, Node, newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (]
[newBlockNode, =, IR, ., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, ., checkTreeEquals, (]
[., block, (, IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=]
[IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {]
[IR, ., returnNode, (, valueNode, ), ), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {]
[valueNode, ), ), ;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (]
[;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;]
[;, if, (, newBlockNode, ., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;]
[., checkTreeEquals, (, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (]
[(, oldBlockNode, ), !=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,]
[!=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;]
[!=, null, ), {, newBlockNode, ., copyInformationFromForTree, (, oldBlockNode, ), ;, functionNode, ., replaceChild, (, oldBlockNode, ,, newBlockNode, ), ;]
[}, private, Node, constructAddOrStringNode, (, Iterator, <, CharSequence, >, partsIterator, ,, Node, argListNode, ), throws, MalformedException, {, CharSequence, part, =]
[}, private, Node, constructAddOrStringNode, (, Iterator, <, CharSequence, >, partsIterator, ,, Node, argListNode, ), throws, MalformedException, {, CharSequence, part, =]
[partsIterator, ,, Node, argListNode, ), throws, MalformedException, {, CharSequence, part, =, partsIterator, ., next, (, ), ;, Node, partNode, =]
[), throws, MalformedException, {, CharSequence, part, =, partsIterator, ., next, (, ), ;, Node, partNode, =, null, ;, if, (]
[), throws, MalformedException, {, CharSequence, part, =, partsIterator, ., next, (, ), ;, Node, partNode, =, null, ;, if, (]
[;, Node, partNode, =, null, ;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =]
[;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, )]
[PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, for, (, Node, node, :]
[PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, for, (, Node, node, :]
[JsMessage, ., PlaceholderReference, ), part, ;, for, (, Node, node, :, argListNode, ., children, (, ), ), {, if, (]
[JsMessage, ., PlaceholderReference, ), part, ;, for, (, Node, node, :, argListNode, ., children, (, ), ), {, if, (]
[:, argListNode, ., children, (, ), ), {, if, (, node, ., isName, (, ), ), {, String, arg, =]
[:, argListNode, ., children, (, ), ), {, if, (, node, ., isName, (, ), ), {, String, arg, =]
[if, (, node, ., isName, (, ), ), {, String, arg, =, node, ., getString, (, ), ;, if, (]
[if, (, node, ., isName, (, ), ), {, String, arg, =, node, ., getString, (, ), ;, if, (]
[isName, (, ), ), {, String, arg, =, node, ., getString, (, ), ;, if, (, arg, ., equalsIgnoreCase, (]
[isName, (, ), ), {, String, arg, =, node, ., getString, (, ), ;, if, (, arg, ., equalsIgnoreCase, (]
[node, ., getString, (, ), ;, if, (, arg, ., equalsIgnoreCase, (, phRef, ., getName, (, ), ), ), {]
[getString, (, ), ;, if, (, arg, ., equalsIgnoreCase, (, phRef, ., getName, (, ), ), ), {, partNode, =]
[getString, (, ), ;, if, (, arg, ., equalsIgnoreCase, (, phRef, ., getName, (, ), ), ), {, partNode, =]
[if, (, arg, ., equalsIgnoreCase, (, phRef, ., getName, (, ), ), ), {, partNode, =, IR, ., name, (]
[getName, (, ), ), ), {, partNode, =, IR, ., name, (, arg, ), ;, }, }, }, if, (]
[getName, (, ), ), ), {, partNode, =, IR, ., name, (, arg, ), ;, }, }, }, if, (]
[), ), ), {, partNode, =, IR, ., name, (, arg, ), ;, }, }, }, if, (, partNode, ==]
[partNode, =, IR, ., name, (, arg, ), ;, }, }, }, if, (, partNode, ==, null, ), {, throw]
[., name, (, arg, ), ;, }, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (]
[., name, (, arg, ), ;, }, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (]
[(, arg, ), ;, }, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +]
[(, arg, ), ;, }, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +]
[}, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,]
[{, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else, {]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else, {, partNode, =]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else, {, partNode, =]
[+, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (]
[+, phRef, ., getName, (, ), ,, argListNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (]
[}, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }, if, (]
[}, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }, if, (]
[string, (, part, ., toString, (, ), ), ;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return]
[string, (, part, ., toString, (, ), ), ;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return]
[toString, (, ), ), ;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return, IR, ., add, (]
[), ), ;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,]
[;, }, if, (, partsIterator, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructAddOrStringNode, (]
[if, (, partsIterator, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructAddOrStringNode, (, partsIterator, ,]
[{, return, IR, ., add, (, partNode, ,, constructAddOrStringNode, (, partsIterator, ,, argListNode, ), ), ;, }, else, {, return]
[else, {, return, partNode, ;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode, ), throws, MalformedException, {]
[return, partNode, ;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode, ), throws, MalformedException, {, checkNode, (]
[;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode, ), throws, MalformedException, {, checkNode, (, callNode, ,]
[;, }, }, private, Node, replaceCallNode, (, JsMessage, message, ,, Node, callNode, ), throws, MalformedException, {, checkNode, (, callNode, ,]
[message, ,, Node, callNode, ), throws, MalformedException, {, checkNode, (, callNode, ,, Token, ., CALL, ), ;, Node, getPropNode, =]
[message, ,, Node, callNode, ), throws, MalformedException, {, checkNode, (, callNode, ,, Token, ., CALL, ), ;, Node, getPropNode, =]
[MalformedException, {, checkNode, (, callNode, ,, Token, ., CALL, ), ;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;]
[checkNode, (, callNode, ,, Token, ., CALL, ), ;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (]
[callNode, ,, Token, ., CALL, ), ;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,]
[callNode, ,, Token, ., CALL, ), ;, Node, getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,]
[getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;, Node, stringExprNode, =]
[getPropNode, =, callNode, ., getFirstChild, (, ), ;, checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;, Node, stringExprNode, =]
[), ;, checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;]
[checkNode, (, getPropNode, ,, Token, ., GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode, (]
[GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =]
[GETPROP, ), ;, Node, stringExprNode, =, getPropNode, ., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =]
[., getNext, (, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return]
[(, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return, constructStringExprNode, (]
[(, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return, constructStringExprNode, (]
[(, ), ;, checkStringExprNode, (, stringExprNode, ), ;, Node, objLitNode, =, stringExprNode, ., getNext, (, ), ;, return, constructStringExprNode, (]
[=, stringExprNode, ., getNext, (, ), ;, return, constructStringExprNode, (, message, ., parts, (, ), ., iterator, (, ), ,]
[}, private, Node, constructStringExprNode, (, Iterator, <, CharSequence, >, parts, ,, Node, objLitNode, ), throws, MalformedException, {, CharSequence, part, =]
[}, private, Node, constructStringExprNode, (, Iterator, <, CharSequence, >, parts, ,, Node, objLitNode, ), throws, MalformedException, {, CharSequence, part, =]
[parts, ,, Node, objLitNode, ), throws, MalformedException, {, CharSequence, part, =, parts, ., next, (, ), ;, Node, partNode, =]
[), throws, MalformedException, {, CharSequence, part, =, parts, ., next, (, ), ;, Node, partNode, =, null, ;, if, (]
[), throws, MalformedException, {, CharSequence, part, =, parts, ., next, (, ), ;, Node, partNode, =, null, ;, if, (]
[;, Node, partNode, =, null, ;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =]
[;, if, (, part, instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, )]
[instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (]
[instanceof, JsMessage, ., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (]
[., PlaceholderReference, ), {, JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (, objLitNode, ==]
[JsMessage, ., PlaceholderReference, phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (, objLitNode, ==, null, ), {, throw]
[phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (, objLitNode, ==, null, ), {, throw, new, MalformedException, (]
[phRef, =, (, JsMessage, ., PlaceholderReference, ), part, ;, if, (, objLitNode, ==, null, ), {, throw, new, MalformedException, (]
[(, JsMessage, ., PlaceholderReference, ), part, ;, if, (, objLitNode, ==, null, ), {, throw, new, MalformedException, (, "Empty placeholder value map ", +]
[., PlaceholderReference, ), part, ;, if, (, objLitNode, ==, null, ), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,]
[null, ), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =]
[null, ), {, throw, new, MalformedException, (, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =]
[(, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;]
[(, "Empty placeholder value map ", +, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;]
[+, "for a translated message with placeholders.", ,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=]
[,, objLitNode, ), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=, null, ;]
[), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[), ;, }, for, (, Node, key, =, objLitNode, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[;, key, =, key, ., getNext, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (]
[;, key, =, key, ., getNext, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (]
[(, key, ., getString, (, ), ., equals, (, phRef, ., getName, (, ), ), ), {, Node, valueNode, =]
[(, key, ., getString, (, ), ., equals, (, phRef, ., getName, (, ), ), ), {, Node, valueNode, =]
[., equals, (, phRef, ., getName, (, ), ), ), {, Node, valueNode, =, key, ., getFirstChild, (, ), ;]
[(, phRef, ., getName, (, ), ), ), {, Node, valueNode, =, key, ., getFirstChild, (, ), ;, partNode, =]
[(, phRef, ., getName, (, ), ), ), {, Node, valueNode, =, key, ., getFirstChild, (, ), ;, partNode, =]
[valueNode, =, key, ., getFirstChild, (, ), ;, partNode, =, valueNode, ., cloneTree, (, ), ;, }, }, if, (]
[valueNode, =, key, ., getFirstChild, (, ), ;, partNode, =, valueNode, ., cloneTree, (, ), ;, }, }, if, (]
[key, ., getFirstChild, (, ), ;, partNode, =, valueNode, ., cloneTree, (, ), ;, }, }, if, (, partNode, ==]
[), ;, partNode, =, valueNode, ., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw]
[=, valueNode, ., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (]
[=, valueNode, ., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (]
[., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +]
[., cloneTree, (, ), ;, }, }, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +]
[}, if, (, partNode, ==, null, ), {, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,]
[{, throw, new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else, {]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else, {, partNode, =]
[new, MalformedException, (, "Unrecognized message placeholder referenced: ", +, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else, {, partNode, =]
[+, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (]
[+, phRef, ., getName, (, ), ,, objLitNode, ), ;, }, }, else, {, partNode, =, IR, ., string, (]
[}, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }, if, (]
[}, }, else, {, partNode, =, IR, ., string, (, part, ., toString, (, ), ), ;, }, if, (]
[string, (, part, ., toString, (, ), ), ;, }, if, (, parts, ., hasNext, (, ), ), {, return]
[string, (, part, ., toString, (, ), ), ;, }, if, (, parts, ., hasNext, (, ), ), {, return]
[toString, (, ), ), ;, }, if, (, parts, ., hasNext, (, ), ), {, return, IR, ., add, (]
[), ), ;, }, if, (, parts, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,]
[;, }, if, (, parts, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructStringExprNode, (]
[if, (, parts, ., hasNext, (, ), ), {, return, IR, ., add, (, partNode, ,, constructStringExprNode, (, parts, ,]
[{, return, IR, ., add, (, partNode, ,, constructStringExprNode, (, parts, ,, objLitNode, ), ), ;, }, else, {, return]
[}, else, {, return, partNode, ;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, ), {, if, (]
[}, else, {, return, partNode, ;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, ), {, if, (]
[{, return, partNode, ;, }, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, ), {, if, (, node, ==]
[}, }, private, void, checkStringExprNode, (, @, Nullable, Node, node, ), {, if, (, node, ==, null, ), {, throw]
[void, checkStringExprNode, (, @, Nullable, Node, node, ), {, if, (, node, ==, null, ), {, throw, new, IllegalArgumentException, (]
[node, ), {, if, (, node, ==, null, ), {, throw, new, IllegalArgumentException, (, "Expected a string; found: null", ), ;, }, switch, (]
[node, ), {, if, (, node, ==, null, ), {, throw, new, IllegalArgumentException, (, "Expected a string; found: null", ), ;, }, switch, (]
[), {, throw, new, IllegalArgumentException, (, "Expected a string; found: null", ), ;, }, switch, (, node, ., getType, (, ), ), {, case]
[), {, throw, new, IllegalArgumentException, (, "Expected a string; found: null", ), ;, }, switch, (, node, ., getType, (, ), ), {, case]
[), ;, }, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, break, ;, case]
[), ;, }, switch, (, node, ., getType, (, ), ), {, case, Token, ., STRING, :, break, ;, case]
[getType, (, ), ), {, case, Token, ., STRING, :, break, ;, case, Token, ., ADD, :, Node, c, =]
[getType, (, ), ), {, case, Token, ., STRING, :, break, ;, case, Token, ., ADD, :, Node, c, =]
[Token, ., STRING, :, break, ;, case, Token, ., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;]
[STRING, :, break, ;, case, Token, ., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode, (]
[;, case, Token, ., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode, (, c, ), ;]
[Token, ., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode, (, c, ), ;, checkStringExprNode, (]
[Token, ., ADD, :, Node, c, =, node, ., getFirstChild, (, ), ;, checkStringExprNode, (, c, ), ;, checkStringExprNode, (]
[;, checkStringExprNode, (, c, ), ;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw]
[c, ), ;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[c, ), ;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Expected a string; found: ", +]
[;, checkStringExprNode, (, c, ., getNext, (, ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Expected a string; found: ", +]
