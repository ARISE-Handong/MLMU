[., Precision, ;, public, class, BracketingNthOrderBrentSolver, extends, AbstractUnivariateSolver, implements, BracketedUnivariateSolver, <, UnivariateFunction, >, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[implements, BracketedUnivariateSolver, <, UnivariateFunction, >, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, private, static, final, int, DEFAULT_MAXIMAL_ORDER, =]
[final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, private, static, final, int, DEFAULT_MAXIMAL_ORDER, =, 5, ;, private, static, final, int, MAXIMAL_AGING, =]
[final, int, DEFAULT_MAXIMAL_ORDER, =, 5, ;, private, static, final, int, MAXIMAL_AGING, =, 2, ;, private, static, final, double, REDUCTION_FACTOR, =]
[final, int, DEFAULT_MAXIMAL_ORDER, =, 5, ;, private, static, final, int, MAXIMAL_AGING, =, 2, ;, private, static, final, double, REDUCTION_FACTOR, =]
[DEFAULT_MAXIMAL_ORDER, =, 5, ;, private, static, final, int, MAXIMAL_AGING, =, 2, ;, private, static, final, double, REDUCTION_FACTOR, =, 1.0, /]
[1.0, /, 16.0, ;, private, final, int, maximalOrder, ;, private, AllowedSolution, allowed, ;, public, BracketingNthOrderBrentSolver, (, ), {, this, (]
[16.0, ;, private, final, int, maximalOrder, ;, private, AllowedSolution, allowed, ;, public, BracketingNthOrderBrentSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ,]
[DEFAULT_MAXIMAL_ORDER, ), ;, }, public, BracketingNthOrderBrentSolver, (, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (]
[BracketingNthOrderBrentSolver, (, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, absoluteAccuracy, ), ;, if, (]
[BracketingNthOrderBrentSolver, (, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, absoluteAccuracy, ), ;, if, (]
[final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, absoluteAccuracy, ), ;, if, (, maximalOrder, <]
[final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw]
[), throws, NumberIsTooSmallException, {, super, (, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[NumberIsTooSmallException, {, super, (, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,]
[super, (, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,]
[;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =]
[NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =]
[public, BracketingNthOrderBrentSolver, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (]
[(, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,]
[final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, if, (]
[final, double, absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, if, (]
[absoluteAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, if, (, maximalOrder, <]
[maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw]
[NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[super, (, relativeAccuracy, ,, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,]
[relativeAccuracy, ,, absoluteAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,]
[;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =]
[NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =]
[double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (]
[,, final, double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,]
[double, absoluteAccuracy, ,, final, double, functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (]
[functionValueAccuracy, ,, final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (]
[final, int, maximalOrder, ), throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (, maximalOrder, <]
[throws, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw]
[super, (, relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[relativeAccuracy, ,, absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,]
[absoluteAccuracy, ,, functionValueAccuracy, ), ;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,]
[;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[;, if, (, maximalOrder, <, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[), {, throw, new, NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;]
[NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =]
[NumberIsTooSmallException, (, maximalOrder, ,, 2, ,, true, ), ;, }, this, ., maximalOrder, =, maximalOrder, ;, this, ., allowed, =]
[maximalOrder, =, maximalOrder, ;, this, ., allowed, =, AllowedSolution, ., ANY_SIDE, ;, }, public, int, getMaximalOrder, (, ), {, return]
[@, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, [, ], x, =]
[double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, [, ], x, =, new, double, []
[double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, [, ], x, =, new, double, []
[(, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, [, ], x, =, new, double, [, maximalOrder, +]
[final, double, [, ], x, =, new, double, [, maximalOrder, +, 1, ], ;, final, double, [, ], y, =]
[], x, =, new, double, [, maximalOrder, +, 1, ], ;, final, double, [, ], y, =, new, double, []
[], x, =, new, double, [, maximalOrder, +, 1, ], ;, final, double, [, ], y, =, new, double, []
[=, new, double, [, maximalOrder, +, 1, ], ;, final, double, [, ], y, =, new, double, [, maximalOrder, +]
[[, maximalOrder, +, 1, ], ;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;]
[[, maximalOrder, +, 1, ], ;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;]
[+, 1, ], ;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, []
[;, final, double, [, ], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =]
[], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =, getMin, (, ), ;]
[], y, =, new, double, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =, getMin, (, ), ;]
[=, new, double, [, maximalOrder, +, 1, ], ;, x, [, 0, ], =, getMin, (, ), ;, x, []
[[, maximalOrder, +, 1, ], ;, x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =]
[], ;, x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;]
[], ;, x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;]
[x, [, 0, ], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;, x, []
[], =, getMin, (, ), ;, x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =]
[), ;, x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;]
[x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (]
[x, [, 1, ], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (]
[1, ], =, getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x, []
[getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,]
[getStartValue, (, ), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,]
[), ;, x, [, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, []
[[, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,]
[[, 2, ], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,]
[], =, getMax, (, ), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,, x, []
[), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,, x, [, 2, ], ), ;]
[), ;, verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,, x, [, 2, ], ), ;]
[verifySequence, (, x, [, 0, ], ,, x, [, 1, ], ,, x, [, 2, ], ), ;, y, []
[[, 0, ], ,, x, [, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =]
[], ,, x, [, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (]
[], ,, x, [, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (]
[x, [, 1, ], ,, x, [, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, []
[[, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (]
[[, 2, ], ), ;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (]
[;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (]
[;, y, [, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (]
[[, 1, ], =, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (, y, []
[=, computeObjectiveValue, (, x, [, 1, ], ), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,]
[(, x, [, 1, ], ), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,]
[), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return]
[), ;, if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return]
[if, (, Precision, ., equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return, x, []
[equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }]
[equals, (, y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }]
[y, [, 1, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }, y, []
[], ,, 0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =]
[0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (]
[0.0, ,, 1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (]
[1, ), ), {, return, x, [, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x, []
[[, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (]
[[, 1, ], ;, }, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (]
[}, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals, (]
[}, y, [, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals, (]
[[, 0, ], =, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals, (, y, []
[=, computeObjectiveValue, (, x, [, 0, ], ), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,]
[(, x, [, 0, ], ), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,]
[), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,, 1, ), ), {, return]
[), ;, if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,, 1, ), ), {, return]
[if, (, Precision, ., equals, (, y, [, 0, ], ,, 0.0, ,, 1, ), ), {, return, x, []
[,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[,, 1, ), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (]
[), ), {, return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, []
[return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *]
[return, x, [, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *]
[[, 0, ], ;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *, y, []
[;, }, int, nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *, y, [, 1, ], <]
[nbPoints, ;, int, signChangeIndex, ;, if, (, y, [, 0, ], *, y, [, 1, ], <, 0, ), {]
[int, signChangeIndex, ;, if, (, y, [, 0, ], *, y, [, 1, ], <, 0, ), {, nbPoints, =]
[;, if, (, y, [, 0, ], *, y, [, 1, ], <, 0, ), {, nbPoints, =, 2, ;]
[(, y, [, 0, ], *, y, [, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =]
[*, y, [, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {]
[*, y, [, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {]
[[, 1, ], <, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, []
[<, 0, ), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =]
[), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (]
[), {, nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (]
[nbPoints, =, 2, ;, signChangeIndex, =, 1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (, x, []
[1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (]
[1, ;, }, else, {, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (]
[{, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision, ., equals, (]
[{, y, [, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision, ., equals, (]
[[, 2, ], =, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision, ., equals, (, y, []
[=, computeObjectiveValue, (, x, [, 2, ], ), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,]
[(, x, [, 2, ], ), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,]
[), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return]
[), ;, if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return]
[if, (, Precision, ., equals, (, y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return, x, []
[y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (]
[y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (]
[y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (]
[y, [, 2, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (]
[2, ], ,, 0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (, y, []
[0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], *]
[0.0, ,, 1, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], *]
[1, ), ), {, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], *, y, []
[{, return, x, [, 2, ], ;, }, if, (, y, [, 1, ], *, y, [, 2, ], <]
[[, 2, ], ;, }, if, (, y, [, 1, ], *, y, [, 2, ], <, 0, ), {]
[], ;, }, if, (, y, [, 1, ], *, y, [, 2, ], <, 0, ), {, nbPoints, =]
[}, if, (, y, [, 1, ], *, y, [, 2, ], <, 0, ), {, nbPoints, =, 3, ;]
[(, y, [, 1, ], *, y, [, 2, ], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =]
[y, [, 2, ], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw]
[], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (]
[], <, 0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (]
[0, ), {, nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, []
[nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,]
[nbPoints, =, 3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,]
[3, ;, signChangeIndex, =, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, []
[=, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,]
[=, 2, ;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,]
[;, }, else, {, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,, y, []
[{, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,, y, [, 0, ], ,]
[{, throw, new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,, y, [, 0, ], ,]
[new, NoBracketingException, (, x, [, 0, ], ,, x, [, 2, ], ,, y, [, 0, ], ,, y, []
[,, y, [, 0, ], ,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX, =]
[0, ], ,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX, =, new, double, []
[0, ], ,, y, [, 2, ], ), ;, }, }, final, double, [, ], tmpX, =, new, double, []
[;, }, }, final, double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double, xA, =]
[;, }, }, final, double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double, xA, =]
[}, final, double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double, xA, =, x, []
[}, final, double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double, xA, =, x, []
[double, [, ], tmpX, =, new, double, [, x, ., length, ], ;, double, xA, =, x, [, signChangeIndex, -]
[double, [, x, ., length, ], ;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =]
[double, [, x, ., length, ], ;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =]
[x, ., length, ], ;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, []
[x, ., length, ], ;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, []
[length, ], ;, double, xA, =, x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, [, signChangeIndex, -]
[x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =]
[x, [, signChangeIndex, -, 1, ], ;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =]
[1, ], ;, double, yA, =, y, [, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath, ., abs, (]
[y, [, signChangeIndex, -, 1, ], ;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =]
[], ;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0, ;, double, xB, =]
[], ;, double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0, ;, double, xB, =]
[double, absYA, =, FastMath, ., abs, (, yA, ), ;, int, agingA, =, 0, ;, double, xB, =, x, []
[(, yA, ), ;, int, agingA, =, 0, ;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =]
[(, yA, ), ;, int, agingA, =, 0, ;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =]
[), ;, int, agingA, =, 0, ;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =, y, []
[;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =, y, [, signChangeIndex, ], ;, double, absYB, =]
[;, double, xB, =, x, [, signChangeIndex, ], ;, double, yB, =, y, [, signChangeIndex, ], ;, double, absYB, =]
[x, [, signChangeIndex, ], ;, double, yB, =, y, [, signChangeIndex, ], ;, double, absYB, =, FastMath, ., abs, (]
[yB, =, y, [, signChangeIndex, ], ;, double, absYB, =, FastMath, ., abs, (, yB, ), ;, int, agingB, =]
[signChangeIndex, ], ;, double, absYB, =, FastMath, ., abs, (, yB, ), ;, int, agingB, =, 0, ;, while, (]
[., abs, (, yB, ), ;, int, agingB, =, 0, ;, while, (, true, ), {, final, double, xTol, =]
[., abs, (, yB, ), ;, int, agingB, =, 0, ;, while, (, true, ), {, final, double, xTol, =]
[), ;, int, agingB, =, 0, ;, while, (, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +]
[), ;, int, agingB, =, 0, ;, while, (, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +]
[=, 0, ;, while, (, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *]
[=, 0, ;, while, (, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *]
[(, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *, FastMath, ., max, (]
[(, true, ), {, final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *, FastMath, ., max, (]
[final, double, xTol, =, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *, FastMath, ., max, (, FastMath, ., abs, (]
[=, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *, FastMath, ., max, (, FastMath, ., abs, (, xA, ), ,]
[=, getAbsoluteAccuracy, (, ), +, getRelativeAccuracy, (, ), *, FastMath, ., max, (, FastMath, ., abs, (, xA, ), ,]
[+, getRelativeAccuracy, (, ), *, FastMath, ., max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (]
[., max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (]
[., max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (]
[max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (]
[max, (, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (]
[(, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (, (]
[(, FastMath, ., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (, (]
[., abs, (, xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (, (, xB, -]
[xA, ), ,, FastMath, ., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=]
[FastMath, ., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||]
[., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (]
[., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (]
[., abs, (, xB, ), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (]
[), ), ;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (]
[;, if, (, (, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,]
[(, (, xB, -, xA, ), <=, xTol, ), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <]
[), ||, (, FastMath, ., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (]
[., max, (, absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case]
[absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return]
[absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return]
[absYA, ,, absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return]
[absYB, ), <, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <]
[<, getFunctionValueAccuracy, (, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?]
[(, ), ), ), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :]
[), {, switch, (, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;, case]
[(, allowed, ), {, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;, case, LEFT_SIDE, :, return]
[{, case, ANY_SIDE, :, return, absYA, <, absYB, ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case]
[:, return, absYA, <, absYB, ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return]
[<, absYB, ?, xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case]
[xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return]
[xA, :, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return]
[:, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (]
[:, xB, ;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (]
[;, case, LEFT_SIDE, :, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=]
[:, return, xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?]
[xA, ;, case, RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :]
[RIGHT_SIDE, :, return, xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case]
[xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return]
[xB, ;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return]
[;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (]
[;, case, BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (]
[BELOW_SIDE, :, return, (, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <]
[(, yA, <=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?]
[<=, 0, ), ?, xA, :, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :]
[:, xB, ;, case, ABOVE_SIDE, :, return, (, yA, <, 0, ), ?, xB, :, xA, ;, default, :, throw]
[?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (]
[?, xB, :, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (]
[:, xA, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (, agingA, >=]
[MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =]
[MathInternalError, (, ), ;, }, }, double, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =]
[), ;, }, }, double, targetY, ;, if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -]
[;, if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =]
[;, if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =]
[if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (]
[if, (, agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (]
[agingA, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<]
[), {, final, int, p, =, agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p, ), -]
[agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =]
[agingA, -, MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =]
[MAXIMAL_AGING, ;, final, double, weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +]
[final, double, weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;]
[weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =]
[weightA, =, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =]
[=, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (]
[=, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (]
[=, (, 1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (]
[1, <<, p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *]
[p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -]
[p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -]
[p, ), -, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -]
[-, 1, ;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *]
[;, final, double, weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *]
[weightB, =, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /]
[=, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (]
[=, p, +, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (]
[+, 1, ;, targetY, =, (, weightA, *, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +]
[*, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (]
[*, yA, -, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (]
[-, weightB, *, REDUCTION_FACTOR, *, yB, ), /, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=]
[/, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =]
[/, (, weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =]
[weightA, +, weightB, ), ;, }, else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -]
[else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =]
[else, if, (, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =]
[(, agingB, >=, MAXIMAL_AGING, ), {, final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +]
[final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =]
[final, int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =]
[int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (]
[int, p, =, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (]
[=, agingB, -, MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<]
[MAXIMAL_AGING, ;, final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -]
[final, double, weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;]
[weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =]
[weightA, =, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =]
[=, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (]
[=, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (]
[=, p, +, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (]
[+, 1, ;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *]
[;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -]
[;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -]
[;, final, double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -]
[double, weightB, =, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *]
[=, (, 1, <<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *]
[<<, p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /]
[p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (]
[p, ), -, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (]
[-, 1, ;, targetY, =, (, weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +]
[weightB, *, yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {]
[yB, -, weightA, *, REDUCTION_FACTOR, *, yA, ), /, (, weightA, +, weightB, ), ;, }, else, {, targetY, =]
[(, weightA, +, weightB, ), ;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start, =]
[;, }, else, {, targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end, =]
[targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {]
[targetY, =, 0, ;, }, double, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {]
[}, double, nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (]
[nextX, ;, int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,]
[int, start, =, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,]
[=, 0, ;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,]
[;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,]
[;, int, end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,]
[end, =, nbPoints, ;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -]
[;, do, {, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;]
[{, System, ., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =]
[., arraycopy, (, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (]
[(, x, ,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,]
[,, start, ,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,]
[,, tmpX, ,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,]
[,, start, ,, end, -, start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,]
[start, ), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (]
[), ;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !]
[;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (]
[;, nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (]
[nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (]
[nextX, =, guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (]
[guessX, (, targetY, ,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX, >]
[,, tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&]
[tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&, (]
[tmpX, ,, y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&, (]
[y, ,, start, ,, end, ), ;, if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <]
[if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (]
[if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (]
[if, (, !, (, (, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (]
[!, (, (, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -]
[(, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=]
[(, nextX, >, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=]
[>, xA, ), &&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -]
[&&, (, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {]
[(, nextX, <, xB, ), ), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++]
[), ), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {]
[), {, if, (, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --]
[(, signChangeIndex, -, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }]
[-, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =]
[-, start, >=, end, -, signChangeIndex, ), {, ++, start, ;, }, else, {, --, end, ;, }, nextX, =]
[++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }, while, (]
[++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }, while, (]
[++, start, ;, }, else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }, while, (]
[else, {, --, end, ;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (]
[end, ;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&]
[;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (]
[;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (]
[;, }, nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (]
[nextX, =, Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (, end, -]
[Double, ., NaN, ;, }, }, while, (, Double, ., isNaN, (, nextX, ), &&, (, end, -, start, >]
[while, (, Double, ., isNaN, (, nextX, ), &&, (, end, -, start, >, 1, ), ), ;, if, (]
[while, (, Double, ., isNaN, (, nextX, ), &&, (, end, -, start, >, 1, ), ), ;, if, (]
[isNaN, (, nextX, ), &&, (, end, -, start, >, 1, ), ), ;, if, (, Double, ., isNaN, (]
[&&, (, end, -, start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {]
[end, -, start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =]
[end, -, start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =]
[start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +]
[start, >, 1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +]
[1, ), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *]
[), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (]
[), ), ;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (]
[;, if, (, Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB, -]
[Double, ., isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;]
[isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =]
[isNaN, (, nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =]
[nextX, ), ), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =, signChangeIndex, -]
[), {, nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =, signChangeIndex, -, 1, ;]
[nextX, =, xA, +, 0.5, *, (, xB, -, xA, ), ;, start, =, signChangeIndex, -, 1, ;, end, =]
[xB, -, xA, ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =]
[xA, ), ;, start, =, signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (]
[signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (]
[signChangeIndex, -, 1, ;, end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (]
[end, =, signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals, (]
[signChangeIndex, ;, }, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals, (, nextY, ,]
[}, final, double, nextY, =, computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals, (, nextY, ,, 0.0, ,]
[computeObjectiveValue, (, nextX, ), ;, if, (, Precision, ., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return]
[if, (, Precision, ., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (]
[if, (, Precision, ., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (]
[(, Precision, ., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (]
[(, Precision, ., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (]
[., equals, (, nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >]
[nextY, ,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&]
[,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (]
[,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (]
[,, 0.0, ,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (]
[,, 1, ), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -]
[), ), {, return, nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=]
[nextX, ;, }, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {]
[}, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =]
[}, if, (, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =]
[(, (, nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -]
[nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;]
[nbPoints, >, 2, ), &&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;]
[&&, (, end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (]
[end, -, start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,]
[start, !=, nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,]
[nbPoints, ), ), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,]
[), {, nbPoints, =, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,]
[=, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;]
[=, end, -, start, ;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;]
[;, System, ., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (]
[., arraycopy, (, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,]
[(, x, ,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,]
[,, start, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,]
[,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,]
[0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;]
[nbPoints, ), ;, System, ., arraycopy, (, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=]
[(, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (]
[(, y, ,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (]
[,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==]
[,, start, ,, y, ,, 0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==]
[0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {]
[0, ,, nbPoints, ), ;, signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {]
[signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (]
[signChangeIndex, -=, start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (]
[start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=]
[start, ;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=]
[;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (]
[;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (]
[;, }, else, if, (, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (]
[(, nbPoints, ==, x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +]
[x, ., length, ), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /]
[), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {]
[), {, nbPoints, --, ;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {]
[;, if, (, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (]
[(, signChangeIndex, >=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,]
[>=, (, x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,]
[x, ., length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,]
[length, +, 1, ), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,]
[), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;]
[), /, 2, ), {, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;]
[{, System, ., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (]
[., arraycopy, (, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,]
[(, x, ,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,]
[,, 1, ,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,]
[,, x, ,, 0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,]
[0, ,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;]
[,, nbPoints, ), ;, System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --]
[System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }]
[System, ., arraycopy, (, y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }]
[y, ,, 1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (]
[1, ,, y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,]
[y, ,, 0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,]
[0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,]
[0, ,, nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,]
[nbPoints, ), ;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +]
[;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,]
[;, --, signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,]
[signChangeIndex, ;, }, }, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -]
[}, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[}, System, ., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[., arraycopy, (, x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, []
[x, ,, signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =]
[signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;]
[signChangeIndex, ,, x, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;]
[signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (]
[1, ,, nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,]
[nbPoints, -, signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,]
[signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,]
[signChangeIndex, ), ;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,]
[;, x, [, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +]
[[, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,]
[[, signChangeIndex, ], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,]
[], =, nextX, ;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -]
[;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[;, System, ., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;]
[., arraycopy, (, y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, []
[y, ,, signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =]
[signChangeIndex, ,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;]
[,, y, ,, signChangeIndex, +, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (]
[+, 1, ,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (]
[,, nbPoints, -, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *]
[-, signChangeIndex, ), ;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=]
[;, y, [, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {]
[[, signChangeIndex, ], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =]
[], =, nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;]
[nextY, ;, ++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =]
[++, nbPoints, ;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;]
[;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =]
[;, if, (, nextY, *, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =]
[*, yA, <=, 0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (]
[0, ), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;]
[), {, xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++]
[xB, =, nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;]
[nextX, ;, yB, =, nextY, ;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB, =]
[;, absYB, =, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {]
[=, FastMath, ., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =]
[., abs, (, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;]
[(, yB, ), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =]
[), ;, ++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;]
[++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =]
[++, agingA, ;, agingB, =, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =]
[=, 0, ;, }, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (]
[}, else, {, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;]
[{, xA, =, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =]
[=, nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;]
[nextX, ;, yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;, ++]
[yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;, ++, agingB, ;]
[yA, =, nextY, ;, absYA, =, FastMath, ., abs, (, yA, ), ;, agingA, =, 0, ;, ++, agingB, ;]
[final, double, [, ], y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =]
[[, ], y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;]
[[, ], y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;]
[y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <]
[y, ,, final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <]
[final, int, start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <, end, -]
[start, ,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <, end, -, 1, ;]
[,, final, int, end, ), {, for, (, int, i, =, start, ;, i, <, end, -, 1, ;, ++]
[(, int, i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =]
[(, int, i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =]
[(, int, i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =]
[i, =, start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =, i, +]
[start, ;, i, <, end, -, 1, ;, ++, i, ), {, final, int, delta, =, i, +, 1, -]
[;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =]
[;, ++, i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =]
[i, ), {, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -]
[{, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;]
[{, final, int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;]
[int, delta, =, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;, j, >]
[=, i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;]
[i, +, 1, -, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --]
[-, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {]
[-, start, ;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {]
[;, for, (, int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, []
[int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =]
[int, j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =]
[j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (]
[j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (]
[j, =, end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (]
[end, -, 1, ;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (, x, []
[;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -]
[;, j, >, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -]
[>, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -, x, []
[>, i, ;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -, x, []
[;, --, j, ), {, x, [, j, ], =, (, x, [, j, ], -, x, [, j, -]
[{, x, [, j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], ), /]
[x, [, j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], ), /, (]
[x, [, j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], ), /, (]
[x, [, j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], ), /, (]
[j, ], =, (, x, [, j, ], -, x, [, j, -, 1, ], ), /, (, y, []
[(, x, [, j, ], -, x, [, j, -, 1, ], ), /, (, y, [, j, ], -]
[(, x, [, j, ], -, x, [, j, -, 1, ], ), /, (, y, [, j, ], -]
[[, j, ], -, x, [, j, -, 1, ], ), /, (, y, [, j, ], -, y, []
[[, j, ], -, x, [, j, -, 1, ], ), /, (, y, [, j, ], -, y, []
[], -, x, [, j, -, 1, ], ), /, (, y, [, j, ], -, y, [, j, -]
[/, (, y, [, j, ], -, y, [, j, -, delta, ], ), ;, }, }, double, x0, =]
[y, [, j, -, delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =]
[y, [, j, -, delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =]
[j, -, delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -]
[delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;]
[delta, ], ), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;]
[), ;, }, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=]
[}, }, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;]
[}, double, x0, =, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --]
[=, 0, ;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {]
[;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =]
[;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =]
[;, for, (, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =]
[(, int, j, =, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, []
[=, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +]
[=, end, -, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +]
[-, 1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *]
[1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (]
[1, ;, j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (]
[j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -]
[j, >=, start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -]
[start, ;, --, j, ), {, x0, =, x, [, j, ], +, x0, *, (, targetY, -, y, []
[x0, =, x, [, j, ], +, x0, *, (, targetY, -, y, [, j, ], ), ;, }, return]
[,, UnivariateFunction, f, ,, double, min, ,, double, max, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {]
[,, UnivariateFunction, f, ,, double, min, ,, double, max, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {]
[double, min, ,, double, max, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =]
[double, max, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return]
[double, max, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return]
[allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (]
[throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,]
[,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,]
[,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,]
[,, double, min, ,, double, max, ,, double, startValue, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {]
[,, double, min, ,, double, max, ,, double, startValue, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {]
[double, max, ,, double, startValue, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =]
[double, startValue, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return]
[double, startValue, ,, AllowedSolution, allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return]
[allowedSolution, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (]
[throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,]
[,, NumberIsTooLargeException, ,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,]
[,, NoBracketingException, {, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,]
[{, this, ., allowed, =, allowedSolution, ;, return, super, ., solve, (, maxEval, ,, f, ,, min, ,, max, ,]
