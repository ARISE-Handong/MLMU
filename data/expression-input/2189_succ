[;, }, public, static, String, wrap, (, final, String, str, ,, int, wrapLength, ,, String, newLineStr, ,, final, boolean, wrapLongWords]
[,, wrapLength, ,, null, ,, false, ), ;, }, public, static, String, wrap, (, final, String, str, ,, int, wrapLength]
[,, null, ,, false, ), ;, }, public, static, String, wrap, (, final, String, str, ,, int, wrapLength, ,, String]
[,, false, ), ;, }, public, static, String, wrap, (, final, String, str, ,, int, wrapLength, ,, String, newLineStr, ,]
[), ;, }, public, static, String, wrap, (, final, String, str, ,, int, wrapLength, ,, String, newLineStr, ,, final, boolean]
[), {, return, null, ;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }]
[==, null, ), {, return, null, ;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR]
[), {, return, null, ;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }]
[;, }, if, (, newLineStr, ==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <]
[), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =, 1, ;]
[==, null, ), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =]
[), {, newLineStr, =, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =, 1, ;]
[=, SystemUtils, ., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =, 1, ;, }, final, int]
[;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =, str, .]
[., LINE_SEPARATOR, ;, }, if, (, wrapLength, <, 1, ), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =]
[), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =, str, ., length, (, ), ;, int, offset, =]
[<, 1, ), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =, str, ., length, (, ), ;, int]
[), {, wrapLength, =, 1, ;, }, final, int, inputLineLength, =, str, ., length, (, ), ;, int, offset, =]
[=, 1, ;, }, final, int, inputLineLength, =, str, ., length, (, ), ;, int, offset, =, 0, ;, final]
[;, }, final, int, inputLineLength, =, str, ., length, (, ), ;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine]
[;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (]
[., length, (, ), ;, int, offset, =, 0, ;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32]
[;, final, StringBuilder, wrappedLine, =, new, StringBuilder, (, inputLineLength, +, 32, ), ;, while, (, inputLineLength, -, offset, >, wrapLength]
[;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==, ' ']
[), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==]
[+, 32, ), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset]
[), ;, while, (, inputLineLength, -, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==]
[), {, if, (, str, ., charAt, (, offset, ), ==, ' ', ), {, offset, ++, ;, continue, ;, }]
[>, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==, ' ', ), {, offset, ++, ;, continue]
[-, offset, >, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==, ' ', ), {, offset, ++]
[>, wrapLength, ), {, if, (, str, ., charAt, (, offset, ), ==, ' ', ), {, offset, ++, ;, continue]
[), {, if, (, str, ., charAt, (, offset, ), ==, ' ', ), {, offset, ++, ;, continue, ;, }]
[), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset]
[==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength]
[., charAt, (, offset, ), ==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, .]
[), ==, ' ', ), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,]
[), {, offset, ++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset]
[;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (]
[++, ;, continue, ;, }, int, spaceToWrapAt, =, str, ., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if]
[;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, )]
[., lastIndexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append]
[,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring]
[), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt]
[+, offset, ), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset]
[), ;, if, (, spaceToWrapAt, >=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt]
[), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (]
[>=, offset, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, .]
[), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (]
[;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords]
[., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;]
[), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (]
[., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +]
[,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else]
[), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if]
[;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str]
[., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {]
[), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (]
[=, spaceToWrapAt, +, 1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring]
[;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, wrapLength]
[+, 1, ;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset]
[;, }, else, {, if, (, wrapLongWords, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, wrapLength]
[), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, wrapLength, +, offset, ), ), ;, wrappedLine, .]
[;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf]
[., append, (, str, ., substring, (, offset, ,, wrapLength, +, offset, ), ), ;, wrappedLine, ., append, (, newLineStr]
[), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, .]
[., substring, (, offset, ,, wrapLength, +, offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=]
[,, wrapLength, +, offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else]
[), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str]
[+, offset, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt]
[), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str]
[;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, )]
[., append, (, newLineStr, ), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ']
[), ;, offset, +=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset]
[+=, wrapLength, ;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if]
[;, }, else, {, spaceToWrapAt, =, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt]
[=, str, ., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine]
[;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, )]
[., indexOf, (, ' ', ,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append]
[,, wrapLength, +, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring]
[), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt]
[+, offset, ), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset]
[), ;, if, (, spaceToWrapAt, >=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt]
[), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (]
[>=, 0, ), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, .]
[), {, wrappedLine, ., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (]
[;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append]
[., append, (, str, ., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;]
[), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, .]
[., substring, (, offset, ,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +]
[,, spaceToWrapAt, ), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else]
[), ), ;, wrappedLine, ., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine]
[;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset, )]
[., append, (, newLineStr, ), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (, str]
[), ;, offset, =, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset]
[=, spaceToWrapAt, +, 1, ;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;]
[;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;]
[+, 1, ;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, offset, =]
[;, }, else, {, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;]
[;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (, offset, ), )]
[., append, (, str, ., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine]
[), ;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (, offset, )]
[., substring, (, offset, ), ), ;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str]
[), ), ;, offset, =, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (, offset]
[=, inputLineLength, ;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, return]
[;, }, }, }, }, wrappedLine, ., append, (, str, ., substring, (, offset, ), ), ;, return, wrappedLine, .]
[;, return, wrappedLine, ., toString, (, ), ;, }, public, static, String, capitalize, (, final, String, str, ), {, return]
[., append, (, str, ., substring, (, offset, ), ), ;, return, wrappedLine, ., toString, (, ), ;, }, public]
[), ;, return, wrappedLine, ., toString, (, ), ;, }, public, static, String, capitalize, (, final, String, str, ), {]
[., substring, (, offset, ), ), ;, return, wrappedLine, ., toString, (, ), ;, }, public, static, String, capitalize, (]
[), ), ;, return, wrappedLine, ., toString, (, ), ;, }, public, static, String, capitalize, (, final, String, str, )]
[;, }, public, static, String, capitalize, (, final, String, str, ), {, return, capitalize, (, str, ,, null, ), ;]
[., toString, (, ), ;, }, public, static, String, capitalize, (, final, String, str, ), {, return, capitalize, (, str]
[;, }, public, static, String, capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen]
[,, null, ), ;, }, public, static, String, capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {]
[), ;, }, public, static, String, capitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int]
[;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final]
[?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0]
[==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen]
[?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final]
[., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;]
[), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext]
[||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (]
[., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer]
[), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray]
[), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext]
[==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;]
[), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext]
[;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, capitalizeNext, =, true, ;, for]
[;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;, i]
[., toCharArray, (, ), ;, boolean, capitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer]
[;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char]
[;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,]
[<, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,]
[., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (]
[), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), )]
[++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, )]
[;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext]
[[, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else]
[], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (]
[), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =, Character, .]
[,, delimiters, ), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ]]
[), ), {, capitalizeNext, =, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =, Character]
[=, true, ;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch]
[;, }, else, if, (, capitalizeNext, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;]
[), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, capitalizeNext, =, false, ;, }, }]
[=, Character, ., toTitleCase, (, ch, ), ;, capitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, )]
[[, i, ], =, Character, ., toTitleCase, (, ch, ), ;, capitalizeNext, =, false, ;, }, }, return, new, String]
[], =, Character, ., toTitleCase, (, ch, ), ;, capitalizeNext, =, false, ;, }, }, return, new, String, (, buffer]
[;, capitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, capitalizeFully, (]
[., toTitleCase, (, ch, ), ;, capitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, ), ;, }]
[), ;, capitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, capitalizeFully]
[=, false, ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, capitalizeFully, (, final, String]
[;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, capitalizeFully, (, final, String, str, )]
[;, }, public, static, String, capitalizeFully, (, final, String, str, ), {, return, capitalizeFully, (, str, ,, null, ), ;]
[), ;, }, public, static, String, capitalizeFully, (, final, String, str, ), {, return, capitalizeFully, (, str, ,, null, )]
[;, }, public, static, String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen, =]
[,, null, ), ;, }, public, static, String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final]
[), ;, }, public, static, String, capitalizeFully, (, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen]
[;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, str]
[?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0]
[==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen]
[?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, str]
[., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;]
[), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize, (, str, ,, delimiters]
[||, delimLen, ==, 0, ), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize]
[., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, str, =, str, ., toLowerCase]
[), ||, delimLen, ==, 0, ), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return]
[), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize, (, str, ,, delimiters]
[==, 0, ), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize, (, str]
[), {, return, str, ;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize, (, str, ,, delimiters]
[;, }, str, =, str, ., toLowerCase, (, ), ;, return, capitalize, (, str, ,, delimiters, ), ;, }, public]
[=, str, ., toLowerCase, (, ), ;, return, capitalize, (, str, ,, delimiters, ), ;, }, public, static, String, uncapitalize]
[;, return, capitalize, (, str, ,, delimiters, ), ;, }, public, static, String, uncapitalize, (, final, String, str, ), {]
[., toLowerCase, (, ), ;, return, capitalize, (, str, ,, delimiters, ), ;, }, public, static, String, uncapitalize, (, final]
[;, }, public, static, String, uncapitalize, (, final, String, str, ), {, return, uncapitalize, (, str, ,, null, ), ;]
[,, delimiters, ), ;, }, public, static, String, uncapitalize, (, final, String, str, ), {, return, uncapitalize, (, str, ,]
[), ;, }, public, static, String, uncapitalize, (, final, String, str, ), {, return, uncapitalize, (, str, ,, null, )]
[;, }, public, static, String, uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int, delimLen]
[,, null, ), ;, }, public, static, String, uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {]
[), ;, }, public, static, String, uncapitalize, (, final, String, str, ,, final, char, ..., delimiters, ), {, final, int]
[;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final]
[?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0]
[==, null, ?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen]
[?, -, 1, :, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[:, delimiters, ., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return]
[;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final]
[., length, ;, if, (, StringUtils, ., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;]
[), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext]
[||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (]
[., isEmpty, (, str, ), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer]
[), ||, delimLen, ==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray]
[), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext]
[==, 0, ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;]
[), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext]
[;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, uncapitalizeNext, =, true, ;, for]
[;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;, i]
[., toCharArray, (, ), ;, boolean, uncapitalizeNext, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer]
[;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char]
[;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,]
[<, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,]
[., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (]
[), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), )]
[++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, )]
[;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext]
[[, i, ], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else]
[], ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (]
[), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =, Character, .]
[,, delimiters, ), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ]]
[), ), {, uncapitalizeNext, =, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =, Character]
[=, true, ;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch]
[;, }, else, if, (, uncapitalizeNext, ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;]
[), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, uncapitalizeNext, =, false, ;, }, }]
[=, Character, ., toLowerCase, (, ch, ), ;, uncapitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, )]
[[, i, ], =, Character, ., toLowerCase, (, ch, ), ;, uncapitalizeNext, =, false, ;, }, }, return, new, String]
[], =, Character, ., toLowerCase, (, ch, ), ;, uncapitalizeNext, =, false, ;, }, }, return, new, String, (, buffer]
[;, uncapitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, swapCase, (]
[., toLowerCase, (, ch, ), ;, uncapitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, ), ;, }]
[), ;, uncapitalizeNext, =, false, ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, swapCase]
[=, false, ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, swapCase, (, final, String]
[;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, swapCase, (, final, String, str, )]
[;, }, public, static, String, swapCase, (, final, String, str, ), {, if, (, StringUtils, ., isEmpty, (, str, )]
[), ;, }, public, static, String, swapCase, (, final, String, str, ), {, if, (, StringUtils, ., isEmpty, (, str]
[), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, whitespace]
[., isEmpty, (, str, ), ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray]
[), ), {, return, str, ;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean]
[;, }, final, char, [, ], buffer, =, str, ., toCharArray, (, ), ;, boolean, whitespace, =, true, ;, for]
[;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;, i]
[., toCharArray, (, ), ;, boolean, whitespace, =, true, ;, for, (, int, i, =, 0, ;, i, <, buffer]
[;, for, (, int, i, =, 0, ;, i, <, buffer, ., length, ;, i, ++, ), {, final, char]
[;, i, <, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (]
[<, buffer, ., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (]
[;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (]
[., length, ;, i, ++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, .]
[), {, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (, ch, ), )]
[++, ), {, final, char, ch, =, buffer, [, i, ], ;, if, (, Character, ., isUpperCase, (, ch, )]
[;, if, (, Character, ., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (]
[[, i, ], ;, if, (, Character, ., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =, Character]
[], ;, if, (, Character, ., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase]
[), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else]
[., isUpperCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace]
[), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }]
[=, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (]
[[, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character]
[], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase]
[;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, [, i]
[., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, )]
[), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, []
[=, false, ;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, [, i, ], =]
[;, }, else, if, (, Character, ., isTitleCase, (, ch, ), ), {, buffer, [, i, ], =, Character, .]
[), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else]
[., isTitleCase, (, ch, ), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace]
[), ), {, buffer, [, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }]
[=, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isLowerCase, (]
[[, i, ], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character]
[], =, Character, ., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isLowerCase]
[;, whitespace, =, false, ;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace]
[., toLowerCase, (, ch, ), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isLowerCase, (, ch, )]
[), ;, whitespace, =, false, ;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (]
[=, false, ;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {]
[;, }, else, if, (, Character, ., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {, buffer, []
[), {, if, (, whitespace, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, whitespace]
[., isLowerCase, (, ch, ), ), {, if, (, whitespace, ), {, buffer, [, i, ], =, Character, ., toTitleCase]
[), ), {, if, (, whitespace, ), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;]
[), {, buffer, [, i, ], =, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else]
[=, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, [, i, ], =]
[[, i, ], =, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, []
[], =, Character, ., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, [, i, ]]
[;, whitespace, =, false, ;, }, else, {, buffer, [, i, ], =, Character, ., toUpperCase, (, ch, ), ;]
[., toTitleCase, (, ch, ), ;, whitespace, =, false, ;, }, else, {, buffer, [, i, ], =, Character, .]
[), ;, whitespace, =, false, ;, }, else, {, buffer, [, i, ], =, Character, ., toUpperCase, (, ch, )]
[=, false, ;, }, else, {, buffer, [, i, ], =, Character, ., toUpperCase, (, ch, ), ;, }, }]
[;, }, else, {, buffer, [, i, ], =, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {]
[=, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (, ch, )]
[[, i, ], =, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {, whitespace, =, Character, ., isWhitespace]
[], =, Character, ., toUpperCase, (, ch, ), ;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (, ch]
[;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (, ch, ), ;, }, }, return, new, String, (]
[., toUpperCase, (, ch, ), ;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (, ch, ), ;, }]
[), ;, }, }, else, {, whitespace, =, Character, ., isWhitespace, (, ch, ), ;, }, }, return, new, String]
[=, Character, ., isWhitespace, (, ch, ), ;, }, }, return, new, String, (, buffer, ), ;, }, public, static]
[;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, initials, (, final, String, str, )]
[., isWhitespace, (, ch, ), ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, initials]
[), ;, }, }, return, new, String, (, buffer, ), ;, }, public, static, String, initials, (, final, String, str]
[;, }, public, static, String, initials, (, final, String, str, ), {, return, initials, (, str, ,, null, ), ;]
[), ;, }, public, static, String, initials, (, final, String, str, ), {, return, initials, (, str, ,, null, )]
[;, }, public, static, String, initials, (, final, String, str, ,, final, char, ..., delimiters, ), {, if, (, StringUtils]
[,, null, ), ;, }, public, static, String, initials, (, final, String, str, ,, final, char, ..., delimiters, ), {]
[), ;, }, public, static, String, initials, (, final, String, str, ,, final, char, ..., delimiters, ), {, if, (]
[), {, return, str, ;, }, if, (, delimiters, !=, null, &&, delimiters, ., length, ==, 0, ), {, return]
[., isEmpty, (, str, ), ), {, return, str, ;, }, if, (, delimiters, !=, null, &&, delimiters, ., length]
[), ), {, return, str, ;, }, if, (, delimiters, !=, null, &&, delimiters, ., length, ==, 0, ), {]
[;, }, if, (, delimiters, !=, null, &&, delimiters, ., length, ==, 0, ), {, return, "", ;, }, final]
[), {, return, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ]]
[&&, delimiters, ., length, ==, 0, ), {, return, "", ;, }, final, int, strLen, =, str, ., length, (]
[!=, null, &&, delimiters, ., length, ==, 0, ), {, return, "", ;, }, final, int, strLen, =, str, .]
[&&, delimiters, ., length, ==, 0, ), {, return, "", ;, }, final, int, strLen, =, str, ., length, (]
[), {, return, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ]]
[==, 0, ), {, return, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, final, char]
[., length, ==, 0, ), {, return, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;]
[), {, return, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ]]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, final, char, [, ], buf, =, new, char]
[;, final, char, [, ], buf, =, new, char, [, strLen, /, 2, +, 1, ], ;, int, count, =]
[., length, (, ), ;, final, char, [, ], buf, =, new, char, [, strLen, /, 2, +, 1, ]]
[;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;, i, <]
[], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;, i]
[+, 1, ], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0]
[/, 2, +, 1, ], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i]
[+, 1, ], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0]
[], ;, int, count, =, 0, ;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;, i]
[;, boolean, lastWasGap, =, true, ;, for, (, int, i, =, 0, ;, i, <, strLen, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, strLen, ;, i, ++, ), {, final, char, ch, =]
[;, i, <, strLen, ;, i, ++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;]
[;, i, ++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (]
[<, strLen, ;, i, ++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (]
[;, i, ++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (]
[), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (, ch, ,, delimiters]
[++, ), {, final, char, ch, =, str, ., charAt, (, i, ), ;, if, (, isDelimiter, (, ch, ,]
[;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap]
[., charAt, (, i, ), ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;]
[), ;, if, (, isDelimiter, (, ch, ,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (]
[), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++, ], =, ch]
[,, delimiters, ), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++]
[), ), {, lastWasGap, =, true, ;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++, ], =]
[=, true, ;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++, ], =, ch, ;, lastWasGap, =]
[;, }, else, if, (, lastWasGap, ), {, buf, [, count, ++, ], =, ch, ;, lastWasGap, =, false, ;]
[), {, buf, [, count, ++, ], =, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }]
[=, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new, String, (, buf, ,]
[[, count, ++, ], =, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new]
[], =, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new, String, (, buf]
[++, ], =, ch, ;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new, String, (]
[;, lastWasGap, =, false, ;, }, else, {, continue, ;, }, }, return, new, String, (, buf, ,, 0, ,]
[=, false, ;, }, else, {, continue, ;, }, }, return, new, String, (, buf, ,, 0, ,, count, )]
[;, }, else, {, continue, ;, }, }, return, new, String, (, buf, ,, 0, ,, count, ), ;, }]
[;, }, private, static, boolean, isDelimiter, (, final, char, ch, ,, final, char, [, ], delimiters, ), {, if, (]
[,, 0, ,, count, ), ;, }, private, static, boolean, isDelimiter, (, final, char, ch, ,, final, char, [, ]]
[,, count, ), ;, }, private, static, boolean, isDelimiter, (, final, char, ch, ,, final, char, [, ], delimiters, )]
[), ;, }, private, static, boolean, isDelimiter, (, final, char, ch, ,, final, char, [, ], delimiters, ), {, if]
[), {, return, Character, ., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :, delimiters, ), {]
[==, null, ), {, return, Character, ., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :, delimiters]
[), {, return, Character, ., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :, delimiters, ), {]
[;, }, for, (, final, char, delimiter, :, delimiters, ), {, if, (, ch, ==, delimiter, ), {, return, true]
[., isWhitespace, (, ch, ), ;, }, for, (, final, char, delimiter, :, delimiters, ), {, if, (, ch, ==]
[), ;, }, for, (, final, char, delimiter, :, delimiters, ), {, if, (, ch, ==, delimiter, ), {, return]
[), {, if, (, ch, ==, delimiter, ), {, return, true, ;, }, }, return, false, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[==, delimiter, ), {, return, true, ;, }, }, return, false, ;, }, }]
[), {, return, true, ;, }, }, return, false, ;, }, }]
[;, }, }, return, false, ;, }, }]
[;, }, }]
