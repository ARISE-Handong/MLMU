[., commons, ., math3, ., util, ., FastMath, ;, public, abstract, class, AbstractRandomGenerator, implements, RandomGenerator, {, private, double, cachedNormalDeviate, =]
[., commons, ., math3, ., util, ., FastMath, ;, public, abstract, class, AbstractRandomGenerator, implements, RandomGenerator, {, private, double, cachedNormalDeviate, =]
[Double, ., NaN, ;, public, AbstractRandomGenerator, (, ), {, super, (, ), ;, }, public, void, clear, (, ), {]
[NaN, ;, public, AbstractRandomGenerator, (, ), {, super, (, ), ;, }, public, void, clear, (, ), {, cachedNormalDeviate, =]
[NaN, ;, public, AbstractRandomGenerator, (, ), {, super, (, ), ;, }, public, void, clear, (, ), {, cachedNormalDeviate, =]
[void, clear, (, ), {, cachedNormalDeviate, =, Double, ., NaN, ;, }, public, void, setSeed, (, int, seed, ), {]
[(, ), {, cachedNormalDeviate, =, Double, ., NaN, ;, }, public, void, setSeed, (, int, seed, ), {, setSeed, (]
[cachedNormalDeviate, =, Double, ., NaN, ;, }, public, void, setSeed, (, int, seed, ), {, setSeed, (, (, long, )]
[long, ), seed, ), ;, }, public, void, setSeed, (, int, [, ], seed, ), {, final, long, prime, =]
[}, public, void, setSeed, (, int, [, ], seed, ), {, final, long, prime, =, 4294967291l, ;, long, combined, =]
[], seed, ), {, final, long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :]
[{, final, long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {]
[long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =]
[long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =]
[long, prime, =, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =]
[=, 4294967291l, ;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *]
[;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +]
[=, 0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +, s, ;, }]
[;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +, s, ;, }, setSeed, (]
[void, setSeed, (, long, seed, ), ;, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, bytesOut, =]
[seed, ), ;, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, bytesOut, =, 0, ;, while, (]
[seed, ), ;, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, bytesOut, =, 0, ;, while, (]
[;, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, bytesOut, =, 0, ;, while, (, bytesOut, <]
[;, public, void, nextBytes, (, byte, [, ], bytes, ), {, int, bytesOut, =, 0, ;, while, (, bytesOut, <]
[bytes, ), {, int, bytesOut, =, 0, ;, while, (, bytesOut, <, bytes, ., length, ), {, int, randInt, =]
[(, bytesOut, <, bytes, ., length, ), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =]
[<, bytes, ., length, ), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;]
[<, bytes, ., length, ), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;]
[., length, ), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, 3, ;]
[), {, int, randInt, =, nextInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, 3, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, 3, ;, i, ++, ), {, if, (]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, 3, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, 3, ;, i, ++, ), {, if, (, i, >]
[int, i, =, 0, ;, i, <, 3, ;, i, ++, ), {, if, (, i, >, 0, ), {]
[=, 0, ;, i, <, 3, ;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =]
[=, 0, ;, i, <, 3, ;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =]
[i, <, 3, ;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >]
[;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }]
[;, i, ++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }]
[++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }, bytes, []
[++, ), {, if, (, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }, bytes, []
[(, i, >, 0, ), {, randInt, =, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =]
[0, ), {, randInt, =, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, )]
[=, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (]
[=, randInt, >, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (]
[>, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (, bytesOut, ==]
[>, >, 8, ;, }, bytes, [, bytesOut, ++, ], =, (, byte, ), randInt, ;, if, (, bytesOut, ==]
[bytesOut, ==, bytes, ., length, ), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return]
[., length, ), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, )]
[length, ), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (]
[length, ), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (]
[), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (, (]
[), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (, (]
[), {, return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (, (]
[return, ;, }, }, }, }, public, int, nextInt, (, ), {, return, (, int, ), (, (, 2d, *]
[}, }, public, int, nextInt, (, ), {, return, (, int, ), (, (, 2d, *, nextDouble, (, ), -]
[int, nextInt, (, ), {, return, (, int, ), (, (, 2d, *, nextDouble, (, ), -, 1d, ), *]
[int, nextInt, (, ), {, return, (, int, ), (, (, 2d, *, nextDouble, (, ), -, 1d, ), *]
[-, 1d, ), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (]
[-, 1d, ), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (]
[), *, Integer, ., MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=]
[MAX_VALUE, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw]
[}, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =]
[(, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =, (, int, )]
[n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =, (, int, ), (]
[n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =, (, int, ), (]
[{, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, int, result, =, (, int, ), (, nextDouble, (, ), *]
[(, n, ), ;, }, int, result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return]
[(, n, ), ;, }, int, result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return]
[(, n, ), ;, }, int, result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return]
[), ;, }, int, result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return, result, <]
[}, int, result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return, result, <, n, ?]
[result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return, result, <, n, ?, result, :]
[result, =, (, int, ), (, nextDouble, (, ), *, n, ), ;, return, result, <, n, ?, result, :]
[(, int, ), (, nextDouble, (, ), *, n, ), ;, return, result, <, n, ?, result, :, n, -]
[;, return, result, <, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return]
[<, n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, )]
[n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (]
[n, ?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (]
[?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (]
[?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (]
[?, result, :, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (]
[:, n, -, 1, ;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *]
[;, }, public, long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *, nextDouble, (, ), -]
[long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *, nextDouble, (, ), -, 1d, ), *]
[long, nextLong, (, ), {, return, (, long, ), (, (, 2d, *, nextDouble, (, ), -, 1d, ), *]
[nextDouble, (, ), -, 1d, ), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return]
[nextDouble, (, ), -, 1d, ), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return]
[1d, ), *, Long, ., MAX_VALUE, ), ;, }, public, boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=]
[boolean, nextBoolean, (, ), {, return, nextDouble, (, ), <=, 0.5, ;, }, public, float, nextFloat, (, ), {, return]
[), {, return, nextDouble, (, ), <=, 0.5, ;, }, public, float, nextFloat, (, ), {, return, (, float, )]
[nextDouble, (, ), ;, }, public, abstract, double, nextDouble, (, ), ;, public, double, nextGaussian, (, ), {, if, (]
[(, ), ;, }, public, abstract, double, nextDouble, (, ), ;, public, double, nextGaussian, (, ), {, if, (, !]
[(, ), ;, }, public, abstract, double, nextDouble, (, ), ;, public, double, nextGaussian, (, ), {, if, (, !]
[public, abstract, double, nextDouble, (, ), ;, public, double, nextGaussian, (, ), {, if, (, !, Double, ., isNaN, (]
[public, double, nextGaussian, (, ), {, if, (, !, Double, ., isNaN, (, cachedNormalDeviate, ), ), {, double, dev, =]
[nextGaussian, (, ), {, if, (, !, Double, ., isNaN, (, cachedNormalDeviate, ), ), {, double, dev, =, cachedNormalDeviate, ;]
[), {, if, (, !, Double, ., isNaN, (, cachedNormalDeviate, ), ), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =]
[), {, if, (, !, Double, ., isNaN, (, cachedNormalDeviate, ), ), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =]
[Double, ., isNaN, (, cachedNormalDeviate, ), ), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =, Double, ., NaN, ;, return]
[), {, double, dev, =, cachedNormalDeviate, ;, cachedNormalDeviate, =, Double, ., NaN, ;, return, dev, ;, }, double, v1, =]
[cachedNormalDeviate, ;, cachedNormalDeviate, =, Double, ., NaN, ;, return, dev, ;, }, double, v1, =, 0, ;, double, v2, =]
[., NaN, ;, return, dev, ;, }, double, v1, =, 0, ;, double, v2, =, 0, ;, double, s, =]
[dev, ;, }, double, v1, =, 0, ;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (]
[dev, ;, }, double, v1, =, 0, ;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (]
[}, double, v1, =, 0, ;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (, s, >=]
[=, 0, ;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (, s, >=, 1, ), {]
[;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (, s, >=, 1, ), {, v1, =]
[;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (, s, >=, 1, ), {, v1, =]
[;, double, v2, =, 0, ;, double, s, =, 1, ;, while, (, s, >=, 1, ), {, v1, =]
[v2, =, 0, ;, double, s, =, 1, ;, while, (, s, >=, 1, ), {, v1, =, 2, *]
[double, s, =, 1, ;, while, (, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -]
[=, 1, ;, while, (, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;]
[;, while, (, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =]
[;, while, (, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =]
[;, while, (, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =]
[(, s, >=, 1, ), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *]
[), {, v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -]
[v1, =, 2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;]
[2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =]
[2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =]
[2, *, nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =]
[nextDouble, (, ), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *]
[), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +]
[), -, 1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +]
[1, ;, v2, =, 2, *, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2, *]
[*, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (]
[*, nextDouble, (, ), -, 1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (]
[(, ), -, 1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=]
[1, ;, s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {]
[s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =]
[s, =, v1, *, v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =]
[v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (]
[v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (]
[v1, +, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (]
[+, v2, *, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -]
[*, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *]
[*, v2, ;, }, if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *]
[if, (, s, !=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (]
[!=, 0, ), {, s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /]
[s, =, FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, ), ;, }]
[FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =]
[FastMath, ., sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =]
[sqrt, (, -, 2, *, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2, *]
[2, *, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return]
[2, *, FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return]
[FastMath, ., log, (, s, ), /, s, ), ;, }, cachedNormalDeviate, =, v2, *, s, ;, return, v1, *]
