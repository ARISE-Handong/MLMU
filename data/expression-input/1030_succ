[), {, return, (, s2, ==, null, ), ;, }, if, (, s2, ==, null, ), {, return, false, ;]
[==, null, ), {, return, (, s2, ==, null, ), ;, }, if, (, s2, ==, null, ), {, return]
[), {, return, (, s2, ==, null, ), ;, }, if, (, s2, ==, null, ), {, return, false, ;]
[;, }, if, (, s2, ==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator, (]
[), ;, }, if, (, s2, ==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator]
[==, null, ), ;, }, if, (, s2, ==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1]
[), ;, }, if, (, s2, ==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator]
[), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =, s2, .]
[==, null, ), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =]
[), {, return, false, ;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =, s2, .]
[;, }, AttributedCharacterIterator, it1, =, s1, ., getIterator, (, ), ;, AttributedCharacterIterator, it2, =, s2, ., getIterator, (, ), ;]
[;, AttributedCharacterIterator, it2, =, s2, ., getIterator, (, ), ;, char, c1, =, it1, ., first, (, ), ;, char]
[., getIterator, (, ), ;, AttributedCharacterIterator, it2, =, s2, ., getIterator, (, ), ;, char, c1, =, it1, ., first]
[;, char, c1, =, it1, ., first, (, ), ;, char, c2, =, it2, ., first, (, ), ;, int]
[., getIterator, (, ), ;, char, c1, =, it1, ., first, (, ), ;, char, c2, =, it2, ., first]
[;, char, c2, =, it2, ., first, (, ), ;, int, start, =, 0, ;, while, (, c1, !=, CharacterIterator]
[., first, (, ), ;, char, c2, =, it2, ., first, (, ), ;, int, start, =, 0, ;, while]
[;, int, start, =, 0, ;, while, (, c1, !=, CharacterIterator, ., DONE, ), {, int, limit1, =, it1, .]
[., first, (, ), ;, int, start, =, 0, ;, while, (, c1, !=, CharacterIterator, ., DONE, ), {, int]
[;, while, (, c1, !=, CharacterIterator, ., DONE, ), {, int, limit1, =, it1, ., getRunLimit, (, ), ;, int]
[), {, int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =, it2, ., getRunLimit, (, ), ;]
[!=, CharacterIterator, ., DONE, ), {, int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =, it2, .]
[), {, int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =, it2, ., getRunLimit, (, ), ;]
[., DONE, ), {, int, limit1, =, it1, ., getRunLimit, (, ), ;, int, limit2, =, it2, ., getRunLimit, (]
[;, int, limit2, =, it2, ., getRunLimit, (, ), ;, if, (, limit1, !=, limit2, ), {, return, false, ;]
[., getRunLimit, (, ), ;, int, limit2, =, it2, ., getRunLimit, (, ), ;, if, (, limit1, !=, limit2, )]
[;, if, (, limit1, !=, limit2, ), {, return, false, ;, }, Map, m1, =, it1, ., getAttributes, (, )]
[., getRunLimit, (, ), ;, if, (, limit1, !=, limit2, ), {, return, false, ;, }, Map, m1, =, it1]
[), {, return, false, ;, }, Map, m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =, it2, .]
[!=, limit2, ), {, return, false, ;, }, Map, m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =]
[), {, return, false, ;, }, Map, m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =, it2, .]
[;, }, Map, m1, =, it1, ., getAttributes, (, ), ;, Map, m2, =, it2, ., getAttributes, (, ), ;]
[;, Map, m2, =, it2, ., getAttributes, (, ), ;, if, (, !, m1, ., equals, (, m2, ), )]
[., getAttributes, (, ), ;, Map, m2, =, it2, ., getAttributes, (, ), ;, if, (, !, m1, ., equals]
[;, if, (, !, m1, ., equals, (, m2, ), ), {, return, false, ;, }, for, (, int, i]
[., getAttributes, (, ), ;, if, (, !, m1, ., equals, (, m2, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, for, (, int, i, =, start, ;, i, <, limit1, ;, i, ++, )]
[), {, return, false, ;, }, for, (, int, i, =, start, ;, i, <, limit1, ;, i, ++, )]
[., equals, (, m2, ), ), {, return, false, ;, }, for, (, int, i, =, start, ;, i, <]
[), ), {, return, false, ;, }, for, (, int, i, =, start, ;, i, <, limit1, ;, i, ++]
[;, }, for, (, int, i, =, start, ;, i, <, limit1, ;, i, ++, ), {, if, (, c1]
[;, i, <, limit1, ;, i, ++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }]
[;, i, ++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =, it1, .]
[<, limit1, ;, i, ++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =]
[;, i, ++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =, it1, .]
[), {, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =, it1, ., next, (, )]
[++, ), {, if, (, c1, !=, c2, ), {, return, false, ;, }, c1, =, it1, ., next, (]
[), {, return, false, ;, }, c1, =, it1, ., next, (, ), ;, c2, =, it2, ., next, (]
[!=, c2, ), {, return, false, ;, }, c1, =, it1, ., next, (, ), ;, c2, =, it2, .]
[), {, return, false, ;, }, c1, =, it1, ., next, (, ), ;, c2, =, it2, ., next, (]
[;, }, c1, =, it1, ., next, (, ), ;, c2, =, it2, ., next, (, ), ;, }, start]
[=, it1, ., next, (, ), ;, c2, =, it2, ., next, (, ), ;, }, start, =, limit1, ;]
[;, c2, =, it2, ., next, (, ), ;, }, start, =, limit1, ;, }, return, c2, ==, CharacterIterator, .]
[., next, (, ), ;, c2, =, it2, ., next, (, ), ;, }, start, =, limit1, ;, }, return]
[=, it2, ., next, (, ), ;, }, start, =, limit1, ;, }, return, c2, ==, CharacterIterator, ., DONE, ;]
[;, }, start, =, limit1, ;, }, return, c2, ==, CharacterIterator, ., DONE, ;, }, }]
[., next, (, ), ;, }, start, =, limit1, ;, }, return, c2, ==, CharacterIterator, ., DONE, ;, }, }]
[=, limit1, ;, }, return, c2, ==, CharacterIterator, ., DONE, ;, }, }]
[;, }, return, c2, ==, CharacterIterator, ., DONE, ;, }, }]
[;, }, }]
[==, CharacterIterator, ., DONE, ;, }, }]
[;, }, }]
[., DONE, ;, }, }]
