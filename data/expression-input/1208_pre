[public, class, StrBuilder, implements, CharSequence, ,, Appendable, ,, Serializable, ,, Builder, <, String, >, {, static, final, int, CAPACITY, =]
[Serializable, ,, Builder, <, String, >, {, static, final, int, CAPACITY, =, 32, ;, private, static, final, long, serialVersionUID, =]
[;, protected, int, size, ;, private, String, newLine, ;, private, String, nullText, ;, public, StrBuilder, (, ), {, this, (]
[{, this, (, CAPACITY, ), ;, }, public, StrBuilder, (, int, initialCapacity, ), {, super, (, ), ;, if, (]
[{, this, (, CAPACITY, ), ;, }, public, StrBuilder, (, int, initialCapacity, ), {, super, (, ), ;, if, (]
[(, CAPACITY, ), ;, }, public, StrBuilder, (, int, initialCapacity, ), {, super, (, ), ;, if, (, initialCapacity, <=]
[;, }, public, StrBuilder, (, int, initialCapacity, ), {, super, (, ), ;, if, (, initialCapacity, <=, 0, ), {]
[public, StrBuilder, (, int, initialCapacity, ), {, super, (, ), ;, if, (, initialCapacity, <=, 0, ), {, initialCapacity, =]
[int, initialCapacity, ), {, super, (, ), ;, if, (, initialCapacity, <=, 0, ), {, initialCapacity, =, CAPACITY, ;, }]
[), {, super, (, ), ;, if, (, initialCapacity, <=, 0, ), {, initialCapacity, =, CAPACITY, ;, }, buffer, =]
[(, ), ;, if, (, initialCapacity, <=, 0, ), {, initialCapacity, =, CAPACITY, ;, }, buffer, =, new, char, []
[char, [, initialCapacity, ], ;, }, public, StrBuilder, (, final, String, str, ), {, super, (, ), ;, if, (]
[char, [, initialCapacity, ], ;, }, public, StrBuilder, (, final, String, str, ), {, super, (, ), ;, if, (]
[initialCapacity, ], ;, }, public, StrBuilder, (, final, String, str, ), {, super, (, ), ;, if, (, str, ==]
[}, public, StrBuilder, (, final, String, str, ), {, super, (, ), ;, if, (, str, ==, null, ), {]
[StrBuilder, (, final, String, str, ), {, super, (, ), ;, if, (, str, ==, null, ), {, buffer, =]
[String, str, ), {, super, (, ), ;, if, (, str, ==, null, ), {, buffer, =, new, char, []
[), ;, if, (, str, ==, null, ), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {]
[if, (, str, ==, null, ), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =]
[==, null, ), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, []
[==, null, ), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, []
[==, null, ), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, []
[new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, [, str, ., length, (, ), +]
[CAPACITY, ], ;, }, else, {, buffer, =, new, char, [, str, ., length, (, ), +, CAPACITY, ], ;]
[;, }, else, {, buffer, =, new, char, [, str, ., length, (, ), +, CAPACITY, ], ;, append, (]
[(, ), +, CAPACITY, ], ;, append, (, str, ), ;, }, }, public, String, getNewLineText, (, ), {, return]
[}, public, String, getNewLineText, (, ), {, return, newLine, ;, }, public, StrBuilder, setNewLineText, (, final, String, newLine, ), {]
[}, public, String, getNewLineText, (, ), {, return, newLine, ;, }, public, StrBuilder, setNewLineText, (, final, String, newLine, ), {]
[(, ), {, return, newLine, ;, }, public, StrBuilder, setNewLineText, (, final, String, newLine, ), {, this, ., newLine, =]
[return, newLine, ;, }, public, StrBuilder, setNewLineText, (, final, String, newLine, ), {, this, ., newLine, =, newLine, ;, return]
[newLine, ), {, this, ., newLine, =, newLine, ;, return, this, ;, }, public, String, getNullText, (, ), {, return]
[public, String, getNullText, (, ), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String, nullText, ), {, if, (]
[public, String, getNullText, (, ), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String, nullText, ), {, if, (]
[public, String, getNullText, (, ), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String, nullText, ), {, if, (]
[getNullText, (, ), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String, nullText, ), {, if, (, nullText, !=]
[), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String, nullText, ), {, if, (, nullText, !=, null, &&]
[), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String, nullText, ), {, if, (, nullText, !=, null, &&]
[StrBuilder, setNullText, (, String, nullText, ), {, if, (, nullText, !=, null, &&, nullText, ., isEmpty, (, ), ), {]
[(, String, nullText, ), {, if, (, nullText, !=, null, &&, nullText, ., isEmpty, (, ), ), {, nullText, =]
[), {, if, (, nullText, !=, null, &&, nullText, ., isEmpty, (, ), ), {, nullText, =, null, ;, }]
[), {, if, (, nullText, !=, null, &&, nullText, ., isEmpty, (, ), ), {, nullText, =, null, ;, }]
[nullText, !=, null, &&, nullText, ., isEmpty, (, ), ), {, nullText, =, null, ;, }, this, ., nullText, =]
[&&, nullText, ., isEmpty, (, ), ), {, nullText, =, null, ;, }, this, ., nullText, =, nullText, ;, return]
[}, this, ., nullText, =, nullText, ;, return, this, ;, }, @, Override, public, int, length, (, ), {, return]
[int, length, (, ), {, return, size, ;, }, public, StrBuilder, setLength, (, final, int, length, ), {, if, (]
[int, length, (, ), {, return, size, ;, }, public, StrBuilder, setLength, (, final, int, length, ), {, if, (]
[(, ), {, return, size, ;, }, public, StrBuilder, setLength, (, final, int, length, ), {, if, (, length, <]
[size, ;, }, public, StrBuilder, setLength, (, final, int, length, ), {, if, (, length, <, 0, ), {, throw]
[public, StrBuilder, setLength, (, final, int, length, ), {, if, (, length, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (]
[length, ), {, if, (, length, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (]
[length, ), {, if, (, length, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (]
[{, if, (, length, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (, length, <]
[length, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (, length, <, size, ), {]
[0, ), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (, length, <, size, ), {, size, =]
[(, length, ), ;, }, if, (, length, <, size, ), {, size, =, length, ;, }, else, if, (]
[(, length, ), ;, }, if, (, length, <, size, ), {, size, =, length, ;, }, else, if, (]
[), ;, }, if, (, length, <, size, ), {, size, =, length, ;, }, else, if, (, length, >]
[if, (, length, <, size, ), {, size, =, length, ;, }, else, if, (, length, >, size, ), {]
[length, <, size, ), {, size, =, length, ;, }, else, if, (, length, >, size, ), {, ensureCapacity, (]
[length, ;, }, else, if, (, length, >, size, ), {, ensureCapacity, (, length, ), ;, final, int, oldEnd, =]
[length, >, size, ), {, ensureCapacity, (, length, ), ;, final, int, oldEnd, =, size, ;, final, int, newEnd, =]
[size, ), {, ensureCapacity, (, length, ), ;, final, int, oldEnd, =, size, ;, final, int, newEnd, =, length, ;]
[{, ensureCapacity, (, length, ), ;, final, int, oldEnd, =, size, ;, final, int, newEnd, =, length, ;, size, =]
[int, oldEnd, =, size, ;, final, int, newEnd, =, length, ;, size, =, length, ;, for, (, int, i, =]
[=, size, ;, final, int, newEnd, =, length, ;, size, =, length, ;, for, (, int, i, =, oldEnd, ;]
[=, size, ;, final, int, newEnd, =, length, ;, size, =, length, ;, for, (, int, i, =, oldEnd, ;]
[;, final, int, newEnd, =, length, ;, size, =, length, ;, for, (, int, i, =, oldEnd, ;, i, <]
[int, newEnd, =, length, ;, size, =, length, ;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;]
[int, newEnd, =, length, ;, size, =, length, ;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;]
[;, size, =, length, ;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;, i, ++, ), {]
[;, size, =, length, ;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;, i, ++, ), {]
[=, length, ;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;, i, ++, ), {, buffer, []
[for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;, i, ++, ), {, buffer, [, i, ], =]
[oldEnd, ;, i, <, newEnd, ;, i, ++, ), {, buffer, [, i, ], =, '\0', ;, }, }, return]
[buffer, [, i, ], =, '\0', ;, }, }, return, this, ;, }, public, int, capacity, (, ), {, return]
[buffer, [, i, ], =, '\0', ;, }, }, return, this, ;, }, public, int, capacity, (, ), {, return]
[(, ), {, return, buffer, ., length, ;, }, public, StrBuilder, ensureCapacity, (, final, int, capacity, ), {, if, (]
[(, ), {, return, buffer, ., length, ;, }, public, StrBuilder, ensureCapacity, (, final, int, capacity, ), {, if, (]
[{, return, buffer, ., length, ;, }, public, StrBuilder, ensureCapacity, (, final, int, capacity, ), {, if, (, capacity, >]
[{, return, buffer, ., length, ;, }, public, StrBuilder, ensureCapacity, (, final, int, capacity, ), {, if, (, capacity, >]
[final, int, capacity, ), {, if, (, capacity, >, buffer, ., length, ), {, final, char, [, ], old, =]
[capacity, ), {, if, (, capacity, >, buffer, ., length, ), {, final, char, [, ], old, =, buffer, ;]
[{, if, (, capacity, >, buffer, ., length, ), {, final, char, [, ], old, =, buffer, ;, buffer, =]
[capacity, >, buffer, ., length, ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, []
[capacity, >, buffer, ., length, ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, []
[buffer, ., length, ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, capacity, *]
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, capacity, *, 2, ], ;]
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, capacity, *, 2, ], ;]
[[, ], old, =, buffer, ;, buffer, =, new, char, [, capacity, *, 2, ], ;, System, ., arraycopy, (]
[old, =, buffer, ;, buffer, =, new, char, [, capacity, *, 2, ], ;, System, ., arraycopy, (, old, ,]
[buffer, ;, buffer, =, new, char, [, capacity, *, 2, ], ;, System, ., arraycopy, (, old, ,, 0, ,]
[buffer, =, new, char, [, capacity, *, 2, ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,]
[new, char, [, capacity, *, 2, ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,]
[2, ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return]
[buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (]
[buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (]
[buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (]
[size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (, buffer, ., length, >]
[(, ), {, if, (, buffer, ., length, >, length, (, ), ), {, final, char, [, ], old, =]
[{, if, (, buffer, ., length, >, length, (, ), ), {, final, char, [, ], old, =, buffer, ;]
[(, buffer, ., length, >, length, (, ), ), {, final, char, [, ], old, =, buffer, ;, buffer, =]
[length, >, length, (, ), ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, []
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, length, (, ), ], ;]
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, length, (, ), ], ;]
[[, ], old, =, buffer, ;, buffer, =, new, char, [, length, (, ), ], ;, System, ., arraycopy, (]
[old, =, buffer, ;, buffer, =, new, char, [, length, (, ), ], ;, System, ., arraycopy, (, old, ,]
[buffer, ;, buffer, =, new, char, [, length, (, ), ], ;, System, ., arraycopy, (, old, ,, 0, ,]
[buffer, =, new, char, [, length, (, ), ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,]
[new, char, [, length, (, ), ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,]
[), ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return]
[,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, int, size, (, ), {, return]
[this, ;, }, public, int, size, (, ), {, return, size, ;, }, public, boolean, isEmpty, (, ), {, return]
[this, ;, }, public, int, size, (, ), {, return, size, ;, }, public, boolean, isEmpty, (, ), {, return]
[}, public, int, size, (, ), {, return, size, ;, }, public, boolean, isEmpty, (, ), {, return, size, ==]
[;, }, public, boolean, isEmpty, (, ), {, return, size, ==, 0, ;, }, public, StrBuilder, clear, (, ), {]
[public, boolean, isEmpty, (, ), {, return, size, ==, 0, ;, }, public, StrBuilder, clear, (, ), {, size, =]
[(, ), {, return, size, ==, 0, ;, }, public, StrBuilder, clear, (, ), {, size, =, 0, ;, return]
[=, 0, ;, return, this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (]
[=, 0, ;, return, this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (]
[=, 0, ;, return, this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (]
[;, return, this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (, index, <]
[this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (, index, <, 0, ||]
[this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (, index, <, 0, ||]
[}, @, Override, public, char, charAt, (, final, int, index, ), {, if, (, index, <, 0, ||, index, >=]
[(, final, int, index, ), {, if, (, index, <, 0, ||, index, >=, length, (, ), ), {, throw]
[index, ), {, if, (, index, <, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[index, <, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return]
[index, <, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return]
[0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer, []
[[, index, ], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (]
[[, index, ], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (]
[[, index, ], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (]
[], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (, index, <]
[}, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (, index, <, 0, ||]
[}, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (, index, <, 0, ||]
[StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (, index, <, 0, ||, index, >=]
[,, final, char, ch, ), {, if, (, index, <, 0, ||, index, >=, length, (, ), ), {, throw]
[ch, ), {, if, (, index, <, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[(, index, <, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }]
[(, index, <, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }]
[<, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, []
[index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ], =]
[(, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ], =, ch, ;, return]
[index, ], =, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (]
[index, ], =, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (]
[index, ], =, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (]
[=, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <]
[;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <, 0, ||]
[;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <, 0, ||]
[this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <, 0, ||, index, >=]
[StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <, 0, ||, index, >=, size, ), {, throw]
[final, int, index, ), {, if, (, index, <, 0, ||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (]
[{, if, (, index, <, 0, ||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }]
[(, index, <, 0, ||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (]
[<, 0, ||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,]
[<, 0, ||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,]
[||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +]
[>=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +, 1, ,]
[throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +, 1, ,, 1, ), ;, return]
[+, 1, ,, 1, ), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (]
[+, 1, ,, 1, ), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (]
[,, 1, ), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==]
[return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==, 0, ), {, return]
[return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==, 0, ), {, return]
[{, if, (, size, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =]
[size, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, []
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, size, ], ;]
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, size, ], ;]
[., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, size, ], ;, System, ., arraycopy, (]
[;, }, final, char, chars, [, ], =, new, char, [, size, ], ;, System, ., arraycopy, (, buffer, ,]
[final, char, chars, [, ], =, new, char, [, size, ], ;, System, ., arraycopy, (, buffer, ,, 0, ,]
[chars, [, ], =, new, char, [, size, ], ;, System, ., arraycopy, (, buffer, ,, 0, ,, chars, ,]
[], =, new, char, [, size, ], ;, System, ., arraycopy, (, buffer, ,, 0, ,, chars, ,, 0, ,]
[[, size, ], ;, System, ., arraycopy, (, buffer, ,, 0, ,, chars, ,, 0, ,, size, ), ;, return]
[), ;, return, chars, ;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex, ), {]
[return, chars, ;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =]
[;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (]
[public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,]
[int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =]
[int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =]
[,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -]
[{, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (]
[{, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (]
[=, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, ==]
[,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, ==, 0, ), {, return]
[,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, ==, 0, ), {, return]
[;, if, (, len, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =]
[len, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, []
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, len, ], ;]
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, len, ], ;]
[., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, len, ], ;, System, ., arraycopy, (]
[;, }, final, char, chars, [, ], =, new, char, [, len, ], ;, System, ., arraycopy, (, buffer, ,]
[final, char, chars, [, ], =, new, char, [, len, ], ;, System, ., arraycopy, (, buffer, ,, startIndex, ,]
[chars, [, ], =, new, char, [, len, ], ;, System, ., arraycopy, (, buffer, ,, startIndex, ,, chars, ,]
[], =, new, char, [, len, ], ;, System, ., arraycopy, (, buffer, ,, startIndex, ,, chars, ,, 0, ,]
[[, len, ], ;, System, ., arraycopy, (, buffer, ,, startIndex, ,, chars, ,, 0, ,, len, ), ;, return]
[return, chars, ;, }, public, char, [, ], getChars, (, char, [, ], destination, ), {, final, int, len, =]
[[, ], getChars, (, char, [, ], destination, ), {, final, int, len, =, length, (, ), ;, if, (]
[[, ], getChars, (, char, [, ], destination, ), {, final, int, len, =, length, (, ), ;, if, (]
[[, ], getChars, (, char, [, ], destination, ), {, final, int, len, =, length, (, ), ;, if, (]
[getChars, (, char, [, ], destination, ), {, final, int, len, =, length, (, ), ;, if, (, destination, ==]
[char, [, ], destination, ), {, final, int, len, =, length, (, ), ;, if, (, destination, ==, null, ||]
[char, [, ], destination, ), {, final, int, len, =, length, (, ), ;, if, (, destination, ==, null, ||]
[char, [, ], destination, ), {, final, int, len, =, length, (, ), ;, if, (, destination, ==, null, ||]
[), {, final, int, len, =, length, (, ), ;, if, (, destination, ==, null, ||, destination, ., length, <]
[int, len, =, length, (, ), ;, if, (, destination, ==, null, ||, destination, ., length, <, len, ), {]
[=, length, (, ), ;, if, (, destination, ==, null, ||, destination, ., length, <, len, ), {, destination, =]
[), ;, if, (, destination, ==, null, ||, destination, ., length, <, len, ), {, destination, =, new, char, []
[destination, ==, null, ||, destination, ., length, <, len, ), {, destination, =, new, char, [, len, ], ;, }]
[destination, ==, null, ||, destination, ., length, <, len, ), {, destination, =, new, char, [, len, ], ;, }]
[destination, ., length, <, len, ), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (]
[length, <, len, ), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,]
[len, ), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,]
[{, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination, ,]
[=, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination, ,, 0, ,]
[len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination, ,, 0, ,, len, ), ;, return]
[int, startIndex, ,, final, int, endIndex, ,, final, char, destination, [, ], ,, final, int, destinationIndex, ), {, if, (]
[int, startIndex, ,, final, int, endIndex, ,, final, char, destination, [, ], ,, final, int, destinationIndex, ), {, if, (]
[,, final, int, endIndex, ,, final, char, destination, [, ], ,, final, int, destinationIndex, ), {, if, (, startIndex, <]
[,, final, char, destination, [, ], ,, final, int, destinationIndex, ), {, if, (, startIndex, <, 0, ), {, throw]
[destination, [, ], ,, final, int, destinationIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (]
[destinationIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (]
[destinationIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (]
[destinationIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (]
[{, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <]
[(, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <, 0, ||]
[(, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <, 0, ||]
[<, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <, 0, ||, endIndex, >]
[StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <, 0, ||, endIndex, >, length, (, ), ), {, throw]
[), ;, }, if, (, endIndex, <, 0, ||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[<, 0, ||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (]
[<, 0, ||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (]
[||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >]
[(, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw]
[{, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (]
[(, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }]
[(, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }]
[}, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (]
[(, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,]
[>, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,]
[), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,]
[throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,, destinationIndex, ,]
[throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,, destinationIndex, ,]
[StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,, destinationIndex, ,, endIndex, -]
[startIndex, ,, destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (]
[startIndex, ,, destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (]
[destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==]
[,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {]
[-, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {, append, (]
[-, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {, append, (]
[StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {, append, (, SystemUtils, ., LINE_SEPARATOR, ), ;, return]
[{, if, (, newLine, ==, null, ), {, append, (, SystemUtils, ., LINE_SEPARATOR, ), ;, return, this, ;, }, return]
[(, newLine, ==, null, ), {, append, (, SystemUtils, ., LINE_SEPARATOR, ), ;, return, this, ;, }, return, append, (]
[;, return, this, ;, }, return, append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, ), {, if, (]
[;, return, this, ;, }, return, append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, ), {, if, (]
[this, ;, }, return, append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, ), {, if, (, nullText, ==]
[append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, ), {, if, (, nullText, ==, null, ), {, return]
[;, }, public, StrBuilder, appendNull, (, ), {, if, (, nullText, ==, null, ), {, return, this, ;, }, return]
[public, StrBuilder, appendNull, (, ), {, if, (, nullText, ==, null, ), {, return, this, ;, }, return, append, (]
[;, }, return, append, (, nullText, ), ;, }, public, StrBuilder, append, (, final, Object, obj, ), {, if, (]
[;, }, return, append, (, nullText, ), ;, }, public, StrBuilder, append, (, final, Object, obj, ), {, if, (]
[return, append, (, nullText, ), ;, }, public, StrBuilder, append, (, final, Object, obj, ), {, if, (, obj, ==]
[), ;, }, public, StrBuilder, append, (, final, Object, obj, ), {, if, (, obj, ==, null, ), {, return]
[(, final, Object, obj, ), {, if, (, obj, ==, null, ), {, return, appendNull, (, ), ;, }, return]
[Object, obj, ), {, if, (, obj, ==, null, ), {, return, appendNull, (, ), ;, }, return, append, (]
[Object, obj, ), {, if, (, obj, ==, null, ), {, return, appendNull, (, ), ;, }, return, append, (]
[., toString, (, ), ), ;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ), {, if, (]
[., toString, (, ), ), ;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ), {, if, (]
[(, ), ), ;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ), {, if, (, seq, ==]
[}, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ), {, if, (, seq, ==, null, ), {, return]
[(, final, CharSequence, seq, ), {, if, (, seq, ==, null, ), {, return, appendNull, (, ), ;, }, return]
[CharSequence, seq, ), {, if, (, seq, ==, null, ), {, return, appendNull, (, ), ;, }, return, append, (]
[CharSequence, seq, ), {, if, (, seq, ==, null, ), {, return, appendNull, (, ), ;, }, return, append, (]
[Override, public, StrBuilder, append, (, final, CharSequence, seq, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[Override, public, StrBuilder, append, (, final, CharSequence, seq, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[StrBuilder, append, (, final, CharSequence, seq, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, seq, ==]
[CharSequence, seq, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, seq, ==, null, ), {, return]
[,, final, int, length, ), {, if, (, seq, ==, null, ), {, return, appendNull, (, ), ;, }, return]
[int, length, ), {, if, (, seq, ==, null, ), {, return, appendNull, (, ), ;, }, return, append, (]
[int, length, ), {, if, (, seq, ==, null, ), {, return, appendNull, (, ), ;, }, return, append, (]
[seq, ==, null, ), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ,]
[null, ), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ,, startIndex, ,]
[(, ), ,, startIndex, ,, length, ), ;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (]
[(, ), ,, startIndex, ,, length, ), ;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (]
[,, startIndex, ,, length, ), ;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (, str, ==]
[), ;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (, str, ==, null, ), {, return]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,]
[(, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;]
[len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return]
[}, public, StrBuilder, append, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[}, public, StrBuilder, append, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[StrBuilder, append, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==]
[String, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==, null, ), {, return]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw]
[}, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[{, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =]
[(, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[}, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +]
[(, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;]
[length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[}, return, this, ;, }, public, StrBuilder, append, (, final, String, format, ,, final, Object, ..., objs, ), {, return]
[this, ;, }, public, StrBuilder, append, (, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (]
[this, ;, }, public, StrBuilder, append, (, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (]
[StrBuilder, append, (, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (, String, ., format, (]
[(, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (, String, ., format, (, format, ,]
[format, (, format, ,, objs, ), ), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (]
[format, (, format, ,, objs, ), ), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (]
[format, ,, objs, ), ), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (, str, ==]
[), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (, str, ==, null, ), {, return]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,]
[(, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;]
[len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return]
[}, public, StrBuilder, append, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[}, public, StrBuilder, append, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[StrBuilder, append, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==]
[StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==, null, ), {, return]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw]
[}, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[{, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =]
[(, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[}, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +]
[(, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;]
[length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if, (]
[size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if, (]
[length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if, (, str, ==]
[this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if, (, str, ==, null, ), {, return]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,]
[(, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;]
[len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return]
[}, public, StrBuilder, append, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[}, public, StrBuilder, append, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[StrBuilder, append, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==]
[StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==, null, ), {, return]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw]
[}, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[{, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =]
[(, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[}, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +]
[(, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;]
[length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if, (]
[size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if, (]
[length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if, (, str, ==]
[this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if, (, str, ==, null, ), {, return]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[str, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (]
[=, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, str, ., buffer, ,]
[(, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,]
[;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,]
[(, len, +, strLen, ), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,]
[strLen, ), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;]
[;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=]
[(, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return]
[}, public, StrBuilder, append, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[}, public, StrBuilder, append, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[StrBuilder, append, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==]
[StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, str, ==, null, ), {, return]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[length, ), {, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[{, if, (, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, str, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw]
[}, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (]
[), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[{, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =]
[(, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[}, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +]
[(, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;]
[length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ), {, if, (]
[length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ), {, if, (, chars, ==]
[}, public, StrBuilder, append, (, final, char, [, ], chars, ), {, if, (, chars, ==, null, ), {, return]
[chars, ), {, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[chars, ), {, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =]
[==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =, chars, ., length, ;, if, (]
[==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =, chars, ., length, ;, if, (]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, chars, ., length, ;, if, (, strLen, >]
[}, final, int, strLen, =, chars, ., length, ;, if, (, strLen, >, 0, ), {, final, int, len, =]
[=, chars, ., length, ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[., length, ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[., length, ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, chars, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, chars, ,, 0, ,]
[(, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,]
[;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,]
[len, +, strLen, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;]
[strLen, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=]
[., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return]
[StrBuilder, append, (, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[StrBuilder, append, (, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, if, (]
[(, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, chars, ==]
[], chars, ,, final, int, startIndex, ,, final, int, length, ), {, if, (, chars, ==, null, ), {, return]
[final, int, length, ), {, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[final, int, length, ), {, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (]
[length, ), {, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <]
[{, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[{, if, (, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||]
[(, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[(, chars, ==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >]
[return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, chars, ., length, ), {, throw]
[), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[}, if, (, startIndex, <, 0, ||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +]
[||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (]
[||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (]
[||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||]
[length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (]
[length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (]
[{, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (, startIndex, +]
[StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >]
[;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw]
[(, length, <, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[(, length, <, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[<, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +]
[length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (]
[length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >]
[new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, final, int, len, =]
[+, length, ), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[}, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;]
[{, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy, (]
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy, (, chars, ,]
[=, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy, (, chars, ,, startIndex, ,]
[(, ), ;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,]
[;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,]
[len, +, length, ), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;]
[length, ), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size, +=]
[., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size, +=, length, ;, }, return]
[size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {]
[return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (]
[return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (]
[;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (, size, +]
[StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;]
[StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;]
[(, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, buffer, []
[(, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, buffer, []
[), {, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, buffer, [, size, ++, ], =]
[if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, buffer, [, size, ++, ], =, 't', ;]
[if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, buffer, [, size, ++, ], =, 't', ;]
[value, ), {, ensureCapacity, (, size, +, 4, ), ;, buffer, [, size, ++, ], =, 't', ;, buffer, []
[value, ), {, ensureCapacity, (, size, +, 4, ), ;, buffer, [, size, ++, ], =, 't', ;, buffer, []
[(, size, +, 4, ), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =]
[+, 4, ), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;]
[+, 4, ), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;]
[), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, []
[), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, []
[size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =]
[], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;]
[], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;]
['t', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, []
['t', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, []
[size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =]
[;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {]
[[, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (]
[[, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (]
[++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +]
['u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;]
['u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;]
[buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, []
[buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, []
[], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =]
['e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;]
['e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;]
[}, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, []
[}, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, []
[(, size, +, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =]
[+, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;]
[+, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;]
[), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, []
[), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, []
[size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =]
[], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;]
[], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;]
['f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, []
['f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, []
[size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =]
[], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;]
[], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;]
['a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, []
['a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, []
[size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size, ++, ], =]
['l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size, ++, ], =, 'e', ;, }, return]
[}, return, this, ;, }, @, Override, public, StrBuilder, append, (, final, char, ch, ), {, final, int, len, =]
[}, @, Override, public, StrBuilder, append, (, final, char, ch, ), {, final, int, len, =, length, (, ), ;]
[Override, public, StrBuilder, append, (, final, char, ch, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[Override, public, StrBuilder, append, (, final, char, ch, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[StrBuilder, append, (, final, char, ch, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[final, char, ch, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, 1, ), ;]
[final, char, ch, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, 1, ), ;]
[ch, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, 1, ), ;, buffer, []
[ch, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, 1, ), ;, buffer, []
[int, len, =, length, (, ), ;, ensureCapacity, (, len, +, 1, ), ;, buffer, [, size, ++, ], =]
[length, (, ), ;, ensureCapacity, (, len, +, 1, ), ;, buffer, [, size, ++, ], =, ch, ;, return]
[size, ++, ], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return]
[], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append, (]
[], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append, (]
[return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append, (, String, ., valueOf, (]
[(, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, long, value, ), {, return]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, long, value, ), {, return, append, (]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, long, value, ), {, return, append, (]
[), ), ;, }, public, StrBuilder, append, (, final, long, value, ), {, return, append, (, String, ., valueOf, (]
[(, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, float, value, ), {, return]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, float, value, ), {, return, append, (]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, float, value, ), {, return, append, (]
[), ), ;, }, public, StrBuilder, append, (, final, float, value, ), {, return, append, (, String, ., valueOf, (]
[(, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, double, value, ), {, return]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, double, value, ), {, return, append, (]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, double, value, ), {, return, append, (]
[), ), ;, }, public, StrBuilder, append, (, final, double, value, ), {, return, append, (, String, ., valueOf, (]
[(, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, appendln, (, final, Object, obj, ), {, return]
[(, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, appendln, (, final, Object, obj, ), {, return]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, appendln, (, final, Object, obj, ), {, return, append, (]
[append, (, obj, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, str, ), {, return]
[append, (, obj, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, str, ), {, return]
[obj, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, str, ), {, return, append, (]
[;, }, public, StrBuilder, appendln, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[;, }, public, StrBuilder, appendln, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[public, StrBuilder, appendln, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (]
[appendln, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,]
[final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,, startIndex, ,]
[appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ..., objs, ), {, return]
[appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ..., objs, ), {, return]
[), ;, }, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (]
[}, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (, format, ,]
[format, ,, objs, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ), {, return]
[format, ,, objs, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ), {, return]
[objs, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ), {, return, append, (]
[append, (, str, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ), {, return]
[append, (, str, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ), {, return]
[str, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ), {, return, append, (]
[;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[public, StrBuilder, appendln, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (]
[appendln, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,]
[final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,, startIndex, ,]
[;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (]
[appendln, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,]
[final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,, startIndex, ,]
[startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {, return]
[startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {, return]
[length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {, return, append, (]
[;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[public, StrBuilder, appendln, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (]
[appendln, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,]
[final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, str, ,, startIndex, ,]
[length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ), {, return]
[length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ), {, return]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ), {, return, append, (]
[public, StrBuilder, appendln, (, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[public, StrBuilder, appendln, (, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[appendln, (, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (]
[final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, chars, ,]
[[, ], chars, ,, final, int, startIndex, ,, final, int, length, ), {, return, append, (, chars, ,, startIndex, ,]
[startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {, return]
[startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {, return]
[length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {, return, append, (]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, ch, ), {, return]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, ch, ), {, return]
[value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, ch, ), {, return, append, (]
[append, (, ch, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, int, value, ), {, return]
[append, (, ch, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, int, value, ), {, return]
[ch, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, int, value, ), {, return, append, (]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, long, value, ), {, return]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, long, value, ), {, return]
[value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, long, value, ), {, return, append, (]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, float, value, ), {, return]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, float, value, ), {, return]
[value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, float, value, ), {, return, append, (]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, double, value, ), {, return]
[append, (, value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, double, value, ), {, return]
[value, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, double, value, ), {, return, append, (]
[appendNewLine, (, ), ;, }, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (]
[appendNewLine, (, ), ;, }, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (]
[appendNewLine, (, ), ;, }, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (]
[), ;, }, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (, array, !=]
[}, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (, array, !=, null, &&]
[}, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (, array, !=, null, &&]
[}, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (, array, !=, null, &&]
[>, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (, array, !=, null, &&, array, ., length, >]
[{, if, (, array, !=, null, &&, array, ., length, >, 0, ), {, for, (, final, Object, element, :]
[array, !=, null, &&, array, ., length, >, 0, ), {, for, (, final, Object, element, :, array, ), {]
[null, &&, array, ., length, >, 0, ), {, for, (, final, Object, element, :, array, ), {, append, (]
[0, ), {, for, (, final, Object, element, :, array, ), {, append, (, element, ), ;, }, }, return]
[}, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterable, <, ?, >, iterable, ), {, if, (]
[}, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterable, <, ?, >, iterable, ), {, if, (]
[return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterable, <, ?, >, iterable, ), {, if, (, iterable, !=]
[Iterable, <, ?, >, iterable, ), {, if, (, iterable, !=, null, ), {, for, (, final, Object, o, :]
[>, iterable, ), {, if, (, iterable, !=, null, ), {, for, (, final, Object, o, :, iterable, ), {]
[), {, if, (, iterable, !=, null, ), {, for, (, final, Object, o, :, iterable, ), {, append, (]
[null, ), {, for, (, final, Object, o, :, iterable, ), {, append, (, o, ), ;, }, }, return]
[}, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {, if, (]
[}, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {, if, (]
[return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {, if, (, it, !=]
[StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {, if, (, it, !=, null, ), {, while, (]
[StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {, if, (, it, !=, null, ), {, while, (]
[>, it, ), {, if, (, it, !=, null, ), {, while, (, it, ., hasNext, (, ), ), {]
[), {, if, (, it, !=, null, ), {, while, (, it, ., hasNext, (, ), ), {, append, (]
[), {, if, (, it, !=, null, ), {, while, (, it, ., hasNext, (, ), ), {, append, (]
[(, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, }, }, return]
[return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (]
[return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (]
[return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (]
[;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (, array, !=]
[public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (, array, !=, null, &&]
[public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (, array, !=, null, &&]
[public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (, array, !=, null, &&]
[final, Object, [, ], array, ,, String, separator, ), {, if, (, array, !=, null, &&, array, ., length, >]
[], array, ,, String, separator, ), {, if, (, array, !=, null, &&, array, ., length, >, 0, ), {]
[,, String, separator, ), {, if, (, array, !=, null, &&, array, ., length, >, 0, ), {, separator, =]
[,, String, separator, ), {, if, (, array, !=, null, &&, array, ., length, >, 0, ), {, separator, =]
[{, if, (, array, !=, null, &&, array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (]
[array, !=, null, &&, array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;]
[null, &&, array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (]
[null, &&, array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (]
[array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array, []
[ObjectUtils, ., toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for, (, int, i, =]
[toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;]
[toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;]
[separator, ), ;, append, (, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;, i, <]
[separator, ), ;, append, (, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;, i, <]
[(, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;]
[(, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;]
[], ), ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, append, (]
[int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, append, (, separator, ), ;]
[=, 1, ;, i, <, array, ., length, ;, i, ++, ), {, append, (, separator, ), ;, append, (]
[=, 1, ;, i, <, array, ., length, ;, i, ++, ), {, append, (, separator, ), ;, append, (]
[;, i, <, array, ., length, ;, i, ++, ), {, append, (, separator, ), ;, append, (, array, []
[i, ++, ), {, append, (, separator, ), ;, append, (, array, [, i, ], ), ;, }, }, return]
[this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,, String, separator, ), {, if, (]
[this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,, String, separator, ), {, if, (]
[}, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,, String, separator, ), {, if, (, iterable, !=]
[appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,, String, separator, ), {, if, (, iterable, !=, null, ), {]
[final, Iterable, <, ?, >, iterable, ,, String, separator, ), {, if, (, iterable, !=, null, ), {, separator, =]
[final, Iterable, <, ?, >, iterable, ,, String, separator, ), {, if, (, iterable, !=, null, ), {, separator, =]
[>, iterable, ,, String, separator, ), {, if, (, iterable, !=, null, ), {, separator, =, ObjectUtils, ., toString, (]
[!=, null, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =]
[!=, null, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =]
[toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =, iterable, ., iterator, (, ), ;, while, (]
[toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =, iterable, ., iterator, (, ), ;, while, (]
[<, ?, >, it, =, iterable, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {]
[>, it, =, iterable, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, append, (]
[>, it, =, iterable, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, append, (]
[while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if, (]
[while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if, (]
[), {, append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {]
[append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {, append, (]
[), ;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return]
[this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterator, <, ?, >, it, ,, String, separator, ), {, if, (]
[this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterator, <, ?, >, it, ,, String, separator, ), {, if, (]
[}, public, StrBuilder, appendWithSeparators, (, final, Iterator, <, ?, >, it, ,, String, separator, ), {, if, (, it, !=]
[appendWithSeparators, (, final, Iterator, <, ?, >, it, ,, String, separator, ), {, if, (, it, !=, null, ), {]
[final, Iterator, <, ?, >, it, ,, String, separator, ), {, if, (, it, !=, null, ), {, separator, =]
[final, Iterator, <, ?, >, it, ,, String, separator, ), {, if, (, it, !=, null, ), {, separator, =]
[>, it, ,, String, separator, ), {, if, (, it, !=, null, ), {, separator, =, ObjectUtils, ., toString, (]
[), {, if, (, it, !=, null, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (]
[), {, if, (, it, !=, null, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (, it, ., hasNext, (, ), ), {]
[separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (, it, ., hasNext, (, ), ), {, append, (]
[separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (, it, ., hasNext, (, ), ), {, append, (]
[while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if, (]
[while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if, (]
[), {, append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {]
[append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {, append, (]
[), ;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return]
[separator, ), ;, }, }, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ), {, return]
[;, }, }, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ), {, return, appendSeparator, (]
[}, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ), {, return, appendSeparator, (, separator, ,]
[), ;, }, public, StrBuilder, appendSeparator, (, final, String, standard, ,, final, String, defaultIfEmpty, ), {, final, String, str, =]
[), ;, }, public, StrBuilder, appendSeparator, (, final, String, standard, ,, final, String, defaultIfEmpty, ), {, final, String, str, =]
[StrBuilder, appendSeparator, (, final, String, standard, ,, final, String, defaultIfEmpty, ), {, final, String, str, =, isEmpty, (, ), ?]
[(, final, String, standard, ,, final, String, defaultIfEmpty, ), {, final, String, str, =, isEmpty, (, ), ?, defaultIfEmpty, :]
[,, final, String, defaultIfEmpty, ), {, final, String, str, =, isEmpty, (, ), ?, defaultIfEmpty, :, standard, ;, if, (]
[,, final, String, defaultIfEmpty, ), {, final, String, str, =, isEmpty, (, ), ?, defaultIfEmpty, :, standard, ;, if, (]
[String, defaultIfEmpty, ), {, final, String, str, =, isEmpty, (, ), ?, defaultIfEmpty, :, standard, ;, if, (, str, !=]
[{, final, String, str, =, isEmpty, (, ), ?, defaultIfEmpty, :, standard, ;, if, (, str, !=, null, ), {]
[String, str, =, isEmpty, (, ), ?, defaultIfEmpty, :, standard, ;, if, (, str, !=, null, ), {, append, (]
[), ?, defaultIfEmpty, :, standard, ;, if, (, str, !=, null, ), {, append, (, str, ), ;, }, return]
[(, str, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (]
[(, str, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (, size, (, ), >]
[;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (, size, (, ), >, 0, ), {]
[public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (, size, (, ), >, 0, ), {, append, (]
[char, separator, ), {, if, (, size, (, ), >, 0, ), {, append, (, separator, ), ;, }, return]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, standard, ,, final, char, defaultIfEmpty, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, standard, ,, final, char, defaultIfEmpty, ), {, if, (]
[}, public, StrBuilder, appendSeparator, (, final, char, standard, ,, final, char, defaultIfEmpty, ), {, if, (, size, (, ), >]
[appendSeparator, (, final, char, standard, ,, final, char, defaultIfEmpty, ), {, if, (, size, (, ), >, 0, ), {]
[final, char, standard, ,, final, char, defaultIfEmpty, ), {, if, (, size, (, ), >, 0, ), {, append, (]
[defaultIfEmpty, ), {, if, (, size, (, ), >, 0, ), {, append, (, standard, ), ;, }, else, {]
[{, if, (, size, (, ), >, 0, ), {, append, (, standard, ), ;, }, else, {, append, (]
[), >, 0, ), {, append, (, standard, ), ;, }, else, {, append, (, defaultIfEmpty, ), ;, }, return]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (]
[this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (, separator, !=]
[}, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (, separator, !=, null, &&]
[}, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (, separator, !=, null, &&]
[StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (, separator, !=, null, &&, loopIndex, >]
[final, String, separator, ,, final, int, loopIndex, ), {, if, (, separator, !=, null, &&, loopIndex, >, 0, ), {]
[separator, ,, final, int, loopIndex, ), {, if, (, separator, !=, null, &&, loopIndex, >, 0, ), {, append, (]
[), {, if, (, separator, !=, null, &&, loopIndex, >, 0, ), {, append, (, separator, ), ;, }, return]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {, if, (]
[this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {, if, (, loopIndex, >]
[public, StrBuilder, appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {, if, (, loopIndex, >, 0, ), {]
[appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {, if, (, loopIndex, >, 0, ), {, append, (]
[,, final, int, loopIndex, ), {, if, (, loopIndex, >, 0, ), {, append, (, separator, ), ;, }, return]
[}, return, this, ;, }, public, StrBuilder, appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if, (]
[this, ;, }, public, StrBuilder, appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if, (, length, >=]
[public, StrBuilder, appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if, (, length, >=, 0, ), {]
[appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if, (, length, >=, 0, ), {, ensureCapacity, (]
[appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if, (, length, >=, 0, ), {, ensureCapacity, (]
[final, int, length, ,, final, char, padChar, ), {, if, (, length, >=, 0, ), {, ensureCapacity, (, size, +]
[{, if, (, length, >=, 0, ), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =]
[(, length, >=, 0, ), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;]
[(, length, >=, 0, ), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;]
[>=, 0, ), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;]
[), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;]
[size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {]
[size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {]
[length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, buffer, []
[length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, buffer, []
[(, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, buffer, [, size, ++, ], =]
[;, i, <, length, ;, i, ++, ), {, buffer, [, size, ++, ], =, padChar, ;, }, }, return]
[}, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (]
[}, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (]
[StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >]
[final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {]
[obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (]
[obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (]
[final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +]
[padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =]
[), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (]
[), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (]
[), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (]
[if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==]
[width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?]
[{, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :]
[{, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :]
[str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (]
[str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (]
[(, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==]
[null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {]
[getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str, =]
[(, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =]
[(, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =]
[null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[{, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=]
["", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {]
["", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (]
[=, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, strLen, -]
[., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, strLen, -, width, ,]
[(, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, strLen, -, width, ,, strLen, ,]
[;, if, (, strLen, >=, width, ), {, str, ., getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,]
[getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =]
[getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =]
[strLen, -, width, ,, strLen, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -]
[,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =]
[), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =, 0, ;]
[), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =, 0, ;]
[}, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =, 0, ;, i, <]
[{, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =, 0, ;, i, <, padLen, ;]
[{, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =, 0, ;, i, <, padLen, ;]
[=, width, -, strLen, ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {]
[=, width, -, strLen, ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {]
[-, strLen, ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, []
[-, strLen, ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, []
[;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +]
[int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +, i, ], =]
[0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }]
[0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }]
[padLen, ;, i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (]
[i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,]
[), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,]
[buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +]
[=, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;, }]
[;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;, }, size, +=]
[getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;, }, size, +=, width, ;, }, return]
[;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return]
[public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadLeft, (]
[public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadLeft, (]
[final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadLeft, (, String, ., valueOf, (]
[,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadLeft, (, String, ., valueOf, (, value, ), ,]
[int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadLeft, (, String, ., valueOf, (, value, ), ,, width, ,]
[}, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (]
[}, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (]
[StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >]
[final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {]
[obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (]
[obj, ,, final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (]
[final, int, width, ,, final, char, padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +]
[padChar, ), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =]
[), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (]
[), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (]
[), {, if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (]
[if, (, width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==]
[width, >, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?]
[{, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :]
[{, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :]
[str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (]
[str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (]
[(, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==]
[null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {]
[getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str, =]
[(, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =]
[(, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =]
[null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[{, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=]
["", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {]
["", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (]
[=, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, 0, ,]
[., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, 0, ,, width, ,]
[(, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, 0, ,, width, ,, buffer, ,]
[str, ., getChars, (, 0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =]
[str, ., getChars, (, 0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =]
[getChars, (, 0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -]
[0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;]
[0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;]
[buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars, (]
[size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars, (, 0, ,]
[;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars, (, 0, ,, strLen, ,]
[else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[strLen, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =]
[str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;]
[str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;]
[getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i, <]
[0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;]
[0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;]
[buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {]
[buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {]
[size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, []
[size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, []
[size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, []
[;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +]
[(, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +, strLen, +]
[=, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +, strLen, +, i, ], =]
[<, padLen, ;, i, ++, ), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }]
[;, i, ++, ), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }, size, +=]
[{, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }, size, +=, width, ;, }, return]
[;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return]
[public, StrBuilder, appendFixedWidthPadRight, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadRight, (]
[public, StrBuilder, appendFixedWidthPadRight, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadRight, (]
[final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadRight, (, String, ., valueOf, (]
[,, final, int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadRight, (, String, ., valueOf, (, value, ), ,]
[int, width, ,, final, char, padChar, ), {, return, appendFixedWidthPadRight, (, String, ., valueOf, (, value, ), ,, width, ,]
[,, padChar, ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {, if, (]
[,, padChar, ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {, if, (]
[), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {, if, (, obj, ==]
[StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {, if, (, obj, ==, null, ), {, return]
[(, final, int, index, ,, final, Object, obj, ), {, if, (, obj, ==, null, ), {, return, insert, (]
[int, index, ,, final, Object, obj, ), {, if, (, obj, ==, null, ), {, return, insert, (, index, ,]
[obj, ), {, if, (, obj, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, return]
[{, if, (, obj, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, return, insert, (]
[(, obj, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, return, insert, (, index, ,]
[(, obj, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, return, insert, (, index, ,]
[obj, ., toString, (, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, String, str, ), {]
[toString, (, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, String, str, ), {, validateIndex, (]
[}, public, StrBuilder, insert, (, final, int, index, ,, String, str, ), {, validateIndex, (, index, ), ;, if, (]
[}, public, StrBuilder, insert, (, final, int, index, ,, String, str, ), {, validateIndex, (, index, ), ;, if, (]
[StrBuilder, insert, (, final, int, index, ,, String, str, ), {, validateIndex, (, index, ), ;, if, (, str, ==]
[final, int, index, ,, String, str, ), {, validateIndex, (, index, ), ;, if, (, str, ==, null, ), {]
[index, ,, String, str, ), {, validateIndex, (, index, ), ;, if, (, str, ==, null, ), {, str, =]
[{, validateIndex, (, index, ), ;, if, (, str, ==, null, ), {, str, =, nullText, ;, }, if, (]
[{, validateIndex, (, index, ), ;, if, (, str, ==, null, ), {, str, =, nullText, ;, }, if, (]
[(, index, ), ;, if, (, str, ==, null, ), {, str, =, nullText, ;, }, if, (, str, !=]
[==, null, ), {, str, =, nullText, ;, }, if, (, str, !=, null, ), {, final, int, strLen, =]
[==, null, ), {, str, =, nullText, ;, }, if, (, str, !=, null, ), {, final, int, strLen, =]
[}, if, (, str, !=, null, ), {, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[}, if, (, str, !=, null, ), {, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[(, str, !=, null, ), {, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, newSize, =]
[int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, newSize, =]
[=, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, newSize, =, size, +]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, newSize, =, size, +, strLen, ;]
[(, ), ;, if, (, strLen, >, 0, ), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (]
[if, (, strLen, >, 0, ), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;]
[if, (, strLen, >, 0, ), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;]
[0, ), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (]
[{, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,]
[int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,]
[=, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[=, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[+, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,]
[;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,]
[(, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;, size, =]
[(, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;, size, =, newSize, ;]
[(, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;, size, =, newSize, ;]
[,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (]
[,, index, +, strLen, ,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,]
[+, strLen, ,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,]
[,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, index, ), ;, }, }, return]
[}, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, [, ], ), {]
[this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, [, ], ), {, validateIndex, (]
[insert, (, final, int, index, ,, final, char, chars, [, ], ), {, validateIndex, (, index, ), ;, if, (]
[insert, (, final, int, index, ,, final, char, chars, [, ], ), {, validateIndex, (, index, ), ;, if, (]
[final, int, index, ,, final, char, chars, [, ], ), {, validateIndex, (, index, ), ;, if, (, chars, ==]
[final, char, chars, [, ], ), {, validateIndex, (, index, ), ;, if, (, chars, ==, null, ), {, return]
[chars, [, ], ), {, validateIndex, (, index, ), ;, if, (, chars, ==, null, ), {, return, insert, (]
[], ), {, validateIndex, (, index, ), ;, if, (, chars, ==, null, ), {, return, insert, (, index, ,]
[if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, final, int, len, =]
[if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, final, int, len, =]
[{, return, insert, (, index, ,, nullText, ), ;, }, final, int, len, =, chars, ., length, ;, if, (]
[{, return, insert, (, index, ,, nullText, ), ;, }, final, int, len, =, chars, ., length, ;, if, (]
[insert, (, index, ,, nullText, ), ;, }, final, int, len, =, chars, ., length, ;, if, (, len, >]
[,, nullText, ), ;, }, final, int, len, =, chars, ., length, ;, if, (, len, >, 0, ), {]
[), ;, }, final, int, len, =, chars, ., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (]
[), ;, }, final, int, len, =, chars, ., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (]
[}, final, int, len, =, chars, ., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (, size, +]
[len, =, chars, ., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (, size, +, len, ), ;]
[len, =, chars, ., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (, size, +, len, ), ;]
[length, ;, if, (, len, >, 0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (]
[if, (, len, >, 0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,]
[len, >, 0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,]
[0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[{, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[(, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,]
[(, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,]
[+, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -, index, ), ;]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -, index, ), ;]
[(, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -, index, ), ;, System, ., arraycopy, (]
[,, index, ,, buffer, ,, index, +, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,]
[,, buffer, ,, index, +, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,]
[,, index, +, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,]
[+, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,]
[size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;]
[index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;, size, +=]
[., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;, size, +=, len, ;, }, return]
[(, final, int, index, ,, final, char, chars, [, ], ,, final, int, offset, ,, final, int, length, ), {]
[int, index, ,, final, char, chars, [, ], ,, final, int, offset, ,, final, int, length, ), {, validateIndex, (]
[chars, [, ], ,, final, int, offset, ,, final, int, length, ), {, validateIndex, (, index, ), ;, if, (]
[chars, [, ], ,, final, int, offset, ,, final, int, length, ), {, validateIndex, (, index, ), ;, if, (]
[], ,, final, int, offset, ,, final, int, length, ), {, validateIndex, (, index, ), ;, if, (, chars, ==]
[offset, ,, final, int, length, ), {, validateIndex, (, index, ), ;, if, (, chars, ==, null, ), {, return]
[final, int, length, ), {, validateIndex, (, index, ), ;, if, (, chars, ==, null, ), {, return, insert, (]
[length, ), {, validateIndex, (, index, ), ;, if, (, chars, ==, null, ), {, return, insert, (, index, ,]
[), ;, if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (]
[), ;, if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (]
[), ;, if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (]
[if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <]
[chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||]
[chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||]
[null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||, offset, >]
[null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||, offset, >]
[index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||, offset, >, chars, ., length, ), {, throw]
[), ;, }, if, (, offset, <, 0, ||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[), ;, }, if, (, offset, <, 0, ||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[}, if, (, offset, <, 0, ||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +]
[||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (]
[||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (]
[||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||, offset, +]
[throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||, offset, +, length, >]
[throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||, offset, +, length, >]
[offset, ), ;, }, if, (, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {, throw]
[}, if, (, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[}, if, (, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[(, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +]
[+, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (]
[+, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >]
[length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {]
[{, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (]
[{, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (]
[new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +]
["Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;]
["Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;]
[;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (]
[if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,]
[length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,]
[0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[{, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[(, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,]
[(, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,]
[+, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -, index, ), ;]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -, index, ), ;]
[(, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -, index, ), ;, System, ., arraycopy, (]
[,, index, ,, buffer, ,, index, +, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,]
[,, buffer, ,, index, +, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,]
[,, index, +, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,]
[+, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,]
[size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;]
[index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;, size, +=]
[., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;, size, +=, length, ;, }, return]
[+=, length, ;, }, return, this, ;, }, public, StrBuilder, insert, (, int, index, ,, final, boolean, value, ), {]
[;, }, return, this, ;, }, public, StrBuilder, insert, (, int, index, ,, final, boolean, value, ), {, validateIndex, (]
[}, public, StrBuilder, insert, (, int, index, ,, final, boolean, value, ), {, validateIndex, (, index, ), ;, if, (]
[insert, (, int, index, ,, final, boolean, value, ), {, validateIndex, (, index, ), ;, if, (, value, ), {]
[int, index, ,, final, boolean, value, ), {, validateIndex, (, index, ), ;, if, (, value, ), {, ensureCapacity, (]
[int, index, ,, final, boolean, value, ), {, validateIndex, (, index, ), ;, if, (, value, ), {, ensureCapacity, (]
[,, final, boolean, value, ), {, validateIndex, (, index, ), ;, if, (, value, ), {, ensureCapacity, (, size, +]
[value, ), {, validateIndex, (, index, ), ;, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;]
[value, ), {, validateIndex, (, index, ), ;, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;]
[(, index, ), ;, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (]
[), ;, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,]
[if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,]
[value, ), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[value, ), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[{, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[(, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,]
[(, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,]
[+, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, []
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, []
[,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =]
[,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;]
[,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;]
[,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, []
[,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, []
[,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =]
[-, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;]
[-, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;]
[), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, []
[), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, []
[index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =]
[], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;]
[], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;]
['t', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, []
[[, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =]
[++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;]
[=, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=]
[index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {]
[], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (]
[], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (]
['u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +]
[[, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;]
[[, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;]
['e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (]
[size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,]
[4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,]
[}, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[}, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[{, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[(, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,]
[(, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,]
[+, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, []
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, []
[,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =]
[,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;]
[,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;]
[,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, []
[,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, []
[,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =]
[-, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;]
[-, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;]
[), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, []
[), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, []
[index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =]
[], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;]
[], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;]
['f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, []
['f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, []
[index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =]
[], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;]
[], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;]
['a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, []
[[, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =]
[++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;]
[=, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=]
[[, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=, 5, ;, }, return]
[5, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, value, ), {]
[}, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, value, ), {, validateIndex, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, value, ), {, validateIndex, (, index, ), ;]
[public, StrBuilder, insert, (, final, int, index, ,, final, char, value, ), {, validateIndex, (, index, ), ;, ensureCapacity, (]
[public, StrBuilder, insert, (, final, int, index, ,, final, char, value, ), {, validateIndex, (, index, ), ;, ensureCapacity, (]
[insert, (, final, int, index, ,, final, char, value, ), {, validateIndex, (, index, ), ;, ensureCapacity, (, size, +]
[int, index, ,, final, char, value, ), {, validateIndex, (, index, ), ;, ensureCapacity, (, size, +, 1, ), ;]
[int, index, ,, final, char, value, ), {, validateIndex, (, index, ), ;, ensureCapacity, (, size, +, 1, ), ;]
[char, value, ), {, validateIndex, (, index, ), ;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (]
[), {, validateIndex, (, index, ), ;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,]
[validateIndex, (, index, ), ;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,]
[index, ), ;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[index, ), ;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,]
[;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[(, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,]
[(, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,]
[+, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;, buffer, []
[buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;, buffer, [, index, ], =]
[index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;, buffer, [, index, ], =, value, ;]
[index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;, buffer, [, index, ], =, value, ;]
[index, +, 1, ,, size, -, index, ), ;, buffer, [, index, ], =, value, ;, size, ++, ;, return]
[++, ;, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, ), {, return]
[return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, ), {, return, insert, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, ), {, return, insert, (, index, ,]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, ), {, return, insert, (, index, ,]
[insert, (, final, int, index, ,, final, int, value, ), {, return, insert, (, index, ,, String, ., valueOf, (]
[(, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, ), {, return]
[), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, ), {, return, insert, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, ), {, return, insert, (, index, ,]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, ), {, return, insert, (, index, ,]
[insert, (, final, int, index, ,, final, long, value, ), {, return, insert, (, index, ,, String, ., valueOf, (]
[(, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, ), {, return]
[), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, ), {, return, insert, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, ), {, return, insert, (, index, ,]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, ), {, return, insert, (, index, ,]
[insert, (, final, int, index, ,, final, float, value, ), {, return, insert, (, index, ,, String, ., valueOf, (]
[(, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, ), {, return]
[), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, ), {, return, insert, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, ), {, return, insert, (, index, ,]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, ), {, return, insert, (, index, ,]
[insert, (, final, int, index, ,, final, double, value, ), {, return, insert, (, index, ,, String, ., valueOf, (]
[), ;, }, private, void, deleteImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, len, ), {]
[), ;, }, private, void, deleteImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, len, ), {]
[void, deleteImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, len, ), {, System, ., arraycopy, (]
[(, final, int, startIndex, ,, final, int, endIndex, ,, final, int, len, ), {, System, ., arraycopy, (, buffer, ,]
[int, startIndex, ,, final, int, endIndex, ,, final, int, len, ), {, System, ., arraycopy, (, buffer, ,, endIndex, ,]
[,, final, int, endIndex, ,, final, int, len, ), {, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,]
[int, endIndex, ,, final, int, len, ), {, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, ,]
[int, endIndex, ,, final, int, len, ), {, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, ,]
[,, final, int, len, ), {, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, ,, size, -]
[len, ), {, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, ,, size, -, endIndex, ), ;]
[{, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, ,, size, -, endIndex, ), ;, size, -=]
[endIndex, ), ;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {]
[;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =]
[-=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (]
[;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,]
[int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =]
[int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =]
[,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -]
[{, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (]
[{, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (]
[=, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >]
[startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >, 0, ), {]
[endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >, 0, ), {, deleteImpl, (]
[;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex, ,]
[int, len, =, endIndex, -, startIndex, ;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex, ,, endIndex, ,]
[startIndex, ;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex, ,, endIndex, ,, len, ), ;, }, return]
[;, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =]
[return, this, ;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =, 0, ;]
[return, this, ;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =, 0, ;]
[;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <]
[public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, []
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==]
[size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =]
[), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i, ;, while, (]
[), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i, ;, while, (]
[{, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i, ;, while, (, ++]
[(, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i, ;, while, (, ++, i, <]
[==, ch, ), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (]
[==, ch, ), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (]
[==, ch, ), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (]
[), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (, buffer, []
[int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (, buffer, [, i, ], !=]
[), {, if, (, buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =]
[), {, if, (, buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =]
[if, (, buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =, i, -]
[buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =, i, -, start, ;]
[i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (]
[!=, ch, ), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (, start, ,]
[), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (, start, ,, i, ,]
[;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (, start, ,, i, ,, len, ), ;]
[}, final, int, len, =, i, -, start, ;, deleteImpl, (, start, ,, i, ,, len, ), ;, i, -=]
[i, -, start, ;, deleteImpl, (, start, ,, i, ,, len, ), ;, i, -=, len, ;, }, }, return]
[}, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i, =]
[return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i, =, 0, ;]
[return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i, =, 0, ;]
[;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <]
[public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[ch, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, []
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==]
[0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {]
[i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (]
[size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,]
[size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,]
[i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,, i, +]
[), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,, i, +, 1, ,]
[==, ch, ), {, deleteImpl, (, i, ,, i, +, 1, ,, 1, ), ;, break, ;, }, }, return]
[;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =]
[}, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (]
[}, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (]
[}, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (]
[return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (, str, ==]
[;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?]
[public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?, 0, :]
[public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?, 0, :]
[final, int, len, =, (, str, ==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (]
[final, int, len, =, (, str, ==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (]
[len, =, (, str, ==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (, len, >]
[?, 0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, int, index, =]
[:, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, int, index, =, indexOf, (]
[., length, (, ), ), ;, if, (, len, >, 0, ), {, int, index, =, indexOf, (, str, ,]
[;, if, (, len, >, 0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (]
[;, if, (, len, >, 0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (]
[(, len, >, 0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=]
[0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, ), {]
[{, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl, (]
[index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,]
[index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,]
[indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +]
[str, ,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,]
[), ;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;]
[while, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, index, =]
[index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, index, =, indexOf, (]
[0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, index, =, indexOf, (, str, ,]
[,, index, +, len, ,, len, ), ;, index, =, indexOf, (, str, ,, index, ), ;, }, }, return]
[;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =]
[}, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (]
[}, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (]
[}, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (]
[return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (, str, ==]
[;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?]
[public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?, 0, :]
[public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?, 0, :]
[final, int, len, =, (, str, ==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (]
[final, int, len, =, (, str, ==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (]
[len, =, (, str, ==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (, len, >]
[0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, final, int, index, =]
[str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, final, int, index, =, indexOf, (]
[length, (, ), ), ;, if, (, len, >, 0, ), {, final, int, index, =, indexOf, (, str, ,]
[if, (, len, >, 0, ), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (]
[if, (, len, >, 0, ), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (]
[len, >, 0, ), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=]
[), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0, ), {]
[final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0, ), {, deleteImpl, (]
[index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0, ), {, deleteImpl, (, index, ,]
[index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0, ), {, deleteImpl, (, index, ,]
[indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +]
[str, ,, 0, ), ;, if, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,]
[(, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, }, }, return]
[,, len, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return]
[), ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (]
[}, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,]
[return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,]
[;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0, ,]
[public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0, ,, size, ,]
[StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0, ,, size, ,, -]
[,, 0, ,, size, ,, -, 1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return]
[,, size, ,, -, 1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (]
[,, -, 1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,]
[1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,]
[;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0, ,]
[public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0, ,, size, ,]
[int, endIndex, ,, final, int, removeLen, ,, final, String, insertStr, ,, final, int, insertLen, ), {, final, int, newSize, =]
[int, endIndex, ,, final, int, removeLen, ,, final, String, insertStr, ,, final, int, insertLen, ), {, final, int, newSize, =]
[int, endIndex, ,, final, int, removeLen, ,, final, String, insertStr, ,, final, int, insertLen, ), {, final, int, newSize, =]
[,, final, int, removeLen, ,, final, String, insertStr, ,, final, int, insertLen, ), {, final, int, newSize, =, size, -]
[int, removeLen, ,, final, String, insertStr, ,, final, int, insertLen, ), {, final, int, newSize, =, size, -, removeLen, +]
[String, insertStr, ,, final, int, insertLen, ), {, final, int, newSize, =, size, -, removeLen, +, insertLen, ;, if, (]
[String, insertStr, ,, final, int, insertLen, ), {, final, int, newSize, =, size, -, removeLen, +, insertLen, ;, if, (]
[,, final, int, insertLen, ), {, final, int, newSize, =, size, -, removeLen, +, insertLen, ;, if, (, insertLen, !=]
[insertLen, ), {, final, int, newSize, =, size, -, removeLen, +, insertLen, ;, if, (, insertLen, !=, removeLen, ), {]
[{, final, int, newSize, =, size, -, removeLen, +, insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (]
[newSize, =, size, -, removeLen, +, insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;]
[newSize, =, size, -, removeLen, +, insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;]
[removeLen, +, insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (]
[insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,]
[if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,]
[insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,]
[insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,]
[removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +]
[{, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,]
[{, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,]
[(, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -]
[;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;]
[., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =]
[endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (]
[endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (]
[buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >]
[+, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {]
[+, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {]
[-, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (]
[), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,]
[size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,, insertLen, ,]
[newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,, insertLen, ,, buffer, ,]
[), ;, }, }, public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex, ,, final, String, replaceStr, ), {]
[}, }, public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex, ,, final, String, replaceStr, ), {, endIndex, =]
[public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex, ,, final, String, replaceStr, ), {, endIndex, =, validateRange, (]
[replace, (, final, int, startIndex, ,, int, endIndex, ,, final, String, replaceStr, ), {, endIndex, =, validateRange, (, startIndex, ,]
[endIndex, ,, final, String, replaceStr, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =]
[,, final, String, replaceStr, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (]
[,, final, String, replaceStr, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (]
[,, final, String, replaceStr, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (]
[String, replaceStr, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (, replaceStr, ==]
[), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (, replaceStr, ==, null, ?]
[endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :]
[endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :]
[), ;, final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (]
[insertLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,]
[(, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,]
[(, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,]
[==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -]
[?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,]
[:, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,]
[(, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,, insertLen, ), ;, return]
[;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char, replace, ), {, if, (]
[;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char, replace, ), {, if, (]
[this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char, replace, ), {, if, (, search, !=]
[char, search, ,, final, char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =]
[,, final, char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;]
[,, final, char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;]
[char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;, i, <]
[), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, []
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==]
[0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {]
[0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {]
[i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, []
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =]
[(, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;, }, }, }, return]
[}, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, char, search, ,, final, char, replace, ), {, if, (]
[}, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, char, search, ,, final, char, replace, ), {, if, (]
[this, ;, }, public, StrBuilder, replaceFirst, (, final, char, search, ,, final, char, replace, ), {, if, (, search, !=]
[char, search, ,, final, char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =]
[,, final, char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;]
[,, final, char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;]
[char, replace, ), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;, i, <]
[), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[), {, if, (, search, !=, replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;]
[replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (]
[{, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, []
[int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==]
[0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {]
[0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {]
[i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, []
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =]
[[, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;, break, ;, }, }, }, return]
[this, ;, }, public, StrBuilder, replaceAll, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =]
[;, }, public, StrBuilder, replaceAll, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[;, }, public, StrBuilder, replaceAll, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[;, }, public, StrBuilder, replaceAll, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[public, StrBuilder, replaceAll, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==]
[replaceAll, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==, null, ?]
[final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :]
[final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :]
[final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (]
[final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (]
[searchLen, =, (, searchStr, ==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >]
[0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =]
[:, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (]
[:, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (]
[:, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (]
[., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==]
[(, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?]
[), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, int, index, =]
[=, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (]
[replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,]
[:, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (]
[:, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (]
[., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=]
[), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {]
[;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (]
[index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,]
[index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,]
[indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,, index, +]
[searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,]
[0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,]
[;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,]
[index, >=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;]
[0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =]
[{, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (]
[(, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,]
[(, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,]
[,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +]
[,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }, }, return]
[this, ;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =]
[;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==]
[replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==, null, ?]
[final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :]
[final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :]
[final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (]
[final, int, searchLen, =, (, searchStr, ==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (]
[searchLen, =, (, searchStr, ==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >]
[0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, index, =]
[searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (]
[length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,]
[if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, if, (]
[if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, if, (]
[searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=]
[index, =, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =]
[=, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (]
[=, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (]
[=, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (]
[(, searchStr, ,, 0, ), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==]
[,, 0, ), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?]
[), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (]
[replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,]
[replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,]
[(, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +]
[==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,]
[?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,]
[:, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,]
[), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return]
[}, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return]
[return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (]
[;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,]
[public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,, replaceStr, ,]
[replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,, replaceStr, ,, 0, ,]
[final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,, replaceStr, ,, 0, ,, size, ,]
[StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,, replaceStr, ,, 0, ,, size, ,, -]
[,, -, 1, ), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return]
[1, ), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (]
[;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,]
[public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,, replaceStr, ,]
[replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,, replaceStr, ,, 0, ,]
[final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,, replaceStr, ,, 0, ,, size, ,]
[final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, startIndex, ,, int, endIndex, ,, final, int, replaceCount, ), {]
[matcher, ,, final, String, replaceStr, ,, final, int, startIndex, ,, int, endIndex, ,, final, int, replaceCount, ), {, endIndex, =]
[final, String, replaceStr, ,, final, int, startIndex, ,, int, endIndex, ,, final, int, replaceCount, ), {, endIndex, =, validateRange, (]
[replaceStr, ,, final, int, startIndex, ,, int, endIndex, ,, final, int, replaceCount, ), {, endIndex, =, validateRange, (, startIndex, ,]
[startIndex, ,, int, endIndex, ,, final, int, replaceCount, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return]
[int, endIndex, ,, final, int, replaceCount, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, replaceImpl, (]
[,, final, int, replaceCount, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, replaceImpl, (, matcher, ,]
[int, replaceCount, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, replaceImpl, (, matcher, ,, replaceStr, ,]
[), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, replaceImpl, (, matcher, ,, replaceStr, ,, startIndex, ,]
[endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, replaceImpl, (, matcher, ,, replaceStr, ,, startIndex, ,, endIndex, ,]
[StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, from, ,, int, to, ,, int, replaceCount, ), {, if, (]
[StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, from, ,, int, to, ,, int, replaceCount, ), {, if, (]
[StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, from, ,, int, to, ,, int, replaceCount, ), {, if, (]
[,, final, String, replaceStr, ,, final, int, from, ,, int, to, ,, int, replaceCount, ), {, if, (, matcher, ==]
[String, replaceStr, ,, final, int, from, ,, int, to, ,, int, replaceCount, ), {, if, (, matcher, ==, null, ||]
[String, replaceStr, ,, final, int, from, ,, int, to, ,, int, replaceCount, ), {, if, (, matcher, ==, null, ||]
[,, final, int, from, ,, int, to, ,, int, replaceCount, ), {, if, (, matcher, ==, null, ||, size, ==]
[,, int, to, ,, int, replaceCount, ), {, if, (, matcher, ==, null, ||, size, ==, 0, ), {, return]
[{, if, (, matcher, ==, null, ||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =]
[if, (, matcher, ==, null, ||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (]
[if, (, matcher, ==, null, ||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (]
[if, (, matcher, ==, null, ||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (]
[matcher, ==, null, ||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==]
[null, ||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?]
[size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[(, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, final, char, [, ], buf, =]
[replaceStr, ., length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =]
[length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;]
[length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;]
[length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;]
[), ), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to, &&]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to, &&]
[char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to, &&, replaceCount, !=]
[], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to, &&, replaceCount, !=, 0, ;]
[], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to, &&, replaceCount, !=, 0, ;]
[i, =, from, ;, i, <, to, &&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =]
[i, =, from, ;, i, <, to, &&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =]
[i, <, to, &&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (]
[to, &&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,]
[replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,]
[0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,]
[{, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to, ), ;, if, (]
[{, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to, ), ;, if, (]
[int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to, ), ;, if, (, removeLen, >]
[matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {]
[isMatch, (, buf, ,, i, ,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (]
[buf, ,, i, ,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,]
[buf, ,, i, ,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,]
[i, ,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +]
[from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,]
[to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,]
[;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,]
[removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;]
[0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =]
[0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =]
[0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =]
[{, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -]
[(, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +]
[,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;]
[+, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =]
[+, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =]
[+, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =]
[,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +]
[,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -]
[), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (]
[), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (]
[to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >]
[-, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {]
[-, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {]
[i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }, }, }, return]
[), {, replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (]
[), {, replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (]
[replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (, size, ==]
[}, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (, size, ==, 0, ), {, return]
[StrBuilder, reverse, (, ), {, if, (, size, ==, 0, ), {, return, this, ;, }, final, int, half, =]
[StrBuilder, reverse, (, ), {, if, (, size, ==, 0, ), {, return, this, ;, }, final, int, half, =]
[(, ), {, if, (, size, ==, 0, ), {, return, this, ;, }, final, int, half, =, size, /]
[), {, return, this, ;, }, final, int, half, =, size, /, 2, ;, final, char, [, ], buf, =]
[int, half, =, size, /, 2, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =]
[/, 2, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =]
[/, 2, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -]
[char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;]
[char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;]
[], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;, leftIdx, <]
[=, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;, leftIdx, <, half, ;]
[=, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;, leftIdx, <, half, ;]
[for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;, leftIdx, <, half, ;, leftIdx, ++, ,]
[for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;, leftIdx, <, half, ;, leftIdx, ++, ,]
[=, size, -, 1, ;, leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =]
[=, size, -, 1, ;, leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =]
[-, 1, ;, leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, []
[leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;]
[leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;]
[half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, []
[++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =]
[++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =]
[rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, []
[{, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;]
[{, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;]
[char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;, buf, []
[buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =]
[;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =, swap, ;, }, return]
[buf, [, rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (]
[buf, [, rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (]
[rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (, size, ==]
[;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (, size, ==, 0, ), {, return]
[public, StrBuilder, trim, (, ), {, if, (, size, ==, 0, ), {, return, this, ;, }, int, len, =]
[size, ==, 0, ), {, return, this, ;, }, int, len, =, size, ;, final, char, [, ], buf, =]
[return, this, ;, }, int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, int, pos, =]
[int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (]
[int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (]
[int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (]
[=, size, ;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (, pos, <]
[;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (, pos, <, len, &&]
[;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (, pos, <, len, &&]
[;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (, pos, <, len, &&]
[char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (, pos, <, len, &&, buf, []
[buf, =, buffer, ;, int, pos, =, 0, ;, while, (, pos, <, len, &&, buf, [, pos, ], <=]
[;, int, pos, =, 0, ;, while, (, pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {]
[;, int, pos, =, 0, ;, while, (, pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {]
[while, (, pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (]
[while, (, pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (]
[while, (, pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (]
[pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <]
[len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&]
[len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&]
[len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&]
[buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, []
[buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, []
[pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -]
[' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=]
[pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ', ), {]
[pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ', ), {]
[pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (]
[pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (]
[len, &&, buf, [, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len, <]
[[, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {]
[-, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (]
[], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (, len, ,]
[--, ;, }, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;, }, if, (]
[--, ;, }, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;, }, if, (]
[}, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;, }, if, (, pos, >]
[len, <, size, ), {, delete, (, len, ,, size, ), ;, }, if, (, pos, >, 0, ), {]
[size, ), {, delete, (, len, ,, size, ), ;, }, if, (, pos, >, 0, ), {, delete, (]
[{, delete, (, len, ,, size, ), ;, }, if, (, pos, >, 0, ), {, delete, (, 0, ,]
[size, ), ;, }, if, (, pos, >, 0, ), {, delete, (, 0, ,, pos, ), ;, }, return]
[,, pos, ), ;, }, return, this, ;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (]
[,, pos, ), ;, }, return, this, ;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (]
[), ;, }, return, this, ;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (, str, ==]
[this, ;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (, str, ==, null, ), {, return]
[final, String, str, ), {, if, (, str, ==, null, ), {, return, false, ;, }, final, int, len, =]
[final, String, str, ), {, if, (, str, ==, null, ), {, return, false, ;, }, final, int, len, =]
[==, null, ), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (]
[==, null, ), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (]
[), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==]
[;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return]
[=, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (]
[=, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (]
[., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >]
[;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >, size, ), {, return]
[return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, for, (, int, i, =]
[;, }, if, (, len, >, size, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[;, }, if, (, len, >, size, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[if, (, len, >, size, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <]
[len, >, size, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;]
[len, >, size, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;]
[false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, buffer, []
[int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, buffer, [, i, ], !=]
[int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, buffer, [, i, ], !=]
[;, i, <, len, ;, i, ++, ), {, if, (, buffer, [, i, ], !=, str, ., charAt, (]
[i, ++, ), {, if, (, buffer, [, i, ], !=, str, ., charAt, (, i, ), ), {, return]
[(, buffer, [, i, ], !=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return]
[return, false, ;, }, }, return, true, ;, }, public, boolean, endsWith, (, final, String, str, ), {, if, (]
[return, false, ;, }, }, return, true, ;, }, public, boolean, endsWith, (, final, String, str, ), {, if, (]
[;, }, }, return, true, ;, }, public, boolean, endsWith, (, final, String, str, ), {, if, (, str, ==]
[true, ;, }, public, boolean, endsWith, (, final, String, str, ), {, if, (, str, ==, null, ), {, return]
[final, String, str, ), {, if, (, str, ==, null, ), {, return, false, ;, }, final, int, len, =]
[final, String, str, ), {, if, (, str, ==, null, ), {, return, false, ;, }, final, int, len, =]
[==, null, ), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (]
[==, null, ), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (]
[), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==]
[;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return]
[=, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (]
[=, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (]
[., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >]
[;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >, size, ), {, return]
[), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, int, pos, =]
[), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, int, pos, =]
[return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, int, pos, =, size, -]
[>, size, ), {, return, false, ;, }, int, pos, =, size, -, len, ;, for, (, int, i, =]
[), {, return, false, ;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;]
[), {, return, false, ;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;]
[return, false, ;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;, i, <]
[;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[pos, =, size, -, len, ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,]
[pos, =, size, -, len, ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if, (]
[for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if, (]
[int, i, =, 0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if, (, buffer, []
[0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=]
[0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=]
[len, ;, i, ++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (]
[pos, ++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (, i, ), ), {, return]
[(, buffer, [, pos, ], !=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return]
[true, ;, }, @, Override, public, CharSequence, subSequence, (, final, int, startIndex, ,, final, int, endIndex, ), {, if, (]
[true, ;, }, @, Override, public, CharSequence, subSequence, (, final, int, startIndex, ,, final, int, endIndex, ), {, if, (]
[}, @, Override, public, CharSequence, subSequence, (, final, int, startIndex, ,, final, int, endIndex, ), {, if, (, startIndex, <]
[CharSequence, subSequence, (, final, int, startIndex, ,, final, int, endIndex, ), {, if, (, startIndex, <, 0, ), {, throw]
[final, int, startIndex, ,, final, int, endIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (]
[endIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (]
[endIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (]
[{, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >]
[<, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, throw]
[{, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (]
[), ;, }, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (]
[), ;, }, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (]
[}, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >]
[>, size, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw]
[{, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (]
[{, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (]
[new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -]
[;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }, return]
[if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }, return, substring, (]
[startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }, return, substring, (, startIndex, ,]
[}, return, substring, (, startIndex, ,, endIndex, ), ;, }, public, String, substring, (, final, int, start, ), {, return]
[substring, (, startIndex, ,, endIndex, ), ;, }, public, String, substring, (, final, int, start, ), {, return, substring, (]
[startIndex, ,, endIndex, ), ;, }, public, String, substring, (, final, int, start, ), {, return, substring, (, start, ,]
[substring, (, start, ,, size, ), ;, }, public, String, substring, (, final, int, startIndex, ,, int, endIndex, ), {]
[start, ,, size, ), ;, }, public, String, substring, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =]
[size, ), ;, }, public, String, substring, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (]
[;, }, public, String, substring, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,]
[substring, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return]
[int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, new, String, (]
[,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, new, String, (, buffer, ,]
[endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, new, String, (, buffer, ,, startIndex, ,]
[endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, new, String, (, buffer, ,, startIndex, ,]
[{, endIndex, =, validateRange, (, startIndex, ,, endIndex, ), ;, return, new, String, (, buffer, ,, startIndex, ,, endIndex, -]
[,, startIndex, ,, endIndex, -, startIndex, ), ;, }, public, String, leftString, (, final, int, length, ), {, if, (]
[,, startIndex, ,, endIndex, -, startIndex, ), ;, }, public, String, leftString, (, final, int, length, ), {, if, (]
[,, endIndex, -, startIndex, ), ;, }, public, String, leftString, (, final, int, length, ), {, if, (, length, <=]
[), ;, }, public, String, leftString, (, final, int, length, ), {, if, (, length, <=, 0, ), {, return]
[(, final, int, length, ), {, if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (]
[(, final, int, length, ), {, if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (]
[int, length, ), {, if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (, length, >=]
[if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return]
[<=, 0, ), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (]
[), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,]
[return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,, 0, ,]
[length, >=, size, ), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return]
[), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (]
[return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,]
[String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,, 0, ,]
[buffer, ,, 0, ,, length, ), ;, }, }, public, String, rightString, (, final, int, length, ), {, if, (]
[buffer, ,, 0, ,, length, ), ;, }, }, public, String, rightString, (, final, int, length, ), {, if, (]
[0, ,, length, ), ;, }, }, public, String, rightString, (, final, int, length, ), {, if, (, length, <=]
[;, }, }, public, String, rightString, (, final, int, length, ), {, if, (, length, <=, 0, ), {, return]
[(, final, int, length, ), {, if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (]
[(, final, int, length, ), {, if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (]
[int, length, ), {, if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (, length, >=]
[if, (, length, <=, 0, ), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return]
[<=, 0, ), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (]
[), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,]
[return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,, 0, ,]
[length, >=, size, ), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return]
[), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (]
[return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,]
[return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,]
[String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,, size, -]
[buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,, size, -, length, ,]
[,, length, ), ;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (]
[,, length, ), ;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (]
[), ;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (, index, <]
[}, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (, index, <, 0, ), {]
[String, midString, (, int, index, ,, final, int, length, ), {, if, (, index, <, 0, ), {, index, =]
[,, final, int, length, ), {, if, (, index, <, 0, ), {, index, =, 0, ;, }, if, (]
[,, final, int, length, ), {, if, (, index, <, 0, ), {, index, =, 0, ;, }, if, (]
[,, final, int, length, ), {, if, (, index, <, 0, ), {, index, =, 0, ;, }, if, (]
[int, length, ), {, if, (, index, <, 0, ), {, index, =, 0, ;, }, if, (, length, <=]
[), {, if, (, index, <, 0, ), {, index, =, 0, ;, }, if, (, length, <=, 0, ||]
[), {, if, (, index, <, 0, ), {, index, =, 0, ;, }, if, (, length, <=, 0, ||]
[if, (, index, <, 0, ), {, index, =, 0, ;, }, if, (, length, <=, 0, ||, index, >=]
[0, ), {, index, =, 0, ;, }, if, (, length, <=, 0, ||, index, >=, size, ), {, return]
[0, ;, }, if, (, length, <=, 0, ||, index, >=, size, ), {, return, "", ;, }, if, (]
[0, ;, }, if, (, length, <=, 0, ||, index, >=, size, ), {, return, "", ;, }, if, (]
[}, if, (, length, <=, 0, ||, index, >=, size, ), {, return, "", ;, }, if, (, size, <=]
[}, if, (, length, <=, 0, ||, index, >=, size, ), {, return, "", ;, }, if, (, size, <=]
[(, length, <=, 0, ||, index, >=, size, ), {, return, "", ;, }, if, (, size, <=, index, +]
[||, index, >=, size, ), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return]
[size, ), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (]
[{, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer, ,]
["", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer, ,, index, ,]
["", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer, ,, index, ,]
[}, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer, ,, index, ,, size, -]
[index, +, length, ), {, return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return]
[), {, return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return, new, String, (]
[return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return, new, String, (, buffer, ,]
[String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return, new, String, (, buffer, ,, index, ,]
[,, length, ), ;, }, public, boolean, contains, (, final, char, ch, ), {, final, char, [, ], thisBuf, =]
[contains, (, final, char, ch, ), {, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =]
[final, char, ch, ), {, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, 0, ;]
[final, char, ch, ), {, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, 0, ;]
[ch, ), {, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, 0, ;, i, <]
[ch, ), {, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, 0, ;, i, <]
[char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, 0, ;, i, <, this, ., size, ;]
[char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, 0, ;, i, <, this, ., size, ;]
[;, for, (, int, i, =, 0, ;, i, <, this, ., size, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, this, ., size, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, this, ., size, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, this, ., size, ;, i, ++, ), {, if, (, thisBuf, []
[=, 0, ;, i, <, this, ., size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==]
[<, this, ., size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return]
[i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, true, ;, }, }, return]
[{, return, true, ;, }, }, return, false, ;, }, public, boolean, contains, (, final, String, str, ), {, return]
[{, return, true, ;, }, }, return, false, ;, }, public, boolean, contains, (, final, String, str, ), {, return]
[true, ;, }, }, return, false, ;, }, public, boolean, contains, (, final, String, str, ), {, return, indexOf, (]
[}, }, return, false, ;, }, public, boolean, contains, (, final, String, str, ), {, return, indexOf, (, str, ,]
[false, ;, }, public, boolean, contains, (, final, String, str, ), {, return, indexOf, (, str, ,, 0, ), >=]
[indexOf, (, str, ,, 0, ), >=, 0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return]
[indexOf, (, str, ,, 0, ), >=, 0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return]
[str, ,, 0, ), >=, 0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (]
[0, ), >=, 0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,]
[0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,, 0, ), >=]
[indexOf, (, matcher, ,, 0, ), >=, 0, ;, }, public, int, indexOf, (, final, char, ch, ), {, return]
[matcher, ,, 0, ), >=, 0, ;, }, public, int, indexOf, (, final, char, ch, ), {, return, indexOf, (]
[0, ), >=, 0, ;, }, public, int, indexOf, (, final, char, ch, ), {, return, indexOf, (, ch, ,]
[indexOf, (, ch, ,, 0, ), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {]
[ch, ,, 0, ), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =]
[,, 0, ), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[,, 0, ), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[,, 0, ), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <]
[}, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?]
[int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :]
[ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, startIndex, >=]
[startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, startIndex, >=, size, ), {, return]
[=, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, startIndex, >=, size, ), {, return, -]
[), ;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =]
[), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =]
[return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, startIndex, ;]
[return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, startIndex, ;]
[1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <]
[}, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, size, ;]
[}, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, size, ;]
[=, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, size, ;, i, ++, ), {, if, (]
[=, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, size, ;, i, ++, ), {, if, (]
[=, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, size, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, startIndex, ;, i, <, size, ;, i, ++, ), {, if, (, thisBuf, []
[int, i, =, startIndex, ;, i, <, size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==]
[;, i, <, size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return]
[i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, i, ;, }, }, return]
[++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, i, ;, }, }, return, -]
[return, i, ;, }, }, return, -, 1, ;, }, public, int, indexOf, (, final, String, str, ), {, return]
[;, }, }, return, -, 1, ;, }, public, int, indexOf, (, final, String, str, ), {, return, indexOf, (]
[}, return, -, 1, ;, }, public, int, indexOf, (, final, String, str, ), {, return, indexOf, (, str, ,]
[indexOf, (, str, ,, 0, ), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {]
[str, ,, 0, ), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =]
[,, 0, ), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[,, 0, ), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[,, 0, ), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <]
[}, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?]
[int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :]
[str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, str, ==]
[), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||]
[), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||]
[startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=]
[<, 0, ?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return]
[0, ?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -]
[if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, strLen, =]
[if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, strLen, =]
[size, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[size, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[{, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, ==]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, ==, 1, ), {, return]
[final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, ==, 1, ), {, return, indexOf, (]
[final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, ==, 1, ), {, return, indexOf, (]
[str, ., length, (, ), ;, if, (, strLen, ==, 1, ), {, return, indexOf, (, str, ., charAt, (]
[(, ), ;, if, (, strLen, ==, 1, ), {, return, indexOf, (, str, ., charAt, (, 0, ), ,]
[==, 1, ), {, return, indexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (]
[==, 1, ), {, return, indexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (]
[), {, return, indexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (, strLen, ==]
[(, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (, strLen, ==, 0, ), {, return]
[0, ), ,, startIndex, ), ;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (]
[0, ), ,, startIndex, ), ;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (]
[,, startIndex, ), ;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (, strLen, >]
[}, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (, strLen, >, size, ), {, return]
[if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (, strLen, >, size, ), {, return, -]
[;, }, if, (, strLen, >, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =]
[size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =]
[size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =]
[size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =]
[{, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =, size, -]
[-, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =, size, -, strLen, +]
[=, buffer, ;, final, int, len, =, size, -, strLen, +, 1, ;, outer, :, for, (, int, i, =]
[;, final, int, len, =, size, -, strLen, +, 1, ;, outer, :, for, (, int, i, =, startIndex, ;]
[;, final, int, len, =, size, -, strLen, +, 1, ;, outer, :, for, (, int, i, =, startIndex, ;]
[int, len, =, size, -, strLen, +, 1, ;, outer, :, for, (, int, i, =, startIndex, ;, i, <]
[=, size, -, strLen, +, 1, ;, outer, :, for, (, int, i, =, startIndex, ;, i, <, len, ;]
[=, size, -, strLen, +, 1, ;, outer, :, for, (, int, i, =, startIndex, ;, i, <, len, ;]
[for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, startIndex, ;, i, <, len, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, len, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;]
[;, i, <, len, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;]
[++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[(, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (]
[=, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=]
[=, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=]
[;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, []
[;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, []
[<, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, [, i, +]
[., charAt, (, j, ), !=, thisBuf, [, i, +, j, ], ), {, continue, outer, ;, }, }, return]
[), !=, thisBuf, [, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, return]
[!=, thisBuf, [, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, return, -]
[}, return, i, ;, }, return, -, 1, ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ), {, return]
[i, ;, }, return, -, 1, ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ), {, return, indexOf, (]
[}, return, -, 1, ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,]
[indexOf, (, matcher, ,, 0, ), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {]
[matcher, ,, 0, ), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =]
[,, 0, ), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[,, 0, ), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[,, 0, ), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <]
[}, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?]
[int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :]
[matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==]
[), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||]
[), {, startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||]
[startIndex, =, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=]
[<, 0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return]
[0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -]
[if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, len, =]
[size, ), {, return, -, 1, ;, }, final, int, len, =, size, ;, final, char, [, ], buf, =]
[}, final, int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =]
[int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, startIndex, ;]
[int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, startIndex, ;]
[=, size, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, len, ;]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, len, ;]
[=, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, if, (]
[=, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, if, (]
[=, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, if, (]
[(, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, if, (, matcher, ., isMatch, (]
[i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,]
[startIndex, ;, i, <, len, ;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,]
[i, <, len, ;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,]
[;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >]
[{, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >, 0, ), {, return]
[isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >, 0, ), {, return, i, ;, }, }, return]
[(, buf, ,, i, ,, startIndex, ,, len, ), >, 0, ), {, return, i, ;, }, }, return, -]
[return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return]
[;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return, lastIndexOf, (]
[}, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return, lastIndexOf, (, ch, ,]
[}, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return, lastIndexOf, (, ch, ,]
[-, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return, lastIndexOf, (, ch, ,, size, -]
[ch, ,, size, -, 1, ), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {]
[size, -, 1, ), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[}, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?]
[}, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?]
[int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -]
[(, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, startIndex, <]
[(, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return]
[startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -]
[startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i, =]
[;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;]
[;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;]
[(, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;, i, >=]
[<, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;]
[<, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;]
[1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (]
[1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (]
[1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (]
[}, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, buffer, []
[int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, buffer, [, i, ], ==]
[;, i, >=, 0, ;, i, --, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return]
[i, --, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return, i, ;, }, }, return]
[--, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return, i, ;, }, }, return, -]
[return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String, str, ), {, return]
[;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String, str, ), {, return, lastIndexOf, (]
[}, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String, str, ), {, return, lastIndexOf, (, str, ,]
[}, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String, str, ), {, return, lastIndexOf, (, str, ,]
[-, 1, ;, }, public, int, lastIndexOf, (, final, String, str, ), {, return, lastIndexOf, (, str, ,, size, -]
[str, ,, size, -, 1, ), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {]
[size, -, 1, ), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[}, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?]
[}, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?]
[int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -]
[(, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, str, ==]
[startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||]
[startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||]
[(, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <]
[?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return]
[size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -]
[if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int, strLen, =]
[if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int, strLen, =]
[0, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[0, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[0, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[{, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >]
[-, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, &&]
[-, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, &&]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, &&, strLen, <=]
[=, str, ., length, (, ), ;, if, (, strLen, >, 0, &&, strLen, <=, size, ), {, if, (]
[=, str, ., length, (, ), ;, if, (, strLen, >, 0, &&, strLen, <=, size, ), {, if, (]
[., length, (, ), ;, if, (, strLen, >, 0, &&, strLen, <=, size, ), {, if, (, strLen, ==]
[;, if, (, strLen, >, 0, &&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return]
[(, strLen, >, 0, &&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (]
[(, strLen, >, 0, &&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (]
[&&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (]
[size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (, 0, ), ,]
[lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =]
[lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =]
[lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =]
[str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -]
[charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +]
[0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;]
[0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;]
[,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;, i, >=]
[), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;, i, >=, 0, ;]
[), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;, i, >=, 0, ;]
[=, startIndex, -, strLen, +, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =]
[-, strLen, +, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;]
[-, strLen, +, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;]
[+, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;]
[;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;]
[--, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[--, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[--, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[(, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (]
[=, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=]
[=, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=]
[;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, []
[;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, []
[<, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, [, i, +]
[., charAt, (, j, ), !=, buffer, [, i, +, j, ], ), {, continue, outer, ;, }, }, return]
[[, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (]
[[, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (]
[+, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (, strLen, ==]
[{, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (, strLen, ==, 0, ), {, return]
[}, }, return, i, ;, }, }, else, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, return]
[}, return, i, ;, }, }, else, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, return, -]
[{, return, startIndex, ;, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {, return]
[startIndex, ;, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {, return, lastIndexOf, (]
[}, return, -, 1, ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {, return, lastIndexOf, (, matcher, ,]
[lastIndexOf, (, matcher, ,, size, ), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {]
[matcher, ,, size, ), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =]
[,, size, ), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[,, size, ), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[,, size, ), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[}, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?]
[}, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?]
[int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -]
[(, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[int, startIndex, ), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (]
[), {, startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==]
[startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||]
[startIndex, =, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||]
[(, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <]
[?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return]
[size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return, -]
[matcher, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, char, [, ], buf, =]
[0, ), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =]
[0, ), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =]
[{, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =, startIndex, +]
[char, [, ], buf, =, buffer, ;, final, int, endIndex, =, startIndex, +, 1, ;, for, (, int, i, =]
[], buf, =, buffer, ;, final, int, endIndex, =, startIndex, +, 1, ;, for, (, int, i, =, startIndex, ;]
[], buf, =, buffer, ;, final, int, endIndex, =, startIndex, +, 1, ;, for, (, int, i, =, startIndex, ;]
[=, buffer, ;, final, int, endIndex, =, startIndex, +, 1, ;, for, (, int, i, =, startIndex, ;, i, >=]
[;, final, int, endIndex, =, startIndex, +, 1, ;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;]
[;, final, int, endIndex, =, startIndex, +, 1, ;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;]
[+, 1, ;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (]
[+, 1, ;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (]
[+, 1, ;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, matcher, ., isMatch, (]
[i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,]
[startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,]
[i, >=, 0, ;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,]
[;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >]
[{, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >, 0, ), {, return]
[isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >, 0, ), {, return, i, ;, }, }, return]
[(, buf, ,, i, ,, 0, ,, endIndex, ), >, 0, ), {, return, i, ;, }, }, return, -]
[0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, StrTokenizer, asTokenizer, (, ), {, return]
[public, StrTokenizer, asTokenizer, (, ), {, return, new, StrBuilderTokenizer, (, ), ;, }, public, Reader, asReader, (, ), {, return]
[public, Reader, asReader, (, ), {, return, new, StrBuilderReader, (, ), ;, }, public, Writer, asWriter, (, ), {, return]
[), {, return, new, StrBuilderWriter, (, ), ;, }, public, boolean, equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (]
[), {, return, new, StrBuilderWriter, (, ), ;, }, public, boolean, equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (]
[return, new, StrBuilderWriter, (, ), ;, }, public, boolean, equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (, this, ==]
[), ;, }, public, boolean, equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return]
[equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (, this, ., size, !=]
[other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (, this, ., size, !=]
[==, other, ), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return]
[(, this, ., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =]
[(, this, ., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =]
[return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, [, ], =]
[return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, [, ], =]
[=, this, ., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =]
[=, this, ., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =]
[., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -]
[;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;]
[;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;]
[char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=]
[[, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;]
[[, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;]
[(, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, char, c1, =]
[(, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, char, c1, =]
[i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, char, c1, =, thisBuf, []
[>=, 0, ;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =]
[>=, 0, ;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =]
[;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, []
[final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (]
[final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (]
[final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (]
[c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=]
[thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&]
[thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&]
[thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&]
[;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (]
[c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (, c1, ), !=]
[c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (, c1, ), !=]
[i, ], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (]
[c1, !=, c2, &&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), ), {, return]
[., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), ), {, return, false, ;, }, }, return]
[return, false, ;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {, if, (]
[return, false, ;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {, if, (]
[;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {, if, (, this, ==]
[true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return]
[equals, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[equals, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[equals, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (, this, ., size, !=]
[other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (, this, ., size, !=]
[==, other, ), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return]
[(, this, ., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =]
[(, this, ., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =]
[return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, [, ], =]
[return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, [, ], =]
[=, this, ., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =]
[=, this, ., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =]
[., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -]
[;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;]
[;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;]
[char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=]
[[, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;]
[[, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, thisBuf, []
[=, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=]
[=, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, []
[0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ], ), {, return]
[{, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ], ), {, return, false, ;, }, }, return]
[;, }, }, return, true, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[;, }, }, return, true, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[}, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, instanceof, StrBuilder, ), {, return]
[Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, instanceof, StrBuilder, ), {, return, equals, (]
[equals, (, final, Object, obj, ), {, if, (, obj, instanceof, StrBuilder, ), {, return, equals, (, (, StrBuilder, )]
[), {, if, (, obj, instanceof, StrBuilder, ), {, return, equals, (, (, StrBuilder, ), obj, ), ;, }, return]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, final, char, buf, [, ], =]
[}, @, Override, public, int, hashCode, (, ), {, final, char, buf, [, ], =, buffer, ;, int, hash, =]
[), {, final, char, buf, [, ], =, buffer, ;, int, hash, =, 0, ;, for, (, int, i, =]
[), {, final, char, buf, [, ], =, buffer, ;, int, hash, =, 0, ;, for, (, int, i, =]
[final, char, buf, [, ], =, buffer, ;, int, hash, =, 0, ;, for, (, int, i, =, size, -]
[buf, [, ], =, buffer, ;, int, hash, =, 0, ;, for, (, int, i, =, size, -, 1, ;]
[buf, [, ], =, buffer, ;, int, hash, =, 0, ;, for, (, int, i, =, size, -, 1, ;]
[], =, buffer, ;, int, hash, =, 0, ;, for, (, int, i, =, size, -, 1, ;, i, >=]
[buffer, ;, int, hash, =, 0, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;]
[buffer, ;, int, hash, =, 0, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;]
[=, 0, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =]
[(, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =, 31, *]
[i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +]
[i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +]
[size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +, buf, []
[>=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +, buf, [, i, ], ;, }, return]
[+, buf, [, i, ], ;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return]
[i, ], ;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return, new, String, (]
[;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return, new, String, (, buffer, ,]
[return, hash, ;, }, @, Override, public, String, toString, (, ), {, return, new, String, (, buffer, ,, 0, ,]
[{, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return]
[{, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return]
[String, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (]
[,, size, ), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (, size, ), ., append, (]
[), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (, size, ), ., append, (, buffer, ,]
[}, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (, size, ), ., append, (, buffer, ,, 0, ,]
[size, ), ., append, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return]
[size, ), ., append, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return]
[append, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (]
[,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (, size, ), ., append, (]
[), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (, size, ), ., append, (, buffer, ,]
[}, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (, size, ), ., append, (, buffer, ,, 0, ,]
[., append, (, buffer, ,, 0, ,, size, ), ;, }, @, Override, public, String, build, (, ), {, return]
[return, toString, (, ), ;, }, protected, int, validateRange, (, final, int, startIndex, ,, int, endIndex, ), {, if, (]
[return, toString, (, ), ;, }, protected, int, validateRange, (, final, int, startIndex, ,, int, endIndex, ), {, if, (]
[(, ), ;, }, protected, int, validateRange, (, final, int, startIndex, ,, int, endIndex, ), {, if, (, startIndex, <]
[protected, int, validateRange, (, final, int, startIndex, ,, int, endIndex, ), {, if, (, startIndex, <, 0, ), {, throw]
[(, final, int, startIndex, ,, int, endIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (]
[endIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (]
[endIndex, ), {, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (]
[{, if, (, startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >]
[startIndex, <, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {]
[0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, endIndex, =]
[StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, endIndex, =, size, ;, }, if, (]
[StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, endIndex, =, size, ;, }, if, (]
[startIndex, ), ;, }, if, (, endIndex, >, size, ), {, endIndex, =, size, ;, }, if, (, startIndex, >]
[if, (, endIndex, >, size, ), {, endIndex, =, size, ;, }, if, (, startIndex, >, endIndex, ), {, throw]
[>, size, ), {, endIndex, =, size, ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (]
[=, size, ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, return]
[(, "end < start", ), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (]
[(, "end < start", ), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (]
[(, "end < start", ), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (]
[), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (, index, <]
[}, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (, index, <, 0, ||]
[}, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (, index, <, 0, ||]
[endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (, index, <, 0, ||, index, >]
[void, validateIndex, (, final, int, index, ), {, if, (, index, <, 0, ||, index, >, size, ), {, throw]
[final, int, index, ), {, if, (, index, <, 0, ||, index, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (]
[>, tokenize, (, final, char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (]
[>, tokenize, (, final, char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (]
[(, final, char, [, ], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (, chars, ==]
[], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ), {, return]
[], chars, ,, final, int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ), {, return]
[int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ), {, return, super, ., tokenize, (]
[int, offset, ,, final, int, count, ), {, if, (, chars, ==, null, ), {, return, super, ., tokenize, (]
[), {, if, (, chars, ==, null, ), {, return, super, ., tokenize, (, StrBuilder, ., this, ., buffer, ,]
[if, (, chars, ==, null, ), {, return, super, ., tokenize, (, StrBuilder, ., this, ., buffer, ,, 0, ,]
[if, (, chars, ==, null, ), {, return, super, ., tokenize, (, StrBuilder, ., this, ., buffer, ,, 0, ,]
[(, StrBuilder, ., this, ., buffer, ,, 0, ,, StrBuilder, ., this, ., size, (, ), ), ;, }, return]
[(, StrBuilder, ., this, ., buffer, ,, 0, ,, StrBuilder, ., this, ., size, (, ), ), ;, }, return]
[., buffer, ,, 0, ,, StrBuilder, ., this, ., size, (, ), ), ;, }, return, super, ., tokenize, (]
[,, 0, ,, StrBuilder, ., this, ., size, (, ), ), ;, }, return, super, ., tokenize, (, chars, ,]
[,, StrBuilder, ., this, ., size, (, ), ), ;, }, return, super, ., tokenize, (, chars, ,, offset, ,]
[chars, ,, offset, ,, count, ), ;, }, @, Override, public, String, getContent, (, ), {, final, String, str, =]
[chars, ,, offset, ,, count, ), ;, }, @, Override, public, String, getContent, (, ), {, final, String, str, =]
[@, Override, public, String, getContent, (, ), {, final, String, str, =, super, ., getContent, (, ), ;, if, (]
[@, Override, public, String, getContent, (, ), {, final, String, str, =, super, ., getContent, (, ), ;, if, (]
[public, String, getContent, (, ), {, final, String, str, =, super, ., getContent, (, ), ;, if, (, str, ==]
[), {, final, String, str, =, super, ., getContent, (, ), ;, if, (, str, ==, null, ), {, return]
[), {, final, String, str, =, super, ., getContent, (, ), ;, if, (, str, ==, null, ), {, return]
[), ;, if, (, str, ==, null, ), {, return, StrBuilder, ., this, ., toString, (, ), ;, }, return]
[}, @, Override, public, void, close, (, ), {, }, @, Override, public, int, read, (, ), {, if, (]
[}, @, Override, public, void, close, (, ), {, }, @, Override, public, int, read, (, ), {, if, (]
[void, close, (, ), {, }, @, Override, public, int, read, (, ), {, if, (, ready, (, ), ==]
[{, }, @, Override, public, int, read, (, ), {, if, (, ready, (, ), ==, false, ), {, return]
[}, @, Override, public, int, read, (, ), {, if, (, ready, (, ), ==, false, ), {, return, -]
[int, read, (, ), {, if, (, ready, (, ), ==, false, ), {, return, -, 1, ;, }, return]
[int, read, (, ), {, if, (, ready, (, ), ==, false, ), {, return, -, 1, ;, }, return]
[(, ready, (, ), ==, false, ), {, return, -, 1, ;, }, return, StrBuilder, ., this, ., charAt, (]
[(, ready, (, ), ==, false, ), {, return, -, 1, ;, }, return, StrBuilder, ., this, ., charAt, (]
[public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (]
[public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (]
[public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (]
[public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (]
[public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (]
[public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (]
[read, (, final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (, off, <]
[final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (, off, <, 0, ||]
[final, char, b, [, ], ,, final, int, off, ,, int, len, ), {, if, (, off, <, 0, ||]
[b, [, ], ,, final, int, off, ,, int, len, ), {, if, (, off, <, 0, ||, len, <]
[], ,, final, int, off, ,, int, len, ), {, if, (, off, <, 0, ||, len, <, 0, ||]
[], ,, final, int, off, ,, int, len, ), {, if, (, off, <, 0, ||, len, <, 0, ||]
[final, int, off, ,, int, len, ), {, if, (, off, <, 0, ||, len, <, 0, ||, off, >]
[final, int, off, ,, int, len, ), {, if, (, off, <, 0, ||, len, <, 0, ||, off, >]
[int, len, ), {, if, (, off, <, 0, ||, len, <, 0, ||, off, >, b, ., length, ||]
[int, len, ), {, if, (, off, <, 0, ||, len, <, 0, ||, off, >, b, ., length, ||]
[len, ), {, if, (, off, <, 0, ||, len, <, 0, ||, off, >, b, ., length, ||, (]
[len, ), {, if, (, off, <, 0, ||, len, <, 0, ||, off, >, b, ., length, ||, (]
[{, if, (, off, <, 0, ||, len, <, 0, ||, off, >, b, ., length, ||, (, off, +]
[off, <, 0, ||, len, <, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >]
[off, <, 0, ||, len, <, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >]
[len, <, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||]
[len, <, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||]
[<, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (]
[<, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (]
[||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (, off, +]
[b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (, off, +, len, ), <]
[(, off, +, len, ), >, b, ., length, ||, (, off, +, len, ), <, 0, ), {, throw]
[length, ||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (]
[length, ||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (]
[(, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==]
[), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return]
[throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0, ;, }, if, (]
[throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0, ;, }, if, (]
[IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0, ;, }, if, (, pos, >=]
[IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0, ;, }, if, (, pos, >=]
[), {, return, 0, ;, }, if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return]
[{, return, 0, ;, }, if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return, -]
[if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return, -, 1, ;, }, if, (]
[if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return, -, 1, ;, }, if, (]
[if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return, -, 1, ;, }, if, (]
[pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return, -, 1, ;, }, if, (, pos, +]
[StrBuilder, ., this, ., size, (, ), ), {, return, -, 1, ;, }, if, (, pos, +, len, >]
[(, ), ), {, return, -, 1, ;, }, if, (, pos, +, len, >, size, (, ), ), {]
[), {, return, -, 1, ;, }, if, (, pos, +, len, >, size, (, ), ), {, len, =]
[), {, return, -, 1, ;, }, if, (, pos, +, len, >, size, (, ), ), {, len, =]
[), {, return, -, 1, ;, }, if, (, pos, +, len, >, size, (, ), ), {, len, =]
[(, pos, +, len, >, size, (, ), ), {, len, =, StrBuilder, ., this, ., size, (, ), -]
[len, >, size, (, ), ), {, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }]
[len, >, size, (, ), ), {, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }]
[{, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (]
[=, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,]
[=, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,]
[., this, ., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +]
[., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,]
[(, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,, b, ,]
[pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,, b, ,, off, ), ;]
[}, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,, b, ,, off, ), ;, pos, +=]
[this, ., getChars, (, pos, ,, pos, +, len, ,, b, ,, off, ), ;, pos, +=, len, ;, return]
[pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (]
[pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (]
[pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (]
[len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (, pos, +]
[return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (, pos, +, n, >]
[return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (, pos, +, n, >]
[(, long, n, ), {, if, (, pos, +, n, >, StrBuilder, ., this, ., size, (, ), ), {]
[n, ), {, if, (, pos, +, n, >, StrBuilder, ., this, ., size, (, ), ), {, n, =]
[n, ), {, if, (, pos, +, n, >, StrBuilder, ., this, ., size, (, ), ), {, n, =]
[n, ), {, if, (, pos, +, n, >, StrBuilder, ., this, ., size, (, ), ), {, n, =]
[>, StrBuilder, ., this, ., size, (, ), ), {, n, =, StrBuilder, ., this, ., size, (, ), -]
[size, (, ), ), {, n, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if, (]
[size, (, ), ), {, n, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if, (]
[), ), {, n, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if, (, n, <]
[=, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if, (, n, <, 0, ), {, return]
[this, ., size, (, ), -, pos, ;, }, if, (, n, <, 0, ), {, return, 0, ;, }]
[size, (, ), -, pos, ;, }, if, (, n, <, 0, ), {, return, 0, ;, }, pos, +=]
[-, pos, ;, }, if, (, n, <, 0, ), {, return, 0, ;, }, pos, +=, n, ;, return]
[0, ;, }, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (, ), {, return]
[0, ;, }, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (, ), {, return]
[}, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (, ), {, return, pos, <]
[}, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (, ), {, return, pos, <]
[pos, <, StrBuilder, ., this, ., size, (, ), ;, }, @, Override, public, boolean, markSupported, (, ), {, return]
[boolean, markSupported, (, ), {, return, true, ;, }, @, Override, public, void, mark, (, final, int, readAheadLimit, ), {]
[(, ), {, return, true, ;, }, @, Override, public, void, mark, (, final, int, readAheadLimit, ), {, mark, =]
[mark, (, final, int, readAheadLimit, ), {, mark, =, pos, ;, }, @, Override, public, void, reset, (, ), {]
[final, int, readAheadLimit, ), {, mark, =, pos, ;, }, @, Override, public, void, reset, (, ), {, pos, =]
[@, Override, public, void, flush, (, ), {, }, @, Override, public, void, write, (, final, int, c, ), {]
[@, Override, public, void, flush, (, ), {, }, @, Override, public, void, write, (, final, int, c, ), {]
[), {, }, @, Override, public, void, write, (, final, int, c, ), {, StrBuilder, ., this, ., append, (]
[@, Override, public, void, write, (, final, int, c, ), {, StrBuilder, ., this, ., append, (, (, char, )]
[(, char, ), c, ), ;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ), {]
[(, char, ), c, ), ;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ), {]
[}, @, Override, public, void, write, (, final, char, [, ], cbuf, ), {, StrBuilder, ., this, ., append, (]
[Override, public, void, write, (, final, char, [, ], cbuf, ,, final, int, off, ,, final, int, len, ), {]
[Override, public, void, write, (, final, char, [, ], cbuf, ,, final, int, off, ,, final, int, len, ), {]
[char, [, ], cbuf, ,, final, int, off, ,, final, int, len, ), {, StrBuilder, ., this, ., append, (]
[], cbuf, ,, final, int, off, ,, final, int, len, ), {, StrBuilder, ., this, ., append, (, cbuf, ,]
[,, final, int, off, ,, final, int, len, ), {, StrBuilder, ., this, ., append, (, cbuf, ,, off, ,]
[(, cbuf, ,, off, ,, len, ), ;, }, @, Override, public, void, write, (, final, String, str, ), {]
[(, cbuf, ,, off, ,, len, ), ;, }, @, Override, public, void, write, (, final, String, str, ), {]
[), ;, }, @, Override, public, void, write, (, final, String, str, ), {, StrBuilder, ., this, ., append, (]
[}, @, Override, public, void, write, (, final, String, str, ,, final, int, off, ,, final, int, len, ), {]
[}, @, Override, public, void, write, (, final, String, str, ,, final, int, off, ,, final, int, len, ), {]
[(, final, String, str, ,, final, int, off, ,, final, int, len, ), {, StrBuilder, ., this, ., append, (]
[String, str, ,, final, int, off, ,, final, int, len, ), {, StrBuilder, ., this, ., append, (, str, ,]
[,, final, int, off, ,, final, int, len, ), {, StrBuilder, ., this, ., append, (, str, ,, off, ,]
