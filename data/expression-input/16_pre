[logging, ., Logger, ;, import, javax, ., annotation, ., Nullable, ;, final, class, Tracer, {, static, final, Logger, logger, =]
[logging, ., Logger, ;, import, javax, ., annotation, ., Nullable, ;, final, class, Tracer, {, static, final, Logger, logger, =]
[import, javax, ., annotation, ., Nullable, ;, final, class, Tracer, {, static, final, Logger, logger, =, Logger, ., getLogger, (]
[import, javax, ., annotation, ., Nullable, ;, final, class, Tracer, {, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., getName, (, ), ), ;, private, static, volatile, boolean, defaultPrettyPrint, ;, private, static, List, <, TracingStatistic, >, extraTracingStatistics, =]
[comment, ;, private, final, long, startTimeMs, ;, private, long, stopTimeMs, ;, final, Thread, startThread, ;, static, final, int, MAX_TRACE_SIZE, =]
[final, int, MAX_TRACE_SIZE, =, 1000, ;, static, interface, InternalClock, {, long, currentTimeMillis, (, ), ;, }, static, InternalClock, clock, =]
[;, }, static, InternalClock, clock, =, new, InternalClock, (, ), {, @, Override, public, long, currentTimeMillis, (, ), {, return]
[;, }, static, InternalClock, clock, =, new, InternalClock, (, ), {, @, Override, public, long, currentTimeMillis, (, ), {, return]
[currentTimeMillis, (, ), ;, }, }, ;, Tracer, (, @, Nullable, String, type, ,, @, Nullable, String, comment, ), {]
[currentTimeMillis, (, ), ;, }, }, ;, Tracer, (, @, Nullable, String, type, ,, @, Nullable, String, comment, ), {]
[}, }, ;, Tracer, (, @, Nullable, String, type, ,, @, Nullable, String, comment, ), {, this, ., type, =]
[;, Tracer, (, @, Nullable, String, type, ,, @, Nullable, String, comment, ), {, this, ., type, =, type, ;]
[;, Tracer, (, @, Nullable, String, type, ,, @, Nullable, String, comment, ), {, this, ., type, =, type, ;]
[Nullable, String, type, ,, @, Nullable, String, comment, ), {, this, ., type, =, type, ;, this, ., comment, =]
[Nullable, String, type, ,, @, Nullable, String, comment, ), {, this, ., type, =, type, ;, this, ., comment, =]
[Nullable, String, type, ,, @, Nullable, String, comment, ), {, this, ., type, =, type, ;, this, ., comment, =]
[type, ,, @, Nullable, String, comment, ), {, this, ., type, =, type, ;, this, ., comment, =, comment, ==]
[@, Nullable, String, comment, ), {, this, ., type, =, type, ;, this, ., comment, =, comment, ==, null, ?]
[String, comment, ), {, this, ., type, =, type, ;, this, ., comment, =, comment, ==, null, ?, "", :]
[), {, this, ., type, =, type, ;, this, ., comment, =, comment, ==, null, ?, "", :, comment, ;]
[this, ., type, =, type, ;, this, ., comment, =, comment, ==, null, ?, "", :, comment, ;, startTimeMs, =]
[this, ., type, =, type, ;, this, ., comment, =, comment, ==, null, ?, "", :, comment, ;, startTimeMs, =]
[this, ., comment, =, comment, ==, null, ?, "", :, comment, ;, startTimeMs, =, clock, ., currentTimeMillis, (, ), ;]
[comment, =, comment, ==, null, ?, "", :, comment, ;, startTimeMs, =, clock, ., currentTimeMillis, (, ), ;, startThread, =]
[comment, =, comment, ==, null, ?, "", :, comment, ;, startTimeMs, =, clock, ., currentTimeMillis, (, ), ;, startThread, =]
[comment, ;, startTimeMs, =, clock, ., currentTimeMillis, (, ), ;, startThread, =, Thread, ., currentThread, (, ), ;, if, (]
[;, startTimeMs, =, clock, ., currentTimeMillis, (, ), ;, startThread, =, Thread, ., currentThread, (, ), ;, if, (, !]
[;, startTimeMs, =, clock, ., currentTimeMillis, (, ), ;, startThread, =, Thread, ., currentThread, (, ), ;, if, (, !]
[=, Thread, ., currentThread, (, ), ;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {, int, size, =]
[=, Thread, ., currentThread, (, ), ;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {, int, size, =]
[;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {, int, size, =, extraTracingStatistics, ., size, (, ), ;]
[(, !, extraTracingStatistics, ., isEmpty, (, ), ), {, int, size, =, extraTracingStatistics, ., size, (, ), ;, extraTracingValues, =]
[., isEmpty, (, ), ), {, int, size, =, extraTracingStatistics, ., size, (, ), ;, extraTracingValues, =, new, long, []
[int, size, =, extraTracingStatistics, ., size, (, ), ;, extraTracingValues, =, new, long, [, size, ], ;, int, i, =]
[), ;, extraTracingValues, =, new, long, [, size, ], ;, int, i, =, 0, ;, for, (, TracingStatistic, tracingStatistic, :]
[=, new, long, [, size, ], ;, int, i, =, 0, ;, for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {]
[=, new, long, [, size, ], ;, int, i, =, 0, ;, for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {]
[long, [, size, ], ;, int, i, =, 0, ;, for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {, extraTracingValues, []
[], ;, int, i, =, 0, ;, for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {, extraTracingValues, [, i, ], =]
[], ;, int, i, =, 0, ;, for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {, extraTracingValues, [, i, ], =]
[=, 0, ;, for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {, extraTracingValues, [, i, ], =, tracingStatistic, ., start, (]
[for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {, extraTracingValues, [, i, ], =, tracingStatistic, ., start, (, startThread, ), ;]
[for, (, TracingStatistic, tracingStatistic, :, extraTracingStatistics, ), {, extraTracingValues, [, i, ], =, tracingStatistic, ., start, (, startThread, ), ;]
[extraTracingValues, [, i, ], =, tracingStatistic, ., start, (, startThread, ), ;, i, ++, ;, }, }, ThreadTrace, trace, =]
[., start, (, startThread, ), ;, i, ++, ;, }, }, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (]
[start, (, startThread, ), ;, i, ++, ;, }, }, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !]
[start, (, startThread, ), ;, i, ++, ;, }, }, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !]
[=, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return, ;, }, if, (]
[=, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return, ;, }, if, (]
[=, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return, ;, }, if, (]
[=, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return, ;, }, if, (]
[trace, ., isInitialized, (, ), ), {, return, ;, }, if, (, trace, ., events, ., size, (, ), >=]
[(, ), ), {, return, ;, }, if, (, trace, ., events, ., size, (, ), >=, MAX_TRACE_SIZE, ), {]
[(, ), ), {, return, ;, }, if, (, trace, ., events, ., size, (, ), >=, MAX_TRACE_SIZE, ), {]
[return, ;, }, if, (, trace, ., events, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (]
[return, ;, }, if, (, trace, ., events, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (]
[(, trace, ., events, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,]
[(, trace, ., events, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,]
[., events, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Giant thread trace. Too many Tracers created. ", +]
[., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Giant thread trace. Too many Tracers created. ", +, "Clearing to avoid memory leak.", ,]
[), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Giant thread trace. Too many Tracers created. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (]
[), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Giant thread trace. Too many Tracers created. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (]
[(, Level, ., WARNING, ,, "Giant thread trace. Too many Tracers created. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (, trace, ., toString, (, ), ), ), ;]
[(, Level, ., WARNING, ,, "Giant thread trace. Too many Tracers created. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (, trace, ., toString, (, ), ), ), ;]
[new, Throwable, (, trace, ., toString, (, ), ), ), ;, trace, ., truncateEvents, (, ), ;, }, if, (]
[new, Throwable, (, trace, ., toString, (, ), ), ), ;, trace, ., truncateEvents, (, ), ;, }, if, (]
[new, Throwable, (, trace, ., toString, (, ), ), ), ;, trace, ., truncateEvents, (, ), ;, }, if, (]
[new, Throwable, (, trace, ., toString, (, ), ), ), ;, trace, ., truncateEvents, (, ), ;, }, if, (]
[), ), ;, trace, ., truncateEvents, (, ), ;, }, if, (, trace, ., outstandingEvents, ., size, (, ), >=]
[trace, ., truncateEvents, (, ), ;, }, if, (, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {]
[trace, ., truncateEvents, (, ), ;, }, if, (, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {]
[), ;, }, if, (, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (]
[), ;, }, if, (, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (]
[(, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,]
[(, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,]
[(, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,]
[(, trace, ., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,]
[., outstandingEvents, ., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Too many outstanding Tracers. Tracer.stop() is missing ", +]
[., size, (, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Too many outstanding Tracers. Tracer.stop() is missing ", +, "or Tracer.stop() is not wrapped in a ", +]
[(, ), >=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Too many outstanding Tracers. Tracer.stop() is missing ", +, "or Tracer.stop() is not wrapped in a ", +, "try/finally block. ", +]
[>=, MAX_TRACE_SIZE, ), {, logger, ., log, (, Level, ., WARNING, ,, "Too many outstanding Tracers. Tracer.stop() is missing ", +, "or Tracer.stop() is not wrapped in a ", +, "try/finally block. ", +, "Clearing to avoid memory leak.", ,]
[{, logger, ., log, (, Level, ., WARNING, ,, "Too many outstanding Tracers. Tracer.stop() is missing ", +, "or Tracer.stop() is not wrapped in a ", +, "try/finally block. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (]
[{, logger, ., log, (, Level, ., WARNING, ,, "Too many outstanding Tracers. Tracer.stop() is missing ", +, "or Tracer.stop() is not wrapped in a ", +, "try/finally block. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (]
[,, "Too many outstanding Tracers. Tracer.stop() is missing ", +, "or Tracer.stop() is not wrapped in a ", +, "try/finally block. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (, trace, ., toString, (, ), ), ), ;]
[,, "Too many outstanding Tracers. Tracer.stop() is missing ", +, "or Tracer.stop() is not wrapped in a ", +, "try/finally block. ", +, "Clearing to avoid memory leak.", ,, new, Throwable, (, trace, ., toString, (, ), ), ), ;]
["Clearing to avoid memory leak.", ,, new, Throwable, (, trace, ., toString, (, ), ), ), ;, trace, ., truncateOutstandingEvents, (, ), ;, }]
["Clearing to avoid memory leak.", ,, new, Throwable, (, trace, ., toString, (, ), ), ), ;, trace, ., truncateOutstandingEvents, (, ), ;, }]
[(, trace, ., toString, (, ), ), ), ;, trace, ., truncateOutstandingEvents, (, ), ;, }, trace, ., startEvent, (]
[(, ), ;, }, trace, ., startEvent, (, this, ), ;, }, Tracer, (, String, comment, ), {, this, (]
[;, }, trace, ., startEvent, (, this, ), ;, }, Tracer, (, String, comment, ), {, this, (, null, ,]
[(, null, ,, comment, ), ;, }, static, Tracer, shortName, (, Object, object, ,, String, comment, ), {, if, (]
[(, null, ,, comment, ), ;, }, static, Tracer, shortName, (, Object, object, ,, String, comment, ), {, if, (]
[,, comment, ), ;, }, static, Tracer, shortName, (, Object, object, ,, String, comment, ), {, if, (, object, ==]
[}, static, Tracer, shortName, (, Object, object, ,, String, comment, ), {, if, (, object, ==, null, ), {, return]
[shortName, (, Object, object, ,, String, comment, ), {, if, (, object, ==, null, ), {, return, new, Tracer, (]
[String, comment, ), {, if, (, object, ==, null, ), {, return, new, Tracer, (, comment, ), ;, }, return]
[{, if, (, object, ==, null, ), {, return, new, Tracer, (, comment, ), ;, }, return, new, Tracer, (]
[{, if, (, object, ==, null, ), {, return, new, Tracer, (, comment, ), ;, }, return, new, Tracer, (]
[{, if, (, object, ==, null, ), {, return, new, Tracer, (, comment, ), ;, }, return, new, Tracer, (]
[Tracer, (, comment, ), ;, }, return, new, Tracer, (, object, ., getClass, (, ), ., getSimpleName, (, ), ,]
[,, comment, ), ;, }, private, static, String, longToPaddedString, (, long, v, ,, int, digits_column_width, ), {, int, digit_width, =]
[), ;, }, private, static, String, longToPaddedString, (, long, v, ,, int, digits_column_width, ), {, int, digit_width, =, numDigits, (]
[longToPaddedString, (, long, v, ,, int, digits_column_width, ), {, int, digit_width, =, numDigits, (, v, ), ;, StringBuilder, sb, =]
[int, digits_column_width, ), {, int, digit_width, =, numDigits, (, v, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[), {, int, digit_width, =, numDigits, (, v, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendSpaces, (]
[int, digit_width, =, numDigits, (, v, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendSpaces, (, sb, ,]
[int, digit_width, =, numDigits, (, v, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendSpaces, (, sb, ,]
[=, numDigits, (, v, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendSpaces, (, sb, ,, digits_column_width, -]
[v, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendSpaces, (, sb, ,, digits_column_width, -, digit_width, ), ;]
[v, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendSpaces, (, sb, ,, digits_column_width, -, digit_width, ), ;]
[sb, =, new, StringBuilder, (, ), ;, appendSpaces, (, sb, ,, digits_column_width, -, digit_width, ), ;, sb, ., append, (]
[(, ), ;, appendSpaces, (, sb, ,, digits_column_width, -, digit_width, ), ;, sb, ., append, (, v, ), ;, return]
[(, ), ;, appendSpaces, (, sb, ,, digits_column_width, -, digit_width, ), ;, sb, ., append, (, v, ), ;, return]
[return, sb, ., toString, (, ), ;, }, private, static, int, numDigits, (, long, n, ), {, int, i, =]
[(, ), ;, }, private, static, int, numDigits, (, long, n, ), {, int, i, =, 0, ;, do, {]
[(, ), ;, }, private, static, int, numDigits, (, long, n, ), {, int, i, =, 0, ;, do, {]
[}, private, static, int, numDigits, (, long, n, ), {, int, i, =, 0, ;, do, {, i, ++, ;]
[static, int, numDigits, (, long, n, ), {, int, i, =, 0, ;, do, {, i, ++, ;, n, =]
[static, int, numDigits, (, long, n, ), {, int, i, =, 0, ;, do, {, i, ++, ;, n, =]
[numDigits, (, long, n, ), {, int, i, =, 0, ;, do, {, i, ++, ;, n, =, n, /]
[{, int, i, =, 0, ;, do, {, i, ++, ;, n, =, n, /, 10, ;, }, while, (]
[{, int, i, =, 0, ;, do, {, i, ++, ;, n, =, n, /, 10, ;, }, while, (]
[i, =, 0, ;, do, {, i, ++, ;, n, =, n, /, 10, ;, }, while, (, n, >]
[do, {, i, ++, ;, n, =, n, /, 10, ;, }, while, (, n, >, 0, ), ;, return]
[;, return, i, ;, }, @, VisibleForTesting, static, void, appendSpaces, (, StringBuilder, sb, ,, int, numSpaces, ), {, if, (]
[;, return, i, ;, }, @, VisibleForTesting, static, void, appendSpaces, (, StringBuilder, sb, ,, int, numSpaces, ), {, if, (]
[i, ;, }, @, VisibleForTesting, static, void, appendSpaces, (, StringBuilder, sb, ,, int, numSpaces, ), {, if, (, numSpaces, >]
[@, VisibleForTesting, static, void, appendSpaces, (, StringBuilder, sb, ,, int, numSpaces, ), {, if, (, numSpaces, >, 16, ), {]
[@, VisibleForTesting, static, void, appendSpaces, (, StringBuilder, sb, ,, int, numSpaces, ), {, if, (, numSpaces, >, 16, ), {]
[appendSpaces, (, StringBuilder, sb, ,, int, numSpaces, ), {, if, (, numSpaces, >, 16, ), {, logger, ., warning, (]
[sb, ,, int, numSpaces, ), {, if, (, numSpaces, >, 16, ), {, logger, ., warning, (, "Tracer.appendSpaces called with large numSpaces", ), ;]
[int, numSpaces, ), {, if, (, numSpaces, >, 16, ), {, logger, ., warning, (, "Tracer.appendSpaces called with large numSpaces", ), ;, numSpaces, =]
[(, numSpaces, >, 16, ), {, logger, ., warning, (, "Tracer.appendSpaces called with large numSpaces", ), ;, numSpaces, =, 16, ;, }, while, (]
[(, numSpaces, >, 16, ), {, logger, ., warning, (, "Tracer.appendSpaces called with large numSpaces", ), ;, numSpaces, =, 16, ;, }, while, (]
[>, 16, ), {, logger, ., warning, (, "Tracer.appendSpaces called with large numSpaces", ), ;, numSpaces, =, 16, ;, }, while, (, numSpaces, >=]
[{, logger, ., warning, (, "Tracer.appendSpaces called with large numSpaces", ), ;, numSpaces, =, 16, ;, }, while, (, numSpaces, >=, 5, ), {]
[{, logger, ., warning, (, "Tracer.appendSpaces called with large numSpaces", ), ;, numSpaces, =, 16, ;, }, while, (, numSpaces, >=, 5, ), {]
[(, "Tracer.appendSpaces called with large numSpaces", ), ;, numSpaces, =, 16, ;, }, while, (, numSpaces, >=, 5, ), {, sb, ., append, (]
[;, numSpaces, =, 16, ;, }, while, (, numSpaces, >=, 5, ), {, sb, ., append, (, "     ", ), ;]
[=, 16, ;, }, while, (, numSpaces, >=, 5, ), {, sb, ., append, (, "     ", ), ;, numSpaces, -=]
[(, numSpaces, >=, 5, ), {, sb, ., append, (, "     ", ), ;, numSpaces, -=, 5, ;, }, switch, (]
[), {, sb, ., append, (, "     ", ), ;, numSpaces, -=, 5, ;, }, switch, (, numSpaces, ), {, case]
[sb, ., append, (, "     ", ), ;, numSpaces, -=, 5, ;, }, switch, (, numSpaces, ), {, case, 1, :]
[sb, ., append, (, "     ", ), ;, numSpaces, -=, 5, ;, }, switch, (, numSpaces, ), {, case, 1, :]
["     ", ), ;, numSpaces, -=, 5, ;, }, switch, (, numSpaces, ), {, case, 1, :, sb, ., append, (]
[;, }, switch, (, numSpaces, ), {, case, 1, :, sb, ., append, (, " ", ), ;, break, ;, case]
[switch, (, numSpaces, ), {, case, 1, :, sb, ., append, (, " ", ), ;, break, ;, case, 2, :]
[switch, (, numSpaces, ), {, case, 1, :, sb, ., append, (, " ", ), ;, break, ;, case, 2, :]
[{, case, 1, :, sb, ., append, (, " ", ), ;, break, ;, case, 2, :, sb, ., append, (]
[append, (, " ", ), ;, break, ;, case, 2, :, sb, ., append, (, "  ", ), ;, break, ;, case]
[" ", ), ;, break, ;, case, 2, :, sb, ., append, (, "  ", ), ;, break, ;, case, 3, :]
[" ", ), ;, break, ;, case, 2, :, sb, ., append, (, "  ", ), ;, break, ;, case, 3, :]
[;, case, 2, :, sb, ., append, (, "  ", ), ;, break, ;, case, 3, :, sb, ., append, (]
[append, (, "  ", ), ;, break, ;, case, 3, :, sb, ., append, (, "   ", ), ;, break, ;, case]
["  ", ), ;, break, ;, case, 3, :, sb, ., append, (, "   ", ), ;, break, ;, case, 4, :]
["  ", ), ;, break, ;, case, 3, :, sb, ., append, (, "   ", ), ;, break, ;, case, 4, :]
[;, case, 3, :, sb, ., append, (, "   ", ), ;, break, ;, case, 4, :, sb, ., append, (]
[., append, (, "    ", ), ;, break, ;, }, }, static, int, addTracingStatistic, (, TracingStatistic, tracingStatistic, ), {, if, (]
[., append, (, "    ", ), ;, break, ;, }, }, static, int, addTracingStatistic, (, TracingStatistic, tracingStatistic, ), {, if, (]
[;, }, }, static, int, addTracingStatistic, (, TracingStatistic, tracingStatistic, ), {, if, (, tracingStatistic, ., enable, (, ), ), {]
[;, }, }, static, int, addTracingStatistic, (, TracingStatistic, tracingStatistic, ), {, if, (, tracingStatistic, ., enable, (, ), ), {]
[int, addTracingStatistic, (, TracingStatistic, tracingStatistic, ), {, if, (, tracingStatistic, ., enable, (, ), ), {, extraTracingStatistics, ., add, (]
[tracingStatistic, ), {, if, (, tracingStatistic, ., enable, (, ), ), {, extraTracingStatistics, ., add, (, tracingStatistic, ), ;, return]
[tracingStatistic, ), {, if, (, tracingStatistic, ., enable, (, ), ), {, extraTracingStatistics, ., add, (, tracingStatistic, ), ;, return]
[(, tracingStatistic, ., enable, (, ), ), {, extraTracingStatistics, ., add, (, tracingStatistic, ), ;, return, extraTracingStatistics, ., lastIndexOf, (]
[{, extraTracingStatistics, ., add, (, tracingStatistic, ), ;, return, extraTracingStatistics, ., lastIndexOf, (, tracingStatistic, ), ;, }, else, {, return]
[extraTracingStatistics, ., add, (, tracingStatistic, ), ;, return, extraTracingStatistics, ., lastIndexOf, (, tracingStatistic, ), ;, }, else, {, return, -]
[tracingStatistic, ), ;, }, else, {, return, -, 1, ;, }, }, @, VisibleForTesting, static, void, clearTracingStatisticsTestingOnly, (, ), {]
[tracingStatistic, ), ;, }, else, {, return, -, 1, ;, }, }, @, VisibleForTesting, static, void, clearTracingStatisticsTestingOnly, (, ), {]
[static, void, clearTracingStatisticsTestingOnly, (, ), {, extraTracingStatistics, ., clear, (, ), ;, }, long, stop, (, int, silence_threshold, ), {]
[static, void, clearTracingStatisticsTestingOnly, (, ), {, extraTracingStatistics, ., clear, (, ), ;, }, long, stop, (, int, silence_threshold, ), {]
[), {, extraTracingStatistics, ., clear, (, ), ;, }, long, stop, (, int, silence_threshold, ), {, Preconditions, ., checkState, (]
[), {, extraTracingStatistics, ., clear, (, ), ;, }, long, stop, (, int, silence_threshold, ), {, Preconditions, ., checkState, (]
[), {, extraTracingStatistics, ., clear, (, ), ;, }, long, stop, (, int, silence_threshold, ), {, Preconditions, ., checkState, (]
[), ;, }, long, stop, (, int, silence_threshold, ), {, Preconditions, ., checkState, (, Thread, ., currentThread, (, ), ==]
[int, silence_threshold, ), {, Preconditions, ., checkState, (, Thread, ., currentThread, (, ), ==, startThread, ), ;, ThreadTrace, trace, =]
[checkState, (, Thread, ., currentThread, (, ), ==, startThread, ), ;, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (]
[(, Thread, ., currentThread, (, ), ==, startThread, ), ;, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !]
[(, Thread, ., currentThread, (, ), ==, startThread, ), ;, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !]
[), ;, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return]
[trace, =, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return, 0, ;, }]
[getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return, 0, ;, }, stopTimeMs, =]
[getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, return, 0, ;, }, stopTimeMs, =]
[., isInitialized, (, ), ), {, return, 0, ;, }, stopTimeMs, =, clock, ., currentTimeMillis, (, ), ;, if, (]
[., isInitialized, (, ), ), {, return, 0, ;, }, stopTimeMs, =, clock, ., currentTimeMillis, (, ), ;, if, (]
[(, ), ), {, return, 0, ;, }, stopTimeMs, =, clock, ., currentTimeMillis, (, ), ;, if, (, extraTracingValues, !=]
[stopTimeMs, =, clock, ., currentTimeMillis, (, ), ;, if, (, extraTracingValues, !=, null, ), {, for, (, int, i, =]
[clock, ., currentTimeMillis, (, ), ;, if, (, extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;]
[clock, ., currentTimeMillis, (, ), ;, if, (, extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;]
[currentTimeMillis, (, ), ;, if, (, extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[currentTimeMillis, (, ), ;, if, (, extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, extraTracingValues, ., length, ;]
[if, (, extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, extraTracingValues, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, extraTracingValues, ., length, ;, i, ++, ), {, long, value, =]
[for, (, int, i, =, 0, ;, i, <, extraTracingValues, ., length, ;, i, ++, ), {, long, value, =]
[for, (, int, i, =, 0, ;, i, <, extraTracingValues, ., length, ;, i, ++, ), {, long, value, =]
[=, 0, ;, i, <, extraTracingValues, ., length, ;, i, ++, ), {, long, value, =, extraTracingStatistics, ., get, (]
[extraTracingValues, ., length, ;, i, ++, ), {, long, value, =, extraTracingStatistics, ., get, (, i, ), ., stop, (]
[;, i, ++, ), {, long, value, =, extraTracingStatistics, ., get, (, i, ), ., stop, (, startThread, ), ;]
[;, i, ++, ), {, long, value, =, extraTracingStatistics, ., get, (, i, ), ., stop, (, startThread, ), ;]
[++, ), {, long, value, =, extraTracingStatistics, ., get, (, i, ), ., stop, (, startThread, ), ;, extraTracingValues, []
[long, value, =, extraTracingStatistics, ., get, (, i, ), ., stop, (, startThread, ), ;, extraTracingValues, [, i, ], =]
[long, value, =, extraTracingStatistics, ., get, (, i, ), ., stop, (, startThread, ), ;, extraTracingValues, [, i, ], =]
[=, extraTracingStatistics, ., get, (, i, ), ., stop, (, startThread, ), ;, extraTracingValues, [, i, ], =, value, -]
[=, extraTracingStatistics, ., get, (, i, ), ., stop, (, startThread, ), ;, extraTracingValues, [, i, ], =, value, -]
[., get, (, i, ), ., stop, (, startThread, ), ;, extraTracingValues, [, i, ], =, value, -, extraTracingValues, []
[(, startThread, ), ;, extraTracingValues, [, i, ], =, value, -, extraTracingValues, [, i, ], ;, }, }, if, (]
[startThread, ), ;, extraTracingValues, [, i, ], =, value, -, extraTracingValues, [, i, ], ;, }, }, if, (, !]
[startThread, ), ;, extraTracingValues, [, i, ], =, value, -, extraTracingValues, [, i, ], ;, }, }, if, (, !]
[value, -, extraTracingValues, [, i, ], ;, }, }, if, (, !, trace, ., isInitialized, (, ), ), {, return]
[[, i, ], ;, }, }, if, (, !, trace, ., isInitialized, (, ), ), {, return, 0, ;, }]
[[, i, ], ;, }, }, if, (, !, trace, ., isInitialized, (, ), ), {, return, 0, ;, }]
[}, }, if, (, !, trace, ., isInitialized, (, ), ), {, return, 0, ;, }, trace, ., endEvent, (]
[if, (, !, trace, ., isInitialized, (, ), ), {, return, 0, ;, }, trace, ., endEvent, (, this, ,]
[., isInitialized, (, ), ), {, return, 0, ;, }, trace, ., endEvent, (, this, ,, silence_threshold, ), ;, return]
[., isInitialized, (, ), ), {, return, 0, ;, }, trace, ., endEvent, (, this, ,, silence_threshold, ), ;, return]
[(, ), ), {, return, 0, ;, }, trace, ., endEvent, (, this, ,, silence_threshold, ), ;, return, stopTimeMs, -]
[., endEvent, (, this, ,, silence_threshold, ), ;, return, stopTimeMs, -, startTimeMs, ;, }, long, stop, (, ), {, return]
[(, this, ,, silence_threshold, ), ;, return, stopTimeMs, -, startTimeMs, ;, }, long, stop, (, ), {, return, stop, (]
[this, ,, silence_threshold, ), ;, return, stopTimeMs, -, startTimeMs, ;, }, long, stop, (, ), {, return, stop, (, -]
[), {, return, stop, (, -, 1, ), ;, }, @, Override, public, String, toString, (, ), {, if, (]
[), {, return, stop, (, -, 1, ), ;, }, @, Override, public, String, toString, (, ), {, if, (]
[return, stop, (, -, 1, ), ;, }, @, Override, public, String, toString, (, ), {, if, (, type, ==]
[1, ), ;, }, @, Override, public, String, toString, (, ), {, if, (, type, ==, null, ), {, return]
[public, String, toString, (, ), {, if, (, type, ==, null, ), {, return, comment, ;, }, else, {, return]
[public, String, toString, (, ), {, if, (, type, ==, null, ), {, return, comment, ;, }, else, {, return]
[public, String, toString, (, ), {, if, (, type, ==, null, ), {, return, comment, ;, }, else, {, return]
[public, String, toString, (, ), {, if, (, type, ==, null, ), {, return, comment, ;, }, else, {, return]
[toString, (, ), {, if, (, type, ==, null, ), {, return, comment, ;, }, else, {, return, "[", +]
[), {, if, (, type, ==, null, ), {, return, comment, ;, }, else, {, return, "[", +, type, +]
[if, (, type, ==, null, ), {, return, comment, ;, }, else, {, return, "[", +, type, +, "] ", +]
[{, return, "[", +, type, +, "] ", +, comment, ;, }, }, static, void, setDefaultSilenceThreshold, (, int, threshold, ), {]
[{, return, "[", +, type, +, "] ", +, comment, ;, }, }, static, void, setDefaultSilenceThreshold, (, int, threshold, ), {]
["] ", +, comment, ;, }, }, static, void, setDefaultSilenceThreshold, (, int, threshold, ), {, getThreadTrace, (, ), ., defaultSilenceThreshold, =]
[), {, getThreadTrace, (, ), ., defaultSilenceThreshold, =, threshold, ;, }, static, void, initCurrentThreadTrace, (, ), {, ThreadTrace, events, =]
[defaultSilenceThreshold, =, threshold, ;, }, static, void, initCurrentThreadTrace, (, ), {, ThreadTrace, events, =, getThreadTrace, (, ), ;, if, (]
[=, threshold, ;, }, static, void, initCurrentThreadTrace, (, ), {, ThreadTrace, events, =, getThreadTrace, (, ), ;, if, (, !]
[=, threshold, ;, }, static, void, initCurrentThreadTrace, (, ), {, ThreadTrace, events, =, getThreadTrace, (, ), ;, if, (, !]
[(, ), {, ThreadTrace, events, =, getThreadTrace, (, ), ;, if, (, !, events, ., isEmpty, (, ), ), {]
[(, ), {, ThreadTrace, events, =, getThreadTrace, (, ), ;, if, (, !, events, ., isEmpty, (, ), ), {]
[events, =, getThreadTrace, (, ), ;, if, (, !, events, ., isEmpty, (, ), ), {, logger, ., log, (]
[events, =, getThreadTrace, (, ), ;, if, (, !, events, ., isEmpty, (, ), ), {, logger, ., log, (]
[), ;, if, (, !, events, ., isEmpty, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,]
[), ;, if, (, !, events, ., isEmpty, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,]
[if, (, !, events, ., isEmpty, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,, "Non-empty timer log:\n", +]
[!, events, ., isEmpty, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,, "Non-empty timer log:\n", +, events, ,]
[), {, logger, ., log, (, Level, ., WARNING, ,, "Non-empty timer log:\n", +, events, ,, new, Throwable, (, ), ), ;]
[log, (, Level, ., WARNING, ,, "Non-empty timer log:\n", +, events, ,, new, Throwable, (, ), ), ;, clearThreadTrace, (, ), ;]
[Level, ., WARNING, ,, "Non-empty timer log:\n", +, events, ,, new, Throwable, (, ), ), ;, clearThreadTrace, (, ), ;, events, =]
[+, events, ,, new, Throwable, (, ), ), ;, clearThreadTrace, (, ), ;, events, =, getThreadTrace, (, ), ;, }]
[+, events, ,, new, Throwable, (, ), ), ;, clearThreadTrace, (, ), ;, events, =, getThreadTrace, (, ), ;, }]
[getThreadTrace, (, ), ;, }, events, ., init, (, ), ;, }, static, void, initCurrentThreadTrace, (, int, default_silence_threshold, ), {]
[}, events, ., init, (, ), ;, }, static, void, initCurrentThreadTrace, (, int, default_silence_threshold, ), {, initCurrentThreadTrace, (, ), ;]
[., init, (, ), ;, }, static, void, initCurrentThreadTrace, (, int, default_silence_threshold, ), {, initCurrentThreadTrace, (, ), ;, setDefaultSilenceThreshold, (]
[default_silence_threshold, ), {, initCurrentThreadTrace, (, ), ;, setDefaultSilenceThreshold, (, default_silence_threshold, ), ;, }, static, String, getCurrentThreadTraceReport, (, ), {, return]
[default_silence_threshold, ), {, initCurrentThreadTrace, (, ), ;, setDefaultSilenceThreshold, (, default_silence_threshold, ), ;, }, static, String, getCurrentThreadTraceReport, (, ), {, return]
[{, return, getThreadTrace, (, ), ., toString, (, ), ;, }, static, void, logCurrentThreadTrace, (, ), {, ThreadTrace, trace, =]
[toString, (, ), ;, }, static, void, logCurrentThreadTrace, (, ), {, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (]
[(, ), ;, }, static, void, logCurrentThreadTrace, (, ), {, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !]
[(, ), ;, }, static, void, logCurrentThreadTrace, (, ), {, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !]
[(, ), {, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {]
[(, ), {, ThreadTrace, trace, =, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {]
[trace, =, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, logger, ., log, (]
[trace, =, getThreadTrace, (, ), ;, if, (, !, trace, ., isInitialized, (, ), ), {, logger, ., log, (]
[), ;, if, (, !, trace, ., isInitialized, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,]
[), ;, if, (, !, trace, ., isInitialized, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,]
[if, (, !, trace, ., isInitialized, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,, "Tracer log requested for this thread but was not ", +]
[!, trace, ., isInitialized, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,, "Tracer log requested for this thread but was not ", +, "initialized using Tracer.initCurrentThreadTrace().", ,]
[(, Level, ., WARNING, ,, "Tracer log requested for this thread but was not ", +, "initialized using Tracer.initCurrentThreadTrace().", ,, new, Throwable, (, ), ), ;, return, ;, }, if, (]
[Level, ., WARNING, ,, "Tracer log requested for this thread but was not ", +, "initialized using Tracer.initCurrentThreadTrace().", ,, new, Throwable, (, ), ), ;, return, ;, }, if, (, !]
[Level, ., WARNING, ,, "Tracer log requested for this thread but was not ", +, "initialized using Tracer.initCurrentThreadTrace().", ,, new, Throwable, (, ), ), ;, return, ;, }, if, (, !]
[,, new, Throwable, (, ), ), ;, return, ;, }, if, (, !, trace, ., isEmpty, (, ), ), {]
[,, new, Throwable, (, ), ), ;, return, ;, }, if, (, !, trace, ., isEmpty, (, ), ), {]
[), ), ;, return, ;, }, if, (, !, trace, ., isEmpty, (, ), ), {, logger, ., log, (]
[), ), ;, return, ;, }, if, (, !, trace, ., isEmpty, (, ), ), {, logger, ., log, (]
[;, }, if, (, !, trace, ., isEmpty, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,]
[if, (, !, trace, ., isEmpty, (, ), ), {, logger, ., log, (, Level, ., WARNING, ,, "timers:\n{0}", ,]
[(, Level, ., WARNING, ,, "timers:\n{0}", ,, getCurrentThreadTraceReport, (, ), ), ;, }, }, static, void, clearCurrentThreadTrace, (, ), {]
[;, }, }, static, void, clearCurrentThreadTrace, (, ), {, clearThreadTrace, (, ), ;, }, static, void, logAndClearCurrentThreadTrace, (, ), {]
[void, clearCurrentThreadTrace, (, ), {, clearThreadTrace, (, ), ;, }, static, void, logAndClearCurrentThreadTrace, (, ), {, logCurrentThreadTrace, (, ), ;]
[(, ), {, logCurrentThreadTrace, (, ), ;, clearThreadTrace, (, ), ;, }, static, void, setPrettyPrint, (, boolean, enabled, ), {]
[{, logCurrentThreadTrace, (, ), ;, clearThreadTrace, (, ), ;, }, static, void, setPrettyPrint, (, boolean, enabled, ), {, defaultPrettyPrint, =]
[private, int, silent, ;, private, int, clockTime, ;, private, int, [, ], extraInfo, ;, int, getCount, (, ), {, return]
[int, [, ], extraInfo, ;, int, getCount, (, ), {, return, count, ;, }, int, getSilentCount, (, ), {, return]
[{, return, count, ;, }, int, getSilentCount, (, ), {, return, silent, ;, }, int, getTotalTime, (, ), {, return]
[}, int, getTotalTime, (, ), {, return, clockTime, ;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return]
[}, int, getTotalTime, (, ), {, return, clockTime, ;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return]
[}, int, getTotalTime, (, ), {, return, clockTime, ;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return]
[getTotalTime, (, ), {, return, clockTime, ;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return, index, >=]
[getTotalTime, (, ), {, return, clockTime, ;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return, index, >=]
[return, clockTime, ;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return, index, >=, extraInfo, ., length, ?]
[;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return, index, >=, extraInfo, ., length, ?, 0, :]
[;, }, @, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return, index, >=, extraInfo, ., length, ?, 0, :]
[@, VisibleForTesting, int, getExtraInfo, (, int, index, ), {, return, index, >=, extraInfo, ., length, ?, 0, :, extraInfo, []
[Nullable, AtomicTracerStatMap, typeToSilentMap, ;, private, static, @, Nullable, AtomicTracerStatMap, typeToTimeMap, ;, static, synchronized, void, enableTypeMaps, (, ), {, if, (]
[Nullable, AtomicTracerStatMap, typeToSilentMap, ;, private, static, @, Nullable, AtomicTracerStatMap, typeToTimeMap, ;, static, synchronized, void, enableTypeMaps, (, ), {, if, (]
[typeToSilentMap, ;, private, static, @, Nullable, AtomicTracerStatMap, typeToTimeMap, ;, static, synchronized, void, enableTypeMaps, (, ), {, if, (, typeToCountMap, ==]
[static, @, Nullable, AtomicTracerStatMap, typeToTimeMap, ;, static, synchronized, void, enableTypeMaps, (, ), {, if, (, typeToCountMap, ==, null, ), {]
[Nullable, AtomicTracerStatMap, typeToTimeMap, ;, static, synchronized, void, enableTypeMaps, (, ), {, if, (, typeToCountMap, ==, null, ), {, typeToCountMap, =]
[synchronized, void, enableTypeMaps, (, ), {, if, (, typeToCountMap, ==, null, ), {, typeToCountMap, =, new, AtomicTracerStatMap, (, ), ;]
[enableTypeMaps, (, ), {, if, (, typeToCountMap, ==, null, ), {, typeToCountMap, =, new, AtomicTracerStatMap, (, ), ;, typeToSilentMap, =]
[(, typeToCountMap, ==, null, ), {, typeToCountMap, =, new, AtomicTracerStatMap, (, ), ;, typeToSilentMap, =, new, AtomicTracerStatMap, (, ), ;]
[==, null, ), {, typeToCountMap, =, new, AtomicTracerStatMap, (, ), ;, typeToSilentMap, =, new, AtomicTracerStatMap, (, ), ;, typeToTimeMap, =]
[AtomicTracerStatMap, (, ), ;, }, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToCountMap, (, ), {, return]
[AtomicTracerStatMap, (, ), ;, }, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToCountMap, (, ), {, return]
[AtomicTracerStatMap, (, ), ;, }, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToCountMap, (, ), {, return]
[), ;, }, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToCountMap, (, ), {, return, typeToCountMap, !=]
[}, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToCountMap, (, ), {, return, typeToCountMap, !=, null, ?]
[}, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToCountMap, (, ), {, return, typeToCountMap, !=, null, ?]
[<, String, ,, Long, >, getTypeToCountMap, (, ), {, return, typeToCountMap, !=, null, ?, typeToCountMap, ., getMap, (, ), :]
[(, ), :, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToSilentMap, (, ), {, return]
[(, ), :, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToSilentMap, (, ), {, return]
[(, ), :, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToSilentMap, (, ), {, return]
[:, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToSilentMap, (, ), {, return, typeToSilentMap, !=]
[;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToSilentMap, (, ), {, return, typeToSilentMap, !=, null, ?]
[;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToSilentMap, (, ), {, return, typeToSilentMap, !=, null, ?]
[<, String, ,, Long, >, getTypeToSilentMap, (, ), {, return, typeToSilentMap, !=, null, ?, typeToSilentMap, ., getMap, (, ), :]
[(, ), :, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToTimeMap, (, ), {, return]
[(, ), :, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToTimeMap, (, ), {, return]
[(, ), :, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToTimeMap, (, ), {, return]
[:, null, ;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToTimeMap, (, ), {, return, typeToTimeMap, !=]
[;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToTimeMap, (, ), {, return, typeToTimeMap, !=, null, ?]
[;, }, static, @, Nullable, Map, <, String, ,, Long, >, getTypeToTimeMap, (, ), {, return, typeToTimeMap, !=, null, ?]
[<, String, ,, Long, >, getTypeToTimeMap, (, ), {, return, typeToTimeMap, !=, null, ?, typeToTimeMap, ., getMap, (, ), :]
[typeToTimeMap, ., getMap, (, ), :, null, ;, }, static, Stat, getStatsForType, (, String, type, ), {, Stat, stat, =]
[typeToTimeMap, ., getMap, (, ), :, null, ;, }, static, Stat, getStatsForType, (, String, type, ), {, Stat, stat, =]
[typeToTimeMap, ., getMap, (, ), :, null, ;, }, static, Stat, getStatsForType, (, String, type, ), {, Stat, stat, =]
[}, static, Stat, getStatsForType, (, String, type, ), {, Stat, stat, =, getThreadTrace, (, ), ., stats, ., get, (]
[(, String, type, ), {, Stat, stat, =, getThreadTrace, (, ), ., stats, ., get, (, type, ), ;, return]
[(, String, type, ), {, Stat, stat, =, getThreadTrace, (, ), ., stats, ., get, (, type, ), ;, return]
[(, String, type, ), {, Stat, stat, =, getThreadTrace, (, ), ., stats, ., get, (, type, ), ;, return]
[type, ), {, Stat, stat, =, getThreadTrace, (, ), ., stats, ., get, (, type, ), ;, return, stat, !=]
[{, Stat, stat, =, getThreadTrace, (, ), ., stats, ., get, (, type, ), ;, return, stat, !=, null, ?]
[stat, =, getThreadTrace, (, ), ., stats, ., get, (, type, ), ;, return, stat, !=, null, ?, stat, :]
[(, type, ), ;, return, stat, !=, null, ?, stat, :, ZERO_STAT, ;, }, private, static, final, Stat, ZERO_STAT, =]
[Stat, ZERO_STAT, =, new, Stat, (, ), ;, private, static, String, formatTime, (, long, time, ), {, int, sec, =]
[new, Stat, (, ), ;, private, static, String, formatTime, (, long, time, ), {, int, sec, =, (, int, )]
[Stat, (, ), ;, private, static, String, formatTime, (, long, time, ), {, int, sec, =, (, int, ), (]
[Stat, (, ), ;, private, static, String, formatTime, (, long, time, ), {, int, sec, =, (, int, ), (]
[(, ), ;, private, static, String, formatTime, (, long, time, ), {, int, sec, =, (, int, ), (, (]
[(, ), ;, private, static, String, formatTime, (, long, time, ), {, int, sec, =, (, int, ), (, (]
[;, private, static, String, formatTime, (, long, time, ), {, int, sec, =, (, int, ), (, (, time, /]
[String, formatTime, (, long, time, ), {, int, sec, =, (, int, ), (, (, time, /, 1000, ), %]
[{, int, sec, =, (, int, ), (, (, time, /, 1000, ), %, 60, ), ;, int, ms, =]
[=, (, int, ), (, (, time, /, 1000, ), %, 60, ), ;, int, ms, =, (, int, )]
[(, int, ), (, (, time, /, 1000, ), %, 60, ), ;, int, ms, =, (, int, ), (]
[(, int, ), (, (, time, /, 1000, ), %, 60, ), ;, int, ms, =, (, int, ), (]
[), (, (, time, /, 1000, ), %, 60, ), ;, int, ms, =, (, int, ), (, time, %]
[/, 1000, ), %, 60, ), ;, int, ms, =, (, int, ), (, time, %, 1000, ), ;, return]
[/, 1000, ), %, 60, ), ;, int, ms, =, (, int, ), (, time, %, 1000, ), ;, return]
[60, ), ;, int, ms, =, (, int, ), (, time, %, 1000, ), ;, return, String, ., format, (]
[;, int, ms, =, (, int, ), (, time, %, 1000, ), ;, return, String, ., format, (, "%02d.%03d", ,]
[ms, =, (, int, ), (, time, %, 1000, ), ;, return, String, ., format, (, "%02d.%03d", ,, sec, ,]
[static, final, class, Event, {, boolean, isStart, ;, Tracer, tracer, ;, Event, (, boolean, start, ,, Tracer, t, ), {]
[class, Event, {, boolean, isStart, ;, Tracer, tracer, ;, Event, (, boolean, start, ,, Tracer, t, ), {, isStart, =]
[{, boolean, isStart, ;, Tracer, tracer, ;, Event, (, boolean, start, ,, Tracer, t, ), {, isStart, =, start, ;]
[isStart, ;, Tracer, tracer, ;, Event, (, boolean, start, ,, Tracer, t, ), {, isStart, =, start, ;, tracer, =]
[,, Tracer, t, ), {, isStart, =, start, ;, tracer, =, t, ;, }, long, eventTime, (, ), {, return]
[,, Tracer, t, ), {, isStart, =, start, ;, tracer, =, t, ;, }, long, eventTime, (, ), {, return]
[t, ), {, isStart, =, start, ;, tracer, =, t, ;, }, long, eventTime, (, ), {, return, isStart, ?]
[t, ), {, isStart, =, start, ;, tracer, =, t, ;, }, long, eventTime, (, ), {, return, isStart, ?]
[=, start, ;, tracer, =, t, ;, }, long, eventTime, (, ), {, return, isStart, ?, tracer, ., startTimeMs, :]
[=, start, ;, tracer, =, t, ;, }, long, eventTime, (, ), {, return, isStart, ?, tracer, ., startTimeMs, :]
[., stopTimeMs, ;, }, String, toString, (, long, prevEventTime, ,, String, indent, ,, int, digitsColWidth, ), {, StringBuilder, sb, =]
[}, String, toString, (, long, prevEventTime, ,, String, indent, ,, int, digitsColWidth, ), {, StringBuilder, sb, =, new, StringBuilder, (]
[prevEventTime, ,, String, indent, ,, int, digitsColWidth, ), {, StringBuilder, sb, =, new, StringBuilder, (, 120, ), ;, if, (]
[prevEventTime, ,, String, indent, ,, int, digitsColWidth, ), {, StringBuilder, sb, =, new, StringBuilder, (, 120, ), ;, if, (]
[String, indent, ,, int, digitsColWidth, ), {, StringBuilder, sb, =, new, StringBuilder, (, 120, ), ;, if, (, prevEventTime, ==]
[indent, ,, int, digitsColWidth, ), {, StringBuilder, sb, =, new, StringBuilder, (, 120, ), ;, if, (, prevEventTime, ==, -]
[digitsColWidth, ), {, StringBuilder, sb, =, new, StringBuilder, (, 120, ), ;, if, (, prevEventTime, ==, -, 1, ), {]
[{, StringBuilder, sb, =, new, StringBuilder, (, 120, ), ;, if, (, prevEventTime, ==, -, 1, ), {, appendSpaces, (]
[sb, =, new, StringBuilder, (, 120, ), ;, if, (, prevEventTime, ==, -, 1, ), {, appendSpaces, (, sb, ,]
[), ;, if, (, prevEventTime, ==, -, 1, ), {, appendSpaces, (, sb, ,, digitsColWidth, ), ;, }, else, {]
[), ;, if, (, prevEventTime, ==, -, 1, ), {, appendSpaces, (, sb, ,, digitsColWidth, ), ;, }, else, {]
[prevEventTime, ==, -, 1, ), {, appendSpaces, (, sb, ,, digitsColWidth, ), ;, }, else, {, sb, ., append, (]
[-, 1, ), {, appendSpaces, (, sb, ,, digitsColWidth, ), ;, }, else, {, sb, ., append, (, longToPaddedString, (]
[-, 1, ), {, appendSpaces, (, sb, ,, digitsColWidth, ), ;, }, else, {, sb, ., append, (, longToPaddedString, (]
[appendSpaces, (, sb, ,, digitsColWidth, ), ;, }, else, {, sb, ., append, (, longToPaddedString, (, eventTime, (, ), -]
[sb, ,, digitsColWidth, ), ;, }, else, {, sb, ., append, (, longToPaddedString, (, eventTime, (, ), -, prevEventTime, ,]
[}, else, {, sb, ., append, (, longToPaddedString, (, eventTime, (, ), -, prevEventTime, ,, digitsColWidth, ), ), ;, }]
[}, else, {, sb, ., append, (, longToPaddedString, (, eventTime, (, ), -, prevEventTime, ,, digitsColWidth, ), ), ;, }]
[., append, (, longToPaddedString, (, eventTime, (, ), -, prevEventTime, ,, digitsColWidth, ), ), ;, }, sb, ., append, (]
[longToPaddedString, (, eventTime, (, ), -, prevEventTime, ,, digitsColWidth, ), ), ;, }, sb, ., append, (, ' ', ), ;]
[longToPaddedString, (, eventTime, (, ), -, prevEventTime, ,, digitsColWidth, ), ), ;, }, sb, ., append, (, ' ', ), ;]
[), -, prevEventTime, ,, digitsColWidth, ), ), ;, }, sb, ., append, (, ' ', ), ;, sb, ., append, (]
[prevEventTime, ,, digitsColWidth, ), ), ;, }, sb, ., append, (, ' ', ), ;, sb, ., append, (, formatTime, (]
[., append, (, ' ', ), ;, sb, ., append, (, formatTime, (, eventTime, (, ), ), ), ;, if, (]
[' ', ), ;, sb, ., append, (, formatTime, (, eventTime, (, ), ), ), ;, if, (, isStart, ), {]
[' ', ), ;, sb, ., append, (, formatTime, (, eventTime, (, ), ), ), ;, if, (, isStart, ), {]
[., append, (, formatTime, (, eventTime, (, ), ), ), ;, if, (, isStart, ), {, sb, ., append, (]
[formatTime, (, eventTime, (, ), ), ), ;, if, (, isStart, ), {, sb, ., append, (, " Start ", ), ;]
[eventTime, (, ), ), ), ;, if, (, isStart, ), {, sb, ., append, (, " Start ", ), ;, appendSpaces, (]
[), ), ), ;, if, (, isStart, ), {, sb, ., append, (, " Start ", ), ;, appendSpaces, (, sb, ,]
[;, if, (, isStart, ), {, sb, ., append, (, " Start ", ), ;, appendSpaces, (, sb, ,, digitsColWidth, ), ;]
[;, if, (, isStart, ), {, sb, ., append, (, " Start ", ), ;, appendSpaces, (, sb, ,, digitsColWidth, ), ;]
[), {, sb, ., append, (, " Start ", ), ;, appendSpaces, (, sb, ,, digitsColWidth, ), ;, sb, ., append, (]
[" Start ", ), ;, appendSpaces, (, sb, ,, digitsColWidth, ), ;, sb, ., append, (, "   ", ), ;, }, else, {]
[" Start ", ), ;, appendSpaces, (, sb, ,, digitsColWidth, ), ;, sb, ., append, (, "   ", ), ;, }, else, {]
[(, sb, ,, digitsColWidth, ), ;, sb, ., append, (, "   ", ), ;, }, else, {, sb, ., append, (]
[sb, ., append, (, "   ", ), ;, }, else, {, sb, ., append, (, " Done ", ), ;, long, delta, =]
[sb, ., append, (, "   ", ), ;, }, else, {, sb, ., append, (, " Done ", ), ;, long, delta, =]
[sb, ., append, (, "   ", ), ;, }, else, {, sb, ., append, (, " Done ", ), ;, long, delta, =]
["   ", ), ;, }, else, {, sb, ., append, (, " Done ", ), ;, long, delta, =, tracer, ., stopTimeMs, -]
["   ", ), ;, }, else, {, sb, ., append, (, " Done ", ), ;, long, delta, =, tracer, ., stopTimeMs, -]
[else, {, sb, ., append, (, " Done ", ), ;, long, delta, =, tracer, ., stopTimeMs, -, tracer, ., startTimeMs, ;]
[else, {, sb, ., append, (, " Done ", ), ;, long, delta, =, tracer, ., stopTimeMs, -, tracer, ., startTimeMs, ;]
[append, (, " Done ", ), ;, long, delta, =, tracer, ., stopTimeMs, -, tracer, ., startTimeMs, ;, sb, ., append, (]
[" Done ", ), ;, long, delta, =, tracer, ., stopTimeMs, -, tracer, ., startTimeMs, ;, sb, ., append, (, longToPaddedString, (]
[;, long, delta, =, tracer, ., stopTimeMs, -, tracer, ., startTimeMs, ;, sb, ., append, (, longToPaddedString, (, delta, ,]
[tracer, ., stopTimeMs, -, tracer, ., startTimeMs, ;, sb, ., append, (, longToPaddedString, (, delta, ,, digitsColWidth, ), ), ;]
[tracer, ., stopTimeMs, -, tracer, ., startTimeMs, ;, sb, ., append, (, longToPaddedString, (, delta, ,, digitsColWidth, ), ), ;]
[tracer, ., startTimeMs, ;, sb, ., append, (, longToPaddedString, (, delta, ,, digitsColWidth, ), ), ;, sb, ., append, (]
[., append, (, longToPaddedString, (, delta, ,, digitsColWidth, ), ), ;, sb, ., append, (, " ms ", ), ;, if, (]
[., append, (, longToPaddedString, (, delta, ,, digitsColWidth, ), ), ;, sb, ., append, (, " ms ", ), ;, if, (]
[., append, (, longToPaddedString, (, delta, ,, digitsColWidth, ), ), ;, sb, ., append, (, " ms ", ), ;, if, (]
[(, delta, ,, digitsColWidth, ), ), ;, sb, ., append, (, " ms ", ), ;, if, (, tracer, ., extraTracingValues, !=]
[., append, (, " ms ", ), ;, if, (, tracer, ., extraTracingValues, !=, null, ), {, for, (, int, i, =]
[(, " ms ", ), ;, if, (, tracer, ., extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;]
[(, " ms ", ), ;, if, (, tracer, ., extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;]
[), ;, if, (, tracer, ., extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[), ;, if, (, tracer, ., extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[), ;, if, (, tracer, ., extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, tracer, ., extraTracingValues, ., length, ;]
[extraTracingValues, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, tracer, ., extraTracingValues, ., length, ;]
[{, for, (, int, i, =, 0, ;, i, <, tracer, ., extraTracingValues, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, tracer, ., extraTracingValues, ., length, ;, i, ++, ), {, delta, =]
[(, int, i, =, 0, ;, i, <, tracer, ., extraTracingValues, ., length, ;, i, ++, ), {, delta, =]
[(, int, i, =, 0, ;, i, <, tracer, ., extraTracingValues, ., length, ;, i, ++, ), {, delta, =]
[0, ;, i, <, tracer, ., extraTracingValues, ., length, ;, i, ++, ), {, delta, =, tracer, ., extraTracingValues, []
[<, tracer, ., extraTracingValues, ., length, ;, i, ++, ), {, delta, =, tracer, ., extraTracingValues, [, i, ], ;]
[<, tracer, ., extraTracingValues, ., length, ;, i, ++, ), {, delta, =, tracer, ., extraTracingValues, [, i, ], ;]
[., length, ;, i, ++, ), {, delta, =, tracer, ., extraTracingValues, [, i, ], ;, sb, ., append, (]
[., length, ;, i, ++, ), {, delta, =, tracer, ., extraTracingValues, [, i, ], ;, sb, ., append, (]
[++, ), {, delta, =, tracer, ., extraTracingValues, [, i, ], ;, sb, ., append, (, String, ., format, (]
[{, delta, =, tracer, ., extraTracingValues, [, i, ], ;, sb, ., append, (, String, ., format, (, "%4d", ,]
[., extraTracingValues, [, i, ], ;, sb, ., append, (, String, ., format, (, "%4d", ,, delta, ), ), ;]
[., extraTracingValues, [, i, ], ;, sb, ., append, (, String, ., format, (, "%4d", ,, delta, ), ), ;]
[], ;, sb, ., append, (, String, ., format, (, "%4d", ,, delta, ), ), ;, sb, ., append, (]
[], ;, sb, ., append, (, String, ., format, (, "%4d", ,, delta, ), ), ;, sb, ., append, (]
[], ;, sb, ., append, (, String, ., format, (, "%4d", ,, delta, ), ), ;, sb, ., append, (]
[append, (, String, ., format, (, "%4d", ,, delta, ), ), ;, sb, ., append, (, extraTracingStatistics, ., get, (]
[delta, ), ), ;, sb, ., append, (, extraTracingStatistics, ., get, (, i, ), ., getUnits, (, ), ), ;]
[delta, ), ), ;, sb, ., append, (, extraTracingStatistics, ., get, (, i, ), ., getUnits, (, ), ), ;]
[sb, ., append, (, extraTracingStatistics, ., get, (, i, ), ., getUnits, (, ), ), ;, sb, ., append, (]
[get, (, i, ), ., getUnits, (, ), ), ;, sb, ., append, (, ";  ", ), ;, }, }, }]
[get, (, i, ), ., getUnits, (, ), ), ;, sb, ., append, (, ";  ", ), ;, }, }, }]
[., getUnits, (, ), ), ;, sb, ., append, (, ";  ", ), ;, }, }, }, sb, ., append, (]
[), ), ;, sb, ., append, (, ";  ", ), ;, }, }, }, sb, ., append, (, indent, ), ;]
[), ), ;, sb, ., append, (, ";  ", ), ;, }, }, }, sb, ., append, (, indent, ), ;]
[., append, (, ";  ", ), ;, }, }, }, sb, ., append, (, indent, ), ;, sb, ., append, (]
[., append, (, ";  ", ), ;, }, }, }, sb, ., append, (, indent, ), ;, sb, ., append, (]
[}, sb, ., append, (, indent, ), ;, sb, ., append, (, tracer, ., toString, (, ), ), ;, return]
[}, sb, ., append, (, indent, ), ;, sb, ., append, (, tracer, ., toString, (, ), ), ;, return]
[(, ), ;, }, }, static, final, class, ThreadTrace, {, int, defaultSilenceThreshold, ;, final, ArrayList, <, Event, >, events, =]
[<, Event, >, events, =, new, ArrayList, <, Event, >, (, ), ;, final, HashSet, <, Tracer, >, outstandingEvents, =]
[>, outstandingEvents, =, new, HashSet, <, Tracer, >, (, ), ;, final, Map, <, String, ,, Stat, >, stats, =]
[<, String, ,, Stat, >, stats, =, new, HashMap, <, String, ,, Stat, >, (, ), ;, boolean, isOutstandingEventsTruncated, =]
[stats, =, new, HashMap, <, String, ,, Stat, >, (, ), ;, boolean, isOutstandingEventsTruncated, =, false, ;, boolean, isEventsTruncated, =]
[String, ,, Stat, >, (, ), ;, boolean, isOutstandingEventsTruncated, =, false, ;, boolean, isEventsTruncated, =, false, ;, boolean, isInitialized, =]
[), ;, boolean, isOutstandingEventsTruncated, =, false, ;, boolean, isEventsTruncated, =, false, ;, boolean, isInitialized, =, false, ;, boolean, prettyPrint, =]
[boolean, isEventsTruncated, =, false, ;, boolean, isInitialized, =, false, ;, boolean, prettyPrint, =, false, ;, void, init, (, ), {]
[=, false, ;, boolean, isInitialized, =, false, ;, boolean, prettyPrint, =, false, ;, void, init, (, ), {, isInitialized, =]
[prettyPrint, =, false, ;, void, init, (, ), {, isInitialized, =, true, ;, }, boolean, isInitialized, (, ), {, return]
[=, true, ;, }, boolean, isInitialized, (, ), {, return, isInitialized, ;, }, void, startEvent, (, Tracer, t, ), {]
[=, true, ;, }, boolean, isInitialized, (, ), {, return, isInitialized, ;, }, void, startEvent, (, Tracer, t, ), {]
[boolean, isInitialized, (, ), {, return, isInitialized, ;, }, void, startEvent, (, Tracer, t, ), {, events, ., add, (]
[), {, return, isInitialized, ;, }, void, startEvent, (, Tracer, t, ), {, events, ., add, (, new, Event, (]
[return, isInitialized, ;, }, void, startEvent, (, Tracer, t, ), {, events, ., add, (, new, Event, (, true, ,]
[Tracer, t, ), {, events, ., add, (, new, Event, (, true, ,, t, ), ), ;, boolean, notAlreadyOutstanding, =]
[Tracer, t, ), {, events, ., add, (, new, Event, (, true, ,, t, ), ), ;, boolean, notAlreadyOutstanding, =]
[events, ., add, (, new, Event, (, true, ,, t, ), ), ;, boolean, notAlreadyOutstanding, =, outstandingEvents, ., add, (]
[(, new, Event, (, true, ,, t, ), ), ;, boolean, notAlreadyOutstanding, =, outstandingEvents, ., add, (, t, ), ;]
[(, new, Event, (, true, ,, t, ), ), ;, boolean, notAlreadyOutstanding, =, outstandingEvents, ., add, (, t, ), ;]
[true, ,, t, ), ), ;, boolean, notAlreadyOutstanding, =, outstandingEvents, ., add, (, t, ), ;, Preconditions, ., checkState, (]
[., checkState, (, notAlreadyOutstanding, ), ;, }, void, endEvent, (, Tracer, t, ,, int, silenceThreshold, ), {, boolean, wasOutstanding, =]
[., checkState, (, notAlreadyOutstanding, ), ;, }, void, endEvent, (, Tracer, t, ,, int, silenceThreshold, ), {, boolean, wasOutstanding, =]
[), ;, }, void, endEvent, (, Tracer, t, ,, int, silenceThreshold, ), {, boolean, wasOutstanding, =, outstandingEvents, ., remove, (]
[(, Tracer, t, ,, int, silenceThreshold, ), {, boolean, wasOutstanding, =, outstandingEvents, ., remove, (, t, ), ;, if, (]
[Tracer, t, ,, int, silenceThreshold, ), {, boolean, wasOutstanding, =, outstandingEvents, ., remove, (, t, ), ;, if, (, !]
[), {, boolean, wasOutstanding, =, outstandingEvents, ., remove, (, t, ), ;, if, (, !, wasOutstanding, ), {, if, (]
[wasOutstanding, =, outstandingEvents, ., remove, (, t, ), ;, if, (, !, wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {]
[wasOutstanding, =, outstandingEvents, ., remove, (, t, ), ;, if, (, !, wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {]
[remove, (, t, ), ;, if, (, !, wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {, logger, ., log, (]
[remove, (, t, ), ;, if, (, !, wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {, logger, ., log, (]
[;, if, (, !, wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {, logger, ., log, (, Level, ., WARNING, ,]
[;, if, (, !, wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {, logger, ., log, (, Level, ., WARNING, ,]
[(, !, wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {, logger, ., log, (, Level, ., WARNING, ,, "event not found, probably because the event stack ", +]
[wasOutstanding, ), {, if, (, isOutstandingEventsTruncated, ), {, logger, ., log, (, Level, ., WARNING, ,, "event not found, probably because the event stack ", +, "overflowed and was truncated", ,]
[log, (, Level, ., WARNING, ,, "event not found, probably because the event stack ", +, "overflowed and was truncated", ,, new, Throwable, (, ), ), ;, }, else, {, throw]
[new, Throwable, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, long, elapsed, =]
[new, Throwable, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, long, elapsed, =]
[new, Throwable, (, ), ), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, long, elapsed, =]
[), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, long, elapsed, =, t, ., stopTimeMs, -]
[), ;, }, else, {, throw, new, IllegalStateException, (, ), ;, }, }, long, elapsed, =, t, ., stopTimeMs, -]
[new, IllegalStateException, (, ), ;, }, }, long, elapsed, =, t, ., stopTimeMs, -, t, ., startTimeMs, ;, if, (]
[new, IllegalStateException, (, ), ;, }, }, long, elapsed, =, t, ., stopTimeMs, -, t, ., startTimeMs, ;, if, (]
[(, ), ;, }, }, long, elapsed, =, t, ., stopTimeMs, -, t, ., startTimeMs, ;, if, (, silenceThreshold, ==]
[), ;, }, }, long, elapsed, =, t, ., stopTimeMs, -, t, ., startTimeMs, ;, if, (, silenceThreshold, ==, -]
[}, long, elapsed, =, t, ., stopTimeMs, -, t, ., startTimeMs, ;, if, (, silenceThreshold, ==, -, 1, ), {]
[elapsed, =, t, ., stopTimeMs, -, t, ., startTimeMs, ;, if, (, silenceThreshold, ==, -, 1, ), {, silenceThreshold, =]
[-, t, ., startTimeMs, ;, if, (, silenceThreshold, ==, -, 1, ), {, silenceThreshold, =, defaultSilenceThreshold, ;, }, if, (]
[-, t, ., startTimeMs, ;, if, (, silenceThreshold, ==, -, 1, ), {, silenceThreshold, =, defaultSilenceThreshold, ;, }, if, (]
[., startTimeMs, ;, if, (, silenceThreshold, ==, -, 1, ), {, silenceThreshold, =, defaultSilenceThreshold, ;, }, if, (, elapsed, <]
[==, -, 1, ), {, silenceThreshold, =, defaultSilenceThreshold, ;, }, if, (, elapsed, <, silenceThreshold, ), {, boolean, removed, =]
[defaultSilenceThreshold, ;, }, if, (, elapsed, <, silenceThreshold, ), {, boolean, removed, =, false, ;, for, (, int, i, =]
[}, if, (, elapsed, <, silenceThreshold, ), {, boolean, removed, =, false, ;, for, (, int, i, =, 0, ;]
[}, if, (, elapsed, <, silenceThreshold, ), {, boolean, removed, =, false, ;, for, (, int, i, =, 0, ;]
[(, elapsed, <, silenceThreshold, ), {, boolean, removed, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[(, elapsed, <, silenceThreshold, ), {, boolean, removed, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[boolean, removed, =, false, ;, for, (, int, i, =, 0, ;, i, <, events, ., size, (, ), ;]
[boolean, removed, =, false, ;, for, (, int, i, =, 0, ;, i, <, events, ., size, (, ), ;]
[int, i, =, 0, ;, i, <, events, ., size, (, ), ;, i, ++, ), {, Event, e, =]
[int, i, =, 0, ;, i, <, events, ., size, (, ), ;, i, ++, ), {, Event, e, =]
[;, i, <, events, ., size, (, ), ;, i, ++, ), {, Event, e, =, events, ., get, (]
[size, (, ), ;, i, ++, ), {, Event, e, =, events, ., get, (, i, ), ;, if, (]
[size, (, ), ;, i, ++, ), {, Event, e, =, events, ., get, (, i, ), ;, if, (]
[size, (, ), ;, i, ++, ), {, Event, e, =, events, ., get, (, i, ), ;, if, (]
[i, ++, ), {, Event, e, =, events, ., get, (, i, ), ;, if, (, e, ., tracer, ==]
[{, Event, e, =, events, ., get, (, i, ), ;, if, (, e, ., tracer, ==, t, ), {]
[{, Event, e, =, events, ., get, (, i, ), ;, if, (, e, ., tracer, ==, t, ), {]
[events, ., get, (, i, ), ;, if, (, e, ., tracer, ==, t, ), {, Preconditions, ., checkState, (]
[events, ., get, (, i, ), ;, if, (, e, ., tracer, ==, t, ), {, Preconditions, ., checkState, (]
[), ;, if, (, e, ., tracer, ==, t, ), {, Preconditions, ., checkState, (, e, ., isStart, ), ;]
[), ;, if, (, e, ., tracer, ==, t, ), {, Preconditions, ., checkState, (, e, ., isStart, ), ;]
[e, ., tracer, ==, t, ), {, Preconditions, ., checkState, (, e, ., isStart, ), ;, events, ., remove, (]
[==, t, ), {, Preconditions, ., checkState, (, e, ., isStart, ), ;, events, ., remove, (, i, ), ;]
[), {, Preconditions, ., checkState, (, e, ., isStart, ), ;, events, ., remove, (, i, ), ;, removed, =]
[e, ., isStart, ), ;, events, ., remove, (, i, ), ;, removed, =, true, ;, break, ;, }, }]
[e, ., isStart, ), ;, events, ., remove, (, i, ), ;, removed, =, true, ;, break, ;, }, }]
[;, events, ., remove, (, i, ), ;, removed, =, true, ;, break, ;, }, }, Preconditions, ., checkState, (]
[;, events, ., remove, (, i, ), ;, removed, =, true, ;, break, ;, }, }, Preconditions, ., checkState, (]
[., remove, (, i, ), ;, removed, =, true, ;, break, ;, }, }, Preconditions, ., checkState, (, removed, ||]
[removed, =, true, ;, break, ;, }, }, Preconditions, ., checkState, (, removed, ||, isEventsTruncated, ), ;, }, else, {]
[removed, =, true, ;, break, ;, }, }, Preconditions, ., checkState, (, removed, ||, isEventsTruncated, ), ;, }, else, {]
[break, ;, }, }, Preconditions, ., checkState, (, removed, ||, isEventsTruncated, ), ;, }, else, {, events, ., add, (]
[}, Preconditions, ., checkState, (, removed, ||, isEventsTruncated, ), ;, }, else, {, events, ., add, (, new, Event, (]
[., checkState, (, removed, ||, isEventsTruncated, ), ;, }, else, {, events, ., add, (, new, Event, (, false, ,]
[;, }, else, {, events, ., add, (, new, Event, (, false, ,, t, ), ), ;, }, if, (]
[;, }, else, {, events, ., add, (, new, Event, (, false, ,, t, ), ), ;, }, if, (]
[;, }, else, {, events, ., add, (, new, Event, (, false, ,, t, ), ), ;, }, if, (]
[events, ., add, (, new, Event, (, false, ,, t, ), ), ;, }, if, (, t, ., type, !=]
[(, false, ,, t, ), ), ;, }, if, (, t, ., type, !=, null, ), {, Stat, stat, =]
[(, false, ,, t, ), ), ;, }, if, (, t, ., type, !=, null, ), {, Stat, stat, =]
[), ), ;, }, if, (, t, ., type, !=, null, ), {, Stat, stat, =, stats, ., get, (]
[), ), ;, }, if, (, t, ., type, !=, null, ), {, Stat, stat, =, stats, ., get, (]
[., type, !=, null, ), {, Stat, stat, =, stats, ., get, (, t, ., type, ), ;, if, (]
[., type, !=, null, ), {, Stat, stat, =, stats, ., get, (, t, ., type, ), ;, if, (]
[!=, null, ), {, Stat, stat, =, stats, ., get, (, t, ., type, ), ;, if, (, stat, ==]
[{, Stat, stat, =, stats, ., get, (, t, ., type, ), ;, if, (, stat, ==, null, ), {]
[stat, =, stats, ., get, (, t, ., type, ), ;, if, (, stat, ==, null, ), {, stat, =]
[., type, ), ;, if, (, stat, ==, null, ), {, stat, =, new, Stat, (, ), ;, if, (]
[type, ), ;, if, (, stat, ==, null, ), {, stat, =, new, Stat, (, ), ;, if, (, !]
[type, ), ;, if, (, stat, ==, null, ), {, stat, =, new, Stat, (, ), ;, if, (, !]
[null, ), {, stat, =, new, Stat, (, ), ;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {]
[null, ), {, stat, =, new, Stat, (, ), ;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {]
[=, new, Stat, (, ), ;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {, stat, ., extraInfo, =]
[(, ), ;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {, stat, ., extraInfo, =, new, int, []
[(, ), ;, if, (, !, extraTracingStatistics, ., isEmpty, (, ), ), {, stat, ., extraInfo, =, new, int, []
[isEmpty, (, ), ), {, stat, ., extraInfo, =, new, int, [, extraTracingStatistics, ., size, (, ), ], ;, }]
[isEmpty, (, ), ), {, stat, ., extraInfo, =, new, int, [, extraTracingStatistics, ., size, (, ), ], ;, }]
[{, stat, ., extraInfo, =, new, int, [, extraTracingStatistics, ., size, (, ), ], ;, }, stats, ., put, (]
[{, stat, ., extraInfo, =, new, int, [, extraTracingStatistics, ., size, (, ), ], ;, }, stats, ., put, (]
[=, new, int, [, extraTracingStatistics, ., size, (, ), ], ;, }, stats, ., put, (, t, ., type, ,]
[extraTracingStatistics, ., size, (, ), ], ;, }, stats, ., put, (, t, ., type, ,, stat, ), ;, }]
[extraTracingStatistics, ., size, (, ), ], ;, }, stats, ., put, (, t, ., type, ,, stat, ), ;, }]
[extraTracingStatistics, ., size, (, ), ], ;, }, stats, ., put, (, t, ., type, ,, stat, ), ;, }]
[}, stats, ., put, (, t, ., type, ,, stat, ), ;, }, stat, ., count, ++, ;, if, (]
[}, stats, ., put, (, t, ., type, ,, stat, ), ;, }, stat, ., count, ++, ;, if, (]
[., put, (, t, ., type, ,, stat, ), ;, }, stat, ., count, ++, ;, if, (, typeToCountMap, !=]
[t, ., type, ,, stat, ), ;, }, stat, ., count, ++, ;, if, (, typeToCountMap, !=, null, ), {]
[t, ., type, ,, stat, ), ;, }, stat, ., count, ++, ;, if, (, typeToCountMap, !=, null, ), {]
[stat, ), ;, }, stat, ., count, ++, ;, if, (, typeToCountMap, !=, null, ), {, typeToCountMap, ., incrementBy, (]
[stat, ), ;, }, stat, ., count, ++, ;, if, (, typeToCountMap, !=, null, ), {, typeToCountMap, ., incrementBy, (]
[stat, ., count, ++, ;, if, (, typeToCountMap, !=, null, ), {, typeToCountMap, ., incrementBy, (, t, ., type, ,]
[;, if, (, typeToCountMap, !=, null, ), {, typeToCountMap, ., incrementBy, (, t, ., type, ,, 1, ), ;, }]
[;, if, (, typeToCountMap, !=, null, ), {, typeToCountMap, ., incrementBy, (, t, ., type, ,, 1, ), ;, }]
[!=, null, ), {, typeToCountMap, ., incrementBy, (, t, ., type, ,, 1, ), ;, }, stat, ., clockTime, +=]
[typeToCountMap, ., incrementBy, (, t, ., type, ,, 1, ), ;, }, stat, ., clockTime, +=, elapsed, ;, if, (]
[typeToCountMap, ., incrementBy, (, t, ., type, ,, 1, ), ;, }, stat, ., clockTime, +=, elapsed, ;, if, (]
[incrementBy, (, t, ., type, ,, 1, ), ;, }, stat, ., clockTime, +=, elapsed, ;, if, (, typeToTimeMap, !=]
[., type, ,, 1, ), ;, }, stat, ., clockTime, +=, elapsed, ;, if, (, typeToTimeMap, !=, null, ), {]
[., type, ,, 1, ), ;, }, stat, ., clockTime, +=, elapsed, ;, if, (, typeToTimeMap, !=, null, ), {]
[), ;, }, stat, ., clockTime, +=, elapsed, ;, if, (, typeToTimeMap, !=, null, ), {, typeToTimeMap, ., incrementBy, (]
[), ;, }, stat, ., clockTime, +=, elapsed, ;, if, (, typeToTimeMap, !=, null, ), {, typeToTimeMap, ., incrementBy, (]
[., clockTime, +=, elapsed, ;, if, (, typeToTimeMap, !=, null, ), {, typeToTimeMap, ., incrementBy, (, t, ., type, ,]
[(, typeToTimeMap, !=, null, ), {, typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (]
[(, typeToTimeMap, !=, null, ), {, typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (]
[(, typeToTimeMap, !=, null, ), {, typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (]
[(, typeToTimeMap, !=, null, ), {, typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (]
[), {, typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (, stat, ., extraInfo, !=]
[typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (, stat, ., extraInfo, !=, null, &&]
[typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (, stat, ., extraInfo, !=, null, &&]
[typeToTimeMap, ., incrementBy, (, t, ., type, ,, elapsed, ), ;, }, if, (, stat, ., extraInfo, !=, null, &&]
[t, ., type, ,, elapsed, ), ;, }, if, (, stat, ., extraInfo, !=, null, &&, t, ., extraTracingValues, !=]
[;, }, if, (, stat, ., extraInfo, !=, null, &&, t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =]
[;, }, if, (, stat, ., extraInfo, !=, null, &&, t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =]
[stat, ., extraInfo, !=, null, &&, t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =, Math, ., min, (]
[stat, ., extraInfo, !=, null, &&, t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =, Math, ., min, (]
[stat, ., extraInfo, !=, null, &&, t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =, Math, ., min, (]
[t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =, Math, ., min, (, stat, ., extraInfo, ., length, ,]
[t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =, Math, ., min, (, stat, ., extraInfo, ., length, ,]
[t, ., extraTracingValues, !=, null, ), {, int, overlapLength, =, Math, ., min, (, stat, ., extraInfo, ., length, ,]
[min, (, stat, ., extraInfo, ., length, ,, t, ., extraTracingValues, ., length, ), ;, for, (, int, i, =]
[stat, ., extraInfo, ., length, ,, t, ., extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;]
[stat, ., extraInfo, ., length, ,, t, ., extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;]
[extraInfo, ., length, ,, t, ., extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ,, t, ., extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, overlapLength, ;]
[length, ,, t, ., extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, overlapLength, ;]
[extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, overlapLength, ;, i, ++, ), {]
[extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, overlapLength, ;, i, ++, ), {]
[extraTracingValues, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, overlapLength, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, overlapLength, ;, i, ++, ), {, stat, ., extraInfo, []
[int, i, =, 0, ;, i, <, overlapLength, ;, i, ++, ), {, stat, ., extraInfo, [, i, ], +=]
[int, i, =, 0, ;, i, <, overlapLength, ;, i, ++, ), {, stat, ., extraInfo, [, i, ], +=]
[int, i, =, 0, ;, i, <, overlapLength, ;, i, ++, ), {, stat, ., extraInfo, [, i, ], +=]
[;, i, <, overlapLength, ;, i, ++, ), {, stat, ., extraInfo, [, i, ], +=, t, ., extraTracingValues, []
[++, ), {, stat, ., extraInfo, [, i, ], +=, t, ., extraTracingValues, [, i, ], ;, AtomicTracerStatMap, map, =]
[++, ), {, stat, ., extraInfo, [, i, ], +=, t, ., extraTracingValues, [, i, ], ;, AtomicTracerStatMap, map, =]
[++, ), {, stat, ., extraInfo, [, i, ], +=, t, ., extraTracingValues, [, i, ], ;, AtomicTracerStatMap, map, =]
[., extraInfo, [, i, ], +=, t, ., extraTracingValues, [, i, ], ;, AtomicTracerStatMap, map, =, extraTracingStatistics, ., get, (]
[[, i, ], ;, AtomicTracerStatMap, map, =, extraTracingStatistics, ., get, (, i, ), ., getTracingStat, (, ), ;, if, (]
[[, i, ], ;, AtomicTracerStatMap, map, =, extraTracingStatistics, ., get, (, i, ), ., getTracingStat, (, ), ;, if, (]
[], ;, AtomicTracerStatMap, map, =, extraTracingStatistics, ., get, (, i, ), ., getTracingStat, (, ), ;, if, (, map, !=]
[map, =, extraTracingStatistics, ., get, (, i, ), ., getTracingStat, (, ), ;, if, (, map, !=, null, ), {]
[map, =, extraTracingStatistics, ., get, (, i, ), ., getTracingStat, (, ), ;, if, (, map, !=, null, ), {]
[get, (, i, ), ., getTracingStat, (, ), ;, if, (, map, !=, null, ), {, map, ., incrementBy, (]
[get, (, i, ), ., getTracingStat, (, ), ;, if, (, map, !=, null, ), {, map, ., incrementBy, (]
[., getTracingStat, (, ), ;, if, (, map, !=, null, ), {, map, ., incrementBy, (, t, ., type, ,]
[., getTracingStat, (, ), ;, if, (, map, !=, null, ), {, map, ., incrementBy, (, t, ., type, ,]
[., getTracingStat, (, ), ;, if, (, map, !=, null, ), {, map, ., incrementBy, (, t, ., type, ,]
[;, if, (, map, !=, null, ), {, map, ., incrementBy, (, t, ., type, ,, t, ., extraTracingValues, []
[., incrementBy, (, t, ., type, ,, t, ., extraTracingValues, [, i, ], ), ;, }, }, }, if, (]
[., incrementBy, (, t, ., type, ,, t, ., extraTracingValues, [, i, ], ), ;, }, }, }, if, (]
[(, t, ., type, ,, t, ., extraTracingValues, [, i, ], ), ;, }, }, }, if, (, elapsed, <]
[type, ,, t, ., extraTracingValues, [, i, ], ), ;, }, }, }, if, (, elapsed, <, silenceThreshold, ), {]
[type, ,, t, ., extraTracingValues, [, i, ], ), ;, }, }, }, if, (, elapsed, <, silenceThreshold, ), {]
[type, ,, t, ., extraTracingValues, [, i, ], ), ;, }, }, }, if, (, elapsed, <, silenceThreshold, ), {]
[], ), ;, }, }, }, if, (, elapsed, <, silenceThreshold, ), {, stat, ., silent, ++, ;, if, (]
[], ), ;, }, }, }, if, (, elapsed, <, silenceThreshold, ), {, stat, ., silent, ++, ;, if, (]
[;, }, }, }, if, (, elapsed, <, silenceThreshold, ), {, stat, ., silent, ++, ;, if, (, typeToSilentMap, !=]
[}, if, (, elapsed, <, silenceThreshold, ), {, stat, ., silent, ++, ;, if, (, typeToSilentMap, !=, null, ), {]
[}, if, (, elapsed, <, silenceThreshold, ), {, stat, ., silent, ++, ;, if, (, typeToSilentMap, !=, null, ), {]
[<, silenceThreshold, ), {, stat, ., silent, ++, ;, if, (, typeToSilentMap, !=, null, ), {, typeToSilentMap, ., incrementBy, (]
[<, silenceThreshold, ), {, stat, ., silent, ++, ;, if, (, typeToSilentMap, !=, null, ), {, typeToSilentMap, ., incrementBy, (]
[stat, ., silent, ++, ;, if, (, typeToSilentMap, !=, null, ), {, typeToSilentMap, ., incrementBy, (, t, ., type, ,]
[., incrementBy, (, t, ., type, ,, 1, ), ;, }, }, }, }, boolean, isEmpty, (, ), {, return]
[., incrementBy, (, t, ., type, ,, 1, ), ;, }, }, }, }, boolean, isEmpty, (, ), {, return]
[., incrementBy, (, t, ., type, ,, 1, ), ;, }, }, }, }, boolean, isEmpty, (, ), {, return]
[., incrementBy, (, t, ., type, ,, 1, ), ;, }, }, }, }, boolean, isEmpty, (, ), {, return]
[,, 1, ), ;, }, }, }, }, boolean, isEmpty, (, ), {, return, events, ., size, (, ), ==]
[), ;, }, }, }, }, boolean, isEmpty, (, ), {, return, events, ., size, (, ), ==, 0, &&]
[), ;, }, }, }, }, boolean, isEmpty, (, ), {, return, events, ., size, (, ), ==, 0, &&]
[), ;, }, }, }, }, boolean, isEmpty, (, ), {, return, events, ., size, (, ), ==, 0, &&]
[boolean, isEmpty, (, ), {, return, events, ., size, (, ), ==, 0, &&, outstandingEvents, ., size, (, ), ==]
[size, (, ), ==, 0, &&, outstandingEvents, ., size, (, ), ==, 0, ;, }, void, truncateOutstandingEvents, (, ), {]
[), ==, 0, &&, outstandingEvents, ., size, (, ), ==, 0, ;, }, void, truncateOutstandingEvents, (, ), {, isOutstandingEventsTruncated, =]
[0, &&, outstandingEvents, ., size, (, ), ==, 0, ;, }, void, truncateOutstandingEvents, (, ), {, isOutstandingEventsTruncated, =, true, ;]
[0, &&, outstandingEvents, ., size, (, ), ==, 0, ;, }, void, truncateOutstandingEvents, (, ), {, isOutstandingEventsTruncated, =, true, ;]
[truncateOutstandingEvents, (, ), {, isOutstandingEventsTruncated, =, true, ;, outstandingEvents, ., clear, (, ), ;, }, void, truncateEvents, (, ), {]
[), {, isOutstandingEventsTruncated, =, true, ;, outstandingEvents, ., clear, (, ), ;, }, void, truncateEvents, (, ), {, isEventsTruncated, =]
[isOutstandingEventsTruncated, =, true, ;, outstandingEvents, ., clear, (, ), ;, }, void, truncateEvents, (, ), {, isEventsTruncated, =, true, ;]
[isOutstandingEventsTruncated, =, true, ;, outstandingEvents, ., clear, (, ), ;, }, void, truncateEvents, (, ), {, isEventsTruncated, =, true, ;]
[(, ), ;, }, void, truncateEvents, (, ), {, isEventsTruncated, =, true, ;, events, ., clear, (, ), ;, }]
[}, void, truncateEvents, (, ), {, isEventsTruncated, =, true, ;, events, ., clear, (, ), ;, }, @, SuppressWarnings, (]
[(, ), ;, }, @, SuppressWarnings, (, "nullness", ), @, Override, public, String, toString, (, ), {, int, numDigits, =]
["nullness", ), @, Override, public, String, toString, (, ), {, int, numDigits, =, getMaxDigits, (, ), ;, StringBuilder, sb, =]
[), {, int, numDigits, =, getMaxDigits, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, long, etime, =]
[{, int, numDigits, =, getMaxDigits, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, long, etime, =, -]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, long, etime, =, -, 1, ;, LinkedList, <, String, >, indent, =]
[StringBuilder, sb, =, new, StringBuilder, (, ), ;, long, etime, =, -, 1, ;, LinkedList, <, String, >, indent, =]
[=, new, StringBuilder, (, ), ;, long, etime, =, -, 1, ;, LinkedList, <, String, >, indent, =, prettyPrint, ?]
[=, -, 1, ;, LinkedList, <, String, >, indent, =, prettyPrint, ?, new, LinkedList, <, String, >, (, ), :]
[>, indent, =, prettyPrint, ?, new, LinkedList, <, String, >, (, ), :, null, ;, for, (, Event, e, :]
[new, LinkedList, <, String, >, (, ), :, null, ;, for, (, Event, e, :, events, ), {, if, (]
[new, LinkedList, <, String, >, (, ), :, null, ;, for, (, Event, e, :, events, ), {, if, (]
[new, LinkedList, <, String, >, (, ), :, null, ;, for, (, Event, e, :, events, ), {, if, (]
[<, String, >, (, ), :, null, ;, for, (, Event, e, :, events, ), {, if, (, prettyPrint, &&]
[String, >, (, ), :, null, ;, for, (, Event, e, :, events, ), {, if, (, prettyPrint, &&, !]
[String, >, (, ), :, null, ;, for, (, Event, e, :, events, ), {, if, (, prettyPrint, &&, !]
[:, null, ;, for, (, Event, e, :, events, ), {, if, (, prettyPrint, &&, !, e, ., isStart, &&]
[null, ;, for, (, Event, e, :, events, ), {, if, (, prettyPrint, &&, !, e, ., isStart, &&, !]
[null, ;, for, (, Event, e, :, events, ), {, if, (, prettyPrint, &&, !, e, ., isStart, &&, !]
[events, ), {, if, (, prettyPrint, &&, !, e, ., isStart, &&, !, indent, ., isEmpty, (, ), ), {]
[events, ), {, if, (, prettyPrint, &&, !, e, ., isStart, &&, !, indent, ., isEmpty, (, ), ), {]
[!, e, ., isStart, &&, !, indent, ., isEmpty, (, ), ), {, indent, ., pop, (, ), ;, }]
[!, e, ., isStart, &&, !, indent, ., isEmpty, (, ), ), {, indent, ., pop, (, ), ;, }]
[&&, !, indent, ., isEmpty, (, ), ), {, indent, ., pop, (, ), ;, }, sb, ., append, (]
[(, ), ), {, indent, ., pop, (, ), ;, }, sb, ., append, (, " ", ), ;, if, (]
[{, indent, ., pop, (, ), ;, }, sb, ., append, (, " ", ), ;, if, (, prettyPrint, ), {]
[{, indent, ., pop, (, ), ;, }, sb, ., append, (, " ", ), ;, if, (, prettyPrint, ), {]
[(, ), ;, }, sb, ., append, (, " ", ), ;, if, (, prettyPrint, ), {, sb, ., append, (]
[(, ), ;, }, sb, ., append, (, " ", ), ;, if, (, prettyPrint, ), {, sb, ., append, (]
[sb, ., append, (, " ", ), ;, if, (, prettyPrint, ), {, sb, ., append, (, e, ., toString, (]
[append, (, " ", ), ;, if, (, prettyPrint, ), {, sb, ., append, (, e, ., toString, (, etime, ,]
[append, (, " ", ), ;, if, (, prettyPrint, ), {, sb, ., append, (, e, ., toString, (, etime, ,]
[append, (, " ", ), ;, if, (, prettyPrint, ), {, sb, ., append, (, e, ., toString, (, etime, ,]
[;, if, (, prettyPrint, ), {, sb, ., append, (, e, ., toString, (, etime, ,, Joiner, ., on, (]
[{, sb, ., append, (, e, ., toString, (, etime, ,, Joiner, ., on, (, "", ), ., join, (]
[append, (, e, ., toString, (, etime, ,, Joiner, ., on, (, "", ), ., join, (, indent, ), ,]
[,, Joiner, ., on, (, "", ), ., join, (, indent, ), ,, numDigits, ), ), ;, }, else, {]
[,, Joiner, ., on, (, "", ), ., join, (, indent, ), ,, numDigits, ), ), ;, }, else, {]
[(, "", ), ., join, (, indent, ), ,, numDigits, ), ), ;, }, else, {, sb, ., append, (]
[(, "", ), ., join, (, indent, ), ,, numDigits, ), ), ;, }, else, {, sb, ., append, (]
[join, (, indent, ), ,, numDigits, ), ), ;, }, else, {, sb, ., append, (, e, ., toString, (]
[indent, ), ,, numDigits, ), ), ;, }, else, {, sb, ., append, (, e, ., toString, (, etime, ,]
[,, numDigits, ), ), ;, }, else, {, sb, ., append, (, e, ., toString, (, etime, ,, "", ,]
[}, else, {, sb, ., append, (, e, ., toString, (, etime, ,, "", ,, 4, ), ), ;, }]
[{, sb, ., append, (, e, ., toString, (, etime, ,, "", ,, 4, ), ), ;, }, etime, =]
[{, sb, ., append, (, e, ., toString, (, etime, ,, "", ,, 4, ), ), ;, }, etime, =]
[., toString, (, etime, ,, "", ,, 4, ), ), ;, }, etime, =, e, ., eventTime, (, ), ;]
[., toString, (, etime, ,, "", ,, 4, ), ), ;, }, etime, =, e, ., eventTime, (, ), ;]
[,, "", ,, 4, ), ), ;, }, etime, =, e, ., eventTime, (, ), ;, sb, ., append, (]
[), ;, }, etime, =, e, ., eventTime, (, ), ;, sb, ., append, (, '\n', ), ;, if, (]
[), ;, }, etime, =, e, ., eventTime, (, ), ;, sb, ., append, (, '\n', ), ;, if, (]
[}, etime, =, e, ., eventTime, (, ), ;, sb, ., append, (, '\n', ), ;, if, (, prettyPrint, &&]
[}, etime, =, e, ., eventTime, (, ), ;, sb, ., append, (, '\n', ), ;, if, (, prettyPrint, &&]
[eventTime, (, ), ;, sb, ., append, (, '\n', ), ;, if, (, prettyPrint, &&, e, ., isStart, ), {]
[eventTime, (, ), ;, sb, ., append, (, '\n', ), ;, if, (, prettyPrint, &&, e, ., isStart, ), {]
[sb, ., append, (, '\n', ), ;, if, (, prettyPrint, &&, e, ., isStart, ), {, indent, ., push, (]
[if, (, prettyPrint, &&, e, ., isStart, ), {, indent, ., push, (, "|  ", ), ;, }, }, if, (]
[if, (, prettyPrint, &&, e, ., isStart, ), {, indent, ., push, (, "|  ", ), ;, }, }, if, (]
[if, (, prettyPrint, &&, e, ., isStart, ), {, indent, ., push, (, "|  ", ), ;, }, }, if, (]
[isStart, ), {, indent, ., push, (, "|  ", ), ;, }, }, if, (, outstandingEvents, ., size, (, ), !=]
[(, "|  ", ), ;, }, }, if, (, outstandingEvents, ., size, (, ), !=, 0, ), {, long, now, =]
[(, "|  ", ), ;, }, }, if, (, outstandingEvents, ., size, (, ), !=, 0, ), {, long, now, =]
[if, (, outstandingEvents, ., size, (, ), !=, 0, ), {, long, now, =, clock, ., currentTimeMillis, (, ), ;]
[if, (, outstandingEvents, ., size, (, ), !=, 0, ), {, long, now, =, clock, ., currentTimeMillis, (, ), ;]
[size, (, ), !=, 0, ), {, long, now, =, clock, ., currentTimeMillis, (, ), ;, sb, ., append, (]
[now, =, clock, ., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[., currentTimeMillis, (, ), ;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {]
[;, sb, ., append, (, " Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {, sb, ., append, (]
[" Unstopped timers:\n", ), ;, for, (, Tracer, t, :, outstandingEvents, ), {, sb, ., append, (, "  ", ), ., append, (]
[Tracer, t, :, outstandingEvents, ), {, sb, ., append, (, "  ", ), ., append, (, t, ), ., append, (]
[{, sb, ., append, (, "  ", ), ., append, (, t, ), ., append, (, " (", ), ., append, (]
[{, sb, ., append, (, "  ", ), ., append, (, t, ), ., append, (, " (", ), ., append, (]
[., append, (, "  ", ), ., append, (, t, ), ., append, (, " (", ), ., append, (, now, -]
[., append, (, "  ", ), ., append, (, t, ), ., append, (, " (", ), ., append, (, now, -]
[(, t, ), ., append, (, " (", ), ., append, (, now, -, t, ., startTimeMs, ), ., append, (]
[(, " (", ), ., append, (, now, -, t, ., startTimeMs, ), ., append, (, " ms, started at ", ), ., append, (]
[), ., append, (, now, -, t, ., startTimeMs, ), ., append, (, " ms, started at ", ), ., append, (, formatTime, (]
[), ., append, (, now, -, t, ., startTimeMs, ), ., append, (, " ms, started at ", ), ., append, (, formatTime, (]
[startTimeMs, ), ., append, (, " ms, started at ", ), ., append, (, formatTime, (, t, ., startTimeMs, ), ), ., append, (]
[formatTime, (, t, ., startTimeMs, ), ), ., append, (, ")\n", ), ;, }, }, for, (, String, key, :]
[formatTime, (, t, ., startTimeMs, ), ), ., append, (, ")\n", ), ;, }, }, for, (, String, key, :]
[")\n", ), ;, }, }, for, (, String, key, :, stats, ., keySet, (, ), ), {, Stat, stat, =]
[")\n", ), ;, }, }, for, (, String, key, :, stats, ., keySet, (, ), ), {, Stat, stat, =]
[}, for, (, String, key, :, stats, ., keySet, (, ), ), {, Stat, stat, =, stats, ., get, (]
[:, stats, ., keySet, (, ), ), {, Stat, stat, =, stats, ., get, (, key, ), ;, if, (]
[:, stats, ., keySet, (, ), ), {, Stat, stat, =, stats, ., get, (, key, ), ;, if, (]
[:, stats, ., keySet, (, ), ), {, Stat, stat, =, stats, ., get, (, key, ), ;, if, (]
[(, ), ), {, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[{, Stat, stat, =, stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {]
[stats, ., get, (, key, ), ;, if, (, stat, ., count, >, 1, ), {, sb, ., append, (]
[), ;, if, (, stat, ., count, >, 1, ), {, sb, ., append, (, " TOTAL ", ), ., append, (]
[., count, >, 1, ), {, sb, ., append, (, " TOTAL ", ), ., append, (, key, ), ., append, (]
[{, sb, ., append, (, " TOTAL ", ), ., append, (, key, ), ., append, (, " ", ), ., append, (]
[{, sb, ., append, (, " TOTAL ", ), ., append, (, key, ), ., append, (, " ", ), ., append, (]
[., append, (, key, ), ., append, (, " ", ), ., append, (, stat, ., count, ), ., append, (]
[., append, (, " ", ), ., append, (, stat, ., count, ), ., append, (, " (", ), ., append, (]
[., append, (, " ", ), ., append, (, stat, ., count, ), ., append, (, " (", ), ., append, (]
[(, stat, ., count, ), ., append, (, " (", ), ., append, (, stat, ., clockTime, ), ., append, (]
[., append, (, " (", ), ., append, (, stat, ., clockTime, ), ., append, (, " ms", ), ;, if, (]
[., append, (, " (", ), ., append, (, stat, ., clockTime, ), ., append, (, " ms", ), ;, if, (]
[., append, (, " (", ), ., append, (, stat, ., clockTime, ), ., append, (, " ms", ), ;, if, (]
[), ., append, (, stat, ., clockTime, ), ., append, (, " ms", ), ;, if, (, stat, ., extraInfo, !=]
[., append, (, " ms", ), ;, if, (, stat, ., extraInfo, !=, null, ), {, for, (, int, i, =]
[(, " ms", ), ;, if, (, stat, ., extraInfo, !=, null, ), {, for, (, int, i, =, 0, ;]
[(, " ms", ), ;, if, (, stat, ., extraInfo, !=, null, ), {, for, (, int, i, =, 0, ;]
[), ;, if, (, stat, ., extraInfo, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[), ;, if, (, stat, ., extraInfo, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[), ;, if, (, stat, ., extraInfo, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[extraInfo, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, stat, ., extraInfo, ., length, ;]
[extraInfo, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, stat, ., extraInfo, ., length, ;]
[{, for, (, int, i, =, 0, ;, i, <, stat, ., extraInfo, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, stat, ., extraInfo, ., length, ;, i, ++, ), {]
[i, =, 0, ;, i, <, stat, ., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (]
[;, i, <, stat, ., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (, "; ", ), ;]
[;, i, <, stat, ., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (, "; ", ), ;]
[;, i, <, stat, ., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (, "; ", ), ;]
[;, i, <, stat, ., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (, "; ", ), ;]
[., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (, "; ", ), ;, sb, ., append, (]
[., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (, "; ", ), ;, sb, ., append, (]
[., extraInfo, ., length, ;, i, ++, ), {, sb, ., append, (, "; ", ), ;, sb, ., append, (]
[;, i, ++, ), {, sb, ., append, (, "; ", ), ;, sb, ., append, (, stat, ., extraInfo, []
[., append, (, "; ", ), ;, sb, ., append, (, stat, ., extraInfo, [, i, ], ), ., append, (]
[;, sb, ., append, (, stat, ., extraInfo, [, i, ], ), ., append, (, ' ', ), ., append, (]
[;, sb, ., append, (, stat, ., extraInfo, [, i, ], ), ., append, (, ' ', ), ., append, (]
[;, sb, ., append, (, stat, ., extraInfo, [, i, ], ), ., append, (, ' ', ), ., append, (]
[(, stat, ., extraInfo, [, i, ], ), ., append, (, ' ', ), ., append, (, extraTracingStatistics, ., get, (]
[(, ' ', ), ., append, (, extraTracingStatistics, ., get, (, i, ), ., getUnits, (, ), ), ;, }, }]
[(, ' ', ), ., append, (, extraTracingStatistics, ., get, (, i, ), ., getUnits, (, ), ), ;, }, }]
[append, (, extraTracingStatistics, ., get, (, i, ), ., getUnits, (, ), ), ;, }, }, sb, ., append, (]
[i, ), ., getUnits, (, ), ), ;, }, }, sb, ., append, (, ")\n", ), ;, }, }, return]
[i, ), ., getUnits, (, ), ), ;, }, }, sb, ., append, (, ")\n", ), ;, }, }, return]
[;, }, }, return, sb, ., toString, (, ), ;, }, private, int, getMaxDigits, (, ), {, long, etime, =]
[}, }, return, sb, ., toString, (, ), ;, }, private, int, getMaxDigits, (, ), {, long, etime, =, -]
[toString, (, ), ;, }, private, int, getMaxDigits, (, ), {, long, etime, =, -, 1, ;, long, max_time, =]
[getMaxDigits, (, ), {, long, etime, =, -, 1, ;, long, max_time, =, 0, ;, for, (, Event, e, :]
[etime, =, -, 1, ;, long, max_time, =, 0, ;, for, (, Event, e, :, events, ), {, if, (]
[etime, =, -, 1, ;, long, max_time, =, 0, ;, for, (, Event, e, :, events, ), {, if, (]
[-, 1, ;, long, max_time, =, 0, ;, for, (, Event, e, :, events, ), {, if, (, etime, !=]
[1, ;, long, max_time, =, 0, ;, for, (, Event, e, :, events, ), {, if, (, etime, !=, -]
[;, for, (, Event, e, :, events, ), {, if, (, etime, !=, -, 1, ), {, long, time, =]
[;, for, (, Event, e, :, events, ), {, if, (, etime, !=, -, 1, ), {, long, time, =]
[;, for, (, Event, e, :, events, ), {, if, (, etime, !=, -, 1, ), {, long, time, =]
[events, ), {, if, (, etime, !=, -, 1, ), {, long, time, =, e, ., eventTime, (, ), -]
[{, if, (, etime, !=, -, 1, ), {, long, time, =, e, ., eventTime, (, ), -, etime, ;]
[(, etime, !=, -, 1, ), {, long, time, =, e, ., eventTime, (, ), -, etime, ;, max_time, =]
[(, etime, !=, -, 1, ), {, long, time, =, e, ., eventTime, (, ), -, etime, ;, max_time, =]
[1, ), {, long, time, =, e, ., eventTime, (, ), -, etime, ;, max_time, =, Math, ., max, (]
[{, long, time, =, e, ., eventTime, (, ), -, etime, ;, max_time, =, Math, ., max, (, max_time, ,]
[eventTime, (, ), -, etime, ;, max_time, =, Math, ., max, (, max_time, ,, time, ), ;, }, if, (]
[(, ), -, etime, ;, max_time, =, Math, ., max, (, max_time, ,, time, ), ;, }, if, (, !]
[(, ), -, etime, ;, max_time, =, Math, ., max, (, max_time, ,, time, ), ;, }, if, (, !]
[., max, (, max_time, ,, time, ), ;, }, if, (, !, e, ., isStart, ), {, long, time, =]
[., max, (, max_time, ,, time, ), ;, }, if, (, !, e, ., isStart, ), {, long, time, =]
[., max, (, max_time, ,, time, ), ;, }, if, (, !, e, ., isStart, ), {, long, time, =]
[., max, (, max_time, ,, time, ), ;, }, if, (, !, e, ., isStart, ), {, long, time, =]
[), ;, }, if, (, !, e, ., isStart, ), {, long, time, =, e, ., tracer, ., stopTimeMs, -]
[), ;, }, if, (, !, e, ., isStart, ), {, long, time, =, e, ., tracer, ., stopTimeMs, -]
[), ;, }, if, (, !, e, ., isStart, ), {, long, time, =, e, ., tracer, ., stopTimeMs, -]
[e, ., isStart, ), {, long, time, =, e, ., tracer, ., stopTimeMs, -, e, ., tracer, ., startTimeMs, ;]
[isStart, ), {, long, time, =, e, ., tracer, ., stopTimeMs, -, e, ., tracer, ., startTimeMs, ;, max_time, =]
[isStart, ), {, long, time, =, e, ., tracer, ., stopTimeMs, -, e, ., tracer, ., startTimeMs, ;, max_time, =]
[time, =, e, ., tracer, ., stopTimeMs, -, e, ., tracer, ., startTimeMs, ;, max_time, =, Math, ., max, (]
[e, ., tracer, ., stopTimeMs, -, e, ., tracer, ., startTimeMs, ;, max_time, =, Math, ., max, (, max_time, ,]
[stopTimeMs, -, e, ., tracer, ., startTimeMs, ;, max_time, =, Math, ., max, (, max_time, ,, time, ), ;, }]
[e, ., tracer, ., startTimeMs, ;, max_time, =, Math, ., max, (, max_time, ,, time, ), ;, }, etime, =]
[e, ., tracer, ., startTimeMs, ;, max_time, =, Math, ., max, (, max_time, ,, time, ), ;, }, etime, =]
[Math, ., max, (, max_time, ,, time, ), ;, }, etime, =, e, ., eventTime, (, ), ;, }, return]
[Math, ., max, (, max_time, ,, time, ), ;, }, etime, =, e, ., eventTime, (, ), ;, }, return]
[max_time, ,, time, ), ;, }, etime, =, e, ., eventTime, (, ), ;, }, return, Math, ., max, (]
[time, ), ;, }, etime, =, e, ., eventTime, (, ), ;, }, return, Math, ., max, (, 3, ,]
[;, }, etime, =, e, ., eventTime, (, ), ;, }, return, Math, ., max, (, 3, ,, numDigits, (]
[max, (, 3, ,, numDigits, (, max_time, ), ), ;, }, }, private, static, ThreadLocal, <, ThreadTrace, >, traces, =]
[>, traces, =, new, ThreadLocal, <, ThreadTrace, >, (, ), ;, static, ThreadTrace, getThreadTrace, (, ), {, ThreadTrace, t, =]
[>, traces, =, new, ThreadLocal, <, ThreadTrace, >, (, ), ;, static, ThreadTrace, getThreadTrace, (, ), {, ThreadTrace, t, =]
[(, ), ;, static, ThreadTrace, getThreadTrace, (, ), {, ThreadTrace, t, =, traces, ., get, (, ), ;, if, (]
[(, ), ;, static, ThreadTrace, getThreadTrace, (, ), {, ThreadTrace, t, =, traces, ., get, (, ), ;, if, (]
[;, static, ThreadTrace, getThreadTrace, (, ), {, ThreadTrace, t, =, traces, ., get, (, ), ;, if, (, t, ==]
[getThreadTrace, (, ), {, ThreadTrace, t, =, traces, ., get, (, ), ;, if, (, t, ==, null, ), {]
[), {, ThreadTrace, t, =, traces, ., get, (, ), ;, if, (, t, ==, null, ), {, t, =]
[traces, ., get, (, ), ;, if, (, t, ==, null, ), {, t, =, new, ThreadTrace, (, ), ;]
[traces, ., get, (, ), ;, if, (, t, ==, null, ), {, t, =, new, ThreadTrace, (, ), ;]
[), ;, if, (, t, ==, null, ), {, t, =, new, ThreadTrace, (, ), ;, t, ., prettyPrint, =]
[if, (, t, ==, null, ), {, t, =, new, ThreadTrace, (, ), ;, t, ., prettyPrint, =, defaultPrettyPrint, ;]
[if, (, t, ==, null, ), {, t, =, new, ThreadTrace, (, ), ;, t, ., prettyPrint, =, defaultPrettyPrint, ;]
[null, ), {, t, =, new, ThreadTrace, (, ), ;, t, ., prettyPrint, =, defaultPrettyPrint, ;, traces, ., set, (]
[new, ThreadTrace, (, ), ;, t, ., prettyPrint, =, defaultPrettyPrint, ;, traces, ., set, (, t, ), ;, }, return]
[defaultPrettyPrint, ;, traces, ., set, (, t, ), ;, }, return, t, ;, }, static, void, clearThreadTrace, (, ), {]
[defaultPrettyPrint, ;, traces, ., set, (, t, ), ;, }, return, t, ;, }, static, void, clearThreadTrace, (, ), {]
[String, getUnits, (, ), ;, }, static, final, class, AtomicTracerStatMap, {, private, ConcurrentMap, <, String, ,, Long, >, map, =]
[{, private, ConcurrentMap, <, String, ,, Long, >, map, =, new, ConcurrentHashMap, <, String, ,, Long, >, (, ), ;]
[<, String, ,, Long, >, map, =, new, ConcurrentHashMap, <, String, ,, Long, >, (, ), ;, @, SuppressWarnings, (]
[), ;, @, SuppressWarnings, (, "nullness", ), void, incrementBy, (, String, key, ,, long, delta, ), {, Long, oldValue, =]
[), ;, @, SuppressWarnings, (, "nullness", ), void, incrementBy, (, String, key, ,, long, delta, ), {, Long, oldValue, =]
[(, "nullness", ), void, incrementBy, (, String, key, ,, long, delta, ), {, Long, oldValue, =, map, ., get, (]
[(, String, key, ,, long, delta, ), {, Long, oldValue, =, map, ., get, (, key, ), ;, if, (]
[(, String, key, ,, long, delta, ), {, Long, oldValue, =, map, ., get, (, key, ), ;, if, (]
[key, ,, long, delta, ), {, Long, oldValue, =, map, ., get, (, key, ), ;, if, (, oldValue, ==]
[delta, ), {, Long, oldValue, =, map, ., get, (, key, ), ;, if, (, oldValue, ==, null, ), {]
[{, Long, oldValue, =, map, ., get, (, key, ), ;, if, (, oldValue, ==, null, ), {, oldValue, =]
[{, Long, oldValue, =, map, ., get, (, key, ), ;, if, (, oldValue, ==, null, ), {, oldValue, =]
[map, ., get, (, key, ), ;, if, (, oldValue, ==, null, ), {, oldValue, =, map, ., putIfAbsent, (]
[get, (, key, ), ;, if, (, oldValue, ==, null, ), {, oldValue, =, map, ., putIfAbsent, (, key, ,]
[if, (, oldValue, ==, null, ), {, oldValue, =, map, ., putIfAbsent, (, key, ,, delta, ), ;, if, (]
[if, (, oldValue, ==, null, ), {, oldValue, =, map, ., putIfAbsent, (, key, ,, delta, ), ;, if, (]
[oldValue, ==, null, ), {, oldValue, =, map, ., putIfAbsent, (, key, ,, delta, ), ;, if, (, oldValue, ==]
[,, delta, ), ;, if, (, oldValue, ==, null, ), {, return, ;, }, else, {, }, }, while, (]
[(, oldValue, ==, null, ), {, return, ;, }, else, {, }, }, while, (, true, ), {, if, (]
[(, oldValue, ==, null, ), {, return, ;, }, else, {, }, }, while, (, true, ), {, if, (]
[), {, return, ;, }, else, {, }, }, while, (, true, ), {, if, (, map, ., replace, (]
[return, ;, }, else, {, }, }, while, (, true, ), {, if, (, map, ., replace, (, key, ,]
[}, else, {, }, }, while, (, true, ), {, if, (, map, ., replace, (, key, ,, oldValue, ,]
[}, else, {, }, }, while, (, true, ), {, if, (, map, ., replace, (, key, ,, oldValue, ,]
[{, }, }, while, (, true, ), {, if, (, map, ., replace, (, key, ,, oldValue, ,, oldValue, +]
[{, if, (, map, ., replace, (, key, ,, oldValue, ,, oldValue, +, delta, ), ), {, break, ;, }]
[(, map, ., replace, (, key, ,, oldValue, ,, oldValue, +, delta, ), ), {, break, ;, }, oldValue, =]
[(, map, ., replace, (, key, ,, oldValue, ,, oldValue, +, delta, ), ), {, break, ;, }, oldValue, =]
[(, key, ,, oldValue, ,, oldValue, +, delta, ), ), {, break, ;, }, oldValue, =, map, ., get, (]
[map, ., get, (, key, ), ;, }, }, Map, <, String, ,, Long, >, getMap, (, ), {, return]
