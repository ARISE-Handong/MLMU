[;, public, JSModuleGraph, (, JSModule, [, ], modulesInDepOrder, ), {, this, (, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ), ;]
[., newHashMap, (, ), ;, public, JSModuleGraph, (, JSModule, [, ], modulesInDepOrder, ), {, this, (, ImmutableList, ., copyOf, (]
[), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (, modulesInDepOrder, ., size]
[., copyOf, (, modulesInDepOrder, ), ), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, .]
[), ), ;, }, public, JSModuleGraph, (, List, <, JSModule, >, modulesInDepOrder, ), {, Preconditions, ., checkState, (, modulesInDepOrder, .]
[;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for, (]
[., checkState, (, modulesInDepOrder, ., size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,]
[,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists, ., newArrayList, (, )]
[==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf]
[., size, (, ), ==, Sets, ., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;, modules]
[,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists, ., newArrayList, (, )]
[., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists]
[., newHashSet, (, modulesInDepOrder, ), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder]
[), ., size, (, ), ,, "Found duplicate modules", ), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =]
[), ;, modules, =, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for]
[=, ImmutableList, ., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module]
[;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth, =]
[., copyOf, (, modulesInDepOrder, ), ;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, modulesInDepOrder]
[), ;, modulesByDepth, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth]
[=, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth, =, 0, ;]
[;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth, =, 0, ;, for, (, JSModule, dep, :, module]
[., newArrayList, (, ), ;, for, (, JSModule, module, :, modulesInDepOrder, ), {, int, depth, =, 0, ;, for, (]
[), {, int, depth, =, 0, ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, int]
[;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, int, depDepth, =, dep, ., getDepth, (]
[), {, int, depDepth, =, dep, ., getDepth, (, ), ;, if, (, depDepth, <, 0, ), {, throw, new]
[., getDependencies, (, ), ), {, int, depDepth, =, dep, ., getDepth, (, ), ;, if, (, depDepth, <, 0]
[;, if, (, depDepth, <, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, .]
[., getDepth, (, ), ;, if, (, depDepth, <, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (]
[), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,, dep, .]
[<, 0, ), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,]
[), {, throw, new, ModuleDependenceException, (, String, ., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,, dep, .]
[;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (]
[,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;]
[., format, (, "Modules not in dependency order: %s preceded %s", ,, module, ., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,]
[,, module, ., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,, dep, ), ;, }]
[,, dep, ., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (]
[., getName, (, ), ,, dep, ., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =]
[), ,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, )]
[., getName, (, ), ), ,, module, ,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,]
[,, dep, ), ;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;, }, module]
[), ;, }, depth, =, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth]
[=, Math, ., max, (, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (, depth, ), ;]
[;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), ), {]
[., max, (, depth, ,, depDepth, +, 1, ), ;, }, module, ., setDepth, (, depth, ), ;, if, (]
[,, depDepth, +, 1, ), ;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, .]
[), ;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), )]
[+, 1, ), ;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (]
[), ;, }, module, ., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), )]
[;, if, (, depth, ==, modulesByDepth, ., size, (, ), ), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule]
[., setDepth, (, depth, ), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), ), {, modulesByDepth, ., add]
[), ;, if, (, depth, ==, modulesByDepth, ., size, (, ), ), {, modulesByDepth, ., add, (, new, ArrayList, <]
[), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }, modulesByDepth, ., get, (]
[==, modulesByDepth, ., size, (, ), ), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), )]
[), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }, modulesByDepth, ., get, (]
[., size, (, ), ), {, modulesByDepth, ., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }]
[;, }, modulesByDepth, ., get, (, depth, ), ., add, (, module, ), ;, }, }, Iterable, <, JSModule, >]
[., add, (, new, ArrayList, <, JSModule, >, (, ), ), ;, }, modulesByDepth, ., get, (, depth, ), .]
[), ;, }, modulesByDepth, ., get, (, depth, ), ., add, (, module, ), ;, }, }, Iterable, <, JSModule]
[;, }, }, Iterable, <, JSModule, >, getAllModules, (, ), {, return, modules, ;, }, int, getModuleCount, (, ), {]
[., add, (, module, ), ;, }, }, Iterable, <, JSModule, >, getAllModules, (, ), {, return, modules, ;, }]
[., get, (, depth, ), ., add, (, module, ), ;, }, }, Iterable, <, JSModule, >, getAllModules, (, )]
[), ., add, (, module, ), ;, }, }, Iterable, <, JSModule, >, getAllModules, (, ), {, return, modules, ;]
[), ;, }, }, Iterable, <, JSModule, >, getAllModules, (, ), {, return, modules, ;, }, int, getModuleCount, (, )]
[;, }, int, getModuleCount, (, ), {, return, modules, ., size, (, ), ;, }, JSModule, getRootModule, (, ), {]
[;, }, JSModule, getRootModule, (, ), {, return, Iterables, ., getOnlyElement, (, modulesByDepth, ., get, (, 0, ), ), ;]
[., size, (, ), ;, }, JSModule, getRootModule, (, ), {, return, Iterables, ., getOnlyElement, (, modulesByDepth, ., get, (]
[;, }, JSONArray, toJson, (, ), {, JSONArray, modules, =, new, JSONArray, (, ), ;, for, (, JSModule, module, :]
[., getOnlyElement, (, modulesByDepth, ., get, (, 0, ), ), ;, }, JSONArray, toJson, (, ), {, JSONArray, modules, =]
[), ;, }, JSONArray, toJson, (, ), {, JSONArray, modules, =, new, JSONArray, (, ), ;, for, (, JSModule, module]
[., get, (, 0, ), ), ;, }, JSONArray, toJson, (, ), {, JSONArray, modules, =, new, JSONArray, (, )]
[), ), ;, }, JSONArray, toJson, (, ), {, JSONArray, modules, =, new, JSONArray, (, ), ;, for, (, JSModule]
[;, for, (, JSModule, module, :, getAllModules, (, ), ), {, JSONObject, node, =, new, JSONObject, (, ), ;, try]
[), {, JSONObject, node, =, new, JSONObject, (, ), ;, try, {, node, ., put, (, "name", ,, module, .]
[;, try, {, node, ., put, (, "name", ,, module, ., getName, (, ), ), ;, JSONArray, deps, =, new]
[;, JSONArray, deps, =, new, JSONArray, (, ), ;, node, ., put, (, "dependencies", ,, deps, ), ;, for, (]
[., put, (, "name", ,, module, ., getName, (, ), ), ;, JSONArray, deps, =, new, JSONArray, (, ), ;]
[,, module, ., getName, (, ), ), ;, JSONArray, deps, =, new, JSONArray, (, ), ;, node, ., put, (]
[), ;, JSONArray, deps, =, new, JSONArray, (, ), ;, node, ., put, (, "dependencies", ,, deps, ), ;, for]
[., getName, (, ), ), ;, JSONArray, deps, =, new, JSONArray, (, ), ;, node, ., put, (, "dependencies", ,]
[;, node, ., put, (, "dependencies", ,, deps, ), ;, for, (, JSModule, m, :, module, ., getDependencies, (, )]
[;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {, deps, ., put, (, m, ., getName]
[., put, (, "dependencies", ,, deps, ), ;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {]
[,, deps, ), ;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {, deps, ., put, (]
[), ;, for, (, JSModule, m, :, module, ., getDependencies, (, ), ), {, deps, ., put, (, m, .]
[), {, deps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (]
[., getDependencies, (, ), ), {, deps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, transitiveDeps]
[;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;, node, ., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;, for]
[., put, (, m, ., getName, (, ), ), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;, node]
[), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;, node, ., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;]
[., getName, (, ), ), ;, }, JSONArray, transitiveDeps, =, new, JSONArray, (, ), ;, node, ., put, (, "transitive-dependencies"]
[;, node, ., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), )]
[;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {, transitiveDeps, ., put, (, m, ., getName, (]
[., put, (, "transitive-dependencies", ,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {, transitiveDeps]
[,, transitiveDeps, ), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {, transitiveDeps, ., put, (, m]
[), ;, for, (, JSModule, m, :, getTransitiveDepsDeepestFirst, (, module, ), ), {, transitiveDeps, ., put, (, m, ., getName]
[), {, transitiveDeps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray, (]
[), ), {, transitiveDeps, ., put, (, m, ., getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray]
[;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;, node, ., put, (, "inputs", ,, inputs, ), ;, for]
[., put, (, m, ., getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;, node]
[), ;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;, node, ., put, (, "inputs", ,, inputs, ), ;]
[., getName, (, ), ), ;, }, JSONArray, inputs, =, new, JSONArray, (, ), ;, node, ., put, (, "inputs"]
[;, node, ., put, (, "inputs", ,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, )]
[;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, inputs, ., put, (, input, ., getSourceFile]
[., put, (, "inputs", ,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {]
[,, inputs, ), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, inputs, ., put, (]
[), ;, for, (, CompilerInput, input, :, module, ., getInputs, (, ), ), {, inputs, ., put, (, input, .]
[), {, inputs, ., put, (, input, ., getSourceFile, (, ), ., getOriginalPath, (, ), ), ;, }, modules, .]
[., getInputs, (, ), ), {, inputs, ., put, (, input, ., getSourceFile, (, ), ., getOriginalPath, (, ), )]
[;, }, modules, ., put, (, node, ), ;, }, catch, (, JSONException, e, ), {, Throwables, ., propagate, (]
[., put, (, input, ., getSourceFile, (, ), ., getOriginalPath, (, ), ), ;, }, modules, ., put, (, node]
[), ;, }, modules, ., put, (, node, ), ;, }, catch, (, JSONException, e, ), {, Throwables, ., propagate]
[., getOriginalPath, (, ), ), ;, }, modules, ., put, (, node, ), ;, }, catch, (, JSONException, e, )]
[., getSourceFile, (, ), ., getOriginalPath, (, ), ), ;, }, modules, ., put, (, node, ), ;, }, catch]
[;, }, catch, (, JSONException, e, ), {, Throwables, ., propagate, (, e, ), ;, }, }, return, modules, ;]
[., put, (, node, ), ;, }, catch, (, JSONException, e, ), {, Throwables, ., propagate, (, e, ), ;]
[), ;, }, catch, (, JSONException, e, ), {, Throwables, ., propagate, (, e, ), ;, }, }, return, modules]
[;, }, }, return, modules, ;, }, public, boolean, dependsOn, (, JSModule, src, ,, JSModule, m, ), {, Set, <]
[., propagate, (, e, ), ;, }, }, return, modules, ;, }, public, boolean, dependsOn, (, JSModule, src, ,, JSModule]
[), ;, }, }, return, modules, ;, }, public, boolean, dependsOn, (, JSModule, src, ,, JSModule, m, ), {, Set]
[;, }, public, boolean, dependsOn, (, JSModule, src, ,, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap]
[;, if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src]
[., get, (, src, ), ;, if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;]
[), ;, if, (, deps, ==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (]
[), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return]
[==, null, ), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,, deps, ), ;]
[), {, deps, =, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return]
[=, getTransitiveDepsDeepestFirst, (, src, ), ;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return, deps, ., contains]
[;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return, deps, ., contains, (, m, ), ;, }]
[), ;, dependencyMap, ., put, (, src, ,, deps, ), ;, }, return, deps, ., contains, (, m, ), ;]
[;, }, return, deps, ., contains, (, m, ), ;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,, JSModule, m2, )]
[., put, (, src, ,, deps, ), ;, }, return, deps, ., contains, (, m, ), ;, }, JSModule, getDeepestCommonDependency]
[,, deps, ), ;, }, return, deps, ., contains, (, m, ), ;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,]
[), ;, }, return, deps, ., contains, (, m, ), ;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,, JSModule, m2]
[;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,, JSModule, m2, ), {, int, m1Depth, =, m1, ., getDepth, (, )]
[., contains, (, m, ), ;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,, JSModule, m2, ), {, int, m1Depth, =]
[), ;, }, JSModule, getDeepestCommonDependency, (, JSModule, m1, ,, JSModule, m2, ), {, int, m1Depth, =, m1, ., getDepth, (]
[;, int, m2Depth, =, m2, ., getDepth, (, ), ;, for, (, int, depth, =, Math, ., min, (, m1Depth]
[., getDepth, (, ), ;, int, m2Depth, =, m2, ., getDepth, (, ), ;, for, (, int, depth, =, Math]
[;, for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1, ;, depth, >=, 0]
[., getDepth, (, ), ;, for, (, int, depth, =, Math, ., min, (, m1Depth, ,, m2Depth, ), -, 1]
[;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth]
[-, 1, ;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get]
[., min, (, m1Depth, ,, m2Depth, ), -, 1, ;, depth, >=, 0, ;, depth, --, ), {, List, <]
[,, m2Depth, ), -, 1, ;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =]
[), -, 1, ;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, .]
[;, depth, >=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth]
[;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (]
[>=, 0, ;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;]
[;, depth, --, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (]
[), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (, int, i, =]
[--, ), {, List, <, JSModule, >, modulesAtDepth, =, modulesByDepth, ., get, (, depth, ), ;, for, (, int, i]
[;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --]
[., get, (, depth, ), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;, i]
[), ;, for, (, int, i, =, modulesAtDepth, ., size, (, ), -, 1, ;, i, >=, 0, ;, i]
[;, i, >=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, )]
[., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, .]
[;, i, >=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if]
[;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1]
[>=, 0, ;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn]
[;, i, --, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1]
[), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1, ,, m, )]
[--, ), {, JSModule, m, =, modulesAtDepth, ., get, (, i, ), ;, if, (, dependsOn, (, m1, ,, m]
[;, if, (, dependsOn, (, m1, ,, m, ), &&, dependsOn, (, m2, ,, m, ), ), {, return, m]
[., get, (, i, ), ;, if, (, dependsOn, (, m1, ,, m, ), &&, dependsOn, (, m2, ,, m]
[), ;, if, (, dependsOn, (, m1, ,, m, ), &&, dependsOn, (, m2, ,, m, ), ), {, return]
[), {, return, m, ;, }, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule]
[&&, dependsOn, (, m2, ,, m, ), ), {, return, m, ;, }, }, }, return, null, ;, }, public]
[,, m, ), &&, dependsOn, (, m2, ,, m, ), ), {, return, m, ;, }, }, }, return, null]
[), &&, dependsOn, (, m2, ,, m, ), ), {, return, m, ;, }, }, }, return, null, ;, }]
[), {, return, m, ;, }, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule]
[,, m, ), ), {, return, m, ;, }, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule]
[), ), {, return, m, ;, }, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,]
[;, }, }, }, return, null, ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if]
[;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m2, ==, m1, ||, dependsOn]
[), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return, m2, ;]
[||, dependsOn, (, m2, ,, m1, ), ), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,]
[==, m1, ||, dependsOn, (, m2, ,, m1, ), ), {, return, m1, ;, }, else, if, (, dependsOn, (]
[||, dependsOn, (, m2, ,, m1, ), ), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,]
[), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return, m2, ;]
[,, m1, ), ), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {]
[), ), {, return, m1, ;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return, m2]
[;, }, else, if, (, dependsOn, (, m1, ,, m2, ), ), {, return, m2, ;, }, return, getDeepestCommonDependency, (]
[), {, return, m2, ;, }, return, getDeepestCommonDependency, (, m1, ,, m2, ), ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, Collection]
[,, m2, ), ), {, return, m2, ;, }, return, getDeepestCommonDependency, (, m1, ,, m2, ), ;, }, public, JSModule]
[), ), {, return, m2, ;, }, return, getDeepestCommonDependency, (, m1, ,, m2, ), ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (]
[;, }, return, getDeepestCommonDependency, (, m1, ,, m2, ), ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, Collection, <, JSModule, >, modules]
[;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, Collection, <, JSModule, >, modules, ), {, Iterator, <, JSModule, >, iter, =, modules]
[,, m2, ), ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, Collection, <, JSModule, >, modules, ), {, Iterator, <, JSModule, >]
[), ;, }, public, JSModule, getDeepestCommonDependencyInclusive, (, Collection, <, JSModule, >, modules, ), {, Iterator, <, JSModule, >, iter, =]
[;, JSModule, dep, =, iter, ., next, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, dep]
[., iterator, (, ), ;, JSModule, dep, =, iter, ., next, (, ), ;, while, (, iter, ., hasNext, (]
[;, while, (, iter, ., hasNext, (, ), ), {, dep, =, getDeepestCommonDependencyInclusive, (, dep, ,, iter, ., next, (]
[., next, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, dep, =, getDeepestCommonDependencyInclusive, (, dep, ,]
[), {, dep, =, getDeepestCommonDependencyInclusive, (, dep, ,, iter, ., next, (, ), ), ;, }, return, dep, ;, }]
[., hasNext, (, ), ), {, dep, =, getDeepestCommonDependencyInclusive, (, dep, ,, iter, ., next, (, ), ), ;, }]
[=, getDeepestCommonDependencyInclusive, (, dep, ,, iter, ., next, (, ), ), ;, }, return, dep, ;, }, Set, <, JSModule]
[;, }, return, dep, ;, }, Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule, m, ), {, Set, <, JSModule, >]
[,, iter, ., next, (, ), ), ;, }, return, dep, ;, }, Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule]
[), ;, }, return, dep, ;, }, Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule, m, ), {, Set, <, JSModule]
[., next, (, ), ), ;, }, return, dep, ;, }, Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule, m, )]
[;, }, Set, <, JSModule, >, getTransitiveDepsDeepestFirst, (, JSModule, m, ), {, Set, <, JSModule, >, deps, =, dependencyMap, .]
[;, if, (, deps, !=, null, ), {, return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >, (]
[., get, (, m, ), ;, if, (, deps, !=, null, ), {, return, deps, ;, }, deps, =, new]
[), ;, if, (, deps, !=, null, ), {, return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >]
[), {, return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;]
[!=, null, ), {, return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, )]
[), {, return, deps, ;, }, deps, =, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;]
[;, }, deps, =, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;, addDeps, (, deps, ,]
[=, new, TreeSet, <, JSModule, >, (, new, InverseDepthComparator, (, ), ), ;, addDeps, (, deps, ,, m, ), ;]
[;, addDeps, (, deps, ,, m, ), ;, dependencyMap, ., put, (, m, ,, deps, ), ;, return, deps, ;]
[), ;, addDeps, (, deps, ,, m, ), ;, dependencyMap, ., put, (, m, ,, deps, ), ;, return, deps]
[;, dependencyMap, ., put, (, m, ,, deps, ), ;, return, deps, ;, }, private, void, addDeps, (, Set, <]
[,, m, ), ;, dependencyMap, ., put, (, m, ,, deps, ), ;, return, deps, ;, }, private, void, addDeps]
[), ;, dependencyMap, ., put, (, m, ,, deps, ), ;, return, deps, ;, }, private, void, addDeps, (, Set]
[;, return, deps, ;, }, private, void, addDeps, (, Set, <, JSModule, >, deps, ,, JSModule, m, ), {, for]
[., put, (, m, ,, deps, ), ;, return, deps, ;, }, private, void, addDeps, (, Set, <, JSModule, >]
[,, deps, ), ;, return, deps, ;, }, private, void, addDeps, (, Set, <, JSModule, >, deps, ,, JSModule, m]
[), ;, return, deps, ;, }, private, void, addDeps, (, Set, <, JSModule, >, deps, ,, JSModule, m, ), {]
[;, }, private, void, addDeps, (, Set, <, JSModule, >, deps, ,, JSModule, m, ), {, for, (, JSModule, dep]
[), {, deps, ., add, (, dep, ), ;, addDeps, (, deps, ,, dep, ), ;, }, }, public, void]
[., getDependencies, (, ), ), {, deps, ., add, (, dep, ), ;, addDeps, (, deps, ,, dep, ), ;]
[;, addDeps, (, deps, ,, dep, ), ;, }, }, public, void, coalesceDuplicateFiles, (, ), {, Multimap, <, String, ,]
[., add, (, dep, ), ;, addDeps, (, deps, ,, dep, ), ;, }, }, public, void, coalesceDuplicateFiles, (, )]
[), ;, addDeps, (, deps, ,, dep, ), ;, }, }, public, void, coalesceDuplicateFiles, (, ), {, Multimap, <, String]
[;, }, }, public, void, coalesceDuplicateFiles, (, ), {, Multimap, <, String, ,, JSModule, >, fileRefs, =, LinkedHashMultimap, ., create]
[,, dep, ), ;, }, }, public, void, coalesceDuplicateFiles, (, ), {, Multimap, <, String, ,, JSModule, >, fileRefs, =]
[), ;, }, }, public, void, coalesceDuplicateFiles, (, ), {, Multimap, <, String, ,, JSModule, >, fileRefs, =, LinkedHashMultimap, .]
[;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, jsFile, :, module, ., getInputs, (, ), )]
[., create, (, ), ;, for, (, JSModule, module, :, modules, ), {, for, (, CompilerInput, jsFile, :, module, .]
[), {, for, (, CompilerInput, jsFile, :, module, ., getInputs, (, ), ), {, fileRefs, ., put, (, jsFile, .]
[), {, fileRefs, ., put, (, jsFile, ., getName, (, ), ,, module, ), ;, }, }, for, (, String]
[., getInputs, (, ), ), {, fileRefs, ., put, (, jsFile, ., getName, (, ), ,, module, ), ;, }]
[;, }, }, for, (, String, path, :, fileRefs, ., keySet, (, ), ), {, Collection, <, JSModule, >, refModules]
[., put, (, jsFile, ., getName, (, ), ,, module, ), ;, }, }, for, (, String, path, :, fileRefs]
[,, module, ), ;, }, }, for, (, String, path, :, fileRefs, ., keySet, (, ), ), {, Collection, <]
[., getName, (, ), ,, module, ), ;, }, }, for, (, String, path, :, fileRefs, ., keySet, (, )]
[), ;, }, }, for, (, String, path, :, fileRefs, ., keySet, (, ), ), {, Collection, <, JSModule, >]
[), {, Collection, <, JSModule, >, refModules, =, fileRefs, ., get, (, path, ), ;, if, (, refModules, ., size]
[., keySet, (, ), ), {, Collection, <, JSModule, >, refModules, =, fileRefs, ., get, (, path, ), ;, if]
[;, if, (, refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;]
[., get, (, path, ), ;, if, (, refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =]
[), ;, if, (, refModules, ., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, )]
[), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =, refModules, ., iterator, (, ), ., next]
[>, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =, refModules, ., iterator, (, )]
[., size, (, ), >, 1, ), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =, refModules]
[), {, JSModule, depModule, =, getDeepestCommonDependencyInclusive, (, refModules, ), ;, CompilerInput, file, =, refModules, ., iterator, (, ), ., next]
[;, CompilerInput, file, =, refModules, ., iterator, (, ), ., next, (, ), ., getByName, (, path, ), ;, for]
[), ;, CompilerInput, file, =, refModules, ., iterator, (, ), ., next, (, ), ., getByName, (, path, ), ;]
[;, for, (, JSModule, module, :, refModules, ), {, if, (, module, !=, depModule, ), {, module, ., removeByName, (]
[., getByName, (, path, ), ;, for, (, JSModule, module, :, refModules, ), {, if, (, module, !=, depModule, )]
[., next, (, ), ., getByName, (, path, ), ;, for, (, JSModule, module, :, refModules, ), {, if, (]
[., iterator, (, ), ., next, (, ), ., getByName, (, path, ), ;, for, (, JSModule, module, :, refModules]
[), ;, for, (, JSModule, module, :, refModules, ), {, if, (, module, !=, depModule, ), {, module, ., removeByName]
[), {, if, (, module, !=, depModule, ), {, module, ., removeByName, (, path, ), ;, }, }, if, (]
[), {, module, ., removeByName, (, path, ), ;, }, }, if, (, !, refModules, ., contains, (, depModule, )]
[!=, depModule, ), {, module, ., removeByName, (, path, ), ;, }, }, if, (, !, refModules, ., contains, (]
[), {, module, ., removeByName, (, path, ), ;, }, }, if, (, !, refModules, ., contains, (, depModule, )]
[;, }, }, if, (, !, refModules, ., contains, (, depModule, ), ), {, depModule, ., add, (, file, )]
[., removeByName, (, path, ), ;, }, }, if, (, !, refModules, ., contains, (, depModule, ), ), {, depModule]
[), ;, }, }, if, (, !, refModules, ., contains, (, depModule, ), ), {, depModule, ., add, (, file]
[), {, depModule, ., add, (, file, ), ;, }, }, }, }, public, List, <, CompilerInput, >, manageDependencies, (]
[), {, depModule, ., add, (, file, ), ;, }, }, }, }, public, List, <, CompilerInput, >, manageDependencies, (]
[., contains, (, depModule, ), ), {, depModule, ., add, (, file, ), ;, }, }, }, }, public, List]
[), ), {, depModule, ., add, (, file, ), ;, }, }, }, }, public, List, <, CompilerInput, >, manageDependencies]
[;, }, }, }, }, public, List, <, CompilerInput, >, manageDependencies, (, List, <, String, >, entryPoints, ,, List, <]
[., add, (, file, ), ;, }, }, }, }, public, List, <, CompilerInput, >, manageDependencies, (, List, <, String]
[), ;, }, }, }, }, public, List, <, CompilerInput, >, manageDependencies, (, List, <, String, >, entryPoints, ,, List]
[;, depOptions, ., setDependencySorting, (, true, ), ;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints]
[;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (, depOptions, ,]
[., setDependencySorting, (, true, ), ;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;]
[), ;, depOptions, ., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (, depOptions]
[;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (, depOptions, ,, inputs, ), ;, }, public, List, <]
[., setDependencyPruning, (, true, ), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (, depOptions, ,, inputs, )]
[), ;, depOptions, ., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (, depOptions, ,, inputs, ), ;, }, public, List]
[;, return, manageDependencies, (, depOptions, ,, inputs, ), ;, }, public, List, <, CompilerInput, >, manageDependencies, (, DependencyOptions, depOptions, ,]
[., setEntryPoints, (, entryPoints, ), ;, return, manageDependencies, (, depOptions, ,, inputs, ), ;, }, public, List, <, CompilerInput, >]
[), ;, return, manageDependencies, (, depOptions, ,, inputs, ), ;, }, public, List, <, CompilerInput, >, manageDependencies, (, DependencyOptions, depOptions]
[;, }, public, List, <, CompilerInput, >, manageDependencies, (, DependencyOptions, depOptions, ,, List, <, CompilerInput, >, inputs, ), throws, CircularDependencyException]
[,, inputs, ), ;, }, public, List, <, CompilerInput, >, manageDependencies, (, DependencyOptions, depOptions, ,, List, <, CompilerInput, >, inputs]
[), ;, }, public, List, <, CompilerInput, >, manageDependencies, (, DependencyOptions, depOptions, ,, List, <, CompilerInput, >, inputs, ), throws]
[;, Set, <, CompilerInput, >, entryPointInputs, =, Sets, ., newLinkedHashSet, (, ), ;, if, (, depOptions, ., shouldPruneDependencies, (, )]
[), ;, Set, <, CompilerInput, >, entryPointInputs, =, Sets, ., newLinkedHashSet, (, ), ;, if, (, depOptions, ., shouldPruneDependencies, (]
[;, if, (, depOptions, ., shouldPruneDependencies, (, ), ), {, if, (, !, depOptions, ., shouldDropMoochers, (, ), ), {]
[., newLinkedHashSet, (, ), ;, if, (, depOptions, ., shouldPruneDependencies, (, ), ), {, if, (, !, depOptions, ., shouldDropMoochers]
[), {, if, (, !, depOptions, ., shouldDropMoochers, (, ), ), {, entryPointInputs, ., addAll, (, sorter, ., getInputsWithoutProvides, (]
[., shouldPruneDependencies, (, ), ), {, if, (, !, depOptions, ., shouldDropMoochers, (, ), ), {, entryPointInputs, ., addAll, (]
[), {, entryPointInputs, ., addAll, (, sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :, depOptions]
[), {, entryPointInputs, ., addAll, (, sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :, depOptions]
[., shouldDropMoochers, (, ), ), {, entryPointInputs, ., addAll, (, sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (]
[;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {, entryPointInputs, ., add, (, sorter, .]
[., addAll, (, sorter, ., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (]
[), ;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {, entryPointInputs, ., add, (, sorter]
[., getInputsWithoutProvides, (, ), ), ;, }, for, (, String, entryPoint, :, depOptions, ., getEntryPoints, (, ), ), {, entryPointInputs]
[), {, entryPointInputs, ., add, (, sorter, ., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =, sorter, .]
[., getEntryPoints, (, ), ), {, entryPointInputs, ., add, (, sorter, ., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput]
[;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=, null, ), {, entryPointInputs]
[., add, (, sorter, ., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog"]
[), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=, null, ), {]
[., getInputProviding, (, entryPoint, ), ), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (]
[), ), ;, }, CompilerInput, baseJs, =, sorter, ., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=, null, )]
[;, if, (, baseJs, !=, null, ), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {, entryPointInputs]
[., maybeGetInputProviding, (, "goog", ), ;, if, (, baseJs, !=, null, ), {, entryPointInputs, ., add, (, baseJs, ), ;]
[), ;, if, (, baseJs, !=, null, ), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {]
[), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {, entryPointInputs, ., addAll, (, inputs, ), ;]
[!=, null, ), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {, entryPointInputs, ., addAll, (, inputs]
[), {, entryPointInputs, ., add, (, baseJs, ), ;, }, }, else, {, entryPointInputs, ., addAll, (, inputs, ), ;]
[;, }, }, else, {, entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =, sorter]
[., add, (, baseJs, ), ;, }, }, else, {, entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <]
[), ;, }, }, else, {, entryPointInputs, ., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =]
[;, }, List, <, CompilerInput, >, absoluteOrder, =, sorter, ., getDependenciesOf, (, inputs, ,, depOptions, ., shouldSortDependencies, (, ), )]
[., addAll, (, inputs, ), ;, }, List, <, CompilerInput, >, absoluteOrder, =, sorter, ., getDependenciesOf, (, inputs, ,, depOptions]
[), ;, }, List, <, CompilerInput, >, absoluteOrder, =, sorter, ., getDependenciesOf, (, inputs, ,, depOptions, ., shouldSortDependencies, (, )]
[;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =, LinkedListMultimap, ., create, (, ), ;, for, (, CompilerInput, input, :]
[., getDependenciesOf, (, inputs, ,, depOptions, ., shouldSortDependencies, (, ), ), ;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =]
[,, depOptions, ., shouldSortDependencies, (, ), ), ;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =, LinkedListMultimap, ., create, (]
[), ;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =, LinkedListMultimap, ., create, (, ), ;, for, (, CompilerInput, input]
[., shouldSortDependencies, (, ), ), ;, ListMultimap, <, JSModule, ,, CompilerInput, >, entryPointInputsPerModule, =, LinkedListMultimap, ., create, (, ), ;]
[;, for, (, CompilerInput, input, :, entryPointInputs, ), {, JSModule, module, =, input, ., getModule, (, ), ;, Preconditions, .]
[., create, (, ), ;, for, (, CompilerInput, input, :, entryPointInputs, ), {, JSModule, module, =, input, ., getModule, (]
[), {, JSModule, module, =, input, ., getModule, (, ), ;, Preconditions, ., checkNotNull, (, module, ), ;, entryPointInputsPerModule, .]
[;, Preconditions, ., checkNotNull, (, module, ), ;, entryPointInputsPerModule, ., put, (, module, ,, input, ), ;, }, for, (]
[., getModule, (, ), ;, Preconditions, ., checkNotNull, (, module, ), ;, entryPointInputsPerModule, ., put, (, module, ,, input, )]
[;, entryPointInputsPerModule, ., put, (, module, ,, input, ), ;, }, for, (, JSModule, module, :, getAllModules, (, ), )]
[., checkNotNull, (, module, ), ;, entryPointInputsPerModule, ., put, (, module, ,, input, ), ;, }, for, (, JSModule, module]
[), ;, entryPointInputsPerModule, ., put, (, module, ,, input, ), ;, }, for, (, JSModule, module, :, getAllModules, (, )]
[;, }, for, (, JSModule, module, :, getAllModules, (, ), ), {, module, ., removeAll, (, ), ;, }, for]
[., put, (, module, ,, input, ), ;, }, for, (, JSModule, module, :, getAllModules, (, ), ), {, module]
[,, input, ), ;, }, for, (, JSModule, module, :, getAllModules, (, ), ), {, module, ., removeAll, (, )]
[), ;, }, for, (, JSModule, module, :, getAllModules, (, ), ), {, module, ., removeAll, (, ), ;, }]
[), {, module, ., removeAll, (, ), ;, }, for, (, JSModule, module, :, entryPointInputsPerModule, ., keySet, (, ), )]
[;, }, for, (, JSModule, module, :, entryPointInputsPerModule, ., keySet, (, ), ), {, List, <, CompilerInput, >, transitiveClosure, =]
[., removeAll, (, ), ;, }, for, (, JSModule, module, :, entryPointInputsPerModule, ., keySet, (, ), ), {, List, <]
[), {, List, <, CompilerInput, >, transitiveClosure, =, sorter, ., getDependenciesOf, (, entryPointInputsPerModule, ., get, (, module, ), ,, depOptions]
[., keySet, (, ), ), {, List, <, CompilerInput, >, transitiveClosure, =, sorter, ., getDependenciesOf, (, entryPointInputsPerModule, ., get, (]
[;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (]
[., getDependenciesOf, (, entryPointInputsPerModule, ., get, (, module, ), ,, depOptions, ., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput]
[,, depOptions, ., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =, input]
[., get, (, module, ), ,, depOptions, ., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput, input, :, transitiveClosure, )]
[), ,, depOptions, ., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =]
[), ;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if]
[., shouldSortDependencies, (, ), ), ;, for, (, CompilerInput, input, :, transitiveClosure, ), {, JSModule, oldModule, =, input, ., getModule]
[), {, JSModule, oldModule, =, input, ., getModule, (, ), ;, if, (, oldModule, ==, null, ), {, input, .]
[;, if, (, oldModule, ==, null, ), {, input, ., setModule, (, module, ), ;, }, else, {, input, .]
[., getModule, (, ), ;, if, (, oldModule, ==, null, ), {, input, ., setModule, (, module, ), ;, }]
[), {, input, ., setModule, (, module, ), ;, }, else, {, input, ., setModule, (, null, ), ;, input]
[==, null, ), {, input, ., setModule, (, module, ), ;, }, else, {, input, ., setModule, (, null, )]
[), {, input, ., setModule, (, module, ), ;, }, else, {, input, ., setModule, (, null, ), ;, input]
[;, }, else, {, input, ., setModule, (, null, ), ;, input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,, module]
[., setModule, (, module, ), ;, }, else, {, input, ., setModule, (, null, ), ;, input, ., setModule, (]
[), ;, }, else, {, input, ., setModule, (, null, ), ;, input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,]
[;, input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,, module, ), ), ;, }, }, }, for, (, CompilerInput, input]
[., setModule, (, null, ), ;, input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,, module, ), ), ;, }, }]
[), ;, input, ., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,, module, ), ), ;, }, }, }, for, (, CompilerInput]
[;, }, }, }, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =, input, ., getModule, (, )]
[., setModule, (, getDeepestCommonDependencyInclusive, (, oldModule, ,, module, ), ), ;, }, }, }, for, (, CompilerInput, input, :, absoluteOrder]
[), ;, }, }, }, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =, input, ., getModule, (]
[,, module, ), ), ;, }, }, }, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =, input]
[), ), ;, }, }, }, for, (, CompilerInput, input, :, absoluteOrder, ), {, JSModule, module, =, input, ., getModule]
[), {, JSModule, module, =, input, ., getModule, (, ), ;, if, (, module, !=, null, ), {, module, .]
[;, if, (, module, !=, null, ), {, module, ., add, (, input, ), ;, }, }, List, <, CompilerInput]
[., getModule, (, ), ;, if, (, module, !=, null, ), {, module, ., add, (, input, ), ;, }]
[), {, module, ., add, (, input, ), ;, }, }, List, <, CompilerInput, >, result, =, Lists, ., newArrayList]
[!=, null, ), {, module, ., add, (, input, ), ;, }, }, List, <, CompilerInput, >, result, =, Lists]
[), {, module, ., add, (, input, ), ;, }, }, List, <, CompilerInput, >, result, =, Lists, ., newArrayList]
[;, }, }, List, <, CompilerInput, >, result, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :]
[., add, (, input, ), ;, }, }, List, <, CompilerInput, >, result, =, Lists, ., newArrayList, (, ), ;]
[), ;, }, }, List, <, CompilerInput, >, result, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module]
[;, for, (, JSModule, module, :, getAllModules, (, ), ), {, result, ., addAll, (, module, ., getInputs, (, )]
[., newArrayList, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {, result, ., addAll, (, module]
[), {, result, ., addAll, (, module, ., getInputs, (, ), ), ;, }, return, result, ;, }, LinkedDirectedGraph, <]
[;, }, return, result, ;, }, LinkedDirectedGraph, <, JSModule, ,, String, >, toGraphvizGraph, (, ), {, LinkedDirectedGraph, <, JSModule, ,]
[., addAll, (, module, ., getInputs, (, ), ), ;, }, return, result, ;, }, LinkedDirectedGraph, <, JSModule, ,, String]
[), ;, }, return, result, ;, }, LinkedDirectedGraph, <, JSModule, ,, String, >, toGraphvizGraph, (, ), {, LinkedDirectedGraph, <, JSModule]
[., getInputs, (, ), ), ;, }, return, result, ;, }, LinkedDirectedGraph, <, JSModule, ,, String, >, toGraphvizGraph, (, )]
[;, }, LinkedDirectedGraph, <, JSModule, ,, String, >, toGraphvizGraph, (, ), {, LinkedDirectedGraph, <, JSModule, ,, String, >, graphViz, =]
[;, for, (, JSModule, module, :, getAllModules, (, ), ), {, graphViz, ., createNode, (, module, ), ;, for, (]
[., create, (, ), ;, for, (, JSModule, module, :, getAllModules, (, ), ), {, graphViz, ., createNode, (, module]
[), {, graphViz, ., createNode, (, module, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), )]
[;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, ), ;]
[., createNode, (, module, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, graphViz, .]
[), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, )]
[), {, graphViz, ., createNode, (, dep, ), ;, graphViz, ., connect, (, module, ,, "->", ,, dep, ), ;]
[., getDependencies, (, ), ), {, graphViz, ., createNode, (, dep, ), ;, graphViz, ., connect, (, module, ,, "->"]
[;, graphViz, ., connect, (, module, ,, "->", ,, dep, ), ;, }, }, return, graphViz, ;, }, private, class]
[., createNode, (, dep, ), ;, graphViz, ., connect, (, module, ,, "->", ,, dep, ), ;, }, }, return]
[), ;, graphViz, ., connect, (, module, ,, "->", ,, dep, ), ;, }, }, return, graphViz, ;, }, private]
[;, }, }, return, graphViz, ;, }, private, class, InverseDepthComparator, implements, Comparator, <, JSModule, >, {, @, Override, public, int]
[., connect, (, module, ,, "->", ,, dep, ), ;, }, }, return, graphViz, ;, }, private, class, InverseDepthComparator, implements]
[,, "->", ,, dep, ), ;, }, }, return, graphViz, ;, }, private, class, InverseDepthComparator, implements, Comparator, <, JSModule, >]
[,, dep, ), ;, }, }, return, graphViz, ;, }, private, class, InverseDepthComparator, implements, Comparator, <, JSModule, >, {, @]
[), ;, }, }, return, graphViz, ;, }, private, class, InverseDepthComparator, implements, Comparator, <, JSModule, >, {, @, Override, public]
[;, }, private, class, InverseDepthComparator, implements, Comparator, <, JSModule, >, {, @, Override, public, int, compare, (, JSModule, m1, ,]
[;, }, }, private, int, depthCompare, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m1, ==, m2, )]
[,, m1, ), ;, }, }, private, int, depthCompare, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m1]
[), ;, }, }, private, int, depthCompare, (, JSModule, m1, ,, JSModule, m2, ), {, if, (, m1, ==, m2]
[), {, return, 0, ;, }, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =, m2, .]
[==, m2, ), {, return, 0, ;, }, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =]
[), {, return, 0, ;, }, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =, m2, .]
[;, }, int, d1, =, m1, ., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;]
[;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :, d2, ==]
[., getDepth, (, ), ;, int, d2, =, m2, ., getDepth, (, ), ;, return, d1, <, d2, ?, -]
[;, return, d1, <, d2, ?, -, 1, :, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo]
[., getDepth, (, ), ;, return, d1, <, d2, ?, -, 1, :, d2, ==, d1, ?, m1, ., getName]
[;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 1, ;, private, final, JSModule]
[?, -, 1, :, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (]
[<, d2, ?, -, 1, :, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, .]
[?, -, 1, :, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (]
[:, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :]
[:, d2, ==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :]
[;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 1, ;, private, final, JSModule]
[?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :, 1, ;, }, protected]
[==, d1, ?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :, 1, ;]
[?, m1, ., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :, 1, ;, }, protected]
[:, 1, ;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 1, ;, private]
[., compareTo, (, m2, ., getName, (, ), ), :, 1, ;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {]
[., getName, (, ), ., compareTo, (, m2, ., getName, (, ), ), :, 1, ;, }, protected, static, class]
[), :, 1, ;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 1, ;]
[., getName, (, ), ), :, 1, ;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {, private, static, final, long]
[;, }, protected, static, class, ModuleDependenceException, extends, IllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 1, ;, private, final, JSModule]
[;, private, final, JSModule, module, ;, private, final, JSModule, dependentModule, ;, protected, ModuleDependenceException, (, String, message, ,, JSModule, module, ,]
[), ;, this, ., module, =, module, ;, this, ., dependentModule, =, dependentModule, ;, }, public, JSModule, getModule, (, )]
[=, module, ;, this, ., dependentModule, =, dependentModule, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }]
[., module, =, module, ;, this, ., dependentModule, =, dependentModule, ;, }, public, JSModule, getModule, (, ), {, return, module]
[;, this, ., dependentModule, =, dependentModule, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, JSModule]
[=, dependentModule, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, JSModule, getDependentModule, (, ), {]
[., dependentModule, =, dependentModule, ;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, JSModule, getDependentModule, (]
[;, }, public, JSModule, getModule, (, ), {, return, module, ;, }, public, JSModule, getDependentModule, (, ), {, return, dependentModule]
[;, }, public, JSModule, getDependentModule, (, ), {, return, dependentModule, ;, }, }, }]
[;, }, }, }]
