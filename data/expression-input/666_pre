[BaseMultivariateVectorMultiStartOptimizer, (, final, BaseMultivariateVectorOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (]
[BaseMultivariateVectorMultiStartOptimizer, (, final, BaseMultivariateVectorOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (]
[BaseMultivariateVectorMultiStartOptimizer, (, final, BaseMultivariateVectorOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (]
[final, BaseMultivariateVectorOptimizer, <, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (, optimizer, ==]
[<, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (, optimizer, ==, null, ||]
[<, FUNC, >, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (, optimizer, ==, null, ||]
[>, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (, optimizer, ==, null, ||, generator, ==]
[int, starts, ,, final, RandomVectorGenerator, generator, ), {, if, (, optimizer, ==, null, ||, generator, ==, null, ), {, throw]
[if, (, optimizer, ==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, optimizer, ==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[optimizer, ==, null, ||, generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <]
[generator, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (]
[NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }]
[NullArgumentException, (, ), ;, }, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }]
[}, if, (, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =]
[(, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;]
[(, starts, <, 1, ), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;]
[), {, throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =]
[throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;]
[throw, new, NotStrictlyPositiveException, (, starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;]
[starts, ), ;, }, this, ., optimizer, =, optimizer, ;, this, ., starts, =, starts, ;, this, ., generator, =]
[=, starts, ;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (]
[=, starts, ;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (]
[;, this, ., generator, =, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==]
[=, generator, ;, }, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw]
[}, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (]
[}, public, PointVectorValuePair, [, ], getOptima, (, ), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (]
[), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return]
[), {, if, (, optima, ==, null, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return]
[., NO_OPTIMUM_COMPUTED_YET, ), ;, }, return, optima, ., clone, (, ), ;, }, public, int, getMaxEvaluations, (, ), {, return]
[), ;, }, public, int, getMaxEvaluations, (, ), {, return, maxEvaluations, ;, }, public, int, getEvaluations, (, ), {, return]
[public, int, getEvaluations, (, ), {, return, totalEvaluations, ;, }, public, ConvergenceChecker, <, PointVectorValuePair, >, getConvergenceChecker, (, ), {, return]
[public, int, getEvaluations, (, ), {, return, totalEvaluations, ;, }, public, ConvergenceChecker, <, PointVectorValuePair, >, getConvergenceChecker, (, ), {, return]
[final, FUNC, f, ,, double, [, ], target, ,, double, [, ], weights, ,, double, [, ], startPoint, ), {]
[f, ,, double, [, ], target, ,, double, [, ], weights, ,, double, [, ], startPoint, ), {, maxEvaluations, =]
[target, ,, double, [, ], weights, ,, double, [, ], startPoint, ), {, maxEvaluations, =, maxEval, ;, RuntimeException, lastException, =]
[double, [, ], weights, ,, double, [, ], startPoint, ), {, maxEvaluations, =, maxEval, ;, RuntimeException, lastException, =, null, ;]
[], weights, ,, double, [, ], startPoint, ), {, maxEvaluations, =, maxEval, ;, RuntimeException, lastException, =, null, ;, optima, =]
[double, [, ], startPoint, ), {, maxEvaluations, =, maxEval, ;, RuntimeException, lastException, =, null, ;, optima, =, new, PointVectorValuePair, []
[startPoint, ), {, maxEvaluations, =, maxEval, ;, RuntimeException, lastException, =, null, ;, optima, =, new, PointVectorValuePair, [, starts, ], ;]
[{, maxEvaluations, =, maxEval, ;, RuntimeException, lastException, =, null, ;, optima, =, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =]
[=, null, ;, optima, =, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =]
[;, optima, =, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;]
[;, optima, =, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;]
[=, new, PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[PointVectorValuePair, [, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;]
[[, starts, ], ;, totalEvaluations, =, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {]
[;, for, (, int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, optima, []
[int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, optima, [, i, ], =]
[int, i, =, 0, ;, i, <, starts, ;, ++, i, ), {, try, {, optima, [, i, ], =]
[;, i, <, starts, ;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (]
[;, i, <, starts, ;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (]
[<, starts, ;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -]
[;, ++, i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,]
[i, ), {, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,]
[{, try, {, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,]
[{, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,]
[{, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,]
[{, optima, [, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,]
[[, i, ], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==]
[], =, optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==, 0, ?]
[optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==, 0, ?, startPoint, :]
[optimizer, ., optimize, (, maxEval, -, totalEvaluations, ,, f, ,, target, ,, weights, ,, i, ==, 0, ?, startPoint, :]
[i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {]
[i, ==, 0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {]
[0, ?, startPoint, :, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {, optima, []
[:, generator, ., nextVector, (, ), ), ;, }, catch, (, ConvergenceException, oe, ), {, optima, [, i, ], =]
[catch, (, ConvergenceException, oe, ), {, optima, [, i, ], =, null, ;, }, catch, (, RuntimeException, mue, ), {]
[ConvergenceException, oe, ), {, optima, [, i, ], =, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =]
[), {, optima, [, i, ], =, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;]
[), {, optima, [, i, ], =, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;]
[optima, [, i, ], =, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, []
[], =, null, ;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =]
[;, }, catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }]
[catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=]
[catch, (, RuntimeException, mue, ), {, lastException, =, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=]
[=, mue, ;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }]
[;, optima, [, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (]
[[, i, ], =, null, ;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,]
[;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (]
[;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (]
[;, }, totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (]
[totalEvaluations, +=, optimizer, ., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (, optima, []
[., getEvaluations, (, ), ;, }, sortPairs, (, target, ,, weights, ), ;, if, (, optima, [, 0, ], ==]
[;, }, sortPairs, (, target, ,, weights, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw]
[target, ,, weights, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return]
[target, ,, weights, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return]
[weights, ), ;, if, (, optima, [, 0, ], ==, null, ), {, throw, lastException, ;, }, return, optima, []
[], ;, }, private, void, sortPairs, (, final, double, [, ], target, ,, final, double, [, ], weights, ), {]
[], ;, }, private, void, sortPairs, (, final, double, [, ], target, ,, final, double, [, ], weights, ), {]
[void, sortPairs, (, final, double, [, ], target, ,, final, double, [, ], weights, ), {, Arrays, ., sort, (]
[(, final, double, [, ], target, ,, final, double, [, ], weights, ), {, Arrays, ., sort, (, optima, ,]
[PointVectorValuePair, >, (, ), {, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (]
[PointVectorValuePair, >, (, ), {, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (]
[(, ), {, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==]
[int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return]
[int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return]
[compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (]
[compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (]
[final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==]
[,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?]
[PointVectorValuePair, o2, ), {, if, (, o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :]
[o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (]
[o1, ==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (]
[null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==]
[(, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return]
[o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -]
[?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return]
[?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (]
[else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (]
[o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,]
[null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (]
[o2, ), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, double, [, ], value, =]
[o2, ), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, double, [, ], value, =]
[final, PointVectorValuePair, pv, ), {, final, double, [, ], value, =, pv, ., getValueRef, (, ), ;, double, sum, =]
[[, ], value, =, pv, ., getValueRef, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[value, =, pv, ., getValueRef, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[value, =, pv, ., getValueRef, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[pv, ., getValueRef, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[pv, ., getValueRef, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, value, ., length, ;]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, value, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, ri, =]
[(, int, i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, ri, =]
[(, int, i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, ri, =]
[i, =, 0, ;, i, <, value, ., length, ;, ++, i, ), {, final, double, ri, =, value, []
[;, i, <, value, ., length, ;, ++, i, ), {, final, double, ri, =, value, [, i, ], -]
[;, i, <, value, ., length, ;, ++, i, ), {, final, double, ri, =, value, [, i, ], -]
[<, value, ., length, ;, ++, i, ), {, final, double, ri, =, value, [, i, ], -, target, []
[length, ;, ++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;]
[++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=]
[++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=]
[++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=]
[++, i, ), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=]
[), {, final, double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=, weights, []
[double, ri, =, value, [, i, ], -, target, [, i, ], ;, sum, +=, weights, [, i, ], *]
[=, value, [, i, ], -, target, [, i, ], ;, sum, +=, weights, [, i, ], *, ri, *]
[], -, target, [, i, ], ;, sum, +=, weights, [, i, ], *, ri, *, ri, ;, }, return]
