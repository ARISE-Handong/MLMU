[;, private, DfpMath, (, ), {, }, protected, static, Dfp, [, ], split, (, final, DfpField, field, ,, final, String]
[;, char, [, ], buf, ;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =, 0]
[], ;, char, [, ], buf, ;, boolean, leading, =, true, ;, int, sp, =, 0, ;, int, sig, =]
[;, int, sp, =, 0, ;, int, sig, =, 0, ;, buf, =, new, char, [, a, ., length, (]
[;, int, sig, =, 0, ;, buf, =, new, char, [, a, ., length, (, ), ], ;, for, (]
[;, buf, =, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, char, [, a, ., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf]
[., length, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[<, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, )]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if]
[), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ]]
[++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i]
[=, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, []
[;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =]
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=]
[), ;, if, (, buf, [, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[&&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ]]
[>=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, []
[[, i, ], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if]
[], >=, '1', &&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf]
[&&, buf, [, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ]]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[<=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig]
[[, i, ], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.']
[], <=, '9', ), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {]
[), {, leading, =, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (]
[=, false, ;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig]
[;, }, if, (, buf, [, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %]
[), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig]
[==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if]
[[, i, ], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false]
[], ==, '.', ), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }]
[), {, sig, +=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig]
[+=, (, 400, -, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, field]
[;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *]
[%, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2]
[), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /]
[-, sig, ), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (]
[), %, 4, ;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /]
[;, leading, =, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *]
[=, false, ;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *, 4, )]
[;, }, if, (, sig, ==, (, field, ., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp]
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[==, (, field, ., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;]
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[*, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&]
[), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0']
[/, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ]]
[., getRadixDigits, (, ), /, 2, ), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (]
[), *, 4, ), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0']
[), {, sp, =, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, []
[=, i, ;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[;, break, ;, }, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&]
[), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (, buf]
[&&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new]
[&&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0]
[>=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result]
[[, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;]
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }]
[&&, buf, [, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0]
[&&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new]
[<=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp]
[[, i, ], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =]
[], <=, '9', &&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, field, .]
[&&, !, leading, ), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new]
[), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (, buf]
[), {, sig, ++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (, buf]
[;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (, buf, ,, 0, ,, sp]
[++, ;, }, }, result, [, 0, ], =, field, ., newDfp, (, new, String, (, buf, ,, 0, ,]
[=, field, ., newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i]
[[, 0, ], =, field, ., newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for]
[], =, field, ., newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf, []
[., newDfp, (, new, String, (, buf, ,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0]
[), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {, buf]
[,, 0, ,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;]
[,, sp, ), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++]
[), ), ;, for, (, int, i, =, 0, ;, i, <, buf, ., length, ;, i, ++, ), {]
[;, i, <, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[<, buf, ., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, )]
[;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf]
[., length, ;, i, ++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if]
[), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ]]
[++, ), {, buf, [, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i]
[=, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i]
[[, i, ], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&]
[], =, a, ., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, []
[;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp]
[., charAt, (, i, ), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=]
[), ;, if, (, buf, [, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <]
[), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (]
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[&&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;]
[>=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =]
[[, i, ], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, []
[], >=, '0', &&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ]]
[&&, buf, [, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;]
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[<=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1]
[[, i, ], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }]
[], <=, '9', &&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, []
[&&, i, <, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =]
[), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (]
[<, sp, ), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, field, .]
[), {, buf, [, i, ], =, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (]
[=, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (, new, String, (, buf, ), )]
[[, i, ], =, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (, new, String, (]
[], =, '0', ;, }, }, result, [, 1, ], =, field, ., newDfp, (, new, String, (, buf, )]
[;, }, }, result, [, 1, ], =, field, ., newDfp, (, new, String, (, buf, ), ), ;, return]
[=, field, ., newDfp, (, new, String, (, buf, ), ), ;, return, result, ;, }, protected, static, Dfp, []
[[, 1, ], =, field, ., newDfp, (, new, String, (, buf, ), ), ;, return, result, ;, }, protected]
[], =, field, ., newDfp, (, new, String, (, buf, ), ), ;, return, result, ;, }, protected, static, Dfp]
[;, return, result, ;, }, protected, static, Dfp, [, ], split, (, final, Dfp, a, ), {, final, Dfp, []
[., newDfp, (, new, String, (, buf, ), ), ;, return, result, ;, }, protected, static, Dfp, [, ], split]
[), ;, return, result, ;, }, protected, static, Dfp, [, ], split, (, final, Dfp, a, ), {, final, Dfp]
[), ), ;, return, result, ;, }, protected, static, Dfp, [, ], split, (, final, Dfp, a, ), {, final]
[;, }, protected, static, Dfp, [, ], split, (, final, Dfp, a, ), {, final, Dfp, [, ], result, =]
[;, final, Dfp, shift, =, a, ., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2]
[], ;, final, Dfp, shift, =, a, ., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /]
[;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result, []
[., multiply, (, a, ., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;, result, [, 0]
[), ;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result]
[., power10K, (, a, ., getRadixDigits, (, ), /, 2, ), ), ;, result, [, 0, ], =, a, .]
[), ), ;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;]
[/, 2, ), ), ;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift]
[., getRadixDigits, (, ), /, 2, ), ), ;, result, [, 0, ], =, a, ., add, (, shift, )]
[), ), ;, result, [, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;]
[=, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =, a, .]
[[, 0, ], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ]]
[], =, a, ., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =, a]
[;, result, [, 1, ], =, a, ., subtract, (, result, [, 0, ], ), ;, return, result, ;, }]
[., subtract, (, shift, ), ;, result, [, 1, ], =, a, ., subtract, (, result, [, 0, ], )]
[., add, (, shift, ), ., subtract, (, shift, ), ;, result, [, 1, ], =, a, ., subtract, (]
[), ., subtract, (, shift, ), ;, result, [, 1, ], =, a, ., subtract, (, result, [, 0, ]]
[), ;, result, [, 1, ], =, a, ., subtract, (, result, [, 0, ], ), ;, return, result, ;]
[=, a, ., subtract, (, result, [, 0, ], ), ;, return, result, ;, }, protected, static, Dfp, [, ]]
[[, 1, ], =, a, ., subtract, (, result, [, 0, ], ), ;, return, result, ;, }, protected, static]
[], =, a, ., subtract, (, result, [, 0, ], ), ;, return, result, ;, }, protected, static, Dfp, []
[;, return, result, ;, }, protected, static, Dfp, [, ], splitMult, (, final, Dfp, [, ], a, ,, final, Dfp]
[., subtract, (, result, [, 0, ], ), ;, return, result, ;, }, protected, static, Dfp, [, ], splitMult, (]
[), ;, return, result, ;, }, protected, static, Dfp, [, ], splitMult, (, final, Dfp, [, ], a, ,, final]
[[, 0, ], ), ;, return, result, ;, }, protected, static, Dfp, [, ], splitMult, (, final, Dfp, [, ]]
[], ), ;, return, result, ;, }, protected, static, Dfp, [, ], splitMult, (, final, Dfp, [, ], a, ,]
[;, }, protected, static, Dfp, [, ], splitMult, (, final, Dfp, [, ], a, ,, final, Dfp, [, ], b]
[;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =]
[], ;, result, [, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ]]
[=, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ], .]
[[, 1, ], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =, a, []
[], =, a, [, 0, ], ., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ]]
[;, result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if]
[., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0]
[[, 0, ], ., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ], ., multiply, (]
[], ., getZero, (, ), ;, result, [, 0, ], =, a, [, 0, ], ., multiply, (, b, []
[=, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (, result, [, 0, ]]
[[, 0, ], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (, result]
[], =, a, [, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (, result, [, 0]
[;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ]]
[., multiply, (, b, [, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==]
[[, 0, ], ., multiply, (, b, [, 0, ], ), ;, if, (, result, [, 0, ], ., classify]
[], ., multiply, (, b, [, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, )]
[), ;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0]
[[, 0, ], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||]
[], ), ;, if, (, result, [, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, []
[), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (, b, []
[||, result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result]
[==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return]
[., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1, ]]
[[, 0, ], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (, result]
[], ., classify, (, ), ==, Dfp, ., INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1]
[||, result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result]
[., INFINITE, ||, result, [, 0, ], ., equals, (, result, [, 1, ], ), ), {, return, result, ;]
[), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (, b, []
[., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =, a]
[[, 0, ], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1]
[], ., equals, (, result, [, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =]
[), ), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (, b]
[[, 1, ], ), ), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], .]
[], ), ), {, return, result, ;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (]
[;, }, result, [, 1, ], =, a, [, 0, ], ., multiply, (, b, [, 1, ], ), .]
[=, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ]]
[[, 1, ], =, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a]
[], =, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1]
[;, return, result, ;, }, protected, static, Dfp, [, ], splitDiv, (, final, Dfp, [, ], a, ,, final, Dfp]
[., add, (, a, [, 1, ], ., multiply, (, b, [, 1, ], ), ), ;, return, result, ;]
[., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (, a]
[., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (, b, []
[[, 0, ], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply]
[], ., multiply, (, b, [, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (, b]
[), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (]
[[, 1, ], ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), )]
[], ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add]
[), ., add, (, a, [, 1, ], ., multiply, (, b, [, 1, ], ), ), ;, return, result]
[., multiply, (, b, [, 0, ], ), ), ., add, (, a, [, 1, ], ., multiply, (, b]
[[, 1, ], ., multiply, (, b, [, 0, ], ), ), ., add, (, a, [, 1, ], .]
[], ., multiply, (, b, [, 0, ], ), ), ., add, (, a, [, 1, ], ., multiply, (]
[), ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 1, ], ), ), ;, return]
[[, 0, ], ), ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 1, ], )]
[], ), ), ., add, (, a, [, 1, ], ., multiply, (, b, [, 1, ], ), ), ;]
[), ;, return, result, ;, }, protected, static, Dfp, [, ], splitDiv, (, final, Dfp, [, ], a, ,, final]
[., multiply, (, b, [, 1, ], ), ), ;, return, result, ;, }, protected, static, Dfp, [, ], splitDiv]
[[, 1, ], ., multiply, (, b, [, 1, ], ), ), ;, return, result, ;, }, protected, static, Dfp]
[], ., multiply, (, b, [, 1, ], ), ), ;, return, result, ;, }, protected, static, Dfp, [, ]]
[), ), ;, return, result, ;, }, protected, static, Dfp, [, ], splitDiv, (, final, Dfp, [, ], a, ,]
[[, 1, ], ), ), ;, return, result, ;, }, protected, static, Dfp, [, ], splitDiv, (, final, Dfp, []
[], ), ), ;, return, result, ;, }, protected, static, Dfp, [, ], splitDiv, (, final, Dfp, [, ], a]
[;, }, protected, static, Dfp, [, ], splitDiv, (, final, Dfp, [, ], a, ,, final, Dfp, [, ], b]
[=, new, Dfp, [, 2, ], ;, result, [, 0, ], =, a, [, 0, ], ., divide, (, b]
[;, result, [, 0, ], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result]
[], ;, result, [, 0, ], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;]
[=, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =, a]
[[, 0, ], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1]
[], =, a, [, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =]
[;, result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract]
[., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =, a, [, 1, ], ., multiply]
[[, 0, ], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =, a, [, 1]
[], ., divide, (, b, [, 0, ], ), ;, result, [, 1, ], =, a, [, 1, ], .]
[), ;, result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), .]
[[, 0, ], ), ;, result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0]
[], ), ;, result, [, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], )]
[=, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ]]
[[, 1, ], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a]
[], =, a, [, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0]
[;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (]
[., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, [, 1]
[., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (, b, []
[[, 1, ], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply]
[], ., multiply, (, b, [, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (, b]
[), ., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, []
[[, 0, ], ), ., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), )]
[], ), ., subtract, (, a, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result]
[), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply]
[., multiply, (, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ], .]
[[, 0, ], ., multiply, (, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, []
[], ., multiply, (, b, [, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ]]
[), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ], .]
[[, 1, ], ), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, []
[], ), ), ;, result, [, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ]]
[=, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], )]
[[, 1, ], =, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, []
[], =, result, [, 1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ]]
[;, return, result, ;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ], base, ,, int, a, ), {]
[., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b, []
[[, 1, ], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add]
[], ., divide, (, b, [, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b]
[), ;, return, result, ;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ], base, ,, int, a, )]
[., add, (, b, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ), ;, return, result]
[., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (, b, []
[[, 0, ], ., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply]
[], ., multiply, (, b, [, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (, b]
[), ., add, (, b, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ), ;, return]
[[, 0, ], ), ., add, (, b, [, 0, ], ., multiply, (, b, [, 1, ], ), )]
[], ), ., add, (, b, [, 0, ], ., multiply, (, b, [, 1, ], ), ), ), ;]
[), ), ;, return, result, ;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ], base, ,, int, a]
[., multiply, (, b, [, 1, ], ), ), ), ;, return, result, ;, }, protected, static, Dfp, splitPow, (]
[[, 0, ], ., multiply, (, b, [, 1, ], ), ), ), ;, return, result, ;, }, protected, static]
[], ., multiply, (, b, [, 1, ], ), ), ), ;, return, result, ;, }, protected, static, Dfp, splitPow]
[), ), ), ;, return, result, ;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ], base, ,, int]
[[, 1, ], ), ), ), ;, return, result, ;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ]]
[], ), ), ), ;, return, result, ;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ], base, ,]
[;, }, protected, static, Dfp, splitPow, (, final, Dfp, [, ], base, ,, int, a, ), {, boolean, invert, =]
[;, Dfp, [, ], r, =, new, Dfp, [, 2, ], ;, Dfp, [, ], result, =, new, Dfp, []
[;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =, base, [, 0]
[], ;, Dfp, [, ], result, =, new, Dfp, [, 2, ], ;, result, [, 0, ], =, base, []
[;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =]
[], ;, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ]]
[=, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =, base, [, 0, ], .]
[[, 0, ], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =, base, []
[], =, base, [, 0, ], ., getOne, (, ), ;, result, [, 1, ], =, base, [, 0, ]]
[;, result, [, 1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0]
[., getOne, (, ), ;, result, [, 1, ], =, base, [, 0, ], ., getZero, (, ), ;, if]
[[, 0, ], ., getOne, (, ), ;, result, [, 1, ], =, base, [, 0, ], ., getZero, (]
[], ., getOne, (, ), ;, result, [, 1, ], =, base, [, 0, ], ., getZero, (, ), ;]
[=, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result, []
[[, 1, ], =, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {]
[], =, base, [, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result]
[;, if, (, a, ==, 0, ), {, return, result, [, 0, ], ., add, (, result, [, 1, ]]
[., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result, [, 0, ], ., add, (]
[[, 0, ], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result, [, 0, ]]
[], ., getZero, (, ), ;, if, (, a, ==, 0, ), {, return, result, [, 0, ], ., add]
[), {, return, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, }, if, (, a]
[==, 0, ), {, return, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, }, if]
[), {, return, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, }, if, (, a]
[;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do]
[., add, (, result, [, 1, ], ), ;, }, if, (, a, <, 0, ), {, invert, =, true]
[[, 0, ], ., add, (, result, [, 1, ], ), ;, }, if, (, a, <, 0, ), {]
[], ., add, (, result, [, 1, ], ), ;, }, if, (, a, <, 0, ), {, invert, =]
[), ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }]
[[, 1, ], ), ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -]
[], ), ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;]
[), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ], =, new]
[<, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ]]
[), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ], =, new]
[=, true, ;, a, =, -, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (, base]
[;, a, =, -, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, [, 0]
[=, -, a, ;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, [, 0, ], )]
[;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, [, 0, ], ), ;, r, []
[;, }, do, {, r, [, 0, ], =, new, Dfp, (, base, [, 0, ], ), ;, r, []
[=, new, Dfp, (, base, [, 0, ], ), ;, r, [, 1, ], =, new, Dfp, (, base, []
[[, 0, ], =, new, Dfp, (, base, [, 0, ], ), ;, r, [, 1, ], =, new, Dfp]
[], =, new, Dfp, (, base, [, 0, ], ), ;, r, [, 1, ], =, new, Dfp, (, base]
[;, r, [, 1, ], =, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =, 1, ;]
[), ;, r, [, 1, ], =, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =, 1]
[[, 0, ], ), ;, r, [, 1, ], =, new, Dfp, (, base, [, 1, ], ), ;, int]
[], ), ;, r, [, 1, ], =, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =]
[=, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (]
[[, 1, ], =, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =, 1, ;, int, prevtrial]
[], =, new, Dfp, (, base, [, 1, ], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while]
[;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =]
[), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial]
[[, 1, ], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =]
[], ), ;, int, trial, =, 1, ;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;]
[;, int, prevtrial, ;, while, (, true, ), {, prevtrial, =, trial, ;, trial, =, trial, *, 2, ;, if]
[), {, prevtrial, =, trial, ;, trial, =, trial, *, 2, ;, if, (, trial, >, a, ), {, break]
[=, trial, ;, trial, =, trial, *, 2, ;, if, (, trial, >, a, ), {, break, ;, }, r]
[;, trial, =, trial, *, 2, ;, if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult]
[=, trial, *, 2, ;, if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult, (, r]
[;, if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;]
[*, 2, ;, if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult, (, r, ,, r]
[;, if, (, trial, >, a, ), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;]
[), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;, a]
[>, a, ), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial]
[), {, break, ;, }, r, =, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;, a]
[=, splitMult, (, r, ,, r, ), ;, }, trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult]
[;, }, trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }]
[,, r, ), ;, }, trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r]
[), ;, }, trial, =, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;]
[=, prevtrial, ;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a]
[;, a, -=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1]
[-=, trial, ;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;]
[;, result, =, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, []
[=, splitMult, (, result, ,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, [, 0, ]]
[;, }, while, (, a, >=, 1, ), ;, result, [, 0, ], =, result, [, 0, ], ., add]
[,, r, ), ;, }, while, (, a, >=, 1, ), ;, result, [, 0, ], =, result, [, 0]
[), ;, }, while, (, a, >=, 1, ), ;, result, [, 0, ], =, result, [, 0, ], .]
[), ;, result, [, 0, ], =, result, [, 0, ], ., add, (, result, [, 1, ], ), ;]
[>=, 1, ), ;, result, [, 0, ], =, result, [, 0, ], ., add, (, result, [, 1, ]]
[), ;, result, [, 0, ], =, result, [, 0, ], ., add, (, result, [, 1, ], ), ;]
[=, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result]
[[, 0, ], =, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, if, (, invert]
[], =, result, [, 0, ], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {]
[;, if, (, invert, ), {, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), .]
[., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =, base]
[[, 0, ], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0]
[], ., add, (, result, [, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =]
[), ;, if, (, invert, ), {, result, [, 0, ], =, base, [, 0, ], ., getOne, (, )]
[[, 1, ], ), ;, if, (, invert, ), {, result, [, 0, ], =, base, [, 0, ], .]
[], ), ;, if, (, invert, ), {, result, [, 0, ], =, base, [, 0, ], ., getOne, (]
[), {, result, [, 0, ], =, base, [, 0, ], ., getOne, (, ), ., divide, (, result, []
[=, base, [, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }, return]
[[, 0, ], =, base, [, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], )]
[], =, base, [, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }]
[;, }, return, result, [, 0, ], ;, }, public, static, Dfp, pow, (, Dfp, base, ,, int, a, )]
[., divide, (, result, [, 0, ], ), ;, }, return, result, [, 0, ], ;, }, public, static, Dfp]
[., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }, return, result, [, 0, ], ;]
[[, 0, ], ., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }, return, result, []
[], ., getOne, (, ), ., divide, (, result, [, 0, ], ), ;, }, return, result, [, 0, ]]
[), ;, }, return, result, [, 0, ], ;, }, public, static, Dfp, pow, (, Dfp, base, ,, int, a]
[[, 0, ], ), ;, }, return, result, [, 0, ], ;, }, public, static, Dfp, pow, (, Dfp, base]
[], ), ;, }, return, result, [, 0, ], ;, }, public, static, Dfp, pow, (, Dfp, base, ,, int]
[;, }, public, static, Dfp, pow, (, Dfp, base, ,, int, a, ), {, boolean, invert, =, false, ;, Dfp]
[[, 0, ], ;, }, public, static, Dfp, pow, (, Dfp, base, ,, int, a, ), {, boolean, invert, =]
[], ;, }, public, static, Dfp, pow, (, Dfp, base, ,, int, a, ), {, boolean, invert, =, false, ;]
[;, Dfp, result, =, base, ., getOne, (, ), ;, if, (, a, ==, 0, ), {, return, result, ;]
[;, if, (, a, ==, 0, ), {, return, result, ;, }, if, (, a, <, 0, ), {, invert]
[., getOne, (, ), ;, if, (, a, ==, 0, ), {, return, result, ;, }, if, (, a, <]
[), {, return, result, ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -]
[==, 0, ), {, return, result, ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a]
[), {, return, result, ;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -]
[;, }, if, (, a, <, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do]
[), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, Dfp, r, =, new, Dfp, (]
[<, 0, ), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, Dfp, r, =, new]
[), {, invert, =, true, ;, a, =, -, a, ;, }, do, {, Dfp, r, =, new, Dfp, (]
[=, true, ;, a, =, -, a, ;, }, do, {, Dfp, r, =, new, Dfp, (, base, ), ;]
[;, a, =, -, a, ;, }, do, {, Dfp, r, =, new, Dfp, (, base, ), ;, Dfp, prevr]
[=, -, a, ;, }, do, {, Dfp, r, =, new, Dfp, (, base, ), ;, Dfp, prevr, ;, int]
[;, }, do, {, Dfp, r, =, new, Dfp, (, base, ), ;, Dfp, prevr, ;, int, trial, =, 1]
[;, }, do, {, Dfp, r, =, new, Dfp, (, base, ), ;, Dfp, prevr, ;, int, trial, =, 1]
[;, Dfp, prevr, ;, int, trial, =, 1, ;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (, r]
[), ;, Dfp, prevr, ;, int, trial, =, 1, ;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (]
[;, int, prevtrial, ;, do, {, prevr, =, new, Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =]
[=, new, Dfp, (, r, ), ;, prevtrial, =, trial, ;, r, =, r, ., multiply, (, r, ), ;]
[;, prevtrial, =, trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2, ;]
[), ;, prevtrial, =, trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2]
[=, trial, ;, r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while]
[;, r, =, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while, (, a]
[=, r, ., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while, (, a, >, trial]
[;, trial, =, trial, *, 2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial]
[., multiply, (, r, ), ;, trial, =, trial, *, 2, ;, }, while, (, a, >, trial, ), ;]
[), ;, trial, =, trial, *, 2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;]
[=, trial, *, 2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial]
[;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a]
[*, 2, ;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a]
[;, }, while, (, a, >, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a]
[), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =, result, .]
[>, trial, ), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =]
[), ;, r, =, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =, result, .]
[=, prevr, ;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =, result, ., multiply, (, r]
[;, trial, =, prevtrial, ;, a, =, a, -, trial, ;, result, =, result, ., multiply, (, r, ), ;]
[=, prevtrial, ;, a, =, a, -, trial, ;, result, =, result, ., multiply, (, r, ), ;, }, while]
[;, a, =, a, -, trial, ;, result, =, result, ., multiply, (, r, ), ;, }, while, (, a]
[=, a, -, trial, ;, result, =, result, ., multiply, (, r, ), ;, }, while, (, a, >=, 1]
[;, result, =, result, ., multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (]
[-, trial, ;, result, =, result, ., multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;]
[;, result, =, result, ., multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (]
[=, result, ., multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (, invert, )]
[;, }, while, (, a, >=, 1, ), ;, if, (, invert, ), {, result, =, base, ., getOne, (]
[., multiply, (, r, ), ;, }, while, (, a, >=, 1, ), ;, if, (, invert, ), {, result]
[), ;, }, while, (, a, >=, 1, ), ;, if, (, invert, ), {, result, =, base, ., getOne]
[), ;, if, (, invert, ), {, result, =, base, ., getOne, (, ), ., divide, (, result, ), ;]
[>=, 1, ), ;, if, (, invert, ), {, result, =, base, ., getOne, (, ), ., divide, (, result]
[), ;, if, (, invert, ), {, result, =, base, ., getOne, (, ), ., divide, (, result, ), ;]
[), {, result, =, base, ., getOne, (, ), ., divide, (, result, ), ;, }, return, base, ., newInstance]
[=, base, ., getOne, (, ), ., divide, (, result, ), ;, }, return, base, ., newInstance, (, result, )]
[;, }, return, base, ., newInstance, (, result, ), ;, }, public, static, Dfp, exp, (, final, Dfp, a, )]
[., divide, (, result, ), ;, }, return, base, ., newInstance, (, result, ), ;, }, public, static, Dfp, exp]
[., getOne, (, ), ., divide, (, result, ), ;, }, return, base, ., newInstance, (, result, ), ;, }]
[), ;, }, return, base, ., newInstance, (, result, ), ;, }, public, static, Dfp, exp, (, final, Dfp, a]
[;, }, public, static, Dfp, exp, (, final, Dfp, a, ), {, final, Dfp, inta, =, a, ., rint, (]
[., newInstance, (, result, ), ;, }, public, static, Dfp, exp, (, final, Dfp, a, ), {, final, Dfp, inta]
[), ;, }, public, static, Dfp, exp, (, final, Dfp, a, ), {, final, Dfp, inta, =, a, ., rint]
[;, final, Dfp, fraca, =, a, ., subtract, (, inta, ), ;, final, int, ia, =, inta, ., intValue, (]
[., rint, (, ), ;, final, Dfp, fraca, =, a, ., subtract, (, inta, ), ;, final, int, ia, =]
[;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (, ia, >, 2147483646, ), {, return, a]
[., subtract, (, inta, ), ;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (, ia, >]
[), ;, final, int, ia, =, inta, ., intValue, (, ), ;, if, (, ia, >, 2147483646, ), {, return]
[;, if, (, ia, >, 2147483646, ), {, return, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, .]
[., intValue, (, ), ;, if, (, ia, >, 2147483646, ), {, return, a, ., newInstance, (, (, byte, )]
[), {, return, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (]
[>, 2147483646, ), {, return, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }]
[), {, return, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (]
[;, }, if, (, ia, <, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;, }, final, Dfp]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ;, }, if, (, ia, <, -, 2147483646]
[,, Dfp, ., INFINITE, ), ;, }, if, (, ia, <, -, 2147483646, ), {, return, a, ., newInstance, (]
[,, Dfp, ., INFINITE, ), ;, }, if, (, ia, <, -, 2147483646, ), {, return, a, ., newInstance, (]
[), ;, }, if, (, ia, <, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;, }, final]
[., INFINITE, ), ;, }, if, (, ia, <, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;]
[), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (, a, ., getField, (]
[<, -, 2147483646, ), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (, a]
[), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (, a, ., getField, (]
[), {, return, a, ., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (, a, ., getField, (]
[;, }, final, Dfp, einta, =, splitPow, (, a, ., getField, (, ), ., getESplit, (, ), ,, ia, )]
[., newInstance, (, ), ;, }, final, Dfp, einta, =, splitPow, (, a, ., getField, (, ), ., getESplit, (]
[;, final, Dfp, efraca, =, expInternal, (, fraca, ), ;, return, einta, ., multiply, (, efraca, ), ;, }, protected]
[,, ia, ), ;, final, Dfp, efraca, =, expInternal, (, fraca, ), ;, return, einta, ., multiply, (, efraca, )]
[., getESplit, (, ), ,, ia, ), ;, final, Dfp, efraca, =, expInternal, (, fraca, ), ;, return, einta, .]
[., getField, (, ), ., getESplit, (, ), ,, ia, ), ;, final, Dfp, efraca, =, expInternal, (, fraca, )]
[), ;, final, Dfp, efraca, =, expInternal, (, fraca, ), ;, return, einta, ., multiply, (, efraca, ), ;, }]
[;, return, einta, ., multiply, (, efraca, ), ;, }, protected, static, Dfp, expInternal, (, final, Dfp, a, ), {]
[), ;, return, einta, ., multiply, (, efraca, ), ;, }, protected, static, Dfp, expInternal, (, final, Dfp, a, )]
[;, }, protected, static, Dfp, expInternal, (, final, Dfp, a, ), {, Dfp, y, =, a, ., getOne, (, )]
[., multiply, (, efraca, ), ;, }, protected, static, Dfp, expInternal, (, final, Dfp, a, ), {, Dfp, y, =]
[), ;, }, protected, static, Dfp, expInternal, (, final, Dfp, a, ), {, Dfp, y, =, a, ., getOne, (]
[;, Dfp, x, =, a, ., getOne, (, ), ;, Dfp, fact, =, a, ., getOne, (, ), ;, Dfp]
[., getOne, (, ), ;, Dfp, x, =, a, ., getOne, (, ), ;, Dfp, fact, =, a, ., getOne]
[;, Dfp, fact, =, a, ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for]
[., getOne, (, ), ;, Dfp, fact, =, a, ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (]
[;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 1, ;, i, <, 90]
[., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 1]
[;, for, (, int, i, =, 1, ;, i, <, 90, ;, i, ++, ), {, x, =, x, .]
[), ;, for, (, int, i, =, 1, ;, i, <, 90, ;, i, ++, ), {, x, =, x]
[;, i, <, 90, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =]
[;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (]
[<, 90, ;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =, fact, .]
[;, i, ++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (]
[), {, x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;]
[++, ), {, x, =, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, )]
[=, x, ., multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;, y, =, y]
[;, fact, =, fact, ., divide, (, i, ), ;, y, =, y, ., add, (, x, ., multiply, (]
[., multiply, (, a, ), ;, fact, =, fact, ., divide, (, i, ), ;, y, =, y, ., add]
[), ;, fact, =, fact, ., divide, (, i, ), ;, y, =, y, ., add, (, x, ., multiply]
[=, fact, ., divide, (, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, )]
[;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals]
[., divide, (, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;]
[), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, .]
[=, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py]
[;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y]
[., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), )]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public]
[=, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static, Dfp, log, (, Dfp, a, )]
[;, }, return, y, ;, }, public, static, Dfp, log, (, Dfp, a, ), {, int, lr, ;, Dfp, x]
[), ;, }, return, y, ;, }, public, static, Dfp, log, (, Dfp, a, ), {, int, lr, ;, Dfp]
[;, }, public, static, Dfp, log, (, Dfp, a, ), {, int, lr, ;, Dfp, x, ;, int, ix, ;]
[;, if, (, a, ., equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (, a, .]
[), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (]
[||, a, ., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[||, a, ., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN, (, ), ), {, a]
[., equals, (, a, ., getZero, (, ), ), ||, a, ., lessThan, (, a, ., getZero, (, ), )]
[), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN, (, ), ), {]
[., getZero, (, ), ), ||, a, ., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN]
[||, a, ., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[., lessThan, (, a, ., getZero, (, ), ), ||, a, ., isNaN, (, ), ), {, a, ., getField]
[), ||, a, ., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID]
[., getZero, (, ), ), ||, a, ., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits]
[), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (]
[., isNaN, (, ), ), {, a, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (, byte]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID]
[), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (]
[., FLAG_INVALID, ), ;, return, a, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance]
[;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return, a, ;, }, x]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (, byte, ), 1, ,]
[,, "ln", ,, a, ,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;]
[., FLAG_INVALID, ,, "ln", ,, a, ,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[,, a, ,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if]
[,, a, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, a]
[), ;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return, a, ;, }]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, a, ., classify]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, )]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, )]
[), ), ;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return, a, ;]
[., QNAN, ), ), ;, }, if, (, a, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, return]
[), {, return, a, ;, }, x, =, new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (]
[==, Dfp, ., INFINITE, ), {, return, a, ;, }, x, =, new, Dfp, (, a, ), ;, lr, =]
[., classify, (, ), ==, Dfp, ., INFINITE, ), {, return, a, ;, }, x, =, new, Dfp, (, a]
[), {, return, a, ;, }, x, =, new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (]
[., INFINITE, ), {, return, a, ;, }, x, =, new, Dfp, (, a, ), ;, lr, =, x, .]
[;, }, x, =, new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (, ), ;, x, =]
[=, new, Dfp, (, a, ), ;, lr, =, x, ., log10K, (, ), ;, x, =, x, ., divide]
[;, lr, =, x, ., log10K, (, ), ;, x, =, x, ., divide, (, pow, (, a, ., newInstance]
[), ;, lr, =, x, ., log10K, (, ), ;, x, =, x, ., divide, (, pow, (, a, .]
[=, x, ., log10K, (, ), ;, x, =, x, ., divide, (, pow, (, a, ., newInstance, (, 10000]
[;, x, =, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), ), ;]
[., log10K, (, ), ;, x, =, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,]
[=, x, ., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), ), ;, ix, =]
[;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, ), {]
[., divide, (, pow, (, a, ., newInstance, (, 10000, ), ,, lr, ), ), ;, ix, =, x, .]
[), ;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, )]
[,, lr, ), ), ;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix]
[., newInstance, (, 10000, ), ,, lr, ), ), ;, ix, =, x, ., floor, (, ), ., intValue, (]
[), ,, lr, ), ), ;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (]
[), ), ;, ix, =, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2]
[=, x, ., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, ), {, ix, >>=]
[;, while, (, ix, >, 2, ), {, ix, >>=, 1, ;, p2, ++, ;, }, Dfp, [, ], spx]
[., intValue, (, ), ;, while, (, ix, >, 2, ), {, ix, >>=, 1, ;, p2, ++, ;, }]
[., floor, (, ), ., intValue, (, ), ;, while, (, ix, >, 2, ), {, ix, >>=, 1, ;]
[), {, ix, >>=, 1, ;, p2, ++, ;, }, Dfp, [, ], spx, =, split, (, x, ), ;]
[>, 2, ), {, ix, >>=, 1, ;, p2, ++, ;, }, Dfp, [, ], spx, =, split, (, x]
[), {, ix, >>=, 1, ;, p2, ++, ;, }, Dfp, [, ], spx, =, split, (, x, ), ;]
[>>=, 1, ;, p2, ++, ;, }, Dfp, [, ], spx, =, split, (, x, ), ;, Dfp, [, ]]
[;, p2, ++, ;, }, Dfp, [, ], spx, =, split, (, x, ), ;, Dfp, [, ], spy, =]
[;, }, Dfp, [, ], spx, =, split, (, x, ), ;, Dfp, [, ], spy, =, new, Dfp, []
[++, ;, }, Dfp, [, ], spx, =, split, (, x, ), ;, Dfp, [, ], spy, =, new, Dfp]
[;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;, spy, [, 0, ], =, pow, (, a]
[), ;, Dfp, [, ], spy, =, new, Dfp, [, 2, ], ;, spy, [, 0, ], =, pow, (]
[;, spy, [, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0]
[], ;, spy, [, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, []
[=, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =, spx, [, 0]
[[, 0, ], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =]
[], =, pow, (, a, ., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =, spx, []
[;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx]
[,, p2, ), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, spy, [, 0, ]]
[., getTwo, (, ), ,, p2, ), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (]
[), ;, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;]
[=, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =, spx]
[[, 0, ], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1]
[], =, spx, [, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =]
[;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy]
[., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide]
[[, 0, ], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =, spx, [, 1]
[], ., divide, (, spy, [, 0, ], ), ;, spx, [, 1, ], =, spx, [, 1, ], .]
[), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;]
[[, 0, ], ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0]
[], ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], )]
[=, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =, a]
[[, 1, ], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0]
[], =, spx, [, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =]
[;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], .]
[., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", )]
[[, 1, ], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance]
[], ., divide, (, spy, [, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333"]
[), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ]]
[[, 0, ], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx]
[], ), ;, spy, [, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0]
[=, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], ., add, (, spx, [, 1]
[[, 0, ], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], ., add, (]
[], =, a, ., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], ., add, (, spx, []
[;, while, (, spx, [, 0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, []
[., newInstance, (, "1.33333", ), ;, while, (, spx, [, 0, ], ., add, (, spx, [, 1, ], )]
[), ;, while, (, spx, [, 0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy]
[), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1]
[., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =, spx, [, 0, ], .]
[., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, []
[[, 0, ], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), )]
[], ., add, (, spx, [, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx]
[), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =, spx, [, 0, ]]
[[, 1, ], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =, spx]
[], ), ., greaterThan, (, spy, [, 0, ], ), ), {, spx, [, 0, ], =, spx, [, 0]
[), ), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, []
[[, 0, ], ), ), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, )]
[], ), ), {, spx, [, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx]
[=, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1, ]]
[[, 0, ], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =, spx]
[], =, spx, [, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1]
[;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, 2, ), ;, p2, ++, ;, }]
[., divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, 2, )]
[[, 0, ], ., divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide]
[], ., divide, (, 2, ), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, 2]
[), ;, spx, [, 1, ], =, spx, [, 1, ], ., divide, (, 2, ), ;, p2, ++, ;]
[=, spx, [, 1, ], ., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =]
[[, 1, ], =, spx, [, 1, ], ., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, []
[], =, spx, [, 1, ], ., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz]
[;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =]
[., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;]
[[, 1, ], ., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (]
[], ., divide, (, 2, ), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, )]
[), ;, p2, ++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ]]
[;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =, a, ., newInstance]
[++, ;, }, Dfp, [, ], spz, =, logInternal, (, spx, ), ;, spx, [, 0, ], =, a, .]
[;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +, 4]
[), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +]
[=, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), ., toString]
[[, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr]
[], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), .]
[;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (]
[., newInstance, (, new, StringBuilder, (, ), ., append, (, p2, +, 4, *, lr, ), ., toString, (, )]
[), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField]
[., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult]
[., append, (, p2, +, 4, *, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =]
[), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =]
[+, 4, *, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (]
[), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =]
[*, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;]
[), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =]
[=, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, )]
[[, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), .]
[], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (]
[;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, []
[., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx]
[=, splitMult, (, a, ., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ]]
[;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz]
[,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ]]
[., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (]
[., getField, (, ), ., getLn2Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0]
[), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;]
[=, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz]
[[, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1]
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, spx]
[., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add]
[[, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1]
[], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], .]
[), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;]
[[, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1]
[], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], )]
[=, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =, a]
[[, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0]
[], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =]
[;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr]
[., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder]
[[, 1, ], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =, a, ., newInstance]
[], ., add, (, spy, [, 1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (, new]
[), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *]
[[, 1, ], ), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append]
[], ), ;, spx, [, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4]
[=, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (, )]
[[, 0, ], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), .]
[], =, a, ., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (]
[;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (]
[., newInstance, (, new, StringBuilder, (, ), ., append, (, 4, *, lr, ), ., toString, (, ), ), ;]
[), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField]
[., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult]
[., append, (, 4, *, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =, a, .]
[), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =]
[*, lr, ), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;]
[), ., toString, (, ), ), ;, spx, [, 1, ], =, a, ., getZero, (, ), ;, spy, =]
[=, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, )]
[[, 1, ], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), .]
[], =, a, ., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (]
[;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, []
[., getZero, (, ), ;, spy, =, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx]
[=, splitMult, (, a, ., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ]]
[;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz]
[,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ]]
[., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (]
[., getField, (, ), ., getLn5Split, (, ), ,, spx, ), ;, spz, [, 0, ], =, spz, [, 0]
[), ;, spz, [, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;]
[=, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz]
[[, 0, ], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1]
[], =, spz, [, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =]
[;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return]
[., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add]
[[, 0, ], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1]
[], ., add, (, spy, [, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], .]
[), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;]
[[, 0, ], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1]
[], ), ;, spz, [, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], )]
[=, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz]
[[, 1, ], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, .]
[], =, spz, [, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (]
[;, return, a, ., newInstance, (, spz, [, 0, ], ., add, (, spz, [, 1, ], ), ), ;]
[., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz, [, 0, ], ., add]
[[, 1, ], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz, [, 0]
[], ., add, (, spy, [, 1, ], ), ;, return, a, ., newInstance, (, spz, [, 0, ], .]
[), ;, return, a, ., newInstance, (, spz, [, 0, ], ., add, (, spz, [, 1, ], ), )]
[[, 1, ], ), ;, return, a, ., newInstance, (, spz, [, 0, ], ., add, (, spz, [, 1]
[], ), ;, return, a, ., newInstance, (, spz, [, 0, ], ., add, (, spz, [, 1, ], )]
[;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =, a]
[., newInstance, (, spz, [, 0, ], ., add, (, spz, [, 1, ], ), ), ;, }, protected, static]
[), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t, =]
[., add, (, spz, [, 1, ], ), ), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp]
[[, 0, ], ., add, (, spz, [, 1, ], ), ), ;, }, protected, static, Dfp, [, ], logInternal]
[], ., add, (, spz, [, 1, ], ), ), ;, }, protected, static, Dfp, [, ], logInternal, (, final]
[), ), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp, t]
[[, 1, ], ), ), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], )]
[], ), ), ;, }, protected, static, Dfp, [, ], logInternal, (, final, Dfp, a, [, ], ), {, Dfp]
[;, Dfp, x, =, t, ., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide]
[., add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add]
[., divide, (, 4, ), ., add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp]
[[, 0, ], ., divide, (, 4, ), ., add, (, a, [, 1, ], ., divide, (, 4, )]
[], ., divide, (, 4, ), ., add, (, a, [, 1, ], ., divide, (, 4, ), ), ;]
[), ., add, (, a, [, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =, t, .]
[), ;, Dfp, x, =, t, ., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), .]
[., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (, a, [, 0, ], ., newInstance]
[[, 1, ], ., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (, a, [, 0]
[], ., divide, (, 4, ), ), ;, Dfp, x, =, t, ., add, (, a, [, 0, ], .]
[), ), ;, Dfp, x, =, t, ., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), )]
[;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp]
[., divide, (, t, ., add, (, a, [, 0, ], ., newInstance, (, "0.25", ), ), ), ;, Dfp]
[., add, (, a, [, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (]
[), ., divide, (, t, ., add, (, a, [, 0, ], ., newInstance, (, "0.25", ), ), ), ;]
[., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (, a, [, 0, ], ., newInstance, (]
[[, 0, ], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (, a, [, 0, ]]
[], ., newInstance, (, "-0.25", ), ), ., divide, (, t, ., add, (, a, [, 0, ], ., newInstance]
[), ), ., divide, (, t, ., add, (, a, [, 0, ], ., newInstance, (, "0.25", ), ), )]
[), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, ), ;]
[., add, (, a, [, 0, ], ., newInstance, (, "0.25", ), ), ), ;, Dfp, y, =, new, Dfp]
[), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x, )]
[., newInstance, (, "0.25", ), ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =]
[[, 0, ], ., newInstance, (, "0.25", ), ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;]
[], ., newInstance, (, "0.25", ), ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num]
[), ), ), ;, Dfp, y, =, new, Dfp, (, x, ), ;, Dfp, num, =, new, Dfp, (, x]
[;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, int]
[), ;, Dfp, num, =, new, Dfp, (, x, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;]
[;, Dfp, py, =, new, Dfp, (, y, ), ;, int, den, =, 1, ;, for, (, int, i, =]
[), ;, Dfp, py, =, new, Dfp, (, y, ), ;, int, den, =, 1, ;, for, (, int, i]
[;, int, den, =, 1, ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, )]
[), ;, int, den, =, 1, ;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, 10000, ;, i, ++, ), {, num, =, num, .]
[;, i, <, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =]
[;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (]
[<, 10000, ;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, .]
[;, i, ++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (]
[), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;]
[++, ), {, num, =, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, )]
[=, num, ., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den]
[;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =, num, .]
[., multiply, (, x, ), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2]
[), ;, num, =, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =, num]
[=, num, ., multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =, num, ., divide, (]
[;, den, =, den, +, 2, ;, t, =, num, ., divide, (, den, ), ;, y, =, y, .]
[., multiply, (, x, ), ;, den, =, den, +, 2, ;, t, =, num, ., divide, (, den, )]
[), ;, den, =, den, +, 2, ;, t, =, num, ., divide, (, den, ), ;, y, =, y]
[=, den, +, 2, ;, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (]
[;, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if]
[+, 2, ;, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, )]
[;, t, =, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if]
[=, num, ., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (, y]
[;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {]
[., divide, (, den, ), ;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals]
[), ;, y, =, y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), )]
[=, y, ., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;]
[;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y]
[., add, (, t, ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =, y, ., multiply, (]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, y, =, y, ., multiply]
[=, new, Dfp, (, y, ), ;, }, y, =, y, ., multiply, (, a, [, 0, ], ., getTwo]
[;, }, y, =, y, ., multiply, (, a, [, 0, ], ., getTwo, (, ), ), ;, return, split]
[), ;, }, y, =, y, ., multiply, (, a, [, 0, ], ., getTwo, (, ), ), ;, return]
[=, y, ., multiply, (, a, [, 0, ], ., getTwo, (, ), ), ;, return, split, (, y, )]
[;, return, split, (, y, ), ;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y, )]
[., multiply, (, a, [, 0, ], ., getTwo, (, ), ), ;, return, split, (, y, ), ;, }]
[), ;, return, split, (, y, ), ;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y]
[., getTwo, (, ), ), ;, return, split, (, y, ), ;, }, public, static, Dfp, pow, (, Dfp, x]
[[, 0, ], ., getTwo, (, ), ), ;, return, split, (, y, ), ;, }, public, static, Dfp, pow]
[], ., getTwo, (, ), ), ;, return, split, (, y, ), ;, }, public, static, Dfp, pow, (, Dfp]
[;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y, ), {, if, (, x, ., getField]
[), ;, }, public, static, Dfp, pow, (, Dfp, x, ,, final, Dfp, y, ), {, if, (, x, .]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x]
[!=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[., getRadixDigits, (, ), !=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {, x, ., getField, (]
[., getField, (, ), ., getRadixDigits, (, ), !=, y, ., getField, (, ), ., getRadixDigits, (, ), ), {]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x]
[., getRadixDigits, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final]
[., getField, (, ), ., getRadixDigits, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, .]
[;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (, ), ), ;, result, ., nans, =]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, x, ., newInstance, (]
[), ;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (, ), ), ;, result, ., nans]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, x, ., newInstance, (, x, ., getZero, (, ), ), ;, result]
[;, result, ., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,]
[., newInstance, (, x, ., getZero, (, ), ), ;, result, ., nans, =, Dfp, ., QNAN, ;, return, x]
[), ;, result, ., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP]
[., getZero, (, ), ), ;, result, ., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField]
[=, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, )]
[., nans, =, Dfp, ., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,]
[;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, ), ;, }, final, Dfp]
[., QNAN, ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, ), ;, }]
[;, }, final, Dfp, zero, =, x, ., getZero, (, ), ;, final, Dfp, one, =, x, ., getOne, (]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, ), ;, }, final, Dfp, zero, =, x]
[,, POW_TRAP, ,, x, ,, result, ), ;, }, final, Dfp, zero, =, x, ., getZero, (, ), ;, final]
[., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, result, ), ;, }, final, Dfp, zero, =, x, ., getZero, (, )]
[,, x, ,, result, ), ;, }, final, Dfp, zero, =, x, ., getZero, (, ), ;, final, Dfp, one]
[,, result, ), ;, }, final, Dfp, zero, =, x, ., getZero, (, ), ;, final, Dfp, one, =, x]
[), ;, }, final, Dfp, zero, =, x, ., getZero, (, ), ;, final, Dfp, one, =, x, ., getOne]
[;, final, Dfp, one, =, x, ., getOne, (, ), ;, final, Dfp, two, =, x, ., getTwo, (, )]
[., getZero, (, ), ;, final, Dfp, one, =, x, ., getOne, (, ), ;, final, Dfp, two, =, x]
[;, final, Dfp, two, =, x, ., getTwo, (, ), ;, boolean, invert, =, false, ;, int, ui, ;, if]
[., getOne, (, ), ;, final, Dfp, two, =, x, ., getTwo, (, ), ;, boolean, invert, =, false, ;]
[;, boolean, invert, =, false, ;, int, ui, ;, if, (, y, ., equals, (, zero, ), ), {, return]
[., getTwo, (, ), ;, boolean, invert, =, false, ;, int, ui, ;, if, (, y, ., equals, (, zero]
[;, int, ui, ;, if, (, y, ., equals, (, zero, ), ), {, return, x, ., newInstance, (, one]
[), {, return, x, ., newInstance, (, one, ), ;, }, if, (, y, ., equals, (, one, ), )]
[., equals, (, zero, ), ), {, return, x, ., newInstance, (, one, ), ;, }, if, (, y, .]
[), ), {, return, x, ., newInstance, (, one, ), ;, }, if, (, y, ., equals, (, one, )]
[;, }, if, (, y, ., equals, (, one, ), ), {, if, (, x, ., isNaN, (, ), )]
[., newInstance, (, one, ), ;, }, if, (, y, ., equals, (, one, ), ), {, if, (, x]
[), ;, }, if, (, y, ., equals, (, one, ), ), {, if, (, x, ., isNaN, (, )]
[), {, if, (, x, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField]
[., equals, (, one, ), ), {, if, (, x, ., isNaN, (, ), ), {, x, ., getField, (]
[), ), {, if, (, x, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return, x]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID]
[), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return]
[., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;]
[;, }, return, x, ;, }, if, (, x, ., isNaN, (, ), ||, y, ., isNaN, (, ), )]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if]
[,, POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if, (, x, ., isNaN, (, )]
[., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ), ;, }, return, x, ;, }, if, (, x, ., isNaN]
[,, x, ,, x, ), ;, }, return, x, ;, }, if, (, x, ., isNaN, (, ), ||, y]
[,, x, ), ;, }, return, x, ;, }, if, (, x, ., isNaN, (, ), ||, y, ., isNaN]
[), ;, }, return, x, ;, }, if, (, x, ., isNaN, (, ), ||, y, ., isNaN, (, )]
[;, }, if, (, x, ., isNaN, (, ), ||, y, ., isNaN, (, ), ), {, x, ., getField]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[||, y, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[., isNaN, (, ), ||, y, ., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[., isNaN, (, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID]
[), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (]
[., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance]
[;, }, if, (, x, ., equals, (, zero, ), ), {, if, (, Dfp, ., copysign, (, one, ,]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;]
[., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if]
[,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, x]
[), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (, Dfp, ., copysign, (, one]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., equals]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (]
[), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (, Dfp, ., copysign, (]
[., QNAN, ), ), ;, }, if, (, x, ., equals, (, zero, ), ), {, if, (, Dfp, .]
[), {, if, (, Dfp, ., copysign, (, one, ,, x, ), ., greaterThan, (, zero, ), ), {, if]
[., equals, (, zero, ), ), {, if, (, Dfp, ., copysign, (, one, ,, x, ), ., greaterThan, (]
[), ), {, if, (, Dfp, ., copysign, (, one, ,, x, ), ., greaterThan, (, zero, ), ), {]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;]
[., greaterThan, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, .]
[., copysign, (, one, ,, x, ), ., greaterThan, (, zero, ), ), {, if, (, y, ., greaterThan, (]
[,, x, ), ., greaterThan, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {]
[), ., greaterThan, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x]
[), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, )]
[), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, .]
[., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x]
[), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x]
[;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, .]
[., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte]
[), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp]
[;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint]
[., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }]
[), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, .]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (]
[,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp]
[,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp]
[), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y]
[., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ., negate]
[&&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan]
[&&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), .]
[==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder]
[., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&]
[&&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), .]
[., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two]
[&&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan]
[., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {]
[., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (]
[), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, .]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ., negate]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ., negate]
[., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, .]
[., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, )]
[), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x]
[), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, .]
[), {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, else, {, return, x, .]
[., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }]
[), ), {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, else, {, return, x]
[;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp]
[., newInstance, (, zero, ., negate, (, ), ), ;, }, else, {, return, x, ., newInstance, (, x, .]
[), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,]
[., negate, (, ), ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte]
[;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }]
[), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance]
[., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if]
[,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), )]
[,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), )]
[,, Dfp, ., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), )]
[), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, .]
[., INFINITE, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return]
[), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, .]
[., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x]
[), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x]
[;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, .]
[., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte]
[), ;, }, else, {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp]
[;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate]
[., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }]
[), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, .]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, }, }, }, if, (]
[,, Dfp, ., INFINITE, ), ), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), )]
[,, Dfp, ., INFINITE, ), ), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), )]
[), ), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x]
[., INFINITE, ), ), ;, }, }, }, }, if, (, x, ., lessThan, (, zero, ), ), {, x]
[), {, x, =, x, ., negate, (, ), ;, invert, =, true, ;, }, if, (, x, ., greaterThan]
[., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, invert, =, true, ;, }]
[), ), {, x, =, x, ., negate, (, ), ;, invert, =, true, ;, }, if, (, x, .]
[=, x, ., negate, (, ), ;, invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, )]
[;, invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&, y, ., classify, (, )]
[., negate, (, ), ;, invert, =, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&, y]
[=, true, ;, }, if, (, x, ., greaterThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp]
[;, }, if, (, x, ., greaterThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {, return, x]
[&&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, )]
[., greaterThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y]
[), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {, return, x]
[==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }]
[., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {, return, x]
[., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {]
[), {, return, y, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, if, (]
[., greaterThan, (, zero, ), ), {, return, y, ;, }, else, {, return, x, ., newInstance, (, zero, )]
[), ), {, return, y, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, if]
[;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, if, (, x, ., lessThan, (]
[;, }, }, if, (, x, ., lessThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, .]
[., newInstance, (, zero, ), ;, }, }, if, (, x, ., lessThan, (, one, ), &&, y, ., classify]
[), ;, }, }, if, (, x, ., lessThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;]
[&&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, )]
[., lessThan, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y]
[), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;]
[==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance]
[., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;]
[., INFINITE, ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero]
[), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, Dfp, .]
[., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x]
[), ), {, return, x, ., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, Dfp]
[;, }, else, {, return, x, ., newInstance, (, Dfp, ., copysign, (, y, ,, one, ), ), ;, }]
[., newInstance, (, zero, ), ;, }, else, {, return, x, ., newInstance, (, Dfp, ., copysign, (, y, ,]
[), ;, }, else, {, return, x, ., newInstance, (, Dfp, ., copysign, (, y, ,, one, ), ), ;]
[;, }, }, if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==, Dfp, .]
[., newInstance, (, Dfp, ., copysign, (, y, ,, one, ), ), ;, }, }, if, (, x, ., equals]
[), ;, }, }, if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==, Dfp]
[., copysign, (, y, ,, one, ), ), ;, }, }, if, (, x, ., equals, (, one, ), &&]
[,, one, ), ), ;, }, }, if, (, x, ., equals, (, one, ), &&, y, ., classify, (]
[), ), ;, }, }, if, (, x, ., equals, (, one, ), &&, y, ., classify, (, ), ==]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[&&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (]
[., equals, (, one, ), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, x, ., getField]
[), &&, y, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return]
[., classify, (, ), ==, Dfp, ., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, .]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[., INFINITE, ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, .]
[;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID]
[), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (]
[., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance]
[;, }, if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;]
[., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if]
[,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, x]
[), ;, }, if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, )]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., classify]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, )]
[,, Dfp, ., QNAN, ), ), ;, }, if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, )]
[), ), ;, }, if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert]
[., QNAN, ), ), ;, }, if, (, x, ., classify, (, ), ==, Dfp, ., INFINITE, ), {, if]
[), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y]
[==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==, Dfp]
[., classify, (, ), ==, Dfp, ., INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify]
[), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y]
[., INFINITE, ), {, if, (, invert, ), {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE]
[), {, if, (, y, ., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), .]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance]
[&&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan]
[&&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), .]
[==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder]
[., classify, (, ), ==, Dfp, ., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&]
[&&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), .]
[., FINITE, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two]
[&&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan]
[., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {]
[., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (]
[), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, .]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance]
[), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance]
[., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, .]
[., remainder, (, two, ), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, )]
[), ., equals, (, zero, ), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x]
[), ), {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, .]
[), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE]
[., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -]
[), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, .]
[;, }, else, {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, }, else, {]
[., newInstance, (, x, ., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }]
[), ;, }, else, {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, }, else]
[., newInstance, (, (, byte, ), -, 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x]
[,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (, zero, ., negate, (, )]
[,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (, zero, ., negate, (, )]
[,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (, zero, ., negate, (, )]
[), ), ;, }, else, {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;, }, }]
[., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (, zero, ., negate, (, ), ), ;]
[;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (]
[., newInstance, (, zero, ., negate, (, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (]
[), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ., newInstance]
[., negate, (, ), ), ;, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {]
[), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, )]
[., greaterThan, (, zero, ), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1]
[), ), {, return, x, ., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE]
[;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, else, {, if, (, y]
[., newInstance, (, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, else]
[), ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, else, {, if, (]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, .]
[,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }]
[,, Dfp, ., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }]
[), ), ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, else, {, if]
[., INFINITE, ), ), ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, else]
[;, }, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ;, }]
[., newInstance, (, zero, ), ;, }, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), )]
[), ;, }, }, }, else, {, if, (, y, ., greaterThan, (, zero, ), ), {, return, x, ;]
[), {, return, x, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if]
[., greaterThan, (, zero, ), ), {, return, x, ;, }, else, {, return, x, ., newInstance, (, zero, )]
[), ), {, return, x, ;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }]
[;, }, else, {, return, x, ., newInstance, (, zero, ), ;, }, }, }, if, (, invert, &&, !]
[;, }, }, }, if, (, invert, &&, !, y, ., rint, (, ), ., equals, (, y, ), )]
[., newInstance, (, zero, ), ;, }, }, }, if, (, invert, &&, !, y, ., rint, (, ), .]
[), ;, }, }, }, if, (, invert, &&, !, y, ., rint, (, ), ., equals, (, y, )]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[&&, !, y, ., rint, (, ), ., equals, (, y, ), ), {, x, ., getField, (, ), .]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (]
[., equals, (, y, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[., rint, (, ), ., equals, (, y, ), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField]
[), ), {, x, ., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap]
[;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x]
[., getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID]
[), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (]
[., FLAG_INVALID, ), ;, return, x, ., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance]
[;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&, y]
[., dotrap, (, DfpField, ., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,]
[,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;]
[., FLAG_INVALID, ,, POW_TRAP, ,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, )]
[,, x, ,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp]
[,, x, ., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;]
[), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&]
[., newInstance, (, (, byte, ), 1, ,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (]
[,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance]
[,, Dfp, ., QNAN, ), ), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance]
[), ), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000, ), )]
[., QNAN, ), ), ;, }, Dfp, r, ;, if, (, y, ., lessThan, (, x, ., newInstance, (, 100000000]
[), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui, =, u, ., intValue, (, ), ;]
[&&, y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =, y]
[., lessThan, (, x, ., newInstance, (, 100000000, ), ), &&, y, ., greaterThan, (, x, ., newInstance, (, -]
[), &&, y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =]
[., newInstance, (, 100000000, ), ), &&, y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), ), )]
[), ), &&, y, ., greaterThan, (, x, ., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u]
[), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui, =, u, ., intValue, (, ), ;]
[., greaterThan, (, x, ., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =, y, ., rint]
[), ), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui, =, u, ., intValue, (, )]
[., newInstance, (, -, 100000000, ), ), ), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui]
[), ), ), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui, =, u, ., intValue, (]
[), ), ), {, final, Dfp, u, =, y, ., rint, (, ), ;, ui, =, u, ., intValue, (]
[;, ui, =, u, ., intValue, (, ), ;, final, Dfp, v, =, y, ., subtract, (, u, ), ;]
[., rint, (, ), ;, ui, =, u, ., intValue, (, ), ;, final, Dfp, v, =, y, ., subtract]
[=, u, ., intValue, (, ), ;, final, Dfp, v, =, y, ., subtract, (, u, ), ;, if, (]
[;, final, Dfp, v, =, y, ., subtract, (, u, ), ;, if, (, v, ., unequal, (, zero, )]
[., intValue, (, ), ;, final, Dfp, v, =, y, ., subtract, (, u, ), ;, if, (, v, .]
[;, if, (, v, ., unequal, (, zero, ), ), {, final, Dfp, a, =, v, ., multiply, (, log]
[., subtract, (, u, ), ;, if, (, v, ., unequal, (, zero, ), ), {, final, Dfp, a, =]
[), ;, if, (, v, ., unequal, (, zero, ), ), {, final, Dfp, a, =, v, ., multiply, (]
[), {, final, Dfp, a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =]
[., unequal, (, zero, ), ), {, final, Dfp, a, =, v, ., multiply, (, log, (, x, ), )]
[), ), {, final, Dfp, a, =, v, ., multiply, (, log, (, x, ), ), ;, final, Dfp, b]
[;, final, Dfp, b, =, a, ., divide, (, x, ., getField, (, ), ., getLn2, (, ), ), .]
[., multiply, (, log, (, x, ), ), ;, final, Dfp, b, =, a, ., divide, (, x, ., getField]
[), ;, final, Dfp, b, =, a, ., divide, (, x, ., getField, (, ), ., getLn2, (, ), )]
[), ), ;, final, Dfp, b, =, a, ., divide, (, x, ., getField, (, ), ., getLn2, (, )]
[;, final, Dfp, c, =, a, ., subtract, (, b, ., multiply, (, x, ., getField, (, ), ., getLn2]
[., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (, b, ., multiply, (, x, ., getField]
[., divide, (, x, ., getField, (, ), ., getLn2, (, ), ), ., rint, (, ), ;, final, Dfp]
[), ., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (, b, ., multiply, (, x, .]
[., getLn2, (, ), ), ., rint, (, ), ;, final, Dfp, c, =, a, ., subtract, (, b, .]
[., getField, (, ), ., getLn2, (, ), ), ., rint, (, ), ;, final, Dfp, c, =, a, .]
[;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply, (, pow]
[., subtract, (, b, ., multiply, (, x, ., getField, (, ), ., getLn2, (, ), ), ), ;, r]
[), ;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply, (]
[., multiply, (, x, ., getField, (, ), ., getLn2, (, ), ), ), ;, r, =, splitPow, (, split]
[), ), ;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply]
[., getLn2, (, ), ), ), ;, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, r]
[., getField, (, ), ., getLn2, (, ), ), ), ;, r, =, splitPow, (, split, (, x, ), ,]
[=, splitPow, (, split, (, x, ), ,, ui, ), ;, r, =, r, ., multiply, (, pow, (, two]
[;, r, =, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;, r]
[,, ui, ), ;, r, =, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), )]
[), ,, ui, ), ;, r, =, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, )]
[), ;, r, =, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;]
[=, r, ., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;, r, =, r]
[;, r, =, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =, splitPow, (]
[., multiply, (, pow, (, two, ,, b, ., intValue, (, ), ), ), ;, r, =, r, ., multiply]
[), ;, r, =, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =, splitPow]
[,, b, ., intValue, (, ), ), ), ;, r, =, r, ., multiply, (, exp, (, c, ), )]
[), ), ;, r, =, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =]
[., intValue, (, ), ), ), ;, r, =, r, ., multiply, (, exp, (, c, ), ), ;, }]
[=, r, ., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =, splitPow, (, split, (]
[;, }, else, {, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else, {]
[., multiply, (, exp, (, c, ), ), ;, }, else, {, r, =, splitPow, (, split, (, x, )]
[), ;, }, else, {, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else]
[), ), ;, }, else, {, r, =, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }]
[=, splitPow, (, split, (, x, ), ,, ui, ), ;, }, }, else, {, r, =, exp, (, log]
[;, }, }, else, {, r, =, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;]
[,, ui, ), ;, }, }, else, {, r, =, exp, (, log, (, x, ), ., multiply, (, y]
[), ,, ui, ), ;, }, }, else, {, r, =, exp, (, log, (, x, ), ., multiply, (]
[), ;, }, }, else, {, r, =, exp, (, log, (, x, ), ., multiply, (, y, ), )]
[=, exp, (, log, (, x, ), ., multiply, (, y, ), ), ;, }, if, (, invert, &&, y]
[;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, .]
[), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y]
[., multiply, (, y, ), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (]
[), ., multiply, (, y, ), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals]
[), ), ;, }, if, (, invert, &&, y, ., rint, (, ), ., equals, (, y, ), &&, !]
[), {, r, =, r, ., negate, (, ), ;, }, return, x, ., newInstance, (, r, ), ;, }]
[&&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, r, =, r, ., negate]
[&&, y, ., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), .]
[&&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, r, =, r, ., negate]
[., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {]
[., rint, (, ), ., equals, (, y, ), &&, !, y, ., remainder, (, two, ), ., equals, (]
[), &&, !, y, ., remainder, (, two, ), ., equals, (, zero, ), ), {, r, =, r, .]
[), {, r, =, r, ., negate, (, ), ;, }, return, x, ., newInstance, (, r, ), ;, }]
[), {, r, =, r, ., negate, (, ), ;, }, return, x, ., newInstance, (, r, ), ;, }]
[., equals, (, zero, ), ), {, r, =, r, ., negate, (, ), ;, }, return, x, ., newInstance]
[., remainder, (, two, ), ., equals, (, zero, ), ), {, r, =, r, ., negate, (, ), ;]
[), ., equals, (, zero, ), ), {, r, =, r, ., negate, (, ), ;, }, return, x, .]
[), ), {, r, =, r, ., negate, (, ), ;, }, return, x, ., newInstance, (, r, ), ;]
[=, r, ., negate, (, ), ;, }, return, x, ., newInstance, (, r, ), ;, }, protected, static, Dfp]
[;, }, return, x, ., newInstance, (, r, ), ;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ]]
[., negate, (, ), ;, }, return, x, ., newInstance, (, r, ), ;, }, protected, static, Dfp, sinInternal, (]
[;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =, a, [, 0, ]]
[., newInstance, (, r, ), ;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c]
[), ;, }, protected, static, Dfp, sinInternal, (, Dfp, a, [, ], ), {, Dfp, c, =, a, [, 0]
[;, Dfp, y, =, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =, y, ;]
[., add, (, a, [, 1, ], ), ;, Dfp, y, =, c, ;, c, =, c, ., multiply, (]
[[, 0, ], ., add, (, a, [, 1, ], ), ;, Dfp, y, =, c, ;, c, =, c]
[], ., add, (, a, [, 1, ], ), ;, Dfp, y, =, c, ;, c, =, c, ., multiply]
[), ;, Dfp, y, =, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =, y]
[[, 1, ], ), ;, Dfp, y, =, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp]
[], ), ;, Dfp, y, =, c, ;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =]
[;, c, =, c, ., multiply, (, c, ), ;, Dfp, x, =, y, ;, Dfp, fact, =, a, []
[=, c, ., multiply, (, c, ), ;, Dfp, x, =, y, ;, Dfp, fact, =, a, [, 0, ]]
[;, Dfp, x, =, y, ;, Dfp, fact, =, a, [, 0, ], ., getOne, (, ), ;, Dfp, py]
[., multiply, (, c, ), ;, Dfp, x, =, y, ;, Dfp, fact, =, a, [, 0, ], ., getOne]
[), ;, Dfp, x, =, y, ;, Dfp, fact, =, a, [, 0, ], ., getOne, (, ), ;, Dfp]
[;, Dfp, fact, =, a, [, 0, ], ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y]
[;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90]
[., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3]
[[, 0, ], ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int]
[], ., getOne, (, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x]
[), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x]
[;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate]
[<, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x]
[;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate]
[+=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, )]
[), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact]
[=, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, .]
[;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, )]
[., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (]
[), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1]
[=, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i]
[;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, .]
[., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;]
[=, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (]
[;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals]
[., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (, x, .]
[), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, .]
[*, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if]
[-, 1, ), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), )]
[), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if]
[), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, .]
[=, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py]
[;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y]
[., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), )]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, protected, static]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, protected]
[=, new, Dfp, (, y, ), ;, }, return, y, ;, }, protected, static, Dfp, cosInternal, (, Dfp, a, []
[;, }, return, y, ;, }, protected, static, Dfp, cosInternal, (, Dfp, a, [, ], ), {, final, Dfp, one]
[), ;, }, return, y, ;, }, protected, static, Dfp, cosInternal, (, Dfp, a, [, ], ), {, final, Dfp]
[;, }, protected, static, Dfp, cosInternal, (, Dfp, a, [, ], ), {, final, Dfp, one, =, a, [, 0]
[;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =, a, [, 0, ], ., add]
[., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =, a, []
[[, 0, ], ., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c]
[], ., getOne, (, ), ;, Dfp, x, =, one, ;, Dfp, y, =, one, ;, Dfp, c, =, a]
[;, Dfp, y, =, one, ;, Dfp, c, =, a, [, 0, ], ., add, (, a, [, 1, ]]
[;, Dfp, c, =, a, [, 0, ], ., add, (, a, [, 1, ], ), ;, c, =, c]
[;, c, =, c, ., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp, py, =, new, Dfp]
[., add, (, a, [, 1, ], ), ;, c, =, c, ., multiply, (, c, ), ;, Dfp, fact]
[[, 0, ], ., add, (, a, [, 1, ], ), ;, c, =, c, ., multiply, (, c, )]
[], ., add, (, a, [, 1, ], ), ;, c, =, c, ., multiply, (, c, ), ;, Dfp]
[), ;, c, =, c, ., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp, py, =, new]
[[, 1, ], ), ;, c, =, c, ., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp]
[], ), ;, c, =, c, ., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp, py, =]
[=, c, ., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp, py, =, new, Dfp, (, y]
[;, Dfp, fact, =, one, ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =]
[., multiply, (, c, ), ;, Dfp, fact, =, one, ;, Dfp, py, =, new, Dfp, (, y, ), ;]
[), ;, Dfp, fact, =, one, ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i]
[;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 2, ;, i, <, 90]
[;, for, (, int, i, =, 2, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x]
[), ;, for, (, int, i, =, 2, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x]
[;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate]
[<, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x]
[;, i, +=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate]
[+=, 2, ), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, )]
[), {, x, =, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact]
[=, x, ., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, .]
[;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, )]
[., multiply, (, c, ), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (]
[), ;, x, =, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1]
[=, x, ., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i]
[;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, .]
[., negate, (, ), ;, fact, =, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;]
[=, fact, ., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (]
[;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals]
[., divide, (, (, i, -, 1, ), *, i, ), ;, y, =, y, ., add, (, x, .]
[), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, .]
[*, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (]
[), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if]
[-, 1, ), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), )]
[), *, i, ), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if]
[), ;, y, =, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, .]
[=, y, ., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py]
[;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y]
[., add, (, x, ., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), )]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., multiply, (, fact, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public]
[=, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static, Dfp, sin, (, final, Dfp, a]
[;, }, return, y, ;, }, public, static, Dfp, sin, (, final, Dfp, a, ), {, final, Dfp, pi, =]
[), ;, }, return, y, ;, }, public, static, Dfp, sin, (, final, Dfp, a, ), {, final, Dfp, pi]
[;, }, public, static, Dfp, sin, (, final, Dfp, a, ), {, final, Dfp, pi, =, a, ., getField, (]
[;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;]
[., getPi, (, ), ;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean]
[., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero]
[;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), )]
[., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply]
[., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder]
[;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, .]
[;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, neg]
[., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), )]
[), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;]
[., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x]
[), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, )]
[), {, x, =, x, ., negate, (, ), ;, neg, =, true, ;, }, if, (, x, ., greaterThan]
[., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, neg, =, true, ;, }]
[), ), {, x, =, x, ., negate, (, ), ;, neg, =, true, ;, }, if, (, x, .]
[=, x, ., negate, (, ), ;, neg, =, true, ;, }, if, (, x, ., greaterThan, (, pi, .]
[;, neg, =, true, ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), )]
[., negate, (, ), ;, neg, =, true, ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (]
[=, true, ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x]
[;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =, pi]
[), {, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x, ., lessThan]
[., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (, x, )]
[), ), {, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x, .]
[., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y]
[), ), ), {, x, =, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x]
[=, pi, ., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, .]
[;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (, 4, ), ), ), {]
[., subtract, (, x, ), ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (]
[), ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (, 4, ), ), )]
[), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;]
[., lessThan, (, pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, []
[), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x]
[., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c]
[), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =]
[;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (, split]
[], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (]
[=, x, ;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (, split, (, x, ), ), ;]
[[, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (, split, (, x]
[], =, x, ;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (, split, (, x, ), )]
[;, c, [, 1, ], =, zero, ;, y, =, sinInternal, (, split, (, x, ), ), ;, }, else]
[=, zero, ;, y, =, sinInternal, (, split, (, x, ), ), ;, }, else, {, final, Dfp, c, []
[[, 1, ], =, zero, ;, y, =, sinInternal, (, split, (, x, ), ), ;, }, else, {, final]
[], =, zero, ;, y, =, sinInternal, (, split, (, x, ), ), ;, }, else, {, final, Dfp, c]
[;, y, =, sinInternal, (, split, (, x, ), ), ;, }, else, {, final, Dfp, c, [, ], =]
[=, sinInternal, (, split, (, x, ), ), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp]
[;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ]]
[), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, []
[), ), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp]
[;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0]
[], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, []
[;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, )]
[., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), .]
[., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide]
[=, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ]]
[[, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c]
[], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1]
[;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal, (]
[., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, )]
[., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ]]
[[, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit]
[], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1]
[), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2]
[), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal]
[=, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if]
[[, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal, (, c, )]
[], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }]
[;, y, =, cosInternal, (, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (]
[., divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if, (, neg, ), {, y]
[[, 1, ], ., divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if, (, neg]
[], ., divide, (, 2, ), ;, y, =, cosInternal, (, c, ), ;, }, if, (, neg, ), {]
[), ;, y, =, cosInternal, (, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate]
[=, cosInternal, (, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;]
[;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance]
[), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, .]
[), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }]
[=, y, ., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp]
[;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, cos, (, Dfp, a, ), {]
[., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, cos, (]
[;, }, public, static, Dfp, cos, (, Dfp, a, ), {, final, Dfp, pi, =, a, ., getField, (, )]
[., newInstance, (, y, ), ;, }, public, static, Dfp, cos, (, Dfp, a, ), {, final, Dfp, pi, =]
[), ;, }, public, static, Dfp, cos, (, Dfp, a, ), {, final, Dfp, pi, =, a, ., getField, (]
[;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;]
[., getPi, (, ), ;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero, (, ), ;, boolean]
[., getField, (, ), ., getPi, (, ), ;, final, Dfp, zero, =, a, ., getField, (, ), ., getZero]
[;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), )]
[., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder, (, pi, ., multiply]
[., getField, (, ), ., getZero, (, ), ;, boolean, neg, =, false, ;, Dfp, x, =, a, ., remainder]
[;, Dfp, x, =, a, ., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, .]
[;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, }]
[., remainder, (, pi, ., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), )]
[), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;]
[., multiply, (, 2, ), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x]
[), ), ;, if, (, x, ., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, )]
[), {, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, pi, ., divide]
[., lessThan, (, zero, ), ), {, x, =, x, ., negate, (, ), ;, }, if, (, x, .]
[), ), {, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, pi, .]
[=, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, )]
[;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =, pi]
[., negate, (, ), ;, }, if, (, x, ., greaterThan, (, pi, ., divide, (, 2, ), ), )]
[), {, x, =, pi, ., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;, if]
[., greaterThan, (, pi, ., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (, x, )]
[), ), {, x, =, pi, ., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;]
[., divide, (, 2, ), ), ), {, x, =, pi, ., subtract, (, x, ), ;, neg, =, true]
[), ), ), {, x, =, pi, ., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y]
[=, pi, ., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;, if, (, x, .]
[;, neg, =, true, ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (, 4]
[., subtract, (, x, ), ;, neg, =, true, ;, }, Dfp, y, ;, if, (, x, ., lessThan, (]
[), ;, neg, =, true, ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (]
[=, true, ;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (, 4, ), )]
[;, }, Dfp, y, ;, if, (, x, ., lessThan, (, pi, ., divide, (, 4, ), ), ), {]
[), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x, ;]
[., lessThan, (, pi, ., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, []
[), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =, x]
[., divide, (, 4, ), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c]
[), ), ), {, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, c, [, 0, ], =]
[;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, cosInternal, (, c]
[], ;, c, [, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, cosInternal, (]
[=, x, ;, c, [, 1, ], =, zero, ;, y, =, cosInternal, (, c, ), ;, }, else, {]
[[, 0, ], =, x, ;, c, [, 1, ], =, zero, ;, y, =, cosInternal, (, c, ), ;]
[], =, x, ;, c, [, 1, ], =, zero, ;, y, =, cosInternal, (, c, ), ;, }, else]
[;, c, [, 1, ], =, zero, ;, y, =, cosInternal, (, c, ), ;, }, else, {, final, Dfp]
[=, zero, ;, y, =, cosInternal, (, c, ), ;, }, else, {, final, Dfp, c, [, ], =, new]
[[, 1, ], =, zero, ;, y, =, cosInternal, (, c, ), ;, }, else, {, final, Dfp, c, []
[], =, zero, ;, y, =, cosInternal, (, c, ), ;, }, else, {, final, Dfp, c, [, ], =]
[;, y, =, cosInternal, (, c, ), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, []
[=, cosInternal, (, c, ), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ]]
[;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, [, ]]
[), ;, }, else, {, final, Dfp, c, [, ], =, new, Dfp, [, 2, ], ;, final, Dfp, []
[;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0]
[], ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, c, []
[;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, )]
[., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), .]
[., getField, (, ), ., getPiSplit, (, ), ;, c, [, 0, ], =, piSplit, [, 0, ], ., divide]
[=, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ]]
[[, 0, ], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c]
[], =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1]
[;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal, (]
[., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, )]
[., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ]]
[[, 0, ], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit]
[], ., divide, (, 2, ), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1]
[), ., subtract, (, x, ), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2]
[), ;, c, [, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal]
[=, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if]
[[, 1, ], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal, (, c, )]
[], =, piSplit, [, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }]
[;, y, =, sinInternal, (, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (]
[., divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if, (, neg, ), {, y]
[[, 1, ], ., divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if, (, neg]
[], ., divide, (, 2, ), ;, y, =, sinInternal, (, c, ), ;, }, if, (, neg, ), {]
[), ;, y, =, sinInternal, (, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate]
[=, sinInternal, (, c, ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;]
[;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance]
[), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, .]
[), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }]
[=, y, ., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp]
[;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, tan, (, final, Dfp, a, )]
[., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, tan, (]
[;, }, public, static, Dfp, tan, (, final, Dfp, a, ), {, return, sin, (, a, ), ., divide, (]
[., newInstance, (, y, ), ;, }, public, static, Dfp, tan, (, final, Dfp, a, ), {, return, sin, (]
[), ;, }, public, static, Dfp, tan, (, final, Dfp, a, ), {, return, sin, (, a, ), ., divide]
[;, }, protected, static, Dfp, atanInternal, (, final, Dfp, a, ), {, Dfp, y, =, new, Dfp, (, a, )]
[., divide, (, cos, (, a, ), ), ;, }, protected, static, Dfp, atanInternal, (, final, Dfp, a, ), {]
[), ., divide, (, cos, (, a, ), ), ;, }, protected, static, Dfp, atanInternal, (, final, Dfp, a, )]
[), ;, }, protected, static, Dfp, atanInternal, (, final, Dfp, a, ), {, Dfp, y, =, new, Dfp, (, a]
[), ), ;, }, protected, static, Dfp, atanInternal, (, final, Dfp, a, ), {, Dfp, y, =, new, Dfp, (]
[;, Dfp, x, =, new, Dfp, (, y, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for]
[), ;, Dfp, x, =, new, Dfp, (, y, ), ;, Dfp, py, =, new, Dfp, (, y, ), ;]
[;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <, 90]
[), ;, Dfp, py, =, new, Dfp, (, y, ), ;, for, (, int, i, =, 3, ;, i, <]
[;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =, x]
[), ;, for, (, int, i, =, 3, ;, i, <, 90, ;, i, +=, 2, ), {, x, =]
[;, i, <, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x]
[;, i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply]
[<, 90, ;, i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x, =, x]
[;, i, +=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply]
[+=, 2, ), {, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply, (, a]
[), {, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., multiply, (, a, ), ;]
[=, x, ., multiply, (, a, ), ;, x, =, x, ., multiply, (, a, ), ;, x, =, x]
[;, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y, =]
[., multiply, (, a, ), ;, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., negate]
[), ;, x, =, x, ., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y]
[=, x, ., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y, =, y, .]
[;, x, =, x, ., negate, (, ), ;, y, =, y, ., add, (, x, ., divide, (, i]
[., multiply, (, a, ), ;, x, =, x, ., negate, (, ), ;, y, =, y, ., add, (]
[), ;, x, =, x, ., negate, (, ), ;, y, =, y, ., add, (, x, ., divide, (]
[=, x, ., negate, (, ), ;, y, =, y, ., add, (, x, ., divide, (, i, ), )]
[;, y, =, y, ., add, (, x, ., divide, (, i, ), ), ;, if, (, y, ., equals]
[., negate, (, ), ;, y, =, y, ., add, (, x, ., divide, (, i, ), ), ;, if]
[=, y, ., add, (, x, ., divide, (, i, ), ), ;, if, (, y, ., equals, (, py]
[;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y]
[., add, (, x, ., divide, (, i, ), ), ;, if, (, y, ., equals, (, py, ), )]
[), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (]
[., divide, (, i, ), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }]
[), ), ;, if, (, y, ., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp]
[), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static]
[., equals, (, py, ), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return]
[), ), {, break, ;, }, py, =, new, Dfp, (, y, ), ;, }, return, y, ;, }, public]
[=, new, Dfp, (, y, ), ;, }, return, y, ;, }, public, static, Dfp, atan, (, final, Dfp, a]
[;, }, return, y, ;, }, public, static, Dfp, atan, (, final, Dfp, a, ), {, final, Dfp, zero, =]
[), ;, }, return, y, ;, }, public, static, Dfp, atan, (, final, Dfp, a, ), {, final, Dfp, zero]
[;, }, public, static, Dfp, atan, (, final, Dfp, a, ), {, final, Dfp, zero, =, a, ., getField, (]
[;, final, Dfp, one, =, a, ., getField, (, ), ., getOne, (, ), ;, final, Dfp, [, ], sqr2Split]
[., getZero, (, ), ;, final, Dfp, one, =, a, ., getField, (, ), ., getOne, (, ), ;, final]
[., getField, (, ), ., getZero, (, ), ;, final, Dfp, one, =, a, ., getField, (, ), ., getOne]
[;, final, Dfp, [, ], sqr2Split, =, a, ., getField, (, ), ., getSqr2Split, (, ), ;, final, Dfp, []
[., getOne, (, ), ;, final, Dfp, [, ], sqr2Split, =, a, ., getField, (, ), ., getSqr2Split, (, )]
[., getField, (, ), ., getOne, (, ), ;, final, Dfp, [, ], sqr2Split, =, a, ., getField, (, )]
[;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, ), ;, boolean, recp, =]
[., getSqr2Split, (, ), ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, ), ., getPiSplit, (, )]
[., getField, (, ), ., getSqr2Split, (, ), ;, final, Dfp, [, ], piSplit, =, a, ., getField, (, )]
[;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =]
[., getPiSplit, (, ), ;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean, sub, =, false, ;]
[., getField, (, ), ., getPiSplit, (, ), ;, boolean, recp, =, false, ;, boolean, neg, =, false, ;, boolean]
[;, boolean, neg, =, false, ;, boolean, sub, =, false, ;, final, Dfp, ty, =, sqr2Split, [, 0, ], .]
[;, boolean, sub, =, false, ;, final, Dfp, ty, =, sqr2Split, [, 0, ], ., subtract, (, one, ), .]
[;, final, Dfp, ty, =, sqr2Split, [, 0, ], ., subtract, (, one, ), ., add, (, sqr2Split, [, 1]
[;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (, zero, ), ), {]
[., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (]
[., subtract, (, one, ), ., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =, new, Dfp, (]
[[, 0, ], ., subtract, (, one, ), ., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =]
[], ., subtract, (, one, ), ., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =, new, Dfp]
[), ., add, (, sqr2Split, [, 1, ], ), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if]
[), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (, zero, ), )]
[[, 1, ], ), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (]
[], ), ;, Dfp, x, =, new, Dfp, (, a, ), ;, if, (, x, ., lessThan, (, zero, )]
[;, if, (, x, ., lessThan, (, zero, ), ), {, neg, =, true, ;, x, =, x, ., negate]
[), ;, if, (, x, ., lessThan, (, zero, ), ), {, neg, =, true, ;, x, =, x, .]
[), {, neg, =, true, ;, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan]
[., lessThan, (, zero, ), ), {, neg, =, true, ;, x, =, x, ., negate, (, ), ;, }]
[), ), {, neg, =, true, ;, x, =, x, ., negate, (, ), ;, }, if, (, x, .]
[=, true, ;, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, one, )]
[;, x, =, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {]
[=, x, ., negate, (, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {, recp, =]
[;, }, if, (, x, ., greaterThan, (, one, ), ), {, recp, =, true, ;, x, =, one, .]
[., negate, (, ), ;, }, if, (, x, ., greaterThan, (, one, ), ), {, recp, =, true, ;]
[), {, recp, =, true, ;, x, =, one, ., divide, (, x, ), ;, }, if, (, x, .]
[., greaterThan, (, one, ), ), {, recp, =, true, ;, x, =, one, ., divide, (, x, ), ;]
[), ), {, recp, =, true, ;, x, =, one, ., divide, (, x, ), ;, }, if, (, x]
[=, true, ;, x, =, one, ., divide, (, x, ), ;, }, if, (, x, ., greaterThan, (, ty]
[;, x, =, one, ., divide, (, x, ), ;, }, if, (, x, ., greaterThan, (, ty, ), )]
[=, one, ., divide, (, x, ), ;, }, if, (, x, ., greaterThan, (, ty, ), ), {, Dfp]
[;, }, if, (, x, ., greaterThan, (, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp, []
[., divide, (, x, ), ;, }, if, (, x, ., greaterThan, (, ty, ), ), {, Dfp, sty, []
[), ;, }, if, (, x, ., greaterThan, (, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp]
[), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;, sty, [, 0]
[., greaterThan, (, ty, ), ), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =]
[), ), {, Dfp, sty, [, ], =, new, Dfp, [, 2, ], ;, sub, =, true, ;, sty, []
[;, sub, =, true, ;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;]
[], ;, sub, =, true, ;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, )]
[=, true, ;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, []
[;, sty, [, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ]]
[=, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split, [, 1, ]]
[[, 0, ], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split]
[], =, sqr2Split, [, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split, [, 1]
[;, sty, [, 1, ], =, sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =, split, (, x, )]
[., subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split, [, 1, ], ;, Dfp, [, ], xs]
[[, 0, ], ., subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split, [, 1, ], ;, Dfp]
[], ., subtract, (, one, ), ;, sty, [, 1, ], =, sqr2Split, [, 1, ], ;, Dfp, [, ]]
[), ;, sty, [, 1, ], =, sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =, split, (, x]
[=, sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ], ds]
[[, 1, ], =, sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp]
[], =, sqr2Split, [, 1, ], ;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ]]
[;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,]
[[, 1, ], ;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult]
[], ;, Dfp, [, ], xs, =, split, (, x, ), ;, Dfp, [, ], ds, =, splitMult, (, xs]
[;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;, ds, [, 0, ], =, ds, []
[), ;, Dfp, [, ], ds, =, splitMult, (, xs, ,, sty, ), ;, ds, [, 0, ], =, ds]
[;, ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ]]
[,, sty, ), ;, ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs]
[), ;, ds, [, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0]
[=, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0, ]]
[[, 0, ], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =, xs]
[], =, ds, [, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0]
[;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs]
[., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty, []
[[, 0, ], ., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract]
[], ., add, (, one, ), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty]
[), ;, xs, [, 0, ], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;]
[=, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =, xs]
[[, 0, ], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1]
[], =, xs, [, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =]
[;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs]
[., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract]
[[, 0, ], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =, xs, [, 1]
[], ., subtract, (, sty, [, 0, ], ), ;, xs, [, 1, ], =, xs, [, 1, ], .]
[), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;]
[[, 0, ], ), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1]
[], ), ;, xs, [, 1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], )]
[=, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,]
[[, 1, ], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv]
[], =, xs, [, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs]
[;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ], ., add, (, xs]
[., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =]
[[, 1, ], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, )]
[], ., subtract, (, sty, [, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x]
[), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ], ., add, (]
[[, 1, ], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ]]
[], ), ;, xs, =, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ], ., add]
[=, splitDiv, (, xs, ,, ds, ), ;, x, =, xs, [, 0, ], ., add, (, xs, [, 1]
[;, x, =, xs, [, 0, ], ., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =]
[,, ds, ), ;, x, =, xs, [, 0, ], ., add, (, xs, [, 1, ], ), ;, }]
[), ;, x, =, xs, [, 0, ], ., add, (, xs, [, 1, ], ), ;, }, Dfp, y]
[=, xs, [, 0, ], ., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =, atanInternal, (]
[;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =, y, ., add]
[., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (]
[[, 0, ], ., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, )]
[], ., add, (, xs, [, 1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if]
[), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =, y, .]
[[, 1, ], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y]
[], ), ;, }, Dfp, y, =, atanInternal, (, x, ), ;, if, (, sub, ), {, y, =, y]
[;, if, (, sub, ), {, y, =, y, ., add, (, piSplit, [, 0, ], ., divide, (, 8]
[), ;, if, (, sub, ), {, y, =, y, ., add, (, piSplit, [, 0, ], ., divide, (]
[), {, y, =, y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add]
[=, y, ., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (, piSplit, []
[;, }, if, (, recp, ), {, y, =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract]
[., add, (, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {]
[., add, (, piSplit, [, 0, ], ., divide, (, 8, ), ), ., add, (, piSplit, [, 1, ]]
[), ., add, (, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, )]
[., divide, (, 8, ), ), ., add, (, piSplit, [, 1, ], ., divide, (, 8, ), ), ;]
[[, 0, ], ., divide, (, 8, ), ), ., add, (, piSplit, [, 1, ], ., divide, (, 8]
[], ., divide, (, 8, ), ), ., add, (, piSplit, [, 1, ], ., divide, (, 8, ), )]
[), ), ., add, (, piSplit, [, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp]
[), ;, }, if, (, recp, ), {, y, =, piSplit, [, 0, ], ., divide, (, 2, ), .]
[., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =, piSplit, [, 0, ], .]
[[, 1, ], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =, piSplit, []
[], ., divide, (, 8, ), ), ;, }, if, (, recp, ), {, y, =, piSplit, [, 0, ]]
[), ), ;, }, if, (, recp, ), {, y, =, piSplit, [, 0, ], ., divide, (, 2, )]
[), {, y, =, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add]
[=, piSplit, [, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (, piSplit, []
[;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance]
[., add, (, piSplit, [, 1, ], ., divide, (, 2, ), ), ;, }, if, (, neg, ), {]
[., subtract, (, y, ), ., add, (, piSplit, [, 1, ], ., divide, (, 2, ), ), ;, }]
[., divide, (, 2, ), ., subtract, (, y, ), ., add, (, piSplit, [, 1, ], ., divide, (]
[[, 0, ], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (, piSplit, [, 1, ]]
[], ., divide, (, 2, ), ., subtract, (, y, ), ., add, (, piSplit, [, 1, ], ., divide]
[), ., subtract, (, y, ), ., add, (, piSplit, [, 1, ], ., divide, (, 2, ), ), ;]
[), ., add, (, piSplit, [, 1, ], ., divide, (, 2, ), ), ;, }, if, (, neg, )]
[), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a, .]
[., divide, (, 2, ), ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, )]
[[, 1, ], ., divide, (, 2, ), ), ;, }, if, (, neg, ), {, y, =, y, .]
[], ., divide, (, 2, ), ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (]
[), ), ;, }, if, (, neg, ), {, y, =, y, ., negate, (, ), ;, }, return, a]
[), {, y, =, y, ., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }]
[=, y, ., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp]
[;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, asin, (, final, Dfp, a, )]
[., negate, (, ), ;, }, return, a, ., newInstance, (, y, ), ;, }, public, static, Dfp, asin, (]
[;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (, a, ., divide, (, a]
[., newInstance, (, y, ), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (]
[), ;, }, public, static, Dfp, asin, (, final, Dfp, a, ), {, return, atan, (, a, ., divide, (]
[;, }, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =, false, ;, if]
[), ;, }, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =, false, ;]
[., divide, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt]
[), ), ;, }, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result, ;, boolean, negative, =, false]
[., sqrt, (, ), ), ), ;, }, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result, ;]
[., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ), ), ;, }, public, static]
[., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ), )]
[), ., sqrt, (, ), ), ), ;, }, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp, result]
[., multiply, (, a, ), ), ., sqrt, (, ), ), ), ;, }, public, static, Dfp, acos, (, Dfp]
[), ), ., sqrt, (, ), ), ), ;, }, public, static, Dfp, acos, (, Dfp, a, ), {, Dfp]
[;, if, (, a, ., lessThan, (, a, ., getZero, (, ), ), ), {, negative, =, true, ;, }]
[), {, negative, =, true, ;, }, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, )]
[., lessThan, (, a, ., getZero, (, ), ), ), {, negative, =, true, ;, }, a, =, Dfp, .]
[), ), {, negative, =, true, ;, }, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (]
[., getZero, (, ), ), ), {, negative, =, true, ;, }, a, =, Dfp, ., copysign, (, a, ,]
[=, true, ;, }, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result]
[;, }, a, =, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan]
[=, Dfp, ., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan, (, a, .]
[;, result, =, atan, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), )]
[., copysign, (, a, ,, a, ., getOne, (, ), ), ;, result, =, atan, (, a, ., getOne, (]
[,, a, ., getOne, (, ), ), ;, result, =, atan, (, a, ., getOne, (, ), ., subtract, (]
[), ;, result, =, atan, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, )]
[., getOne, (, ), ), ;, result, =, atan, (, a, ., getOne, (, ), ., subtract, (, a, .]
[=, atan, (, a, ., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt]
[;, if, (, negative, ), {, result, =, a, ., getField, (, ), ., getPi, (, ), ., subtract, (]
[), ;, if, (, negative, ), {, result, =, a, ., getField, (, ), ., getPi, (, ), ., subtract]
[., divide, (, a, ), ), ;, if, (, negative, ), {, result, =, a, ., getField, (, ), .]
[., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {, result, =, a, .]
[., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ., divide, (, a, ), )]
[., getOne, (, ), ., subtract, (, a, ., multiply, (, a, ), ), ., sqrt, (, ), ., divide]
[), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {, result, =, a]
[., multiply, (, a, ), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative]
[), ), ., sqrt, (, ), ., divide, (, a, ), ), ;, if, (, negative, ), {, result, =]
[), ), ;, if, (, negative, ), {, result, =, a, ., getField, (, ), ., getPi, (, ), .]
[), {, result, =, a, ., getField, (, ), ., getPi, (, ), ., subtract, (, result, ), ;, }]
[=, a, ., getField, (, ), ., getPi, (, ), ., subtract, (, result, ), ;, }, return, a, .]
[;, }, return, a, ., newInstance, (, result, ), ;, }, }]
[., subtract, (, result, ), ;, }, return, a, ., newInstance, (, result, ), ;, }, }]
[., getPi, (, ), ., subtract, (, result, ), ;, }, return, a, ., newInstance, (, result, ), ;, }]
[., getField, (, ), ., getPi, (, ), ., subtract, (, result, ), ;, }, return, a, ., newInstance, (]
[), ;, }, return, a, ., newInstance, (, result, ), ;, }, }]
[;, }, }]
[., newInstance, (, result, ), ;, }, }]
[), ;, }, }]
