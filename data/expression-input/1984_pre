[util, ., Map, ., Entry, ;, class, GlobalVarReferenceMap, implements, ReferenceMap, {, private, Map, <, String, ,, ReferenceCollection, >, refMap, =]
[,, Integer, >, inputOrder, ;, GlobalVarReferenceMap, (, List, <, CompilerInput, >, inputs, ,, List, <, CompilerInput, >, externs, ), {]
[>, inputOrder, ;, GlobalVarReferenceMap, (, List, <, CompilerInput, >, inputs, ,, List, <, CompilerInput, >, externs, ), {, inputOrder, =]
[>, inputOrder, ;, GlobalVarReferenceMap, (, List, <, CompilerInput, >, inputs, ,, List, <, CompilerInput, >, externs, ), {, inputOrder, =]
[inputs, ,, List, <, CompilerInput, >, externs, ), {, inputOrder, =, Maps, ., newHashMap, (, ), ;, int, ind, =]
[), {, inputOrder, =, Maps, ., newHashMap, (, ), ;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :]
[=, Maps, ., newHashMap, (, ), ;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :, externs, ), {]
[=, Maps, ., newHashMap, (, ), ;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :, externs, ), {]
[(, ), ;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :, externs, ), {, inputOrder, ., put, (]
[(, ), ;, int, ind, =, 0, ;, for, (, CompilerInput, extern, :, externs, ), {, inputOrder, ., put, (]
[0, ;, for, (, CompilerInput, extern, :, externs, ), {, inputOrder, ., put, (, extern, ., getInputId, (, ), ,]
[(, CompilerInput, extern, :, externs, ), {, inputOrder, ., put, (, extern, ., getInputId, (, ), ,, ind, ), ;]
[(, CompilerInput, extern, :, externs, ), {, inputOrder, ., put, (, extern, ., getInputId, (, ), ,, ind, ), ;]
[put, (, extern, ., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input, :]
[., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {]
[., getInputId, (, ), ,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {]
[,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (]
[,, ind, ), ;, ind, ++, ;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (]
[;, }, for, (, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (, input, ., getInputId, (, ), ,]
[(, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (, input, ., getInputId, (, ), ,, ind, ), ;]
[(, CompilerInput, input, :, inputs, ), {, inputOrder, ., put, (, input, ., getInputId, (, ), ,, ind, ), ;]
[ind, ), ;, ind, ++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (]
[), ;, ind, ++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (, !]
[), ;, ind, ++, ;, }, }, @, Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (, !]
[Override, public, ReferenceCollection, getReferences, (, Var, var, ), {, if, (, !, var, ., isGlobal, (, ), ), {, return]
[(, Var, var, ), {, if, (, !, var, ., isGlobal, (, ), ), {, return, null, ;, }, return]
[(, Var, var, ), {, if, (, !, var, ., isGlobal, (, ), ), {, return, null, ;, }, return]
[{, if, (, !, var, ., isGlobal, (, ), ), {, return, null, ;, }, return, refMap, ., get, (]
[{, if, (, !, var, ., isGlobal, (, ), ), {, return, null, ;, }, return, refMap, ., get, (]
[., getName, (, ), ), ;, }, private, void, resetGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, globalRefMap, ), {]
[(, ), ), ;, }, private, void, resetGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, globalRefMap, ), {, refMap, =]
[(, ), ), ;, }, private, void, resetGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, globalRefMap, ), {, refMap, =]
[), {, refMap, =, Maps, ., newHashMap, (, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :]
[), {, refMap, =, Maps, ., newHashMap, (, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :]
[for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, globalRefMap, ., entrySet, (, ), ), {, Var, var, =]
[for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, globalRefMap, ., entrySet, (, ), ), {, Var, var, =]
[entry, :, globalRefMap, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (]
[entry, :, globalRefMap, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (]
[), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {]
[), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {]
[=, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {, refMap, ., put, (]
[=, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {, refMap, ., put, (]
[;, if, (, var, ., isGlobal, (, ), ), {, refMap, ., put, (, var, ., getName, (, ), ,]
[;, if, (, var, ., isGlobal, (, ), ), {, refMap, ., put, (, var, ., getName, (, ), ,]
[}, }, }, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if, (]
[}, }, }, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if, (]
[}, }, }, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if, (]
[}, void, updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if, (, refMap, ==]
[updateGlobalVarReferences, (, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if, (, refMap, ==, null, ||]
[(, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if, (, refMap, ==, null, ||, !]
[(, Map, <, Var, ,, ReferenceCollection, >, refMapPatch, ,, Node, root, ), {, if, (, refMap, ==, null, ||, !]
[refMapPatch, ,, Node, root, ), {, if, (, refMap, ==, null, ||, !, root, ., isScript, (, ), ), {]
[Node, root, ), {, if, (, refMap, ==, null, ||, !, root, ., isScript, (, ), ), {, resetGlobalVarReferences, (]
[||, !, root, ., isScript, (, ), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =]
[||, !, root, ., isScript, (, ), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =]
[), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;]
[), ), {, resetGlobalVarReferences, (, refMapPatch, ), ;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;]
[(, refMapPatch, ), ;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (]
[;, return, ;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;]
[;, }, InputId, inputId, =, root, ., getInputId, (, ), ;, Preconditions, ., checkNotNull, (, inputId, ), ;, removeScriptReferences, (]
[checkNotNull, (, inputId, ), ;, removeScriptReferences, (, inputId, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :]
[checkNotNull, (, inputId, ), ;, removeScriptReferences, (, inputId, ), ;, for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :]
[for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, refMapPatch, ., entrySet, (, ), ), {, Var, var, =]
[for, (, Entry, <, Var, ,, ReferenceCollection, >, entry, :, refMapPatch, ., entrySet, (, ), ), {, Var, var, =]
[entry, :, refMapPatch, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (]
[entry, :, refMapPatch, ., entrySet, (, ), ), {, Var, var, =, entry, ., getKey, (, ), ;, if, (]
[), {, Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {]
[Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {, replaceReferences, (]
[Var, var, =, entry, ., getKey, (, ), ;, if, (, var, ., isGlobal, (, ), ), {, replaceReferences, (]
[(, ), ;, if, (, var, ., isGlobal, (, ), ), {, replaceReferences, (, var, ., getName, (, ), ,]
[;, if, (, var, ., isGlobal, (, ), ), {, replaceReferences, (, var, ., getName, (, ), ,, inputId, ,]
[;, if, (, var, ., isGlobal, (, ), ), {, replaceReferences, (, var, ., getName, (, ), ,, inputId, ,]
[inputId, ,, entry, ., getValue, (, ), ), ;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {]
[inputId, ,, entry, ., getValue, (, ), ), ;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {]
[getValue, (, ), ), ;, }, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull, (]
[}, }, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, if, (]
[}, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, if, (, !]
[}, }, private, void, removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, if, (, !]
[removeScriptReferences, (, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, if, (, !, inputOrder, ., containsKey, (]
[;, if, (, !, inputOrder, ., containsKey, (, inputId, ), ), {, return, ;, }, for, (, ReferenceCollection, collection, :]
[;, if, (, !, inputOrder, ., containsKey, (, inputId, ), ), {, return, ;, }, for, (, ReferenceCollection, collection, :]
[), ), {, return, ;, }, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, if, (]
[), ), {, return, ;, }, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, if, (]
[{, return, ;, }, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, if, (, collection, ==]
[(, ), ), {, if, (, collection, ==, null, ), {, continue, ;, }, List, <, Reference, >, oldRefs, =]
[(, ), ), {, if, (, collection, ==, null, ), {, continue, ;, }, List, <, Reference, >, oldRefs, =]
[==, null, ), {, continue, ;, }, List, <, Reference, >, oldRefs, =, collection, ., references, ;, SourceRefRange, range, =]
[), {, continue, ;, }, List, <, Reference, >, oldRefs, =, collection, ., references, ;, SourceRefRange, range, =, findSourceRefRange, (]
[continue, ;, }, List, <, Reference, >, oldRefs, =, collection, ., references, ;, SourceRefRange, range, =, findSourceRefRange, (, oldRefs, ,]
[collection, ., references, ;, SourceRefRange, range, =, findSourceRefRange, (, oldRefs, ,, inputId, ), ;, List, <, Reference, >, newRefs, =]
[collection, ., references, ;, SourceRefRange, range, =, findSourceRefRange, (, oldRefs, ,, inputId, ), ;, List, <, Reference, >, newRefs, =]
[SourceRefRange, range, =, findSourceRefRange, (, oldRefs, ,, inputId, ), ;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList, (]
[SourceRefRange, range, =, findSourceRefRange, (, oldRefs, ,, inputId, ), ;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList, (]
[inputId, ), ;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList, (, range, ., refsBefore, (, ), ), ;]
[inputId, ), ;, List, <, Reference, >, newRefs, =, Lists, ., newArrayList, (, range, ., refsBefore, (, ), ), ;]
[<, Reference, >, newRefs, =, Lists, ., newArrayList, (, range, ., refsBefore, (, ), ), ;, newRefs, ., addAll, (]
[<, Reference, >, newRefs, =, Lists, ., newArrayList, (, range, ., refsBefore, (, ), ), ;, newRefs, ., addAll, (]
[newArrayList, (, range, ., refsBefore, (, ), ), ;, newRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;]
[newArrayList, (, range, ., refsBefore, (, ), ), ;, newRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;]
[refsBefore, (, ), ), ;, newRefs, ., addAll, (, range, ., refsAfter, (, ), ), ;, collection, ., references, =]
[;, }, }, private, void, replaceReferences, (, String, varName, ,, InputId, inputId, ,, ReferenceCollection, newSourceCollection, ), {, ReferenceCollection, combined, =]
[inputId, ,, ReferenceCollection, newSourceCollection, ), {, ReferenceCollection, combined, =, new, ReferenceCollection, (, ), ;, List, <, Reference, >, combinedRefs, =]
[inputId, ,, ReferenceCollection, newSourceCollection, ), {, ReferenceCollection, combined, =, new, ReferenceCollection, (, ), ;, List, <, Reference, >, combinedRefs, =]
[combined, =, new, ReferenceCollection, (, ), ;, List, <, Reference, >, combinedRefs, =, combined, ., references, ;, ReferenceCollection, oldCollection, =]
[combined, =, new, ReferenceCollection, (, ), ;, List, <, Reference, >, combinedRefs, =, combined, ., references, ;, ReferenceCollection, oldCollection, =]
[(, ), ;, List, <, Reference, >, combinedRefs, =, combined, ., references, ;, ReferenceCollection, oldCollection, =, refMap, ., get, (]
[List, <, Reference, >, combinedRefs, =, combined, ., references, ;, ReferenceCollection, oldCollection, =, refMap, ., get, (, varName, ), ;]
[List, <, Reference, >, combinedRefs, =, combined, ., references, ;, ReferenceCollection, oldCollection, =, refMap, ., get, (, varName, ), ;]
[combinedRefs, =, combined, ., references, ;, ReferenceCollection, oldCollection, =, refMap, ., get, (, varName, ), ;, refMap, ., put, (]
[combined, ., references, ;, ReferenceCollection, oldCollection, =, refMap, ., get, (, varName, ), ;, refMap, ., put, (, varName, ,]
[oldCollection, =, refMap, ., get, (, varName, ), ;, refMap, ., put, (, varName, ,, combined, ), ;, if, (]
[oldCollection, =, refMap, ., get, (, varName, ), ;, refMap, ., put, (, varName, ,, combined, ), ;, if, (]
[refMap, ., get, (, varName, ), ;, refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==]
[(, varName, ), ;, refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null, ), {]
[(, varName, ), ;, refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null, ), {]
[refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null, ), {, combinedRefs, ., addAll, (]
[refMap, ., put, (, varName, ,, combined, ), ;, if, (, oldCollection, ==, null, ), {, combinedRefs, ., addAll, (]
[oldCollection, ==, null, ), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =]
[null, ), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (]
[null, ), {, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (]
[., addAll, (, newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,]
[newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;]
[newSourceCollection, ., references, ), ;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;]
[;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;, combinedRefs, ., addAll, (]
[;, return, ;, }, SourceRefRange, range, =, findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;, combinedRefs, ., addAll, (]
[findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;]
[findSourceRefRange, (, oldCollection, ., references, ,, inputId, ), ;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;]
[references, ,, inputId, ), ;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (]
[references, ,, inputId, ), ;, combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (]
[combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;]
[combinedRefs, ., addAll, (, range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;]
[range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, combinedRefs, ., addAll, (]
[range, ., refsBefore, (, ), ), ;, combinedRefs, ., addAll, (, newSourceCollection, ., references, ), ;, combinedRefs, ., addAll, (]
[refsAfter, (, ), ), ;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference, >, refList, ,, InputId, inputId, ), {]
[refsAfter, (, ), ), ;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference, >, refList, ,, InputId, inputId, ), {]
[;, }, private, SourceRefRange, findSourceRefRange, (, List, <, Reference, >, refList, ,, InputId, inputId, ), {, Preconditions, ., checkNotNull, (]
[List, <, Reference, >, refList, ,, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, int, lastBefore, =]
[<, Reference, >, refList, ,, InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, int, lastBefore, =, -]
[InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, int, lastBefore, =, -, 1, ;, int, firstAfter, =]
[InputId, inputId, ), {, Preconditions, ., checkNotNull, (, inputId, ), ;, int, lastBefore, =, -, 1, ;, int, firstAfter, =]
[), ;, int, lastBefore, =, -, 1, ;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =]
[int, lastBefore, =, -, 1, ;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =, 0, ;]
[int, lastBefore, =, -, 1, ;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =, 0, ;]
[1, ;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (]
[1, ;, int, firstAfter, =, refList, ., size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (]
[=, refList, ., size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (, inputOrder, ., containsKey, (]
[size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (, inputOrder, ., containsKey, (, inputId, ), ,]
[size, (, ), ;, int, index, =, 0, ;, Preconditions, ., checkState, (, inputOrder, ., containsKey, (, inputId, ), ,]
[., checkState, (, inputOrder, ., containsKey, (, inputId, ), ,, inputId, ., getIdName, (, ), ), ;, int, sourceInputOrder, =]
[., checkState, (, inputOrder, ., containsKey, (, inputId, ), ,, inputId, ., getIdName, (, ), ), ;, int, sourceInputOrder, =]
[., containsKey, (, inputId, ), ,, inputId, ., getIdName, (, ), ), ;, int, sourceInputOrder, =, inputOrder, ., get, (]
[getIdName, (, ), ), ;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref, :]
[), ;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref, :, refList, ), {]
[), ;, int, sourceInputOrder, =, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref, :, refList, ), {]
[=, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref, :, refList, ), {, Preconditions, ., checkNotNull, (]
[=, inputOrder, ., get, (, inputId, ), ;, for, (, Reference, ref, :, refList, ), {, Preconditions, ., checkNotNull, (]
[Reference, ref, :, refList, ), {, Preconditions, ., checkNotNull, (, ref, ., getInputId, (, ), ), ;, int, order, =]
[Reference, ref, :, refList, ), {, Preconditions, ., checkNotNull, (, ref, ., getInputId, (, ), ), ;, int, order, =]
[), {, Preconditions, ., checkNotNull, (, ref, ., getInputId, (, ), ), ;, int, order, =, inputOrder, ., get, (]
[), {, Preconditions, ., checkNotNull, (, ref, ., getInputId, (, ), ), ;, int, order, =, inputOrder, ., get, (]
[(, ), ), ;, int, order, =, inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;, if, (]
[(, ), ), ;, int, order, =, inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;, if, (]
[), ;, int, order, =, inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;, if, (, order, <]
[order, =, inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;, if, (, order, <, sourceInputOrder, ), {]
[inputOrder, ., get, (, ref, ., getInputId, (, ), ), ;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =]
[getInputId, (, ), ), ;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (]
[getInputId, (, ), ), ;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (]
[), ), ;, if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (, order, >]
[if, (, order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {]
[order, <, sourceInputOrder, ), {, lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =]
[lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }]
[lastBefore, =, index, ;, }, else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }]
[else, if, (, order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }, index, ++, ;, }, return]
[order, >, sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (]
[sourceInputOrder, ), {, firstAfter, =, index, ;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (, refList, ,]
[{, firstAfter, =, index, ;, break, ;, }, index, ++, ;, }, return, new, SourceRefRange, (, refList, ,, lastBefore, ,]
[<, Reference, >, refList, ;, SourceRefRange, (, List, <, Reference, >, refList, ,, int, lastBefore, ,, int, firstAfter, ), {]
[<, Reference, >, refList, ;, SourceRefRange, (, List, <, Reference, >, refList, ,, int, lastBefore, ,, int, firstAfter, ), {]
[;, SourceRefRange, (, List, <, Reference, >, refList, ,, int, lastBefore, ,, int, firstAfter, ), {, this, ., lastBefore, =]
[;, SourceRefRange, (, List, <, Reference, >, refList, ,, int, lastBefore, ,, int, firstAfter, ), {, this, ., lastBefore, =]
[<, Reference, >, refList, ,, int, lastBefore, ,, int, firstAfter, ), {, this, ., lastBefore, =, Math, ., max, (]
[>, refList, ,, int, lastBefore, ,, int, firstAfter, ), {, this, ., lastBefore, =, Math, ., max, (, lastBefore, ,]
[refList, ,, int, lastBefore, ,, int, firstAfter, ), {, this, ., lastBefore, =, Math, ., max, (, lastBefore, ,, -]
[lastBefore, ,, int, firstAfter, ), {, this, ., lastBefore, =, Math, ., max, (, lastBefore, ,, -, 1, ), ;]
[lastBefore, ,, int, firstAfter, ), {, this, ., lastBefore, =, Math, ., max, (, lastBefore, ,, -, 1, ), ;]
[), {, this, ., lastBefore, =, Math, ., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =]
[), {, this, ., lastBefore, =, Math, ., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =]
[lastBefore, =, Math, ., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =, Math, ., min, (]
[Math, ., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,]
[Math, ., max, (, lastBefore, ,, -, 1, ), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,]
[1, ), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;]
[1, ), ;, this, ., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;]
[., firstAfter, =, Math, ., min, (, firstAfter, ,, refList, ., size, (, ), ), ;, this, ., refList, =]
[(, ), ), ;, this, ., refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return]
[(, ), ), ;, this, ., refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return]
[this, ., refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList, (]
[refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList, (, 0, ,]
[refList, =, refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList, (, 0, ,]
[refList, ;, }, List, <, Reference, >, refsBefore, (, ), {, return, refList, ., subList, (, 0, ,, lastBefore, +]
[., subList, (, 0, ,, lastBefore, +, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return]
[., subList, (, 0, ,, lastBefore, +, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return]
[,, lastBefore, +, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (]
[+, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (, firstAfter, ,]
[+, 1, ), ;, }, List, <, Reference, >, refsAfter, (, ), {, return, refList, ., subList, (, firstAfter, ,]
[size, (, ), ), ;, }, }, public, void, updateReferencesWithGlobalScope, (, Scope, globalScope, ), {, for, (, ReferenceCollection, collection, :]
[size, (, ), ), ;, }, }, public, void, updateReferencesWithGlobalScope, (, Scope, globalScope, ), {, for, (, ReferenceCollection, collection, :]
[), {, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, List, <, Reference, >, newRefs, =]
[), {, for, (, ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, List, <, Reference, >, newRefs, =]
[ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, List, <, Reference, >, newRefs, =, Lists, ., newArrayListWithCapacity, (]
[ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, List, <, Reference, >, newRefs, =, Lists, ., newArrayListWithCapacity, (]
[ReferenceCollection, collection, :, refMap, ., values, (, ), ), {, List, <, Reference, >, newRefs, =, Lists, ., newArrayListWithCapacity, (]
[newRefs, =, Lists, ., newArrayListWithCapacity, (, collection, ., references, ., size, (, ), ), ;, for, (, Reference, ref, :]
[newRefs, =, Lists, ., newArrayListWithCapacity, (, collection, ., references, ., size, (, ), ), ;, for, (, Reference, ref, :]
[., references, ., size, (, ), ), ;, for, (, Reference, ref, :, collection, ., references, ), {, if, (]
[., references, ., size, (, ), ), ;, for, (, Reference, ref, :, collection, ., references, ), {, if, (]
[., references, ., size, (, ), ), ;, for, (, Reference, ref, :, collection, ., references, ), {, if, (]
[), ;, for, (, Reference, ref, :, collection, ., references, ), {, if, (, ref, ., getScope, (, ), !=]
[(, Reference, ref, :, collection, ., references, ), {, if, (, ref, ., getScope, (, ), !=, globalScope, ), {]
[(, Reference, ref, :, collection, ., references, ), {, if, (, ref, ., getScope, (, ), !=, globalScope, ), {]
[collection, ., references, ), {, if, (, ref, ., getScope, (, ), !=, globalScope, ), {, newRefs, ., add, (]
[collection, ., references, ), {, if, (, ref, ., getScope, (, ), !=, globalScope, ), {, newRefs, ., add, (]
[{, if, (, ref, ., getScope, (, ), !=, globalScope, ), {, newRefs, ., add, (, ref, ., cloneWithNewScope, (]
[), !=, globalScope, ), {, newRefs, ., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {]
[), !=, globalScope, ), {, newRefs, ., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {]
[{, newRefs, ., add, (, ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs, ., add, (]
[ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs, ., add, (, ref, ), ;, }, }]
[ref, ., cloneWithNewScope, (, globalScope, ), ), ;, }, else, {, newRefs, ., add, (, ref, ), ;, }, }]
[globalScope, ), ), ;, }, else, {, newRefs, ., add, (, ref, ), ;, }, }, collection, ., references, =]
[}, }, static, class, GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, GlobalVarRefCleanupPass, (, AbstractCompiler, compiler, ), {]
[}, }, static, class, GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, GlobalVarRefCleanupPass, (, AbstractCompiler, compiler, ), {]
[GlobalVarRefCleanupPass, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, GlobalVarRefCleanupPass, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[=, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =]
[=, compiler, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =]
[hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =, compiler, ., getGlobalVarReferences, (, ), ;, if, (]
[hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =, compiler, ., getGlobalVarReferences, (, ), ;, if, (]
[Node, scriptRoot, ,, Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =, compiler, ., getGlobalVarReferences, (, ), ;, if, (, refMap, !=]
[Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =, compiler, ., getGlobalVarReferences, (, ), ;, if, (, refMap, !=, null, ), {]
[Node, originalRoot, ), {, GlobalVarReferenceMap, refMap, =, compiler, ., getGlobalVarReferences, (, ), ;, if, (, refMap, !=, null, ), {]
[GlobalVarReferenceMap, refMap, =, compiler, ., getGlobalVarReferences, (, ), ;, if, (, refMap, !=, null, ), {, refMap, ., updateReferencesWithGlobalScope, (]
[GlobalVarReferenceMap, refMap, =, compiler, ., getGlobalVarReferences, (, ), ;, if, (, refMap, !=, null, ), {, refMap, ., updateReferencesWithGlobalScope, (]
