[;, private, static, final, char, SEPARATOR, =, ':', ;, VariableMap, (, Map, <, String, ,, String, >, map, ), {]
[;, VariableMap, (, Map, <, String, ,, String, >, map, ), {, this, ., map, =, ImmutableMap, ., copyOf, (]
[=, ImmutableMap, ., copyOf, (, map, ), ;, }, public, String, lookupNewName, (, String, sourceName, ), {, return, map, .]
[., map, =, ImmutableMap, ., copyOf, (, map, ), ;, }, public, String, lookupNewName, (, String, sourceName, ), {, return]
[;, }, public, String, lookupNewName, (, String, sourceName, ), {, return, map, ., get, (, sourceName, ), ;, }, public]
[., copyOf, (, map, ), ;, }, public, String, lookupNewName, (, String, sourceName, ), {, return, map, ., get, (]
[), ;, }, public, String, lookupNewName, (, String, sourceName, ), {, return, map, ., get, (, sourceName, ), ;, }]
[;, }, public, String, lookupSourceName, (, String, newName, ), {, initReverseMap, (, ), ;, return, reverseMap, ., get, (, newName]
[., get, (, sourceName, ), ;, }, public, String, lookupSourceName, (, String, newName, ), {, initReverseMap, (, ), ;, return]
[), ;, }, public, String, lookupSourceName, (, String, newName, ), {, initReverseMap, (, ), ;, return, reverseMap, ., get, (]
[;, return, reverseMap, ., get, (, newName, ), ;, }, private, synchronized, void, initReverseMap, (, ), {, if, (, reverseMap]
[;, }, private, synchronized, void, initReverseMap, (, ), {, if, (, reverseMap, ==, null, ), {, ImmutableMap, ., Builder, <]
[., get, (, newName, ), ;, }, private, synchronized, void, initReverseMap, (, ), {, if, (, reverseMap, ==, null, )]
[), ;, }, private, synchronized, void, initReverseMap, (, ), {, if, (, reverseMap, ==, null, ), {, ImmutableMap, ., Builder]
[), {, ImmutableMap, ., Builder, <, String, ,, String, >, rm, =, ImmutableMap, ., builder, (, ), ;, for, (]
[==, null, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, rm, =, ImmutableMap, ., builder, (, ), ;]
[), {, ImmutableMap, ., Builder, <, String, ,, String, >, rm, =, ImmutableMap, ., builder, (, ), ;, for, (]
[;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, ), ), {]
[., builder, (, ), ;, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet]
[), {, rm, ., put, (, entry, ., getValue, (, ), ,, entry, ., getKey, (, ), ), ;, }]
[., entrySet, (, ), ), {, rm, ., put, (, entry, ., getValue, (, ), ,, entry, ., getKey, (]
[;, }, reverseMap, =, rm, ., build, (, ), ;, }, }, public, Map, <, String, ,, String, >, getOriginalNameToNewNameMap]
[., put, (, entry, ., getValue, (, ), ,, entry, ., getKey, (, ), ), ;, }, reverseMap, =, rm]
[,, entry, ., getKey, (, ), ), ;, }, reverseMap, =, rm, ., build, (, ), ;, }, }, public]
[., getValue, (, ), ,, entry, ., getKey, (, ), ), ;, }, reverseMap, =, rm, ., build, (, )]
[), ;, }, reverseMap, =, rm, ., build, (, ), ;, }, }, public, Map, <, String, ,, String, >]
[., getKey, (, ), ), ;, }, reverseMap, =, rm, ., build, (, ), ;, }, }, public, Map, <]
[=, rm, ., build, (, ), ;, }, }, public, Map, <, String, ,, String, >, getOriginalNameToNewNameMap, (, ), {]
[;, }, }, public, Map, <, String, ,, String, >, getOriginalNameToNewNameMap, (, ), {, return, map, ;, }, public, Map]
[., build, (, ), ;, }, }, public, Map, <, String, ,, String, >, getOriginalNameToNewNameMap, (, ), {, return, map]
[;, }, public, Map, <, String, ,, String, >, getNewNameToOriginalNameMap, (, ), {, initReverseMap, (, ), ;, return, reverseMap, ;]
[;, return, reverseMap, ;, }, public, void, save, (, String, filename, ), throws, IOException, {, Files, ., write, (, toBytes]
[;, }, public, void, save, (, String, filename, ), throws, IOException, {, Files, ., write, (, toBytes, (, ), ,]
[;, }, public, static, VariableMap, load, (, String, filename, ), throws, IOException, {, try, {, return, fromBytes, (, Files, .]
[., write, (, toBytes, (, ), ,, new, File, (, filename, ), ), ;, }, public, static, VariableMap, load, (]
[,, new, File, (, filename, ), ), ;, }, public, static, VariableMap, load, (, String, filename, ), throws, IOException, {]
[), ;, }, public, static, VariableMap, load, (, String, filename, ), throws, IOException, {, try, {, return, fromBytes, (, Files]
[), ), ;, }, public, static, VariableMap, load, (, String, filename, ), throws, IOException, {, try, {, return, fromBytes, (]
[;, }, catch, (, ParseException, e, ), {, throw, new, IOException, (, e, ), ;, }, }, public, byte, []
[), ;, }, catch, (, ParseException, e, ), {, throw, new, IOException, (, e, ), ;, }, }, public, byte]
[., toByteArray, (, new, File, (, filename, ), ), ), ;, }, catch, (, ParseException, e, ), {, throw, new]
[), ), ;, }, catch, (, ParseException, e, ), {, throw, new, IOException, (, e, ), ;, }, }, public]
[), ), ), ;, }, catch, (, ParseException, e, ), {, throw, new, IOException, (, e, ), ;, }, }]
[;, }, }, public, byte, [, ], toBytes, (, ), {, ByteArrayOutputStream, baos, =, new, ByteArrayOutputStream, (, ), ;, Writer]
[), ;, }, }, public, byte, [, ], toBytes, (, ), {, ByteArrayOutputStream, baos, =, new, ByteArrayOutputStream, (, ), ;]
[;, Writer, writer, =, new, OutputStreamWriter, (, baos, ,, Charsets, ., UTF_8, ), ;, try, {, for, (, Map, .]
[;, try, {, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (, )]
[,, Charsets, ., UTF_8, ), ;, try, {, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[), ;, try, {, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, ., entrySet, (]
[., UTF_8, ), ;, try, {, for, (, Map, ., Entry, <, String, ,, String, >, entry, :, map, .]
[), {, writer, ., write, (, escape, (, entry, ., getKey, (, ), ), ), ;, writer, ., write, (]
[., entrySet, (, ), ), {, writer, ., write, (, escape, (, entry, ., getKey, (, ), ), ), ;]
[;, writer, ., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (, entry, ., getValue, (, ), )]
[., write, (, escape, (, entry, ., getKey, (, ), ), ), ;, writer, ., write, (, SEPARATOR, ), ;]
[), ;, writer, ., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (, entry, ., getValue, (, )]
[), ), ;, writer, ., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (, entry, ., getValue, (]
[., getKey, (, ), ), ), ;, writer, ., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (]
[;, writer, ., write, (, escape, (, entry, ., getValue, (, ), ), ), ;, writer, ., write, (, '\n']
[., write, (, SEPARATOR, ), ;, writer, ., write, (, escape, (, entry, ., getValue, (, ), ), ), ;]
[), ;, writer, ., write, (, escape, (, entry, ., getValue, (, ), ), ), ;, writer, ., write, (]
[;, writer, ., write, (, '\n', ), ;, }, writer, ., close, (, ), ;, }, catch, (, IOException, e]
[., write, (, escape, (, entry, ., getValue, (, ), ), ), ;, writer, ., write, (, '\n', ), ;]
[), ;, writer, ., write, (, '\n', ), ;, }, writer, ., close, (, ), ;, }, catch, (, IOException]
[), ), ;, writer, ., write, (, '\n', ), ;, }, writer, ., close, (, ), ;, }, catch, (]
[., getValue, (, ), ), ), ;, writer, ., write, (, '\n', ), ;, }, writer, ., close, (, )]
[;, }, writer, ., close, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e]
[., write, (, '\n', ), ;, }, writer, ., close, (, ), ;, }, catch, (, IOException, e, ), {]
[), ;, }, writer, ., close, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (]
[;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, return, baos, ., toByteArray]
[., close, (, ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }]
[;, }, return, baos, ., toByteArray, (, ), ;, }, public, static, VariableMap, fromBytes, (, byte, [, ], bytes, )]
[), ;, }, return, baos, ., toByteArray, (, ), ;, }, public, static, VariableMap, fromBytes, (, byte, [, ], bytes]
[;, }, public, static, VariableMap, fromBytes, (, byte, [, ], bytes, ), throws, ParseException, {, Iterable, <, String, >, lines]
[., toByteArray, (, ), ;, }, public, static, VariableMap, fromBytes, (, byte, [, ], bytes, ), throws, ParseException, {, Iterable]
[=, CharStreams, ., readLines, (, CharStreams, ., newReaderSupplier, (, ByteStreams, ., newInputStreamSupplier, (, bytes, ), ,, Charsets, ., UTF_8, )]
[;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, ImmutableMap, ., Builder, <]
[., readLines, (, CharStreams, ., newReaderSupplier, (, ByteStreams, ., newInputStreamSupplier, (, bytes, ), ,, Charsets, ., UTF_8, ), ), ;]
[), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, ImmutableMap, ., Builder]
[., newReaderSupplier, (, ByteStreams, ., newInputStreamSupplier, (, bytes, ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException]
[,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, )]
[., newInputStreamSupplier, (, bytes, ), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw]
[), ,, Charsets, ., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e]
[), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }, ImmutableMap, .]
[., UTF_8, ), ), ;, }, catch, (, IOException, e, ), {, throw, new, RuntimeException, (, e, ), ;, }]
[;, }, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (]
[), ;, }, ImmutableMap, ., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for]
[;, for, (, String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if]
[., builder, (, ), ;, for, (, String, line, :, lines, ), {, int, pos, =, findIndexOfChar, (, line, ,]
[), {, int, pos, =, findIndexOfChar, (, line, ,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||, pos, ==]
[;, if, (, pos, <=, 0, ||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new]
[,, SEPARATOR, ), ;, if, (, pos, <=, 0, ||, pos, ==, line, ., length, (, ), -, 1, )]
[), ;, if, (, pos, <=, 0, ||, pos, ==, line, ., length, (, ), -, 1, ), {, throw]
[), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (]
[||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,]
[<=, 0, ||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +]
[||, pos, ==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,]
[), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (]
[==, line, ., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, )]
[), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (]
[-, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (]
[., length, (, ), -, 1, ), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }]
[), {, throw, new, ParseException, (, "Bad line: ", +, line, ,, 0, ), ;, }, map, ., put, (, unescape, (]
[;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape, (]
[,, 0, ), ;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), )]
[+, line, ,, 0, ), ;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos]
[,, 0, ), ;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), )]
[), ;, }, map, ., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape]
[;, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String, escape, (, String]
[., put, (, unescape, (, line, ., substring, (, 0, ,, pos, ), ), ,, unescape, (, line, ., substring]
[,, unescape, (, line, ., substring, (, pos, +, 1, ), ), ), ;, }, return, new, VariableMap, (, map]
[), ,, unescape, (, line, ., substring, (, pos, +, 1, ), ), ), ;, }, return, new, VariableMap, (]
[., substring, (, 0, ,, pos, ), ), ,, unescape, (, line, ., substring, (, pos, +, 1, ), )]
[,, pos, ), ), ,, unescape, (, line, ., substring, (, pos, +, 1, ), ), ), ;, }, return]
[), ), ,, unescape, (, line, ., substring, (, pos, +, 1, ), ), ), ;, }, return, new, VariableMap]
[), ;, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String, escape, (]
[), ), ;, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String, escape]
[., substring, (, pos, +, 1, ), ), ), ;, }, return, new, VariableMap, (, map, ., build, (, )]
[), ), ), ;, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String]
[+, 1, ), ), ), ;, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private]
[), ), ), ;, }, return, new, VariableMap, (, map, ., build, (, ), ), ;, }, private, static, String]
[;, }, private, static, String, escape, (, String, value, ), {, return, value, ., replace, (, "\\", ,, "\\\\", )]
[), ;, }, private, static, String, escape, (, String, value, ), {, return, value, ., replace, (, "\\", ,, "\\\\"]
[., build, (, ), ), ;, }, private, static, String, escape, (, String, value, ), {, return, value, ., replace]
[;, }, private, static, int, findIndexOfChar, (, String, value, ,, char, stopChar, ), {, int, len, =, value, ., length]
[., replace, (, "\n", ,, "\\n", ), ;, }, private, static, int, findIndexOfChar, (, String, value, ,, char, stopChar, )]
[., replace, (, ":", ,, "\\:", ), ., replace, (, "\n", ,, "\\n", ), ;, }, private, static, int, findIndexOfChar]
[., replace, (, "\\", ,, "\\\\", ), ., replace, (, ":", ,, "\\:", ), ., replace, (, "\n", ,, "\\n"]
[,, "\\\\", ), ., replace, (, ":", ,, "\\:", ), ., replace, (, "\n", ,, "\\n", ), ;, }, private]
[), ., replace, (, ":", ,, "\\:", ), ., replace, (, "\n", ,, "\\n", ), ;, }, private, static, int]
[,, "\\:", ), ., replace, (, "\n", ,, "\\n", ), ;, }, private, static, int, findIndexOfChar, (, String, value, ,]
[), ., replace, (, "\n", ,, "\\n", ), ;, }, private, static, int, findIndexOfChar, (, String, value, ,, char, stopChar]
[,, "\\n", ), ;, }, private, static, int, findIndexOfChar, (, String, value, ,, char, stopChar, ), {, int, len, =]
[), ;, }, private, static, int, findIndexOfChar, (, String, value, ,, char, stopChar, ), {, int, len, =, value, .]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =, value]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[;, i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if]
[;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\']
[<, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c]
[;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\']
[), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i]
[++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++]
[;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i]
[., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =]
[), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (]
[), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar, ), {]
[&&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (]
[==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else]
[&&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (]
[), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar, ), {]
[<, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar]
[<, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar]
[), {, c, =, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar, ), {]
[=, value, ., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar, ), {, return, i, ;]
[;, }, else, if, (, c, ==, stopChar, ), {, return, i, ;, }, }, return, -, 1, ;, }]
[., charAt, (, i, ), ;, }, else, if, (, c, ==, stopChar, ), {, return, i, ;, }, }]
[), ;, }, else, if, (, c, ==, stopChar, ), {, return, i, ;, }, }, return, -, 1, ;]
[), {, return, i, ;, }, }, return, -, 1, ;, }, private, static, String, unescape, (, CharSequence, value, )]
[==, stopChar, ), {, return, i, ;, }, }, return, -, 1, ;, }, private, static, String, unescape, (, CharSequence]
[), {, return, i, ;, }, }, return, -, 1, ;, }, private, static, String, unescape, (, CharSequence, value, )]
[;, }, }, return, -, 1, ;, }, private, static, String, unescape, (, CharSequence, value, ), {, StringBuilder, sb, =]
[;, }, private, static, String, unescape, (, CharSequence, value, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, int]
[;, }, private, static, String, unescape, (, CharSequence, value, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, int]
[;, int, len, =, value, ., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, len]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, char, c, =, value]
[., length, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[;, i, <, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if]
[;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\']
[<, len, ;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c]
[;, i, ++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\']
[), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i]
[++, ), {, char, c, =, value, ., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++]
[;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i]
[., charAt, (, i, ), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =]
[), ;, if, (, c, ==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (]
[), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, ), ;, }]
[&&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append]
[==, '\\', &&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, sb]
[&&, ++, i, <, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append]
[), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, ), ;, }]
[<, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, )]
[<, len, ), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, )]
[), {, c, =, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, ), ;, }]
[=, value, ., charAt, (, i, ), ;, }, sb, ., append, (, c, ), ;, }, return, sb, .]
[;, }, sb, ., append, (, c, ), ;, }, return, sb, ., toString, (, ), ;, }, public, static]
[., charAt, (, i, ), ;, }, sb, ., append, (, c, ), ;, }, return, sb, ., toString, (]
[), ;, }, sb, ., append, (, c, ), ;, }, return, sb, ., toString, (, ), ;, }, public]
[;, }, return, sb, ., toString, (, ), ;, }, public, static, VariableMap, fromMap, (, Map, <, String, ,, String]
[., append, (, c, ), ;, }, return, sb, ., toString, (, ), ;, }, public, static, VariableMap, fromMap, (]
[), ;, }, return, sb, ., toString, (, ), ;, }, public, static, VariableMap, fromMap, (, Map, <, String, ,]
[;, }, public, static, VariableMap, fromMap, (, Map, <, String, ,, String, >, map, ), {, return, new, VariableMap, (]
[., toString, (, ), ;, }, public, static, VariableMap, fromMap, (, Map, <, String, ,, String, >, map, ), {]
[;, }, @, VisibleForTesting, Map, <, String, ,, String, >, toMap, (, ), {, return, map, ;, }, }]
[), ;, }, @, VisibleForTesting, Map, <, String, ,, String, >, toMap, (, ), {, return, map, ;, }, }]
[;, }, }]
