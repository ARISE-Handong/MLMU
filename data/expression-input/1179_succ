[;, public, SimpsonIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, )]
[,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, final, int]
[>, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, final, int]
[;, }, }, public, SimpsonIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException]
[,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws]
[,, false, ), ;, }, }, public, SimpsonIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,]
[), ;, }, }, public, SimpsonIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, ), {]
[>, SIMPSON_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, ), {]
[;, }, }, public, SimpsonIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, SIMPSON_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double]
[,, SIMPSON_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, SimpsonIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, SIMPSON_MAX_ITERATIONS_COUNT, ), ;]
[,, false, ), ;, }, }, public, SimpsonIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, SIMPSON_MAX_ITERATIONS_COUNT, ), ;, }, @]
[), ;, }, }, public, SimpsonIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, SIMPSON_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected]
[,, SIMPSON_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator]
[;, if, (, getMinimalIterationCount, (, ), ==, 1, ), {, return, (, 4, *, qtrap, ., stage, (, this, ,]
[), {, return, (, 4, *, qtrap, ., stage, (, this, ,, 1, ), -, qtrap, ., stage, (, this]
[==, 1, ), {, return, (, 4, *, qtrap, ., stage, (, this, ,, 1, ), -, qtrap, ., stage]
[), {, return, (, 4, *, qtrap, ., stage, (, this, ,, 1, ), -, qtrap, ., stage, (, this]
[;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,, 0, ), ;, while]
[/, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,, 0, )]
[), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,, 0]
[-, qtrap, ., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;, double]
[*, qtrap, ., stage, (, this, ,, 1, ), -, qtrap, ., stage, (, this, ,, 0, ), ), /]
[-, qtrap, ., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;, double]
[., stage, (, this, ,, 1, ), -, qtrap, ., stage, (, this, ,, 0, ), ), /, 3.0, ;]
[,, 1, ), -, qtrap, ., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =]
[), -, qtrap, ., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;]
[), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,, 0]
[., stage, (, this, ,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =]
[,, 0, ), ), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (]
[), ), /, 3.0, ;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,]
[;, }, double, olds, =, 0, ;, double, oldt, =, qtrap, ., stage, (, this, ,, 0, ), ;, while]
[;, double, oldt, =, qtrap, ., stage, (, this, ,, 0, ), ;, while, (, true, ), {, final, double]
[;, while, (, true, ), {, final, double, t, =, qtrap, ., stage, (, this, ,, iterations, ., getCount, (]
[., stage, (, this, ,, 0, ), ;, while, (, true, ), {, final, double, t, =, qtrap, ., stage]
[,, 0, ), ;, while, (, true, ), {, final, double, t, =, qtrap, ., stage, (, this, ,, iterations]
[), ;, while, (, true, ), {, final, double, t, =, qtrap, ., stage, (, this, ,, iterations, ., getCount]
[), {, final, double, t, =, qtrap, ., stage, (, this, ,, iterations, ., getCount, (, ), ), ;, iterations]
[;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -, oldt, ), /, 3.0]
[., stage, (, this, ,, iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double]
[,, iterations, ., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (, 4]
[), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -, oldt, ), /]
[., getCount, (, ), ), ;, iterations, ., incrementCount, (, ), ;, final, double, s, =, (, 4, *, t]
[;, final, double, s, =, (, 4, *, t, -, oldt, ), /, 3.0, ;, if, (, iterations, ., getCount]
[., incrementCount, (, ), ;, final, double, s, =, (, 4, *, t, -, oldt, ), /, 3.0, ;, if]
[;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, .]
[/, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =]
[), /, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta]
[-, oldt, ), /, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final]
[*, t, -, oldt, ), /, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), )]
[-, oldt, ), /, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final]
[), /, 3.0, ;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta]
[;, if, (, iterations, ., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, .]
[), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[>=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final]
[., getCount, (, ), >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, s, -]
[), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs]
[., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, .]
[-, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, .]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[*, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[+, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta]
[), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), )]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s]
[), {, return, s, ;, }, }, olds, =, s, ;, oldt, =, t, ;, }, }, }]
[||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;, oldt]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;]
[), {, return, s, ;, }, }, olds, =, s, ;, oldt, =, t, ;, }, }, }]
[), ), {, return, s, ;, }, }, olds, =, s, ;, oldt, =, t, ;, }, }, }]
[<=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;, oldt, =, t, ;]
[), ), {, return, s, ;, }, }, olds, =, s, ;, oldt, =, t, ;, }, }, }]
[;, }, }, olds, =, s, ;, oldt, =, t, ;, }, }, }]
[=, s, ;, oldt, =, t, ;, }, }, }]
[;, oldt, =, t, ;, }, }, }]
[=, t, ;, }, }, }]
[;, }, }, }]
