[,, 1, ), ;, }, public, Sigmoid, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo]
[), ;, }, public, Sigmoid, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;, this]
[=, lo, ;, this, ., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils]
[., lo, =, lo, ;, this, ., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {]
[;, this, ., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction]
[=, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), .]
[., hi, =, hi, ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this]
[;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (]
[;, }, public, double, value, (, double, x, ), {, return, value, (, x, ,, lo, ,, hi, ), ;]
[., derivative, (, ), ;, }, public, double, value, (, double, x, ), {, return, value, (, x, ,, lo]
[., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (, ), ;, }, public, double, value, (, double, x, ), {, return]
[), ., derivative, (, ), ;, }, public, double, value, (, double, x, ), {, return, value, (, x, ,]
[;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, )]
[,, lo, ,, hi, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x]
[,, hi, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double]
[), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param]
[;, return, Sigmoid, ., value, (, x, ,, param, [, 0, ], ,, param, [, 1, ], ), ;, }]
[), ;, return, Sigmoid, ., value, (, x, ,, param, [, 0, ], ,, param, [, 1, ], ), ;]
[;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[., value, (, x, ,, param, [, 0, ], ,, param, [, 1, ], ), ;, }, public, double, []
[,, param, [, 0, ], ,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double]
[,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param]
[[, 0, ], ,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,]
[], ,, param, [, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ...]
[), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException]
[[, 1, ], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws]
[], ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,]
[;, final, double, invExp1, =, 1, /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, return]
[), ;, final, double, invExp1, =, 1, /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;]
[;, return, new, double, [, ], {, 1, -, invExp1, ,, invExp1, }, ;, }, private, void, validateParameters, (, double]
[/, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, return, new, double, [, ], {, 1]
[;, return, new, double, [, ], {, 1, -, invExp1, ,, invExp1, }, ;, }, private, void, validateParameters, (, double]
[), ;, return, new, double, [, ], {, 1, -, invExp1, ,, invExp1, }, ;, }, private, void, validateParameters, (]
[+, FastMath, ., exp, (, -, x, ), ), ;, return, new, double, [, ], {, 1, -, invExp1, ,]
[), ;, return, new, double, [, ], {, 1, -, invExp1, ,, invExp1, }, ;, }, private, void, validateParameters, (]
[., exp, (, -, x, ), ), ;, return, new, double, [, ], {, 1, -, invExp1, ,, invExp1, }]
[), ), ;, return, new, double, [, ], {, 1, -, invExp1, ,, invExp1, }, ;, }, private, void, validateParameters]
[), ), ;, return, new, double, [, ], {, 1, -, invExp1, ,, invExp1, }, ;, }, private, void, validateParameters]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[,, invExp1, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if]
[-, invExp1, ,, invExp1, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException]
[,, invExp1, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if]
[}, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new]
[;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }, private, static, double, value]
[!=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }, private, static]
[., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 2, ), ;, }, }, }, private, static, double, value]
[;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {, return]
[,, 2, ), ;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi]
[., length, ,, 2, ), ;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,]
[), ;, }, }, }, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), {]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new, double]
[+, (, hi, -, lo, ), /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, }]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new, double]
[/, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure]
[), /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final]
[-, lo, ), /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, }, public, DerivativeStructure, value]
[), /, (, 1, +, FastMath, ., exp, (, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new, double]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new]
[+, FastMath, ., exp, (, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =, new]
[., exp, (, -, x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {]
[), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =]
[), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, double, [, ], f, =]
[;, final, double, exp, =, FastMath, ., exp, (, -, t, ., getValue, (, ), ), ;, if, (, Double]
[], ;, final, double, exp, =, FastMath, ., exp, (, -, t, ., getValue, (, ), ), ;, if, (]
[+, 1, ], ;, final, double, exp, =, FastMath, ., exp, (, -, t, ., getValue, (, ), ), ;]
[., getOrder, (, ), +, 1, ], ;, final, double, exp, =, FastMath, ., exp, (, -, t, ., getValue]
[], ;, final, double, exp, =, FastMath, ., exp, (, -, t, ., getValue, (, ), ), ;, if, (]
[;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays, .]
[., exp, (, -, t, ., getValue, (, ), ), ;, if, (, Double, ., isInfinite, (, exp, ), )]
[), ;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays]
[), ;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays]
[., getValue, (, ), ), ;, if, (, Double, ., isInfinite, (, exp, ), ), {, f, [, 0, ]]
[), {, f, [, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,, 1, ,, f, ., length]
[., isInfinite, (, exp, ), ), {, f, [, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,]
[), ), {, f, [, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,, 1, ,, f, .]
[=, lo, ;, Arrays, ., fill, (, f, ,, 1, ,, f, ., length, ,, 0.0, ), ;, }, else]
[[, 0, ], =, lo, ;, Arrays, ., fill, (, f, ,, 1, ,, f, ., length, ,, 0.0, )]
[], =, lo, ;, Arrays, ., fill, (, f, ,, 1, ,, f, ., length, ,, 0.0, ), ;, }]
[;, Arrays, ., fill, (, f, ,, 1, ,, f, ., length, ,, 0.0, ), ;, }, else, {, final]
[;, }, else, {, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, final, double]
[., fill, (, f, ,, 1, ,, f, ., length, ,, 0.0, ), ;, }, else, {, final, double, []
[,, 1, ,, f, ., length, ,, 0.0, ), ;, }, else, {, final, double, [, ], p, =, new]
[,, f, ., length, ,, 0.0, ), ;, }, else, {, final, double, [, ], p, =, new, double, []
[,, 0.0, ), ;, }, else, {, final, double, [, ], p, =, new, double, [, f, ., length, ]]
[., length, ,, 0.0, ), ;, }, else, {, final, double, [, ], p, =, new, double, [, f, .]
[), ;, }, else, {, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, final]
[;, final, double, inv, =, 1, /, (, 1, +, exp, ), ;, double, coeff, =, hi, -, lo, ;]
[], ;, final, double, inv, =, 1, /, (, 1, +, exp, ), ;, double, coeff, =, hi, -, lo]
[., length, ], ;, final, double, inv, =, 1, /, (, 1, +, exp, ), ;, double, coeff, =, hi]
[;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <, f, ., length]
[/, (, 1, +, exp, ), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0]
[;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <, f, ., length]
[), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <, f, .]
[+, exp, ), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <]
[), ;, double, coeff, =, hi, -, lo, ;, for, (, int, n, =, 0, ;, n, <, f, .]
[;, for, (, int, n, =, 0, ;, n, <, f, ., length, ;, ++, n, ), {, double, v]
[-, lo, ;, for, (, int, n, =, 0, ;, n, <, f, ., length, ;, ++, n, ), {]
[;, for, (, int, n, =, 0, ;, n, <, f, ., length, ;, ++, n, ), {, double, v]
[;, n, <, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ]]
[;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int]
[<, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, 1]
[;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int]
[., length, ;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for]
[), {, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int, k, =, n]
[), {, double, v, =, 0, ;, p, [, n, ], =, 1, ;, for, (, int, k, =, n]
[;, p, [, n, ], =, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --]
[=, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =]
[[, n, ], =, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, )]
[], =, 1, ;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v]
[;, for, (, int, k, =, n, ;, k, >=, 0, ;, --, k, ), {, v, =, v, *]
[;, k, >=, 0, ;, --, k, ), {, v, =, v, *, exp, +, p, [, k, ], ;]
[;, --, k, ), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >]
[>=, 0, ;, --, k, ), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (]
[;, --, k, ), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >]
[), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {]
[), {, v, =, v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {]
[=, v, *, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k]
[;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +]
[+, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =]
[*, exp, +, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1]
[+, p, [, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =]
[;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +]
[[, k, ], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (, n]
[], ;, if, (, k, >, 1, ), {, p, [, k, -, 1, ], =, (, n, -, k]
[), {, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k]
[>, 1, ), {, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *, p]
[), {, p, [, k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k]
[=, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1]
[[, k, -, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ]]
[], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -]
[-, 1, ], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (]
[], =, (, n, -, k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -]
[;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n]
[-, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {, p, [, 0]
[*, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, [, k, -, 1, ]]
[), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, [, k, -, 1]
[+, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, [, k]
[-, k, +, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p]
[+, 2, ), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, [, k]
[), *, p, [, k, -, 2, ], -, (, k, -, 1, ), *, p, [, k, -, 1]
[-, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {, p, [, 0]
[[, k, -, 2, ], -, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }]
[], -, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {, p, []
[-, 2, ], -, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {]
[], -, (, k, -, 1, ), *, p, [, k, -, 1, ], ;, }, else, {, p, []
[;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n]
[*, p, [, k, -, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }]
[), *, p, [, k, -, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }]
[-, 1, ), *, p, [, k, -, 1, ], ;, }, else, {, p, [, 0, ], =, 0]
[), *, p, [, k, -, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }]
[;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n]
[[, k, -, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=]
[], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, []
[-, 1, ], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;]
[], ;, }, else, {, p, [, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, []
[=, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }, f]
[[, 0, ], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v]
[], =, 0, ;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }]
[;, }, }, coeff, *=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }, f, [, 0]
[*=, inv, ;, f, [, n, ], =, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;]
[;, f, [, n, ], =, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;, }, return]
[=, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;, }, return, t, ., compose, (, f]
[[, n, ], =, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;, }, return, t, .]
[], =, coeff, *, v, ;, }, f, [, 0, ], +=, lo, ;, }, return, t, ., compose, (]
[;, }, f, [, 0, ], +=, lo, ;, }, return, t, ., compose, (, f, ), ;, }, }]
[*, v, ;, }, f, [, 0, ], +=, lo, ;, }, return, t, ., compose, (, f, ), ;]
[;, }, f, [, 0, ], +=, lo, ;, }, return, t, ., compose, (, f, ), ;, }, }]
[+=, lo, ;, }, return, t, ., compose, (, f, ), ;, }, }]
[[, 0, ], +=, lo, ;, }, return, t, ., compose, (, f, ), ;, }, }]
[], +=, lo, ;, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }]
[., compose, (, f, ), ;, }, }]
[), ;, }, }]
