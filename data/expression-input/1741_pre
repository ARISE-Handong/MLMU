[;, private, final, RealVector, xL, ;, private, RealVector, y, ;, private, double, ynorm2, ;, private, boolean, bIsNull, ;, static, {]
[final, RealVector, xL, ;, private, RealVector, y, ;, private, double, ynorm2, ;, private, boolean, bIsNull, ;, static, {, MACH_PREC, =]
[final, RealVector, xL, ;, private, RealVector, y, ;, private, double, ynorm2, ;, private, boolean, bIsNull, ;, static, {, MACH_PREC, =]
[private, RealVector, y, ;, private, double, ynorm2, ;, private, boolean, bIsNull, ;, static, {, MACH_PREC, =, FastMath, ., ulp, (]
[;, private, double, ynorm2, ;, private, boolean, bIsNull, ;, static, {, MACH_PREC, =, FastMath, ., ulp, (, 1., ), ;]
[double, ynorm2, ;, private, boolean, bIsNull, ;, static, {, MACH_PREC, =, FastMath, ., ulp, (, 1., ), ;, CBRT_MACH_PREC, =]
[double, ynorm2, ;, private, boolean, bIsNull, ;, static, {, MACH_PREC, =, FastMath, ., ulp, (, 1., ), ;, CBRT_MACH_PREC, =]
[boolean, bIsNull, ;, static, {, MACH_PREC, =, FastMath, ., ulp, (, 1., ), ;, CBRT_MACH_PREC, =, FastMath, ., cbrt, (]
[RealVector, b, ,, final, boolean, goodb, ,, final, double, shift, ,, final, double, delta, ,, final, boolean, check, ), {]
[RealVector, b, ,, final, boolean, goodb, ,, final, double, shift, ,, final, double, delta, ,, final, boolean, check, ), {]
[boolean, goodb, ,, final, double, shift, ,, final, double, delta, ,, final, boolean, check, ), {, this, ., a, =]
[,, final, double, shift, ,, final, double, delta, ,, final, boolean, check, ), {, this, ., a, =, a, ;]
[,, final, double, shift, ,, final, double, delta, ,, final, boolean, check, ), {, this, ., a, =, a, ;]
[,, final, double, delta, ,, final, boolean, check, ), {, this, ., a, =, a, ;, this, ., m, =]
[double, delta, ,, final, boolean, check, ), {, this, ., a, =, a, ;, this, ., m, =, m, ;]
[double, delta, ,, final, boolean, check, ), {, this, ., a, =, a, ;, this, ., m, =, m, ;]
[boolean, check, ), {, this, ., a, =, a, ;, this, ., m, =, m, ;, this, ., b, =]
[), {, this, ., a, =, a, ;, this, ., m, =, m, ;, this, ., b, =, b, ;]
[), {, this, ., a, =, a, ;, this, ., m, =, m, ;, this, ., b, =, b, ;]
[a, =, a, ;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., xL, =]
[;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (]
[;, this, ., m, =, m, ;, this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (]
[this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;]
[this, ., b, =, b, ;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;]
[b, ;, this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb, =]
[this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;]
[this, ., xL, =, new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;]
[new, ArrayRealVector, (, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift, =]
[(, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;]
[(, b, ., getDimension, (, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;]
[(, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =]
[(, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =]
[(, ), ), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =]
[), ;, this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==]
[this, ., goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?]
[goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?, b, :]
[goodb, =, goodb, ;, this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?, b, :]
[this, ., shift, =, shift, ;, this, ., mb, =, m, ==, null, ?, b, :, m, ., operate, (]
[=, shift, ;, this, ., mb, =, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;]
[=, shift, ;, this, ., mb, =, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;]
[., mb, =, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =]
[=, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;]
[=, m, ==, null, ?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;]
[?, b, :, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =]
[:, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;]
[:, m, ., operate, (, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;]
[(, b, ), ;, this, ., hasConverged, =, false, ;, this, ., check, =, check, ;, this, ., delta, =]
[,, final, RealVector, x, ,, final, RealVector, y, ,, final, RealVector, z, ), throws, NonSelfAdjointOperatorException, {, final, double, s, =]
[,, final, RealVector, x, ,, final, RealVector, y, ,, final, RealVector, z, ), throws, NonSelfAdjointOperatorException, {, final, double, s, =]
[,, final, RealVector, y, ,, final, RealVector, z, ), throws, NonSelfAdjointOperatorException, {, final, double, s, =, y, ., dotProduct, (]
[z, ), throws, NonSelfAdjointOperatorException, {, final, double, s, =, y, ., dotProduct, (, y, ), ;, final, double, t, =]
[z, ), throws, NonSelfAdjointOperatorException, {, final, double, s, =, y, ., dotProduct, (, y, ), ;, final, double, t, =]
[{, final, double, s, =, y, ., dotProduct, (, y, ), ;, final, double, t, =, x, ., dotProduct, (]
[dotProduct, (, y, ), ;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =]
[dotProduct, (, y, ), ;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =]
[(, y, ), ;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =, (]
[(, y, ), ;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =, (]
[), ;, final, double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +]
[double, t, =, x, ., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *]
[., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (]
[., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (]
[., dotProduct, (, z, ), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (]
[), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (]
[), ;, final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (]
[final, double, epsa, =, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s, -]
[=, (, s, +, MACH_PREC, ), *, CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s, -, t, ), >]
[CBRT_MACH_PREC, ;, if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;]
[if, (, FastMath, ., abs, (, s, -, t, ), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =]
[), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =]
[), >, epsa, ), {, final, NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =]
[NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;]
[NonSelfAdjointOperatorException, e, ;, e, =, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;]
[=, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (]
[=, new, NonSelfAdjointOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (]
[), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,]
[ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;]
[ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;]
[., getContext, (, ), ;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (]
[., getContext, (, ), ;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (]
[;, context, ., setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,]
[setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;]
[setValue, (, SymmLQ, ., OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;]
[OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (]
[OPERATOR, ,, l, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (]
[;, context, ., setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,]
[setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;]
[setValue, (, SymmLQ, ., VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;]
[VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (]
[VECTOR1, ,, x, ), ;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (]
[;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,]
[;, context, ., setValue, (, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,]
[(, SymmLQ, ., VECTOR2, ,, y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (]
[y, ), ;, context, ., setValue, (, SymmLQ, ., THRESHOLD, ,, Double, ., valueOf, (, epsa, ), ), ;, throw]
[private, static, void, throwNPDLOException, (, final, RealLinearOperator, l, ,, final, RealVector, v, ), throws, NonPositiveDefiniteOperatorException, {, final, NonPositiveDefiniteOperatorException, e, ;]
[void, throwNPDLOException, (, final, RealLinearOperator, l, ,, final, RealVector, v, ), throws, NonPositiveDefiniteOperatorException, {, final, NonPositiveDefiniteOperatorException, e, ;, e, =]
[v, ), throws, NonPositiveDefiniteOperatorException, {, final, NonPositiveDefiniteOperatorException, e, ;, e, =, new, NonPositiveDefiniteOperatorException, (, ), ;, final, ExceptionContext, context, =]
[v, ), throws, NonPositiveDefiniteOperatorException, {, final, NonPositiveDefiniteOperatorException, e, ;, e, =, new, NonPositiveDefiniteOperatorException, (, ), ;, final, ExceptionContext, context, =]
[NonPositiveDefiniteOperatorException, e, ;, e, =, new, NonPositiveDefiniteOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;]
[NonPositiveDefiniteOperatorException, e, ;, e, =, new, NonPositiveDefiniteOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;]
[=, new, NonPositiveDefiniteOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (]
[NonPositiveDefiniteOperatorException, (, ), ;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, OPERATOR, ,]
[;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, OPERATOR, ,, l, ), ;]
[;, final, ExceptionContext, context, =, e, ., getContext, (, ), ;, context, ., setValue, (, OPERATOR, ,, l, ), ;]
[=, e, ., getContext, (, ), ;, context, ., setValue, (, OPERATOR, ,, l, ), ;, context, ., setValue, (]
[., getContext, (, ), ;, context, ., setValue, (, OPERATOR, ,, l, ), ;, context, ., setValue, (, VECTOR, ,]
[;, context, ., setValue, (, OPERATOR, ,, l, ), ;, context, ., setValue, (, VECTOR, ,, v, ), ;, throw]
[void, daxpy, (, final, double, a, ,, final, RealVector, x, ,, final, RealVector, y, ), {, final, int, n, =]
[void, daxpy, (, final, double, a, ,, final, RealVector, x, ,, final, RealVector, y, ), {, final, int, n, =]
[final, RealVector, y, ), {, final, int, n, =, x, ., getDimension, (, ), ;, for, (, int, i, =]
[y, ), {, final, int, n, =, x, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[y, ), {, final, int, n, =, x, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[{, final, int, n, =, x, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, n, =, x, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[int, n, =, x, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *]
[i, <, n, ;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (]
[;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +]
[;, i, ++, ), {, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +]
[{, y, ., setEntry, (, i, ,, a, *, x, ., getEntry, (, i, ), +, y, ., getEntry, (]
[RealVector, x, ,, final, double, b, ,, final, RealVector, y, ,, final, RealVector, z, ), {, final, int, n, =]
[RealVector, x, ,, final, double, b, ,, final, RealVector, y, ,, final, RealVector, z, ), {, final, int, n, =]
[final, RealVector, z, ), {, final, int, n, =, z, ., getDimension, (, ), ;, for, (, int, i, =]
[z, ), {, final, int, n, =, z, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[z, ), {, final, int, n, =, z, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[{, final, int, n, =, z, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, n, =, z, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[int, n, =, z, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =, a, *]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =, a, *]
[i, <, n, ;, i, ++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (]
[;, i, ++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +]
[;, i, ++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +]
[++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +, b, *]
[++, ), {, final, double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +, b, *]
[double, zi, ;, zi, =, a, *, x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (]
[zi, =, a, *, x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, ), +]
[zi, =, a, *, x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, ), +]
[x, ., getEntry, (, i, ), +, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (]
[(, i, ), +, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;]
[(, i, ), +, b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;]
[b, *, y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;, z, ., setEntry, (]
[y, ., getEntry, (, i, ), +, z, ., getEntry, (, i, ), ;, z, ., setEntry, (, i, ,]
[(, i, ,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {, final, int, n, =]
[(, i, ,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {, final, int, n, =]
[(, i, ,, zi, ), ;, }, }, void, refineSolution, (, final, RealVector, x, ), {, final, int, n, =]
[(, final, RealVector, x, ), {, final, int, n, =, this, ., xL, ., getDimension, (, ), ;, if, (]
[(, final, RealVector, x, ), {, final, int, n, =, this, ., xL, ., getDimension, (, ), ;, if, (]
[RealVector, x, ), {, final, int, n, =, this, ., xL, ., getDimension, (, ), ;, if, (, lqnorm, <]
[int, n, =, this, ., xL, ., getDimension, (, ), ;, if, (, lqnorm, <, cgnorm, ), {, if, (]
[n, =, this, ., xL, ., getDimension, (, ), ;, if, (, lqnorm, <, cgnorm, ), {, if, (, !]
[., xL, ., getDimension, (, ), ;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {]
[., xL, ., getDimension, (, ), ;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {]
[(, ), ;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {, x, ., setSubVector, (]
[;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {, x, ., setSubVector, (, 0, ,]
[;, if, (, lqnorm, <, cgnorm, ), {, if, (, !, goodb, ), {, x, ., setSubVector, (, 0, ,]
[), {, x, ., setSubVector, (, 0, ,, this, ., xL, ), ;, }, else, {, final, double, step, =]
[), {, x, ., setSubVector, (, 0, ,, this, ., xL, ), ;, }, else, {, final, double, step, =]
[x, ., setSubVector, (, 0, ,, this, ., xL, ), ;, }, else, {, final, double, step, =, bstep, /]
[., xL, ), ;, }, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =]
[), ;, }, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =, 0, ;]
[), ;, }, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =, 0, ;]
[}, else, {, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =, 0, ;, i, <]
[{, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[{, final, double, step, =, bstep, /, beta1, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, bi, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, bi, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (]
[;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =]
[;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =]
[;, i, ++, ), {, final, double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =]
[double, bi, =, mb, ., getEntry, (, i, ), ;, final, double, xi, =, this, ., xL, ., getEntry, (]
[mb, ., getEntry, (, i, ), ;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;]
[mb, ., getEntry, (, i, ), ;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;]
[i, ), ;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (]
[;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[;, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[=, this, ., xL, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, step, *]
[setEntry, (, i, ,, xi, +, step, *, bi, ), ;, }, }, }, else, {, final, double, anorm, =]
[setEntry, (, i, ,, xi, +, step, *, bi, ), ;, }, }, }, else, {, final, double, anorm, =]
[xi, +, step, *, bi, ), ;, }, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (]
[}, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =]
[}, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =]
[}, }, }, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =]
[}, else, {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =, gbar, ==]
[{, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =, gbar, ==, 0., ?]
[{, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =, gbar, ==, 0., ?]
[double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =, gbar, ==, 0., ?, anorm, *]
[=, FastMath, ., sqrt, (, tnorm, ), ;, final, double, diag, =, gbar, ==, 0., ?, anorm, *, MACH_PREC, :]
[), ;, final, double, diag, =, gbar, ==, 0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =]
[), ;, final, double, diag, =, gbar, ==, 0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =]
[final, double, diag, =, gbar, ==, 0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /]
[0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =]
[0., ?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =]
[?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (]
[?, anorm, *, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (]
[*, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +]
[*, MACH_PREC, :, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +]
[:, gbar, ;, final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +, snprod, *]
[final, double, zbar, =, gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +, snprod, *, zbar, ), /]
[gammaZeta, /, diag, ;, final, double, step, =, (, bstep, +, snprod, *, zbar, ), /, beta1, ;, if, (]
[/, diag, ;, final, double, step, =, (, bstep, +, snprod, *, zbar, ), /, beta1, ;, if, (, !]
[bstep, +, snprod, *, zbar, ), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =]
[snprod, *, zbar, ), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;]
[snprod, *, zbar, ), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;]
[zbar, ), /, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <]
[/, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[/, beta1, ;, if, (, !, goodb, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (]
[++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =]
[++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =]
[double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (]
[this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;]
[this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;]
[getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (]
[i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[double, wi, =, wbar, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *]
[setEntry, (, i, ,, xi, +, zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =]
[i, ,, xi, +, zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;]
[i, ,, xi, +, zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;]
[xi, +, zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <]
[zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;]
[zbar, *, wi, ), ;, }, }, else, {, for, (, int, i, =, 0, ;, i, <, n, ;]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[{, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (]
[++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =]
[++, ), {, final, double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =]
[double, xi, =, this, ., xL, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (]
[getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi, =]
[getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi, =]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi, =, mb, ., getEntry, (]
[wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;]
[wi, =, wbar, ., getEntry, (, i, ), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;]
[getEntry, (, i, ), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (]
[i, ), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[i, ), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[i, ), ;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,]
[;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[;, final, double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +]
[double, bi, =, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *]
[=, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, +]
[=, mb, ., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, +]
[., getEntry, (, i, ), ;, x, ., setEntry, (, i, ,, xi, +, zbar, *, wi, +, step, *]
[xi, +, zbar, *, wi, +, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {]
[xi, +, zbar, *, wi, +, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {]
[xi, +, zbar, *, wi, +, step, *, bi, ), ;, }, }, }, }, void, init, (, ), {]
[step, *, bi, ), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (]
[), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;]
[), ;, }, }, }, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;]
[}, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;, this, ., r1, =]
[}, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;, this, ., r1, =]
[}, }, void, init, (, ), {, this, ., xL, ., set, (, 0., ), ;, this, ., r1, =]
[., xL, ., set, (, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;]
[., xL, ., set, (, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;]
[(, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =]
[(, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =]
[(, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =]
[(, 0., ), ;, this, ., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =]
[this, ., r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =, this, ., m, ==]
[r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =, this, ., m, ==, null, ?]
[r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =, this, ., m, ==, null, ?]
[r1, =, this, ., b, ., copy, (, ), ;, this, ., y, =, this, ., m, ==, null, ?]
[), ;, this, ., y, =, this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :]
[), ;, this, ., y, =, this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :]
[), ;, this, ., y, =, this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :]
[this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :, this, ., m, ., operate, (]
[this, ., m, ==, null, ?, this, ., b, ., copy, (, ), :, this, ., m, ., operate, (]
[., b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (]
[., b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (]
[b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (, (]
[b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (, (]
[b, ., copy, (, ), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (, (]
[), :, this, ., m, ., operate, (, this, ., r1, ), ;, if, (, (, this, ., m, !=]
[., m, ., operate, (, this, ., r1, ), ;, if, (, (, this, ., m, !=, null, ), &&]
[., m, ., operate, (, this, ., r1, ), ;, if, (, (, this, ., m, !=, null, ), &&]
[this, ., r1, ), ;, if, (, (, this, ., m, !=, null, ), &&, this, ., check, ), {]
[r1, ), ;, if, (, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (]
[r1, ), ;, if, (, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (]
[(, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,]
[(, (, this, ., m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,]
[m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,]
[m, !=, null, ), &&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,]
[&&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,]
[&&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,]
[&&, this, ., check, ), {, checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,]
[checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,, this, ., m, ., operate, (]
[checkSymmetry, (, this, ., m, ,, this, ., r1, ,, this, ., y, ,, this, ., m, ., operate, (]
[., r1, ,, this, ., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }]
[., r1, ,, this, ., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }]
[., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =]
[., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =]
[., y, ,, this, ., m, ., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =]
[., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (]
[., operate, (, this, ., y, ), ), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (]
[), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (]
[), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (]
[), ;, }, this, ., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (]
[., beta1, =, this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <]
[this, ., r1, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <, 0., ), {]
[r1, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (]
[r1, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (]
[this, ., y, ), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,]
[this, ., y, ), ;, if, (, this, ., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,]
[., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (]
[., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (]
[., beta1, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (]
[), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, if, (, this, ., beta1, ==]
[(, this, ., m, ,, this, ., y, ), ;, }, if, (, this, ., beta1, ==, 0., ), {]
[(, this, ., m, ,, this, ., y, ), ;, }, if, (, this, ., beta1, ==, 0., ), {]
[,, this, ., y, ), ;, }, if, (, this, ., beta1, ==, 0., ), {, this, ., bIsNull, =]
[;, }, if, (, this, ., beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }]
[;, }, if, (, this, ., beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }]
[this, ., beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =]
[beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;]
[beta1, ==, 0., ), {, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;]
[{, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1, =]
[{, this, ., bIsNull, =, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1, =]
[=, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1, =, FastMath, ., sqrt, (]
[=, true, ;, return, ;, }, this, ., bIsNull, =, false, ;, this, ., beta1, =, FastMath, ., sqrt, (]
[=, false, ;, this, ., beta1, =, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =]
[=, false, ;, this, ., beta1, =, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =]
[=, false, ;, this, ., beta1, =, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =]
[=, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (]
[=, FastMath, ., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (]
[., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /]
[., sqrt, (, this, ., beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /]
[beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;]
[beta1, ), ;, final, RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;]
[RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;, this, ., y, =]
[RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;, this, ., y, =]
[RealVector, v, =, this, ., y, ., mapMultiply, (, 1., /, this, ., beta1, ), ;, this, ., y, =]
[., mapMultiply, (, 1., /, this, ., beta1, ), ;, this, ., y, =, this, ., a, ., operate, (]
[this, ., beta1, ), ;, this, ., y, =, this, ., a, ., operate, (, v, ), ;, if, (]
[this, ., beta1, ), ;, this, ., y, =, this, ., a, ., operate, (, v, ), ;, if, (]
[this, ., y, =, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check, ), {]
[y, =, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (]
[y, =, this, ., a, ., operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (]
[a, ., operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,]
[operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,]
[operate, (, v, ), ;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,]
[;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,]
[;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,]
[;, if, (, this, ., check, ), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,]
[), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,, this, ., a, ., operate, (]
[), {, checkSymmetry, (, this, ., a, ,, v, ,, this, ., y, ,, this, ., a, ., operate, (]
[,, v, ,, this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), ), ;, }]
[,, this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (]
[this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -]
[this, ., y, ,, this, ., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -]
[this, ., a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -, this, ., shift, ,]
[a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -, this, ., shift, ,, v, ,]
[a, ., operate, (, this, ., y, ), ), ;, }, daxpy, (, -, this, ., shift, ,, v, ,]
[;, }, daxpy, (, -, this, ., shift, ,, v, ,, this, ., y, ), ;, final, double, alpha, =]
[;, }, daxpy, (, -, this, ., shift, ,, v, ,, this, ., y, ), ;, final, double, alpha, =]
[-, this, ., shift, ,, v, ,, this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (]
[-, this, ., shift, ,, v, ,, this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (]
[v, ,, this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;]
[this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (]
[this, ., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (]
[., y, ), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -]
[), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /]
[), ;, final, double, alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /]
[alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /, this, ., beta1, ,]
[alpha, =, v, ., dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /, this, ., beta1, ,]
[dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /, this, ., beta1, ,, this, ., r1, ,]
[dotProduct, (, this, ., y, ), ;, daxpy, (, -, alpha, /, this, ., beta1, ,, this, ., r1, ,]
[-, alpha, /, this, ., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =]
[-, alpha, /, this, ., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =]
[., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =, v, ., dotProduct, (]
[., beta1, ,, this, ., r1, ,, this, ., y, ), ;, final, double, vty, =, v, ., dotProduct, (]
[y, ), ;, final, double, vty, =, v, ., dotProduct, (, this, ., y, ), ;, final, double, vtv, =]
[y, ), ;, final, double, vty, =, v, ., dotProduct, (, this, ., y, ), ;, final, double, vtv, =]
[double, vty, =, v, ., dotProduct, (, this, ., y, ), ;, final, double, vtv, =, v, ., dotProduct, (]
[v, ., dotProduct, (, this, ., y, ), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;]
[dotProduct, (, this, ., y, ), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (]
[dotProduct, (, this, ., y, ), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (]
[(, this, ., y, ), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -]
[., y, ), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -, vty, /]
[), ;, final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,]
[final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,, v, ,]
[final, double, vtv, =, v, ., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,, v, ,]
[., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;]
[., dotProduct, (, v, ), ;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;]
[), ;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;, this, ., r2, =]
[), ;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;, this, ., r2, =]
[), ;, daxpy, (, -, vty, /, vtv, ,, v, ,, this, ., y, ), ;, this, ., r2, =]
[,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (]
[,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (]
[,, this, ., y, ), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (]
[), ;, this, ., r2, =, this, ., y, ., copy, (, ), ;, if, (, this, ., m, !=]
[., r2, =, this, ., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {]
[., r2, =, this, ., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {]
[., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {, this, ., y, =]
[., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {, this, ., y, =]
[., y, ., copy, (, ), ;, if, (, this, ., m, !=, null, ), {, this, ., y, =]
[;, if, (, this, ., m, !=, null, ), {, this, ., y, =, this, ., m, ., operate, (]
[;, if, (, this, ., m, !=, null, ), {, this, ., y, =, this, ., m, ., operate, (]
[!=, null, ), {, this, ., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }]
[!=, null, ), {, this, ., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }]
[this, ., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }, this, ., oldb, =]
[this, ., y, =, this, ., m, ., operate, (, this, ., r2, ), ;, }, this, ., oldb, =]
[this, ., m, ., operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;]
[this, ., m, ., operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;]
[operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =]
[operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =]
[operate, (, this, ., r2, ), ;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =]
[;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (]
[;, }, this, ., oldb, =, this, ., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (]
[., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (]
[., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (]
[., beta1, ;, this, ., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (]
[., beta, =, this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <]
[this, ., r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <, 0., ), {]
[r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (]
[r2, ., dotProduct, (, this, ., y, ), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (]
[this, ., y, ), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,]
[this, ., y, ), ;, if, (, this, ., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,]
[(, this, ., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }]
[(, this, ., beta, <, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }]
[<, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, ., beta, =]
[<, 0., ), {, throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, ., beta, =]
[throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, ., beta, =, FastMath, ., sqrt, (]
[throwNPDLOException, (, this, ., m, ,, this, ., y, ), ;, }, this, ., beta, =, FastMath, ., sqrt, (]
[,, this, ., y, ), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;]
[,, this, ., y, ), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;]
[), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =]
[), ;, }, this, ., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =]
[., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;]
[., beta, =, FastMath, ., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;]
[., sqrt, (, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =]
[(, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;]
[(, this, ., beta, ), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;]
[), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =]
[), ;, this, ., cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =]
[cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;]
[cgnorm, =, this, ., beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;]
[beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =]
[beta1, ;, this, ., gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =]
[gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;]
[gbar, =, alpha, ;, this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;]
[this, ., dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =]
[dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;]
[dbar, =, this, ., beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;]
[beta, ;, this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =]
[this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;]
[this, ., gammaZeta, =, this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;]
[this, ., beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =]
[beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;]
[beta1, ;, this, ., minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;]
[minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =]
[minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =]
[minusEpsZeta, =, 0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =]
[0., ;, this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *]
[this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +]
[this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +]
[this, ., bstep, =, 0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +]
[0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *]
[0., ;, this, ., snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *]
[snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;]
[snprod, =, 1., ;, this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;]
[this, ., tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =]
[tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;]
[tnorm, =, alpha, *, alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;]
[alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =]
[alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =]
[alpha, +, this, ., beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =]
[beta, *, this, ., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (]
[., beta, ;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +]
[;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;]
[;, this, ., ynorm2, =, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;]
[=, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =]
[=, 0., ;, this, ., gmax, =, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =]
[=, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (]
[=, FastMath, ., abs, (, alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (]
[alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {]
[alpha, ), +, MACH_PREC, ;, this, ., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {]
[;, this, ., gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =]
[gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (]
[gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (]
[gmin, =, this, ., gmax, ;, if, (, this, ., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (]
[., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;]
[., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;]
[., goodb, ), {, this, ., wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;]
[wbar, =, new, ArrayRealVector, (, this, ., a, ., getRowDimension, (, ), ), ;, this, ., wbar, ., set, (]
[., a, ., getRowDimension, (, ), ), ;, this, ., wbar, ., set, (, 0., ), ;, }, else, {]
[., a, ., getRowDimension, (, ), ), ;, this, ., wbar, ., set, (, 0., ), ;, }, else, {]
[(, ), ), ;, this, ., wbar, ., set, (, 0., ), ;, }, else, {, this, ., wbar, =]
[;, this, ., wbar, ., set, (, 0., ), ;, }, else, {, this, ., wbar, =, v, ;, }]
[., wbar, =, v, ;, }, updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =]
[., wbar, =, v, ;, }, updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =]
[;, }, updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (]
[;, }, updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (]
[updateNorms, (, ), ;, }, void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (, 1., /]
[;, }, void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (, 1., /, beta, ), ;]
[void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (, 1., /, beta, ), ;, y, =]
[void, update, (, ), {, final, RealVector, v, =, y, ., mapMultiply, (, 1., /, beta, ), ;, y, =]
[{, final, RealVector, v, =, y, ., mapMultiply, (, 1., /, beta, ), ;, y, =, a, ., operate, (]
[v, =, y, ., mapMultiply, (, 1., /, beta, ), ;, y, =, a, ., operate, (, v, ), ;]
[y, ., mapMultiply, (, 1., /, beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (]
[., mapMultiply, (, 1., /, beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -]
[(, 1., /, beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,]
[/, beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,]
[/, beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,]
[beta, ), ;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -]
[;, y, =, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /]
[=, a, ., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /, oldb, ,]
[., operate, (, v, ), ;, daxpbypz, (, -, shift, ,, v, ,, -, beta, /, oldb, ,, r1, ,]
[(, -, shift, ,, v, ,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =]
[(, -, shift, ,, v, ,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =]
[v, ,, -, beta, /, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (]
[beta, /, oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;]
[oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (]
[oldb, ,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (]
[,, r1, ,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -]
[,, y, ), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /]
[), ;, final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /, beta, ,]
[final, double, alpha, =, v, ., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /, beta, ,, r2, ,]
[=, v, ., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /, beta, ,, r2, ,, y, ), ;]
[., dotProduct, (, y, ), ;, daxpy, (, -, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =]
[(, y, ), ;, daxpy, (, -, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;]
[), ;, daxpy, (, -, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =]
[-, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (]
[-, alpha, /, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (]
[/, beta, ,, r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=]
[r2, ,, y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {]
[y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {, y, =]
[y, ), ;, r1, =, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {, y, =]
[=, r2, ;, r2, =, y, ;, if, (, m, !=, null, ), {, y, =, m, ., operate, (]
[=, y, ;, if, (, m, !=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }]
[;, if, (, m, !=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =]
[(, m, !=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;]
[!=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =]
[!=, null, ), {, y, =, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =]
[y, =, m, ., operate, (, r2, ), ;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (]
[(, r2, ), ;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (]
[(, r2, ), ;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (]
[), ;, }, oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <]
[oldb, =, beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {]
[beta, ;, beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (]
[beta, =, r2, ., dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,]
[dotProduct, (, y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }]
[y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =]
[y, ), ;, if, (, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =]
[(, beta, <, 0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (]
[0., ), {, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;]
[{, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=]
[{, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=]
[{, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=]
[{, throwNPDLOException, (, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=]
[(, m, ,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *]
[,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +]
[,, y, ), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +]
[), ;, }, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *]
[}, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +]
[}, beta, =, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +]
[=, FastMath, ., sqrt, (, beta, ), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *]
[), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =]
[), ;, tnorm, +=, alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =]
[alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (]
[alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (]
[alpha, *, alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (]
[alpha, +, oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *]
[oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +]
[oldb, *, oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +]
[oldb, +, beta, *, beta, ;, final, double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *]
[double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;, final, double, c, =]
[double, gamma, =, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;, final, double, c, =]
[=, FastMath, ., sqrt, (, gbar, *, gbar, +, oldb, *, oldb, ), ;, final, double, c, =, gbar, /]
[*, gbar, +, oldb, *, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =]
[*, gbar, +, oldb, *, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =]
[+, oldb, *, oldb, ), ;, final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /]
[final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =]
[final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =]
[final, double, c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =]
[c, =, gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *]
[gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +]
[gbar, /, gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +]
[gamma, ;, final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *]
[final, double, s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;]
[s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =]
[s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =]
[s, =, oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =]
[oldb, /, gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =, s, *]
[gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -]
[gamma, ;, final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -]
[final, double, deltak, =, c, *, dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -, c, *]
[dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =]
[dbar, +, s, *, alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =]
[s, *, alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *]
[alpha, ;, gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;]
[gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =]
[gbar, =, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =]
[=, s, *, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =, -]
[*, dbar, -, c, *, alpha, ;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *]
[;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;, final, double, zeta, =]
[;, final, double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;, final, double, zeta, =]
[double, eps, =, s, *, beta, ;, dbar, =, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /]
[;, dbar, =, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =]
[;, dbar, =, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =]
[=, -, c, *, beta, ;, final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *]
[final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =]
[final, double, zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =]
[zeta, =, gammaZeta, /, gamma, ;, final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =, zeta, *]
[final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =, zeta, *, s, ;, final, int, n, =]
[final, double, zetaC, =, zeta, *, c, ;, final, double, zetaS, =, zeta, *, s, ;, final, int, n, =]
[=, zeta, *, s, ;, final, int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =]
[*, s, ;, final, int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[*, s, ;, final, int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;]
[;, final, int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[int, n, =, xL, ., getDimension, (, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, xi, =, xL, ., getEntry, (]
[;, i, ++, ), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double, vi, =]
[;, i, ++, ), {, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double, vi, =]
[{, final, double, xi, =, xL, ., getEntry, (, i, ), ;, final, double, vi, =, v, ., getEntry, (]
[getEntry, (, i, ), ;, final, double, vi, =, v, ., getEntry, (, i, ), ;, final, double, wi, =]
[getEntry, (, i, ), ;, final, double, vi, =, v, ., getEntry, (, i, ), ;, final, double, wi, =]
[;, final, double, vi, =, v, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (]
[vi, =, v, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;]
[vi, =, v, ., getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;]
[getEntry, (, i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (]
[i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,]
[i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,]
[i, ), ;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +]
[;, final, double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +]
[double, wi, =, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *]
[=, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +]
[=, wbar, ., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +]
[., getEntry, (, i, ), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *]
[i, ), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;]
[i, ), ;, xL, ., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;]
[., setEntry, (, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (]
[(, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,]
[(, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,]
[(, i, ,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,]
[,, xi, +, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *]
[+, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -]
[+, wi, *, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -]
[*, zetaC, +, vi, *, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *]
[*, zetaS, ), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }]
[), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=]
[), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=]
[), ;, wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=]
[wbar, ., setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *]
[setEntry, (, i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *]
[i, ,, wi, *, s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;]
[wi, *, s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=]
[s, -, vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;]
[vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =]
[vi, *, c, ), ;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =]
[;, }, bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (]
[bstep, +=, snprod, *, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,]
[*, c, *, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;]
[*, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =]
[*, zeta, ;, snprod, *=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =]
[*=, s, ;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (]
[;, gmax, =, FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,]
[FastMath, ., max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;]
[max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=]
[max, (, gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=]
[gmax, ,, gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *]
[gamma, ), ;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;]
[;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =]
[;, gmin, =, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =]
[=, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -]
[=, FastMath, ., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -]
[., min, (, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *]
[(, gmin, ,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;]
[,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =]
[,, gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =]
[gamma, ), ;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -]
[;, ynorm2, +=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *]
[+=, zeta, *, zeta, ;, gammaZeta, =, minusEpsZeta, -, deltak, *, zeta, ;, minusEpsZeta, =, -, eps, *, zeta, ;]
[-, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm, =]
[-, eps, *, zeta, ;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm, =]
[;, updateNorms, (, ), ;, }, private, void, updateNorms, (, ), {, final, double, anorm, =, FastMath, ., sqrt, (]
[void, updateNorms, (, ), {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, ynorm, =]
[void, updateNorms, (, ), {, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, ynorm, =]
[{, final, double, anorm, =, FastMath, ., sqrt, (, tnorm, ), ;, final, double, ynorm, =, FastMath, ., sqrt, (]
[sqrt, (, tnorm, ), ;, final, double, ynorm, =, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =]
[sqrt, (, tnorm, ), ;, final, double, ynorm, =, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =]
[tnorm, ), ;, final, double, ynorm, =, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *]
[=, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =]
[=, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =]
[=, FastMath, ., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =]
[., sqrt, (, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *]
[(, ynorm2, ), ;, final, double, epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *]
[epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =]
[epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =]
[epsa, =, anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =]
[anorm, *, MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *]
[MACH_PREC, ;, final, double, epsx, =, anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *]
[anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =]
[anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =]
[anorm, *, ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =]
[ynorm, *, MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==]
[MACH_PREC, ;, final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?]
[final, double, epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :]
[epsr, =, anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;]
[anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =]
[anorm, *, ynorm, *, delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =]
[delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (]
[delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (]
[delta, ;, final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (]
[final, double, diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *]
[diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +]
[diag, =, gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +]
[gbar, ==, 0., ?, epsa, :, gbar, ;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *]
[;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =]
[;, lqnorm, =, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =]
[=, FastMath, ., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *]
[., sqrt, (, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;]
[(, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =]
[(, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =]
[(, gammaZeta, *, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =]
[*, gammaZeta, +, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *]
[+, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /]
[+, minusEpsZeta, *, minusEpsZeta, ), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /]
[), ;, final, double, qrnorm, =, snprod, *, beta1, ;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (]
[;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (]
[;, cgnorm, =, qrnorm, *, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (]
[=, qrnorm, *, beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=]
[beta, /, FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {]
[FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =]
[FastMath, ., abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =]
[abs, (, diag, ), ;, final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /]
[final, double, acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else, {]
[acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =]
[acond, ;, if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =]
[if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /]
[if, (, lqnorm, <=, cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /]
[cgnorm, ), {, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (]
[{, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin, ,]
[{, acond, =, gmax, /, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin, ,]
[/, gmin, ;, }, else, {, acond, =, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (]
[=, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (]
[=, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (]
[=, gmax, /, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (]
[/, FastMath, ., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (, acond, *]
[., min, (, gmin, ,, FastMath, ., abs, (, diag, ), ), ;, }, if, (, acond, *, MACH_PREC, >=]
[,, FastMath, ., abs, (, diag, ), ), ;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw]
[abs, (, diag, ), ), ;, }, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (]
[}, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (]
[}, if, (, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (]
[(, acond, *, MACH_PREC, >=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=]
[>=, 0.1, ), {, throw, new, IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw]
[IllConditionedOperatorException, (, acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }]
[acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =]
[acond, ), ;, }, if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =]
[if, (, beta1, <=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (]
[beta1, <=, epsx, ), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,]
[), {, throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;]
[throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =]
[throw, new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =]
[new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (]
[new, SingularOperatorException, (, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (]
[(, ), ;, }, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=]
[}, rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||]
[rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (]
[rnorm, =, FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (]
[FastMath, ., min, (, cgnorm, ,, lqnorm, ), ;, hasConverged, =, (, cgnorm, <=, epsx, ), ||, (, cgnorm, <=]
[=, (, cgnorm, <=, epsx, ), ||, (, cgnorm, <=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return]
[<=, epsr, ), ;, }, boolean, hasConverged, (, ), {, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return]
[{, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;, }, boolean, betaEqualsZero, (, ), {, return]
[{, return, hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;, }, boolean, betaEqualsZero, (, ), {, return]
[hasConverged, ;, }, boolean, bEqualsNullVector, (, ), {, return, bIsNull, ;, }, boolean, betaEqualsZero, (, ), {, return, beta, <]
[bIsNull, ;, }, boolean, betaEqualsZero, (, ), {, return, beta, <, MACH_PREC, ;, }, double, getNormOfResidual, (, ), {, return]
[<, MACH_PREC, ;, }, double, getNormOfResidual, (, ), {, return, rnorm, ;, }, }, private, static, final, String, OPERATOR, =]
[{, return, rnorm, ;, }, }, private, static, final, String, OPERATOR, =, "operator", ;, private, static, final, String, THRESHOLD, =]
[final, String, OPERATOR, =, "operator", ;, private, static, final, String, THRESHOLD, =, "threshold", ;, private, static, final, String, VECTOR, =]
[final, String, THRESHOLD, =, "threshold", ;, private, static, final, String, VECTOR, =, "vector", ;, private, static, final, String, VECTOR1, =]
[final, String, VECTOR, =, "vector", ;, private, static, final, String, VECTOR1, =, "vector1", ;, private, static, final, String, VECTOR2, =]
[delta, ;, public, SymmLQ, (, final, int, maxIterations, ,, final, double, delta, ,, final, boolean, check, ), {, super, (]
[SymmLQ, (, final, int, maxIterations, ,, final, double, delta, ,, final, boolean, check, ), {, super, (, maxIterations, ), ;]
[SymmLQ, (, final, int, maxIterations, ,, final, double, delta, ,, final, boolean, check, ), {, super, (, maxIterations, ), ;]
[maxIterations, ,, final, double, delta, ,, final, boolean, check, ), {, super, (, maxIterations, ), ;, this, ., delta, =]
[final, double, delta, ,, final, boolean, check, ), {, super, (, maxIterations, ), ;, this, ., delta, =, delta, ;]
[final, double, delta, ,, final, boolean, check, ), {, super, (, maxIterations, ), ;, this, ., delta, =, delta, ;]
[final, boolean, check, ), {, super, (, maxIterations, ), ;, this, ., delta, =, delta, ;, this, ., check, =]
[;, }, public, SymmLQ, (, final, IterationManager, manager, ,, final, double, delta, ,, final, boolean, check, ), {, super, (]
[SymmLQ, (, final, IterationManager, manager, ,, final, double, delta, ,, final, boolean, check, ), {, super, (, manager, ), ;]
[SymmLQ, (, final, IterationManager, manager, ,, final, double, delta, ,, final, boolean, check, ), {, super, (, manager, ), ;]
[manager, ,, final, double, delta, ,, final, boolean, check, ), {, super, (, manager, ), ;, this, ., delta, =]
[final, double, delta, ,, final, boolean, check, ), {, super, (, manager, ), ;, this, ., delta, =, delta, ;]
[final, double, delta, ,, final, boolean, check, ), {, super, (, manager, ), ;, this, ., delta, =, delta, ;]
[final, boolean, check, ), {, super, (, manager, ), ;, this, ., delta, =, delta, ;, this, ., check, =]
[., delta, =, delta, ;, this, ., check, =, check, ;, }, public, final, boolean, getCheck, (, ), {, return]
[,, final, RealVector, b, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {]
[,, final, RealVector, b, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {]
[), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (]
[,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =]
[NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return]
[a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (]
[;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,]
[RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,]
[=, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,]
[ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,]
[a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, false, ,]
[,, final, double, shift, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {]
[,, final, double, shift, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {]
[), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (]
[,, MaxCountExceededException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =]
[NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return]
[a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (]
[;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,]
[RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,]
[=, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,]
[ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,]
[a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, goodb, ,]
[,, final, RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[,, final, RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (]
[NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return]
[DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (]
[NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,]
[NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, m, ,]
[IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,]
[IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,]
[checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ., copy, (, ), ,]
[x, ), ;, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ., copy, (, ), ,, false, ,]
[RealLinearOperator, a, ,, final, RealVector, b, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[RealLinearOperator, a, ,, final, RealVector, b, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[RealVector, b, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (]
[,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =]
[NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;]
[., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;]
[), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, x, ., set, (]
[x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, x, ., set, (, 0., ), ;, return]
[new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, x, ., set, (, 0., ), ;, return, solveInPlace, (]
[(, a, ., getColumnDimension, (, ), ), ;, x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,]
[., getColumnDimension, (, ), ), ;, x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,]
[(, ), ), ;, x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,]
[), ;, x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,]
[x, ., set, (, 0., ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false, ,]
[boolean, goodb, ,, final, double, shift, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[boolean, goodb, ,, final, double, shift, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[double, shift, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (]
[,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =]
[NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (]
[checkNotNull, (, a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return]
[a, ), ;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (]
[;, final, RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,]
[RealVector, x, =, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, null, ,]
[=, new, ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,]
[ArrayRealVector, (, a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,]
[a, ., getColumnDimension, (, ), ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, goodb, ,]
[RealVector, b, ,, final, RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[RealVector, b, ,, final, RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (]
[NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return]
[NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (]
[DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,]
[NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, null, ,]
[IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,]
[IllConditionedOperatorException, ,, MaxCountExceededException, {, MathUtils, ., checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,]
[checkNotNull, (, x, ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ., copy, (, ), ,]
[x, ), ;, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ., copy, (, ), ,, false, ,]
[final, RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return]
[x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (]
[throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,]
[,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, m, ,]
[,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, m, ,, b, ,]
[,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,]
[,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, m, ,, b, ,, x, ,, false, ,]
[,, final, double, shift, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {]
[double, shift, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, checkParameters, (]
[), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, checkParameters, (, a, ,]
[NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, checkParameters, (, a, ,, m, ,]
[NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, NonPositiveDefiniteOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, checkParameters, (, a, ,, m, ,, b, ,]
[,, IllConditionedOperatorException, ,, MaxCountExceededException, {, checkParameters, (, a, ,, m, ,, b, ,, x, ), ;, final, IterationManager, manager, =]
[{, checkParameters, (, a, ,, m, ,, b, ,, x, ), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;]
[{, checkParameters, (, a, ,, m, ,, b, ,, x, ), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;]
[,, b, ,, x, ), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;, manager, ., resetIterationCount, (, ), ;]
[,, b, ,, x, ), ;, final, IterationManager, manager, =, getIterationManager, (, ), ;, manager, ., resetIterationCount, (, ), ;]
[getIterationManager, (, ), ;, manager, ., resetIterationCount, (, ), ;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;]
[), ;, manager, ., resetIterationCount, (, ), ;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;, state, =]
[., resetIterationCount, (, ), ;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new, State, (]
[(, ), ;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new, State, (, a, ,]
[;, manager, ., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new, State, (, a, ,, m, ,]
[., incrementIterationCount, (, ), ;, final, State, state, ;, state, =, new, State, (, a, ,, m, ,, b, ,]
[(, ), ;, final, State, state, ;, state, =, new, State, (, a, ,, m, ,, b, ,, goodb, ,]
[;, final, State, state, ;, state, =, new, State, (, a, ,, m, ,, b, ,, goodb, ,, shift, ,]
[State, state, ;, state, =, new, State, (, a, ,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,]
[state, =, new, State, (, a, ,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,, check, ), ;]
[state, =, new, State, (, a, ,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,, check, ), ;]
[,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,, check, ), ;, state, ., init, (, ), ;]
[,, m, ,, b, ,, goodb, ,, shift, ,, delta, ,, check, ), ;, state, ., init, (, ), ;]
[,, goodb, ,, shift, ,, delta, ,, check, ), ;, state, ., init, (, ), ;, state, ., refineSolution, (]
[,, check, ), ;, state, ., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;]
[), ;, state, ., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =]
[., init, (, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (]
[(, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[(, ), ;, state, ., refineSolution, (, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[(, x, ), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,]
[), ;, IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,]
[IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[IterativeLinearSolverEvent, event, ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (]
[,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (]
[x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (, state, ., bEqualsNullVector, (, ), ), {]
[x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, if, (, state, ., bEqualsNullVector, (, ), ), {]
[state, ., getNormOfResidual, (, ), ), ;, if, (, state, ., bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent, (]
[), ), ;, if, (, state, ., bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return]
[bEqualsNullVector, (, ), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;]
[), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =]
[), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =]
[), ), {, manager, ., fireTerminationEvent, (, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =]
[(, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||]
[(, event, ), ;, return, x, ;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||]
[;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;]
[;, }, final, boolean, earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;]
[earlyStop, ;, earlyStop, =, state, ., betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (]
[., betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;, if, (]
[betaEqualsZero, (, ), ||, state, ., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;, if, (, !]
[., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {, do, {]
[., hasConverged, (, ), ;, manager, ., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {, do, {]
[., fireInitializationEvent, (, event, ), ;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;]
[(, event, ), ;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =]
[;, if, (, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (]
[(, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[(, !, earlyStop, ), {, do, {, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[{, manager, ., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,]
[., incrementIterationCount, (, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,]
[(, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[(, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[(, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;]
[(, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;]
[., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (]
[), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;]
[), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;]
[state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;]
[state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;]
[), ), ;, manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;, state, ., refineSolution, (]
[manager, ., fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;]
[fireIterationStartedEvent, (, event, ), ;, state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event, =]
[), ;, state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (]
[state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[state, ., update, (, ), ;, state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[state, ., refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,]
[refineSolution, (, x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,]
[x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[x, ), ;, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[(, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;]
[(, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;]
[., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (]
[,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (]
[b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !]
[b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !]
[;, manager, ., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }]
[., fireIterationPerformedEvent, (, event, ), ;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }, event, =]
[event, ), ;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (]
[;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[;, }, while, (, !, state, ., hasConverged, (, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,]
[., hasConverged, (, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,]
[(, ), ), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,]
[), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[), ;, }, event, =, new, DefaultIterativeLinearSolverEvent, (, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,]
[(, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;]
[(, this, ,, manager, ., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;]
[., getIterations, (, ), ,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireTerminationEvent, (]
[,, x, ,, b, ,, state, ., getNormOfResidual, (, ), ), ;, manager, ., fireTerminationEvent, (, event, ), ;, return]
[b, ,, final, RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return]
[final, RealVector, x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (]
[x, ), throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,]
[throws, NullArgumentException, ,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, null, ,]
[,, NonSquareOperatorException, ,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, null, ,, b, ,]
[,, DimensionMismatchException, ,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,]
[,, NonSelfAdjointOperatorException, ,, IllConditionedOperatorException, ,, MaxCountExceededException, {, return, solveInPlace, (, a, ,, null, ,, b, ,, x, ,, false, ,]
