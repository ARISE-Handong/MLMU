[,, null, ), ;, }, public, GraphReachability, (, DiGraph, <, N, ,, E, >, graph, ,, Predicate, <, EdgeTuple, <]
[), ;, }, public, GraphReachability, (, DiGraph, <, N, ,, E, >, graph, ,, Predicate, <, EdgeTuple, <, N, ,]
[=, graph, ;, this, ., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {, graph, .]
[., graph, =, graph, ;, this, ., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {]
[;, this, ., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (]
[=, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;, graph, .]
[., edgePredicate, =, edgePredicate, ;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;]
[;, }, public, void, compute, (, N, entry, ), {, graph, ., clearNodeAnnotations, (, ), ;, graph, ., getNode, (]
[;, graph, ., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), .]
[., clearNodeAnnotations, (, ), ;, graph, ., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal]
[;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, entry, ), ;, }, public, void, recompute, (]
[., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, entry, ), ;]
[., getNode, (, entry, ), ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (]
[), ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, entry, )]
[), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, entry, ), ;, }, public, void, recompute]
[;, }, public, void, recompute, (, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable, =, graph, .]
[., computeFixedPoint, (, graph, ,, entry, ), ;, }, public, void, recompute, (, N, reachableNode, ), {, GraphNode, <, N]
[., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, entry, ), ;, }, public, void, recompute, (, N, reachableNode]
[), ., computeFixedPoint, (, graph, ,, entry, ), ;, }, public, void, recompute, (, N, reachableNode, ), {, GraphNode, <]
[,, entry, ), ;, }, public, void, recompute, (, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable]
[), ;, }, public, void, recompute, (, N, reachableNode, ), {, GraphNode, <, N, ,, E, >, newReachable, =, graph]
[;, Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, )]
[., getNode, (, reachableNode, ), ;, Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable]
[), ;, Preconditions, ., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE]
[;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, reachableNode]
[., checkState, (, newReachable, ., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal]
[), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,]
[!=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (]
[., getAnnotation, (, ), !=, REACHABLE, ), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this]
[), ;, newReachable, ., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,]
[;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, reachableNode, ), ;, }, @, Override, public, boolean]
[., setAnnotation, (, REACHABLE, ), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, reachableNode, ), ;]
[), ;, FixedPointGraphTraversal, ., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, reachableNode, ), ;, }, @, Override, public]
[;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if, (]
[., computeFixedPoint, (, graph, ,, reachableNode, ), ;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e]
[., newTraversal, (, this, ), ., computeFixedPoint, (, graph, ,, reachableNode, ), ;, }, @, Override, public, boolean, traverseEdge, (]
[), ., computeFixedPoint, (, graph, ,, reachableNode, ), ;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E]
[,, reachableNode, ), ;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, )]
[), ;, }, @, Override, public, boolean, traverseEdge, (, N, source, ,, E, e, ,, N, destination, ), {, if]
[), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (, destNode]
[&&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,]
[==, REACHABLE, &&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (]
[., getAnnotation, (, ), ==, REACHABLE, &&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N]
[., getNode, (, source, ), ., getAnnotation, (, ), ==, REACHABLE, &&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply]
[), ., getAnnotation, (, ), ==, REACHABLE, &&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <]
[&&, (, edgePredicate, ==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,]
[), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (, destNode]
[), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (]
[||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,, e, ,, destination, ), )]
[==, null, ||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,, e, ,, destination]
[||, edgePredicate, ., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,, e, ,, destination, ), )]
[), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if, (]
[., apply, (, new, EdgeTuple, <, N, ,, E, >, (, source, ,, e, ,, destination, ), ), ), )]
[), ), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;, if]
[,, e, ,, destination, ), ), ), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode]
[,, destination, ), ), ), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination]
[), ), ), ), {, GraphNode, <, N, ,, E, >, destNode, =, graph, ., getNode, (, destination, ), ;]
[;, if, (, destNode, ., getAnnotation, (, ), !=, REACHABLE, ), {, destNode, ., setAnnotation, (, REACHABLE, ), ;, return]
[., getNode, (, destination, ), ;, if, (, destNode, ., getAnnotation, (, ), !=, REACHABLE, ), {, destNode, ., setAnnotation]
[), ;, if, (, destNode, ., getAnnotation, (, ), !=, REACHABLE, ), {, destNode, ., setAnnotation, (, REACHABLE, ), ;]
[), {, destNode, ., setAnnotation, (, REACHABLE, ), ;, return, true, ;, }, }, return, false, ;, }, public, static]
[!=, REACHABLE, ), {, destNode, ., setAnnotation, (, REACHABLE, ), ;, return, true, ;, }, }, return, false, ;, }]
[., getAnnotation, (, ), !=, REACHABLE, ), {, destNode, ., setAnnotation, (, REACHABLE, ), ;, return, true, ;, }, }]
[), {, destNode, ., setAnnotation, (, REACHABLE, ), ;, return, true, ;, }, }, return, false, ;, }, public, static]
[;, return, true, ;, }, }, return, false, ;, }, public, static, final, Annotation, REACHABLE, =, new, Annotation, (, )]
[., setAnnotation, (, REACHABLE, ), ;, return, true, ;, }, }, return, false, ;, }, public, static, final, Annotation, REACHABLE]
[), ;, return, true, ;, }, }, return, false, ;, }, public, static, final, Annotation, REACHABLE, =, new, Annotation, (]
[;, }, }, return, false, ;, }, public, static, final, Annotation, REACHABLE, =, new, Annotation, (, ), {, }, ;]
[;, }, public, static, final, Annotation, REACHABLE, =, new, Annotation, (, ), {, }, ;, public, static, final, class, EdgeTuple]
[;, public, static, final, class, EdgeTuple, <, N, ,, E, >, {, public, final, N, sourceNode, ;, public, final, E]
[=, sourceNode, ;, this, ., edge, =, edge, ;, this, ., destNode, =, destNode, ;, }, }, }]
[., sourceNode, =, sourceNode, ;, this, ., edge, =, edge, ;, this, ., destNode, =, destNode, ;, }, }, }]
[;, this, ., edge, =, edge, ;, this, ., destNode, =, destNode, ;, }, }, }]
[=, edge, ;, this, ., destNode, =, destNode, ;, }, }, }]
[., edge, =, edge, ;, this, ., destNode, =, destNode, ;, }, }, }]
[;, this, ., destNode, =, destNode, ;, }, }, }]
[=, destNode, ;, }, }, }]
[., destNode, =, destNode, ;, }, }, }]
[;, }, }, }]
