[;, public, static, final, String, GLOBAL_THIS, =, "*global*", ;, private, final, Table, <, Node, ,, String, ,, Symbol, >, symbols]
[., getLogger, (, SymbolTable, ., class, ., getName, (, ), ), ;, public, static, final, String, GLOBAL_THIS, =, "*global*", ;]
[), ;, public, static, final, String, GLOBAL_THIS, =, "*global*", ;, private, final, Table, <, Node, ,, String, ,, Symbol, >]
[., getName, (, ), ), ;, public, static, final, String, GLOBAL_THIS, =, "*global*", ;, private, final, Table, <, Node, ,]
[;, private, final, Table, <, Node, ,, String, ,, Symbol, >, symbols, =, HashBasedTable, ., create, (, ), ;, private]
[;, private, final, Map, <, Node, ,, SymbolScope, >, scopes, =, Maps, ., newLinkedHashMap, (, ), ;, private, final, List]
[., create, (, ), ;, private, final, Map, <, Node, ,, SymbolScope, >, scopes, =, Maps, ., newLinkedHashMap, (, )]
[;, private, final, List, <, JSDocInfo, >, docInfos, =, Lists, ., newArrayList, (, ), ;, private, SymbolScope, globalScope, =, null]
[., newLinkedHashMap, (, ), ;, private, final, List, <, JSDocInfo, >, docInfos, =, Lists, ., newArrayList, (, ), ;, private]
[;, private, SymbolScope, globalScope, =, null, ;, private, final, JSTypeRegistry, registry, ;, SymbolTable, (, JSTypeRegistry, registry, ), {, this, .]
[., newArrayList, (, ), ;, private, SymbolScope, globalScope, =, null, ;, private, final, JSTypeRegistry, registry, ;, SymbolTable, (, JSTypeRegistry, registry]
[;, private, final, JSTypeRegistry, registry, ;, SymbolTable, (, JSTypeRegistry, registry, ), {, this, ., registry, =, registry, ;, }, @]
[=, registry, ;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return, Collections, .]
[., registry, =, registry, ;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return]
[;, }, @, Override, public, Iterable, <, Reference, >, getReferences, (, Symbol, symbol, ), {, return, Collections, ., unmodifiableCollection, (]
[;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return, ImmutableList, ., copyOf, (, symbol, .]
[., unmodifiableCollection, (, symbol, ., references, ., values, (, ), ), ;, }, public, List, <, Reference, >, getReferenceList, (]
[), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return, ImmutableList, ., copyOf, (, symbol]
[., values, (, ), ), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {, return, ImmutableList]
[., references, ., values, (, ), ), ;, }, public, List, <, Reference, >, getReferenceList, (, Symbol, symbol, ), {]
[;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (, symbols, .]
[., copyOf, (, symbol, ., references, ., values, (, ), ), ;, }, @, Override, public, Iterable, <, Symbol, >]
[), ;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {, return, Collections, ., unmodifiableCollection, (, symbols]
[., values, (, ), ), ;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {, return, Collections]
[., references, ., values, (, ), ), ;, }, @, Override, public, Iterable, <, Symbol, >, getAllSymbols, (, ), {]
[;, }, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {, List, <, Symbol, >, sortedSymbols, =, Lists, ., newArrayList]
[., unmodifiableCollection, (, symbols, ., values, (, ), ), ;, }, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {]
[), ;, }, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {, List, <, Symbol, >, sortedSymbols, =, Lists, .]
[., values, (, ), ), ;, }, public, List, <, Symbol, >, getAllSymbolsSorted, (, ), {, List, <, Symbol, >]
[;, Collections, ., sort, (, sortedSymbols, ,, getNaturalSymbolOrdering, (, ), ), ;, return, sortedSymbols, ;, }, public, Ordering, <, Symbol]
[., newArrayList, (, symbols, ., values, (, ), ), ;, Collections, ., sort, (, sortedSymbols, ,, getNaturalSymbolOrdering, (, ), )]
[), ;, Collections, ., sort, (, sortedSymbols, ,, getNaturalSymbolOrdering, (, ), ), ;, return, sortedSymbols, ;, }, public, Ordering, <]
[., values, (, ), ), ;, Collections, ., sort, (, sortedSymbols, ,, getNaturalSymbolOrdering, (, ), ), ;, return, sortedSymbols, ;]
[;, return, sortedSymbols, ;, }, public, Ordering, <, Symbol, >, getNaturalSymbolOrdering, (, ), {, return, SYMBOL_ORDERING, ;, }, @, Override]
[., sort, (, sortedSymbols, ,, getNaturalSymbolOrdering, (, ), ), ;, return, sortedSymbols, ;, }, public, Ordering, <, Symbol, >, getNaturalSymbolOrdering]
[,, getNaturalSymbolOrdering, (, ), ), ;, return, sortedSymbols, ;, }, public, Ordering, <, Symbol, >, getNaturalSymbolOrdering, (, ), {, return]
[), ;, return, sortedSymbols, ;, }, public, Ordering, <, Symbol, >, getNaturalSymbolOrdering, (, ), {, return, SYMBOL_ORDERING, ;, }, @]
[;, }, public, Ordering, <, Symbol, >, getNaturalSymbolOrdering, (, ), {, return, SYMBOL_ORDERING, ;, }, @, Override, public, SymbolScope, getScope]
[;, }, @, Override, public, SymbolScope, getScope, (, Symbol, slot, ), {, return, slot, ., scope, ;, }, public, Collection]
[;, }, public, Collection, <, JSDocInfo, >, getAllJSDocInfo, (, ), {, return, Collections, ., unmodifiableList, (, docInfos, ), ;, }]
[., scope, ;, }, public, Collection, <, JSDocInfo, >, getAllJSDocInfo, (, ), {, return, Collections, ., unmodifiableList, (, docInfos, )]
[;, }, public, Symbol, declareInferredSymbol, (, SymbolScope, scope, ,, String, name, ,, Node, declNode, ), {, return, declareSymbol, (, name]
[., unmodifiableList, (, docInfos, ), ;, }, public, Symbol, declareInferredSymbol, (, SymbolScope, scope, ,, String, name, ,, Node, declNode, )]
[), ;, }, public, Symbol, declareInferredSymbol, (, SymbolScope, scope, ,, String, name, ,, Node, declNode, ), {, return, declareSymbol, (]
[;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =, n, ., getParent, (, ), ;, if]
[,, null, ,, true, ,, scope, ,, declNode, ,, null, ), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, )]
[,, true, ,, scope, ,, declNode, ,, null, ), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node]
[,, scope, ,, declNode, ,, null, ), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =]
[,, declNode, ,, null, ), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =, n, .]
[,, null, ), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =, n, ., getParent, (]
[), ;, }, public, SymbolScope, getEnclosingScope, (, Node, n, ), {, Node, current, =, n, ., getParent, (, ), ;]
[;, if, (, n, ., isName, (, ), &&, n, ., getParent, (, ), ., isFunction, (, ), ), {]
[., getParent, (, ), ;, if, (, n, ., isName, (, ), &&, n, ., getParent, (, ), ., isFunction]
[), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;, current, !=, null, ;, current, =]
[&&, n, ., getParent, (, ), ., isFunction, (, ), ), {, current, =, current, ., getParent, (, ), ;]
[., isName, (, ), &&, n, ., getParent, (, ), ., isFunction, (, ), ), {, current, =, current, .]
[), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;, current, !=, null, ;, current, =]
[., isFunction, (, ), ), {, current, =, current, ., getParent, (, ), ;, }, for, (, ;, current, !=]
[., getParent, (, ), ., isFunction, (, ), ), {, current, =, current, ., getParent, (, ), ;, }, for]
[=, current, ., getParent, (, ), ;, }, for, (, ;, current, !=, null, ;, current, =, current, ., getParent]
[;, }, for, (, ;, current, !=, null, ;, current, =, current, ., getParent, (, ), ), {, if, (]
[., getParent, (, ), ;, }, for, (, ;, current, !=, null, ;, current, =, current, ., getParent, (, )]
[;, current, =, current, ., getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, ), ), {]
[!=, null, ;, current, =, current, ., getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, )]
[;, current, =, current, ., getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, ), ), {]
[=, current, ., getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, ), ), {, return, scopes]
[), {, if, (, scopes, ., containsKey, (, current, ), ), {, return, scopes, ., get, (, current, ), ;]
[., getParent, (, ), ), {, if, (, scopes, ., containsKey, (, current, ), ), {, return, scopes, ., get]
[), {, return, scopes, ., get, (, current, ), ;, }, }, return, null, ;, }, public, Symbol, getParameterInFunction, (]
[., containsKey, (, current, ), ), {, return, scopes, ., get, (, current, ), ;, }, }, return, null, ;]
[), ), {, return, scopes, ., get, (, current, ), ;, }, }, return, null, ;, }, public, Symbol, getParameterInFunction]
[;, }, }, return, null, ;, }, public, Symbol, getParameterInFunction, (, Symbol, sym, ,, String, paramName, ), {, SymbolScope, scope]
[., get, (, current, ), ;, }, }, return, null, ;, }, public, Symbol, getParameterInFunction, (, Symbol, sym, ,, String]
[), ;, }, }, return, null, ;, }, public, Symbol, getParameterInFunction, (, Symbol, sym, ,, String, paramName, ), {, SymbolScope]
[;, }, public, Symbol, getParameterInFunction, (, Symbol, sym, ,, String, paramName, ), {, SymbolScope, scope, =, getScopeInFunction, (, sym, )]
[;, if, (, scope, !=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (]
[), ;, if, (, scope, !=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if]
[), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&, param, .]
[!=, null, ), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&]
[), {, Symbol, param, =, scope, ., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&, param, .]
[;, if, (, param, !=, null, &&, param, ., scope, ==, scope, ), {, return, param, ;, }, }, return]
[., getSlot, (, paramName, ), ;, if, (, param, !=, null, &&, param, ., scope, ==, scope, ), {, return]
[), ;, if, (, param, !=, null, &&, param, ., scope, ==, scope, ), {, return, param, ;, }, }]
[), {, return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType]
[&&, param, ., scope, ==, scope, ), {, return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction]
[!=, null, &&, param, ., scope, ==, scope, ), {, return, param, ;, }, }, return, null, ;, }, private]
[&&, param, ., scope, ==, scope, ), {, return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction]
[), {, return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType]
[==, scope, ), {, return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, )]
[., scope, ==, scope, ), {, return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol]
[), {, return, param, ;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType]
[;, }, }, return, null, ;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType, type, =, sym, .]
[;, }, private, SymbolScope, getScopeInFunction, (, Symbol, sym, ), {, FunctionType, type, =, sym, ., getFunctionType, (, ), ;, if]
[;, if, (, type, ==, null, ), {, return, null, ;, }, Node, functionNode, =, type, ., getSource, (, )]
[., getFunctionType, (, ), ;, if, (, type, ==, null, ), {, return, null, ;, }, Node, functionNode, =, type]
[), {, return, null, ;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode, ==, null]
[==, null, ), {, return, null, ;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode]
[), {, return, null, ;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode, ==, null]
[;, }, Node, functionNode, =, type, ., getSource, (, ), ;, if, (, functionNode, ==, null, ), {, return, null]
[;, if, (, functionNode, ==, null, ), {, return, null, ;, }, return, scopes, ., get, (, functionNode, ), ;]
[., getSource, (, ), ;, if, (, functionNode, ==, null, ), {, return, null, ;, }, return, scopes, ., get]
[), {, return, null, ;, }, return, scopes, ., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope]
[==, null, ), {, return, null, ;, }, return, scopes, ., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope]
[), {, return, null, ;, }, return, scopes, ., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope]
[;, }, return, scopes, ., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if]
[;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (, scope, ., getSymbolForScope, (, ), ==, null, )]
[., get, (, functionNode, ), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (, scope, ., getSymbolForScope]
[), ;, }, public, Symbol, getSymbolForScope, (, SymbolScope, scope, ), {, if, (, scope, ., getSymbolForScope, (, ), ==, null]
[), {, scope, ., setSymbolForScope, (, findSymbolForScope, (, scope, ), ), ;, }, return, scope, ., getSymbolForScope, (, ), ;]
[==, null, ), {, scope, ., setSymbolForScope, (, findSymbolForScope, (, scope, ), ), ;, }, return, scope, ., getSymbolForScope, (]
[., getSymbolForScope, (, ), ==, null, ), {, scope, ., setSymbolForScope, (, findSymbolForScope, (, scope, ), ), ;, }, return]
[), {, scope, ., setSymbolForScope, (, findSymbolForScope, (, scope, ), ), ;, }, return, scope, ., getSymbolForScope, (, ), ;]
[;, }, return, scope, ., getSymbolForScope, (, ), ;, }, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode]
[., setSymbolForScope, (, findSymbolForScope, (, scope, ), ), ;, }, return, scope, ., getSymbolForScope, (, ), ;, }, private, Symbol]
[), ;, }, return, scope, ., getSymbolForScope, (, ), ;, }, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node]
[), ), ;, }, return, scope, ., getSymbolForScope, (, ), ;, }, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {]
[;, }, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode, =, scope, ., getRootNode, (, ), ;, if]
[., getSymbolForScope, (, ), ;, }, private, Symbol, findSymbolForScope, (, SymbolScope, scope, ), {, Node, rootNode, =, scope, ., getRootNode]
[;, if, (, rootNode, ., getParent, (, ), ==, null, ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;]
[., getRootNode, (, ), ;, if, (, rootNode, ., getParent, (, ), ==, null, ), {, return, globalScope, ., getSlot]
[), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !, rootNode, ., isFunction, (, ), )]
[==, null, ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !, rootNode, ., isFunction, (]
[., getParent, (, ), ==, null, ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !]
[), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !, rootNode, ., isFunction, (, ), )]
[;, }, if, (, !, rootNode, ., isFunction, (, ), ), {, return, null, ;, }, String, name, =, NodeUtil]
[., getSlot, (, GLOBAL_THIS, ), ;, }, if, (, !, rootNode, ., isFunction, (, ), ), {, return, null, ;]
[), ;, }, if, (, !, rootNode, ., isFunction, (, ), ), {, return, null, ;, }, String, name, =]
[), {, return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), )]
[), {, return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), )]
[., isFunction, (, ), ), {, return, null, ;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue]
[;, }, String, name, =, NodeUtil, ., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return, name, ==]
[;, return, name, ==, null, ?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, ), ;, }]
[., getBestLValueName, (, NodeUtil, ., getBestLValue, (, rootNode, ), ), ;, return, name, ==, null, ?, null, :, scope, .]
[), ;, return, name, ==, null, ?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, ), ;]
[., getBestLValue, (, rootNode, ), ), ;, return, name, ==, null, ?, null, :, scope, ., getParentScope, (, ), .]
[), ), ;, return, name, ==, null, ?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, )]
[;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym, ), {, return, getAllSymbolsForType, (, sym, ., getType, (]
[?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >]
[==, null, ?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, ), ;, }, public, Iterable, <]
[?, null, :, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >]
[:, scope, ., getParentScope, (, ), ., getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (]
[;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym, ), {, return, getAllSymbolsForType, (, sym, ., getType, (]
[., getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym, ), {, return, getAllSymbolsForType]
[., getParentScope, (, ), ., getQualifiedSlot, (, name, ), ;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym]
[), ;, }, public, Iterable, <, Symbol, >, getAllSymbolsForTypeOf, (, Symbol, sym, ), {, return, getAllSymbolsForType, (, sym, ., getType]
[;, }, public, SymbolScope, getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {]
[), ;, }, public, SymbolScope, getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, )]
[., getType, (, ), ), ;, }, public, SymbolScope, getGlobalScope, (, ), {, return, globalScope, ;, }, public, Symbol, getSymbolDeclaredBy]
[;, }, public, Symbol, getSymbolDeclaredBy, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||]
[;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,, instanceType]
[., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =, fn]
[), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (]
[., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, )]
[), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[., isInterface, (, ), ), ;, ObjectType, instanceType, =, fn, ., getInstanceType, (, ), ;, return, getSymbolForName, (, fn, .]
[;, return, getSymbolForName, (, fn, ., getSource, (, ), ,, instanceType, ., getReferenceName, (, ), ), ;, }, public, Symbol]
[., getInstanceType, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,, instanceType, ., getReferenceName, (, ), )]
[;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (, null, ,, enumType, ., getElementsType, (, )]
[,, instanceType, ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (]
[., getSource, (, ), ,, instanceType, ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, )]
[), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (, null, ,, enumType, ., getElementsType, (]
[., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolDeclaredBy, (, EnumType, enumType, ), {, return, getSymbolForName, (, null, ,]
[;, }, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;, if]
[,, enumType, ., getElementsType, (, ), ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, )]
[), ;, }, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =, sym, ., getFunctionType, (, ), ;]
[., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType, fn, =, sym, .]
[., getElementsType, (, ), ., getReferenceName, (, ), ), ;, }, public, Symbol, getSymbolForInstancesOf, (, Symbol, sym, ), {, FunctionType]
[;, if, (, fn, !=, null, &&, fn, ., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf, (, fn, ), ;]
[., getFunctionType, (, ), ;, if, (, fn, !=, null, &&, fn, ., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf]
[), {, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, )]
[&&, fn, ., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;, }, public]
[!=, null, &&, fn, ., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;]
[&&, fn, ., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;, }, public]
[), {, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, )]
[., isNominalConstructor, (, ), ), {, return, getSymbolForInstancesOf, (, fn, ), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf]
[;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn, .]
[), ;, }, return, null, ;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn]
[;, }, public, Symbol, getSymbolForInstancesOf, (, FunctionType, fn, ), {, Preconditions, ., checkState, (, fn, ., isConstructor, (, ), ||]
[;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,, pType]
[., checkState, (, fn, ., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =, fn]
[), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (]
[., isConstructor, (, ), ||, fn, ., isInterface, (, ), ), ;, ObjectType, pType, =, fn, ., getPrototype, (, )]
[), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,]
[., isInterface, (, ), ), ;, ObjectType, pType, =, fn, ., getPrototype, (, ), ;, return, getSymbolForName, (, fn, .]
[;, return, getSymbolForName, (, fn, ., getSource, (, ), ,, pType, ., getReferenceName, (, ), ), ;, }, private, Symbol]
[., getPrototype, (, ), ;, return, getSymbolForName, (, fn, ., getSource, (, ), ,, pType, ., getReferenceName, (, ), )]
[;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (, name, ==, null, ||, globalScope]
[,, pType, ., getReferenceName, (, ), ), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {]
[., getSource, (, ), ,, pType, ., getReferenceName, (, ), ), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,]
[), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (, name, ==, null, ||]
[., getReferenceName, (, ), ), ;, }, private, Symbol, getSymbolForName, (, Node, source, ,, String, name, ), {, if, (]
[), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;]
[||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope]
[==, null, ||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope]
[||, globalScope, ==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope]
[), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;]
[==, null, ), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source]
[), {, return, null, ;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;]
[;, }, SymbolScope, scope, =, source, ==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null]
[;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol]
[?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (, name]
[==, null, ?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot]
[?, globalScope, :, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (, name]
[:, getEnclosingScope, (, source, ), ;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (, name, ), ;]
[;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol]
[), ;, return, scope, ==, null, ?, null, :, scope, ., getQualifiedSlot, (, name, ), ;, }, public, List, <]
[;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (, type, ==, null, ), {]
[?, null, :, scope, ., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type]
[==, null, ?, null, :, scope, ., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (]
[?, null, :, scope, ., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type]
[:, scope, ., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {]
[;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (, type, ==, null, ), {]
[., getQualifiedSlot, (, name, ), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (]
[), ;, }, public, List, <, Symbol, >, getAllSymbolsForType, (, JSType, type, ), {, if, (, type, ==, null, )]
[), {, return, ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, if]
[==, null, ), {, return, ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, )]
[), {, return, ImmutableList, ., of, (, ), ;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, if]
[;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, if, (, unionType, !=, null, ), {, List, <]
[., of, (, ), ;, }, UnionType, unionType, =, type, ., toMaybeUnionType, (, ), ;, if, (, unionType, !=, null]
[;, if, (, unionType, !=, null, ), {, List, <, Symbol, >, result, =, Lists, ., newArrayListWithExpectedSize, (, 2, )]
[., toMaybeUnionType, (, ), ;, if, (, unionType, !=, null, ), {, List, <, Symbol, >, result, =, Lists, .]
[), {, List, <, Symbol, >, result, =, Lists, ., newArrayListWithExpectedSize, (, 2, ), ;, for, (, JSType, alt, :]
[!=, null, ), {, List, <, Symbol, >, result, =, Lists, ., newArrayListWithExpectedSize, (, 2, ), ;, for, (, JSType]
[), {, List, <, Symbol, >, result, =, Lists, ., newArrayListWithExpectedSize, (, 2, ), ;, for, (, JSType, alt, :]
[;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,]
[., newArrayListWithExpectedSize, (, 2, ), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, Symbol, altSym]
[), ;, for, (, JSType, alt, :, unionType, ., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt]
[), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (, altSym, !=, null, ), {, result]
[., getAlternates, (, ), ), {, Symbol, altSym, =, getSymbolForTypeHelper, (, alt, ,, true, ), ;, if, (, altSym, !=]
[;, if, (, altSym, !=, null, ), {, result, ., add, (, altSym, ), ;, }, }, return, result, ;]
[,, true, ), ;, if, (, altSym, !=, null, ), {, result, ., add, (, altSym, ), ;, }, }]
[), ;, if, (, altSym, !=, null, ), {, result, ., add, (, altSym, ), ;, }, }, return, result]
[), {, result, ., add, (, altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (]
[!=, null, ), {, result, ., add, (, altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =]
[), {, result, ., add, (, altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (]
[;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return, result, ==]
[., add, (, altSym, ), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true]
[), ;, }, }, return, result, ;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return, result]
[;, }, Symbol, result, =, getSymbolForTypeHelper, (, type, ,, true, ), ;, return, result, ==, null, ?, ImmutableList, ., <]
[;, return, result, ==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (, result]
[,, true, ), ;, return, result, ==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, .]
[), ;, return, result, ==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (]
[;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (, type, ==, null, ), {]
[?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (, result, ), ;, }, private, Symbol]
[==, null, ?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (, result, ), ;, }]
[?, ImmutableList, ., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (, result, ), ;, }, private, Symbol]
[:, ImmutableList, ., of, (, result, ), ;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {]
[., <, Symbol, >, of, (, ), :, ImmutableList, ., of, (, result, ), ;, }, private, Symbol, getSymbolForTypeHelper, (]
[;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (, type, ==, null, ), {]
[., of, (, result, ), ;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (]
[), ;, }, private, Symbol, getSymbolForTypeHelper, (, JSType, type, ,, boolean, linkToCtor, ), {, if, (, type, ==, null, )]
[), {, return, null, ;, }, if, (, type, ., isGlobalThisType, (, ), ), {, return, globalScope, ., getSlot, (]
[==, null, ), {, return, null, ;, }, if, (, type, ., isGlobalThisType, (, ), ), {, return, globalScope, .]
[), {, return, null, ;, }, if, (, type, ., isGlobalThisType, (, ), ), {, return, globalScope, ., getSlot, (]
[;, }, if, (, type, ., isGlobalThisType, (, ), ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }]
[), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (, type, ., isNominalConstructor, (, ), )]
[., isGlobalThisType, (, ), ), {, return, globalScope, ., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (, type, .]
[;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function"]
[., getSlot, (, GLOBAL_THIS, ), ;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?]
[), ;, }, else, if, (, type, ., isNominalConstructor, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (]
[), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), )]
[., isNominalConstructor, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (, type, .]
[;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type]
[?, globalScope, ., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), ), ;, }, else, if]
[:, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), ), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), )]
[., getSlot, (, "Function", ), :, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), ), ;, }, else, if, (, type]
[), :, getSymbolDeclaredBy, (, type, ., toMaybeFunctionType, (, ), ), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, )]
[;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type]
[), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, )]
[., toMaybeFunctionType, (, ), ), ;, }, else, if, (, type, ., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =]
[), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;, if, (, !, ownerFn]
[., isFunctionPrototypeType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getOwnerFunction, (, ), ;]
[;, if, (, !, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, ), ), {, return, null]
[., getOwnerFunction, (, ), ;, if, (, !, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, )]
[), ., getOwnerFunction, (, ), ;, if, (, !, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (]
[), ., getOwnerFunction, (, ), ;, if, (, !, ownerFn, ., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (]
[), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }]
[&&, !, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, )]
[&&, !, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, )]
[., isConstructor, (, ), &&, !, ownerFn, ., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?]
[), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }]
[), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }]
[., isInterface, (, ), ), {, return, null, ;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (]
[;, }, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type]
[;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type]
[?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isInstanceType, (, )]
[:, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =]
[), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn]
[;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type]
[), ;, }, else, if, (, type, ., isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, )]
[), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getConstructor, (, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy]
[., isInstanceType, (, ), ), {, FunctionType, ownerFn, =, (, (, ObjectType, ), type, ), ., getConstructor, (, ), ;]
[;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, .]
[., getConstructor, (, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else]
[), ., getConstructor, (, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }]
[), ., getConstructor, (, ), ;, return, linkToCtor, ?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }]
[;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function"]
[?, getSymbolDeclaredBy, (, ownerFn, ), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isFunctionType, (, )]
[:, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?]
[), :, getSymbolForInstancesOf, (, ownerFn, ), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor]
[;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function"]
[), ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (]
[), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }]
[., isFunctionType, (, ), ), {, return, linkToCtor, ?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (]
[;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo]
[?, globalScope, ., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (, type]
[:, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, )]
[., getSlot, (, "Function", ), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo]
[), :, globalScope, ., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null]
[;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo]
[., getQualifiedSlot, (, "Function.prototype", ), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return]
[), ;, }, else, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, return, getSymbolForTypeHelper, (, type, .]
[), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo, (, ), ,, linkToCtor, ), ;, }, else, {, return, null, ;]
[!=, null, ), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo, (, ), ,, linkToCtor, ), ;, }, else, {, return]
[., autoboxesTo, (, ), !=, null, ), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo, (, ), ,, linkToCtor, ), ;]
[), {, return, getSymbolForTypeHelper, (, type, ., autoboxesTo, (, ), ,, linkToCtor, ), ;, }, else, {, return, null, ;]
[;, }, else, {, return, null, ;, }, }, public, String, toDebugString, (, ), {, StringBuilder, builder, =, new, StringBuilder]
[,, linkToCtor, ), ;, }, else, {, return, null, ;, }, }, public, String, toDebugString, (, ), {, StringBuilder, builder]
[., autoboxesTo, (, ), ,, linkToCtor, ), ;, }, else, {, return, null, ;, }, }, public, String, toDebugString, (]
[), ;, }, else, {, return, null, ;, }, }, public, String, toDebugString, (, ), {, StringBuilder, builder, =, new]
[;, }, }, public, String, toDebugString, (, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, for, (, Symbol]
[;, for, (, Symbol, symbol, :, getAllSymbols, (, ), ), {, toDebugString, (, builder, ,, symbol, ), ;, }, return]
[), {, toDebugString, (, builder, ,, symbol, ), ;, }, return, builder, ., toString, (, ), ;, }, private, void]
[;, }, return, builder, ., toString, (, ), ;, }, private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol, )]
[,, symbol, ), ;, }, return, builder, ., toString, (, ), ;, }, private, void, toDebugString, (, StringBuilder, builder, ,]
[), ;, }, return, builder, ., toString, (, ), ;, }, private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol]
[;, }, private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol, ), {, SymbolScope, scope, =, symbol, ., scope, ;]
[., toString, (, ), ;, }, private, void, toDebugString, (, StringBuilder, builder, ,, Symbol, symbol, ), {, SymbolScope, scope, =]
[;, if, (, scope, ., isGlobalScope, (, ), ), {, builder, ., append, (, String, ., format, (, "'%s' : in global scope:\n", ,]
[., scope, ;, if, (, scope, ., isGlobalScope, (, ), ), {, builder, ., append, (, String, ., format, (]
[), {, builder, ., append, (, String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), ), ;]
[., isGlobalScope, (, ), ), {, builder, ., append, (, String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (]
[;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (, String, .]
[., append, (, String, ., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), ), ;, }, else, if]
[), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (, String]
[., format, (, "'%s' : in global scope:\n", ,, symbol, ., getName, (, ), ), ), ;, }, else, if, (, scope, ., getRootNode]
[,, symbol, ., getName, (, ), ), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null]
[), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {, builder, ., append, (]
[., getName, (, ), ), ), ;, }, else, if, (, scope, ., getRootNode, (, ), !=, null, ), {]
[), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, .]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,]
[., getRootNode, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, .]
[), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, .]
[;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (, String, .]
[., append, (, String, ., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, )]
[), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (, String]
[., format, (, "'%s' : in scope %s:%d\n", ,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, )]
[,, symbol, ., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,, scope, ., getRootNode]
[,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, )]
[., getName, (, ), ,, scope, ., getRootNode, (, ), ., getSourceFileName, (, ), ,, scope, ., getRootNode, (, )]
[,, scope, ., getRootNode, (, ), ., getLineno, (, ), ), ), ;, }, else, if, (, scope, ., getSymbolForScope]
[., getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, ), ), ), ;, }, else, if]
[., getRootNode, (, ), ., getSourceFileName, (, ), ,, scope, ., getRootNode, (, ), ., getLineno, (, ), ), )]
[), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (]
[., getLineno, (, ), ), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, ), !=, null, ), {]
[., getRootNode, (, ), ., getLineno, (, ), ), ), ;, }, else, if, (, scope, ., getSymbolForScope, (, )]
[), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,, scope, .]
[!=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,]
[., getSymbolForScope, (, ), !=, null, ), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, .]
[), {, builder, ., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,, scope, .]
[;, }, else, {, builder, ., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (, ), )]
[., append, (, String, ., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,, scope, ., getSymbolForScope, (, )]
[), ;, }, else, {, builder, ., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (, )]
[., format, (, "'%s' : in scope %s\n", ,, symbol, ., getName, (, ), ,, scope, ., getSymbolForScope, (, ), ., getName, (, )]
[,, symbol, ., getName, (, ), ,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }]
[,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }, else, {, builder, ., append, (]
[., getName, (, ), ,, scope, ., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }, else, {]
[), ), ;, }, else, {, builder, ., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (]
[., getName, (, ), ), ), ;, }, else, {, builder, ., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,]
[., getSymbolForScope, (, ), ., getName, (, ), ), ), ;, }, else, {, builder, ., append, (, String, .]
[;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, builder, .]
[., append, (, String, ., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (, ), ), ), ;, }, int, refCount]
[), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, builder]
[., format, (, "'%s' : in unknown scope\n", ,, symbol, ., getName, (, ), ), ), ;, }, int, refCount, =, 0, ;, for]
[,, symbol, ., getName, (, ), ), ), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :]
[), ), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {]
[., getName, (, ), ), ), ;, }, int, refCount, =, 0, ;, for, (, Reference, ref, :, getReferences, (]
[;, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, builder, ., append, (, String, ., format, (]
[), {, builder, ., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), .]
[), ), {, builder, ., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, )]
[;, refCount, ++, ;, }, }, <, S, extends, StaticScope, <, JSType, >, >, void, addScopes, (, Collection, <, S]
[., append, (, String, ., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, )]
[), ;, refCount, ++, ;, }, }, <, S, extends, StaticScope, <, JSType, >, >, void, addScopes, (, Collection, <]
[., format, (, "  Ref %d: %s:%d\n", ,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode]
[,, refCount, ,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno]
[,, ref, ., getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno, (, )]
[,, ref, ., getNode, (, ), ., getLineno, (, ), ), ), ;, refCount, ++, ;, }, }, <, S]
[., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno, (, ), ), ), ;, refCount, ++, ;]
[., getNode, (, ), ., getSourceFileName, (, ), ,, ref, ., getNode, (, ), ., getLineno, (, ), ), )]
[), ), ;, refCount, ++, ;, }, }, <, S, extends, StaticScope, <, JSType, >, >, void, addScopes, (, Collection]
[., getLineno, (, ), ), ), ;, refCount, ++, ;, }, }, <, S, extends, StaticScope, <, JSType, >, >]
[., getNode, (, ), ., getLineno, (, ), ), ), ;, refCount, ++, ;, }, }, <, S, extends, StaticScope]
[;, }, }, <, S, extends, StaticScope, <, JSType, >, >, void, addScopes, (, Collection, <, S, >, scopes, )]
[++, ;, }, }, <, S, extends, StaticScope, <, JSType, >, >, void, addScopes, (, Collection, <, S, >, scopes]
[), {, createScopeFrom, (, scope, ), ;, }, }, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root]
[;, }, }, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[), ;, }, }, void, findScopes, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots]
[;, }, public, Collection, <, SymbolScope, >, getAllScopes, (, ), {, return, Collections, ., unmodifiableCollection, (, scopes, ., values, (]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, NodeTraversal, ., AbstractScopedCallback, (, )]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public]
[,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, createScopeFrom, (]
[., newArrayList, (, externs, ,, root, ), ,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope]
[,, root, ), ,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, )]
[), ,, new, NodeTraversal, ., AbstractScopedCallback, (, ), {, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, createScopeFrom]
[), ;, }, public, Collection, <, SymbolScope, >, getAllScopes, (, ), {, return, Collections, ., unmodifiableCollection, (, scopes, ., values]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, p, ), {, }, }]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, p, ), {, }]
[., getScope, (, ), ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, public, void, addAnonymousFunctions, (, ), {, TreeSet, <, SymbolScope, >, scopes, =, Sets, ., newTreeSet, (, LEXICAL_SCOPE_ORDERING, )]
[., unmodifiableCollection, (, scopes, ., values, (, ), ), ;, }, public, void, addAnonymousFunctions, (, ), {, TreeSet, <, SymbolScope]
[), ;, }, public, void, addAnonymousFunctions, (, ), {, TreeSet, <, SymbolScope, >, scopes, =, Sets, ., newTreeSet, (, LEXICAL_SCOPE_ORDERING]
[., values, (, ), ), ;, }, public, void, addAnonymousFunctions, (, ), {, TreeSet, <, SymbolScope, >, scopes, =, Sets]
[;, for, (, SymbolScope, scope, :, getAllScopes, (, ), ), {, if, (, scope, ., isLexicalScope, (, ), ), {]
[., newTreeSet, (, LEXICAL_SCOPE_ORDERING, ), ;, for, (, SymbolScope, scope, :, getAllScopes, (, ), ), {, if, (, scope, .]
[), ;, for, (, SymbolScope, scope, :, getAllScopes, (, ), ), {, if, (, scope, ., isLexicalScope, (, ), )]
[), {, if, (, scope, ., isLexicalScope, (, ), ), {, scopes, ., add, (, scope, ), ;, }, }]
[), {, scopes, ., add, (, scope, ), ;, }, }, for, (, SymbolScope, scope, :, scopes, ), {, addAnonymousFunctionsInScope]
[., isLexicalScope, (, ), ), {, scopes, ., add, (, scope, ), ;, }, }, for, (, SymbolScope, scope, :]
[;, }, }, for, (, SymbolScope, scope, :, scopes, ), {, addAnonymousFunctionsInScope, (, scope, ), ;, }, }, private, void]
[., add, (, scope, ), ;, }, }, for, (, SymbolScope, scope, :, scopes, ), {, addAnonymousFunctionsInScope, (, scope, )]
[), ;, }, }, for, (, SymbolScope, scope, :, scopes, ), {, addAnonymousFunctionsInScope, (, scope, ), ;, }, }, private]
[), {, addAnonymousFunctionsInScope, (, scope, ), ;, }, }, private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =]
[;, }, }, private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;, if]
[), ;, }, }, private, void, addAnonymousFunctionsInScope, (, SymbolScope, scope, ), {, Symbol, sym, =, getSymbolForScope, (, scope, ), ;]
[;, if, (, sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope]
[), ;, if, (, sym, ==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, .]
[), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode]
[==, null, ), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope]
[), {, if, (, scope, ., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode]
[), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String]
[&&, scope, ., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int]
[&&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null, )]
[&&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&]
[&&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode]
[., isLexicalScope, (, ), &&, !, scope, ., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&]
[&&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&]
[&&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&]
[., isGlobalScope, (, ), &&, scope, ., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), .]
[&&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null, )]
[!=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=]
[., getRootNode, (, ), !=, null, &&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, .]
[&&, !, scope, ., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null, )]
[&&, scope, ., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int]
[&&, scope, ., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int]
[., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope]
[., getRootNode, (, ), ., isFromExterns, (, ), &&, scope, ., getParentScope, (, ), !=, null, ), {, SymbolScope, parent]
[), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String]
[!=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++]
[., getParentScope, (, ), !=, null, ), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =]
[), {, SymbolScope, parent, =, scope, ., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String]
[;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (]
[., getParentScope, (, ), ;, int, count, =, parent, ., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;]
[;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,, scope, .]
[++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,, scope]
[., innerAnonFunctionsWithNames, ++, ;, String, innerName, =, "function%", +, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName]
[;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,, scope, ., getRootNode, (, ), ), ), ;, }]
[+, count, ;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,, scope, ., getRootNode, (, ), ), )]
[;, scope, ., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,, scope, ., getRootNode, (, ), ), ), ;, }]
[;, }, }, }, <, S, extends, StaticSlot, <, JSType, >, ,, R, extends, StaticReference, <, JSType, >, >, void]
[., setSymbolForScope, (, declareInferredSymbol, (, parent, ,, innerName, ,, scope, ., getRootNode, (, ), ), ), ;, }, }, }]
[), ;, }, }, }, <, S, extends, StaticSlot, <, JSType, >, ,, R, extends, StaticReference, <, JSType, >, >]
[,, innerName, ,, scope, ., getRootNode, (, ), ), ), ;, }, }, }, <, S, extends, StaticSlot, <, JSType]
[,, scope, ., getRootNode, (, ), ), ), ;, }, }, }, <, S, extends, StaticSlot, <, JSType, >, ,]
[), ), ;, }, }, }, <, S, extends, StaticSlot, <, JSType, >, ,, R, extends, StaticReference, <, JSType, >]
[., getRootNode, (, ), ), ), ;, }, }, }, <, S, extends, StaticSlot, <, JSType, >, ,, R, extends]
[), {, String, name, =, otherSymbol, ., getName, (, ), ;, SymbolScope, myScope, =, createScopeFrom, (, otherSymbolTable, ., getScope, (]
[., getAllSymbols, (, ), ), {, String, name, =, otherSymbol, ., getName, (, ), ;, SymbolScope, myScope, =, createScopeFrom, (]
[;, SymbolScope, myScope, =, createScopeFrom, (, otherSymbolTable, ., getScope, (, otherSymbol, ), ), ;, StaticReference, <, JSType, >, decl, =]
[., getName, (, ), ;, SymbolScope, myScope, =, createScopeFrom, (, otherSymbolTable, ., getScope, (, otherSymbol, ), ), ;, StaticReference, <]
[;, StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;, if]
[), ;, StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;]
[., getScope, (, otherSymbol, ), ), ;, StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;]
[), ), ;, StaticReference, <, JSType, >, decl, =, findBestDeclToAdd, (, otherSymbolTable, ,, otherSymbol, ), ;, Symbol, mySymbol, =, null]
[;, Symbol, mySymbol, =, null, ;, if, (, decl, !=, null, ), {, Node, declNode, =, decl, ., getNode, (]
[,, otherSymbol, ), ;, Symbol, mySymbol, =, null, ;, if, (, decl, !=, null, ), {, Node, declNode, =, decl]
[), ;, Symbol, mySymbol, =, null, ;, if, (, decl, !=, null, ), {, Node, declNode, =, decl, ., getNode]
[;, if, (, decl, !=, null, ), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared]
[), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope]
[!=, null, ), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode]
[), {, Node, declNode, =, decl, ., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope]
[;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol]
[., getNode, (, ), ;, mySymbol, =, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==]
[=, isAnySymbolDeclared, (, name, ,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo]
[;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }]
[,, declNode, ,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode]
[,, myScope, ), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope]
[), ;, if, (, mySymbol, ==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;]
[), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope]
[==, null, ), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol]
[), {, mySymbol, =, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope]
[=, copySymbolTo, (, otherSymbol, ,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (]
[;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (, name, ), ;, }, if, (, mySymbol, !=, null]
[,, declNode, ,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (, name, ), ;, }]
[,, myScope, ), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (, name, ), ;, }, if, (]
[), ;, }, }, else, {, mySymbol, =, myScope, ., getOwnSlot, (, name, ), ;, }, if, (, mySymbol, !=]
[=, myScope, ., getOwnSlot, (, name, ), ;, }, if, (, mySymbol, !=, null, ), {, for, (, R, otherRef]
[;, }, if, (, mySymbol, !=, null, ), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, )]
[., getOwnSlot, (, name, ), ;, }, if, (, mySymbol, !=, null, ), {, for, (, R, otherRef, :, otherSymbolTable]
[), ;, }, if, (, mySymbol, !=, null, ), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol]
[), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (, otherRef]
[!=, null, ), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd]
[), {, for, (, R, otherRef, :, otherSymbolTable, ., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (, otherRef]
[), {, if, (, isGoodRefToAdd, (, otherRef, ), ), {, mySymbol, ., defineReferenceAt, (, otherRef, ., getNode, (, ), )]
[., getReferences, (, otherSymbol, ), ), {, if, (, isGoodRefToAdd, (, otherRef, ), ), {, mySymbol, ., defineReferenceAt, (, otherRef]
[), ), {, if, (, isGoodRefToAdd, (, otherRef, ), ), {, mySymbol, ., defineReferenceAt, (, otherRef, ., getNode, (, )]
[), {, mySymbol, ., defineReferenceAt, (, otherRef, ., getNode, (, ), ), ;, }, }, }, }, }, private, Symbol]
[), ), {, mySymbol, ., defineReferenceAt, (, otherRef, ., getNode, (, ), ), ;, }, }, }, }, }, private]
[;, }, }, }, }, }, private, Symbol, isAnySymbolDeclared, (, String, name, ,, Node, declNode, ,, SymbolScope, scope, ), {]
[., defineReferenceAt, (, otherRef, ., getNode, (, ), ), ;, }, }, }, }, }, private, Symbol, isAnySymbolDeclared, (, String]
[), ;, }, }, }, }, }, private, Symbol, isAnySymbolDeclared, (, String, name, ,, Node, declNode, ,, SymbolScope, scope, )]
[., getNode, (, ), ), ;, }, }, }, }, }, private, Symbol, isAnySymbolDeclared, (, String, name, ,, Node, declNode]
[;, if, (, sym, ==, null, ), {, return, scope, ., ownSymbols, ., get, (, name, ), ;, }, return]
[., get, (, declNode, ,, name, ), ;, if, (, sym, ==, null, ), {, return, scope, ., ownSymbols, .]
[,, name, ), ;, if, (, sym, ==, null, ), {, return, scope, ., ownSymbols, ., get, (, name, )]
[), ;, if, (, sym, ==, null, ), {, return, scope, ., ownSymbols, ., get, (, name, ), ;, }]
[), {, return, scope, ., ownSymbols, ., get, (, name, ), ;, }, return, sym, ;, }, private, <, S]
[==, null, ), {, return, scope, ., ownSymbols, ., get, (, name, ), ;, }, return, sym, ;, }, private]
[), {, return, scope, ., ownSymbols, ., get, (, name, ), ;, }, return, sym, ;, }, private, <, S]
[;, }, return, sym, ;, }, private, <, S, extends, StaticSlot, <, JSType, >, ,, R, extends, StaticReference, <, JSType]
[., get, (, name, ), ;, }, return, sym, ;, }, private, <, S, extends, StaticSlot, <, JSType, >, ,]
[., ownSymbols, ., get, (, name, ), ;, }, return, sym, ;, }, private, <, S, extends, StaticSlot, <, JSType]
[), ;, }, return, sym, ;, }, private, <, S, extends, StaticSlot, <, JSType, >, ,, R, extends, StaticReference, <]
[;, }, private, <, S, extends, StaticSlot, <, JSType, >, ,, R, extends, StaticReference, <, JSType, >, >, StaticReference, <]
[;, if, (, isGoodRefToAdd, (, decl, ), ), {, return, decl, ;, }, for, (, R, ref, :, otherSymbolTable, .]
[., getDeclaration, (, ), ;, if, (, isGoodRefToAdd, (, decl, ), ), {, return, decl, ;, }, for, (, R]
[), {, return, decl, ;, }, for, (, R, ref, :, otherSymbolTable, ., getReferences, (, slot, ), ), {, if]
[), ), {, return, decl, ;, }, for, (, R, ref, :, otherSymbolTable, ., getReferences, (, slot, ), ), {]
[;, }, for, (, R, ref, :, otherSymbolTable, ., getReferences, (, slot, ), ), {, if, (, isGoodRefToAdd, (, ref]
[), {, if, (, isGoodRefToAdd, (, ref, ), ), {, return, ref, ;, }, }, return, null, ;, }, private]
[., getReferences, (, slot, ), ), {, if, (, isGoodRefToAdd, (, ref, ), ), {, return, ref, ;, }, }]
[), ), {, if, (, isGoodRefToAdd, (, ref, ), ), {, return, ref, ;, }, }, return, null, ;, }]
[), {, return, ref, ;, }, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType]
[), ), {, return, ref, ;, }, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <]
[;, }, }, return, null, ;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {]
[;, }, private, boolean, isGoodRefToAdd, (, @, Nullable, StaticReference, <, JSType, >, ref, ), {, return, ref, !=, null, &&]
[;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (, sym]
[&&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (]
[&&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (]
[&&, ref, ., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null]
[!=, null, &&, ref, ., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, )]
[&&, ref, ., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null]
[&&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (]
[!=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, .]
[., getNode, (, ), !=, null, &&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !]
[&&, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (]
[&&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (]
[!=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), .]
[., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), .]
[., getNode, (, ), ., getStaticSourceFile, (, ), !=, null, &&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, .]
[&&, !, Compiler, ., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (]
[;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (, sym]
[;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (, sym]
[., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (, ), ), ;, }, private]
[., SYNTHETIC_EXTERNS, ., equals, (, ref, ., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (, ), ), ;]
[), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, ), {, return, copySymbolTo, (]
[., getName, (, ), ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, SymbolScope, scope, )]
[., getStaticSourceFile, (, ), ., getName, (, ), ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym]
[., getNode, (, ), ., getStaticSourceFile, (, ), ., getName, (, ), ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot]
[;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {, Preconditions]
[,, sym, ., getDeclaration, (, ), ., getNode, (, ), ,, scope, ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot]
[,, scope, ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, Node, declNode, ,, SymbolScope, scope]
[., getNode, (, ), ,, scope, ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, Node]
[., getDeclaration, (, ), ., getNode, (, ), ,, scope, ), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType]
[), ;, }, private, Symbol, copySymbolTo, (, StaticSlot, <, JSType, >, sym, ,, Node, declNode, ,, SymbolScope, scope, ), {]
[;, return, declareSymbol, (, sym, ., getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (]
[., checkNotNull, (, declNode, ), ;, return, declareSymbol, (, sym, ., getName, (, ), ,, sym, ., getType, (, )]
[), ;, return, declareSymbol, (, sym, ., getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred]
[;, }, private, Symbol, addSymbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode]
[,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,, scope, ,, declNode, ,, sym, ., getJSDocInfo]
[., getName, (, ), ,, sym, ., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,, scope, ,, declNode]
[,, sym, ., isTypeInferred, (, ), ,, scope, ,, declNode, ,, sym, ., getJSDocInfo, (, ), ), ;, }, private]
[., getType, (, ), ,, sym, ., isTypeInferred, (, ), ,, scope, ,, declNode, ,, sym, ., getJSDocInfo, (, )]
[,, scope, ,, declNode, ,, sym, ., getJSDocInfo, (, ), ), ;, }, private, Symbol, addSymbol, (, String, name, ,]
[., isTypeInferred, (, ), ,, scope, ,, declNode, ,, sym, ., getJSDocInfo, (, ), ), ;, }, private, Symbol, addSymbol]
[,, declNode, ,, sym, ., getJSDocInfo, (, ), ), ;, }, private, Symbol, addSymbol, (, String, name, ,, JSType, type]
[,, sym, ., getJSDocInfo, (, ), ), ;, }, private, Symbol, addSymbol, (, String, name, ,, JSType, type, ,, boolean]
[), ;, }, private, Symbol, addSymbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node]
[., getJSDocInfo, (, ), ), ;, }, private, Symbol, addSymbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,]
[;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol]
[,, type, ,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol]
[,, inferred, ,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;]
[,, scope, ), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, .]
[), ;, Symbol, replacedSymbol, =, symbols, ., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, .]
[., put, (, declNode, ,, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,]
[,, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, )]
[,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol]
[), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope]
[;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==]
[., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, .]
[,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, )]
[==, null, ,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,]
[,, "Found duplicate symbol %s in global index. Type %s", ,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, )]
[,, name, ,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions]
[,, type, ), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState]
[), ;, replacedSymbol, =, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol]
[=, scope, ., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,]
[;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return, symbol, ;, }]
[., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,]
[., ownSymbols, ., put, (, name, ,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,]
[,, symbol, ), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return]
[), ;, Preconditions, ., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return, symbol, ;]
[;, return, symbol, ;, }, private, Symbol, declareSymbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope]
[., checkState, (, replacedSymbol, ==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return, symbol, ;, }, private, Symbol]
[,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return, symbol, ;, }, private, Symbol, declareSymbol, (, String, name, ,, JSType]
[==, null, ,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return, symbol, ;, }, private, Symbol, declareSymbol, (, String, name]
[,, "Found duplicate symbol %s in its scope. Type %s", ,, name, ,, type, ), ;, return, symbol, ;, }, private, Symbol, declareSymbol, (, String, name, ,, JSType]
[,, name, ,, type, ), ;, return, symbol, ;, }, private, Symbol, declareSymbol, (, String, name, ,, JSType, type, ,]
[,, type, ), ;, return, symbol, ;, }, private, Symbol, declareSymbol, (, String, name, ,, JSType, type, ,, boolean, inferred]
[), ;, return, symbol, ;, }, private, Symbol, declareSymbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope]
[;, }, private, Symbol, declareSymbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ,, Node, declNode]
[;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), ), ;]
[,, type, ,, inferred, ,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration]
[,, inferred, ,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol]
[,, scope, ,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt]
[,, declNode, ), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode]
[), ;, symbol, ., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), )]
[;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), ), ;, return, symbol, ;, }, private, void, removeSymbol]
[., setJSDocInfo, (, info, ), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), ), ;, return, symbol]
[), ;, symbol, ., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), ), ;, return, symbol, ;, }, private, void]
[;, return, symbol, ;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, )]
[., setDeclaration, (, symbol, ., defineReferenceAt, (, declNode, ), ), ;, return, symbol, ;, }, private, void, removeSymbol, (, Symbol]
[), ;, return, symbol, ;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s]
[., defineReferenceAt, (, declNode, ), ), ;, return, symbol, ;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope]
[), ), ;, return, symbol, ;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (]
[;, }, private, void, removeSymbol, (, Symbol, s, ), {, SymbolScope, scope, =, getScope, (, s, ), ;, if, (]
[;, if, (, scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s, ), {, throw]
[), ;, if, (, scope, ., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s, ), {]
[), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (, symbols, ., remove, (, s, .]
[!=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (, symbols, ., remove, (]
[., remove, (, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s]
[., ownSymbols, ., remove, (, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope "]
[), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (, symbols, ., remove]
[., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if]
[), {, throw, new, IllegalStateException, (, "Symbol not found in scope ", +, s, ), ;, }, if, (, symbols, ., remove, (, s, .]
[;, }, if, (, symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,, s, .]
[), ;, }, if, (, symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,, s]
[+, s, ), ;, }, if, (, symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, )]
[), ;, }, if, (, symbols, ., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,, s]
[), {, throw, new, IllegalStateException, (, "Symbol not found in table ", +, s, ), ;, }, }, void, fillNamespaceReferences, (, ), {, for, (]
[!=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in table ", +, s, ), ;, }, }, void, fillNamespaceReferences, (, ), {]
[., remove, (, s, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), ), !=]
[,, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in table ", +, s, ), ;]
[., getNode, (, ), ,, s, ., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in table "]
[., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), ), !=, s, ), {, throw]
[), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in table ", +, s, ), ;, }, }, void, fillNamespaceReferences, (, )]
[., getName, (, ), ), !=, s, ), {, throw, new, IllegalStateException, (, "Symbol not found in table ", +, s, ), ;, }, }]
[), {, throw, new, IllegalStateException, (, "Symbol not found in table ", +, s, ), ;, }, }, void, fillNamespaceReferences, (, ), {, for, (]
[;, }, }, void, fillNamespaceReferences, (, ), {, for, (, Symbol, symbol, :, getAllSymbolsSorted, (, ), ), {, String, qName]
[), ;, }, }, void, fillNamespaceReferences, (, ), {, for, (, Symbol, symbol, :, getAllSymbolsSorted, (, ), ), {, String]
[+, s, ), ;, }, }, void, fillNamespaceReferences, (, ), {, for, (, Symbol, symbol, :, getAllSymbolsSorted, (, ), )]
[), ;, }, }, void, fillNamespaceReferences, (, ), {, for, (, Symbol, symbol, :, getAllSymbolsSorted, (, ), ), {, String]
[), {, String, qName, =, symbol, ., getName, (, ), ;, int, rootIndex, =, qName, ., indexOf, (, '.', )]
[;, int, rootIndex, =, qName, ., indexOf, (, '.', ), ;, if, (, rootIndex, ==, -, 1, ), {, continue]
[., getName, (, ), ;, int, rootIndex, =, qName, ., indexOf, (, '.', ), ;, if, (, rootIndex, ==, -]
[;, if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot]
[., indexOf, (, '.', ), ;, if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =]
[), ;, if, (, rootIndex, ==, -, 1, ), {, continue, ;, }, Symbol, root, =, symbol, ., scope, .]
[), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,]
[==, -, 1, ), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring]
[), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,]
[), {, continue, ;, }, Symbol, root, =, symbol, ., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,]
[;, if, (, root, ==, null, ), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (, symbol, )]
[., getQualifiedSlot, (, qName, ., substring, (, 0, ,, rootIndex, ), ), ;, if, (, root, ==, null, ), {]
[., scope, ., getQualifiedSlot, (, qName, ., substring, (, 0, ,, rootIndex, ), ), ;, if, (, root, ==, null]
[), ;, if, (, root, ==, null, ), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (, symbol]
[., substring, (, 0, ,, rootIndex, ), ), ;, if, (, root, ==, null, ), {, continue, ;, }, for]
[,, rootIndex, ), ), ;, if, (, root, ==, null, ), {, continue, ;, }, for, (, Reference, ref, :]
[), ), ;, if, (, root, ==, null, ), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (]
[), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, Node, currentNode, =, ref]
[==, null, ), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, Node, currentNode]
[), {, continue, ;, }, for, (, Reference, ref, :, getReferences, (, symbol, ), ), {, Node, currentNode, =, ref]
[), {, Node, currentNode, =, ref, ., getNode, (, ), ;, if, (, !, currentNode, ., isQualifiedName, (, ), )]
[), ), {, Node, currentNode, =, ref, ., getNode, (, ), ;, if, (, !, currentNode, ., isQualifiedName, (, )]
[;, if, (, !, currentNode, ., isQualifiedName, (, ), ), {, continue, ;, }, while, (, currentNode, ., isGetProp, (]
[., getNode, (, ), ;, if, (, !, currentNode, ., isQualifiedName, (, ), ), {, continue, ;, }, while, (]
[), {, continue, ;, }, while, (, currentNode, ., isGetProp, (, ), ), {, currentNode, =, currentNode, ., getFirstChild, (]
[), {, continue, ;, }, while, (, currentNode, ., isGetProp, (, ), ), {, currentNode, =, currentNode, ., getFirstChild, (]
[., isQualifiedName, (, ), ), {, continue, ;, }, while, (, currentNode, ., isGetProp, (, ), ), {, currentNode, =]
[), {, currentNode, =, currentNode, ., getFirstChild, (, ), ;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if]
[., isGetProp, (, ), ), {, currentNode, =, currentNode, ., getFirstChild, (, ), ;, String, name, =, currentNode, ., getQualifiedName]
[=, currentNode, ., getFirstChild, (, ), ;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if, (, name, !=]
[;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Symbol, namespace, =]
[., getFirstChild, (, ), ;, String, name, =, currentNode, ., getQualifiedName, (, ), ;, if, (, name, !=, null, )]
[;, if, (, name, !=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope]
[., getQualifiedName, (, ), ;, if, (, name, !=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode]
[), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==]
[!=, null, ), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (]
[), {, Symbol, namespace, =, isAnySymbolDeclared, (, name, ,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==]
[;, if, (, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }]
[,, currentNode, ,, root, ., scope, ), ;, if, (, namespace, ==, null, ), {, namespace, =, root, ., scope]
[,, root, ., scope, ), ;, if, (, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot]
[), ;, if, (, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;]
[., scope, ), ;, if, (, namespace, ==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name]
[), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&]
[==, null, ), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==]
[), {, namespace, =, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&]
[=, root, ., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&, root, ., scope]
[;, }, if, (, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol]
[., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, )]
[., scope, ., getQualifiedSlot, (, name, ), ;, }, if, (, namespace, ==, null, &&, root, ., scope, ., isGlobalScope]
[), ;, }, if, (, namespace, ==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =]
[), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root]
[&&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (]
[==, null, &&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, .]
[&&, root, ., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (]
[), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root]
[., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, )]
[., scope, ., isGlobalScope, (, ), ), {, namespace, =, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, .]
[=, declareSymbol, (, name, ,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,]
[;, }, if, (, namespace, !=, null, ), {, namespace, ., defineReferenceAt, (, currentNode, ), ;, }, }, }, }]
[,, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,, null, )]
[,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, ), {]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }]
[), ,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, )]
[., UNKNOWN_TYPE, ), ,, true, ,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=]
[,, root, ., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, ), {, namespace, .]
[,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, ), {, namespace, ., defineReferenceAt, (, currentNode, )]
[., scope, ,, currentNode, ,, null, ), ;, }, if, (, namespace, !=, null, ), {, namespace, ., defineReferenceAt, (]
[,, null, ), ;, }, if, (, namespace, !=, null, ), {, namespace, ., defineReferenceAt, (, currentNode, ), ;, }]
[), ;, }, if, (, namespace, !=, null, ), {, namespace, ., defineReferenceAt, (, currentNode, ), ;, }, }, }]
[), {, namespace, ., defineReferenceAt, (, currentNode, ), ;, }, }, }, }, }, }, void, fillPropertyScopes, (, ), {]
[!=, null, ), {, namespace, ., defineReferenceAt, (, currentNode, ), ;, }, }, }, }, }, }, void, fillPropertyScopes, (]
[), {, namespace, ., defineReferenceAt, (, currentNode, ), ;, }, }, }, }, }, }, void, fillPropertyScopes, (, ), {]
[;, }, }, }, }, }, }, void, fillPropertyScopes, (, ), {, List, <, Symbol, >, types, =, Lists, .]
[., defineReferenceAt, (, currentNode, ), ;, }, }, }, }, }, }, void, fillPropertyScopes, (, ), {, List, <, Symbol]
[), ;, }, }, }, }, }, }, void, fillPropertyScopes, (, ), {, List, <, Symbol, >, types, =, Lists]
[;, for, (, Symbol, sym, :, getAllSymbols, (, ), ), {, if, (, needsPropertyScope, (, sym, ), ), {, types]
[., newArrayList, (, ), ;, for, (, Symbol, sym, :, getAllSymbols, (, ), ), {, if, (, needsPropertyScope, (, sym]
[), {, if, (, needsPropertyScope, (, sym, ), ), {, types, ., add, (, sym, ), ;, }, }, Collections]
[), {, types, ., add, (, sym, ), ;, }, }, Collections, ., sort, (, types, ,, Collections, ., reverseOrder]
[), ), {, types, ., add, (, sym, ), ;, }, }, Collections, ., sort, (, types, ,, Collections, .]
[;, }, }, Collections, ., sort, (, types, ,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;, for]
[., add, (, sym, ), ;, }, }, Collections, ., sort, (, types, ,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (]
[), ;, }, }, Collections, ., sort, (, types, ,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;]
[;, for, (, Symbol, s, :, types, ), {, createPropertyScopeFor, (, s, ), ;, }, pruneOrphanedNames, (, ), ;, }]
[., sort, (, types, ,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;, for, (, Symbol, s, :]
[,, Collections, ., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;, for, (, Symbol, s, :, types, ), {, createPropertyScopeFor]
[), ;, for, (, Symbol, s, :, types, ), {, createPropertyScopeFor, (, s, ), ;, }, pruneOrphanedNames, (, ), ;]
[., reverseOrder, (, getNaturalSymbolOrdering, (, ), ), ), ;, for, (, Symbol, s, :, types, ), {, createPropertyScopeFor, (, s]
[), ), ;, for, (, Symbol, s, :, types, ), {, createPropertyScopeFor, (, s, ), ;, }, pruneOrphanedNames, (, )]
[), {, createPropertyScopeFor, (, s, ), ;, }, pruneOrphanedNames, (, ), ;, }, private, boolean, needsPropertyScope, (, Symbol, sym, )]
[;, }, pruneOrphanedNames, (, ), ;, }, private, boolean, needsPropertyScope, (, Symbol, sym, ), {, ObjectType, type, =, ObjectType, .]
[), ;, }, pruneOrphanedNames, (, ), ;, }, private, boolean, needsPropertyScope, (, Symbol, sym, ), {, ObjectType, type, =, ObjectType]
[;, }, private, boolean, needsPropertyScope, (, Symbol, sym, ), {, ObjectType, type, =, ObjectType, ., cast, (, sym, ., getType]
[;, if, (, type, ==, null, ), {, return, false, ;, }, if, (, type, ., getReferenceName, (, ), ==]
[., cast, (, sym, ., getType, (, ), ), ;, if, (, type, ==, null, ), {, return, false, ;]
[), ;, if, (, type, ==, null, ), {, return, false, ;, }, if, (, type, ., getReferenceName, (, )]
[., getType, (, ), ), ;, if, (, type, ==, null, ), {, return, false, ;, }, if, (, type]
[), {, return, false, ;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return, true, ;]
[==, null, ), {, return, false, ;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return]
[), {, return, false, ;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return, true, ;]
[;, }, if, (, type, ., getReferenceName, (, ), ==, null, ), {, return, true, ;, }, if, (, sym]
[), {, return, true, ;, }, if, (, sym, ., getName, (, ), ., equals, (, type, ., getReferenceName, (]
[==, null, ), {, return, true, ;, }, if, (, sym, ., getName, (, ), ., equals, (, type, .]
[., getReferenceName, (, ), ==, null, ), {, return, true, ;, }, if, (, sym, ., getName, (, ), .]
[), {, return, true, ;, }, if, (, sym, ., getName, (, ), ., equals, (, type, ., getReferenceName, (]
[;, }, if, (, sym, ., getName, (, ), ., equals, (, type, ., getReferenceName, (, ), ), ), {]
[), {, return, true, ;, }, if, (, type, ., isEnumType, (, ), &&, sym, ., getName, (, ), .]
[., equals, (, type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (, type, ., isEnumType]
[., getName, (, ), ., equals, (, type, ., getReferenceName, (, ), ), ), {, return, true, ;, }, if]
[), ), {, return, true, ;, }, if, (, type, ., isEnumType, (, ), &&, sym, ., getName, (, )]
[., getReferenceName, (, ), ), ), {, return, true, ;, }, if, (, type, ., isEnumType, (, ), &&, sym]
[;, }, if, (, type, ., isEnumType, (, ), &&, sym, ., getName, (, ), ., equals, (, type, .]
[), {, return, true, ;, }, return, false, ;, }, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (, Symbol]
[&&, sym, ., getName, (, ), ., equals, (, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName]
[., isEnumType, (, ), &&, sym, ., getName, (, ), ., equals, (, type, ., toMaybeEnumType, (, ), ., getElementsType]
[), {, return, true, ;, }, return, false, ;, }, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (, Symbol]
[., equals, (, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, ), ), ), {, return]
[., getName, (, ), ., equals, (, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, )]
[), ), {, return, true, ;, }, return, false, ;, }, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (]
[., getReferenceName, (, ), ), ), {, return, true, ;, }, return, false, ;, }, void, pruneOrphanedNames, (, ), {]
[., getElementsType, (, ), ., getReferenceName, (, ), ), ), {, return, true, ;, }, return, false, ;, }, void]
[., toMaybeEnumType, (, ), ., getElementsType, (, ), ., getReferenceName, (, ), ), ), {, return, true, ;, }, return]
[;, }, return, false, ;, }, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (, Symbol, s, :, getAllSymbolsSorted, (]
[;, }, void, pruneOrphanedNames, (, ), {, nextSymbol, :, for, (, Symbol, s, :, getAllSymbolsSorted, (, ), ), {, if]
[), {, if, (, s, ., isProperty, (, ), ), {, continue, ;, }, String, currentName, =, s, ., getName]
[), {, continue, ;, }, String, currentName, =, s, ., getName, (, ), ;, int, dot, =, -, 1, ;]
[., isProperty, (, ), ), {, continue, ;, }, String, currentName, =, s, ., getName, (, ), ;, int, dot]
[;, int, dot, =, -, 1, ;, while, (, -, 1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.']
[., getName, (, ), ;, int, dot, =, -, 1, ;, while, (, -, 1, !=, (, dot, =, currentName]
[;, while, (, -, 1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =]
[;, while, (, -, 1, !=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =]
[), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, .]
[!=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0]
[!=, (, dot, =, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0]
[), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, .]
[=, currentName, ., lastIndexOf, (, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0, ,, dot, )]
[), ), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope]
[., lastIndexOf, (, '.', ), ), ), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol]
[), ), ), {, currentName, =, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =, s, .]
[=, currentName, ., substring, (, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName]
[;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner]
[., substring, (, 0, ,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;]
[,, dot, ), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=]
[), ;, Symbol, owner, =, s, ., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&]
[;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (]
[., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&]
[., scope, ., getQualifiedSlot, (, currentName, ), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=]
[), ;, if, (, owner, !=, null, &&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType]
[), {, removeSymbol, (, s, ), ;, continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,]
[&&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (]
[&&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||]
[!=, null, &&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (]
[&&, owner, ., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||]
[&&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (]
[!=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), .]
[., getType, (, ), !=, null, &&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, .]
[&&, (, owner, ., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (]
[), {, removeSymbol, (, s, ), ;, continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,]
[), ), {, removeSymbol, (, s, ), ;, continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler]
[||, owner, ., getType, (, ), ., isEnumType, (, ), ), ), {, removeSymbol, (, s, ), ;, continue, nextSymbol]
[||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, )]
[., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, )]
[., getType, (, ), ., isNominalConstructor, (, ), ||, owner, ., getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner]
[||, owner, ., getType, (, ), ., isEnumType, (, ), ), ), {, removeSymbol, (, s, ), ;, continue, nextSymbol]
[., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, ), ), ), {, removeSymbol, (, s]
[., getType, (, ), ., isFunctionPrototypeType, (, ), ||, owner, ., getType, (, ), ., isEnumType, (, ), ), )]
[), ), {, removeSymbol, (, s, ), ;, continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler]
[., isEnumType, (, ), ), ), {, removeSymbol, (, s, ), ;, continue, nextSymbol, ;, }, }, }, }, void]
[., getType, (, ), ., isEnumType, (, ), ), ), {, removeSymbol, (, s, ), ;, continue, nextSymbol, ;, }]
[;, continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, )]
[), ;, continue, nextSymbol, ;, }, }, }, }, void, fillPropertySymbols, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root]
[;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler]
[., process, (, externs, ,, root, ), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root]
[), ., process, (, externs, ,, root, ), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node]
[), ), ., process, (, externs, ,, root, ), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,]
[,, root, ), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, .]
[), ;, }, void, fillJSDocInfo, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[;, for, (, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =, sym, ., getJSDocInfo, (, ), ;]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), ), )]
[,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), ), ), ;, for, (, Symbol, sym, :, getAllSymbolsSorted, (, )]
[., newArrayList, (, externs, ,, root, ), ,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), ), ), ;, for]
[,, root, ), ,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), ), ), ;, for, (, Symbol, sym, :]
[), ,, new, JSDocInfoCollector, (, compiler, ., getTypeRegistry, (, ), ), ), ;, for, (, Symbol, sym, :, getAllSymbolsSorted, (]
[), ;, for, (, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =, sym, ., getJSDocInfo, (, )]
[), ), ;, for, (, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =, sym, ., getJSDocInfo, (]
[., getTypeRegistry, (, ), ), ), ;, for, (, Symbol, sym, :, getAllSymbolsSorted, (, ), ), {, JSDocInfo, info, =]
[), {, JSDocInfo, info, =, sym, ., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, continue, ;]
[;, if, (, info, ==, null, ), {, continue, ;, }, for, (, Marker, marker, :, info, ., getMarkers, (]
[., getJSDocInfo, (, ), ;, if, (, info, ==, null, ), {, continue, ;, }, for, (, Marker, marker, :]
[), {, continue, ;, }, for, (, Marker, marker, :, info, ., getMarkers, (, ), ), {, SourcePosition, <, Node]
[==, null, ), {, continue, ;, }, for, (, Marker, marker, :, info, ., getMarkers, (, ), ), {, SourcePosition]
[), {, continue, ;, }, for, (, Marker, marker, :, info, ., getMarkers, (, ), ), {, SourcePosition, <, Node]
[), {, SourcePosition, <, Node, >, pos, =, marker, ., getNameNode, (, ), ;, if, (, pos, ==, null, )]
[., getMarkers, (, ), ), {, SourcePosition, <, Node, >, pos, =, marker, ., getNameNode, (, ), ;, if, (]
[;, if, (, pos, ==, null, ), {, continue, ;, }, Node, paramNode, =, pos, ., getItem, (, ), ;]
[., getNameNode, (, ), ;, if, (, pos, ==, null, ), {, continue, ;, }, Node, paramNode, =, pos, .]
[), {, continue, ;, }, Node, paramNode, =, pos, ., getItem, (, ), ;, String, name, =, paramNode, ., getString]
[==, null, ), {, continue, ;, }, Node, paramNode, =, pos, ., getItem, (, ), ;, String, name, =, paramNode]
[), {, continue, ;, }, Node, paramNode, =, pos, ., getItem, (, ), ;, String, name, =, paramNode, ., getString]
[;, String, name, =, paramNode, ., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (, sym, ,, name, ), ;]
[., getItem, (, ), ;, String, name, =, paramNode, ., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (, sym]
[;, Symbol, param, =, getParameterInFunction, (, sym, ,, name, ), ;, if, (, param, ==, null, ), {, SourcePosition, <]
[., getString, (, ), ;, Symbol, param, =, getParameterInFunction, (, sym, ,, name, ), ;, if, (, param, ==, null]
[;, if, (, param, ==, null, ), {, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, ), ;]
[,, name, ), ;, if, (, param, ==, null, ), {, SourcePosition, <, Node, >, typePos, =, marker, ., getType]
[), ;, if, (, param, ==, null, ), {, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, )]
[), {, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, ), ;, JSType, type, =, null, ;, if]
[==, null, ), {, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, ), ;, JSType, type, =, null]
[), {, SourcePosition, <, Node, >, typePos, =, marker, ., getType, (, ), ;, JSType, type, =, null, ;, if]
[;, JSType, type, =, null, ;, if, (, typePos, !=, null, ), {, type, =, typePos, ., getItem, (, )]
[., getType, (, ), ;, JSType, type, =, null, ;, if, (, typePos, !=, null, ), {, type, =, typePos]
[;, if, (, typePos, !=, null, ), {, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;]
[), {, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym, ., docScope]
[!=, null, ), {, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym]
[), {, type, =, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym, ., docScope]
[=, typePos, ., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym, ., docScope, ==, null, )]
[;, }, if, (, sym, ., docScope, ==, null, ), {, sym, ., docScope, =, new, SymbolScope, (, null, ,]
[., getJSType, (, ), ;, }, if, (, sym, ., docScope, ==, null, ), {, sym, ., docScope, =, new]
[., getItem, (, ), ., getJSType, (, ), ;, }, if, (, sym, ., docScope, ==, null, ), {, sym]
[), {, sym, ., docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol]
[==, null, ), {, sym, ., docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;]
[., docScope, ==, null, ), {, sym, ., docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,, sym]
[), {, sym, ., docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol]
[=, new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name]
[., docScope, =, new, SymbolScope, (, null, ,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared]
[;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==]
[,, null, ,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, .]
[,, null, ,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, )]
[,, sym, ), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if]
[), ;, }, Symbol, existingSymbol, =, isAnySymbolDeclared, (, name, ,, paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol]
[;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym, .]
[,, paramNode, ,, sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type]
[,, sym, ., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type]
[), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym]
[., docScope, ), ;, if, (, existingSymbol, ==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null]
[), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,, null, )]
[==, null, ), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,]
[), {, declareSymbol, (, name, ,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,, null, )]
[;, }, }, else, {, param, ., defineReferenceAt, (, paramNode, ), ;, }, }, }, }, private, void, createPropertyScopeFor, (]
[,, type, ,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {]
[,, type, ==, null, ,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {, param, .]
[,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {, param, ., defineReferenceAt, (, paramNode, )]
[==, null, ,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {, param, ., defineReferenceAt, (]
[,, sym, ., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {, param, ., defineReferenceAt, (, paramNode, )]
[,, paramNode, ,, null, ), ;, }, }, else, {, param, ., defineReferenceAt, (, paramNode, ), ;, }, }, }]
[., docScope, ,, paramNode, ,, null, ), ;, }, }, else, {, param, ., defineReferenceAt, (, paramNode, ), ;, }]
[,, null, ), ;, }, }, else, {, param, ., defineReferenceAt, (, paramNode, ), ;, }, }, }, }, private]
[), ;, }, }, else, {, param, ., defineReferenceAt, (, paramNode, ), ;, }, }, }, }, private, void, createPropertyScopeFor]
[;, }, }, }, }, private, void, createPropertyScopeFor, (, Symbol, s, ), {, if, (, s, ., propertyScope, !=, null]
[., defineReferenceAt, (, paramNode, ), ;, }, }, }, }, private, void, createPropertyScopeFor, (, Symbol, s, ), {, if, (]
[), ;, }, }, }, }, private, void, createPropertyScopeFor, (, Symbol, s, ), {, if, (, s, ., propertyScope, !=]
[), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, ), ==, null]
[!=, null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, )]
[., propertyScope, !=, null, ), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType]
[), {, return, ;, }, SymbolScope, parentPropertyScope, =, null, ;, ObjectType, type, =, s, ., getType, (, ), ==, null]
[;, ObjectType, type, =, s, ., getType, (, ), ==, null, ?, null, :, s, ., getType, (, ), .]
[;, if, (, type, ==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;]
[?, null, :, s, ., getType, (, ), ., toObjectType, (, ), ;, if, (, type, ==, null, ), {]
[==, null, ?, null, :, s, ., getType, (, ), ., toObjectType, (, ), ;, if, (, type, ==, null]
[., getType, (, ), ==, null, ?, null, :, s, ., getType, (, ), ., toObjectType, (, ), ;, if]
[?, null, :, s, ., getType, (, ), ., toObjectType, (, ), ;, if, (, type, ==, null, ), {]
[:, s, ., getType, (, ), ., toObjectType, (, ), ;, if, (, type, ==, null, ), {, return, ;]
[;, if, (, type, ==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;]
[., toObjectType, (, ), ;, if, (, type, ==, null, ), {, return, ;, }, ObjectType, proto, =, type, .]
[., getType, (, ), ., toObjectType, (, ), ;, if, (, type, ==, null, ), {, return, ;, }, ObjectType]
[), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&]
[==, null, ), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=]
[), {, return, ;, }, ObjectType, proto, =, type, ., getParentScope, (, ), ;, if, (, proto, !=, null, &&]
[;, if, (, proto, !=, null, &&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {]
[., getParentScope, (, ), ;, if, (, proto, !=, null, &&, proto, !=, type, &&, proto, ., getConstructor, (, )]
[), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, )]
[&&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, )]
[&&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto]
[!=, null, &&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf]
[&&, proto, !=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto]
[&&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, )]
[!=, type, &&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor]
[&&, proto, ., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, )]
[), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, )]
[!=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=]
[., getConstructor, (, ), !=, null, ), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;]
[), {, Symbol, parentSymbol, =, getSymbolForInstancesOf, (, proto, ., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, )]
[;, if, (, parentSymbol, !=, null, ), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (, )]
[), ;, if, (, parentSymbol, !=, null, ), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (]
[., getConstructor, (, ), ), ;, if, (, parentSymbol, !=, null, ), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =]
[), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =]
[!=, null, ), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType]
[), {, createPropertyScopeFor, (, parentSymbol, ), ;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =]
[;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =, type, ;, Iterable, <, String, >]
[), ;, parentPropertyScope, =, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =, type, ;, Iterable, <, String]
[=, parentSymbol, ., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =, type, ;, Iterable, <, String, >, propNames, =]
[;, }, }, ObjectType, instanceType, =, type, ;, Iterable, <, String, >, propNames, =, type, ., getOwnPropertyNames, (, ), ;]
[., getPropertyScope, (, ), ;, }, }, ObjectType, instanceType, =, type, ;, Iterable, <, String, >, propNames, =, type, .]
[;, Iterable, <, String, >, propNames, =, type, ., getOwnPropertyNames, (, ), ;, if, (, instanceType, ., isFunctionPrototypeType, (, )]
[;, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, instanceType, =, instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (]
[., getOwnPropertyNames, (, ), ;, if, (, instanceType, ., isFunctionPrototypeType, (, ), ), {, instanceType, =, instanceType, ., getOwnerFunction, (]
[), {, instanceType, =, instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =]
[., isFunctionPrototypeType, (, ), ), {, instanceType, =, instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, Set, <]
[=, instanceType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =, Sets, ., newHashSet]
[;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames, ), ;, Iterables, ., addAll, (, set, ,]
[., getInstanceType, (, ), ;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames, ), ;, Iterables, .]
[., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, Set, <, String, >, set, =, Sets, ., newHashSet, (, propNames]
[;, Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }, s]
[., newHashSet, (, propNames, ), ;, Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames]
[), ;, Iterables, ., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }]
[;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,, s]
[., addAll, (, set, ,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }, s, ., setPropertyScope]
[,, instanceType, ., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (]
[), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,]
[., getOwnPropertyNames, (, ), ), ;, propNames, =, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,]
[=, set, ;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,, s, ), )]
[;, }, s, ., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,, s, ), ), ;, for]
[;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot, (, propName]
[., setPropertyScope, (, new, SymbolScope, (, null, ,, parentPropertyScope, ,, type, ,, s, ), ), ;, for, (, String, propName]
[), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot, (]
[,, parentPropertyScope, ,, type, ,, s, ), ), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType]
[,, type, ,, s, ), ), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp]
[,, s, ), ), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType]
[), ), ;, for, (, String, propName, :, propNames, ), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot]
[), {, StaticSlot, <, JSType, >, newProp, =, instanceType, ., getSlot, (, propName, ), ;, if, (, newProp, ., getDeclaration]
[;, if, (, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =, symbols, .]
[., getSlot, (, propName, ), ;, if, (, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }]
[), ;, if, (, newProp, ., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =, symbols]
[), {, continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (]
[==, null, ), {, continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, ., getDeclaration, (, ), .]
[., getDeclaration, (, ), ==, null, ), {, continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, .]
[), {, continue, ;, }, Symbol, oldProp, =, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (]
[;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get, (]
[., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), +, "."]
[,, s, ., getName, (, ), +, ".", +, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol]
[., getNode, (, ), ,, s, ., getName, (, ), +, ".", +, propName, ), ;, if, (, oldProp, !=]
[., getDeclaration, (, ), ., getNode, (, ), ,, s, ., getName, (, ), +, ".", +, propName, ), ;]
[), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get]
[+, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols]
[+, ".", +, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if]
[., getName, (, ), +, ".", +, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp]
[+, propName, ), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols]
[), ;, if, (, oldProp, !=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get]
[), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get, (, newProp, ., getDeclaration, (, ), .]
[!=, null, ), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get, (, newProp, ., getDeclaration, (]
[), {, removeSymbol, (, oldProp, ), ;, }, if, (, symbols, ., get, (, newProp, ., getDeclaration, (, ), .]
[;, }, if, (, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp, .]
[), ;, }, if, (, symbols, ., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp]
[), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp]
[!=, null, ), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo]
[., get, (, newProp, ., getDeclaration, (, ), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=]
[,, newProp, ., getName, (, ), ), !=, null, ), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;]
[., getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null, ), {, logger, ., warning, (, "Found duplicate symbol "]
[., getDeclaration, (, ), ., getNode, (, ), ,, newProp, ., getName, (, ), ), !=, null, ), {, logger]
[), !=, null, ), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =]
[., getName, (, ), ), !=, null, ), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;]
[), {, logger, ., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp]
[;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (, oldProp, !=]
[., warning, (, "Found duplicate symbol ", +, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, .]
[), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (, oldProp]
[+, newProp, ), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if]
[), ;, continue, ;, }, Symbol, newSym, =, copySymbolTo, (, newProp, ,, s, ., propertyScope, ), ;, if, (, oldProp]
[;, if, (, oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {, newSym]
[,, s, ., propertyScope, ), ;, if, (, oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, )]
[), ;, if, (, oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {]
[., propertyScope, ), ;, if, (, oldProp, !=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null]
[), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo]
[!=, null, ), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (, oldProp]
[), {, if, (, newSym, ., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo]
[), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (, oldProp, .]
[==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (]
[., getJSDocInfo, (, ), ==, null, ), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }]
[), {, newSym, ., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (, oldProp, .]
[;, }, newSym, ., setPropertyScope, (, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :, oldProp, ., references, .]
[., setJSDocInfo, (, oldProp, ., getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (, oldProp, ., propertyScope, ), ;]
[), ;, }, newSym, ., setPropertyScope, (, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :, oldProp, ., references]
[., getJSDocInfo, (, ), ), ;, }, newSym, ., setPropertyScope, (, oldProp, ., propertyScope, ), ;, for, (, Reference, ref]
[;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, ), ), {, newSym, ., defineReferenceAt, (, ref]
[., setPropertyScope, (, oldProp, ., propertyScope, ), ;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, )]
[), ;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, ), ), {, newSym, ., defineReferenceAt, (]
[., propertyScope, ), ;, for, (, Reference, ref, :, oldProp, ., references, ., values, (, ), ), {, newSym, .]
[), {, newSym, ., defineReferenceAt, (, ref, ., getNode, (, ), ), ;, }, }, }, }, void, fillThisReferences, (]
[., values, (, ), ), {, newSym, ., defineReferenceAt, (, ref, ., getNode, (, ), ), ;, }, }, }]
[., references, ., values, (, ), ), {, newSym, ., defineReferenceAt, (, ref, ., getNode, (, ), ), ;, }]
[;, }, }, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (, new]
[., defineReferenceAt, (, ref, ., getNode, (, ), ), ;, }, }, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,]
[), ;, }, }, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node, root, ), {, (]
[., getNode, (, ), ), ;, }, }, }, }, void, fillThisReferences, (, AbstractCompiler, compiler, ,, Node, externs, ,, Node]
[;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope, ), {, Node, otherScopeRoot, =, otherScope, ., getRootNode, (]
[., process, (, externs, ,, root, ), ;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope, ), {]
[), ., process, (, externs, ,, root, ), ;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope, )]
[), ), ., process, (, externs, ,, root, ), ;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope]
[,, root, ), ;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope, ), {, Node, otherScopeRoot, =, otherScope]
[), ;, }, private, SymbolScope, createScopeFrom, (, StaticScope, <, JSType, >, otherScope, ), {, Node, otherScopeRoot, =, otherScope, ., getRootNode]
[;, SymbolScope, myScope, =, scopes, ., get, (, otherScopeRoot, ), ;, if, (, myScope, ==, null, ), {, StaticScope, <]
[., getRootNode, (, ), ;, SymbolScope, myScope, =, scopes, ., get, (, otherScopeRoot, ), ;, if, (, myScope, ==, null]
[;, if, (, myScope, ==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;]
[., get, (, otherScopeRoot, ), ;, if, (, myScope, ==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope]
[), ;, if, (, myScope, ==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, )]
[), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, )]
[==, null, ), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==]
[), {, StaticScope, <, JSType, >, otherScopeParent, =, otherScope, ., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, )]
[;, if, (, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }]
[., getParentScope, (, ), ;, if, (, otherScopeParent, ==, null, ), {, Preconditions, ., checkState, (, globalScope, ==, null, ,]
[), {, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot]
[==, null, ), {, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope]
[), {, Preconditions, ., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot]
[;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,]
[., checkState, (, globalScope, ==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==]
[,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (]
[==, null, ,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :]
[,, "Global scopes found at different roots", ), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (]
[), ;, }, myScope, =, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, )]
[=, new, SymbolScope, (, otherScopeRoot, ,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis]
[;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, ), ), {, globalScope]
[,, otherScopeParent, ==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, )]
[,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if]
[?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put]
[==, null, ?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes]
[?, null, :, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put]
[:, createScopeFrom, (, otherScopeParent, ), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot]
[,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if]
[), ,, otherScope, ., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;]
[,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, )]
[., getTypeOfThis, (, ), ,, null, ), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (, myScope]
[), ;, scopes, ., put, (, otherScopeRoot, ,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, ), ), {]
[;, if, (, myScope, ., isGlobalScope, (, ), ), {, globalScope, =, myScope, ;, }, }, return, myScope, ;, }]
[., put, (, otherScopeRoot, ,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, ), ), {, globalScope, =, myScope]
[,, myScope, ), ;, if, (, myScope, ., isGlobalScope, (, ), ), {, globalScope, =, myScope, ;, }, }, return]
[), ;, if, (, myScope, ., isGlobalScope, (, ), ), {, globalScope, =, myScope, ;, }, }, return, myScope, ;]
[), {, globalScope, =, myScope, ;, }, }, return, myScope, ;, }, public, static, final, class, Symbol, extends, SimpleSlot, {]
[., isGlobalScope, (, ), ), {, globalScope, =, myScope, ;, }, }, return, myScope, ;, }, public, static, final, class]
[=, myScope, ;, }, }, return, myScope, ;, }, public, static, final, class, Symbol, extends, SimpleSlot, {, private, final, Map]
[;, }, }, return, myScope, ;, }, public, static, final, class, Symbol, extends, SimpleSlot, {, private, final, Map, <, Node]
[;, }, public, static, final, class, Symbol, extends, SimpleSlot, {, private, final, Map, <, Node, ,, Reference, >, references, =]
[;, private, final, SymbolScope, scope, ;, private, SymbolScope, propertyScope, =, null, ;, private, Reference, declaration, =, null, ;, private, JSDocInfo]
[., newLinkedHashMap, (, ), ;, private, final, SymbolScope, scope, ;, private, SymbolScope, propertyScope, =, null, ;, private, Reference, declaration, =]
[;, private, Reference, declaration, =, null, ;, private, JSDocInfo, docInfo, =, null, ;, private, SymbolScope, docScope, =, null, ;, Symbol]
[;, private, JSDocInfo, docInfo, =, null, ;, private, SymbolScope, docScope, =, null, ;, Symbol, (, String, name, ,, JSType, type]
[;, private, SymbolScope, docScope, =, null, ;, Symbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope]
[;, Symbol, (, String, name, ,, JSType, type, ,, boolean, inferred, ,, SymbolScope, scope, ), {, super, (, name, ,]
[,, type, ,, inferred, ), ;, this, ., scope, =, scope, ;, }, @, Override, public, Reference, getDeclaration, (, )]
[,, inferred, ), ;, this, ., scope, =, scope, ;, }, @, Override, public, Reference, getDeclaration, (, ), {, return]
[), ;, this, ., scope, =, scope, ;, }, @, Override, public, Reference, getDeclaration, (, ), {, return, declaration, ;]
[=, scope, ;, }, @, Override, public, Reference, getDeclaration, (, ), {, return, declaration, ;, }, public, FunctionType, getFunctionType, (]
[., scope, =, scope, ;, }, @, Override, public, Reference, getDeclaration, (, ), {, return, declaration, ;, }, public, FunctionType]
[;, }, @, Override, public, Reference, getDeclaration, (, ), {, return, declaration, ;, }, public, FunctionType, getFunctionType, (, ), {]
[;, }, public, FunctionType, getFunctionType, (, ), {, return, JSType, ., toMaybeFunctionType, (, getType, (, ), ), ;, }, public]
[;, }, public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =, references, ., get, (, n, ), ;]
[., toMaybeFunctionType, (, getType, (, ), ), ;, }, public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =]
[), ;, }, public, Reference, defineReferenceAt, (, Node, n, ), {, Reference, result, =, references, ., get, (, n, )]
[;, if, (, result, ==, null, ), {, result, =, new, Reference, (, this, ,, n, ), ;, references, .]
[., get, (, n, ), ;, if, (, result, ==, null, ), {, result, =, new, Reference, (, this, ,]
[), ;, if, (, result, ==, null, ), {, result, =, new, Reference, (, this, ,, n, ), ;, references]
[), {, result, =, new, Reference, (, this, ,, n, ), ;, references, ., put, (, n, ,, result, )]
[==, null, ), {, result, =, new, Reference, (, this, ,, n, ), ;, references, ., put, (, n, ,]
[), {, result, =, new, Reference, (, this, ,, n, ), ;, references, ., put, (, n, ,, result, )]
[=, new, Reference, (, this, ,, n, ), ;, references, ., put, (, n, ,, result, ), ;, }, return]
[;, references, ., put, (, n, ,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref]
[,, n, ), ;, references, ., put, (, n, ,, result, ), ;, }, return, result, ;, }, void, setDeclaration]
[), ;, references, ., put, (, n, ,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference]
[;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (, this, ., declaration]
[., put, (, n, ,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {]
[,, result, ), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (]
[), ;, }, return, result, ;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (, this, .]
[;, }, void, setDeclaration, (, Reference, ref, ), {, Preconditions, ., checkState, (, this, ., declaration, ==, null, ), ;]
[;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return, scope, ., isGlobalScope, (, )]
[., checkState, (, this, ., declaration, ==, null, ), ;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope]
[), ;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return, scope, ., isGlobalScope, (]
[==, null, ), ;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return, scope, .]
[., declaration, ==, null, ), ;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return]
[), ;, this, ., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return, scope, ., isGlobalScope, (]
[=, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return, scope, ., isGlobalScope, (, ), ;, }, public, boolean]
[., declaration, =, ref, ;, }, public, boolean, inGlobalScope, (, ), {, return, scope, ., isGlobalScope, (, ), ;, }]
[;, }, public, boolean, inGlobalScope, (, ), {, return, scope, ., isGlobalScope, (, ), ;, }, public, boolean, inExterns, (]
[;, }, public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?]
[., isGlobalScope, (, ), ;, }, public, boolean, inExterns, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[;, return, n, ==, null, ?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, )]
[;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null, ?, null, :, declaration, ., getNode, (, )]
[?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null]
[==, null, ?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration]
[?, false, :, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null]
[:, n, ., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null, ?, null]
[;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null, ?, null, :, declaration, ., getNode, (, )]
[., isFromExterns, (, ), ;, }, public, Node, getDeclarationNode, (, ), {, return, declaration, ==, null, ?, null, :, declaration]
[;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?]
[?, null, :, declaration, ., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode]
[==, null, ?, null, :, declaration, ., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n]
[?, null, :, declaration, ., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode]
[:, declaration, ., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, )]
[;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return, n, ==, null, ?]
[., getNode, (, ), ;, }, public, String, getSourceFileName, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, return]
[;, return, n, ==, null, ?, null, :, n, ., getSourceFileName, (, ), ;, }, public, SymbolScope, getPropertyScope, (, )]
[;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {, this]
[?, null, :, n, ., getSourceFileName, (, ), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }]
[==, null, ?, null, :, n, ., getSourceFileName, (, ), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope]
[?, null, :, n, ., getSourceFileName, (, ), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }]
[:, n, ., getSourceFileName, (, ), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }, void, setPropertyScope]
[;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope, scope, ), {, this]
[., getSourceFileName, (, ), ;, }, public, SymbolScope, getPropertyScope, (, ), {, return, propertyScope, ;, }, void, setPropertyScope, (, SymbolScope]
[;, }, void, setPropertyScope, (, SymbolScope, scope, ), {, this, ., propertyScope, =, scope, ;, if, (, scope, !=, null]
[=, scope, ;, if, (, scope, !=, null, ), {, this, ., propertyScope, ., setSymbolForScope, (, this, ), ;, }]
[., propertyScope, =, scope, ;, if, (, scope, !=, null, ), {, this, ., propertyScope, ., setSymbolForScope, (, this, )]
[;, if, (, scope, !=, null, ), {, this, ., propertyScope, ., setSymbolForScope, (, this, ), ;, }, }, @]
[), {, this, ., propertyScope, ., setSymbolForScope, (, this, ), ;, }, }, @, Override, public, JSDocInfo, getJSDocInfo, (, )]
[!=, null, ), {, this, ., propertyScope, ., setSymbolForScope, (, this, ), ;, }, }, @, Override, public, JSDocInfo, getJSDocInfo]
[), {, this, ., propertyScope, ., setSymbolForScope, (, this, ), ;, }, }, @, Override, public, JSDocInfo, getJSDocInfo, (, )]
[;, }, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, void, setJSDocInfo, (, JSDocInfo, info]
[., setSymbolForScope, (, this, ), ;, }, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }]
[., propertyScope, ., setSymbolForScope, (, this, ), ;, }, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo]
[), ;, }, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, void, setJSDocInfo, (, JSDocInfo]
[;, }, void, setJSDocInfo, (, JSDocInfo, info, ), {, this, ., docInfo, =, info, ;, }, public, boolean, isProperty, (]
[=, info, ;, }, public, boolean, isProperty, (, ), {, return, scope, ., isPropertyScope, (, ), ;, }, public, boolean]
[., docInfo, =, info, ;, }, public, boolean, isProperty, (, ), {, return, scope, ., isPropertyScope, (, ), ;, }]
[;, }, public, boolean, isProperty, (, ), {, return, scope, ., isPropertyScope, (, ), ;, }, public, boolean, isLexicalVariable, (]
[;, }, public, boolean, isLexicalVariable, (, ), {, return, scope, ., isLexicalScope, (, ), ;, }, public, boolean, isDocOnlyParameter, (]
[., isPropertyScope, (, ), ;, }, public, boolean, isLexicalVariable, (, ), {, return, scope, ., isLexicalScope, (, ), ;, }]
[;, }, public, boolean, isDocOnlyParameter, (, ), {, return, scope, ., isDocScope, (, ), ;, }, @, Override, public, String]
[., isLexicalScope, (, ), ;, }, public, boolean, isDocOnlyParameter, (, ), {, return, scope, ., isDocScope, (, ), ;, }]
[;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getDeclarationNode, (, ), ;, int, lineNo, =]
[., isDocScope, (, ), ;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getDeclarationNode, (, )]
[;, int, lineNo, =, n, ==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return, getName, (]
[;, return, getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":", +, lineNo, ;, }, }, public, static]
[?, -, 1, :, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName, (, )]
[==, null, ?, -, 1, :, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName]
[?, -, 1, :, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName, (, )]
[:, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":", +]
[:, n, ., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":", +]
[;, return, getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":", +, lineNo, ;, }, }, public, static]
[., getLineno, (, ), ;, return, getName, (, ), +, "@", +, getSourceFileName, (, ), +, ":", +, lineNo, ;]
[;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (, Symbol, symbol, ,, Node]
[+, lineNo, ;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (, Symbol, symbol]
[+, ":", +, lineNo, ;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (]
[+, getSourceFileName, (, ), +, ":", +, lineNo, ;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol]
[+, "@", +, getSourceFileName, (, ), +, ":", +, lineNo, ;, }, }, public, static, final, class, Reference, extends, SimpleReference]
[+, getSourceFileName, (, ), +, ":", +, lineNo, ;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol]
[+, ":", +, lineNo, ;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (]
[+, lineNo, ;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (, Symbol, symbol]
[;, }, }, public, static, final, class, Reference, extends, SimpleReference, <, Symbol, >, {, Reference, (, Symbol, symbol, ,, Node]
[,, node, ), ;, }, }, public, static, final, class, SymbolScope, implements, StaticScope, <, JSType, >, {, private, final, Node]
[), ;, }, }, public, static, final, class, SymbolScope, implements, StaticScope, <, JSType, >, {, private, final, Node, rootNode, ;]
[;, private, final, int, scopeDepth, ;, private, int, innerAnonFunctionsWithNames, =, 0, ;, private, Symbol, mySymbol, ;, SymbolScope, (, Node, rootNode]
[., newLinkedHashMap, (, ), ;, private, final, int, scopeDepth, ;, private, int, innerAnonFunctionsWithNames, =, 0, ;, private, Symbol, mySymbol, ;]
[;, private, Symbol, mySymbol, ;, SymbolScope, (, Node, rootNode, ,, @, Nullable, SymbolScope, parent, ,, JSType, typeOfThis, ,, Symbol, mySymbol]
[=, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent]
[., rootNode, =, rootNode, ;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth]
[;, this, ., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null]
[=, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (]
[., parent, =, parent, ;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0]
[;, this, ., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, .]
[=, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +]
[., typeOfThis, =, typeOfThis, ;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (]
[;, this, ., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, )]
[=, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol]
[., scopeDepth, =, parent, ==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;, this]
[;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (]
[?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol, =, mySymbol, ;, }]
[==, null, ?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol, =, mySymbol]
[?, 0, :, (, parent, ., getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol, =, mySymbol, ;, }]
[:, (, parent, ., getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope]
[;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (]
[), ;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope]
[+, 1, ), ;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }]
[., getScopeDepth, (, ), +, 1, ), ;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {]
[), ;, this, ., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope]
[=, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (, Symbol, sym, ), {]
[., mySymbol, =, mySymbol, ;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (, Symbol, sym]
[;, }, Symbol, getSymbolForScope, (, ), {, return, mySymbol, ;, }, void, setSymbolForScope, (, Symbol, sym, ), {, this, .]
[;, }, void, setSymbolForScope, (, Symbol, sym, ), {, this, ., mySymbol, =, sym, ;, }, public, int, getIndexOfSymbol, (]
[=, sym, ;, }, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return, Iterables, ., indexOf, (, ownSymbols, ., values]
[., mySymbol, =, sym, ;, }, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return, Iterables, ., indexOf, (, ownSymbols]
[;, }, public, int, getIndexOfSymbol, (, Symbol, sym, ), {, return, Iterables, ., indexOf, (, ownSymbols, ., values, (, )]
[;, }, @, Override, public, Node, getRootNode, (, ), {, return, rootNode, ;, }, @, Override, public, SymbolScope, getParentScope, (]
[., indexOf, (, ownSymbols, ., values, (, ), ,, Predicates, ., equalTo, (, sym, ), ), ;, }, @, Override]
[,, Predicates, ., equalTo, (, sym, ), ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, rootNode]
[., values, (, ), ,, Predicates, ., equalTo, (, sym, ), ), ;, }, @, Override, public, Node, getRootNode, (]
[), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, rootNode, ;, }, @, Override, public, SymbolScope, getParentScope]
[., equalTo, (, sym, ), ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, rootNode, ;, }]
[), ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, rootNode, ;, }, @, Override, public, SymbolScope]
[;, }, @, Override, public, SymbolScope, getParentScope, (, ), {, return, parent, ;, }, public, Symbol, getQualifiedSlot, (, String, name]
[;, }, public, Symbol, getQualifiedSlot, (, String, name, ), {, Symbol, fullyNamedSym, =, getSlot, (, name, ), ;, if, (]
[;, if, (, fullyNamedSym, !=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, "."]
[), ;, if, (, fullyNamedSym, !=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (]
[), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=]
[!=, null, ), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (]
[), {, return, fullyNamedSym, ;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=]
[;, }, int, dot, =, name, ., lastIndexOf, (, ".", ), ;, if, (, dot, !=, -, 1, ), {]
[;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,]
[., lastIndexOf, (, ".", ), ;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (, name]
[), ;, if, (, dot, !=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0]
[), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (, owner]
[!=, -, 1, ), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;]
[), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (, owner]
[), {, Symbol, owner, =, getQualifiedSlot, (, name, ., substring, (, 0, ,, dot, ), ), ;, if, (, owner]
[;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope]
[), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner, .]
[., substring, (, 0, ,, dot, ), ), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, )]
[,, dot, ), ), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {]
[), ), ;, if, (, owner, !=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner]
[), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +, 1, ), )]
[&&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name]
[!=, null, &&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot]
[&&, owner, ., getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name]
[), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +, 1, ), )]
[!=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +, 1]
[., getPropertyScope, (, ), !=, null, ), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring]
[), {, return, owner, ., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +, 1, ), )]
[;, }, }, return, null, ;, }, @, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol, own, =]
[., getSlot, (, name, ., substring, (, dot, +, 1, ), ), ;, }, }, return, null, ;, }, @]
[., getPropertyScope, (, ), ., getSlot, (, name, ., substring, (, dot, +, 1, ), ), ;, }, }, return]
[), ;, }, }, return, null, ;, }, @, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol, own]
[., substring, (, dot, +, 1, ), ), ;, }, }, return, null, ;, }, @, Override, public, Symbol, getSlot]
[), ), ;, }, }, return, null, ;, }, @, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol]
[+, 1, ), ), ;, }, }, return, null, ;, }, @, Override, public, Symbol, getSlot, (, String, name, )]
[), ), ;, }, }, return, null, ;, }, @, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol]
[;, }, @, Override, public, Symbol, getSlot, (, String, name, ), {, Symbol, own, =, getOwnSlot, (, name, ), ;]
[;, if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?, null]
[), ;, if, (, own, !=, null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?]
[), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot, (, name]
[!=, null, ), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot]
[), {, return, own, ;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot, (, name]
[;, }, Symbol, ancestor, =, parent, ==, null, ?, null, :, parent, ., getSlot, (, name, ), ;, if, (]
[;, if, (, ancestor, !=, null, ), {, return, ancestor, ;, }, return, null, ;, }, @, Override, public, Symbol]
[?, null, :, parent, ., getSlot, (, name, ), ;, if, (, ancestor, !=, null, ), {, return, ancestor, ;]
[==, null, ?, null, :, parent, ., getSlot, (, name, ), ;, if, (, ancestor, !=, null, ), {, return]
[?, null, :, parent, ., getSlot, (, name, ), ;, if, (, ancestor, !=, null, ), {, return, ancestor, ;]
[:, parent, ., getSlot, (, name, ), ;, if, (, ancestor, !=, null, ), {, return, ancestor, ;, }, return]
[;, if, (, ancestor, !=, null, ), {, return, ancestor, ;, }, return, null, ;, }, @, Override, public, Symbol]
[., getSlot, (, name, ), ;, if, (, ancestor, !=, null, ), {, return, ancestor, ;, }, return, null, ;]
[), ;, if, (, ancestor, !=, null, ), {, return, ancestor, ;, }, return, null, ;, }, @, Override, public]
[), {, return, ancestor, ;, }, return, null, ;, }, @, Override, public, Symbol, getOwnSlot, (, String, name, ), {]
[!=, null, ), {, return, ancestor, ;, }, return, null, ;, }, @, Override, public, Symbol, getOwnSlot, (, String, name]
[), {, return, ancestor, ;, }, return, null, ;, }, @, Override, public, Symbol, getOwnSlot, (, String, name, ), {]
[;, }, return, null, ;, }, @, Override, public, Symbol, getOwnSlot, (, String, name, ), {, return, ownSymbols, ., get]
[;, }, @, Override, public, Symbol, getOwnSlot, (, String, name, ), {, return, ownSymbols, ., get, (, name, ), ;]
[;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, ), {]
[., get, (, name, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ;, }, public]
[), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, typeOfThis, ;, }, public, boolean, isGlobalScope, (, )]
[;, }, public, boolean, isGlobalScope, (, ), {, return, getParentScope, (, ), ==, null, &&, getRootNode, (, ), !=, null]
[;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&, mySymbol]
[&&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null]
[==, null, &&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, )]
[&&, getRootNode, (, ), !=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null]
[;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&, mySymbol]
[!=, null, ;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null]
[;, }, public, boolean, isDocScope, (, ), {, return, getRootNode, (, ), ==, null, &&, mySymbol, !=, null, &&, mySymbol]
[;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null, &&, !, isDocScope, (, ), ;]
[&&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null]
[&&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode]
[==, null, &&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {]
[&&, mySymbol, !=, null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode]
[&&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null]
[!=, null, &&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, )]
[&&, mySymbol, ., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null]
[;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null, &&, !, isDocScope, (, ), ;]
[==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null, &&, !, isDocScope, (]
[., docScope, ==, this, ;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null, &&, !]
[;, }, public, boolean, isPropertyScope, (, ), {, return, getRootNode, (, ), ==, null, &&, !, isDocScope, (, ), ;]
[;, }, public, boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=, null, ;, }, public, int, getScopeDepth, (]
[&&, !, isDocScope, (, ), ;, }, public, boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=, null, ;]
[==, null, &&, !, isDocScope, (, ), ;, }, public, boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=]
[&&, !, isDocScope, (, ), ;, }, public, boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=, null, ;]
[;, }, public, boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=, null, ;, }, public, int, getScopeDepth, (]
[;, }, public, boolean, isLexicalScope, (, ), {, return, getRootNode, (, ), !=, null, ;, }, public, int, getScopeDepth, (]
[;, }, public, int, getScopeDepth, (, ), {, return, scopeDepth, ;, }, @, Override, public, String, toString, (, ), {]
[!=, null, ;, }, public, int, getScopeDepth, (, ), {, return, scopeDepth, ;, }, @, Override, public, String, toString, (]
[;, }, public, int, getScopeDepth, (, ), {, return, scopeDepth, ;, }, @, Override, public, String, toString, (, ), {]
[;, }, @, Override, public, String, toString, (, ), {, Node, n, =, getRootNode, (, ), ;, if, (, n]
[;, if, (, n, !=, null, ), {, return, "Scope@", +, n, ., getSourceFileName, (, ), +, ":", +, n]
[), {, return, "Scope@", +, n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, ), ;, }]
[!=, null, ), {, return, "Scope@", +, n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, )]
[), {, return, "Scope@", +, n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, ), ;, }]
[;, }, else, {, return, "PropertyScope@", +, getSymbolForScope, (, ), ;, }, }, }, private, class, PropertyRefCollector, extends, NodeTraversal, .]
[+, n, ., getLineno, (, ), ;, }, else, {, return, "PropertyScope@", +, getSymbolForScope, (, ), ;, }, }, }]
[+, ":", +, n, ., getLineno, (, ), ;, }, else, {, return, "PropertyScope@", +, getSymbolForScope, (, ), ;, }]
[+, n, ., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, ), ;, }, else, {, return, "PropertyScope@"]
[+, ":", +, n, ., getLineno, (, ), ;, }, else, {, return, "PropertyScope@", +, getSymbolForScope, (, ), ;, }]
[., getSourceFileName, (, ), +, ":", +, n, ., getLineno, (, ), ;, }, else, {, return, "PropertyScope@", +, getSymbolForScope]
[+, n, ., getLineno, (, ), ;, }, else, {, return, "PropertyScope@", +, getSymbolForScope, (, ), ;, }, }, }]
[;, }, else, {, return, "PropertyScope@", +, getSymbolForScope, (, ), ;, }, }, }, private, class, PropertyRefCollector, extends, NodeTraversal, .]
[., getLineno, (, ), ;, }, else, {, return, "PropertyScope@", +, getSymbolForScope, (, ), ;, }, }, }, private, class]
[;, }, }, }, private, class, PropertyRefCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, PropertyRefCollector]
[+, getSymbolForScope, (, ), ;, }, }, }, private, class, PropertyRefCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, private, final]
[;, }, }, }, private, class, PropertyRefCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, PropertyRefCollector]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler]
[;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (, ownerSymbol, !=]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, boolean]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n]
[,, this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if]
[., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String]
[,, root, ), ,, this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol]
[), ,, this, ), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {]
[), ;, }, private, boolean, maybeDefineReference, (, Node, n, ,, String, propName, ,, Symbol, ownerSymbol, ), {, if, (, ownerSymbol]
[), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=]
[&&, ownerSymbol, ., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot]
[!=, null, &&, ownerSymbol, ., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, )]
[&&, ownerSymbol, ., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot]
[), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=]
[!=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (]
[., getPropertyScope, (, ), !=, null, ), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName]
[), {, Symbol, prop, =, ownerSymbol, ., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=]
[;, if, (, prop, !=, null, ), {, prop, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }]
[., getSlot, (, propName, ), ;, if, (, prop, !=, null, ), {, prop, ., defineReferenceAt, (, n, ), ;]
[., getPropertyScope, (, ), ., getSlot, (, propName, ), ;, if, (, prop, !=, null, ), {, prop, ., defineReferenceAt]
[), ;, if, (, prop, !=, null, ), {, prop, ., defineReferenceAt, (, n, ), ;, return, true, ;, }]
[), {, prop, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }, private, boolean]
[!=, null, ), {, prop, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }]
[), {, prop, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }, private, boolean]
[;, return, true, ;, }, }, return, false, ;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, )]
[., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String]
[), ;, return, true, ;, }, }, return, false, ;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n]
[;, }, }, return, false, ;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (]
[;, }, private, boolean, tryDefineLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {]
[), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null]
[!=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym]
[), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null]
[;, if, (, lexicalSym, !=, null, ), {, lexicalSym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }]
[., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, ), {, lexicalSym, ., defineReferenceAt, (, n, ), ;]
[), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, ), {, lexicalSym, ., defineReferenceAt, (, n, )]
[), ;, if, (, lexicalSym, !=, null, ), {, lexicalSym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }]
[), {, lexicalSym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }, private, void]
[!=, null, ), {, lexicalSym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }]
[), {, lexicalSym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }, private, void]
[;, return, true, ;, }, }, return, false, ;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, )]
[., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, return, false, ;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String]
[), ;, return, true, ;, }, }, return, false, ;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n]
[;, }, }, return, false, ;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (]
[;, }, private, void, tryRemoveLexicalQualifiedNameRef, (, String, name, ,, Node, n, ), {, if, (, name, !=, null, ), {]
[), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null]
[!=, null, ), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym]
[), {, Symbol, lexicalSym, =, getEnclosingScope, (, n, ), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null]
[;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode]
[., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, .]
[), ., getQualifiedSlot, (, name, ), ;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym]
[), ;, if, (, lexicalSym, !=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), .]
[), {, removeSymbol, (, lexicalSym, ), ;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String, propName, ,]
[&&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {, removeSymbol, (, lexicalSym, ), ;, }]
[&&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {]
[!=, null, &&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n]
[&&, lexicalSym, ., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {]
[&&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {, removeSymbol, (, lexicalSym, ), ;, }]
[., isLexicalVariable, (, ), &&, lexicalSym, ., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {, removeSymbol, (]
[), {, removeSymbol, (, lexicalSym, ), ;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String, propName, ,]
[==, n, ), {, removeSymbol, (, lexicalSym, ), ;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String]
[., getNode, (, ), ==, n, ), {, removeSymbol, (, lexicalSym, ), ;, }, }, }, private, boolean, maybeDefineTypedReference, (]
[., getDeclaration, (, ), ., getNode, (, ), ==, n, ), {, removeSymbol, (, lexicalSym, ), ;, }, }, }]
[), {, removeSymbol, (, lexicalSym, ), ;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String, propName, ,]
[;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String, propName, ,, JSType, owner, ), {, if, (]
[), ;, }, }, }, private, boolean, maybeDefineTypedReference, (, Node, n, ,, String, propName, ,, JSType, owner, ), {, if]
[), {, Symbol, sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (, sym, !=, null, ), {, sym]
[., isGlobalThisType, (, ), ), {, Symbol, sym, =, globalScope, ., getSlot, (, propName, ), ;, if, (, sym, !=]
[;, if, (, sym, !=, null, ), {, sym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }]
[., getSlot, (, propName, ), ;, if, (, sym, !=, null, ), {, sym, ., defineReferenceAt, (, n, ), ;]
[), ;, if, (, sym, !=, null, ), {, sym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }]
[), {, sym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor]
[!=, null, ), {, sym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, else, if, (, owner]
[), {, sym, ., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor]
[;, return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (, n]
[., defineReferenceAt, (, n, ), ;, return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), )]
[), ;, return, true, ;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (]
[;, }, }, else, if, (, owner, ., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,]
[), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, ), ), ), ;, }]
[., isNominalConstructor, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, )]
[;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy]
[,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, ), ), ), ;, }, else, if, (, owner, ., isEnumType]
[,, getSymbolDeclaredBy, (, owner, ., toMaybeFunctionType, (, ), ), ), ;, }, else, if, (, owner, ., isEnumType, (, )]
[), ;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,]
[), ), ;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,, propName]
[., toMaybeFunctionType, (, ), ), ), ;, }, else, if, (, owner, ., isEnumType, (, ), ), {, return, maybeDefineReference]
[), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeEnumType, (, ), ), ), ;, }]
[., isEnumType, (, ), ), {, return, maybeDefineReference, (, n, ,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeEnumType, (, )]
[;, }, else, {, boolean, defined, =, false, ;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), ), {]
[,, propName, ,, getSymbolDeclaredBy, (, owner, ., toMaybeEnumType, (, ), ), ), ;, }, else, {, boolean, defined, =, false]
[,, getSymbolDeclaredBy, (, owner, ., toMaybeEnumType, (, ), ), ), ;, }, else, {, boolean, defined, =, false, ;, for]
[), ;, }, else, {, boolean, defined, =, false, ;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), )]
[), ), ;, }, else, {, boolean, defined, =, false, ;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, )]
[., toMaybeEnumType, (, ), ), ), ;, }, else, {, boolean, defined, =, false, ;, for, (, Symbol, ctor, :]
[;, for, (, Symbol, ctor, :, getAllSymbolsForType, (, owner, ), ), {, if, (, maybeDefineReference, (, n, ,, propName, ,]
[), {, if, (, maybeDefineReference, (, n, ,, propName, ,, getSymbolForInstancesOf, (, ctor, ), ), ), {, defined, =, true]
[), ), {, if, (, maybeDefineReference, (, n, ,, propName, ,, getSymbolForInstancesOf, (, ctor, ), ), ), {, defined, =]
[), {, defined, =, true, ;, }, }, return, defined, ;, }, return, false, ;, }, @, Override, public, void]
[,, propName, ,, getSymbolForInstancesOf, (, ctor, ), ), ), {, defined, =, true, ;, }, }, return, defined, ;, }]
[,, getSymbolForInstancesOf, (, ctor, ), ), ), {, defined, =, true, ;, }, }, return, defined, ;, }, return, false]
[), ), {, defined, =, true, ;, }, }, return, defined, ;, }, return, false, ;, }, @, Override, public]
[), ), ), {, defined, =, true, ;, }, }, return, defined, ;, }, return, false, ;, }, @, Override]
[=, true, ;, }, }, return, defined, ;, }, return, false, ;, }, @, Override, public, void, visit, (, NodeTraversal]
[;, }, }, return, defined, ;, }, return, false, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[;, }, return, false, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, JSType, owner, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ;, if, (, owner, !=, null]
[., isGetProp, (, ), ), {, JSType, owner, =, n, ., getFirstChild, (, ), ., getJSType, (, ), ;, if]
[;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getLastChild, (, )]
[., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n]
[., getFirstChild, (, ), ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference]
[), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getLastChild, (, ), ., getString, (, ), ,, owner]
[!=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getLastChild, (, ), ., getString, (, )]
[), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getLastChild, (, ), ., getString, (, ), ,, owner]
[;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, return, ;, }]
[,, n, ., getLastChild, (, ), ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef]
[,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;]
[., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, )]
[., getLastChild, (, ), ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n]
[), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, return, ;]
[), {, tryRemoveLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n]
[;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, }, else, if, (]
[,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, }]
[., getQualifiedName, (, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,]
[), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, n, ., getQualifiedName, (, ), ,, n, ), ;, }, else, if]
[;, }, else, if, (, n, ., isStringKey, (, ), ), {, JSType, owner, =, parent, ., getJSType, (, )]
[,, n, ), ;, }, else, if, (, n, ., isStringKey, (, ), ), {, JSType, owner, =, parent, .]
[., getQualifiedName, (, ), ,, n, ), ;, }, else, if, (, n, ., isStringKey, (, ), ), {, JSType]
[), ;, }, else, if, (, n, ., isStringKey, (, ), ), {, JSType, owner, =, parent, ., getJSType, (]
[), {, JSType, owner, =, parent, ., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined]
[., isStringKey, (, ), ), {, JSType, owner, =, parent, ., getJSType, (, ), ;, if, (, owner, !=, null]
[;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getString, (, )]
[., getJSType, (, ), ;, if, (, owner, !=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n]
[), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, ), ;, if, (]
[!=, null, ), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, ), ;]
[), {, boolean, defined, =, maybeDefineTypedReference, (, n, ,, n, ., getString, (, ), ,, owner, ), ;, if, (]
[;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, return, ;]
[,, n, ., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName]
[,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, )]
[., getString, (, ), ,, owner, ), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n]
[), ;, if, (, defined, ), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, return]
[), {, tryRemoveLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (]
[;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, }, }, }]
[,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;]
[., getBestLValueName, (, n, ), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n]
[), ,, n, ), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, )]
[), ;, return, ;, }, }, tryDefineLexicalQualifiedNameRef, (, NodeUtil, ., getBestLValueName, (, n, ), ,, n, ), ;, }, }]
[;, }, }, }, private, class, ThisRefCollector, extends, NodeTraversal, ., AbstractScopedCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private]
[,, n, ), ;, }, }, }, private, class, ThisRefCollector, extends, NodeTraversal, ., AbstractScopedCallback, implements, CompilerPass, {, private, final, AbstractCompiler]
[., getBestLValueName, (, n, ), ,, n, ), ;, }, }, }, private, class, ThisRefCollector, extends, NodeTraversal, ., AbstractScopedCallback, implements]
[), ,, n, ), ;, }, }, }, private, class, ThisRefCollector, extends, NodeTraversal, ., AbstractScopedCallback, implements, CompilerPass, {, private, final]
[), ;, }, }, }, private, class, ThisRefCollector, extends, NodeTraversal, ., AbstractScopedCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;]
[;, ThisRefCollector, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (]
[., newArrayList, (, ), ;, ThisRefCollector, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol, =, null, ;, if, (, t]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, @, Override]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (]
[,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol, =, null, ;]
[., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t]
[,, root, ), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol]
[), ,, this, ), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol, =, null]
[), ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, Symbol, symbol, =, null, ;, if, (]
[;, if, (, t, ., inGlobalScope, (, ), ), {, Node, firstInputRoot, =, t, ., getScopeRoot, (, ), ., getLastChild]
[), {, Node, firstInputRoot, =, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, if]
[., inGlobalScope, (, ), ), {, Node, firstInputRoot, =, t, ., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild]
[;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, .]
[., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, .]
[., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {, symbol, =, addSymbol, (]
[., getScopeRoot, (, ), ., getLastChild, (, ), ., getFirstChild, (, ), ;, if, (, firstInputRoot, !=, null, ), {]
[), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope]
[!=, null, ), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false]
[), {, symbol, =, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope]
[=, addSymbol, (, GLOBAL_THIS, ,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, )]
[;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope, scope]
[,, registry, ., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration]
[,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), )]
[., getNativeType, (, JSTypeNative, ., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new]
[), ,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, )]
[., GLOBAL_THIS, ), ,, false, ,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,]
[,, globalScope, ,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }]
[,, firstInputRoot, ), ;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else]
[), ;, symbol, ., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope]
[;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, Preconditions]
[., setDeclaration, (, new, Reference, (, symbol, ,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope, scope, =, scopes]
[), ;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;]
[,, firstInputRoot, ), ), ;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (]
[), ), ;, }, }, else, {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), )]
[;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol, !=]
[., get, (, t, ., getScopeRoot, (, ), ), ;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =]
[), ;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol]
[., getScopeRoot, (, ), ), ;, Preconditions, ., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, )]
[;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =, scopeSymbol]
[., checkNotNull, (, scope, ), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol, !=, null, )]
[), ;, Symbol, scopeSymbol, =, getSymbolForScope, (, scope, ), ;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =]
[;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope]
[), ;, if, (, scopeSymbol, !=, null, ), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (]
[), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {, symbol, =]
[!=, null, ), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {]
[), {, SymbolScope, propScope, =, scopeSymbol, ., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {, symbol, =]
[;, if, (, propScope, !=, null, ), {, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol]
[., getPropertyScope, (, ), ;, if, (, propScope, !=, null, ), {, symbol, =, propScope, ., getOwnSlot, (, "this", )]
[), {, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {, JSType, rootType]
[!=, null, ), {, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {]
[), {, symbol, =, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {, JSType, rootType]
[=, propScope, ., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {, JSType, rootType, =, t, .]
[;, if, (, symbol, ==, null, ), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, )]
[., getOwnSlot, (, "this", ), ;, if, (, symbol, ==, null, ), {, JSType, rootType, =, t, ., getScopeRoot, (]
[), ;, if, (, symbol, ==, null, ), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (]
[), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==]
[==, null, ), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =]
[), {, JSType, rootType, =, t, ., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==]
[;, FunctionType, fnType, =, rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType]
[., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;]
[., getScopeRoot, (, ), ., getJSType, (, ), ;, FunctionType, fnType, =, rootType, ==, null, ?, null, :, rootType, .]
[;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (]
[?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, .]
[==, null, ?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :]
[?, null, :, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, .]
[:, rootType, ., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (]
[;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (]
[., toMaybeFunctionType, (, ), ;, JSType, type, =, fnType, ==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;]
[;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;]
[?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope]
[==, null, ?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false]
[?, null, :, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope]
[:, fnType, ., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope, ,, t]
[;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;]
[., getTypeOfThis, (, ), ;, symbol, =, addSymbol, (, "this", ,, type, ,, false, ,, scope, ,, t, ., getScopeRoot]
[=, addSymbol, (, "this", ,, type, ,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;, }, }]
[;, }, }, }, }, thisStack, ., add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal]
[,, type, ,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;, }, }, }, }, thisStack, .]
[,, false, ,, scope, ,, t, ., getScopeRoot, (, ), ), ;, }, }, }, }, thisStack, ., add, (]
[,, scope, ,, t, ., getScopeRoot, (, ), ), ;, }, }, }, }, thisStack, ., add, (, symbol, )]
[,, t, ., getScopeRoot, (, ), ), ;, }, }, }, }, thisStack, ., add, (, symbol, ), ;, }]
[), ;, }, }, }, }, thisStack, ., add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (]
[., getScopeRoot, (, ), ), ;, }, }, }, }, thisStack, ., add, (, symbol, ), ;, }, @, Override]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, thisStack, ., remove, (, thisStack, ., size, (]
[., add, (, symbol, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, thisStack, ., remove]
[), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, thisStack, ., remove, (, thisStack, ., size]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., remove, (, thisStack, ., size, (, ), -, 1, ), ;, }, @, Override, public, void, visit, (, NodeTraversal]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[-, 1, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[., size, (, ), -, 1, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, return, ;, }, Symbol, symbol, =, thisStack, ., get, (, thisStack, ., size, (, ), -, 1, )]
[), {, return, ;, }, Symbol, symbol, =, thisStack, ., get, (, thisStack, ., size, (, ), -, 1, )]
[., isThis, (, ), ), {, return, ;, }, Symbol, symbol, =, thisStack, ., get, (, thisStack, ., size, (]
[;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (]
[., get, (, thisStack, ., size, (, ), -, 1, ), ;, if, (, symbol, !=, null, ), {, Reference]
[), ;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if]
[-, 1, ), ;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, )]
[., size, (, ), -, 1, ), ;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, .]
[), ;, if, (, symbol, !=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if]
[), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (, ), ==]
[!=, null, ), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (]
[), {, Reference, ref, =, symbol, ., defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (, ), ==]
[;, if, (, symbol, ., getDeclaration, (, ), ==, null, ), {, symbol, ., setDeclaration, (, ref, ), ;, }]
[., defineReferenceAt, (, n, ), ;, if, (, symbol, ., getDeclaration, (, ), ==, null, ), {, symbol, ., setDeclaration]
[), ;, if, (, symbol, ., getDeclaration, (, ), ==, null, ), {, symbol, ., setDeclaration, (, ref, ), ;]
[), {, symbol, ., setDeclaration, (, ref, ), ;, }, }, }, }, private, class, JSDocInfoCollector, extends, NodeTraversal, ., AbstractPostOrderCallback]
[==, null, ), {, symbol, ., setDeclaration, (, ref, ), ;, }, }, }, }, private, class, JSDocInfoCollector, extends, NodeTraversal]
[., getDeclaration, (, ), ==, null, ), {, symbol, ., setDeclaration, (, ref, ), ;, }, }, }, }, private]
[), {, symbol, ., setDeclaration, (, ref, ), ;, }, }, }, }, private, class, JSDocInfoCollector, extends, NodeTraversal, ., AbstractPostOrderCallback]
[;, }, }, }, }, private, class, JSDocInfoCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, JSTypeRegistry, typeRegistry, ;, private, JSDocInfoCollector]
[., setDeclaration, (, ref, ), ;, }, }, }, }, private, class, JSDocInfoCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final]
[), ;, }, }, }, }, private, class, JSDocInfoCollector, extends, NodeTraversal, ., AbstractPostOrderCallback, {, private, final, JSTypeRegistry, typeRegistry, ;, private]
[=, registry, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., typeRegistry, =, registry, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, docInfos, ., add, (, info, ), ;, for, (]
[!=, null, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, docInfos, ., add, (, info, ), ;]
[., getJSDocInfo, (, ), !=, null, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, docInfos, ., add]
[), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;, docInfos, ., add, (, info, ), ;, for, (]
[;, docInfos, ., add, (, info, ), ;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {]
[., getJSDocInfo, (, ), ;, docInfos, ., add, (, info, ), ;, for, (, Node, typeAst, :, info, ., getTypeNodes]
[;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {, SymbolScope, scope, =, scopes, ., get, (]
[., add, (, info, ), ;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {, SymbolScope, scope]
[), ;, for, (, Node, typeAst, :, info, ., getTypeNodes, (, ), ), {, SymbolScope, scope, =, scopes, ., get]
[), {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (, scope, ==]
[., getTypeNodes, (, ), ), {, SymbolScope, scope, =, scopes, ., get, (, t, ., getScopeRoot, (, ), ), ;]
[;, visitTypeNode, (, scope, ==, null, ?, globalScope, :, scope, ,, typeAst, ), ;, }, }, }, public, void, visitTypeNode]
[., get, (, t, ., getScopeRoot, (, ), ), ;, visitTypeNode, (, scope, ==, null, ?, globalScope, :, scope, ,]
[), ;, visitTypeNode, (, scope, ==, null, ?, globalScope, :, scope, ,, typeAst, ), ;, }, }, }, public, void]
[., getScopeRoot, (, ), ), ;, visitTypeNode, (, scope, ==, null, ?, globalScope, :, scope, ,, typeAst, ), ;, }]
[;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n, ), {, if, (, n, ., isString]
[,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n, ), {, if, (]
[?, globalScope, :, scope, ,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n]
[==, null, ?, globalScope, :, scope, ,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,]
[?, globalScope, :, scope, ,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n]
[:, scope, ,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n, ), {]
[,, typeAst, ), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n, ), {, if, (]
[), ;, }, }, }, public, void, visitTypeNode, (, SymbolScope, scope, ,, Node, n, ), {, if, (, n, .]
[), {, Symbol, symbol, =, scope, ., getSlot, (, n, ., getString, (, ), ), ;, if, (, symbol, ==]
[., isString, (, ), ), {, Symbol, symbol, =, scope, ., getSlot, (, n, ., getString, (, ), ), ;]
[;, if, (, symbol, ==, null, ), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, )]
[., getSlot, (, n, ., getString, (, ), ), ;, if, (, symbol, ==, null, ), {, JSType, type, =]
[), ;, if, (, symbol, ==, null, ), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (]
[., getString, (, ), ), ;, if, (, symbol, ==, null, ), {, JSType, type, =, typeRegistry, ., getType, (]
[), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =, type]
[==, null, ), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox]
[), {, JSType, type, =, typeRegistry, ., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =, type]
[;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==]
[., getType, (, n, ., getString, (, ), ), ;, JSType, autobox, =, type, ==, null, ?, null, :, type]
[), ;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox]
[., getString, (, ), ), ;, JSType, autobox, =, type, ==, null, ?, null, :, type, ., autoboxesTo, (, )]
[;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol]
[?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox]
[==, null, ?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper]
[?, null, :, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox]
[:, type, ., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true]
[;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol]
[., autoboxesTo, (, ), ;, symbol, =, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;]
[=, autobox, ==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null]
[;, }, if, (, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (]
[?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null, ), {, symbol, .]
[==, null, ?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null, ), {]
[?, null, :, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null, ), {, symbol, .]
[:, getSymbolForTypeHelper, (, autobox, ,, true, ), ;, }, if, (, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (]
[;, }, if, (, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (]
[,, true, ), ;, }, if, (, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (, n, ), ;, }]
[), ;, }, if, (, symbol, !=, null, ), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for]
[), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (]
[!=, null, ), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =, n, .]
[), {, symbol, ., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (]
[;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., defineReferenceAt, (, n, ), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child]
[), ;, }, }, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child]
[;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitTypeNode, (, scope, ,, child, )]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, visitTypeNode, (]
[;, child, =, child, ., getNext, (, ), ), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, visitTypeNode, (, scope, ,, child, ), ;, }]
[;, child, =, child, ., getNext, (, ), ), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }]
[=, child, ., getNext, (, ), ), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }, private, final]
[), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }, private, final, Ordering, <, String, >, SOURCE_NAME_ORDERING, =]
[., getNext, (, ), ), {, visitTypeNode, (, scope, ,, child, ), ;, }, }, }, private, final, Ordering, <]
[;, }, }, }, private, final, Ordering, <, String, >, SOURCE_NAME_ORDERING, =, Ordering, ., natural, (, ), ., nullsFirst, (]
[,, child, ), ;, }, }, }, private, final, Ordering, <, String, >, SOURCE_NAME_ORDERING, =, Ordering, ., natural, (, )]
[), ;, }, }, }, private, final, Ordering, <, String, >, SOURCE_NAME_ORDERING, =, Ordering, ., natural, (, ), ., nullsFirst]
[;, private, final, Ordering, <, Node, >, NODE_ORDERING, =, new, Ordering, <, Node, >, (, ), {, @, Override, public]
[., nullsFirst, (, ), ;, private, final, Ordering, <, Node, >, NODE_ORDERING, =, new, Ordering, <, Node, >, (, )]
[., natural, (, ), ., nullsFirst, (, ), ;, private, final, Ordering, <, Node, >, NODE_ORDERING, =, new, Ordering, <]
[;, private, final, Ordering, <, SymbolScope, >, LEXICAL_SCOPE_ORDERING, =, new, Ordering, <, SymbolScope, >, (, ), {, @, Override, public]
[;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -, b]
[., compare, (, a, ., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=]
[,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return]
[., getSourceFileName, (, ), ,, b, ., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return]
[), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -]
[., getSourceFileName, (, ), ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, .]
[), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -, b, ., getSourcePosition, (, ), ;, }]
[!=, 0, ), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -, b, ., getSourcePosition, (, )]
[), {, return, result, ;, }, return, a, ., getSourcePosition, (, ), -, b, ., getSourcePosition, (, ), ;, }]
[;, }, return, a, ., getSourcePosition, (, ), -, b, ., getSourcePosition, (, ), ;, }, }, ;, private, final]
[;, }, }, ;, private, final, Ordering, <, SymbolScope, >, LEXICAL_SCOPE_ORDERING, =, new, Ordering, <, SymbolScope, >, (, ), {]
[-, b, ., getSourcePosition, (, ), ;, }, }, ;, private, final, Ordering, <, SymbolScope, >, LEXICAL_SCOPE_ORDERING, =, new, Ordering]
[., getSourcePosition, (, ), -, b, ., getSourcePosition, (, ), ;, }, }, ;, private, final, Ordering, <, SymbolScope, >]
[;, }, }, ;, private, final, Ordering, <, SymbolScope, >, LEXICAL_SCOPE_ORDERING, =, new, Ordering, <, SymbolScope, >, (, ), {]
[., getSourcePosition, (, ), ;, }, }, ;, private, final, Ordering, <, SymbolScope, >, LEXICAL_SCOPE_ORDERING, =, new, Ordering, <, SymbolScope]
[;, private, final, Ordering, <, Symbol, >, SYMBOL_ORDERING, =, new, Ordering, <, Symbol, >, (, ), {, @, Override, public]
[;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,, b, ., getRootNode, (, ), ), ;, }]
[., checkState, (, a, ., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING]
[,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,, b, ., getRootNode, (, )]
[&&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, )]
[., isLexicalScope, (, ), &&, b, ., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a]
[,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,, b, ., getRootNode, (, )]
[., isLexicalScope, (, ), ,, "We can only sort lexical scopes", ), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,, b]
[), ;, return, NODE_ORDERING, ., compare, (, a, ., getRootNode, (, ), ,, b, ., getRootNode, (, ), ), ;]
[;, }, }, ;, private, final, Ordering, <, Symbol, >, SYMBOL_ORDERING, =, new, Ordering, <, Symbol, >, (, ), {]
[., compare, (, a, ., getRootNode, (, ), ,, b, ., getRootNode, (, ), ), ;, }, }, ;, private]
[,, b, ., getRootNode, (, ), ), ;, }, }, ;, private, final, Ordering, <, Symbol, >, SYMBOL_ORDERING, =, new]
[., getRootNode, (, ), ,, b, ., getRootNode, (, ), ), ;, }, }, ;, private, final, Ordering, <, Symbol]
[), ;, }, }, ;, private, final, Ordering, <, Symbol, >, SYMBOL_ORDERING, =, new, Ordering, <, Symbol, >, (, )]
[., getRootNode, (, ), ), ;, }, }, ;, private, final, Ordering, <, Symbol, >, SYMBOL_ORDERING, =, new, Ordering, <]
[;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (, scope, ., isLexicalScope, (, ), ||, scope, ., isDocScope]
[;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB]
[), ;, SymbolScope, scopeB, =, getScope, (, b, ), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (]
[;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, )]
[), ;, int, result, =, getLexicalScopeDepth, (, scopeA, ), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0]
[;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo]
[-, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, .]
[), -, getLexicalScopeDepth, (, scopeB, ), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a]
[;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo]
[), ;, if, (, result, !=, 0, ), {, return, result, ;, }, return, a, ., getName, (, ), .]
[), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo, (, b, ., getName, (, )]
[!=, 0, ), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo, (, b, ., getName]
[), {, return, result, ;, }, return, a, ., getName, (, ), ., compareTo, (, b, ., getName, (, )]
[;, }, return, a, ., getName, (, ), ., compareTo, (, b, ., getName, (, ), ), ;, }, }]
[;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (, scope, ., isLexicalScope, (, ), ||]
[., compareTo, (, b, ., getName, (, ), ), ;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, )]
[., getName, (, ), ., compareTo, (, b, ., getName, (, ), ), ;, }, }, ;, private, int, getLexicalScopeDepth]
[), ;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (, scope, ., isLexicalScope, (, )]
[., getName, (, ), ), ;, }, }, ;, private, int, getLexicalScopeDepth, (, SymbolScope, scope, ), {, if, (, scope]
[), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., isPropertyScope, (]
[||, scope, ., isDocScope, (, ), ), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {, Preconditions, .]
[., isLexicalScope, (, ), ||, scope, ., isDocScope, (, ), ), {, return, scope, ., getScopeDepth, (, ), ;, }]
[), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., isPropertyScope, (]
[., isDocScope, (, ), ), {, return, scope, ., getScopeDepth, (, ), ;, }, else, {, Preconditions, ., checkState, (]
[;, }, else, {, Preconditions, ., checkState, (, scope, ., isPropertyScope, (, ), ), ;, Symbol, sym, =, scope, .]
[., getScopeDepth, (, ), ;, }, else, {, Preconditions, ., checkState, (, scope, ., isPropertyScope, (, ), ), ;, Symbol]
[;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth, (]
[., checkState, (, scope, ., isPropertyScope, (, ), ), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions]
[), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth]
[., isPropertyScope, (, ), ), ;, Symbol, sym, =, scope, ., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym]
[;, Preconditions, ., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth, (, getScope, (, sym, ), ), +, 1, ;, }]
[., getSymbolForScope, (, ), ;, Preconditions, ., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth, (, getScope, (, sym, ), )]
[;, return, getLexicalScopeDepth, (, getScope, (, sym, ), ), +, 1, ;, }, }, }]
[., checkNotNull, (, sym, ), ;, return, getLexicalScopeDepth, (, getScope, (, sym, ), ), +, 1, ;, }, }, }]
[), ;, return, getLexicalScopeDepth, (, getScope, (, sym, ), ), +, 1, ;, }, }, }]
[;, }, }, }]
[+, 1, ;, }, }, }]
[), +, 1, ;, }, }, }]
[), ), +, 1, ;, }, }, }]
[;, }, }, }]
