[ConcurrentUtils, {, private, ConcurrentUtils, (, ), {, }, public, static, ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (]
[ConcurrentUtils, {, private, ConcurrentUtils, (, ), {, }, public, static, ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (]
[ConcurrentUtils, {, private, ConcurrentUtils, (, ), {, }, public, static, ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (]
[private, ConcurrentUtils, (, ), {, }, public, static, ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (, ex, ==]
[(, ), {, }, public, static, ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||]
[(, ), {, }, public, static, ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||]
[(, ), {, }, public, static, ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||]
[ConcurrentException, extractCause, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||, ex, ., getCause, (, ), ==]
[ExecutionException, ex, ), {, if, (, ex, ==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return]
[{, if, (, ex, ==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }]
[(, ex, ==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (]
[||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return]
[getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (]
[getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (]
[{, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (, ex, ., getMessage, (, ), ,]
[{, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentException, (, ex, ., getMessage, (, ), ,]
[ex, ., getCause, (, ), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (]
[ex, ., getCause, (, ), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (]
[ex, ., getCause, (, ), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (]
[getCause, (, ), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex, ==]
[), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||]
[), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||]
[), ), ;, }, public, static, ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||]
[ConcurrentRuntimeException, extractCauseUnchecked, (, final, ExecutionException, ex, ), {, if, (, ex, ==, null, ||, ex, ., getCause, (, ), ==]
[ExecutionException, ex, ), {, if, (, ex, ==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return]
[{, if, (, ex, ==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }]
[(, ex, ==, null, ||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (]
[||, ex, ., getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return]
[getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (]
[getCause, (, ), ==, null, ), {, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (]
[{, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, ), ,]
[{, return, null, ;, }, throwCause, (, ex, ), ;, return, new, ConcurrentRuntimeException, (, ex, ., getMessage, (, ), ,]
[), ), ;, }, public, static, void, handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException, {, final, ConcurrentException, cex, =]
[;, }, public, static, void, handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException, {, final, ConcurrentException, cex, =, extractCause, (]
[handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException, {, final, ConcurrentException, cex, =, extractCause, (, ex, ), ;, if, (]
[handleCause, (, final, ExecutionException, ex, ), throws, ConcurrentException, {, final, ConcurrentException, cex, =, extractCause, (, ex, ), ;, if, (]
[final, ExecutionException, ex, ), throws, ConcurrentException, {, final, ConcurrentException, cex, =, extractCause, (, ex, ), ;, if, (, cex, !=]
[throws, ConcurrentException, {, final, ConcurrentException, cex, =, extractCause, (, ex, ), ;, if, (, cex, !=, null, ), {, throw]
[{, throw, cex, ;, }, }, public, static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex, =]
[cex, ;, }, }, public, static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex, =, extractCauseUnchecked, (]
[static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex, =, extractCauseUnchecked, (, ex, ), ;, if, (]
[static, void, handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex, =, extractCauseUnchecked, (, ex, ), ;, if, (]
[handleCauseUnchecked, (, final, ExecutionException, ex, ), {, final, ConcurrentRuntimeException, crex, =, extractCauseUnchecked, (, ex, ), ;, if, (, crex, !=]
[ex, ), {, final, ConcurrentRuntimeException, crex, =, extractCauseUnchecked, (, ex, ), ;, if, (, crex, !=, null, ), {, throw]
[!=, null, ), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (]
[!=, null, ), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (]
[!=, null, ), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (]
[!=, null, ), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (]
[), {, throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=]
[throw, crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=, null, &&]
[crex, ;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !]
[;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !, (]
[;, }, }, static, Throwable, checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !, (]
[checkedException, (, final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !, (, ex, instanceof, RuntimeException, ), &&]
[(, final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !, (, ex, instanceof, RuntimeException, ), &&, !]
[final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !, (, ex, instanceof, RuntimeException, ), &&, !, (]
[final, Throwable, ex, ), {, if, (, ex, !=, null, &&, !, (, ex, instanceof, RuntimeException, ), &&, !, (]
[ex, !=, null, &&, !, (, ex, instanceof, RuntimeException, ), &&, !, (, ex, instanceof, Error, ), ), {, return]
[ex, instanceof, RuntimeException, ), &&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw]
[), &&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (]
[), &&, !, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (]
[!, (, ex, instanceof, Error, ), ), {, return, ex, ;, }, else, {, throw, new, IllegalArgumentException, (, "Not a checked exception: ", +]
[(, "Not a checked exception: ", +, ex, ), ;, }, }, private, static, void, throwCause, (, final, ExecutionException, ex, ), {, if, (]
[(, "Not a checked exception: ", +, ex, ), ;, }, }, private, static, void, throwCause, (, final, ExecutionException, ex, ), {, if, (]
[(, "Not a checked exception: ", +, ex, ), ;, }, }, private, static, void, throwCause, (, final, ExecutionException, ex, ), {, if, (]
[void, throwCause, (, final, ExecutionException, ex, ), {, if, (, ex, ., getCause, (, ), instanceof, RuntimeException, ), {, throw]
[final, ExecutionException, ex, ), {, if, (, ex, ., getCause, (, ), instanceof, RuntimeException, ), {, throw, (, RuntimeException, )]
[final, ExecutionException, ex, ), {, if, (, ex, ., getCause, (, ), instanceof, RuntimeException, ), {, throw, (, RuntimeException, )]
[getCause, (, ), instanceof, RuntimeException, ), {, throw, (, RuntimeException, ), ex, ., getCause, (, ), ;, }, if, (]
[getCause, (, ), instanceof, RuntimeException, ), {, throw, (, RuntimeException, ), ex, ., getCause, (, ), ;, }, if, (]
[getCause, (, ), instanceof, RuntimeException, ), {, throw, (, RuntimeException, ), ex, ., getCause, (, ), ;, }, if, (]
[), ex, ., getCause, (, ), ;, }, if, (, ex, ., getCause, (, ), instanceof, Error, ), {, throw]
[getCause, (, ), ;, }, if, (, ex, ., getCause, (, ), instanceof, Error, ), {, throw, (, Error, )]
[getCause, (, ), ;, }, if, (, ex, ., getCause, (, ), instanceof, Error, ), {, throw, (, Error, )]
[}, public, static, <, T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException, {, return]
[}, public, static, <, T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException, {, return]
[}, public, static, <, T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException, {, return]
[static, <, T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException, {, return, initializer, !=]
[T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException, {, return, initializer, !=, null, ?]
[T, >, T, initialize, (, final, ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException, {, return, initializer, !=, null, ?]
[ConcurrentInitializer, <, T, >, initializer, ), throws, ConcurrentException, {, return, initializer, !=, null, ?, initializer, ., get, (, ), :]
[}, public, static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer, <, T, >, initializer, ), {, try, {, return]
[static, <, T, >, T, initializeUnchecked, (, final, ConcurrentInitializer, <, T, >, initializer, ), {, try, {, return, initialize, (]
[initializer, ), {, try, {, return, initialize, (, initializer, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw]
[try, {, return, initialize, (, initializer, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (]
[try, {, return, initialize, (, initializer, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (]
[final, ConcurrentMap, <, K, ,, V, >, map, ,, final, K, key, ,, final, V, value, ), {, if, (]
[final, ConcurrentMap, <, K, ,, V, >, map, ,, final, K, key, ,, final, V, value, ), {, if, (]
[<, K, ,, V, >, map, ,, final, K, key, ,, final, V, value, ), {, if, (, map, ==]
[>, map, ,, final, K, key, ,, final, V, value, ), {, if, (, map, ==, null, ), {, return]
[final, V, value, ), {, if, (, map, ==, null, ), {, return, null, ;, }, final, V, result, =]
[final, V, value, ), {, if, (, map, ==, null, ), {, return, null, ;, }, final, V, result, =]
[{, if, (, map, ==, null, ), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (]
[(, map, ==, null, ), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,]
[), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return]
[), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return]
[), {, return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return]
[return, null, ;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return, result, !=]
[;, }, final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return, result, !=, null, ?]
[final, V, result, =, map, ., putIfAbsent, (, key, ,, value, ), ;, return, result, !=, null, ?, result, :]
[V, >, map, ,, final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), throws, ConcurrentException, {, if, (]
[V, >, map, ,, final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), throws, ConcurrentException, {, if, (]
[V, >, map, ,, final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), throws, ConcurrentException, {, if, (]
[map, ,, final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), throws, ConcurrentException, {, if, (, map, ==]
[final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), throws, ConcurrentException, {, if, (, map, ==, null, ||]
[final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), throws, ConcurrentException, {, if, (, map, ==, null, ||]
[key, ,, final, ConcurrentInitializer, <, V, >, init, ), throws, ConcurrentException, {, if, (, map, ==, null, ||, init, ==]
[<, V, >, init, ), throws, ConcurrentException, {, if, (, map, ==, null, ||, init, ==, null, ), {, return]
[{, if, (, map, ==, null, ||, init, ==, null, ), {, return, null, ;, }, final, V, value, =]
[{, if, (, map, ==, null, ||, init, ==, null, ), {, return, null, ;, }, final, V, value, =]
[==, null, ||, init, ==, null, ), {, return, null, ;, }, final, V, value, =, map, ., get, (]
[null, ), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, ), ;, if, (]
[null, ), {, return, null, ;, }, final, V, value, =, map, ., get, (, key, ), ;, if, (]
[{, return, null, ;, }, final, V, value, =, map, ., get, (, key, ), ;, if, (, value, ==]
[}, final, V, value, =, map, ., get, (, key, ), ;, if, (, value, ==, null, ), {, return]
[V, value, =, map, ., get, (, key, ), ;, if, (, value, ==, null, ), {, return, putIfAbsent, (]
[=, map, ., get, (, key, ), ;, if, (, value, ==, null, ), {, return, putIfAbsent, (, map, ,]
[., get, (, key, ), ;, if, (, value, ==, null, ), {, return, putIfAbsent, (, map, ,, key, ,]
[., get, (, key, ), ;, if, (, value, ==, null, ), {, return, putIfAbsent, (, map, ,, key, ,]
[==, null, ), {, return, putIfAbsent, (, map, ,, key, ,, init, ., get, (, ), ), ;, }, return]
[,, V, >, map, ,, final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), {, try, {, return]
[>, map, ,, final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), {, try, {, return, createIfAbsent, (]
[,, final, K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), {, try, {, return, createIfAbsent, (, map, ,]
[K, key, ,, final, ConcurrentInitializer, <, V, >, init, ), {, try, {, return, createIfAbsent, (, map, ,, key, ,]
[{, return, createIfAbsent, (, map, ,, key, ,, init, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw]
[(, map, ,, key, ,, init, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (]
[(, map, ,, key, ,, init, ), ;, }, catch, (, final, ConcurrentException, cex, ), {, throw, new, ConcurrentRuntimeException, (]
[;, }, }, public, static, <, T, >, Future, <, T, >, constantFuture, (, final, T, value, ), {, return]
[T, >, Future, <, T, >, constantFuture, (, final, T, value, ), {, return, new, ConstantFuture, <, T, >, (]
[T, >, implements, Future, <, T, >, {, private, final, T, value, ;, ConstantFuture, (, final, T, value, ), {]
[T, >, implements, Future, <, T, >, {, private, final, T, value, ;, ConstantFuture, (, final, T, value, ), {]
[<, T, >, {, private, final, T, value, ;, ConstantFuture, (, final, T, value, ), {, this, ., value, =]
[T, value, ), {, this, ., value, =, value, ;, }, @, Override, public, boolean, isDone, (, ), {, return]
[Override, public, boolean, isDone, (, ), {, return, true, ;, }, @, Override, public, T, get, (, ), {, return]
[return, value, ;, }, @, Override, public, T, get, (, final, long, timeout, ,, final, TimeUnit, unit, ), {, return]
[timeout, ,, final, TimeUnit, unit, ), {, return, value, ;, }, @, Override, public, boolean, isCancelled, (, ), {, return]
[isCancelled, (, ), {, return, false, ;, }, @, Override, public, boolean, cancel, (, final, boolean, mayInterruptIfRunning, ), {, return]
