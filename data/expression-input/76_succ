[,, 1d, ), ;, }, protected, AbstractSimplex, (, int, n, ,, double, sideLength, ), {, this, (, createHypercubeSteps, (, n]
[), ;, }, protected, AbstractSimplex, (, int, n, ,, double, sideLength, ), {, this, (, createHypercubeSteps, (, n, ,, sideLength]
[), ;, }, protected, AbstractSimplex, (, final, double, [, ], steps, ), {, if, (, steps, ==, null, ), {]
[,, sideLength, ), ), ;, }, protected, AbstractSimplex, (, final, double, [, ], steps, ), {, if, (, steps, ==]
[), ), ;, }, protected, AbstractSimplex, (, final, double, [, ], steps, ), {, if, (, steps, ==, null, )]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, steps, ., length, ==, 0, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, steps, ., length, ==, 0, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, steps, ., length, ==, 0, ), {, throw, new]
[;, }, if, (, steps, ., length, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, dimension, =]
[), {, throw, new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;, startConfiguration, =, new, double, []
[==, 0, ), {, throw, new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;, startConfiguration, =, new]
[., length, ==, 0, ), {, throw, new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;, startConfiguration]
[), {, throw, new, ZeroException, (, ), ;, }, dimension, =, steps, ., length, ;, startConfiguration, =, new, double, []
[;, }, dimension, =, steps, ., length, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for]
[=, steps, ., length, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i]
[;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i]
[., length, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0]
[=, new, double, [, dimension, ], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ]]
[], [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, []
[;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j]
[<, dimension, ;, i, ++, ), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (]
[;, i, ++, ), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j]
[), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0, ;]
[++, ), {, final, double, [, ], vertexI, =, startConfiguration, [, i, ], ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, j, ++, ), {, if, (]
[[, i, ], ;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, j, ++, )]
[], ;, for, (, int, j, =, 0, ;, j, <, i, +, 1, ;, j, ++, ), {, if]
[;, j, <, i, +, 1, ;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, )]
[;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats]
[<, i, +, 1, ;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw]
[;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats]
[+, 1, ;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException]
[;, j, ++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats]
[), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, )]
[++, ), {, if, (, steps, [, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,]
[==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,]
[[, j, ], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy]
[], ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,]
[;, }, System, ., arraycopy, (, steps, ,, 0, ,, vertexI, ,, 0, ,, j, +, 1, ), ;, }]
[), ;, }, System, ., arraycopy, (, steps, ,, 0, ,, vertexI, ,, 0, ,, j, +, 1, ), ;]
[., EQUAL_VERTICES_IN_SIMPLEX, ), ;, }, System, ., arraycopy, (, steps, ,, 0, ,, vertexI, ,, 0, ,, j, +, 1]
[;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if, (, referenceSimplex, .]
[., arraycopy, (, steps, ,, 0, ,, vertexI, ,, 0, ,, j, +, 1, ), ;, }, }, }, protected]
[,, 0, ,, vertexI, ,, 0, ,, j, +, 1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double]
[,, vertexI, ,, 0, ,, j, +, 1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ]]
[,, 0, ,, j, +, 1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ]]
[,, j, +, 1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, )]
[), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if, (, referenceSimplex]
[+, 1, ), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if]
[), ;, }, }, }, protected, AbstractSimplex, (, final, double, [, ], [, ], referenceSimplex, ), {, if, (, referenceSimplex]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, .]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =]
[., length, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, .]
[;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ]]
[,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new, double, []
[., SIMPLEX_NEED_ONE_POINT, ,, referenceSimplex, ., length, ), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new]
[), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension]
[., length, ), ;, }, dimension, =, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new, double, [, dimension, ]]
[=, referenceSimplex, ., length, -, 1, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double]
[;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ], ref0, =, referenceSimplex, []
[-, 1, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ], ref0, =]
[., length, -, 1, ;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ]]
[;, startConfiguration, =, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ], ref0, =, referenceSimplex, []
[=, new, double, [, dimension, ], [, dimension, ], ;, final, double, [, ], ref0, =, referenceSimplex, [, 0, ]]
[;, final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;, i]
[], [, dimension, ], ;, final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i]
[], ;, final, double, [, ], ref0, =, referenceSimplex, [, 0, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, referenceSimplex, ., length, ;, i, ++, ), {, final, double]
[[, 0, ], ;, for, (, int, i, =, 0, ;, i, <, referenceSimplex, ., length, ;, i, ++, )]
[], ;, for, (, int, i, =, 0, ;, i, <, referenceSimplex, ., length, ;, i, ++, ), {, final]
[;, i, <, referenceSimplex, ., length, ;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i]
[;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (, refI, .]
[<, referenceSimplex, ., length, ;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (, refI, .]
[., length, ;, i, ++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (]
[), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (, refI, ., length, !=, dimension]
[++, ), {, final, double, [, ], refI, =, referenceSimplex, [, i, ], ;, if, (, refI, ., length, !=]
[;, if, (, refI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, )]
[[, i, ], ;, if, (, refI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, refI, ., length]
[], ;, if, (, refI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension]
[), {, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =, 0]
[!=, dimension, ), {, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (, int, j]
[., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (]
[), {, throw, new, DimensionMismatchException, (, refI, ., length, ,, dimension, ), ;, }, for, (, int, j, =, 0]
[;, }, for, (, int, j, =, 0, ;, j, <, i, ;, j, ++, ), {, final, double, []
[,, dimension, ), ;, }, for, (, int, j, =, 0, ;, j, <, i, ;, j, ++, ), {]
[., length, ,, dimension, ), ;, }, for, (, int, j, =, 0, ;, j, <, i, ;, j, ++]
[), ;, }, for, (, int, j, =, 0, ;, j, <, i, ;, j, ++, ), {, final, double]
[;, j, <, i, ;, j, ++, ), {, final, double, [, ], refJ, =, referenceSimplex, [, j, ], ;]
[;, j, ++, ), {, final, double, [, ], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true]
[<, i, ;, j, ++, ), {, final, double, [, ], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals]
[;, j, ++, ), {, final, double, [, ], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true]
[), {, final, double, [, ], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true, ;, for, (]
[++, ), {, final, double, [, ], refJ, =, referenceSimplex, [, j, ], ;, boolean, allEquals, =, true, ;, for]
[;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, )]
[[, j, ], ;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;]
[], ;, boolean, allEquals, =, true, ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++]
[;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, if, (, refI, []
[;, k, <, dimension, ;, k, ++, ), {, if, (, refI, [, k, ], !=, refJ, [, k, ]]
[;, k, ++, ), {, if, (, refI, [, k, ], !=, refJ, [, k, ], ), {, allEquals, =]
[<, dimension, ;, k, ++, ), {, if, (, refI, [, k, ], !=, refJ, [, k, ], ), {]
[;, k, ++, ), {, if, (, refI, [, k, ], !=, refJ, [, k, ], ), {, allEquals, =]
[), {, if, (, refI, [, k, ], !=, refJ, [, k, ], ), {, allEquals, =, false, ;, break]
[++, ), {, if, (, refI, [, k, ], !=, refJ, [, k, ], ), {, allEquals, =, false, ;]
[), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[!=, refJ, [, k, ], ), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {]
[[, k, ], !=, refJ, [, k, ], ), {, allEquals, =, false, ;, break, ;, }, }, if, (]
[], !=, refJ, [, k, ], ), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, )]
[), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[[, k, ], ), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new]
[], ), {, allEquals, =, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (]
[=, false, ;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,]
[;, break, ;, }, }, if, (, allEquals, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,, i, ,]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., EQUAL_VERTICES_IN_SIMPLEX, ,, i, ,, j, ), ;, }, }, if, (, i]
[;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =, startConfiguration, [, i, -]
[,, i, ,, j, ), ;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI]
[., EQUAL_VERTICES_IN_SIMPLEX, ,, i, ,, j, ), ;, }, }, if, (, i, >, 0, ), {, final, double, []
[,, j, ), ;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =, startConfiguration]
[), ;, }, }, if, (, i, >, 0, ), {, final, double, [, ], confI, =, startConfiguration, [, i]
[), {, final, double, [, ], confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =]
[>, 0, ), {, final, double, [, ], confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int]
[), {, final, double, [, ], confI, =, startConfiguration, [, i, -, 1, ], ;, for, (, int, k, =]
[;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ]]
[[, i, -, 1, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, )]
[], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k]
[-, 1, ], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI]
[], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, confI, [, k]
[;, k, <, dimension, ;, k, ++, ), {, confI, [, k, ], =, refI, [, k, ], -, ref0]
[;, k, ++, ), {, confI, [, k, ], =, refI, [, k, ], -, ref0, [, k, ], ;]
[<, dimension, ;, k, ++, ), {, confI, [, k, ], =, refI, [, k, ], -, ref0, [, k]
[;, k, ++, ), {, confI, [, k, ], =, refI, [, k, ], -, ref0, [, k, ], ;]
[), {, confI, [, k, ], =, refI, [, k, ], -, ref0, [, k, ], ;, }, }, }]
[++, ), {, confI, [, k, ], =, refI, [, k, ], -, ref0, [, k, ], ;, }, }]
[=, refI, [, k, ], -, ref0, [, k, ], ;, }, }, }, }, public, int, getDimension, (, )]
[[, k, ], =, refI, [, k, ], -, ref0, [, k, ], ;, }, }, }, }, public, int]
[], =, refI, [, k, ], -, ref0, [, k, ], ;, }, }, }, }, public, int, getDimension, (]
[;, }, }, }, }, public, int, getDimension, (, ), {, return, dimension, ;, }, public, int, getSize, (, )]
[-, ref0, [, k, ], ;, }, }, }, }, public, int, getDimension, (, ), {, return, dimension, ;, }]
[[, k, ], -, ref0, [, k, ], ;, }, }, }, }, public, int, getDimension, (, ), {, return]
[], -, ref0, [, k, ], ;, }, }, }, }, public, int, getDimension, (, ), {, return, dimension, ;]
[;, }, }, }, }, public, int, getDimension, (, ), {, return, dimension, ;, }, public, int, getSize, (, )]
[[, k, ], ;, }, }, }, }, public, int, getDimension, (, ), {, return, dimension, ;, }, public, int]
[], ;, }, }, }, }, public, int, getDimension, (, ), {, return, dimension, ;, }, public, int, getSize, (]
[;, }, public, int, getSize, (, ), {, return, simplex, ., length, ;, }, public, abstract, void, iterate, (, final]
[;, }, public, abstract, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), ;, public]
[., length, ;, }, public, abstract, void, iterate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, )]
[), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension]
[!=, startPoint, ., length, ), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =]
[), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension]
[., length, ), {, throw, new, DimensionMismatchException, (, dimension, ,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair]
[;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =, new, PointValuePair, (]
[,, startPoint, ., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0]
[), ;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =, new, PointValuePair]
[., length, ), ;, }, simplex, =, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =]
[=, new, PointValuePair, [, dimension, +, 1, ], ;, simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,, Double]
[;, simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i]
[], ;, simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int]
[+, 1, ], ;, simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for]
[], ;, simplex, [, 0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int]
[=, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;, i, <]
[[, 0, ], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0]
[], =, new, PointValuePair, (, startPoint, ,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, [, ]]
[,, Double, ., NaN, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, []
[., NaN, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final]
[;, i, <, dimension, ;, i, ++, ), {, final, double, [, ], confI, =, startConfiguration, [, i, ], ;]
[;, i, ++, ), {, final, double, [, ], confI, =, startConfiguration, [, i, ], ;, final, double, [, ]]
[<, dimension, ;, i, ++, ), {, final, double, [, ], confI, =, startConfiguration, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, [, ], confI, =, startConfiguration, [, i, ], ;, final, double, [, ]]
[), {, final, double, [, ], confI, =, startConfiguration, [, i, ], ;, final, double, [, ], vertexI, =, new]
[++, ), {, final, double, [, ], confI, =, startConfiguration, [, i, ], ;, final, double, [, ], vertexI, =]
[;, final, double, [, ], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =, 0, ;]
[[, i, ], ;, final, double, [, ], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k]
[], ;, final, double, [, ], vertexI, =, new, double, [, dimension, ], ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ]]
[], ;, for, (, int, k, =, 0, ;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k]
[;, k, <, dimension, ;, k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI]
[;, k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;]
[<, dimension, ;, k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k]
[;, k, ++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;]
[), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, []
[++, ), {, vertexI, [, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex]
[=, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =, new]
[[, k, ], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, [, i, +, 1]
[], =, startPoint, [, k, ], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =]
[;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;, }]
[+, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,, Double]
[[, k, ], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (]
[], +, confI, [, k, ], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,]
[;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;, }]
[[, k, ], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN]
[], ;, }, simplex, [, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;]
[=, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;, }, }, public, void, evaluate, (, final, MultivariateFunction, evaluationFunction]
[[, i, +, 1, ], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;, }, }, public, void]
[], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;, }, }, public, void, evaluate, (, final, MultivariateFunction]
[+, 1, ], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;, }, }, public, void, evaluate, (]
[], =, new, PointValuePair, (, vertexI, ,, Double, ., NaN, ), ;, }, }, public, void, evaluate, (, final, MultivariateFunction]
[;, }, }, public, void, evaluate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for]
[,, Double, ., NaN, ), ;, }, }, public, void, evaluate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair]
[), ;, }, }, public, void, evaluate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator, ), {]
[., NaN, ), ;, }, }, public, void, evaluate, (, final, MultivariateFunction, evaluationFunction, ,, final, Comparator, <, PointValuePair, >, comparator]
[;, i, <, simplex, ., length, ;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;]
[;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double, [, ], point, =]
[<, simplex, ., length, ;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double]
[;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double, [, ], point, =]
[., length, ;, i, ++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double, [, ]]
[), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double, [, ], point, =, vertex, ., getPointRef]
[++, ), {, final, PointValuePair, vertex, =, simplex, [, i, ], ;, final, double, [, ], point, =, vertex, .]
[;, final, double, [, ], point, =, vertex, ., getPointRef, (, ), ;, if, (, Double, ., isNaN, (, vertex]
[[, i, ], ;, final, double, [, ], point, =, vertex, ., getPointRef, (, ), ;, if, (, Double, .]
[], ;, final, double, [, ], point, =, vertex, ., getPointRef, (, ), ;, if, (, Double, ., isNaN, (]
[;, if, (, Double, ., isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex, [, i, ], =]
[., getPointRef, (, ), ;, if, (, Double, ., isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex]
[), {, simplex, [, i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,, false]
[., isNaN, (, vertex, ., getValue, (, ), ), ), {, simplex, [, i, ], =, new, PointValuePair, (, point]
[), ), {, simplex, [, i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,]
[., getValue, (, ), ), ), {, simplex, [, i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value]
[=, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }, }, Arrays, .]
[[, i, ], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }]
[], =, new, PointValuePair, (, point, ,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }, }, Arrays]
[;, }, }, Arrays, ., sort, (, simplex, ,, comparator, ), ;, }, protected, void, replaceWorstPoint, (, PointValuePair, pointValuePair, ,]
[,, evaluationFunction, ., value, (, point, ), ,, false, ), ;, }, }, Arrays, ., sort, (, simplex, ,, comparator]
[,, false, ), ;, }, }, Arrays, ., sort, (, simplex, ,, comparator, ), ;, }, protected, void, replaceWorstPoint, (]
[., value, (, point, ), ,, false, ), ;, }, }, Arrays, ., sort, (, simplex, ,, comparator, ), ;]
[), ,, false, ), ;, }, }, Arrays, ., sort, (, simplex, ,, comparator, ), ;, }, protected, void, replaceWorstPoint]
[), ;, }, }, Arrays, ., sort, (, simplex, ,, comparator, ), ;, }, protected, void, replaceWorstPoint, (, PointValuePair, pointValuePair]
[;, }, protected, void, replaceWorstPoint, (, PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (, int]
[., sort, (, simplex, ,, comparator, ), ;, }, protected, void, replaceWorstPoint, (, PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair]
[,, comparator, ), ;, }, protected, void, replaceWorstPoint, (, PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair, >, comparator, ), {]
[), ;, }, protected, void, replaceWorstPoint, (, PointValuePair, pointValuePair, ,, final, Comparator, <, PointValuePair, >, comparator, ), {, for, (]
[;, i, <, dimension, ;, i, ++, ), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,]
[;, i, ++, ), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0]
[<, dimension, ;, i, ++, ), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, )]
[;, i, ++, ), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0]
[), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair]
[++, ), {, if, (, comparator, ., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {]
[), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp]
[>, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair]
[., compare, (, simplex, [, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i]
[,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =]
[[, i, ], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, []
[], ,, pointValuePair, ), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ]]
[), >, 0, ), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;]
[), {, PointValuePair, tmp, =, simplex, [, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp]
[;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension, ], =, pointValuePair]
[[, i, ], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension]
[], ;, simplex, [, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension, ], =]
[=, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension, ], =, pointValuePair, ;, }, public, PointValuePair, []
[[, i, ], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension, ], =, pointValuePair, ;, }]
[], =, pointValuePair, ;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension, ], =, pointValuePair, ;, }, public, PointValuePair]
[;, pointValuePair, =, tmp, ;, }, }, simplex, [, dimension, ], =, pointValuePair, ;, }, public, PointValuePair, [, ], getPoints]
[=, tmp, ;, }, }, simplex, [, dimension, ], =, pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, )]
[;, }, }, simplex, [, dimension, ], =, pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, ), {, final]
[=, pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =, new, PointValuePair]
[[, dimension, ], =, pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, ), {, final, PointValuePair, [, ], copy]
[], =, pointValuePair, ;, }, public, PointValuePair, [, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =, new]
[;, }, public, PointValuePair, [, ], getPoints, (, ), {, final, PointValuePair, [, ], copy, =, new, PointValuePair, [, simplex]
[;, System, ., arraycopy, (, simplex, ,, 0, ,, copy, ,, 0, ,, simplex, ., length, ), ;, return, copy]
[], ;, System, ., arraycopy, (, simplex, ,, 0, ,, copy, ,, 0, ,, simplex, ., length, ), ;, return]
[., length, ], ;, System, ., arraycopy, (, simplex, ,, 0, ,, copy, ,, 0, ,, simplex, ., length, )]
[;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <, 0, ||, index]
[., arraycopy, (, simplex, ,, 0, ,, copy, ,, 0, ,, simplex, ., length, ), ;, return, copy, ;, }]
[,, 0, ,, copy, ,, 0, ,, simplex, ., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (]
[,, copy, ,, 0, ,, simplex, ., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index]
[,, 0, ,, simplex, ., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {]
[,, simplex, ., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (]
[), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <, 0, ||]
[., length, ), ;, return, copy, ;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <]
[;, }, public, PointValuePair, getPoint, (, int, index, ), {, if, (, index, <, 0, ||, index, >=, simplex, .]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, return, simplex]
[||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -]
[<, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, .]
[||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, return, simplex]
[>=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, )]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, return, simplex]
[., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }]
[;, }, return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {]
[,, 0, ,, simplex, ., length, -, 1, ), ;, }, return, simplex, [, index, ], ;, }, protected, void]
[,, simplex, ., length, -, 1, ), ;, }, return, simplex, [, index, ], ;, }, protected, void, setPoint, (]
[), ;, }, return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, )]
[-, 1, ), ;, }, return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair]
[., length, -, 1, ), ;, }, return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index]
[), ;, }, return, simplex, [, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, )]
[;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <, 0, ||, index]
[[, index, ], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <]
[], ;, }, protected, void, setPoint, (, int, index, ,, PointValuePair, point, ), {, if, (, index, <, 0, ||]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, simplex, []
[||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -]
[<, 0, ||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, .]
[||, index, >=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, simplex, []
[>=, simplex, ., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, )]
[), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }, simplex, []
[., length, ), {, throw, new, OutOfRangeException, (, index, ,, 0, ,, simplex, ., length, -, 1, ), ;, }]
[;, }, simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {]
[,, 0, ,, simplex, ., length, -, 1, ), ;, }, simplex, [, index, ], =, point, ;, }, protected]
[,, simplex, ., length, -, 1, ), ;, }, simplex, [, index, ], =, point, ;, }, protected, void, setPoints]
[), ;, }, simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, )]
[-, 1, ), ;, }, simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ]]
[., length, -, 1, ), ;, }, simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair]
[), ;, }, simplex, [, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, )]
[=, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (, points, ., length, !=]
[[, index, ], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (, points]
[], =, point, ;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (, points, ., length]
[;, }, protected, void, setPoints, (, PointValuePair, [, ], points, ), {, if, (, points, ., length, !=, simplex, .]
[), {, throw, new, DimensionMismatchException, (, points, ., length, ,, simplex, ., length, ), ;, }, simplex, =, points, ;]
[!=, simplex, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,, simplex, ., length, ), ;, }]
[., length, !=, simplex, ., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,, simplex, ., length, )]
[), {, throw, new, DimensionMismatchException, (, points, ., length, ,, simplex, ., length, ), ;, }, simplex, =, points, ;]
[., length, ), {, throw, new, DimensionMismatchException, (, points, ., length, ,, simplex, ., length, ), ;, }, simplex, =]
[;, }, simplex, =, points, ;, }, private, static, double, [, ], createHypercubeSteps, (, int, n, ,, double, sideLength, )]
[,, simplex, ., length, ), ;, }, simplex, =, points, ;, }, private, static, double, [, ], createHypercubeSteps, (, int]
[., length, ,, simplex, ., length, ), ;, }, simplex, =, points, ;, }, private, static, double, [, ], createHypercubeSteps]
[), ;, }, simplex, =, points, ;, }, private, static, double, [, ], createHypercubeSteps, (, int, n, ,, double, sideLength]
[., length, ), ;, }, simplex, =, points, ;, }, private, static, double, [, ], createHypercubeSteps, (, int, n, ,]
[=, points, ;, }, private, static, double, [, ], createHypercubeSteps, (, int, n, ,, double, sideLength, ), {, final, double]
[;, }, private, static, double, [, ], createHypercubeSteps, (, int, n, ,, double, sideLength, ), {, final, double, [, ]]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, steps, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, steps, [, i]
[;, i, <, n, ;, i, ++, ), {, steps, [, i, ], =, sideLength, ;, }, return, steps, ;]
[;, i, ++, ), {, steps, [, i, ], =, sideLength, ;, }, return, steps, ;, }, }]
[<, n, ;, i, ++, ), {, steps, [, i, ], =, sideLength, ;, }, return, steps, ;, }, }]
[;, i, ++, ), {, steps, [, i, ], =, sideLength, ;, }, return, steps, ;, }, }]
[), {, steps, [, i, ], =, sideLength, ;, }, return, steps, ;, }, }]
[++, ), {, steps, [, i, ], =, sideLength, ;, }, return, steps, ;, }, }]
[=, sideLength, ;, }, return, steps, ;, }, }]
[[, i, ], =, sideLength, ;, }, return, steps, ;, }, }]
[], =, sideLength, ;, }, return, steps, ;, }, }]
[;, }, return, steps, ;, }, }]
[;, }, }]
