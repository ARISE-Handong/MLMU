[;, public, SortedDependencies, (, List, <, INPUT, >, inputs, ), throws, CircularDependencyException, {, this, ., inputs, =, Lists, ., newArrayList]
[., newHashMap, (, ), ;, public, SortedDependencies, (, List, <, INPUT, >, inputs, ), throws, CircularDependencyException, {, this, ., inputs]
[=, Lists, ., newArrayList, (, inputs, ), ;, noProvides, =, Lists, ., newArrayList, (, ), ;, for, (, INPUT, input]
[., inputs, =, Lists, ., newArrayList, (, inputs, ), ;, noProvides, =, Lists, ., newArrayList, (, ), ;, for, (]
[;, noProvides, =, Lists, ., newArrayList, (, ), ;, for, (, INPUT, input, :, inputs, ), {, Collection, <, String]
[., newArrayList, (, inputs, ), ;, noProvides, =, Lists, ., newArrayList, (, ), ;, for, (, INPUT, input, :, inputs]
[), ;, noProvides, =, Lists, ., newArrayList, (, ), ;, for, (, INPUT, input, :, inputs, ), {, Collection, <]
[=, Lists, ., newArrayList, (, ), ;, for, (, INPUT, input, :, inputs, ), {, Collection, <, String, >, currentProvides]
[;, for, (, INPUT, input, :, inputs, ), {, Collection, <, String, >, currentProvides, =, input, ., getProvides, (, )]
[., newArrayList, (, ), ;, for, (, INPUT, input, :, inputs, ), {, Collection, <, String, >, currentProvides, =, input]
[), {, Collection, <, String, >, currentProvides, =, input, ., getProvides, (, ), ;, if, (, currentProvides, ., isEmpty, (]
[;, if, (, currentProvides, ., isEmpty, (, ), ), {, noProvides, ., add, (, input, ), ;, }, for, (]
[., getProvides, (, ), ;, if, (, currentProvides, ., isEmpty, (, ), ), {, noProvides, ., add, (, input, )]
[), {, noProvides, ., add, (, input, ), ;, }, for, (, String, provide, :, currentProvides, ), {, provideMap, .]
[., isEmpty, (, ), ), {, noProvides, ., add, (, input, ), ;, }, for, (, String, provide, :, currentProvides]
[;, }, for, (, String, provide, :, currentProvides, ), {, provideMap, ., put, (, provide, ,, input, ), ;, }]
[., add, (, input, ), ;, }, for, (, String, provide, :, currentProvides, ), {, provideMap, ., put, (, provide]
[), ;, }, for, (, String, provide, :, currentProvides, ), {, provideMap, ., put, (, provide, ,, input, ), ;]
[), {, provideMap, ., put, (, provide, ,, input, ), ;, }, }, final, Multimap, <, INPUT, ,, INPUT, >]
[;, }, }, final, Multimap, <, INPUT, ,, INPUT, >, deps, =, HashMultimap, ., create, (, ), ;, for, (]
[., put, (, provide, ,, input, ), ;, }, }, final, Multimap, <, INPUT, ,, INPUT, >, deps, =, HashMultimap]
[,, input, ), ;, }, }, final, Multimap, <, INPUT, ,, INPUT, >, deps, =, HashMultimap, ., create, (, )]
[), ;, }, }, final, Multimap, <, INPUT, ,, INPUT, >, deps, =, HashMultimap, ., create, (, ), ;, for]
[;, for, (, INPUT, input, :, inputs, ), {, for, (, String, req, :, input, ., getRequires, (, ), )]
[., create, (, ), ;, for, (, INPUT, input, :, inputs, ), {, for, (, String, req, :, input, .]
[), {, for, (, String, req, :, input, ., getRequires, (, ), ), {, INPUT, dep, =, provideMap, ., get]
[), {, INPUT, dep, =, provideMap, ., get, (, req, ), ;, if, (, dep, !=, null, &&, dep, !=]
[., getRequires, (, ), ), {, INPUT, dep, =, provideMap, ., get, (, req, ), ;, if, (, dep, !=]
[;, if, (, dep, !=, null, &&, dep, !=, input, ), {, deps, ., put, (, input, ,, dep, )]
[., get, (, req, ), ;, if, (, dep, !=, null, &&, dep, !=, input, ), {, deps, ., put]
[), ;, if, (, dep, !=, null, &&, dep, !=, input, ), {, deps, ., put, (, input, ,, dep]
[), {, deps, ., put, (, input, ,, dep, ), ;, }, }, }, sortedList, =, topologicalStableSort, (, inputs, ,]
[&&, dep, !=, input, ), {, deps, ., put, (, input, ,, dep, ), ;, }, }, }, sortedList, =]
[!=, null, &&, dep, !=, input, ), {, deps, ., put, (, input, ,, dep, ), ;, }, }, }]
[&&, dep, !=, input, ), {, deps, ., put, (, input, ,, dep, ), ;, }, }, }, sortedList, =]
[), {, deps, ., put, (, input, ,, dep, ), ;, }, }, }, sortedList, =, topologicalStableSort, (, inputs, ,]
[!=, input, ), {, deps, ., put, (, input, ,, dep, ), ;, }, }, }, sortedList, =, topologicalStableSort, (]
[), {, deps, ., put, (, input, ,, dep, ), ;, }, }, }, sortedList, =, topologicalStableSort, (, inputs, ,]
[;, }, }, }, sortedList, =, topologicalStableSort, (, inputs, ,, deps, ), ;, if, (, sortedList, ., size, (, )]
[., put, (, input, ,, dep, ), ;, }, }, }, sortedList, =, topologicalStableSort, (, inputs, ,, deps, ), ;]
[,, dep, ), ;, }, }, }, sortedList, =, topologicalStableSort, (, inputs, ,, deps, ), ;, if, (, sortedList, .]
[), ;, }, }, }, sortedList, =, topologicalStableSort, (, inputs, ,, deps, ), ;, if, (, sortedList, ., size, (]
[=, topologicalStableSort, (, inputs, ,, deps, ), ;, if, (, sortedList, ., size, (, ), <, inputs, ., size, (]
[;, if, (, sortedList, ., size, (, ), <, inputs, ., size, (, ), ), {, List, <, INPUT, >]
[,, deps, ), ;, if, (, sortedList, ., size, (, ), <, inputs, ., size, (, ), ), {, List]
[), ;, if, (, sortedList, ., size, (, ), <, inputs, ., size, (, ), ), {, List, <, INPUT]
[), {, List, <, INPUT, >, subGraph, =, Lists, ., newArrayList, (, inputs, ), ;, subGraph, ., removeAll, (, sortedList]
[<, inputs, ., size, (, ), ), {, List, <, INPUT, >, subGraph, =, Lists, ., newArrayList, (, inputs, )]
[., size, (, ), <, inputs, ., size, (, ), ), {, List, <, INPUT, >, subGraph, =, Lists, .]
[), {, List, <, INPUT, >, subGraph, =, Lists, ., newArrayList, (, inputs, ), ;, subGraph, ., removeAll, (, sortedList]
[., size, (, ), ), {, List, <, INPUT, >, subGraph, =, Lists, ., newArrayList, (, inputs, ), ;, subGraph]
[;, subGraph, ., removeAll, (, sortedList, ), ;, throw, new, CircularDependencyException, (, cycleToString, (, findCycle, (, subGraph, ,, deps, )]
[., newArrayList, (, inputs, ), ;, subGraph, ., removeAll, (, sortedList, ), ;, throw, new, CircularDependencyException, (, cycleToString, (, findCycle]
[), ;, subGraph, ., removeAll, (, sortedList, ), ;, throw, new, CircularDependencyException, (, cycleToString, (, findCycle, (, subGraph, ,, deps]
[;, throw, new, CircularDependencyException, (, cycleToString, (, findCycle, (, subGraph, ,, deps, ), ), ), ;, }, }, public, INPUT]
[., removeAll, (, sortedList, ), ;, throw, new, CircularDependencyException, (, cycleToString, (, findCycle, (, subGraph, ,, deps, ), ), )]
[), ;, throw, new, CircularDependencyException, (, cycleToString, (, findCycle, (, subGraph, ,, deps, ), ), ), ;, }, }, public]
[;, }, }, public, INPUT, getInputProviding, (, String, symbol, ), throws, MissingProvideException, {, if, (, provideMap, ., containsKey, (, symbol]
[), ;, }, }, public, INPUT, getInputProviding, (, String, symbol, ), throws, MissingProvideException, {, if, (, provideMap, ., containsKey, (]
[), ), ;, }, }, public, INPUT, getInputProviding, (, String, symbol, ), throws, MissingProvideException, {, if, (, provideMap, ., containsKey]
[,, deps, ), ), ), ;, }, }, public, INPUT, getInputProviding, (, String, symbol, ), throws, MissingProvideException, {, if, (]
[), ), ), ;, }, }, public, INPUT, getInputProviding, (, String, symbol, ), throws, MissingProvideException, {, if, (, provideMap, .]
[), {, return, provideMap, ., get, (, symbol, ), ;, }, throw, new, MissingProvideException, (, symbol, ), ;, }, public]
[., containsKey, (, symbol, ), ), {, return, provideMap, ., get, (, symbol, ), ;, }, throw, new, MissingProvideException, (]
[), ), {, return, provideMap, ., get, (, symbol, ), ;, }, throw, new, MissingProvideException, (, symbol, ), ;, }]
[;, }, throw, new, MissingProvideException, (, symbol, ), ;, }, public, INPUT, maybeGetInputProviding, (, String, symbol, ), {, return, provideMap]
[., get, (, symbol, ), ;, }, throw, new, MissingProvideException, (, symbol, ), ;, }, public, INPUT, maybeGetInputProviding, (, String]
[), ;, }, throw, new, MissingProvideException, (, symbol, ), ;, }, public, INPUT, maybeGetInputProviding, (, String, symbol, ), {, return]
[;, }, public, INPUT, maybeGetInputProviding, (, String, symbol, ), {, return, provideMap, ., get, (, symbol, ), ;, }, private]
[), ;, }, public, INPUT, maybeGetInputProviding, (, String, symbol, ), {, return, provideMap, ., get, (, symbol, ), ;, }]
[;, }, private, List, <, INPUT, >, findCycle, (, List, <, INPUT, >, subGraph, ,, Multimap, <, INPUT, ,, INPUT]
[., get, (, symbol, ), ;, }, private, List, <, INPUT, >, findCycle, (, List, <, INPUT, >, subGraph, ,]
[), ;, }, private, List, <, INPUT, >, findCycle, (, List, <, INPUT, >, subGraph, ,, Multimap, <, INPUT, ,]
[;, }, private, List, <, INPUT, >, findCycle, (, INPUT, current, ,, Set, <, INPUT, >, subGraph, ,, Multimap, <]
[,, Sets, ., <, INPUT, >, newHashSet, (, subGraph, ), ,, deps, ,, Sets, ., <, INPUT, >, newHashSet, (]
[., get, (, 0, ), ,, Sets, ., <, INPUT, >, newHashSet, (, subGraph, ), ,, deps, ,, Sets, .]
[), ,, Sets, ., <, INPUT, >, newHashSet, (, subGraph, ), ,, deps, ,, Sets, ., <, INPUT, >, newHashSet]
[,, deps, ,, Sets, ., <, INPUT, >, newHashSet, (, ), ), ;, }, private, List, <, INPUT, >, findCycle]
[., <, INPUT, >, newHashSet, (, subGraph, ), ,, deps, ,, Sets, ., <, INPUT, >, newHashSet, (, ), )]
[), ,, deps, ,, Sets, ., <, INPUT, >, newHashSet, (, ), ), ;, }, private, List, <, INPUT, >]
[,, Sets, ., <, INPUT, >, newHashSet, (, ), ), ;, }, private, List, <, INPUT, >, findCycle, (, INPUT]
[), ;, }, private, List, <, INPUT, >, findCycle, (, INPUT, current, ,, Set, <, INPUT, >, subGraph, ,, Multimap]
[., <, INPUT, >, newHashSet, (, ), ), ;, }, private, List, <, INPUT, >, findCycle, (, INPUT, current, ,]
[), {, List, <, INPUT, >, cycle, =, findCycle, (, findRequireInSubGraphOrFail, (, current, ,, subGraph, ), ,, subGraph, ,, deps]
[., add, (, current, ), ), {, List, <, INPUT, >, cycle, =, findCycle, (, findRequireInSubGraphOrFail, (, current, ,, subGraph]
[), ), {, List, <, INPUT, >, cycle, =, findCycle, (, findRequireInSubGraphOrFail, (, current, ,, subGraph, ), ,, subGraph, ,]
[;, if, (, cycle, ., get, (, 0, ), !=, cycle, ., get, (, cycle, ., size, (, ), -]
[,, subGraph, ,, deps, ,, covered, ), ;, if, (, cycle, ., get, (, 0, ), !=, cycle, ., get]
[,, subGraph, ), ,, subGraph, ,, deps, ,, covered, ), ;, if, (, cycle, ., get, (, 0, ), !=]
[), ,, subGraph, ,, deps, ,, covered, ), ;, if, (, cycle, ., get, (, 0, ), !=, cycle, .]
[,, deps, ,, covered, ), ;, if, (, cycle, ., get, (, 0, ), !=, cycle, ., get, (, cycle]
[,, covered, ), ;, if, (, cycle, ., get, (, 0, ), !=, cycle, ., get, (, cycle, ., size]
[), ;, if, (, cycle, ., get, (, 0, ), !=, cycle, ., get, (, cycle, ., size, (, )]
[), {, cycle, ., add, (, current, ), ;, }, return, cycle, ;, }, else, {, List, <, INPUT, >]
[!=, cycle, ., get, (, cycle, ., size, (, ), -, 1, ), ), {, cycle, ., add, (, current]
[., get, (, 0, ), !=, cycle, ., get, (, cycle, ., size, (, ), -, 1, ), ), {]
[), !=, cycle, ., get, (, cycle, ., size, (, ), -, 1, ), ), {, cycle, ., add, (]
[), {, cycle, ., add, (, current, ), ;, }, return, cycle, ;, }, else, {, List, <, INPUT, >]
[., get, (, cycle, ., size, (, ), -, 1, ), ), {, cycle, ., add, (, current, ), ;]
[), ), {, cycle, ., add, (, current, ), ;, }, return, cycle, ;, }, else, {, List, <, INPUT]
[-, 1, ), ), {, cycle, ., add, (, current, ), ;, }, return, cycle, ;, }, else, {, List]
[., size, (, ), -, 1, ), ), {, cycle, ., add, (, current, ), ;, }, return, cycle, ;]
[), ), {, cycle, ., add, (, current, ), ;, }, return, cycle, ;, }, else, {, List, <, INPUT]
[;, }, return, cycle, ;, }, else, {, List, <, INPUT, >, cycle, =, Lists, ., <, INPUT, >, newArrayList]
[., add, (, current, ), ;, }, return, cycle, ;, }, else, {, List, <, INPUT, >, cycle, =, Lists]
[), ;, }, return, cycle, ;, }, else, {, List, <, INPUT, >, cycle, =, Lists, ., <, INPUT, >]
[;, }, else, {, List, <, INPUT, >, cycle, =, Lists, ., <, INPUT, >, newArrayList, (, ), ;, cycle]
[;, cycle, ., add, (, current, ), ;, return, cycle, ;, }, }, private, INPUT, findRequireInSubGraphOrFail, (, INPUT, input, ,]
[., <, INPUT, >, newArrayList, (, ), ;, cycle, ., add, (, current, ), ;, return, cycle, ;, }, }]
[;, return, cycle, ;, }, }, private, INPUT, findRequireInSubGraphOrFail, (, INPUT, input, ,, Set, <, INPUT, >, subGraph, ), {]
[., add, (, current, ), ;, return, cycle, ;, }, }, private, INPUT, findRequireInSubGraphOrFail, (, INPUT, input, ,, Set, <]
[), ;, return, cycle, ;, }, }, private, INPUT, findRequireInSubGraphOrFail, (, INPUT, input, ,, Set, <, INPUT, >, subGraph, )]
[;, }, }, private, INPUT, findRequireInSubGraphOrFail, (, INPUT, input, ,, Set, <, INPUT, >, subGraph, ), {, for, (, String]
[), {, INPUT, candidate, =, provideMap, ., get, (, symbol, ), ;, if, (, subGraph, ., contains, (, candidate, )]
[., getRequires, (, ), ), {, INPUT, candidate, =, provideMap, ., get, (, symbol, ), ;, if, (, subGraph, .]
[;, if, (, subGraph, ., contains, (, candidate, ), ), {, return, candidate, ;, }, }, throw, new, IllegalStateException, (]
[., get, (, symbol, ), ;, if, (, subGraph, ., contains, (, candidate, ), ), {, return, candidate, ;, }]
[), ;, if, (, subGraph, ., contains, (, candidate, ), ), {, return, candidate, ;, }, }, throw, new, IllegalStateException]
[), {, return, candidate, ;, }, }, throw, new, IllegalStateException, (, "no require found in subgraph", ), ;, }, private, String, cycleToString, (, List]
[., contains, (, candidate, ), ), {, return, candidate, ;, }, }, throw, new, IllegalStateException, (, "no require found in subgraph", ), ;, }]
[), ), {, return, candidate, ;, }, }, throw, new, IllegalStateException, (, "no require found in subgraph", ), ;, }, private, String, cycleToString, (]
[;, }, }, throw, new, IllegalStateException, (, "no require found in subgraph", ), ;, }, private, String, cycleToString, (, List, <, INPUT, >, cycle]
[;, }, private, String, cycleToString, (, List, <, INPUT, >, cycle, ), {, List, <, String, >, symbols, =, Lists]
[), ;, }, private, String, cycleToString, (, List, <, INPUT, >, cycle, ), {, List, <, String, >, symbols, =]
[;, for, (, int, i, =, cycle, ., size, (, ), -, 1, ;, i, >=, 0, ;, i, --]
[., newArrayList, (, ), ;, for, (, int, i, =, cycle, ., size, (, ), -, 1, ;, i, >=]
[;, i, >=, 0, ;, i, --, ), {, symbols, ., add, (, cycle, ., get, (, i, ), .]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, symbols, ., add, (, cycle, ., get, (, i]
[., size, (, ), -, 1, ;, i, >=, 0, ;, i, --, ), {, symbols, ., add, (, cycle]
[;, i, >=, 0, ;, i, --, ), {, symbols, ., add, (, cycle, ., get, (, i, ), .]
[;, i, --, ), {, symbols, ., add, (, cycle, ., get, (, i, ), ., getProvides, (, ), .]
[>=, 0, ;, i, --, ), {, symbols, ., add, (, cycle, ., get, (, i, ), ., getProvides, (]
[;, i, --, ), {, symbols, ., add, (, cycle, ., get, (, i, ), ., getProvides, (, ), .]
[), {, symbols, ., add, (, cycle, ., get, (, i, ), ., getProvides, (, ), ., iterator, (, )]
[--, ), {, symbols, ., add, (, cycle, ., get, (, i, ), ., getProvides, (, ), ., iterator, (]
[;, }, symbols, ., add, (, symbols, ., get, (, 0, ), ), ;, return, Joiner, ., on, (, " -> "]
[., add, (, cycle, ., get, (, i, ), ., getProvides, (, ), ., iterator, (, ), ., next, (]
[), ;, }, symbols, ., add, (, symbols, ., get, (, 0, ), ), ;, return, Joiner, ., on, (]
[., next, (, ), ), ;, }, symbols, ., add, (, symbols, ., get, (, 0, ), ), ;, return]
[., iterator, (, ), ., next, (, ), ), ;, }, symbols, ., add, (, symbols, ., get, (, 0]
[., getProvides, (, ), ., iterator, (, ), ., next, (, ), ), ;, }, symbols, ., add, (, symbols]
[., get, (, i, ), ., getProvides, (, ), ., iterator, (, ), ., next, (, ), ), ;, }]
[), ., getProvides, (, ), ., iterator, (, ), ., next, (, ), ), ;, }, symbols, ., add, (]
[;, return, Joiner, ., on, (, " -> ", ), ., join, (, symbols, ), ;, }, public, List, <, INPUT, >]
[., add, (, symbols, ., get, (, 0, ), ), ;, return, Joiner, ., on, (, " -> ", ), ., join]
[), ;, return, Joiner, ., on, (, " -> ", ), ., join, (, symbols, ), ;, }, public, List, <, INPUT]
[., get, (, 0, ), ), ;, return, Joiner, ., on, (, " -> ", ), ., join, (, symbols, ), ;]
[), ), ;, return, Joiner, ., on, (, " -> ", ), ., join, (, symbols, ), ;, }, public, List, <]
[;, }, public, List, <, INPUT, >, getSortedList, (, ), {, return, Collections, ., <, INPUT, >, unmodifiableList, (, sortedList]
[., join, (, symbols, ), ;, }, public, List, <, INPUT, >, getSortedList, (, ), {, return, Collections, ., <]
[., on, (, " -> ", ), ., join, (, symbols, ), ;, }, public, List, <, INPUT, >, getSortedList, (, )]
[), ., join, (, symbols, ), ;, }, public, List, <, INPUT, >, getSortedList, (, ), {, return, Collections, .]
[), ;, }, public, List, <, INPUT, >, getSortedList, (, ), {, return, Collections, ., <, INPUT, >, unmodifiableList, (]
[;, }, public, List, <, INPUT, >, getSortedDependenciesOf, (, List, <, INPUT, >, roots, ), {, return, getDependenciesOf, (, roots]
[., <, INPUT, >, unmodifiableList, (, sortedList, ), ;, }, public, List, <, INPUT, >, getSortedDependenciesOf, (, List, <, INPUT]
[), ;, }, public, List, <, INPUT, >, getSortedDependenciesOf, (, List, <, INPUT, >, roots, ), {, return, getDependenciesOf, (]
[;, }, public, List, <, INPUT, >, getDependenciesOf, (, List, <, INPUT, >, roots, ,, boolean, sorted, ), {, Preconditions]
[,, true, ), ;, }, public, List, <, INPUT, >, getDependenciesOf, (, List, <, INPUT, >, roots, ,, boolean, sorted]
[), ;, }, public, List, <, INPUT, >, getDependenciesOf, (, List, <, INPUT, >, roots, ,, boolean, sorted, ), {]
[;, Set, <, INPUT, >, included, =, Sets, ., newHashSet, (, ), ;, Deque, <, INPUT, >, worklist, =, new]
[., checkArgument, (, inputs, ., containsAll, (, roots, ), ), ;, Set, <, INPUT, >, included, =, Sets, ., newHashSet]
[), ;, Set, <, INPUT, >, included, =, Sets, ., newHashSet, (, ), ;, Deque, <, INPUT, >, worklist, =]
[., containsAll, (, roots, ), ), ;, Set, <, INPUT, >, included, =, Sets, ., newHashSet, (, ), ;, Deque]
[), ), ;, Set, <, INPUT, >, included, =, Sets, ., newHashSet, (, ), ;, Deque, <, INPUT, >, worklist]
[;, Deque, <, INPUT, >, worklist, =, new, ArrayDeque, <, INPUT, >, (, roots, ), ;, while, (, !, worklist]
[., newHashSet, (, ), ;, Deque, <, INPUT, >, worklist, =, new, ArrayDeque, <, INPUT, >, (, roots, ), ;]
[;, while, (, !, worklist, ., isEmpty, (, ), ), {, INPUT, current, =, worklist, ., pop, (, ), ;]
[), ;, while, (, !, worklist, ., isEmpty, (, ), ), {, INPUT, current, =, worklist, ., pop, (, )]
[), {, INPUT, current, =, worklist, ., pop, (, ), ;, if, (, included, ., add, (, current, ), )]
[), {, INPUT, current, =, worklist, ., pop, (, ), ;, if, (, included, ., add, (, current, ), )]
[., isEmpty, (, ), ), {, INPUT, current, =, worklist, ., pop, (, ), ;, if, (, included, ., add]
[;, if, (, included, ., add, (, current, ), ), {, for, (, String, req, :, current, ., getRequires, (]
[., pop, (, ), ;, if, (, included, ., add, (, current, ), ), {, for, (, String, req, :]
[), {, for, (, String, req, :, current, ., getRequires, (, ), ), {, INPUT, dep, =, provideMap, ., get]
[., add, (, current, ), ), {, for, (, String, req, :, current, ., getRequires, (, ), ), {, INPUT]
[), ), {, for, (, String, req, :, current, ., getRequires, (, ), ), {, INPUT, dep, =, provideMap, .]
[), {, INPUT, dep, =, provideMap, ., get, (, req, ), ;, if, (, dep, !=, null, ), {, worklist]
[., getRequires, (, ), ), {, INPUT, dep, =, provideMap, ., get, (, req, ), ;, if, (, dep, !=]
[;, if, (, dep, !=, null, ), {, worklist, ., add, (, dep, ), ;, }, }, }, }, ImmutableList]
[., get, (, req, ), ;, if, (, dep, !=, null, ), {, worklist, ., add, (, dep, ), ;]
[), ;, if, (, dep, !=, null, ), {, worklist, ., add, (, dep, ), ;, }, }, }, }]
[), {, worklist, ., add, (, dep, ), ;, }, }, }, }, ImmutableList, ., Builder, <, INPUT, >, builder]
[!=, null, ), {, worklist, ., add, (, dep, ), ;, }, }, }, }, ImmutableList, ., Builder, <, INPUT]
[), {, worklist, ., add, (, dep, ), ;, }, }, }, }, ImmutableList, ., Builder, <, INPUT, >, builder]
[;, }, }, }, }, ImmutableList, ., Builder, <, INPUT, >, builder, =, ImmutableList, ., builder, (, ), ;, for]
[., add, (, dep, ), ;, }, }, }, }, ImmutableList, ., Builder, <, INPUT, >, builder, =, ImmutableList, .]
[), ;, }, }, }, }, ImmutableList, ., Builder, <, INPUT, >, builder, =, ImmutableList, ., builder, (, ), ;]
[;, for, (, INPUT, current, :, (, sorted, ?, sortedList, :, inputs, ), ), {, if, (, included, ., contains]
[., builder, (, ), ;, for, (, INPUT, current, :, (, sorted, ?, sortedList, :, inputs, ), ), {, if]
[), {, if, (, included, ., contains, (, current, ), ), {, builder, ., add, (, current, ), ;, }]
[), ), {, if, (, included, ., contains, (, current, ), ), {, builder, ., add, (, current, ), ;]
[?, sortedList, :, inputs, ), ), {, if, (, included, ., contains, (, current, ), ), {, builder, ., add]
[:, inputs, ), ), {, if, (, included, ., contains, (, current, ), ), {, builder, ., add, (, current]
[), ), {, if, (, included, ., contains, (, current, ), ), {, builder, ., add, (, current, ), ;]
[), {, builder, ., add, (, current, ), ;, }, }, return, builder, ., build, (, ), ;, }, public]
[., contains, (, current, ), ), {, builder, ., add, (, current, ), ;, }, }, return, builder, ., build]
[), ), {, builder, ., add, (, current, ), ;, }, }, return, builder, ., build, (, ), ;, }]
[;, }, }, return, builder, ., build, (, ), ;, }, public, List, <, INPUT, >, getInputsWithoutProvides, (, ), {]
[., add, (, current, ), ;, }, }, return, builder, ., build, (, ), ;, }, public, List, <, INPUT]
[), ;, }, }, return, builder, ., build, (, ), ;, }, public, List, <, INPUT, >, getInputsWithoutProvides, (, )]
[;, }, public, List, <, INPUT, >, getInputsWithoutProvides, (, ), {, return, Collections, ., <, INPUT, >, unmodifiableList, (, noProvides]
[., build, (, ), ;, }, public, List, <, INPUT, >, getInputsWithoutProvides, (, ), {, return, Collections, ., <, INPUT]
[;, }, private, static, <, T, >, List, <, T, >, topologicalStableSort, (, List, <, T, >, items, ,, Multimap]
[., <, INPUT, >, unmodifiableList, (, noProvides, ), ;, }, private, static, <, T, >, List, <, T, >, topologicalStableSort]
[), ;, }, private, static, <, T, >, List, <, T, >, topologicalStableSort, (, List, <, T, >, items, ,]
[), {, return, Lists, ., newArrayList, (, ), ;, }, final, Map, <, T, ,, Integer, >, originalIndex, =, Maps]
[==, 0, ), {, return, Lists, ., newArrayList, (, ), ;, }, final, Map, <, T, ,, Integer, >, originalIndex]
[., size, (, ), ==, 0, ), {, return, Lists, ., newArrayList, (, ), ;, }, final, Map, <, T]
[), {, return, Lists, ., newArrayList, (, ), ;, }, final, Map, <, T, ,, Integer, >, originalIndex, =, Maps]
[;, }, final, Map, <, T, ,, Integer, >, originalIndex, =, Maps, ., newHashMap, (, ), ;, for, (, int]
[., newArrayList, (, ), ;, }, final, Map, <, T, ,, Integer, >, originalIndex, =, Maps, ., newHashMap, (, )]
[;, for, (, int, i, =, 0, ;, i, <, items, ., size, (, ), ;, i, ++, ), {]
[., newHashMap, (, ), ;, for, (, int, i, =, 0, ;, i, <, items, ., size, (, ), ;]
[;, i, <, items, ., size, (, ), ;, i, ++, ), {, originalIndex, ., put, (, items, ., get]
[;, i, ++, ), {, originalIndex, ., put, (, items, ., get, (, i, ), ,, i, ), ;, }]
[<, items, ., size, (, ), ;, i, ++, ), {, originalIndex, ., put, (, items, ., get, (, i]
[;, i, ++, ), {, originalIndex, ., put, (, items, ., get, (, i, ), ,, i, ), ;, }]
[., size, (, ), ;, i, ++, ), {, originalIndex, ., put, (, items, ., get, (, i, ), ,]
[), {, originalIndex, ., put, (, items, ., get, (, i, ), ,, i, ), ;, }, PriorityQueue, <, T]
[++, ), {, originalIndex, ., put, (, items, ., get, (, i, ), ,, i, ), ;, }, PriorityQueue, <]
[;, }, PriorityQueue, <, T, >, inDegreeZero, =, new, PriorityQueue, <, T, >, (, items, ., size, (, ), ,]
[., put, (, items, ., get, (, i, ), ,, i, ), ;, }, PriorityQueue, <, T, >, inDegreeZero, =]
[,, i, ), ;, }, PriorityQueue, <, T, >, inDegreeZero, =, new, PriorityQueue, <, T, >, (, items, ., size]
[., get, (, i, ), ,, i, ), ;, }, PriorityQueue, <, T, >, inDegreeZero, =, new, PriorityQueue, <, T]
[), ,, i, ), ;, }, PriorityQueue, <, T, >, inDegreeZero, =, new, PriorityQueue, <, T, >, (, items, .]
[), ;, }, PriorityQueue, <, T, >, inDegreeZero, =, new, PriorityQueue, <, T, >, (, items, ., size, (, )]
[;, List, <, T, >, result, =, Lists, ., newArrayList, (, ), ;, Multiset, <, T, >, inDegree, =, HashMultiset]
[,, new, Comparator, <, T, >, (, ), {, @, Override, public, int, compare, (, T, a, ,, T, b]
[., size, (, ), ,, new, Comparator, <, T, >, (, ), {, @, Override, public, int, compare, (, T]
[), ;, List, <, T, >, result, =, Lists, ., newArrayList, (, ), ;, Multiset, <, T, >, inDegree, =]
[;, }, }, ), ;, List, <, T, >, result, =, Lists, ., newArrayList, (, ), ;, Multiset, <, T]
[-, originalIndex, ., get, (, b, ), ., intValue, (, ), ;, }, }, ), ;, List, <, T, >]
[., intValue, (, ), -, originalIndex, ., get, (, b, ), ., intValue, (, ), ;, }, }, ), ;]
[., get, (, a, ), ., intValue, (, ), -, originalIndex, ., get, (, b, ), ., intValue, (, )]
[), ., intValue, (, ), -, originalIndex, ., get, (, b, ), ., intValue, (, ), ;, }, }, )]
[;, }, }, ), ;, List, <, T, >, result, =, Lists, ., newArrayList, (, ), ;, Multiset, <, T]
[., intValue, (, ), ;, }, }, ), ;, List, <, T, >, result, =, Lists, ., newArrayList, (, )]
[., get, (, b, ), ., intValue, (, ), ;, }, }, ), ;, List, <, T, >, result, =]
[), ., intValue, (, ), ;, }, }, ), ;, List, <, T, >, result, =, Lists, ., newArrayList, (]
[;, Multiset, <, T, >, inDegree, =, HashMultiset, ., create, (, ), ;, Multimap, <, T, ,, T, >, reverseDeps]
[., newArrayList, (, ), ;, Multiset, <, T, >, inDegree, =, HashMultiset, ., create, (, ), ;, Multimap, <, T]
[;, Multimap, <, T, ,, T, >, reverseDeps, =, ArrayListMultimap, ., create, (, ), ;, Multimaps, ., invertFrom, (, deps]
[., create, (, ), ;, Multimap, <, T, ,, T, >, reverseDeps, =, ArrayListMultimap, ., create, (, ), ;, Multimaps]
[;, Multimaps, ., invertFrom, (, deps, ,, reverseDeps, ), ;, for, (, T, item, :, items, ), {, Collection, <]
[., create, (, ), ;, Multimaps, ., invertFrom, (, deps, ,, reverseDeps, ), ;, for, (, T, item, :, items]
[;, for, (, T, item, :, items, ), {, Collection, <, T, >, itemDeps, =, deps, ., get, (, item]
[., invertFrom, (, deps, ,, reverseDeps, ), ;, for, (, T, item, :, items, ), {, Collection, <, T, >]
[,, reverseDeps, ), ;, for, (, T, item, :, items, ), {, Collection, <, T, >, itemDeps, =, deps, .]
[), ;, for, (, T, item, :, items, ), {, Collection, <, T, >, itemDeps, =, deps, ., get, (]
[), {, Collection, <, T, >, itemDeps, =, deps, ., get, (, item, ), ;, inDegree, ., add, (, item]
[;, inDegree, ., add, (, item, ,, itemDeps, ., size, (, ), ), ;, if, (, itemDeps, ., isEmpty, (]
[., get, (, item, ), ;, inDegree, ., add, (, item, ,, itemDeps, ., size, (, ), ), ;, if]
[), ;, inDegree, ., add, (, item, ,, itemDeps, ., size, (, ), ), ;, if, (, itemDeps, ., isEmpty]
[;, if, (, itemDeps, ., isEmpty, (, ), ), {, inDegreeZero, ., add, (, item, ), ;, }, }, while]
[., add, (, item, ,, itemDeps, ., size, (, ), ), ;, if, (, itemDeps, ., isEmpty, (, ), )]
[,, itemDeps, ., size, (, ), ), ;, if, (, itemDeps, ., isEmpty, (, ), ), {, inDegreeZero, ., add]
[), ;, if, (, itemDeps, ., isEmpty, (, ), ), {, inDegreeZero, ., add, (, item, ), ;, }, }]
[., size, (, ), ), ;, if, (, itemDeps, ., isEmpty, (, ), ), {, inDegreeZero, ., add, (, item]
[), {, inDegreeZero, ., add, (, item, ), ;, }, }, while, (, !, inDegreeZero, ., isEmpty, (, ), )]
[., isEmpty, (, ), ), {, inDegreeZero, ., add, (, item, ), ;, }, }, while, (, !, inDegreeZero, .]
[;, }, }, while, (, !, inDegreeZero, ., isEmpty, (, ), ), {, T, item, =, inDegreeZero, ., remove, (]
[., add, (, item, ), ;, }, }, while, (, !, inDegreeZero, ., isEmpty, (, ), ), {, T, item]
[), ;, }, }, while, (, !, inDegreeZero, ., isEmpty, (, ), ), {, T, item, =, inDegreeZero, ., remove]
[), {, T, item, =, inDegreeZero, ., remove, (, ), ;, result, ., add, (, item, ), ;, for, (]
[), {, T, item, =, inDegreeZero, ., remove, (, ), ;, result, ., add, (, item, ), ;, for, (]
[., isEmpty, (, ), ), {, T, item, =, inDegreeZero, ., remove, (, ), ;, result, ., add, (, item]
[;, result, ., add, (, item, ), ;, for, (, T, inWaiting, :, reverseDeps, ., get, (, item, ), )]
[., remove, (, ), ;, result, ., add, (, item, ), ;, for, (, T, inWaiting, :, reverseDeps, ., get]
[;, for, (, T, inWaiting, :, reverseDeps, ., get, (, item, ), ), {, inDegree, ., remove, (, inWaiting, ,]
[., add, (, item, ), ;, for, (, T, inWaiting, :, reverseDeps, ., get, (, item, ), ), {, inDegree]
[), ;, for, (, T, inWaiting, :, reverseDeps, ., get, (, item, ), ), {, inDegree, ., remove, (, inWaiting]
[), {, inDegree, ., remove, (, inWaiting, ,, 1, ), ;, if, (, inDegree, ., count, (, inWaiting, ), ==]
[., get, (, item, ), ), {, inDegree, ., remove, (, inWaiting, ,, 1, ), ;, if, (, inDegree, .]
[), ), {, inDegree, ., remove, (, inWaiting, ,, 1, ), ;, if, (, inDegree, ., count, (, inWaiting, )]
[;, if, (, inDegree, ., count, (, inWaiting, ), ==, 0, ), {, inDegreeZero, ., add, (, inWaiting, ), ;]
[., remove, (, inWaiting, ,, 1, ), ;, if, (, inDegree, ., count, (, inWaiting, ), ==, 0, ), {]
[,, 1, ), ;, if, (, inDegree, ., count, (, inWaiting, ), ==, 0, ), {, inDegreeZero, ., add, (]
[), ;, if, (, inDegree, ., count, (, inWaiting, ), ==, 0, ), {, inDegreeZero, ., add, (, inWaiting, )]
[), {, inDegreeZero, ., add, (, inWaiting, ), ;, }, }, }, return, result, ;, }, public, static, class, CircularDependencyException]
[==, 0, ), {, inDegreeZero, ., add, (, inWaiting, ), ;, }, }, }, return, result, ;, }, public, static]
[., count, (, inWaiting, ), ==, 0, ), {, inDegreeZero, ., add, (, inWaiting, ), ;, }, }, }, return]
[), ==, 0, ), {, inDegreeZero, ., add, (, inWaiting, ), ;, }, }, }, return, result, ;, }, public]
[), {, inDegreeZero, ., add, (, inWaiting, ), ;, }, }, }, return, result, ;, }, public, static, class, CircularDependencyException]
[;, }, }, }, return, result, ;, }, public, static, class, CircularDependencyException, extends, Exception, {, CircularDependencyException, (, String, message, )]
[., add, (, inWaiting, ), ;, }, }, }, return, result, ;, }, public, static, class, CircularDependencyException, extends, Exception, {]
[), ;, }, }, }, return, result, ;, }, public, static, class, CircularDependencyException, extends, Exception, {, CircularDependencyException, (, String, message]
[;, }, public, static, class, CircularDependencyException, extends, Exception, {, CircularDependencyException, (, String, message, ), {, super, (, message, ), ;]
[), ;, }, }, public, static, class, MissingProvideException, extends, Exception, {, MissingProvideException, (, String, provide, ), {, super, (, provide]
[), ;, }, }, }]
