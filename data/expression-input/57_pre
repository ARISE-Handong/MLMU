[;, import, java, ., util, ., Set, ;, class, StrictModeCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, UNKNOWN_VARIABLE, =]
[;, import, java, ., util, ., Set, ;, class, StrictModeCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, UNKNOWN_VARIABLE, =]
[util, ., Set, ;, class, StrictModeCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, UNKNOWN_VARIABLE, =, DiagnosticType, ., warning, (]
[Set, ;, class, StrictModeCheck, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, UNKNOWN_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_VARIABLE", ,]
[{, static, final, DiagnosticType, UNKNOWN_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_VARIABLE", ,, "unknown variable {0}", ), ;, static, final, DiagnosticType, EVAL_USE, =]
[{, static, final, DiagnosticType, UNKNOWN_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_VARIABLE", ,, "unknown variable {0}", ), ;, static, final, DiagnosticType, EVAL_USE, =]
[UNKNOWN_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_UNKNOWN_VARIABLE", ,, "unknown variable {0}", ), ;, static, final, DiagnosticType, EVAL_USE, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "JSC_UNKNOWN_VARIABLE", ,, "unknown variable {0}", ), ;, static, final, DiagnosticType, EVAL_USE, =, DiagnosticType, ., error, (, "JSC_EVAL_USE", ,]
[;, static, final, DiagnosticType, EVAL_USE, =, DiagnosticType, ., error, (, "JSC_EVAL_USE", ,, "\"eval\" cannot be used in Caja", ), ;, static, final, DiagnosticType, EVAL_DECLARATION, =]
[;, static, final, DiagnosticType, EVAL_USE, =, DiagnosticType, ., error, (, "JSC_EVAL_USE", ,, "\"eval\" cannot be used in Caja", ), ;, static, final, DiagnosticType, EVAL_DECLARATION, =]
[EVAL_USE, =, DiagnosticType, ., error, (, "JSC_EVAL_USE", ,, "\"eval\" cannot be used in Caja", ), ;, static, final, DiagnosticType, EVAL_DECLARATION, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "JSC_EVAL_USE", ,, "\"eval\" cannot be used in Caja", ), ;, static, final, DiagnosticType, EVAL_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_EVAL_DECLARATION", ,]
[;, static, final, DiagnosticType, EVAL_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_EVAL_DECLARATION", ,, "\"eval\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, EVAL_ASSIGNMENT, =]
[;, static, final, DiagnosticType, EVAL_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_EVAL_DECLARATION", ,, "\"eval\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, EVAL_ASSIGNMENT, =]
[EVAL_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_EVAL_DECLARATION", ,, "\"eval\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, EVAL_ASSIGNMENT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_EVAL_DECLARATION", ,, "\"eval\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, EVAL_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_EVAL_ASSIGNMENT", ,]
[;, static, final, DiagnosticType, EVAL_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_EVAL_ASSIGNMENT", ,, "the \"eval\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_DECLARATION, =]
[;, static, final, DiagnosticType, EVAL_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_EVAL_ASSIGNMENT", ,, "the \"eval\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_DECLARATION, =]
[EVAL_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_EVAL_ASSIGNMENT", ,, "the \"eval\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_DECLARATION, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_EVAL_ASSIGNMENT", ,, "the \"eval\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_DECLARATION", ,]
[;, static, final, DiagnosticType, ARGUMENTS_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_DECLARATION", ,, "\"arguments\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_ASSIGNMENT, =]
[;, static, final, DiagnosticType, ARGUMENTS_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_DECLARATION", ,, "\"arguments\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_ASSIGNMENT, =]
[ARGUMENTS_DECLARATION, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_DECLARATION", ,, "\"arguments\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_ASSIGNMENT, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_ARGUMENTS_DECLARATION", ,, "\"arguments\" cannot be redeclared in ES5 strict mode", ), ;, static, final, DiagnosticType, ARGUMENTS_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_ASSIGNMENT", ,]
[;, static, final, DiagnosticType, ARGUMENTS_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_ASSIGNMENT", ,, "the \"arguments\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, DELETE_VARIABLE, =]
[;, static, final, DiagnosticType, ARGUMENTS_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_ASSIGNMENT", ,, "the \"arguments\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, DELETE_VARIABLE, =]
[ARGUMENTS_ASSIGNMENT, =, DiagnosticType, ., warning, (, "JSC_ARGUMENTS_ASSIGNMENT", ,, "the \"arguments\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, DELETE_VARIABLE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_ARGUMENTS_ASSIGNMENT", ,, "the \"arguments\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, DELETE_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_DELETE_VARIABLE", ,]
[DiagnosticType, ., warning, (, "JSC_ARGUMENTS_ASSIGNMENT", ,, "the \"arguments\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, DELETE_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_DELETE_VARIABLE", ,]
[warning, (, "JSC_ARGUMENTS_ASSIGNMENT", ,, "the \"arguments\" object cannot be reassigned in ES5 strict mode", ), ;, static, final, DiagnosticType, DELETE_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_DELETE_VARIABLE", ,, "variables, functions, and arguments cannot be deleted in ", +]
[final, DiagnosticType, DELETE_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_DELETE_VARIABLE", ,, "variables, functions, and arguments cannot be deleted in ", +, "ES5 strict mode", ), ;, static, final, DiagnosticType, ILLEGAL_NAME, =]
[final, DiagnosticType, DELETE_VARIABLE, =, DiagnosticType, ., warning, (, "JSC_DELETE_VARIABLE", ,, "variables, functions, and arguments cannot be deleted in ", +, "ES5 strict mode", ), ;, static, final, DiagnosticType, ILLEGAL_NAME, =]
[DiagnosticType, ., warning, (, "JSC_DELETE_VARIABLE", ,, "variables, functions, and arguments cannot be deleted in ", +, "ES5 strict mode", ), ;, static, final, DiagnosticType, ILLEGAL_NAME, =, DiagnosticType, ., error, (]
[warning, (, "JSC_DELETE_VARIABLE", ,, "variables, functions, and arguments cannot be deleted in ", +, "ES5 strict mode", ), ;, static, final, DiagnosticType, ILLEGAL_NAME, =, DiagnosticType, ., error, (, "JSC_ILLEGAL_NAME", ,]
[;, static, final, DiagnosticType, ILLEGAL_NAME, =, DiagnosticType, ., error, (, "JSC_ILLEGAL_NAME", ,, "identifiers ending in '__' cannot be used in Caja", ), ;, static, final, DiagnosticType, DUPLICATE_OBJECT_KEY, =]
[;, static, final, DiagnosticType, ILLEGAL_NAME, =, DiagnosticType, ., error, (, "JSC_ILLEGAL_NAME", ,, "identifiers ending in '__' cannot be used in Caja", ), ;, static, final, DiagnosticType, DUPLICATE_OBJECT_KEY, =]
[ILLEGAL_NAME, =, DiagnosticType, ., error, (, "JSC_ILLEGAL_NAME", ,, "identifiers ending in '__' cannot be used in Caja", ), ;, static, final, DiagnosticType, DUPLICATE_OBJECT_KEY, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., error, (, "JSC_ILLEGAL_NAME", ,, "identifiers ending in '__' cannot be used in Caja", ), ;, static, final, DiagnosticType, DUPLICATE_OBJECT_KEY, =, DiagnosticType, ., warning, (, "JSC_DUPLICATE_OBJECT_KEY", ,]
[;, static, final, DiagnosticType, DUPLICATE_OBJECT_KEY, =, DiagnosticType, ., warning, (, "JSC_DUPLICATE_OBJECT_KEY", ,, "object literals cannot contain duplicate keys in ES5 strict mode", ), ;, static, final, DiagnosticType, BAD_FUNCTION_DECLARATION, =]
[;, static, final, DiagnosticType, DUPLICATE_OBJECT_KEY, =, DiagnosticType, ., warning, (, "JSC_DUPLICATE_OBJECT_KEY", ,, "object literals cannot contain duplicate keys in ES5 strict mode", ), ;, static, final, DiagnosticType, BAD_FUNCTION_DECLARATION, =]
[DUPLICATE_OBJECT_KEY, =, DiagnosticType, ., warning, (, "JSC_DUPLICATE_OBJECT_KEY", ,, "object literals cannot contain duplicate keys in ES5 strict mode", ), ;, static, final, DiagnosticType, BAD_FUNCTION_DECLARATION, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "JSC_DUPLICATE_OBJECT_KEY", ,, "object literals cannot contain duplicate keys in ES5 strict mode", ), ;, static, final, DiagnosticType, BAD_FUNCTION_DECLARATION, =, DiagnosticType, ., error, (, "JSC_BAD_FUNCTION_DECLARATION", ,]
[DiagnosticType, ., warning, (, "JSC_DUPLICATE_OBJECT_KEY", ,, "object literals cannot contain duplicate keys in ES5 strict mode", ), ;, static, final, DiagnosticType, BAD_FUNCTION_DECLARATION, =, DiagnosticType, ., error, (, "JSC_BAD_FUNCTION_DECLARATION", ,]
[warning, (, "JSC_DUPLICATE_OBJECT_KEY", ,, "object literals cannot contain duplicate keys in ES5 strict mode", ), ;, static, final, DiagnosticType, BAD_FUNCTION_DECLARATION, =, DiagnosticType, ., error, (, "JSC_BAD_FUNCTION_DECLARATION", ,, "functions can only be declared at top level or immediately within ", +]
[compiler, ;, private, final, boolean, noVarCheck, ;, private, final, boolean, noCajaChecks, ;, StrictModeCheck, (, AbstractCompiler, compiler, ), {, this, (]
[private, final, boolean, noVarCheck, ;, private, final, boolean, noCajaChecks, ;, StrictModeCheck, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[boolean, noVarCheck, ;, private, final, boolean, noCajaChecks, ;, StrictModeCheck, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, false, ,]
[compiler, ,, false, ,, false, ), ;, }, StrictModeCheck, (, AbstractCompiler, compiler, ,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {]
[compiler, ,, false, ,, false, ), ;, }, StrictModeCheck, (, AbstractCompiler, compiler, ,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {]
[false, ), ;, }, StrictModeCheck, (, AbstractCompiler, compiler, ,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {, this, ., compiler, =]
[;, }, StrictModeCheck, (, AbstractCompiler, compiler, ,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {, this, ., compiler, =, compiler, ;]
[;, }, StrictModeCheck, (, AbstractCompiler, compiler, ,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {, this, ., compiler, =, compiler, ;, this, ., noVarCheck, =]
[,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {, this, ., compiler, =, compiler, ;, this, ., noVarCheck, =, noVarCheck, ;]
[,, boolean, noVarCheck, ,, boolean, noCajaChecks, ), {, this, ., compiler, =, compiler, ;, this, ., noVarCheck, =, noVarCheck, ;]
[boolean, noCajaChecks, ), {, this, ., compiler, =, compiler, ;, this, ., noVarCheck, =, noVarCheck, ;, this, ., noCajaChecks, =]
[this, ., noCajaChecks, =, noCajaChecks, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., noCajaChecks, =, noCajaChecks, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[noCajaChecks, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,]
[void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (]
[(, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,]
[,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,]
[), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;]
[), {, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;]
[traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, NodeTraversal, ., traverse, (]
[compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, checkFunctionUse, (]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isFunction, (, ), ), {, checkFunctionUse, (, t, ,]
[if, (, n, ., isFunction, (, ), ), {, checkFunctionUse, (, t, ,, n, ), ;, }, else, if, (]
[if, (, n, ., isFunction, (, ), ), {, checkFunctionUse, (, t, ,, n, ), ;, }, else, if, (]
[checkFunctionUse, (, t, ,, n, ), ;, }, else, if, (, n, ., isName, (, ), ), {, if, (]
[(, t, ,, n, ), ;, }, else, if, (, n, ., isName, (, ), ), {, if, (, !]
[,, n, ), ;, }, else, if, (, n, ., isName, (, ), ), {, if, (, !, isDeclaration, (]
[}, else, if, (, n, ., isName, (, ), ), {, if, (, !, isDeclaration, (, n, ), ), {]
[if, (, n, ., isName, (, ), ), {, if, (, !, isDeclaration, (, n, ), ), {, checkNameUse, (]
[n, ., isName, (, ), ), {, if, (, !, isDeclaration, (, n, ), ), {, checkNameUse, (, t, ,]
[(, !, isDeclaration, (, n, ), ), {, checkNameUse, (, t, ,, n, ), ;, }, }, else, if, (]
[(, !, isDeclaration, (, n, ), ), {, checkNameUse, (, t, ,, n, ), ;, }, }, else, if, (]
[{, checkNameUse, (, t, ,, n, ), ;, }, }, else, if, (, n, ., isAssign, (, ), ), {]
[(, t, ,, n, ), ;, }, }, else, if, (, n, ., isAssign, (, ), ), {, checkAssignment, (]
[,, n, ), ;, }, }, else, if, (, n, ., isAssign, (, ), ), {, checkAssignment, (, t, ,]
[if, (, n, ., isAssign, (, ), ), {, checkAssignment, (, t, ,, n, ), ;, }, else, if, (]
[if, (, n, ., isAssign, (, ), ), {, checkAssignment, (, t, ,, n, ), ;, }, else, if, (]
[), {, checkAssignment, (, t, ,, n, ), ;, }, else, if, (, n, ., isDelProp, (, ), ), {]
[checkAssignment, (, t, ,, n, ), ;, }, else, if, (, n, ., isDelProp, (, ), ), {, checkDelete, (]
[t, ,, n, ), ;, }, else, if, (, n, ., isDelProp, (, ), ), {, checkDelete, (, t, ,]
[if, (, n, ., isDelProp, (, ), ), {, checkDelete, (, t, ,, n, ), ;, }, else, if, (]
[if, (, n, ., isDelProp, (, ), ), {, checkDelete, (, t, ,, n, ), ;, }, else, if, (]
[), {, checkDelete, (, t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {]
[checkDelete, (, t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, checkObjectLiteral, (]
[t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, checkObjectLiteral, (, t, ,]
[if, (, n, ., isObjectLit, (, ), ), {, checkObjectLiteral, (, t, ,, n, ), ;, }, else, if, (]
[if, (, n, ., isObjectLit, (, ), ), {, checkObjectLiteral, (, t, ,, n, ), ;, }, else, if, (]
[), {, checkObjectLiteral, (, t, ,, n, ), ;, }, else, if, (, n, ., isLabel, (, ), ), {]
[checkObjectLiteral, (, t, ,, n, ), ;, }, else, if, (, n, ., isLabel, (, ), ), {, checkLabel, (]
[t, ,, n, ), ;, }, else, if, (, n, ., isLabel, (, ), ), {, checkLabel, (, t, ,]
[t, ,, n, ), ;, }, }, private, void, checkFunctionUse, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[t, ,, n, ), ;, }, }, private, void, checkFunctionUse, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[t, ,, n, ), ;, }, }, private, void, checkFunctionUse, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[;, }, }, private, void, checkFunctionUse, (, NodeTraversal, t, ,, Node, n, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (]
[private, void, checkFunctionUse, (, NodeTraversal, t, ,, Node, n, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), &&]
[void, checkFunctionUse, (, NodeTraversal, t, ,, Node, n, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), &&, !]
[void, checkFunctionUse, (, NodeTraversal, t, ,, Node, n, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), &&, !]
[t, ,, Node, n, ), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (]
[), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {]
[), {, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {]
[NodeUtil, ., isFunctionDeclaration, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, t, ., report, (]
[isFunctionDeclaration, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, t, ., report, (, n, ,]
[report, (, n, ,, BAD_FUNCTION_DECLARATION, ), ;, }, }, private, static, boolean, isDeclaration, (, Node, n, ), {, switch, (]
[report, (, n, ,, BAD_FUNCTION_DECLARATION, ), ;, }, }, private, static, boolean, isDeclaration, (, Node, n, ), {, switch, (]
[report, (, n, ,, BAD_FUNCTION_DECLARATION, ), ;, }, }, private, static, boolean, isDeclaration, (, Node, n, ), {, switch, (]
[isDeclaration, (, Node, n, ), {, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case]
[isDeclaration, (, Node, n, ), {, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case]
[{, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case]
[{, switch, (, n, ., getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case]
[getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case]
[getParent, (, ), ., getType, (, ), ), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case]
[(, ), ), {, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., CATCH, :, return]
[{, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., CATCH, :, return, true, ;, case]
[{, case, Token, ., VAR, :, case, Token, ., FUNCTION, :, case, Token, ., CATCH, :, return, true, ;, case]
[:, case, Token, ., FUNCTION, :, case, Token, ., CATCH, :, return, true, ;, case, Token, ., PARAM_LIST, :, return]
[:, case, Token, ., FUNCTION, :, case, Token, ., CATCH, :, return, true, ;, case, Token, ., PARAM_LIST, :, return]
[:, case, Token, ., FUNCTION, :, case, Token, ., CATCH, :, return, true, ;, case, Token, ., PARAM_LIST, :, return]
[:, case, Token, ., FUNCTION, :, case, Token, ., CATCH, :, return, true, ;, case, Token, ., PARAM_LIST, :, return]
[PARAM_LIST, :, return, n, ., getParent, (, ), ., getParent, (, ), ., isFunction, (, ), ;, default, :, return]
[:, return, false, ;, }, }, private, void, checkNameUse, (, NodeTraversal, t, ,, Node, n, ), {, Var, v, =]
[:, return, false, ;, }, }, private, void, checkNameUse, (, NodeTraversal, t, ,, Node, n, ), {, Var, v, =]
[:, return, false, ;, }, }, private, void, checkNameUse, (, NodeTraversal, t, ,, Node, n, ), {, Var, v, =]
[checkNameUse, (, NodeTraversal, t, ,, Node, n, ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (]
[checkNameUse, (, NodeTraversal, t, ,, Node, n, ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (]
[Var, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[Var, v, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (]
[=, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, v, ==]
[), ., getVar, (, n, ., getString, (, ), ), ;, if, (, v, ==, null, ), {, if, (]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, v, ==, null, ), {, if, (, !]
[n, ., getString, (, ), ), ;, if, (, v, ==, null, ), {, if, (, !, noVarCheck, ), {]
[n, ., getString, (, ), ), ;, if, (, v, ==, null, ), {, if, (, !, noVarCheck, ), {]
[), ), ;, if, (, v, ==, null, ), {, if, (, !, noVarCheck, ), {, t, ., report, (]
[;, if, (, v, ==, null, ), {, if, (, !, noVarCheck, ), {, t, ., report, (, n, ,]
[(, v, ==, null, ), {, if, (, !, noVarCheck, ), {, t, ., report, (, n, ,, UNKNOWN_VARIABLE, ,]
[(, v, ==, null, ), {, if, (, !, noVarCheck, ), {, t, ., report, (, n, ,, UNKNOWN_VARIABLE, ,]
[{, t, ., report, (, n, ,, UNKNOWN_VARIABLE, ,, n, ., getString, (, ), ), ;, }, }, if, (]
[t, ., report, (, n, ,, UNKNOWN_VARIABLE, ,, n, ., getString, (, ), ), ;, }, }, if, (, !]
[,, UNKNOWN_VARIABLE, ,, n, ., getString, (, ), ), ;, }, }, if, (, !, noCajaChecks, ), {, if, (]
[,, UNKNOWN_VARIABLE, ,, n, ., getString, (, ), ), ;, }, }, if, (, !, noCajaChecks, ), {, if, (]
[., getString, (, ), ), ;, }, }, if, (, !, noCajaChecks, ), {, if, (, "eval", ., equals, (]
[., getString, (, ), ), ;, }, }, if, (, !, noCajaChecks, ), {, if, (, "eval", ., equals, (]
[if, (, !, noCajaChecks, ), {, if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {]
[if, (, !, noCajaChecks, ), {, if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {]
[), {, if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {, t, ., report, (]
[if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {, t, ., report, (, n, ,]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, EVAL_USE, ), ;, }, else, if, (]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, EVAL_USE, ), ;, }, else, if, (]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, EVAL_USE, ), ;, }, else, if, (]
[., report, (, n, ,, EVAL_USE, ), ;, }, else, if, (, n, ., getString, (, ), ., endsWith, (]
[,, EVAL_USE, ), ;, }, else, if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {]
[,, EVAL_USE, ), ;, }, else, if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {]
[}, else, if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {, t, ., report, (]
[if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {, t, ., report, (, n, ,]
[,, ILLEGAL_NAME, ), ;, }, }, }, private, void, checkAssignment, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[,, ILLEGAL_NAME, ), ;, }, }, }, private, void, checkAssignment, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[,, ILLEGAL_NAME, ), ;, }, }, }, private, void, checkAssignment, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[,, Node, n, ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (]
[,, Node, n, ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (]
[{, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (, "arguments", ., equals, (]
[{, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (, "arguments", ., equals, (]
[{, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, if, (, "arguments", ., equals, (]
[), {, if, (, "arguments", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {]
[), {, if, (, "arguments", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {]
["arguments", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, t, ., report, (]
[equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, t, ., report, (, n, ,]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, ARGUMENTS_ASSIGNMENT, ), ;, }, else, if, (]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, ARGUMENTS_ASSIGNMENT, ), ;, }, else, if, (]
[), ), {, t, ., report, (, n, ,, ARGUMENTS_ASSIGNMENT, ), ;, }, else, if, (, "eval", ., equals, (]
[), ), {, t, ., report, (, n, ,, ARGUMENTS_ASSIGNMENT, ), ;, }, else, if, (, "eval", ., equals, (]
[), ), {, t, ., report, (, n, ,, ARGUMENTS_ASSIGNMENT, ), ;, }, else, if, (, "eval", ., equals, (]
[if, (, "eval", ., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, if, (]
[., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, if, (, noCajaChecks, ), {]
[., equals, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ), {, if, (, noCajaChecks, ), {]
[., getFirstChild, (, ), ., getString, (, ), ), ), {, if, (, noCajaChecks, ), {, t, ., report, (]
[(, ), ., getString, (, ), ), ), {, if, (, noCajaChecks, ), {, t, ., report, (, n, ,]
[EVAL_ASSIGNMENT, ), ;, }, }, }, }, private, void, checkDelete, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[EVAL_ASSIGNMENT, ), ;, }, }, }, }, private, void, checkDelete, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[EVAL_ASSIGNMENT, ), ;, }, }, }, }, private, void, checkDelete, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[Node, n, ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Var, v, =]
[Node, n, ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Var, v, =]
[Node, n, ), {, if, (, n, ., getFirstChild, (, ), ., isName, (, ), ), {, Var, v, =]
[getFirstChild, (, ), ., isName, (, ), ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (]
[getFirstChild, (, ), ., isName, (, ), ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (]
[getFirstChild, (, ), ., isName, (, ), ), {, Var, v, =, t, ., getScope, (, ), ., getVar, (]
[., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (]
[., getScope, (, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (]
[(, ), ., getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, v, !=]
[getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, v, !=, null, ), {]
[getVar, (, n, ., getFirstChild, (, ), ., getString, (, ), ), ;, if, (, v, !=, null, ), {]
[getFirstChild, (, ), ., getString, (, ), ), ;, if, (, v, !=, null, ), {, t, ., report, (]
[), ., getString, (, ), ), ;, if, (, v, !=, null, ), {, t, ., report, (, n, ,]
[}, }, }, private, void, checkObjectLiteral, (, NodeTraversal, t, ,, Node, n, ), {, Set, <, String, >, getters, =]
[}, }, }, private, void, checkObjectLiteral, (, NodeTraversal, t, ,, Node, n, ), {, Set, <, String, >, getters, =]
[), {, Set, <, String, >, getters, =, Sets, ., newHashSet, (, ), ;, Set, <, String, >, setters, =]
[), {, Set, <, String, >, getters, =, Sets, ., newHashSet, (, ), ;, Set, <, String, >, setters, =]
[(, ), ;, Set, <, String, >, setters, =, Sets, ., newHashSet, (, ), ;, for, (, Node, key, =]
[(, ), ;, Set, <, String, >, setters, =, Sets, ., newHashSet, (, ), ;, for, (, Node, key, =]
[>, setters, =, Sets, ., newHashSet, (, ), ;, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[>, setters, =, Sets, ., newHashSet, (, ), ;, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[=, Sets, ., newHashSet, (, ), ;, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=]
[., newHashSet, (, ), ;, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;]
[(, ), ;, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[(, ), ;, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !]
[), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, noCajaChecks, &&]
[), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, noCajaChecks, &&]
[), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, noCajaChecks, &&]
[key, ., getNext, (, ), ), {, if, (, !, noCajaChecks, &&, key, ., getString, (, ), ., endsWith, (]
[), ), {, if, (, !, noCajaChecks, &&, key, ., getString, (, ), ., endsWith, (, "__", ), ), {]
[), ), {, if, (, !, noCajaChecks, &&, key, ., getString, (, ), ., endsWith, (, "__", ), ), {]
[(, !, noCajaChecks, &&, key, ., getString, (, ), ., endsWith, (, "__", ), ), {, t, ., report, (]
[noCajaChecks, &&, key, ., getString, (, ), ., endsWith, (, "__", ), ), {, t, ., report, (, key, ,]
[), ., endsWith, (, "__", ), ), {, t, ., report, (, key, ,, ILLEGAL_NAME, ), ;, }, if, (]
[., endsWith, (, "__", ), ), {, t, ., report, (, key, ,, ILLEGAL_NAME, ), ;, }, if, (, !]
[., endsWith, (, "__", ), ), {, t, ., report, (, key, ,, ILLEGAL_NAME, ), ;, }, if, (, !]
[report, (, key, ,, ILLEGAL_NAME, ), ;, }, if, (, !, key, ., isSetterDef, (, ), ), {, if, (]
[report, (, key, ,, ILLEGAL_NAME, ), ;, }, if, (, !, key, ., isSetterDef, (, ), ), {, if, (]
[ILLEGAL_NAME, ), ;, }, if, (, !, key, ., isSetterDef, (, ), ), {, if, (, getters, ., contains, (]
[ILLEGAL_NAME, ), ;, }, if, (, !, key, ., isSetterDef, (, ), ), {, if, (, getters, ., contains, (]
[., isSetterDef, (, ), ), {, if, (, getters, ., contains, (, key, ., getString, (, ), ), ), {]
[., isSetterDef, (, ), ), {, if, (, getters, ., contains, (, key, ., getString, (, ), ), ), {]
[), {, if, (, getters, ., contains, (, key, ., getString, (, ), ), ), {, t, ., report, (]
[if, (, getters, ., contains, (, key, ., getString, (, ), ), ), {, t, ., report, (, key, ,]
[key, ., getString, (, ), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {]
[key, ., getString, (, ), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {]
[), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {, getters, ., add, (]
[), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {, getters, ., add, (]
[), ;, }, else, {, getters, ., add, (, key, ., getString, (, ), ), ;, }, }, if, (]
[;, }, else, {, getters, ., add, (, key, ., getString, (, ), ), ;, }, }, if, (, !]
[;, }, else, {, getters, ., add, (, key, ., getString, (, ), ), ;, }, }, if, (, !]
[., getString, (, ), ), ;, }, }, if, (, !, key, ., isGetterDef, (, ), ), {, if, (]
[., getString, (, ), ), ;, }, }, if, (, !, key, ., isGetterDef, (, ), ), {, if, (]
[), ;, }, }, if, (, !, key, ., isGetterDef, (, ), ), {, if, (, setters, ., contains, (]
[), ;, }, }, if, (, !, key, ., isGetterDef, (, ), ), {, if, (, setters, ., contains, (]
[., isGetterDef, (, ), ), {, if, (, setters, ., contains, (, key, ., getString, (, ), ), ), {]
[., isGetterDef, (, ), ), {, if, (, setters, ., contains, (, key, ., getString, (, ), ), ), {]
[), {, if, (, setters, ., contains, (, key, ., getString, (, ), ), ), {, t, ., report, (]
[if, (, setters, ., contains, (, key, ., getString, (, ), ), ), {, t, ., report, (, key, ,]
[key, ., getString, (, ), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {]
[key, ., getString, (, ), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {]
[), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {, setters, ., add, (]
[), ), ), {, t, ., report, (, key, ,, DUPLICATE_OBJECT_KEY, ), ;, }, else, {, setters, ., add, (]
[), ), ;, }, }, }, }, private, void, checkLabel, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[), ), ;, }, }, }, }, private, void, checkLabel, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[), ), ;, }, }, }, }, private, void, checkLabel, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[), ), ;, }, }, }, }, private, void, checkLabel, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[t, ,, Node, n, ), {, if, (, n, ., getFirstChild, (, ), ., getString, (, ), ., endsWith, (]
[if, (, n, ., getFirstChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (]
[(, n, ., getFirstChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !]
[getFirstChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {]
[getFirstChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {]
[getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (]
[getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (]
["__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (, n, ., getFirstChild, (, ), ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, (, n, ., isName, (, ), ), &&]
[,, Node, n, ,, Node, parent, ), {, if, (, (, n, ., isName, (, ), ), &&, isDeclaration, (]
[Node, parent, ), {, if, (, (, n, ., isName, (, ), ), &&, isDeclaration, (, n, ), ), {]
[), {, if, (, (, n, ., isName, (, ), ), &&, isDeclaration, (, n, ), ), {, checkDeclaration, (]
[if, (, (, n, ., isName, (, ), ), &&, isDeclaration, (, n, ), ), {, checkDeclaration, (, t, ,]
[), ), &&, isDeclaration, (, n, ), ), {, checkDeclaration, (, t, ,, n, ), ;, }, else, if, (]
[), ), &&, isDeclaration, (, n, ), ), {, checkDeclaration, (, t, ,, n, ), ;, }, else, if, (]
[), {, checkDeclaration, (, t, ,, n, ), ;, }, else, if, (, n, ., isGetProp, (, ), ), {]
[checkDeclaration, (, t, ,, n, ), ;, }, else, if, (, n, ., isGetProp, (, ), ), {, checkProperty, (]
[t, ,, n, ), ;, }, else, if, (, n, ., isGetProp, (, ), ), {, checkProperty, (, t, ,]
[t, ,, n, ), ;, }, }, private, void, checkDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[t, ,, n, ), ;, }, }, private, void, checkDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[;, }, }, private, void, checkDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, if, (, "eval", ., equals, (]
[;, }, }, private, void, checkDeclaration, (, NodeTraversal, t, ,, Node, n, ), {, if, (, "eval", ., equals, (]
[t, ,, Node, n, ), {, if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {]
[t, ,, Node, n, ), {, if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {]
[), {, if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {, t, ., report, (]
[if, (, "eval", ., equals, (, n, ., getString, (, ), ), ), {, t, ., report, (, n, ,]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, EVAL_DECLARATION, ), ;, }, else, if, (]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, EVAL_DECLARATION, ), ;, }, else, if, (]
[), ), {, t, ., report, (, n, ,, EVAL_DECLARATION, ), ;, }, else, if, (, "arguments", ., equals, (]
[), ), {, t, ., report, (, n, ,, EVAL_DECLARATION, ), ;, }, else, if, (, "arguments", ., equals, (]
[,, EVAL_DECLARATION, ), ;, }, else, if, (, "arguments", ., equals, (, n, ., getString, (, ), ), ), {]
[,, EVAL_DECLARATION, ), ;, }, else, if, (, "arguments", ., equals, (, n, ., getString, (, ), ), ), {]
[}, else, if, (, "arguments", ., equals, (, n, ., getString, (, ), ), ), {, t, ., report, (]
[if, (, "arguments", ., equals, (, n, ., getString, (, ), ), ), {, t, ., report, (, n, ,]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, ARGUMENTS_DECLARATION, ), ;, }, else, if, (]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, ARGUMENTS_DECLARATION, ), ;, }, else, if, (]
[., getString, (, ), ), ), {, t, ., report, (, n, ,, ARGUMENTS_DECLARATION, ), ;, }, else, if, (]
[., report, (, n, ,, ARGUMENTS_DECLARATION, ), ;, }, else, if, (, n, ., getString, (, ), ., endsWith, (]
[), ;, }, else, if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (]
[;, }, else, if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !]
[if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {]
[if, (, n, ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {]
[getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (]
[), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (, n, ,]
[,, ILLEGAL_NAME, ), ;, }, }, }, private, void, checkProperty, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[,, ILLEGAL_NAME, ), ;, }, }, }, private, void, checkProperty, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[,, ILLEGAL_NAME, ), ;, }, }, }, private, void, checkProperty, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[,, ILLEGAL_NAME, ), ;, }, }, }, private, void, checkProperty, (, NodeTraversal, t, ,, Node, n, ), {, if, (]
[t, ,, Node, n, ), {, if, (, n, ., getLastChild, (, ), ., getString, (, ), ., endsWith, (]
[if, (, n, ., getLastChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (]
[(, n, ., getLastChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !]
[getLastChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {]
[getLastChild, (, ), ., getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {]
[getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (]
[getString, (, ), ., endsWith, (, "__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (]
["__", ), ), {, if, (, !, noCajaChecks, ), {, t, ., report, (, n, ., getLastChild, (, ), ,]
