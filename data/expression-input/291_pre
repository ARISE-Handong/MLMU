[;, class, OptimizeReturns, implements, OptimizeCalls, ., CallGraphCompilerPass, ,, CompilerPass, {, private, AbstractCompiler, compiler, ;, OptimizeReturns, (, AbstractCompiler, compiler, ), {]
[;, class, OptimizeReturns, implements, OptimizeCalls, ., CallGraphCompilerPass, ,, CompilerPass, {, private, AbstractCompiler, compiler, ;, OptimizeReturns, (, AbstractCompiler, compiler, ), {]
[OptimizeCalls, ., CallGraphCompilerPass, ,, CompilerPass, {, private, AbstractCompiler, compiler, ;, OptimizeReturns, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[;, }, @, Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =]
[Override, @, VisibleForTesting, public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[Node, externs, ,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[,, Node, root, ), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,]
[), {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;]
[SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (]
[=, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,]
[SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externs, ,, root, ), ;, process, (, externs, ,, root, ,]
[public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, List, <, Node, >, toOptimize, =]
[public, void, process, (, Node, externs, ,, Node, root, ,, SimpleDefinitionFinder, definitions, ), {, List, <, Node, >, toOptimize, =]
[definitions, ), {, List, <, Node, >, toOptimize, =, Lists, ., newArrayList, (, ), ;, for, (, DefinitionSite, defSite, :]
[definitions, ), {, List, <, Node, >, toOptimize, =, Lists, ., newArrayList, (, ), ;, for, (, DefinitionSite, defSite, :]
[Lists, ., newArrayList, (, ), ;, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (]
[Lists, ., newArrayList, (, ), ;, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (]
[., newArrayList, (, ), ;, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, !]
[., newArrayList, (, ), ;, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, !]
[;, for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, !, defSite, ., inExterns, &&]
[for, (, DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, !, defSite, ., inExterns, &&, !]
[DefinitionSite, defSite, :, definitions, ., getDefinitionSites, (, ), ), {, if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (]
[:, definitions, ., getDefinitionSites, (, ), ), {, if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,]
[(, ), ), {, if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {]
[(, ), ), {, if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {]
[if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {, toOptimize, ., add, (]
[if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {, toOptimize, ., add, (]
[if, (, !, defSite, ., inExterns, &&, !, callResultsMaybeUsed, (, definitions, ,, defSite, ), ), {, toOptimize, ., add, (]
[toOptimize, ., add, (, defSite, ., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node, node, :]
[(, defSite, ., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node, node, :, toOptimize, ), {]
[., definition, ., getRValue, (, ), ), ;, }, }, for, (, Node, node, :, toOptimize, ), {, rewriteReturns, (]
[., getRValue, (, ), ), ;, }, }, for, (, Node, node, :, toOptimize, ), {, rewriteReturns, (, definitions, ,]
[,, node, ), ;, }, }, private, boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =]
[,, node, ), ;, }, }, private, boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =]
[boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, ., definition, ;, Node, rValue, =]
[boolean, callResultsMaybeUsed, (, SimpleDefinitionFinder, defFinder, ,, DefinitionSite, definitionSite, ), {, Definition, definition, =, definitionSite, ., definition, ;, Node, rValue, =]
[), {, Definition, definition, =, definitionSite, ., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[), {, Definition, definition, =, definitionSite, ., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[), {, Definition, definition, =, definitionSite, ., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[Definition, definition, =, definitionSite, ., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==]
[=, definitionSite, ., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||]
[definitionSite, ., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !]
[definitionSite, ., definition, ;, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !]
[., getRValue, (, ), ;, if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ), {, return]
[if, (, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if, (]
[(, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if, (, !]
[(, rValue, ==, null, ||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if, (, !]
[||, !, rValue, ., isFunction, (, ), ), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (]
[(, ), ), {, return, true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return]
[true, ;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;, }, if, (]
[;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;, }, if, (, !]
[;, }, if, (, !, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;, }, if, (, !]
[!, SimpleDefinitionFinder, ., isSimpleFunctionDeclaration, (, rValue, ), ), {, return, true, ;, }, if, (, !, defFinder, ., canModifyDefinition, (]
[rValue, ), ), {, return, true, ;, }, if, (, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return]
[(, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, true, ;, }, Collection, <, UseSite, >, useSites, =]
[(, !, defFinder, ., canModifyDefinition, (, definition, ), ), {, return, true, ;, }, Collection, <, UseSite, >, useSites, =]
[canModifyDefinition, (, definition, ), ), {, return, true, ;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (]
[;, }, Collection, <, UseSite, >, useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, useNodeParent, =]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, useNodeParent, =]
[useSites, =, defFinder, ., getUseSites, (, definition, ), ;, for, (, UseSite, site, :, useSites, ), {, Node, useNodeParent, =]
[(, UseSite, site, :, useSites, ), {, Node, useNodeParent, =, site, ., node, ., getParent, (, ), ;, if, (]
[site, :, useSites, ), {, Node, useNodeParent, =, site, ., node, ., getParent, (, ), ;, if, (, isCall, (]
[=, site, ., node, ., getParent, (, ), ;, if, (, isCall, (, site, ), ), {, Node, callNode, =]
[., node, ., getParent, (, ), ;, if, (, isCall, (, site, ), ), {, Node, callNode, =, useNodeParent, ;]
[., node, ., getParent, (, ), ;, if, (, isCall, (, site, ), ), {, Node, callNode, =, useNodeParent, ;]
[(, ), ;, if, (, isCall, (, site, ), ), {, Node, callNode, =, useNodeParent, ;, Preconditions, ., checkState, (]
[(, ), ;, if, (, isCall, (, site, ), ), {, Node, callNode, =, useNodeParent, ;, Preconditions, ., checkState, (]
[), {, Node, callNode, =, useNodeParent, ;, Preconditions, ., checkState, (, callNode, ., isCall, (, ), ), ;, if, (]
[), {, Node, callNode, =, useNodeParent, ;, Preconditions, ., checkState, (, callNode, ., isCall, (, ), ), ;, if, (]
[=, useNodeParent, ;, Preconditions, ., checkState, (, callNode, ., isCall, (, ), ), ;, if, (, NodeUtil, ., isExpressionResultUsed, (]
[checkState, (, callNode, ., isCall, (, ), ), ;, if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {, return]
[;, if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {, return, true, ;, }, }, else, {, if, (]
[if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {, return, true, ;, }, }, else, {, if, (, !]
[if, (, NodeUtil, ., isExpressionResultUsed, (, callNode, ), ), {, return, true, ;, }, }, else, {, if, (, !]
[), {, return, true, ;, }, }, else, {, if, (, !, useNodeParent, ., isVar, (, ), ), {, return]
[}, else, {, if, (, !, useNodeParent, ., isVar, (, ), ), {, return, true, ;, }, }, }, return]
[;, }, }, }, return, false, ;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {]
[;, }, }, }, return, false, ;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {]
[return, false, ;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {, Preconditions, ., checkState, (]
[return, false, ;, }, private, void, rewriteReturns, (, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {, Preconditions, ., checkState, (]
[(, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {, Preconditions, ., checkState, (, fnNode, ., isFunction, (, ), ), ;]
[(, final, SimpleDefinitionFinder, defFinder, ,, Node, fnNode, ), {, Preconditions, ., checkState, (, fnNode, ., isFunction, (, ), ), ;]
[,, Node, fnNode, ), {, Preconditions, ., checkState, (, fnNode, ., isFunction, (, ), ), ;, NodeUtil, ., visitPostOrder, (]
[,, Node, fnNode, ), {, Preconditions, ., checkState, (, fnNode, ., isFunction, (, ), ), ;, NodeUtil, ., visitPostOrder, (]
[., checkState, (, fnNode, ., isFunction, (, ), ), ;, NodeUtil, ., visitPostOrder, (, fnNode, ., getLastChild, (, ), ,]
[,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (]
[,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (]
[,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (]
[), {, @, Override, public, void, visit, (, Node, node, ), {, if, (, node, ., isReturn, (, ), &&]
[), {, @, Override, public, void, visit, (, Node, node, ), {, if, (, node, ., isReturn, (, ), &&]
[), {, if, (, node, ., isReturn, (, ), &&, node, ., hasOneChild, (, ), ), {, boolean, keepValue, =]
[), {, if, (, node, ., isReturn, (, ), &&, node, ., hasOneChild, (, ), ), {, boolean, keepValue, =]
[node, ., isReturn, (, ), &&, node, ., hasOneChild, (, ), ), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (]
[node, ., isReturn, (, ), &&, node, ., hasOneChild, (, ), ), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (]
[node, ., hasOneChild, (, ), ), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,]
[), {, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (]
[{, boolean, keepValue, =, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (, !]
[=, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (, !, keepValue, ), {]
[=, NodeUtil, ., mayHaveSideEffects, (, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (, !, keepValue, ), {]
[(, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (, !, keepValue, ), {, defFinder, ., removeReferences, (]
[(, node, ., getFirstChild, (, ), ,, compiler, ), ;, if, (, !, keepValue, ), {, defFinder, ., removeReferences, (]
[(, !, keepValue, ), {, defFinder, ., removeReferences, (, node, ., getFirstChild, (, ), ), ;, }, Node, result, =]
[(, !, keepValue, ), {, defFinder, ., removeReferences, (, node, ., getFirstChild, (, ), ), ;, }, Node, result, =]
[(, node, ., getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild, (, ), ;, if, (]
[getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {]
[getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {]
[getFirstChild, (, ), ), ;, }, Node, result, =, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {]
[=, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {, node, ., getParent, (, ), ., addChildBefore, (]
[=, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {, node, ., getParent, (, ), ., addChildBefore, (]
[=, node, ., removeFirstChild, (, ), ;, if, (, keepValue, ), {, node, ., getParent, (, ), ., addChildBefore, (]
[(, ), ;, if, (, keepValue, ), {, node, ., getParent, (, ), ., addChildBefore, (, IR, ., exprResult, (]
[keepValue, ), {, node, ., getParent, (, ), ., addChildBefore, (, IR, ., exprResult, (, result, ), ., srcref, (]
[node, ., getParent, (, ), ., addChildBefore, (, IR, ., exprResult, (, result, ), ., srcref, (, result, ), ,]
[), ., addChildBefore, (, IR, ., exprResult, (, result, ), ., srcref, (, result, ), ,, node, ), ;, }]
[), ., addChildBefore, (, IR, ., exprResult, (, result, ), ., srcref, (, result, ), ,, node, ), ;, }]
[., srcref, (, result, ), ,, node, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, ,]
[NodeUtil, ., MatchShallowStatement, (, ), ), ;, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =]
[NodeUtil, ., MatchShallowStatement, (, ), ), ;, }, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =]
[}, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;, Node, parent, =]
[}, private, static, boolean, isCall, (, UseSite, site, ), {, Node, node, =, site, ., node, ;, Node, parent, =]
[site, ), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return]
[site, ), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return]
[), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (]
[), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (]
[), {, Node, node, =, site, ., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (]
[., node, ;, Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==]
[Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&]
[Node, parent, =, node, ., getParent, (, ), ;, return, (, parent, ., getFirstChild, (, ), ==, node, ), &&]
