[., Token, ;, class, ObjectPropertyStringPostprocess, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, ObjectPropertyStringPostprocess, (, AbstractCompiler, compiler, ), {]
[., Token, ;, class, ObjectPropertyStringPostprocess, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, ObjectPropertyStringPostprocess, (, AbstractCompiler, compiler, ), {]
[ObjectPropertyStringPostprocess, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, public, ObjectPropertyStringPostprocess, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[Node, parent, ), {, if, (, !, n, ., isNew, (, ), ), {, return, ;, }, Node, objectName, =]
[Node, parent, ), {, if, (, !, n, ., isNew, (, ), ), {, return, ;, }, Node, objectName, =]
[., isNew, (, ), ), {, return, ;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (]
[isNew, (, ), ), {, return, ;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (, !]
[isNew, (, ), ), {, return, ;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (, !]
[isNew, (, ), ), {, return, ;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (, !]
[;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (, !, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ., equals, (]
[;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (, !, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ., equals, (]
[ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ., equals, (, objectName, ., getQualifiedName, (, ), ), ), {, return, ;, }, Node, firstArgument, =]
[ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ., equals, (, objectName, ., getQualifiedName, (, ), ), ), {, return, ;, }, Node, firstArgument, =]
[(, ), ), ), {, return, ;, }, Node, firstArgument, =, objectName, ., getNext, (, ), ;, Node, secondArgument, =]
[(, ), ), ), {, return, ;, }, Node, firstArgument, =, objectName, ., getNext, (, ), ;, Node, secondArgument, =]
[firstArgument, =, objectName, ., getNext, (, ), ;, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =]
[firstArgument, =, objectName, ., getNext, (, ), ;, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =]
[Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (]
[Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (]
[=, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (, secondArgumentType, ==]
[=, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (, secondArgumentType, ==]
[secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (, secondArgumentType, ==, Token, ., GETPROP, ), {, Node, newChild, =]
[secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (, secondArgumentType, ==, Token, ., GETPROP, ), {, Node, newChild, =]
[), ;, if, (, secondArgumentType, ==, Token, ., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;]
[), ;, if, (, secondArgumentType, ==, Token, ., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;]
[secondArgumentType, ==, Token, ., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (]
[., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;]
[., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;]
[Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;, n, ., replaceChild, (]
[=, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,]
[getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;]
[getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;]
[secondArgument, ., removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (]
[removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,]
[removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,]
[;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (]
[;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (]
[;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (]
[IR, ., string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, ), ), ), ;, }, else, if, (]
[IR, ., string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, ), ), ), ;, }, else, if, (]
[string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, ), ), ), ;, }, else, if, (, secondArgumentType, ==]
[string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, ), ), ), ;, }, else, if, (, secondArgumentType, ==]
[getString, (, ), ), ), ;, }, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =]
[getString, (, ), ), ), ;, }, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =]
[}, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;]
[}, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;]
[secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (]
[{, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =]
[{, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =]
[getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;]
[getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;]
[secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (]
[(, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;]
[(, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;]
[Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (]
[=, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,]
[getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;]
[getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;]
[secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (]
[removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,]
[., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {]
[., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {]
[,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (]
[), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,]
[), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,]
[replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (]
[replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (]
[{, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getString, (, ), ), ), ;, }]
[{, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getString, (, ), ), ), ;, }]
