[;, private, List, subplots, ;, private, double, gap, ;, private, transient, Rectangle2D, [, ], subplotAreas, ;, public, CombinedDomainCategoryPlot, (, )]
[), ;, }, public, CombinedDomainCategoryPlot, (, CategoryAxis, domainAxis, ), {, super, (, null, ,, domainAxis, ,, null, ,, null, )]
[,, domainAxis, ,, null, ,, null, ), ;, this, ., subplots, =, new, java, ., util, ., ArrayList, (, )]
[,, null, ,, null, ), ;, this, ., subplots, =, new, java, ., util, ., ArrayList, (, ), ;, this]
[,, null, ), ;, this, ., subplots, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., gap]
[), ;, this, ., subplots, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., gap, =, 5.0]
[=, new, java, ., util, ., ArrayList, (, ), ;, this, ., gap, =, 5.0, ;, }, public, double, getGap]
[., subplots, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., gap, =, 5.0, ;, }, public]
[;, this, ., gap, =, 5.0, ;, }, public, double, getGap, (, ), {, return, this, ., gap, ;, }]
[=, 5.0, ;, }, public, double, getGap, (, ), {, return, this, ., gap, ;, }, public, void, setGap, (]
[., gap, =, 5.0, ;, }, public, double, getGap, (, ), {, return, this, ., gap, ;, }, public, void]
[;, }, public, double, getGap, (, ), {, return, this, ., gap, ;, }, public, void, setGap, (, double, gap]
[;, }, public, void, setGap, (, double, gap, ), {, this, ., gap, =, gap, ;, fireChangeEvent, (, ), ;]
[., gap, ;, }, public, void, setGap, (, double, gap, ), {, this, ., gap, =, gap, ;, fireChangeEvent, (]
[=, gap, ;, fireChangeEvent, (, ), ;, }, public, void, add, (, CategoryPlot, subplot, ), {, add, (, subplot, ,]
[., gap, =, gap, ;, fireChangeEvent, (, ), ;, }, public, void, add, (, CategoryPlot, subplot, ), {, add, (]
[;, fireChangeEvent, (, ), ;, }, public, void, add, (, CategoryPlot, subplot, ), {, add, (, subplot, ,, 1, )]
[;, }, public, void, add, (, CategoryPlot, subplot, ), {, add, (, subplot, ,, 1, ), ;, }, public, void]
[;, }, public, void, add, (, CategoryPlot, subplot, ,, int, weight, ), {, if, (, subplot, ==, null, ), {]
[,, 1, ), ;, }, public, void, add, (, CategoryPlot, subplot, ,, int, weight, ), {, if, (, subplot, ==]
[), ;, }, public, void, add, (, CategoryPlot, subplot, ,, int, weight, ), {, if, (, subplot, ==, null, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'subplot' argument.", ), ;, }, if, (, weight, <, 1, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subplot' argument.", ), ;, }, if, (, weight, <, 1, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'subplot' argument.", ), ;, }, if, (, weight, <, 1, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, weight, <, 1, ), {, throw, new, IllegalArgumentException, (, "Require weight >= 1.", ), ;, }, subplot, ., setParent]
[), ;, }, if, (, weight, <, 1, ), {, throw, new, IllegalArgumentException, (, "Require weight >= 1.", ), ;, }, subplot, .]
[), {, throw, new, IllegalArgumentException, (, "Require weight >= 1.", ), ;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight]
[<, 1, ), {, throw, new, IllegalArgumentException, (, "Require weight >= 1.", ), ;, }, subplot, ., setParent, (, this, ), ;, subplot]
[), {, throw, new, IllegalArgumentException, (, "Require weight >= 1.", ), ;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight]
[;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (]
[), ;, }, subplot, ., setParent, (, this, ), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets]
[;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0]
[., setParent, (, this, ), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (]
[), ;, subplot, ., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,]
[;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot, .]
[., setWeight, (, weight, ), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0]
[), ;, subplot, ., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot]
[;, subplot, ., setDomainAxis, (, null, ), ;, subplot, ., setOrientation, (, getOrientation, (, ), ), ;, subplot, ., addChangeListener]
[., setInsets, (, new, RectangleInsets, (, 0.0, ,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot, ., setDomainAxis, (]
[), ;, subplot, ., setDomainAxis, (, null, ), ;, subplot, ., setOrientation, (, getOrientation, (, ), ), ;, subplot, .]
[,, 0.0, ,, 0.0, ,, 0.0, ), ), ;, subplot, ., setDomainAxis, (, null, ), ;, subplot, ., setOrientation, (]
[,, 0.0, ,, 0.0, ), ), ;, subplot, ., setDomainAxis, (, null, ), ;, subplot, ., setOrientation, (, getOrientation, (]
[,, 0.0, ), ), ;, subplot, ., setDomainAxis, (, null, ), ;, subplot, ., setOrientation, (, getOrientation, (, ), )]
[), ), ;, subplot, ., setDomainAxis, (, null, ), ;, subplot, ., setOrientation, (, getOrientation, (, ), ), ;, subplot]
[;, subplot, ., setOrientation, (, getOrientation, (, ), ), ;, subplot, ., addChangeListener, (, this, ), ;, this, ., subplots]
[., setDomainAxis, (, null, ), ;, subplot, ., setOrientation, (, getOrientation, (, ), ), ;, subplot, ., addChangeListener, (, this]
[), ;, subplot, ., setOrientation, (, getOrientation, (, ), ), ;, subplot, ., addChangeListener, (, this, ), ;, this, .]
[;, subplot, ., addChangeListener, (, this, ), ;, this, ., subplots, ., add, (, subplot, ), ;, CategoryAxis, axis, =]
[., setOrientation, (, getOrientation, (, ), ), ;, subplot, ., addChangeListener, (, this, ), ;, this, ., subplots, ., add]
[), ;, subplot, ., addChangeListener, (, this, ), ;, this, ., subplots, ., add, (, subplot, ), ;, CategoryAxis, axis]
[;, this, ., subplots, ., add, (, subplot, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, if, (, axis]
[., addChangeListener, (, this, ), ;, this, ., subplots, ., add, (, subplot, ), ;, CategoryAxis, axis, =, getDomainAxis, (]
[), ;, this, ., subplots, ., add, (, subplot, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, if, (]
[;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, if, (, axis, !=, null, ), {, axis, ., configure, (, )]
[., add, (, subplot, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, if, (, axis, !=, null, ), {]
[., subplots, ., add, (, subplot, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, if, (, axis, !=, null]
[), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, if, (, axis, !=, null, ), {, axis, ., configure, (]
[;, if, (, axis, !=, null, ), {, axis, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }]
[), {, axis, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, public, void, remove, (, CategoryPlot, subplot]
[!=, null, ), {, axis, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, public, void, remove, (]
[), {, axis, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, public, void, remove, (, CategoryPlot, subplot]
[;, }, fireChangeEvent, (, ), ;, }, public, void, remove, (, CategoryPlot, subplot, ), {, if, (, subplot, ==, null]
[., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, public, void, remove, (, CategoryPlot, subplot, ), {, if]
[;, }, public, void, remove, (, CategoryPlot, subplot, ), {, if, (, subplot, ==, null, ), {, throw, new, IllegalArgumentException]
[), {, throw, new, IllegalArgumentException, (, "Null 'subplot' argument.", ), ;, }, int, position, =, -, 1, ;, int, size, =, this]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'subplot' argument.", ), ;, }, int, position, =, -, 1, ;, int, size]
[), {, throw, new, IllegalArgumentException, (, "Null 'subplot' argument.", ), ;, }, int, position, =, -, 1, ;, int, size, =, this]
[;, }, int, position, =, -, 1, ;, int, size, =, this, ., subplots, ., size, (, ), ;, int]
[), ;, }, int, position, =, -, 1, ;, int, size, =, this, ., subplots, ., size, (, ), ;]
[;, int, size, =, this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position]
[;, int, size, =, this, ., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position]
[;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i, <, size, ), {, if, (]
[., size, (, ), ;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i, <, size]
[., subplots, ., size, (, ), ;, int, i, =, 0, ;, while, (, position, ==, -, 1, &&, i]
[;, while, (, position, ==, -, 1, &&, i, <, size, ), {, if, (, this, ., subplots, ., get]
[), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {, position, =, i, ;]
[&&, i, <, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {]
[==, -, 1, &&, i, <, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==]
[&&, i, <, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {]
[&&, i, <, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {]
[), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {, position, =, i, ;]
[<, size, ), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {, position, =]
[), {, if, (, this, ., subplots, ., get, (, i, ), ==, subplot, ), {, position, =, i, ;]
[), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {, this]
[==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1, )]
[., get, (, i, ), ==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (]
[., subplots, ., get, (, i, ), ==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }]
[), ==, subplot, ), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1]
[), {, position, =, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {, this]
[=, i, ;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {, this, ., subplots, .]
[;, }, i, ++, ;, }, if, (, position, !=, -, 1, ), {, this, ., subplots, ., remove, (]
[;, }, if, (, position, !=, -, 1, ), {, this, ., subplots, ., remove, (, position, ), ;, subplot]
[++, ;, }, if, (, position, !=, -, 1, ), {, this, ., subplots, ., remove, (, position, ), ;]
[), {, this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;, subplot, .]
[!=, -, 1, ), {, this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, )]
[), {, this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;, subplot, .]
[), {, this, ., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;, subplot, .]
[;, subplot, ., setParent, (, null, ), ;, subplot, ., removeChangeListener, (, this, ), ;, CategoryAxis, domain, =, getDomainAxis, (]
[., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;, subplot, ., removeChangeListener, (, this, ), ;]
[., subplots, ., remove, (, position, ), ;, subplot, ., setParent, (, null, ), ;, subplot, ., removeChangeListener, (, this]
[), ;, subplot, ., setParent, (, null, ), ;, subplot, ., removeChangeListener, (, this, ), ;, CategoryAxis, domain, =, getDomainAxis]
[;, subplot, ., removeChangeListener, (, this, ), ;, CategoryAxis, domain, =, getDomainAxis, (, ), ;, if, (, domain, !=, null]
[., setParent, (, null, ), ;, subplot, ., removeChangeListener, (, this, ), ;, CategoryAxis, domain, =, getDomainAxis, (, ), ;]
[), ;, subplot, ., removeChangeListener, (, this, ), ;, CategoryAxis, domain, =, getDomainAxis, (, ), ;, if, (, domain, !=]
[;, CategoryAxis, domain, =, getDomainAxis, (, ), ;, if, (, domain, !=, null, ), {, domain, ., configure, (, )]
[., removeChangeListener, (, this, ), ;, CategoryAxis, domain, =, getDomainAxis, (, ), ;, if, (, domain, !=, null, ), {]
[), ;, CategoryAxis, domain, =, getDomainAxis, (, ), ;, if, (, domain, !=, null, ), {, domain, ., configure, (]
[;, if, (, domain, !=, null, ), {, domain, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }]
[), {, domain, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, )]
[!=, null, ), {, domain, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots]
[), {, domain, ., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, )]
[;, }, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, ), {, if, (, this, ., subplots, !=]
[., configure, (, ), ;, }, fireChangeEvent, (, ), ;, }, }, public, List, getSubplots, (, ), {, if, (]
[;, }, }, public, List, getSubplots, (, ), {, if, (, this, ., subplots, !=, null, ), {, return, Collections]
[), {, return, Collections, ., unmodifiableList, (, this, ., subplots, ), ;, }, else, {, return, Collections, ., EMPTY_LIST, ;]
[!=, null, ), {, return, Collections, ., unmodifiableList, (, this, ., subplots, ), ;, }, else, {, return, Collections, .]
[., subplots, !=, null, ), {, return, Collections, ., unmodifiableList, (, this, ., subplots, ), ;, }, else, {, return]
[), {, return, Collections, ., unmodifiableList, (, this, ., subplots, ), ;, }, else, {, return, Collections, ., EMPTY_LIST, ;]
[;, }, else, {, return, Collections, ., EMPTY_LIST, ;, }, }, public, CategoryPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source]
[., unmodifiableList, (, this, ., subplots, ), ;, }, else, {, return, Collections, ., EMPTY_LIST, ;, }, }, public, CategoryPlot]
[), ;, }, else, {, return, Collections, ., EMPTY_LIST, ;, }, }, public, CategoryPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D]
[., subplots, ), ;, }, else, {, return, Collections, ., EMPTY_LIST, ;, }, }, public, CategoryPlot, findSubplot, (, PlotRenderingInfo, info]
[;, }, }, public, CategoryPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source, ), {, if, (, info, ==, null, )]
[., EMPTY_LIST, ;, }, }, public, CategoryPlot, findSubplot, (, PlotRenderingInfo, info, ,, Point2D, source, ), {, if, (, info, ==]
[), {, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (, source, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'info' argument.", ), ;, }, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, CategoryPlot, result, =]
[), ;, }, if, (, source, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, CategoryPlot, result]
[), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, CategoryPlot, result, =, null, ;, int, subplotIndex, =, info, .]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, CategoryPlot, result, =, null, ;, int, subplotIndex, =]
[), {, throw, new, IllegalArgumentException, (, "Null 'source' argument.", ), ;, }, CategoryPlot, result, =, null, ;, int, subplotIndex, =, info, .]
[;, }, CategoryPlot, result, =, null, ;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex]
[), ;, }, CategoryPlot, result, =, null, ;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (]
[;, int, subplotIndex, =, info, ., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=, 0, ), {, result, =]
[;, if, (, subplotIndex, >=, 0, ), {, result, =, (, CategoryPlot, ), this, ., subplots, ., get, (, subplotIndex]
[., getSubplotIndex, (, source, ), ;, if, (, subplotIndex, >=, 0, ), {, result, =, (, CategoryPlot, ), this, .]
[), ;, if, (, subplotIndex, >=, 0, ), {, result, =, (, CategoryPlot, ), this, ., subplots, ., get, (]
[), {, result, =, (, CategoryPlot, ), this, ., subplots, ., get, (, subplotIndex, ), ;, }, return, result, ;]
[>=, 0, ), {, result, =, (, CategoryPlot, ), this, ., subplots, ., get, (, subplotIndex, ), ;, }, return]
[), {, result, =, (, CategoryPlot, ), this, ., subplots, ., get, (, subplotIndex, ), ;, }, return, result, ;]
[=, (, CategoryPlot, ), this, ., subplots, ., get, (, subplotIndex, ), ;, }, return, result, ;, }, public, void]
[;, }, return, result, ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {]
[;, }, return, result, ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {]
[., get, (, subplotIndex, ), ;, }, return, result, ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info]
[., subplots, ., get, (, subplotIndex, ), ;, }, return, result, ;, }, public, void, zoomRangeAxes, (, double, factor, ,]
[), ;, }, return, result, ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, )]
[;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ), {, zoomRangeAxes, (, factor, ,]
[;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ,, boolean, useAnchor, ), {, CategoryPlot]
[,, info, ,, source, ,, false, ), ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D]
[,, source, ,, false, ), ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ,]
[,, false, ), ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ,, boolean, useAnchor]
[), ;, }, public, void, zoomRangeAxes, (, double, factor, ,, PlotRenderingInfo, info, ,, Point2D, source, ,, boolean, useAnchor, ), {]
[;, if, (, subplot, !=, null, ), {, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, )]
[,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source]
[), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor]
[), {, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, else, {, Iterator, iterator]
[!=, null, ), {, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, else, {]
[), {, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, else, {, Iterator, iterator]
[;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (]
[,, info, ,, source, ,, useAnchor, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (]
[,, source, ,, useAnchor, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;]
[,, useAnchor, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (]
[), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, .]
[;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, CategoryPlot, ), iterator, ., next, (, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, CategoryPlot, ), iterator]
[), {, subplot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomRangeAxes, (, factor, ,, info]
[., hasNext, (, ), ), {, subplot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomRangeAxes]
[=, (, CategoryPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,]
[;, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, }, }, public, void, zoomRangeAxes]
[;, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, }, }, public, void, zoomRangeAxes]
[., next, (, ), ;, subplot, ., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, }]
[;, }, }, }, public, void, zoomRangeAxes, (, double, lowerPercent, ,, double, upperPercent, ,, PlotRenderingInfo, info, ,, Point2D, source, )]
[., zoomRangeAxes, (, factor, ,, info, ,, source, ,, useAnchor, ), ;, }, }, }, public, void, zoomRangeAxes, (, double]
[,, info, ,, source, ,, useAnchor, ), ;, }, }, }, public, void, zoomRangeAxes, (, double, lowerPercent, ,, double, upperPercent]
[,, source, ,, useAnchor, ), ;, }, }, }, public, void, zoomRangeAxes, (, double, lowerPercent, ,, double, upperPercent, ,, PlotRenderingInfo]
[,, useAnchor, ), ;, }, }, }, public, void, zoomRangeAxes, (, double, lowerPercent, ,, double, upperPercent, ,, PlotRenderingInfo, info, ,]
[), ;, }, }, }, public, void, zoomRangeAxes, (, double, lowerPercent, ,, double, upperPercent, ,, PlotRenderingInfo, info, ,, Point2D, source]
[;, if, (, subplot, !=, null, ), {, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, )]
[,, source, ), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info]
[), ;, if, (, subplot, !=, null, ), {, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source]
[), {, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, else, {, Iterator, iterator]
[!=, null, ), {, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, else, {]
[), {, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, else, {, Iterator, iterator]
[;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (]
[,, upperPercent, ,, info, ,, source, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (]
[,, info, ,, source, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;]
[,, source, ), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (]
[), ;, }, else, {, Iterator, iterator, =, getSubplots, (, ), ., iterator, (, ), ;, while, (, iterator, .]
[;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, CategoryPlot, ), iterator, ., next, (, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, subplot, =, (, CategoryPlot, ), iterator]
[), {, subplot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent]
[., hasNext, (, ), ), {, subplot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomRangeAxes]
[=, (, CategoryPlot, ), iterator, ., next, (, ), ;, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,]
[;, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, }, }, protected, AxisSpace, calculateAxisSpace]
[;, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, }, }, protected, AxisSpace, calculateAxisSpace]
[., next, (, ), ;, subplot, ., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, }]
[;, }, }, }, protected, AxisSpace, calculateAxisSpace, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ), {, AxisSpace, space, =, new, AxisSpace]
[., zoomRangeAxes, (, lowerPercent, ,, upperPercent, ,, info, ,, source, ), ;, }, }, }, protected, AxisSpace, calculateAxisSpace, (, Graphics2D]
[,, upperPercent, ,, info, ,, source, ), ;, }, }, }, protected, AxisSpace, calculateAxisSpace, (, Graphics2D, g2, ,, Rectangle2D, plotArea]
[,, info, ,, source, ), ;, }, }, }, protected, AxisSpace, calculateAxisSpace, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ), {]
[,, source, ), ;, }, }, }, protected, AxisSpace, calculateAxisSpace, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ), {, AxisSpace, space]
[), ;, }, }, }, protected, AxisSpace, calculateAxisSpace, (, Graphics2D, g2, ,, Rectangle2D, plotArea, ), {, AxisSpace, space, =, new]
[;, PlotOrientation, orientation, =, getOrientation, (, ), ;, AxisSpace, fixed, =, getFixedDomainAxisSpace, (, ), ;, if, (, fixed, !=, null]
[;, AxisSpace, fixed, =, getFixedDomainAxisSpace, (, ), ;, if, (, fixed, !=, null, ), {, if, (, orientation, ==, PlotOrientation]
[;, if, (, fixed, !=, null, ), {, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setLeft]
[), {, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, )]
[!=, null, ), {, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setLeft, (, fixed, ., getLeft]
[), {, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, )]
[), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;, space, ., setRight, (, fixed, ., getRight]
[==, PlotOrientation, ., HORIZONTAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;, space, ., setRight]
[), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;, space, ., setRight, (, fixed, ., getRight]
[., HORIZONTAL, ), {, space, ., setLeft, (, fixed, ., getLeft, (, ), ), ;, space, ., setRight, (, fixed]
[;, space, ., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation, .]
[., setLeft, (, fixed, ., getLeft, (, ), ), ;, space, ., setRight, (, fixed, ., getRight, (, ), )]
[), ;, space, ., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation]
[., getLeft, (, ), ), ;, space, ., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, ., setTop, (, fixed, ., getTop, (]
[., setRight, (, fixed, ., getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, )]
[), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, ., setTop, (, fixed, ., getTop]
[., getRight, (, ), ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, space, ., setTop]
[), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;, space, ., setBottom, (, fixed, ., getBottom]
[==, PlotOrientation, ., VERTICAL, ), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;, space, ., setBottom]
[), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;, space, ., setBottom, (, fixed, ., getBottom]
[., VERTICAL, ), {, space, ., setTop, (, fixed, ., getTop, (, ), ), ;, space, ., setBottom, (, fixed]
[;, space, ., setBottom, (, fixed, ., getBottom, (, ), ), ;, }, }, else, {, CategoryAxis, categoryAxis, =, getDomainAxis]
[., setTop, (, fixed, ., getTop, (, ), ), ;, space, ., setBottom, (, fixed, ., getBottom, (, ), )]
[), ;, space, ., setBottom, (, fixed, ., getBottom, (, ), ), ;, }, }, else, {, CategoryAxis, categoryAxis, =]
[., getTop, (, ), ), ;, space, ., setBottom, (, fixed, ., getBottom, (, ), ), ;, }, }, else]
[;, }, }, else, {, CategoryAxis, categoryAxis, =, getDomainAxis, (, ), ;, RectangleEdge, categoryEdge, =, Plot, ., resolveDomainAxisLocation, (, getDomainAxisLocation]
[., setBottom, (, fixed, ., getBottom, (, ), ), ;, }, }, else, {, CategoryAxis, categoryAxis, =, getDomainAxis, (, )]
[), ;, }, }, else, {, CategoryAxis, categoryAxis, =, getDomainAxis, (, ), ;, RectangleEdge, categoryEdge, =, Plot, ., resolveDomainAxisLocation, (]
[., getBottom, (, ), ), ;, }, }, else, {, CategoryAxis, categoryAxis, =, getDomainAxis, (, ), ;, RectangleEdge, categoryEdge, =]
[;, RectangleEdge, categoryEdge, =, Plot, ., resolveDomainAxisLocation, (, getDomainAxisLocation, (, ), ,, orientation, ), ;, if, (, categoryAxis, !=, null]
[;, if, (, categoryAxis, !=, null, ), {, space, =, categoryAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,]
[., resolveDomainAxisLocation, (, getDomainAxisLocation, (, ), ,, orientation, ), ;, if, (, categoryAxis, !=, null, ), {, space, =, categoryAxis]
[,, orientation, ), ;, if, (, categoryAxis, !=, null, ), {, space, =, categoryAxis, ., reserveSpace, (, g2, ,, this]
[), ;, if, (, categoryAxis, !=, null, ), {, space, =, categoryAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea]
[), {, space, =, categoryAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }]
[!=, null, ), {, space, =, categoryAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, )]
[), {, space, =, categoryAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }]
[=, categoryAxis, ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }, else, {, if]
[;, }, else, {, if, (, getDrawSharedDomainAxis, (, ), ), {, space, =, getDomainAxis, (, ), ., reserveSpace, (, g2]
[., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }, else, {, if, (, getDrawSharedDomainAxis]
[,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }, else, {, if, (, getDrawSharedDomainAxis, (, ), ), {]
[,, plotArea, ,, categoryEdge, ,, space, ), ;, }, else, {, if, (, getDrawSharedDomainAxis, (, ), ), {, space, =]
[,, categoryEdge, ,, space, ), ;, }, else, {, if, (, getDrawSharedDomainAxis, (, ), ), {, space, =, getDomainAxis, (]
[,, space, ), ;, }, else, {, if, (, getDrawSharedDomainAxis, (, ), ), {, space, =, getDomainAxis, (, ), .]
[), ;, }, else, {, if, (, getDrawSharedDomainAxis, (, ), ), {, space, =, getDomainAxis, (, ), ., reserveSpace, (]
[), {, space, =, getDomainAxis, (, ), ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, )]
[=, getDomainAxis, (, ), ., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }, }]
[;, }, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,, null, ), ;, int, n, =, this]
[., reserveSpace, (, g2, ,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }, }, }, Rectangle2D, adjustedPlotArea, =]
[,, this, ,, plotArea, ,, categoryEdge, ,, space, ), ;, }, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (]
[,, plotArea, ,, categoryEdge, ,, space, ), ;, }, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,]
[,, categoryEdge, ,, space, ), ;, }, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,, null, )]
[,, space, ), ;, }, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,, null, ), ;, int]
[), ;, }, }, }, Rectangle2D, adjustedPlotArea, =, space, ., shrink, (, plotArea, ,, null, ), ;, int, n, =]
[;, int, n, =, this, ., subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int]
[., shrink, (, plotArea, ,, null, ), ;, int, n, =, this, ., subplots, ., size, (, ), ;, int]
[,, null, ), ;, int, n, =, this, ., subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;]
[), ;, int, n, =, this, ., subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;, for, (]
[;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[., size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n]
[., subplots, ., size, (, ), ;, int, totalWeight, =, 0, ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, CategoryPlot, sub, =, (]
[;, i, <, n, ;, i, ++, ), {, CategoryPlot, sub, =, (, CategoryPlot, ), this, ., subplots, ., get]
[;, i, ++, ), {, CategoryPlot, sub, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[<, n, ;, i, ++, ), {, CategoryPlot, sub, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i]
[;, i, ++, ), {, CategoryPlot, sub, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[), {, CategoryPlot, sub, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, totalWeight, +=, sub]
[++, ), {, CategoryPlot, sub, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, totalWeight, +=]
[;, totalWeight, +=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ], ;]
[;, totalWeight, +=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ], ;]
[., get, (, i, ), ;, totalWeight, +=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new]
[., subplots, ., get, (, i, ), ;, totalWeight, +=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas]
[), ;, totalWeight, +=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ]]
[+=, sub, ., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x]
[;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x, =, adjustedPlotArea, ., getX, (, )]
[., getWeight, (, ), ;, }, this, ., subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x, =, adjustedPlotArea]
[=, new, Rectangle2D, [, n, ], ;, double, x, =, adjustedPlotArea, ., getX, (, ), ;, double, y, =, adjustedPlotArea]
[., subplotAreas, =, new, Rectangle2D, [, n, ], ;, double, x, =, adjustedPlotArea, ., getX, (, ), ;, double, y]
[;, double, x, =, adjustedPlotArea, ., getX, (, ), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double]
[], ;, double, x, =, adjustedPlotArea, ., getX, (, ), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;]
[;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==, PlotOrientation]
[., getX, (, ), ;, double, y, =, adjustedPlotArea, ., getY, (, ), ;, double, usableSize, =, 0.0, ;, if]
[;, double, usableSize, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth]
[., getY, (, ), ;, double, usableSize, =, 0.0, ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize]
[;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, .]
[), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;]
[==, PlotOrientation, ., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n]
[), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;]
[., HORIZONTAL, ), {, usableSize, =, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n, -, 1]
[=, adjustedPlotArea, ., getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, else, if]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -]
[-, this, ., gap, *, (, n, -, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL]
[., getWidth, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, else, if, (, orientation]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -]
[*, (, n, -, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =]
[., gap, *, (, n, -, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -]
[), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, )]
[-, 1, ), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight]
[), ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, )]
[), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (, n, -, 1, ), ;]
[==, PlotOrientation, ., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (, n]
[), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (, n, -, 1, ), ;]
[., VERTICAL, ), {, usableSize, =, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (, n, -, 1]
[=, adjustedPlotArea, ., getHeight, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, CategoryPlot, plot, =]
[-, this, ., gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;, i]
[., getHeight, (, ), -, this, ., gap, *, (, n, -, 1, ), ;, }, for, (, int, i]
[;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, CategoryPlot, plot, =]
[*, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[., gap, *, (, n, -, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, n]
[;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, CategoryPlot, plot, =]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, CategoryPlot, plot]
[-, 1, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, CategoryPlot, plot]
[;, i, <, n, ;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get]
[;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[<, n, ;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i]
[;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, if, (, orientation]
[++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, if, (]
[;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, )]
[;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, )]
[., get, (, i, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, w, =, usableSize, *]
[., subplots, ., get, (, i, ), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, w, =]
[), ;, if, (, orientation, ==, PlotOrientation, ., HORIZONTAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (]
[), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i]
[==, PlotOrientation, ., HORIZONTAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this]
[), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i]
[., HORIZONTAL, ), {, double, w, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas]
[;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea]
[/, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w]
[*, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double]
[/, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w]
[., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x]
[;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea]
[=, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x]
[[, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, )]
[., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight]
[], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;]
[;, x, =, x, +, w, +, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL]
[,, y, ,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =, x, +, w, +, this, .]
[,, w, ,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =, x, +, w, +, this, ., gap, ;]
[,, adjustedPlotArea, ., getHeight, (, ), ), ;, x, =, x, +, w, +, this, ., gap, ;, }, else]
[), ;, x, =, x, +, w, +, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, .]
[., getHeight, (, ), ), ;, x, =, x, +, w, +, this, ., gap, ;, }, else, if, (]
[=, x, +, w, +, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, h, =, usableSize, *, plot, ., getWeight]
[+, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, h, =, usableSize]
[+, w, +, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, h]
[+, this, ., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, h, =, usableSize]
[;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, h, =, usableSize, *, plot, ., getWeight]
[., gap, ;, }, else, if, (, orientation, ==, PlotOrientation, ., VERTICAL, ), {, double, h, =, usableSize, *, plot]
[), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i]
[==, PlotOrientation, ., VERTICAL, ), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this]
[), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i]
[., VERTICAL, ), {, double, h, =, usableSize, *, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas]
[;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth]
[/, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea]
[*, plot, ., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double]
[/, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea]
[., getWeight, (, ), /, totalWeight, ;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x]
[;, this, ., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth]
[=, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y]
[[, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h]
[., subplotAreas, [, i, ], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, )]
[], =, new, Rectangle2D, ., Double, (, x, ,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;]
[;, y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2]
[,, y, ,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =, y, +, h, +, this, .]
[,, adjustedPlotArea, ., getWidth, (, ), ,, h, ), ;, y, =, y, +, h, +, this, ., gap, ;]
[,, h, ), ;, y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, .]
[., getWidth, (, ), ,, h, ), ;, y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace]
[), ;, y, =, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (]
[=, y, +, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2, ,, this]
[;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,, null, )]
[+, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2, ,, this, ., subplotAreas, [, i]
[+, h, +, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2, ,, this, ., subplotAreas]
[+, this, ., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2, ,, this, ., subplotAreas, [, i]
[;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,, null, )]
[., gap, ;, }, AxisSpace, subSpace, =, plot, ., calculateRangeAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,]
[;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return, space, ;, }, public, void, draw, (, Graphics2D, g2, ,]
[., calculateRangeAxisSpace, (, g2, ,, this, ., subplotAreas, [, i, ], ,, null, ), ;, space, ., ensureAtLeast, (, subSpace]
[,, this, ., subplotAreas, [, i, ], ,, null, ), ;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return]
[,, null, ), ;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return, space, ;, }, public, void, draw, (]
[[, i, ], ,, null, ), ;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return, space, ;, }, public]
[., subplotAreas, [, i, ], ,, null, ), ;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return, space, ;]
[], ,, null, ), ;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return, space, ;, }, public, void, draw]
[), ;, space, ., ensureAtLeast, (, subSpace, ), ;, }, return, space, ;, }, public, void, draw, (, Graphics2D, g2]
[;, }, return, space, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState]
[., ensureAtLeast, (, subSpace, ), ;, }, return, space, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area]
[), ;, }, return, space, ;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,]
[;, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Point2D, anchor, ,, PlotState, parentState, ,, PlotRenderingInfo, info]
[), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, area, ., setRect]
[!=, null, ), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, area]
[), {, info, ., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, area, ., setRect]
[;, }, RectangleInsets, insets, =, getInsets, (, ), ;, area, ., setRect, (, area, ., getX, (, ), +, insets]
[., setPlotArea, (, area, ), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, area, ., setRect, (, area, .]
[), ;, }, RectangleInsets, insets, =, getInsets, (, ), ;, area, ., setRect, (, area, ., getX, (, ), +]
[;, area, ., setRect, (, area, ., getX, (, ), +, insets, ., getLeft, (, ), ,, area, ., getY]
[;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =, space]
[., setRect, (, area, ., getX, (, ), +, insets, ., getLeft, (, ), ,, area, ., getY, (, )]
[,, area, ., getY, (, ), +, insets, ., getTop, (, ), ,, area, ., getWidth, (, ), -, insets]
[+, insets, ., getLeft, (, ), ,, area, ., getY, (, ), +, insets, ., getTop, (, ), ,, area]
[., getX, (, ), +, insets, ., getLeft, (, ), ,, area, ., getY, (, ), +, insets, ., getTop]
[,, area, ., getY, (, ), +, insets, ., getTop, (, ), ,, area, ., getWidth, (, ), -, insets]
[., getLeft, (, ), ,, area, ., getY, (, ), +, insets, ., getTop, (, ), ,, area, ., getWidth]
[,, area, ., getWidth, (, ), -, insets, ., getLeft, (, ), -, insets, ., getRight, (, ), ,, area]
[+, insets, ., getTop, (, ), ,, area, ., getWidth, (, ), -, insets, ., getLeft, (, ), -, insets]
[., getY, (, ), +, insets, ., getTop, (, ), ,, area, ., getWidth, (, ), -, insets, ., getLeft]
[,, area, ., getWidth, (, ), -, insets, ., getLeft, (, ), -, insets, ., getRight, (, ), ,, area]
[., getTop, (, ), ,, area, ., getWidth, (, ), -, insets, ., getLeft, (, ), -, insets, ., getRight]
[,, area, ., getHeight, (, ), -, insets, ., getTop, (, ), -, insets, ., getBottom, (, ), ), ;]
[-, insets, ., getRight, (, ), ,, area, ., getHeight, (, ), -, insets, ., getTop, (, ), -, insets]
[-, insets, ., getLeft, (, ), -, insets, ., getRight, (, ), ,, area, ., getHeight, (, ), -, insets]
[., getWidth, (, ), -, insets, ., getLeft, (, ), -, insets, ., getRight, (, ), ,, area, ., getHeight]
[-, insets, ., getRight, (, ), ,, area, ., getHeight, (, ), -, insets, ., getTop, (, ), -, insets]
[., getLeft, (, ), -, insets, ., getRight, (, ), ,, area, ., getHeight, (, ), -, insets, ., getTop]
[,, area, ., getHeight, (, ), -, insets, ., getTop, (, ), -, insets, ., getBottom, (, ), ), ;]
[., getRight, (, ), ,, area, ., getHeight, (, ), -, insets, ., getTop, (, ), -, insets, ., getBottom]
[), ;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =]
[-, insets, ., getBottom, (, ), ), ;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,]
[-, insets, ., getTop, (, ), -, insets, ., getBottom, (, ), ), ;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace]
[., getHeight, (, ), -, insets, ., getTop, (, ), -, insets, ., getBottom, (, ), ), ;, setFixedRangeAxisSpaceForSubplots, (]
[-, insets, ., getBottom, (, ), ), ;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,]
[., getTop, (, ), -, insets, ., getBottom, (, ), ), ;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace, space, =]
[), ;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =]
[., getBottom, (, ), ), ;, setFixedRangeAxisSpaceForSubplots, (, null, ), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, )]
[;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =, space, ., shrink, (, area, ,]
[), ;, AxisSpace, space, =, calculateAxisSpace, (, g2, ,, area, ), ;, Rectangle2D, dataArea, =, space, ., shrink, (, area]
[;, Rectangle2D, dataArea, =, space, ., shrink, (, area, ,, null, ), ;, setFixedRangeAxisSpaceForSubplots, (, space, ), ;, CategoryAxis, axis]
[,, area, ), ;, Rectangle2D, dataArea, =, space, ., shrink, (, area, ,, null, ), ;, setFixedRangeAxisSpaceForSubplots, (, space, )]
[), ;, Rectangle2D, dataArea, =, space, ., shrink, (, area, ,, null, ), ;, setFixedRangeAxisSpaceForSubplots, (, space, ), ;, CategoryAxis]
[;, setFixedRangeAxisSpaceForSubplots, (, space, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, RectangleEdge, domainEdge, =, getDomainAxisEdge, (, ), ;]
[., shrink, (, area, ,, null, ), ;, setFixedRangeAxisSpaceForSubplots, (, space, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;]
[,, null, ), ;, setFixedRangeAxisSpaceForSubplots, (, space, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, RectangleEdge, domainEdge, =, getDomainAxisEdge]
[), ;, setFixedRangeAxisSpaceForSubplots, (, space, ), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, RectangleEdge, domainEdge, =, getDomainAxisEdge, (, )]
[;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, RectangleEdge, domainEdge, =, getDomainAxisEdge, (, ), ;, double, cursor, =, RectangleEdge, .]
[), ;, CategoryAxis, axis, =, getDomainAxis, (, ), ;, RectangleEdge, domainEdge, =, getDomainAxisEdge, (, ), ;, double, cursor, =, RectangleEdge]
[;, RectangleEdge, domainEdge, =, getDomainAxisEdge, (, ), ;, double, cursor, =, RectangleEdge, ., coordinate, (, dataArea, ,, domainEdge, ), ;]
[;, double, cursor, =, RectangleEdge, ., coordinate, (, dataArea, ,, domainEdge, ), ;, AxisState, axisState, =, axis, ., draw, (]
[;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, domainEdge, ,, info, )]
[., coordinate, (, dataArea, ,, domainEdge, ), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,, area]
[,, domainEdge, ), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, domainEdge]
[), ;, AxisState, axisState, =, axis, ., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, domainEdge, ,, info]
[;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates, (]
[., draw, (, g2, ,, cursor, ,, area, ,, dataArea, ,, domainEdge, ,, info, ), ;, if, (, parentState, ==]
[,, cursor, ,, area, ,, dataArea, ,, domainEdge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState]
[,, area, ,, dataArea, ,, domainEdge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =, new]
[,, dataArea, ,, domainEdge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (]
[,, domainEdge, ,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (, ), ;]
[,, info, ), ;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (, ), ;, }, parentState]
[), ;, if, (, parentState, ==, null, ), {, parentState, =, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates]
[), {, parentState, =, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,]
[==, null, ), {, parentState, =, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates, (, ), ., put, (]
[), {, parentState, =, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,]
[=, new, PlotState, (, ), ;, }, parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;]
[;, }, parentState, ., getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;, i, ++]
[., put, (, axis, ,, axisState, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., subplots]
[., getSharedAxisStates, (, ), ., put, (, axis, ,, axisState, ), ;, for, (, int, i, =, 0, ;, i]
[,, axisState, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, )]
[), ;, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;, i]
[;, i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot]
[;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[<, this, ., subplots, ., size, (, ), ;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this]
[;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[., size, (, ), ;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get]
[., subplots, ., size, (, ), ;, i, ++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots]
[), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =]
[++, ), {, CategoryPlot, plot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo]
[;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info, .]
[;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info, .]
[., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {, subplotInfo, =]
[., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {]
[), ;, PlotRenderingInfo, subplotInfo, =, null, ;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info]
[;, if, (, info, !=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;]
[), {, subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, )]
[!=, null, ), {, subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (]
[), {, subplotInfo, =, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, )]
[=, new, PlotRenderingInfo, (, info, ., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, Point2D]
[;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, Point2D, subAnchor, =, null, ;, if, (, anchor, !=, null, &&]
[), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, Point2D, subAnchor, =, null, ;, if, (, anchor, !=, null]
[., getOwner, (, ), ), ;, info, ., addSubplotInfo, (, subplotInfo, ), ;, }, Point2D, subAnchor, =, null, ;, if]
[;, }, Point2D, subAnchor, =, null, ;, if, (, anchor, !=, null, &&, this, ., subplotAreas, [, i, ], .]
[., addSubplotInfo, (, subplotInfo, ), ;, }, Point2D, subAnchor, =, null, ;, if, (, anchor, !=, null, &&, this, .]
[), ;, }, Point2D, subAnchor, =, null, ;, if, (, anchor, !=, null, &&, this, ., subplotAreas, [, i, ]]
[;, if, (, anchor, !=, null, &&, this, ., subplotAreas, [, i, ], ., contains, (, anchor, ), ), {]
[), {, subAnchor, =, anchor, ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,]
[&&, this, ., subplotAreas, [, i, ], ., contains, (, anchor, ), ), {, subAnchor, =, anchor, ;, }, plot]
[!=, null, &&, this, ., subplotAreas, [, i, ], ., contains, (, anchor, ), ), {, subAnchor, =, anchor, ;]
[&&, this, ., subplotAreas, [, i, ], ., contains, (, anchor, ), ), {, subAnchor, =, anchor, ;, }, plot]
[), {, subAnchor, =, anchor, ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,]
[., contains, (, anchor, ), ), {, subAnchor, =, anchor, ;, }, plot, ., draw, (, g2, ,, this, .]
[[, i, ], ., contains, (, anchor, ), ), {, subAnchor, =, anchor, ;, }, plot, ., draw, (, g2]
[., subplotAreas, [, i, ], ., contains, (, anchor, ), ), {, subAnchor, =, anchor, ;, }, plot, ., draw]
[], ., contains, (, anchor, ), ), {, subAnchor, =, anchor, ;, }, plot, ., draw, (, g2, ,, this]
[), ), {, subAnchor, =, anchor, ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ]]
[=, anchor, ;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,, subAnchor, ,, parentState]
[;, }, plot, ., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,, subAnchor, ,, parentState, ,, subplotInfo]
[;, }, if, (, info, !=, null, ), {, info, ., setDataArea, (, dataArea, ), ;, }, }, protected, void]
[., draw, (, g2, ,, this, ., subplotAreas, [, i, ], ,, subAnchor, ,, parentState, ,, subplotInfo, ), ;, }]
[,, this, ., subplotAreas, [, i, ], ,, subAnchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=]
[,, subAnchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {, info, ., setDataArea, (]
[[, i, ], ,, subAnchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {, info]
[., subplotAreas, [, i, ], ,, subAnchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, )]
[], ,, subAnchor, ,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {, info, ., setDataArea]
[,, parentState, ,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {, info, ., setDataArea, (, dataArea, )]
[,, subplotInfo, ), ;, }, if, (, info, !=, null, ), {, info, ., setDataArea, (, dataArea, ), ;, }]
[), ;, }, if, (, info, !=, null, ), {, info, ., setDataArea, (, dataArea, ), ;, }, }, protected]
[), {, info, ., setDataArea, (, dataArea, ), ;, }, }, protected, void, setFixedRangeAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator]
[!=, null, ), {, info, ., setDataArea, (, dataArea, ), ;, }, }, protected, void, setFixedRangeAxisSpaceForSubplots, (, AxisSpace, space, )]
[), {, info, ., setDataArea, (, dataArea, ), ;, }, }, protected, void, setFixedRangeAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator]
[;, }, }, protected, void, setFixedRangeAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (]
[., setDataArea, (, dataArea, ), ;, }, }, protected, void, setFixedRangeAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =, this]
[), ;, }, }, protected, void, setFixedRangeAxisSpaceForSubplots, (, AxisSpace, space, ), {, Iterator, iterator, =, this, ., subplots, ., iterator]
[;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, )]
[., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (]
[), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, plot, ., setFixedRangeAxisSpace, (, space, ,]
[., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, plot, .]
[;, plot, ., setFixedRangeAxisSpace, (, space, ,, false, ), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {]
[;, plot, ., setFixedRangeAxisSpace, (, space, ,, false, ), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {]
[., next, (, ), ;, plot, ., setFixedRangeAxisSpace, (, space, ,, false, ), ;, }, }, public, void, setOrientation, (]
[;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, ., setOrientation, (, orientation, ), ;, Iterator, iterator]
[., setFixedRangeAxisSpace, (, space, ,, false, ), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, .]
[,, false, ), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, ., setOrientation, (, orientation, )]
[), ;, }, }, public, void, setOrientation, (, PlotOrientation, orientation, ), {, super, ., setOrientation, (, orientation, ), ;, Iterator]
[;, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[., setOrientation, (, orientation, ), ;, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator]
[), ;, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, )]
[., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (]
[), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, plot, ., setOrientation, (, orientation, )]
[., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, plot, .]
[;, plot, ., setOrientation, (, orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, return, super]
[;, plot, ., setOrientation, (, orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, return, super]
[., next, (, ), ;, plot, ., setOrientation, (, orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis]
[;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, return, super, ., getDataRange, (, axis, ), ;, }]
[., setOrientation, (, orientation, ), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, return, super, ., getDataRange]
[), ;, }, }, public, Range, getDataRange, (, ValueAxis, axis, ), {, return, super, ., getDataRange, (, axis, ), ;]
[;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;, if, (, result, ==, null]
[., getDataRange, (, axis, ), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;]
[), ;, }, public, LegendItemCollection, getLegendItems, (, ), {, LegendItemCollection, result, =, getFixedLegendItems, (, ), ;, if, (, result, ==]
[;, if, (, result, ==, null, ), {, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots]
[), {, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator]
[==, null, ), {, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=, null, ), {]
[), {, result, =, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator]
[=, new, LegendItemCollection, (, ), ;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =, this, .]
[;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, )]
[), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[!=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator]
[), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, )]
[., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (]
[), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, LegendItemCollection, more, =, plot, ., getLegendItems]
[., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, LegendItemCollection, more]
[;, LegendItemCollection, more, =, plot, ., getLegendItems, (, ), ;, result, ., addAll, (, more, ), ;, }, }, }]
[;, LegendItemCollection, more, =, plot, ., getLegendItems, (, ), ;, result, ., addAll, (, more, ), ;, }, }, }]
[., next, (, ), ;, LegendItemCollection, more, =, plot, ., getLegendItems, (, ), ;, result, ., addAll, (, more, )]
[;, result, ., addAll, (, more, ), ;, }, }, }, return, result, ;, }, public, List, getCategories, (, )]
[., getLegendItems, (, ), ;, result, ., addAll, (, more, ), ;, }, }, }, return, result, ;, }, public]
[;, }, }, }, return, result, ;, }, public, List, getCategories, (, ), {, List, result, =, new, java, .]
[., addAll, (, more, ), ;, }, }, }, return, result, ;, }, public, List, getCategories, (, ), {, List]
[), ;, }, }, }, return, result, ;, }, public, List, getCategories, (, ), {, List, result, =, new, java]
[;, }, public, List, getCategories, (, ), {, List, result, =, new, java, ., util, ., ArrayList, (, ), ;]
[;, if, (, this, ., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, )]
[), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[!=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[., subplots, !=, null, ), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator]
[), {, Iterator, iterator, =, this, ., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, )]
[;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, )]
[., subplots, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryPlot, plot, =, (]
[), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, List, more, =, plot, ., getCategories]
[., hasNext, (, ), ), {, CategoryPlot, plot, =, (, CategoryPlot, ), iterator, ., next, (, ), ;, List, more]
[;, List, more, =, plot, ., getCategories, (, ), ;, Iterator, moreIterator, =, more, ., iterator, (, ), ;, while]
[;, List, more, =, plot, ., getCategories, (, ), ;, Iterator, moreIterator, =, more, ., iterator, (, ), ;, while]
[., next, (, ), ;, List, more, =, plot, ., getCategories, (, ), ;, Iterator, moreIterator, =, more, ., iterator]
[;, Iterator, moreIterator, =, more, ., iterator, (, ), ;, while, (, moreIterator, ., hasNext, (, ), ), {, Comparable]
[., getCategories, (, ), ;, Iterator, moreIterator, =, more, ., iterator, (, ), ;, while, (, moreIterator, ., hasNext, (]
[;, while, (, moreIterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, ), moreIterator, ., next, (]
[., iterator, (, ), ;, while, (, moreIterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, )]
[), {, Comparable, category, =, (, Comparable, ), moreIterator, ., next, (, ), ;, if, (, !, result, ., contains]
[., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, ), moreIterator, ., next, (, ), ;, if, (]
[;, if, (, !, result, ., contains, (, category, ), ), {, result, ., add, (, category, ), ;, }]
[;, if, (, !, result, ., contains, (, category, ), ), {, result, ., add, (, category, ), ;, }]
[., next, (, ), ;, if, (, !, result, ., contains, (, category, ), ), {, result, ., add, (]
[), {, result, ., add, (, category, ), ;, }, }, }, }, return, Collections, ., unmodifiableList, (, result, )]
[), {, result, ., add, (, category, ), ;, }, }, }, }, return, Collections, ., unmodifiableList, (, result, )]
[., contains, (, category, ), ), {, result, ., add, (, category, ), ;, }, }, }, }, return, Collections]
[), ), {, result, ., add, (, category, ), ;, }, }, }, }, return, Collections, ., unmodifiableList, (, result]
[;, }, }, }, }, return, Collections, ., unmodifiableList, (, result, ), ;, }, public, List, getCategoriesForAxis, (, CategoryAxis, axis]
[., add, (, category, ), ;, }, }, }, }, return, Collections, ., unmodifiableList, (, result, ), ;, }, public]
[), ;, }, }, }, }, return, Collections, ., unmodifiableList, (, result, ), ;, }, public, List, getCategoriesForAxis, (, CategoryAxis]
[;, }, public, List, getCategoriesForAxis, (, CategoryAxis, axis, ), {, return, getCategories, (, ), ;, }, public, void, handleClick, (]
[., unmodifiableList, (, result, ), ;, }, public, List, getCategoriesForAxis, (, CategoryAxis, axis, ), {, return, getCategories, (, ), ;]
[), ;, }, public, List, getCategoriesForAxis, (, CategoryAxis, axis, ), {, return, getCategories, (, ), ;, }, public, void, handleClick]
[;, }, public, void, handleClick, (, int, x, ,, int, y, ,, PlotRenderingInfo, info, ), {, Rectangle2D, dataArea, =, info]
[;, if, (, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int, i, =, 0, ;]
[., getDataArea, (, ), ;, if, (, dataArea, ., contains, (, x, ,, y, ), ), {, for, (, int]
[), {, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;, i]
[., contains, (, x, ,, y, ), ), {, for, (, int, i, =, 0, ;, i, <, this, .]
[,, y, ), ), {, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (]
[), ), {, for, (, int, i, =, 0, ;, i, <, this, ., subplots, ., size, (, ), ;]
[;, i, <, this, ., subplots, ., size, (, ), ;, i, ++, ), {, CategoryPlot, subplot, =, (, CategoryPlot]
[;, i, ++, ), {, CategoryPlot, subplot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[<, this, ., subplots, ., size, (, ), ;, i, ++, ), {, CategoryPlot, subplot, =, (, CategoryPlot, ), this]
[;, i, ++, ), {, CategoryPlot, subplot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;]
[., size, (, ), ;, i, ++, ), {, CategoryPlot, subplot, =, (, CategoryPlot, ), this, ., subplots, ., get]
[., subplots, ., size, (, ), ;, i, ++, ), {, CategoryPlot, subplot, =, (, CategoryPlot, ), this, ., subplots]
[), {, CategoryPlot, subplot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =]
[++, ), {, CategoryPlot, subplot, =, (, CategoryPlot, ), this, ., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo]
[;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (, x, ,, y, ,, subplotInfo]
[;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (, x, ,, y, ,, subplotInfo]
[., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (]
[., subplots, ., get, (, i, ), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, .]
[), ;, PlotRenderingInfo, subplotInfo, =, info, ., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (, x, ,, y, ,]
[;, subplot, ., handleClick, (, x, ,, y, ,, subplotInfo, ), ;, }, }, }, public, void, plotChanged, (, PlotChangeEvent]
[., getSubplotInfo, (, i, ), ;, subplot, ., handleClick, (, x, ,, y, ,, subplotInfo, ), ;, }, }, }]
[), ;, subplot, ., handleClick, (, x, ,, y, ,, subplotInfo, ), ;, }, }, }, public, void, plotChanged, (]
[;, }, }, }, public, void, plotChanged, (, PlotChangeEvent, event, ), {, notifyListeners, (, event, ), ;, }, public, boolean]
[., handleClick, (, x, ,, y, ,, subplotInfo, ), ;, }, }, }, public, void, plotChanged, (, PlotChangeEvent, event, )]
[,, y, ,, subplotInfo, ), ;, }, }, }, public, void, plotChanged, (, PlotChangeEvent, event, ), {, notifyListeners, (, event]
[,, subplotInfo, ), ;, }, }, }, public, void, plotChanged, (, PlotChangeEvent, event, ), {, notifyListeners, (, event, ), ;]
[), ;, }, }, }, public, void, plotChanged, (, PlotChangeEvent, event, ), {, notifyListeners, (, event, ), ;, }, public]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CombinedDomainCategoryPlot, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CombinedDomainCategoryPlot, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, CombinedDomainCategoryPlot, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, CombinedDomainCategoryPlot, ), ), {, return, false, ;, }, CombinedDomainCategoryPlot, that, =, (]
[), {, return, false, ;, }, CombinedDomainCategoryPlot, that, =, (, CombinedDomainCategoryPlot, ), obj, ;, if, (, this, ., gap, !=]
[), {, return, false, ;, }, CombinedDomainCategoryPlot, that, =, (, CombinedDomainCategoryPlot, ), obj, ;, if, (, this, ., gap, !=]
[), ), {, return, false, ;, }, CombinedDomainCategoryPlot, that, =, (, CombinedDomainCategoryPlot, ), obj, ;, if, (, this, ., gap]
[instanceof, CombinedDomainCategoryPlot, ), ), {, return, false, ;, }, CombinedDomainCategoryPlot, that, =, (, CombinedDomainCategoryPlot, ), obj, ;, if, (, this]
[;, }, CombinedDomainCategoryPlot, that, =, (, CombinedDomainCategoryPlot, ), obj, ;, if, (, this, ., gap, !=, that, ., gap, )]
[;, if, (, this, ., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities]
[;, if, (, this, ., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots, ,, that, ., subplots]
[!=, that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots]
[., gap, !=, that, ., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots, ,, that, ., subplots]
[., gap, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots, ,, that]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., subplots, ,, that, ., subplots, ), ), {, return]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, )]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, )]
[., equal, (, this, ., subplots, ,, that, ., subplots, ), ), {, return, false, ;, }, return, super, .]
[,, that, ., subplots, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }]
[., subplots, ,, that, ., subplots, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, )]
[), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (]
[., subplots, ), ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedDomainCategoryPlot]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedDomainCategoryPlot, result, =, (, CombinedDomainCategoryPlot, ), super, ., clone, (]
[., equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedDomainCategoryPlot, result, =, (, CombinedDomainCategoryPlot]
[), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CombinedDomainCategoryPlot, result, =, (, CombinedDomainCategoryPlot, ), super, ., clone]
[;, result, ., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, ), ;, for, (, Iterator]
[;, result, ., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, ), ;, for, (, Iterator]
[., clone, (, ), ;, result, ., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, )]
[=, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =, result, .]
[., subplots, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =]
[;, for, (, Iterator, it, =, result, ., subplots, ., iterator, (, ), ;, it, ., hasNext, (, ), ;]
[;, for, (, Iterator, it, =, result, ., subplots, ., iterator, (, ), ;, it, ., hasNext, (, ), ;]
[., deepClone, (, this, ., subplots, ), ;, for, (, Iterator, it, =, result, ., subplots, ., iterator, (, )]
[), ;, for, (, Iterator, it, =, result, ., subplots, ., iterator, (, ), ;, it, ., hasNext, (, )]
[., subplots, ), ;, for, (, Iterator, it, =, result, ., subplots, ., iterator, (, ), ;, it, ., hasNext]
[;, it, ., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot, ), it, ., next, (, )]
[., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot, ), it]
[., subplots, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot]
[;, ), {, Plot, child, =, (, Plot, ), it, ., next, (, ), ;, child, ., setParent, (, result]
[., hasNext, (, ), ;, ), {, Plot, child, =, (, Plot, ), it, ., next, (, ), ;, child]
[;, child, ., setParent, (, result, ), ;, }, return, result, ;, }, }]
[;, child, ., setParent, (, result, ), ;, }, return, result, ;, }, }]
[., next, (, ), ;, child, ., setParent, (, result, ), ;, }, return, result, ;, }, }]
[;, }, return, result, ;, }, }]
[., setParent, (, result, ), ;, }, return, result, ;, }, }]
[), ;, }, return, result, ;, }, }]
[;, }, }]
