[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler]
[;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[., traverse, (, compiler, ,, root, ,, new, Callback, (, ), ), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {]
[,, root, ,, new, Callback, (, ), ), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void]
[,, new, Callback, (, ), ), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (]
[), ;, }, private, class, Callback, extends, AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), {, return, ;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (, !, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING]
[), {, return, ;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (, !, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING]
[., isNew, (, ), ), {, return, ;, }, Node, objectName, =, n, ., getFirstChild, (, ), ;, if, (]
[;, if, (, !, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ., equals, (, objectName, ., getQualifiedName, (, ), ), ), {, return, ;]
[., getFirstChild, (, ), ;, if, (, !, ObjectPropertyStringPreprocess, ., EXTERN_OBJECT_PROPERTY_STRING, ., equals, (, objectName, ., getQualifiedName, (, ), )]
[), {, return, ;, }, Node, firstArgument, =, objectName, ., getNext, (, ), ;, Node, secondArgument, =, firstArgument, ., getNext]
[), {, return, ;, }, Node, firstArgument, =, objectName, ., getNext, (, ), ;, Node, secondArgument, =, firstArgument, ., getNext]
[., equals, (, objectName, ., getQualifiedName, (, ), ), ), {, return, ;, }, Node, firstArgument, =, objectName, ., getNext]
[., EXTERN_OBJECT_PROPERTY_STRING, ., equals, (, objectName, ., getQualifiedName, (, ), ), ), {, return, ;, }, Node, firstArgument, =, objectName]
[), ), {, return, ;, }, Node, firstArgument, =, objectName, ., getNext, (, ), ;, Node, secondArgument, =, firstArgument, .]
[., getQualifiedName, (, ), ), ), {, return, ;, }, Node, firstArgument, =, objectName, ., getNext, (, ), ;, Node]
[;, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =, secondArgument, ., getType, (, ), ;, if]
[., getNext, (, ), ;, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, int, secondArgumentType, =, secondArgument, ., getType]
[;, int, secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (, secondArgumentType, ==, Token, ., GETPROP, ), {, Node]
[., getNext, (, ), ;, int, secondArgumentType, =, secondArgument, ., getType, (, ), ;, if, (, secondArgumentType, ==, Token, .]
[;, if, (, secondArgumentType, ==, Token, ., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument]
[., getType, (, ), ;, if, (, secondArgumentType, ==, Token, ., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild]
[), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;, n, .]
[==, Token, ., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild]
[), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;, n, .]
[., GETPROP, ), {, Node, newChild, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;]
[;, secondArgument, ., removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild]
[., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, )]
[;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (]
[., removeChild, (, newChild, ), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument]
[), ;, n, ., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string]
[;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, )]
[., replaceChild, (, firstArgument, ,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, .]
[,, newChild, ), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getFirstChild, (, ), .]
[), ;, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getFirstChild, (, ), ., getString, (]
[;, }, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, )]
[., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, ), ), )]
[,, IR, ., string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, ), ), ), ;, }, else, if]
[), ;, }, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (]
[., string, (, secondArgument, ., getFirstChild, (, ), ., getString, (, ), ), ), ;, }, else, if, (, secondArgumentType]
[), ), ;, }, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild]
[., getString, (, ), ), ), ;, }, else, if, (, secondArgumentType, ==, Token, ., GETELEM, ), {, Node, newFirstArgument]
[., getFirstChild, (, ), ., getString, (, ), ), ), ;, }, else, if, (, secondArgumentType, ==, Token, ., GETELEM]
[), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument]
[==, Token, ., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument]
[), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument]
[., GETELEM, ), {, Node, newFirstArgument, =, secondArgument, ., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;]
[;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild]
[., getFirstChild, (, ), ;, secondArgument, ., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, )]
[;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild]
[., removeChild, (, newFirstArgument, ), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument]
[), ;, Node, newSecondArgument, =, secondArgument, ., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, .]
[;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild]
[., getLastChild, (, ), ;, secondArgument, ., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, )]
[;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }]
[., removeChild, (, newSecondArgument, ), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument]
[), ;, n, ., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;]
[;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,, IR]
[., replaceChild, (, firstArgument, ,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {]
[,, newFirstArgument, ), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (]
[), ;, n, ., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,]
[;, }, else, {, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getString, (, ), )]
[., replaceChild, (, secondArgument, ,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,, IR, ., string]
[,, newSecondArgument, ), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getString]
[), ;, }, else, {, n, ., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getString, (, )]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., replaceChild, (, secondArgument, ,, IR, ., string, (, secondArgument, ., getString, (, ), ), ), ;, }, compiler, .]
[,, IR, ., string, (, secondArgument, ., getString, (, ), ), ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., string, (, secondArgument, ., getString, (, ), ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }]
[), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[., getString, (, ), ), ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }]
[;, }, }, }]
[., reportCodeChange, (, ), ;, }, }, }]
