[,, options, ), ;, }, @, Override, void, add, (, Node, n, ,, Context, context, ), {, Node, parent, =]
[), ;, }, @, Override, void, add, (, Node, n, ,, Context, context, ), {, Node, parent, =, n, .]
[;, if, (, parent, !=, null, &&, (, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), )]
[., getParent, (, ), ;, if, (, parent, !=, null, &&, (, parent, ., isBlock, (, ), ||, parent, .]
[), {, if, (, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }]
[&&, (, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), ), ), {, if, (, n, .]
[!=, null, &&, (, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), ), ), {, if, (]
[&&, (, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), ), ), {, if, (, n, .]
[), {, if, (, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }]
[), ), {, if, (, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;]
[||, parent, ., isScript, (, ), ), ), {, if, (, n, ., isFunction, (, ), ), {, add, (]
[., isBlock, (, ), ||, parent, ., isScript, (, ), ), ), {, if, (, n, ., isFunction, (, )]
[), ), {, if, (, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;]
[., isScript, (, ), ), ), {, if, (, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (]
[), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (, n, ., isExprResult, (, ), &&]
[., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (, n, .]
[;, }, else, if, (, n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (, )]
[), ;, }, else, if, (, n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (]
[), ), ;, }, else, if, (, n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign]
[), {, Node, rhs, =, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, add, (, getTypeAnnotation, (, rhs]
[&&, n, ., getFirstChild, (, ), ., isAssign, (, ), ), {, Node, rhs, =, n, ., getFirstChild, (, )]
[., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (, ), ), {, Node, rhs, =, n]
[), {, Node, rhs, =, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, add, (, getTypeAnnotation, (, rhs]
[., isAssign, (, ), ), {, Node, rhs, =, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, add]
[., getFirstChild, (, ), ., isAssign, (, ), ), {, Node, rhs, =, n, ., getFirstChild, (, ), ., getLastChild]
[;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (, n, ., isVar, (, ), &&, n]
[., getLastChild, (, ), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (, n, ., isVar]
[., getFirstChild, (, ), ., getLastChild, (, ), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if]
[;, }, else, if, (, n, ., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, )]
[), ;, }, else, if, (, n, ., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (]
[), ), ;, }, else, if, (, n, ., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild]
[), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }]
[&&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, add, (, getTypeAnnotation, (, n, .]
[., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, add, (]
[), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }]
[!=, null, ), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;]
[., getFirstChild, (, ), !=, null, ), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (]
[., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (]
[), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }]
[;, }, }, super, ., add, (, n, ,, context, ), ;, }, private, String, getTypeAnnotation, (, Node, node, )]
[), ;, }, }, super, ., add, (, n, ,, context, ), ;, }, private, String, getTypeAnnotation, (, Node, node]
[), ), ;, }, }, super, ., add, (, n, ,, context, ), ;, }, private, String, getTypeAnnotation, (, Node]
[., getFirstChild, (, ), ), ), ;, }, }, super, ., add, (, n, ,, context, ), ;, }, private]
[., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }, super, ., add, (, n, ,, context]
[;, }, private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;]
[., add, (, n, ,, context, ), ;, }, private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =]
[,, context, ), ;, }, private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (]
[), ;, }, private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, )]
[;, if, (, jsdoc, ==, null, &&, !, node, ., isFunction, (, ), ), {, return, "", ;, }, JSType]
[., getBestJSDocInfo, (, node, ), ;, if, (, jsdoc, ==, null, &&, !, node, ., isFunction, (, ), ), {]
[), ;, if, (, jsdoc, ==, null, &&, !, node, ., isFunction, (, ), ), {, return, "", ;, }]
[), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (, type, ==, null]
[&&, !, node, ., isFunction, (, ), ), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (]
[==, null, &&, !, node, ., isFunction, (, ), ), {, return, "", ;, }, JSType, type, =, node, .]
[&&, !, node, ., isFunction, (, ), ), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (]
[), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (, type, ==, null]
[), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (, type, ==, null]
[., isFunction, (, ), ), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if]
[;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, return, ""]
[;, if, (, type, ==, null, ), {, return, "", ;, }, else, if, (, type, ., isFunctionType, (, )]
[., getJSType, (, ), ;, if, (, type, ==, null, ), {, return, "", ;, }, else, if, (, type]
[), {, return, "", ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, getFunctionAnnotation, (, node]
[==, null, ), {, return, "", ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, getFunctionAnnotation]
[), {, return, "", ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, getFunctionAnnotation, (, node]
[;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, getFunctionAnnotation, (, node, ), ;, }, else]
[), {, return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return]
[., isFunctionType, (, ), ), {, return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (]
[;, }, else, if, (, type, ., isEnumType, (, ), ), {, return, "/** @enum {", +, type, ., toMaybeEnumType, (, )]
[), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return, "/** @enum {", +, type, ., toMaybeEnumType, (]
[), {, return, "/** @enum {", +, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n"]
[., isEnumType, (, ), ), {, return, "/** @enum {", +, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString]
[;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !]
[+, "} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, )]
[+, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if]
[+, "} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, )]
[., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type]
[., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (]
[., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !]
[;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !]
[), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, {]
[&&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (]
[&&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node]
[&&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (]
[&&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (]
[., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !]
[&&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node]
[&&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node]
[., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {]
[&&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (]
[&&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (]
[., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node, ., getJSType, (]
[), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, {]
[), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, {]
[., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n"]
[;, }, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions, ., checkState]
[+, "} */\n", ;, }, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions]
[+, node, ., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, {, return, "", ;, }]
[+, "} */\n", ;, }, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions]
[., toAnnotationString, (, ), +, "} */\n", ;, }, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node]
[., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, {, return, "", ;, }, }, private]
[;, }, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions, ., checkState]
[;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions, ., checkState, (, fnNode, ., isFunction, (, )]
[;, StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if]
[., checkState, (, fnNode, ., isFunction, (, ), ), ;, StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType]
[), ;, StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;]
[., isFunction, (, ), ), ;, StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, .]
[;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (]
[), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType]
[;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType]
[., getJSType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, return, ""]
[), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null]
[||, type, ., isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, )]
[==, null, ||, type, ., isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType]
[||, type, ., isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, )]
[), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null]
[., isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if]
[;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null, ), {, Node, paramNode]
[;, if, (, fnNode, !=, null, ), {, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (]
[., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null, ), {, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (, fnNode]
[), {, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, for, (, Node, n]
[!=, null, ), {, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, for, (]
[), {, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, for, (, Node, n]
[;, for, (, Node, n, :, funType, ., getParameters, (, ), ), {, if, (, paramNode, ==, null, ), {]
[., getFirstChild, (, ), ;, for, (, Node, n, :, funType, ., getParameters, (, ), ), {, if, (, paramNode]
[., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, for, (, Node, n, :, funType, ., getParameters, (, )]
[), ., getFirstChild, (, ), ;, for, (, Node, n, :, funType, ., getParameters, (, ), ), {, if, (]
[), {, if, (, paramNode, ==, null, ), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation]
[., getParameters, (, ), ), {, if, (, paramNode, ==, null, ), {, break, ;, }, sb, ., append, (]
[), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (]
[==, null, ), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,]
[), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (]
[;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;, sb, ., append, (, " ", ), .]
[., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;, sb, .]
[), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;, sb, ., append, (, " ", )]
[;, sb, ., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n"]
[,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;, sb, ., append, (, " ", ), ., append, (, paramNode, .]
[,, getParameterNodeJSDocType, (, n, ), ), ;, sb, ., append, (, " ", ), ., append, (, paramNode, ., getString, (]
[), ;, sb, ., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (]
[), ), ;, sb, ., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append]
[;, paramNode, =, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;]
[., append, (, "\n", ), ;, paramNode, =, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType]
[., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n", ), ;, paramNode, =, paramNode, ., getNext]
[., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n", ), ;]
[), ., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n", ), ;, paramNode, =, paramNode, .]
[), ., append, (, "\n", ), ;, paramNode, =, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =]
[., getString, (, ), ), ., append, (, "\n", ), ;, paramNode, =, paramNode, ., getNext, (, ), ;, }]
[), ;, paramNode, =, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, )]
[=, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (]
[;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (, retType, !=, null, &&, !, retType]
[., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (, retType, !=]
[;, if, (, retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, )]
[., getReturnType, (, ), ;, if, (, retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&, !, retType]
[), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, )]
[&&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[&&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (]
[!=, null, &&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {, sb, .]
[&&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (]
[&&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[&&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;]
[), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, )]
[), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, )]
[., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType]
[;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", )]
[., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb]
[), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n"]
[;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ||, funType, ., isInterface]
[,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (]
[,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, .]
[), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ||, funType, .]
[., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (]
[;, }, if, (, funType, ., isConstructor, (, ), ||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =]
[., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ||, funType, ., isInterface, (, )]
[), ;, }, if, (, funType, ., isConstructor, (, ), ||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor]
[), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=, null, ), {, ObjectType, superInstance]
[||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor]
[., isConstructor, (, ), ||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, )]
[), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=, null, ), {, ObjectType, superInstance]
[., isInterface, (, ), ), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=, null]
[;, if, (, superConstructor, !=, null, ), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, )]
[., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=, null, ), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, )]
[), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !, superInstance, .]
[!=, null, ), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !]
[), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !, superInstance, .]
[;, if, (, !, superInstance, ., toString, (, ), ., equals, (, "Object", ), ), {, sb, ., append, (]
[., getInstanceType, (, ), ;, if, (, !, superInstance, ., toString, (, ), ., equals, (, "Object", ), ), {]
[., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !, superInstance, ., toString, (, ), ., equals, (]
[), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, )]
[), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, )]
[., equals, (, "Object", ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,]
[., toString, (, ), ., equals, (, "Object", ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (]
[), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (]
[;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", )]
[., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, ), ), ;, sb]
[), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n"]
[;, sb, ., append, (, "\n", ), ;, }, }, if, (, funType, ., isInterface, (, ), ), {, for]
[,, "extends", ,, superInstance, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, if]
[,, superInstance, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, if, (, funType]
[), ;, sb, ., append, (, "\n", ), ;, }, }, if, (, funType, ., isInterface, (, ), ), {]
[., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, if, (, funType, ., isInterface]
[;, }, }, if, (, funType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces]
[., append, (, "\n", ), ;, }, }, if, (, funType, ., isInterface, (, ), ), {, for, (, ObjectType]
[), ;, }, }, if, (, funType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, funType, .]
[), {, for, (, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {, sb, ., append, (, " * ", )]
[., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {, sb, .]
[), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, )]
[., getExtendedInterfaces, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType]
[;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", )]
[., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, ), ), ;, sb]
[), ;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n"]
[;, sb, ., append, (, "\n", ), ;, }, }, Set, <, String, >, interfaces, =, Sets, ., newTreeSet, (]
[,, "extends", ,, interfaceType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, Set]
[,, interfaceType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, Set, <, String]
[), ;, sb, ., append, (, "\n", ), ;, }, }, Set, <, String, >, interfaces, =, Sets, ., newTreeSet]
[., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, Set, <, String, >, interfaces]
[;, }, }, Set, <, String, >, interfaces, =, Sets, ., newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :]
[., append, (, "\n", ), ;, }, }, Set, <, String, >, interfaces, =, Sets, ., newTreeSet, (, ), ;]
[), ;, }, }, Set, <, String, >, interfaces, =, Sets, ., newTreeSet, (, ), ;, for, (, ObjectType, interfaze]
[;, for, (, ObjectType, interfaze, :, funType, ., getImplementedInterfaces, (, ), ), {, interfaces, ., add, (, interfaze, ., toAnnotationString]
[., newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :, funType, ., getImplementedInterfaces, (, ), ), {, interfaces, ., add]
[), {, interfaces, ., add, (, interfaze, ., toAnnotationString, (, ), ), ;, }, for, (, String, interfaze, :, interfaces]
[., getImplementedInterfaces, (, ), ), {, interfaces, ., add, (, interfaze, ., toAnnotationString, (, ), ), ;, }, for, (]
[;, }, for, (, String, interfaze, :, interfaces, ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb]
[., add, (, interfaze, ., toAnnotationString, (, ), ), ;, }, for, (, String, interfaze, :, interfaces, ), {, sb]
[), ;, }, for, (, String, interfaze, :, interfaces, ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (]
[., toAnnotationString, (, ), ), ;, }, for, (, String, interfaze, :, interfaces, ), {, sb, ., append, (, " * "]
[), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;, sb, .]
[;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if, (]
[., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;, sb, ., append, (, "\n"]
[), ;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if]
[;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ), {, sb, .]
[,, "implements", ,, interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (]
[,, interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), )]
[), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ), {, sb]
[;, }, if, (, funType, ., isConstructor, (, ), ), {, sb, ., append, (, " * @constructor\n", ), ;, }, else]
[., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ), {, sb, ., append, (]
[), ;, }, if, (, funType, ., isConstructor, (, ), ), {, sb, ., append, (, " * @constructor\n", ), ;, }]
[), {, sb, ., append, (, " * @constructor\n", ), ;, }, else, if, (, funType, ., isInterface, (, ), ), {]
[., isConstructor, (, ), ), {, sb, ., append, (, " * @constructor\n", ), ;, }, else, if, (, funType, ., isInterface]
[;, }, else, if, (, funType, ., isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }]
[., append, (, " * @constructor\n", ), ;, }, else, if, (, funType, ., isInterface, (, ), ), {, sb, ., append]
[), ;, }, else, if, (, funType, ., isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;]
[), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp]
[., isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=, null]
[;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb]
[., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (, Node, .]
[), ;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {]
[), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (, " */\n", ), ;, return, sb, .]
[&&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb]
[!=, null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;]
[&&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb]
[), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (, " */\n", ), ;, return, sb, .]
[., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append]
[), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (, " */\n", ), ;, return, sb]
[., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (, " */\n", ), ;]
[;, }, sb, ., append, (, " */\n", ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendAnnotation]
[., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (, " */\n", ), ;, return, sb, ., toString, (, )]
[), ;, }, sb, ., append, (, " */\n", ), ;, return, sb, ., toString, (, ), ;, }, private, void]
[;, return, sb, ., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String]
[., append, (, " */\n", ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb]
[), ;, return, sb, ., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,]
[;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {, sb, ., append, (]
[., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {]
[;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =, parameterNode, ., getJSType, (, ), ;, String]
[., append, (, "}", ), ;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =, parameterNode, .]
[., append, (, type, ), ., append, (, "}", ), ;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, ), {]
[., append, (, " {", ), ., append, (, type, ), ., append, (, "}", ), ;, }, private, String, getParameterNodeJSDocType]
[., append, (, name, ), ., append, (, " {", ), ., append, (, type, ), ., append, (, "}", )]
[., append, (, "@", ), ., append, (, name, ), ., append, (, " {", ), ., append, (, type, )]
[), ., append, (, name, ), ., append, (, " {", ), ., append, (, type, ), ., append, (, "}"]
[), ., append, (, " {", ), ., append, (, type, ), ., append, (, "}", ), ;, }, private, String]
[), ., append, (, type, ), ., append, (, "}", ), ;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, )]
[), ., append, (, "}", ), ;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =, parameterNode]
[), ;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =, parameterNode, ., getJSType, (, ), ;]
[;, String, typeString, ;, if, (, parameterType, ., isUnknownType, (, ), ), {, typeString, =, "*", ;, }, else, {]
[., getJSType, (, ), ;, String, typeString, ;, if, (, parameterType, ., isUnknownType, (, ), ), {, typeString, =, "*"]
[), {, typeString, =, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =]
[., isUnknownType, (, ), ), {, typeString, =, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, )]
[=, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =, parameterType, ., restrictByNotNullOrUndefined]
[;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =, parameterType, ., restrictByNotNullOrUndefined, (, )]
[), {, typeString, =, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +, "=", ;, }, else, if, (]
[., isOptionalArg, (, ), ), {, typeString, =, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +, "=", ;]
[=, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs]
[;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =, "...", +, parameterType, ., restrictByNotNullOrUndefined, (]
[+, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =, "...", +, parameterType, .]
[., toAnnotationString, (, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =]
[., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, )]
[;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =, "...", +, parameterType, ., restrictByNotNullOrUndefined, (]
[), {, typeString, =, "...", +, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;, }, else, {, typeString]
[., isVarArgs, (, ), ), {, typeString, =, "...", +, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;]
[=, "...", +, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;, }, else, {, typeString, =, parameterType, .]
[;, }, else, {, typeString, =, parameterType, ., toAnnotationString, (, ), ;, }, }, return, typeString, ;, }, }]
[+, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;, }, else, {, typeString, =, parameterType, ., toAnnotationString, (]
[;, }, else, {, typeString, =, parameterType, ., toAnnotationString, (, ), ;, }, }, return, typeString, ;, }, }]
[., toAnnotationString, (, ), ;, }, else, {, typeString, =, parameterType, ., toAnnotationString, (, ), ;, }, }, return, typeString]
[., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;, }, else, {, typeString, =, parameterType, ., toAnnotationString, (, ), ;]
[=, parameterType, ., toAnnotationString, (, ), ;, }, }, return, typeString, ;, }, }]
[;, }, }, return, typeString, ;, }, }]
[., toAnnotationString, (, ), ;, }, }, return, typeString, ;, }, }]
[;, }, }]
