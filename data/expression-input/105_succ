[=, (, values, ==, null, ), ?, null, :, values, ., clone, (, ), ;, }, public, double, [, ]]
[;, }, public, double, [, ], getData, (, ), {, return, (, storedData, ==, null, ), ?, null, :, storedData]
[?, null, :, values, ., clone, (, ), ;, }, public, double, [, ], getData, (, ), {, return, (]
[), ?, null, :, values, ., clone, (, ), ;, }, public, double, [, ], getData, (, ), {, return]
[==, null, ), ?, null, :, values, ., clone, (, ), ;, }, public, double, [, ], getData, (, )]
[), ?, null, :, values, ., clone, (, ), ;, }, public, double, [, ], getData, (, ), {, return]
[:, values, ., clone, (, ), ;, }, public, double, [, ], getData, (, ), {, return, (, storedData, ==]
[;, }, public, double, [, ], getData, (, ), {, return, (, storedData, ==, null, ), ?, null, :, storedData]
[., clone, (, ), ;, }, public, double, [, ], getData, (, ), {, return, (, storedData, ==, null, )]
[;, }, protected, double, [, ], getDataRef, (, ), {, return, storedData, ;, }, public, void, setData, (, final, double]
[?, null, :, storedData, ., clone, (, ), ;, }, protected, double, [, ], getDataRef, (, ), {, return, storedData]
[), ?, null, :, storedData, ., clone, (, ), ;, }, protected, double, [, ], getDataRef, (, ), {, return]
[==, null, ), ?, null, :, storedData, ., clone, (, ), ;, }, protected, double, [, ], getDataRef, (, )]
[), ?, null, :, storedData, ., clone, (, ), ;, }, protected, double, [, ], getDataRef, (, ), {, return]
[:, storedData, ., clone, (, ), ;, }, protected, double, [, ], getDataRef, (, ), {, return, storedData, ;, }]
[;, }, protected, double, [, ], getDataRef, (, ), {, return, storedData, ;, }, public, void, setData, (, final, double]
[., clone, (, ), ;, }, protected, double, [, ], getDataRef, (, ), {, return, storedData, ;, }, public, void]
[;, }, public, void, setData, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, )]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, )]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw]
[;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;]
[), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, )]
[., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;, }, if, (, length, <, 0, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;, }, if, (, length, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;, }, if, (, length, <, 0, )]
[;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;]
[,, begin, ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,]
[., START_POSITION, ,, begin, ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, )]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;, }, if, (, begin, +, length, >]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;, }, if, (, begin, +]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;, }, if, (, begin, +, length, >]
[;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END]
[,, length, ), ;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (]
[., LENGTH, ,, length, ), ;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new]
[), ;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, .]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,, true, )]
[>, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, .]
[+, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,]
[>, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, .]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,, true, )]
[., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,]
[;, }, storedData, =, new, double, [, length, ], ;, System, ., arraycopy, (, values, ,, begin, ,, storedData, ,]
[,, begin, +, length, ,, values, ., length, ,, true, ), ;, }, storedData, =, new, double, [, length, ]]
[., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,, true, ), ;, }, storedData, =, new, double, []
[,, values, ., length, ,, true, ), ;, }, storedData, =, new, double, [, length, ], ;, System, ., arraycopy]
[+, length, ,, values, ., length, ,, true, ), ;, }, storedData, =, new, double, [, length, ], ;, System]
[,, values, ., length, ,, true, ), ;, }, storedData, =, new, double, [, length, ], ;, System, ., arraycopy]
[,, true, ), ;, }, storedData, =, new, double, [, length, ], ;, System, ., arraycopy, (, values, ,, begin]
[., length, ,, true, ), ;, }, storedData, =, new, double, [, length, ], ;, System, ., arraycopy, (, values]
[), ;, }, storedData, =, new, double, [, length, ], ;, System, ., arraycopy, (, values, ,, begin, ,, storedData]
[=, new, double, [, length, ], ;, System, ., arraycopy, (, values, ,, begin, ,, storedData, ,, 0, ,, length]
[;, System, ., arraycopy, (, values, ,, begin, ,, storedData, ,, 0, ,, length, ), ;, }, public, double, evaluate]
[], ;, System, ., arraycopy, (, values, ,, begin, ,, storedData, ,, 0, ,, length, ), ;, }, public, double]
[;, }, public, double, evaluate, (, ), throws, MathIllegalArgumentException, {, return, evaluate, (, storedData, ), ;, }, public, double, evaluate]
[., arraycopy, (, values, ,, begin, ,, storedData, ,, 0, ,, length, ), ;, }, public, double, evaluate, (, )]
[,, begin, ,, storedData, ,, 0, ,, length, ), ;, }, public, double, evaluate, (, ), throws, MathIllegalArgumentException, {, return]
[,, storedData, ,, 0, ,, length, ), ;, }, public, double, evaluate, (, ), throws, MathIllegalArgumentException, {, return, evaluate, (]
[,, 0, ,, length, ), ;, }, public, double, evaluate, (, ), throws, MathIllegalArgumentException, {, return, evaluate, (, storedData, )]
[,, length, ), ;, }, public, double, evaluate, (, ), throws, MathIllegalArgumentException, {, return, evaluate, (, storedData, ), ;, }]
[), ;, }, public, double, evaluate, (, ), throws, MathIllegalArgumentException, {, return, evaluate, (, storedData, ), ;, }, public, double]
[;, }, public, double, evaluate, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, test, (, values, ,, 0]
[), ;, }, public, double, evaluate, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, test, (, values, ,]
[;, return, evaluate, (, values, ,, 0, ,, values, ., length, ), ;, }, public, abstract, double, evaluate, (, final]
[,, 0, ,, 0, ), ;, return, evaluate, (, values, ,, 0, ,, values, ., length, ), ;, }, public]
[,, 0, ), ;, return, evaluate, (, values, ,, 0, ,, values, ., length, ), ;, }, public, abstract, double]
[), ;, return, evaluate, (, values, ,, 0, ,, values, ., length, ), ;, }, public, abstract, double, evaluate, (]
[;, }, public, abstract, double, evaluate, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[,, 0, ,, values, ., length, ), ;, }, public, abstract, double, evaluate, (, final, double, [, ], values, ,]
[,, values, ., length, ), ;, }, public, abstract, double, evaluate, (, final, double, [, ], values, ,, final, int]
[), ;, }, public, abstract, double, evaluate, (, final, double, [, ], values, ,, final, int, begin, ,, final, int]
[., length, ), ;, }, public, abstract, double, evaluate, (, final, double, [, ], values, ,, final, int, begin, ,]
[;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ,]
[,, begin, ,, length, ,, false, ), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final]
[,, length, ,, false, ), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, int, begin]
[,, false, ), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, int, begin, ,, final]
[), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, )]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw]
[;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;]
[), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, )]
[., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;, }, if, (, length, <, 0, )]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;, }, if, (, length, <]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, begin, ), ;, }, if, (, length, <, 0, )]
[;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;]
[,, begin, ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,]
[., START_POSITION, ,, begin, ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, )]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;, }, if, (, begin, +, length, >]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;, }, if, (, begin, +]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, length, ), ;, }, if, (, begin, +, length, >]
[;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END]
[,, length, ), ;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (]
[., LENGTH, ,, length, ), ;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new]
[), ;, }, if, (, begin, +, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, .]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,, true, )]
[>, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, .]
[+, length, >, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,]
[>, values, ., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, .]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,, true, )]
[., length, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,]
[;, }, if, (, length, ==, 0, &&, !, allowEmpty, ), {, return, false, ;, }, return, true, ;, }]
[,, begin, +, length, ,, values, ., length, ,, true, ), ;, }, if, (, length, ==, 0, &&, !]
[., SUBARRAY_ENDS_AFTER_ARRAY_END, ,, begin, +, length, ,, values, ., length, ,, true, ), ;, }, if, (, length, ==, 0]
[,, values, ., length, ,, true, ), ;, }, if, (, length, ==, 0, &&, !, allowEmpty, ), {, return]
[+, length, ,, values, ., length, ,, true, ), ;, }, if, (, length, ==, 0, &&, !, allowEmpty, )]
[,, values, ., length, ,, true, ), ;, }, if, (, length, ==, 0, &&, !, allowEmpty, ), {, return]
[,, true, ), ;, }, if, (, length, ==, 0, &&, !, allowEmpty, ), {, return, false, ;, }, return]
[., length, ,, true, ), ;, }, if, (, length, ==, 0, &&, !, allowEmpty, ), {, return, false, ;]
[), ;, }, if, (, length, ==, 0, &&, !, allowEmpty, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, protected, boolean, test, (, final, double, [, ], values, ,]
[&&, !, allowEmpty, ), {, return, false, ;, }, return, true, ;, }, protected, boolean, test, (, final, double, []
[==, 0, &&, !, allowEmpty, ), {, return, false, ;, }, return, true, ;, }, protected, boolean, test, (, final]
[&&, !, allowEmpty, ), {, return, false, ;, }, return, true, ;, }, protected, boolean, test, (, final, double, []
[), {, return, false, ;, }, return, true, ;, }, protected, boolean, test, (, final, double, [, ], values, ,]
[), {, return, false, ;, }, return, true, ;, }, protected, boolean, test, (, final, double, [, ], values, ,]
[;, }, return, true, ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, double, [, ]]
[;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, double, [, ], weights, ,, final, int]
[;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, double, [, ], weights, ,, final, int]
[,, weights, ,, begin, ,, length, ,, false, ), ;, }, protected, boolean, test, (, final, double, [, ], values]
[,, begin, ,, length, ,, false, ), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final]
[,, length, ,, false, ), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, double, []
[,, false, ), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, double, [, ], weights]
[), ;, }, protected, boolean, test, (, final, double, [, ], values, ,, final, double, [, ], weights, ,, final]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, weights, ., length, !=, values, .]
[||, values, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, weights, .]
[==, null, ||, values, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (]
[||, values, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, weights, .]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, weights, ., length, !=, values, .]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, weights, ., length, !=]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, weights, ., length, !=, values, .]
[;, }, if, (, weights, ., length, !=, values, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length]
[), ;, }, if, (, weights, ., length, !=, values, ., length, ), {, throw, new, DimensionMismatchException, (, weights, .]
[., INPUT_ARRAY, ), ;, }, if, (, weights, ., length, !=, values, ., length, ), {, throw, new, DimensionMismatchException, (]
[), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, values, ., length, ), ;, }, boolean, containsPositiveWeight, =, false]
[!=, values, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, values, ., length, ), ;, }]
[., length, !=, values, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, values, ., length, )]
[), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, values, ., length, ), ;, }, boolean, containsPositiveWeight, =, false]
[., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, values, ., length, ), ;, }, boolean, containsPositiveWeight]
[;, }, boolean, containsPositiveWeight, =, false, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[,, values, ., length, ), ;, }, boolean, containsPositiveWeight, =, false, ;, for, (, int, i, =, begin, ;, i]
[., length, ,, values, ., length, ), ;, }, boolean, containsPositiveWeight, =, false, ;, for, (, int, i, =, begin]
[), ;, }, boolean, containsPositiveWeight, =, false, ;, for, (, int, i, =, begin, ;, i, <, begin, +, length]
[., length, ), ;, }, boolean, containsPositiveWeight, =, false, ;, for, (, int, i, =, begin, ;, i, <, begin]
[;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, if, (]
[;, i, <, begin, +, length, ;, i, ++, ), {, if, (, Double, ., isNaN, (, weights, [, i]
[;, i, ++, ), {, if, (, Double, ., isNaN, (, weights, [, i, ], ), ), {, throw, new]
[<, begin, +, length, ;, i, ++, ), {, if, (, Double, ., isNaN, (, weights, [, i, ], )]
[;, i, ++, ), {, if, (, Double, ., isNaN, (, weights, [, i, ], ), ), {, throw, new]
[+, length, ;, i, ++, ), {, if, (, Double, ., isNaN, (, weights, [, i, ], ), ), {]
[;, i, ++, ), {, if, (, Double, ., isNaN, (, weights, [, i, ], ), ), {, throw, new]
[), {, if, (, Double, ., isNaN, (, weights, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[++, ), {, if, (, Double, ., isNaN, (, weights, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_ELEMENT_AT_INDEX, ,, i, ), ;, }, if, (, Double, ., isInfinite, (]
[., isNaN, (, weights, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_ELEMENT_AT_INDEX, ,, i, )]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_ELEMENT_AT_INDEX, ,, i, ), ;, }, if, (, Double, ., isInfinite]
[[, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_ELEMENT_AT_INDEX, ,, i, ), ;, }, if, (]
[], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NAN_ELEMENT_AT_INDEX, ,, i, ), ;, }, if, (, Double, .]
[;, }, if, (, Double, ., isInfinite, (, weights, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[,, i, ), ;, }, if, (, Double, ., isInfinite, (, weights, [, i, ], ), ), {, throw, new]
[., NAN_ELEMENT_AT_INDEX, ,, i, ), ;, }, if, (, Double, ., isInfinite, (, weights, [, i, ], ), ), {]
[), ;, }, if, (, Double, ., isInfinite, (, weights, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, weights, [, i, ], ,, i, ), ;, }, if]
[., isInfinite, (, weights, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, weights, []
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, weights, [, i, ], ,, i, ), ;, }]
[[, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, weights, [, i, ], ,, i]
[], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, weights, [, i, ], ,, i, ), ;]
[;, }, if, (, weights, [, i, ], <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_ELEMENT_AT_INDEX, ,]
[,, weights, [, i, ], ,, i, ), ;, }, if, (, weights, [, i, ], <, 0, ), {]
[., INFINITE_ARRAY_ELEMENT, ,, weights, [, i, ], ,, i, ), ;, }, if, (, weights, [, i, ], <, 0]
[,, i, ), ;, }, if, (, weights, [, i, ], <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[[, i, ], ,, i, ), ;, }, if, (, weights, [, i, ], <, 0, ), {, throw, new]
[], ,, i, ), ;, }, if, (, weights, [, i, ], <, 0, ), {, throw, new, MathIllegalArgumentException, (]
[), ;, }, if, (, weights, [, i, ], <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_ELEMENT_AT_INDEX]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_ELEMENT_AT_INDEX, ,, i, ,, weights, [, i, ], ), ;, }, if]
[<, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_ELEMENT_AT_INDEX, ,, i, ,, weights, [, i, ], ), ;]
[[, i, ], <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_ELEMENT_AT_INDEX, ,, i, ,, weights, [, i]
[], <, 0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_ELEMENT_AT_INDEX, ,, i, ,, weights, [, i, ], )]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NEGATIVE_ELEMENT_AT_INDEX, ,, i, ,, weights, [, i, ], ), ;, }, if]
[;, }, if, (, !, containsPositiveWeight, &&, weights, [, i, ], >, 0.0, ), {, containsPositiveWeight, =, true, ;, }]
[,, i, ,, weights, [, i, ], ), ;, }, if, (, !, containsPositiveWeight, &&, weights, [, i, ], >]
[., NEGATIVE_ELEMENT_AT_INDEX, ,, i, ,, weights, [, i, ], ), ;, }, if, (, !, containsPositiveWeight, &&, weights, [, i]
[,, weights, [, i, ], ), ;, }, if, (, !, containsPositiveWeight, &&, weights, [, i, ], >, 0.0, )]
[), ;, }, if, (, !, containsPositiveWeight, &&, weights, [, i, ], >, 0.0, ), {, containsPositiveWeight, =, true, ;]
[[, i, ], ), ;, }, if, (, !, containsPositiveWeight, &&, weights, [, i, ], >, 0.0, ), {, containsPositiveWeight]
[], ), ;, }, if, (, !, containsPositiveWeight, &&, weights, [, i, ], >, 0.0, ), {, containsPositiveWeight, =, true]
[), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[&&, weights, [, i, ], >, 0.0, ), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, )]
[&&, weights, [, i, ], >, 0.0, ), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, )]
[), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[>, 0.0, ), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, ), {, throw, new, MathIllegalArgumentException, (]
[[, i, ], >, 0.0, ), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, ), {, throw]
[], >, 0.0, ), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, ), {, throw, new, MathIllegalArgumentException]
[), {, containsPositiveWeight, =, true, ;, }, }, if, (, !, containsPositiveWeight, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[=, true, ;, }, }, if, (, !, containsPositiveWeight, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., WEIGHT_AT_LEAST_ONE_NON_ZERO, ), ;]
[;, }, }, if, (, !, containsPositiveWeight, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., WEIGHT_AT_LEAST_ONE_NON_ZERO, ), ;, }, return]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., WEIGHT_AT_LEAST_ONE_NON_ZERO, ), ;, }, return, test, (, values, ,, begin, ,, length]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., WEIGHT_AT_LEAST_ONE_NON_ZERO, ), ;, }, return, test, (, values, ,, begin, ,, length]
[;, }, return, test, (, values, ,, begin, ,, length, ,, allowEmpty, ), ;, }, }]
[), ;, }, return, test, (, values, ,, begin, ,, length, ,, allowEmpty, ), ;, }, }]
[., WEIGHT_AT_LEAST_ONE_NON_ZERO, ), ;, }, return, test, (, values, ,, begin, ,, length, ,, allowEmpty, ), ;, }, }]
[;, }, }]
[,, begin, ,, length, ,, allowEmpty, ), ;, }, }]
[,, length, ,, allowEmpty, ), ;, }, }]
[,, allowEmpty, ), ;, }, }]
[), ;, }, }]
