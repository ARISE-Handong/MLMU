[;, for, (, String, line, =, in, ., readLine, (, ), ;, line, !=, null, ;, line, =, in, .]
[;, line, !=, null, ;, line, =, in, ., readLine, (, ), ), {, lines, ., add, (, line, )]
[., readLine, (, ), ;, line, !=, null, ;, line, =, in, ., readLine, (, ), ), {, lines, .]
[;, line, =, in, ., readLine, (, ), ), {, lines, ., add, (, line, ), ;, }, int, []
[!=, null, ;, line, =, in, ., readLine, (, ), ), {, lines, ., add, (, line, ), ;, }]
[;, line, =, in, ., readLine, (, ), ), {, lines, ., add, (, line, ), ;, }, int, []
[=, in, ., readLine, (, ), ), {, lines, ., add, (, line, ), ;, }, int, [, ], index]
[), {, lines, ., add, (, line, ), ;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,, lines]
[., readLine, (, ), ), {, lines, ., add, (, line, ), ;, }, int, [, ], index, =, findLineNumbers]
[;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if, (, index, ==, null, )]
[., add, (, line, ), ;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if]
[), ;, }, int, [, ], index, =, findLineNumbers, (, "Data", ,, lines, ), ;, if, (, index, ==, null]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =]
[,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this]
[), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations]
[), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -, index]
[==, null, ), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ]]
[), {, throw, new, AssertionError, (, "could not find line indices for data", ), ;, }, this, ., numObservations, =, index, [, 1, ], -, index]
[;, }, this, ., numObservations, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;, this, .]
[), ;, }, this, ., numObservations, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;, this]
[=, index, [, 1, ], -, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, []
[., numObservations, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;, this, ., x, =, new]
[;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new, double, []
[+, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new]
[-, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;]
[[, 1, ], -, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, [, this, .]
[], -, index, [, 0, ], +, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ]]
[+, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new]
[[, 0, ], +, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, .]
[], +, 1, ;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =]
[;, this, ., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new, double, []
[=, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new, double, [, this, ., numObservations, ]]
[., x, =, new, double, [, this, ., numObservations, ], ;, this, ., y, =, new, double, [, this, .]
[;, this, ., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;]
[], ;, this, ., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0]
[., numObservations, ], ;, this, ., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i]
[=, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;, i, <, this, .]
[., y, =, new, double, [, this, ., numObservations, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String]
[], ;, for, (, int, i, =, 0, ;, i, <, this, ., numObservations, ;, i, ++, ), {, final]
[., numObservations, ], ;, for, (, int, i, =, 0, ;, i, <, this, ., numObservations, ;, i, ++, )]
[;, i, <, this, ., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index]
[;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -]
[<, this, ., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0]
[;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -]
[., numObservations, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +]
[), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;]
[++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -, 1, )]
[;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, this, .]
[., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =, line]
[), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, this]
[-, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", )]
[+, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (]
[[, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, )]
[], +, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split]
[-, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", )]
[), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, this]
[;, this, ., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, .]
[., split, (, " ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0]
[., trim, (, ), ., split, (, " ++", ), ;, this, ., y, [, i, ], =, Double, ., parseDouble]
[), ;, this, ., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this]
[=, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =, Double, .]
[[, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ]]
[., y, [, i, ], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, []
[], =, Double, ., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =, Double]
[;, this, ., x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index]
[., parseDouble, (, tokens, [, 0, ], ), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (]
[), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }]
[[, 0, ], ), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ]]
[], ), ;, this, ., x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;]
[=, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, )]
[[, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values"]
[., x, [, i, ], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers]
[], =, Double, ., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines]
[;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new]
[., parseDouble, (, tokens, [, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if]
[), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {, throw]
[[, 1, ], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==, null]
[], ), ;, }, index, =, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {]
[=, findLineNumbers, (, "Starting Values", ,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values"]
[;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =]
[,, lines, ), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this]
[), ;, if, (, index, ==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters]
[), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, [, 1, ], -, index]
[==, null, ), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, [, 1, ]]
[), {, throw, new, AssertionError, (, "could not find line indices for starting values", ), ;, }, this, ., numParameters, =, index, [, 1, ], -, index]
[;, }, this, ., numParameters, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;, double, []
[), ;, }, this, ., numParameters, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;, double]
[=, index, [, 1, ], -, index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =]
[., numParameters, =, index, [, 1, ], -, index, [, 0, ], +, 1, ;, double, [, ], [, ]]
[;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, [, numParameters, ], ;]
[+, 1, ;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, [, numParameters]
[-, index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =, null, ;, this, ., a]
[[, 1, ], -, index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =, null, ;]
[], -, index, [, 0, ], +, 1, ;, double, [, ], [, ], start, =, null, ;, this, .]
[+, 1, ;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, [, numParameters]
[[, 0, ], +, 1, ;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new]
[], +, 1, ;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, []
[;, double, [, ], [, ], start, =, null, ;, this, ., a, =, new, double, [, numParameters, ], ;]
[;, this, ., a, =, new, double, [, numParameters, ], ;, this, ., sigA, =, new, double, [, numParameters, ]]
[=, new, double, [, numParameters, ], ;, this, ., sigA, =, new, double, [, numParameters, ], ;, for, (, int]
[., a, =, new, double, [, numParameters, ], ;, this, ., sigA, =, new, double, [, numParameters, ], ;, for]
[;, this, ., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;, i, <]
[], ;, this, ., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;, i]
[=, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;, i, <, numParameters, ;, i, ++]
[., sigA, =, new, double, [, numParameters, ], ;, for, (, int, i, =, 0, ;, i, <, numParameters, ;]
[;, for, (, int, i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =]
[], ;, for, (, int, i, =, 0, ;, i, <, numParameters, ;, i, ++, ), {, final, String, line]
[;, i, <, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0]
[;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -]
[<, numParameters, ;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +]
[;, i, ++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -]
[), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -, 1, ), ;]
[++, ), {, final, String, line, =, lines, ., get, (, index, [, 0, ], +, i, -, 1, )]
[;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, if, (]
[., get, (, index, [, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =, line]
[), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, if]
[-, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", )]
[+, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (]
[[, 0, ], +, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, )]
[], +, i, -, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split]
[-, 1, ), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", )]
[), ;, final, String, [, ], tokens, =, line, ., trim, (, ), ., split, (, " ++", ), ;, if]
[;, if, (, start, ==, null, ), {, start, =, new, double, [, tokens, ., length, -, 4, ], []
[., split, (, " ++", ), ;, if, (, start, ==, null, ), {, start, =, new, double, [, tokens, .]
[., trim, (, ), ., split, (, " ++", ), ;, if, (, start, ==, null, ), {, start, =, new]
[), ;, if, (, start, ==, null, ), {, start, =, new, double, [, tokens, ., length, -, 4, ]]
[), {, start, =, new, double, [, tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (]
[==, null, ), {, start, =, new, double, [, tokens, ., length, -, 4, ], [, numParameters, ], ;, }]
[), {, start, =, new, double, [, tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (]
[=, new, double, [, tokens, ., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =]
[;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++, )]
[], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2]
[-, 4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length]
[., length, -, 4, ], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <, tokens]
[], [, numParameters, ], ;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2]
[], ;, }, for, (, int, j, =, 2, ;, j, <, tokens, ., length, -, 2, ;, j, ++]
[;, j, <, tokens, ., length, -, 2, ;, j, ++, ), {, start, [, j, -, 2, ], []
[;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens]
[<, tokens, ., length, -, 2, ;, j, ++, ), {, start, [, j, -, 2, ], [, i, ]]
[;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens]
[-, 2, ;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble]
[., length, -, 2, ;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double]
[;, j, ++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens]
[), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ]]
[++, ), {, start, [, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, [, j]
[=, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =, Double]
[[, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i]
[[, j, -, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }]
[], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, []
[-, 2, ], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, .]
[], [, i, ], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, []
[], =, Double, ., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =]
[;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2]
[., parseDouble, (, tokens, [, j, ], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble]
[), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -]
[[, j, ], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens]
[], ), ;, }, this, ., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length]
[=, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;, this, ., sigA, [, i]
[[, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;, this, .]
[., a, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;]
[], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;, this, ., sigA, []
[;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ]]
[., parseDouble, (, tokens, [, tokens, ., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =]
[), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1]
[[, tokens, ., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (]
[], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -]
[-, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, .]
[., length, -, 2, ], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, []
[], ), ;, this, ., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -]
[=, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if, (, start, ==]
[[, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if]
[., sigA, [, i, ], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;]
[], =, Double, ., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if, (, start]
[;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints]
[., parseDouble, (, tokens, [, tokens, ., length, -, 1, ], ), ;, }, if, (, start, ==, null, )]
[), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, .]
[[, tokens, ., length, -, 1, ], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException]
[], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this]
[-, 1, ], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;]
[., length, -, 1, ], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values"]
[], ), ;, }, if, (, start, ==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this]
[), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =, start, ., length, ;, this, .]
[==, null, ), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =, start, ., length, ;]
[), {, throw, new, IOException, (, "could not find starting values", ), ;, }, this, ., numStartingPoints, =, start, ., length, ;, this, .]
[;, }, this, ., numStartingPoints, =, start, ., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =, Double]
[), ;, }, this, ., numStartingPoints, =, start, ., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =]
[=, start, ., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString]
[., numStartingPoints, =, start, ., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =, Double, ., NaN, ;]
[;, this, ., startingValues, =, start, ;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString, =, null, ;, for]
[., length, ;, this, ., startingValues, =, start, ;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString, =, null]
[=, start, ;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString, =, null, ;, for, (, String, line, :]
[., startingValues, =, start, ;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString, =, null, ;, for, (, String]
[;, double, dummyDouble, =, Double, ., NaN, ;, String, dummyString, =, null, ;, for, (, String, line, :, lines, )]
[;, String, dummyString, =, null, ;, for, (, String, line, :, lines, ), {, if, (, line, ., contains, (]
[., NaN, ;, String, dummyString, =, null, ;, for, (, String, line, :, lines, ), {, if, (, line, .]
[;, for, (, String, line, :, lines, ), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString]
[), {, if, (, line, ., contains, (, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (, line, .]
[), {, dummyString, =, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,, line, ., indexOf]
[., contains, (, "Dataset Name:", ), ), {, dummyString, =, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +]
[), ), {, dummyString, =, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,, line, .]
[=, line, ., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,, line, ., indexOf, (, "(", )]
[;, }, if, (, line, ., contains, (, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =, line, .]
[., trim, (, ), ;, }, if, (, line, ., contains, (, "Residual Sum of Squares", ), ), {, final, String, [, ]]
[., substring, (, line, ., indexOf, (, "Dataset Name:", ), +, 13, ,, line, ., indexOf, (, "(", ), ), .]
[,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (, line, ., contains, (]
[+, 13, ,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (, line, .]
[., indexOf, (, "Dataset Name:", ), +, 13, ,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;]
[), +, 13, ,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (, line]
[,, line, ., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (, line, ., contains, (]
[), ., trim, (, ), ;, }, if, (, line, ., contains, (, "Residual Sum of Squares", ), ), {, final, String, []
[., indexOf, (, "(", ), ), ., trim, (, ), ;, }, if, (, line, ., contains, (, "Residual Sum of Squares", )]
[), ), ., trim, (, ), ;, }, if, (, line, ., contains, (, "Residual Sum of Squares", ), ), {, final, String]
[), {, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =, Double, ., parseDouble]
[., contains, (, "Residual Sum of Squares", ), ), {, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;]
[), ), {, final, String, [, ], tokens, =, line, ., split, (, " ++", ), ;, dummyDouble, =, Double, .]
[;, dummyDouble, =, Double, ., parseDouble, (, tokens, [, 4, ], ., trim, (, ), ), ;, }, }, if]
[., split, (, " ++", ), ;, dummyDouble, =, Double, ., parseDouble, (, tokens, [, 4, ], ., trim, (, )]
[), ;, dummyDouble, =, Double, ., parseDouble, (, tokens, [, 4, ], ., trim, (, ), ), ;, }, }]
[=, Double, ., parseDouble, (, tokens, [, 4, ], ., trim, (, ), ), ;, }, }, if, (, Double]
[;, }, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;]
[., parseDouble, (, tokens, [, 4, ], ., trim, (, ), ), ;, }, }, if, (, Double, ., isNaN]
[), ;, }, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", )]
[., trim, (, ), ), ;, }, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw, new]
[[, 4, ], ., trim, (, ), ), ;, }, }, if, (, Double, ., isNaN, (, dummyDouble, ), )]
[], ., trim, (, ), ), ;, }, }, if, (, Double, ., isNaN, (, dummyDouble, ), ), {, throw]
[), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==]
[., isNaN, (, dummyDouble, ), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =, dummyDouble]
[), ), {, throw, new, IOException, (, "could not find certified value of residual sum of squares", ), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString]
[;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name"]
[), ;, }, this, ., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (]
[=, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, .]
[., residualSumOfSquares, =, dummyDouble, ;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }]
[;, if, (, dummyString, ==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =]
[), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =, dummyString, ;, this, ., problem, =]
[==, null, ), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =, dummyString, ;, this, .]
[), {, throw, new, IOException, (, "could not find dataset name", ), ;, }, this, ., name, =, dummyString, ;, this, ., problem, =]
[;, }, this, ., name, =, dummyString, ;, this, ., problem, =, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, []
[), ;, }, this, ., name, =, dummyString, ;, this, ., problem, =, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double]
[=, dummyString, ;, this, ., problem, =, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double]
[., name, =, dummyString, ;, this, ., problem, =, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (]
[;, this, ., problem, =, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ]]
[=, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], a, ), {, DerivativeStructure]
[., problem, =, new, MultivariateDifferentiableVectorFunction, (, ), {, public, double, [, ], value, (, final, double, [, ], a, )]
[;, }, public, String, getName, (, ), {, return, name, ;, }, public, int, getNumObservations, (, ), {, return, numObservations]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, dsA, []
[], ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, dsA]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, )]
[;, i, <, a, ., length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a]
[;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a]
[<, a, ., length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length]
[;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a]
[., length, ;, ++, i, ), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0]
[), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ]]
[), {, dsA, [, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ]]
[=, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ], ), ;, }, final, int, n]
[[, i, ], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ], ), ;, }]
[], =, new, DerivativeStructure, (, a, ., length, ,, 0, ,, a, [, i, ], ), ;, }, final, int]
[;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ], yhat, =, new, double, [, n]
[,, 0, ,, a, [, i, ], ), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double]
[., length, ,, 0, ,, a, [, i, ], ), ;, }, final, int, n, =, getNumObservations, (, ), ;]
[,, a, [, i, ], ), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ]]
[), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ], yhat, =, new, double, []
[[, i, ], ), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ], yhat, =]
[], ), ;, }, final, int, n, =, getNumObservations, (, ), ;, final, double, [, ], yhat, =, new, double]
[;, final, double, [, ], yhat, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i]
[;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, )]
[;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA, ), .]
[<, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA]
[;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA, ), .]
[), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (, )]
[++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (]
[=, getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (, ), ;, }, return, yhat, ;, }]
[[, i, ], =, getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (, ), ;, }, return]
[], =, getModelValue, (, getX, (, i, ), ,, dsA, ), ., getValue, (, ), ;, }, return, yhat, ;]
[;, }, return, yhat, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], a, ), {, final]
[., getValue, (, ), ;, }, return, yhat, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ]]
[,, dsA, ), ., getValue, (, ), ;, }, return, yhat, ;, }, public, DerivativeStructure, [, ], value, (, final]
[), ,, dsA, ), ., getValue, (, ), ;, }, return, yhat, ;, }, public, DerivativeStructure, [, ], value, (]
[), ., getValue, (, ), ;, }, return, yhat, ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, []
[;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, [, ], a, ), {, final, int, n, =, getNumObservations]
[;, final, DerivativeStructure, [, ], yhat, =, new, DerivativeStructure, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, yhat, [, i]
[;, i, <, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, )]
[;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, a, ), ;]
[<, n, ;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, a]
[;, i, ++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, a, ), ;]
[), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, a, ), ;, }, return, yhat]
[++, ), {, yhat, [, i, ], =, getModelValue, (, getX, (, i, ), ,, a, ), ;, }, return]
[=, getModelValue, (, getX, (, i, ), ,, a, ), ;, }, return, yhat, ;, }, }, ;, }, public]
[[, i, ], =, getModelValue, (, getX, (, i, ), ,, a, ), ;, }, return, yhat, ;, }, }]
[], =, getModelValue, (, getX, (, i, ), ,, a, ), ;, }, return, yhat, ;, }, }, ;, }]
[;, }, return, yhat, ;, }, }, ;, }, public, String, getName, (, ), {, return, name, ;, }, public]
[,, a, ), ;, }, return, yhat, ;, }, }, ;, }, public, String, getName, (, ), {, return, name]
[), ,, a, ), ;, }, return, yhat, ;, }, }, ;, }, public, String, getName, (, ), {, return]
[), ;, }, return, yhat, ;, }, }, ;, }, public, String, getName, (, ), {, return, name, ;, }]
[;, }, }, ;, }, public, String, getName, (, ), {, return, name, ;, }, public, int, getNumObservations, (, )]
[;, }, public, int, getNumObservations, (, ), {, return, numObservations, ;, }, public, double, [, ], [, ], getData, (]
[;, }, public, double, [, ], [, ], getData, (, ), {, return, new, double, [, ], [, ], {]
[;, }, public, double, getX, (, final, int, i, ), {, return, x, [, i, ], ;, }, public, double]
[;, }, public, double, getX, (, final, int, i, ), {, return, x, [, i, ], ;, }, public, double]
[,, MathArrays, ., copyOf, (, y, ), }, ;, }, public, double, getX, (, final, int, i, ), {, return]
[., copyOf, (, x, ), ,, MathArrays, ., copyOf, (, y, ), }, ;, }, public, double, getX, (, final]
[), ,, MathArrays, ., copyOf, (, y, ), }, ;, }, public, double, getX, (, final, int, i, ), {]
[}, ;, }, public, double, getX, (, final, int, i, ), {, return, x, [, i, ], ;, }, public]
[., copyOf, (, y, ), }, ;, }, public, double, getX, (, final, int, i, ), {, return, x, []
[), }, ;, }, public, double, getX, (, final, int, i, ), {, return, x, [, i, ], ;, }]
[;, }, public, double, getY, (, final, int, i, ), {, return, y, [, i, ], ;, }, public, int]
[[, i, ], ;, }, public, double, getY, (, final, int, i, ), {, return, y, [, i, ], ;]
[], ;, }, public, double, getY, (, final, int, i, ), {, return, y, [, i, ], ;, }, public]
[;, }, public, int, getNumParameters, (, ), {, return, numParameters, ;, }, public, double, [, ], getParameters, (, ), {]
[[, i, ], ;, }, public, int, getNumParameters, (, ), {, return, numParameters, ;, }, public, double, [, ], getParameters]
[], ;, }, public, int, getNumParameters, (, ), {, return, numParameters, ;, }, public, double, [, ], getParameters, (, )]
[;, }, public, double, [, ], getParameters, (, ), {, return, MathArrays, ., copyOf, (, a, ), ;, }, public]
[;, }, public, double, getParameter, (, final, int, i, ), {, return, a, [, i, ], ;, }, public, double]
[., copyOf, (, a, ), ;, }, public, double, getParameter, (, final, int, i, ), {, return, a, [, i]
[), ;, }, public, double, getParameter, (, final, int, i, ), {, return, a, [, i, ], ;, }, public]
[;, }, public, double, [, ], getParametersStandardDeviations, (, ), {, return, MathArrays, ., copyOf, (, sigA, ), ;, }, public]
[[, i, ], ;, }, public, double, [, ], getParametersStandardDeviations, (, ), {, return, MathArrays, ., copyOf, (, sigA, )]
[], ;, }, public, double, [, ], getParametersStandardDeviations, (, ), {, return, MathArrays, ., copyOf, (, sigA, ), ;, }]
[;, }, public, double, getParameterStandardDeviation, (, final, int, i, ), {, return, sigA, [, i, ], ;, }, public, double]
[., copyOf, (, sigA, ), ;, }, public, double, getParameterStandardDeviation, (, final, int, i, ), {, return, sigA, [, i]
[), ;, }, public, double, getParameterStandardDeviation, (, final, int, i, ), {, return, sigA, [, i, ], ;, }, public]
[;, }, public, double, getResidualSumOfSquares, (, ), {, return, residualSumOfSquares, ;, }, public, int, getNumStartingPoints, (, ), {, return, numStartingPoints]
[[, i, ], ;, }, public, double, getResidualSumOfSquares, (, ), {, return, residualSumOfSquares, ;, }, public, int, getNumStartingPoints, (, )]
[], ;, }, public, double, getResidualSumOfSquares, (, ), {, return, residualSumOfSquares, ;, }, public, int, getNumStartingPoints, (, ), {, return]
[;, }, public, int, getNumStartingPoints, (, ), {, return, numStartingPoints, ;, }, public, double, [, ], getStartingPoint, (, final, int]
[;, }, public, double, [, ], getStartingPoint, (, final, int, i, ), {, return, MathArrays, ., copyOf, (, startingValues, []
[;, }, public, MultivariateDifferentiableVectorFunction, getLeastSquaresProblem, (, ), {, return, problem, ;, }, public, abstract, DerivativeStructure, getModelValue, (, final, double, x]
[., copyOf, (, startingValues, [, i, ], ), ;, }, public, MultivariateDifferentiableVectorFunction, getLeastSquaresProblem, (, ), {, return, problem, ;, }]
[), ;, }, public, MultivariateDifferentiableVectorFunction, getLeastSquaresProblem, (, ), {, return, problem, ;, }, public, abstract, DerivativeStructure, getModelValue, (, final, double]
[[, i, ], ), ;, }, public, MultivariateDifferentiableVectorFunction, getLeastSquaresProblem, (, ), {, return, problem, ;, }, public, abstract, DerivativeStructure, getModelValue]
[], ), ;, }, public, MultivariateDifferentiableVectorFunction, getLeastSquaresProblem, (, ), {, return, problem, ;, }, public, abstract, DerivativeStructure, getModelValue, (, final]
[;, }, public, abstract, DerivativeStructure, getModelValue, (, final, double, x, ,, final, DerivativeStructure, [, ], a, ), ;, private, static]
[), {, boolean, flag, =, text, ., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&, text]
[;, if, (, flag, ), {, final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String]
[&&, text, ., contains, (, ")", ), ;, if, (, flag, ), {, final, int, [, ], numbers, =, new]
[&&, text, ., contains, (, "to", ), &&, text, ., contains, (, ")", ), ;, if, (, flag, ), {]
[&&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&, text, ., contains, (, ")"]
[., contains, (, key, ), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&]
[), &&, text, ., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&, text, ., contains, (]
[&&, text, ., contains, (, "to", ), &&, text, ., contains, (, ")", ), ;, if, (, flag, ), {]
[., contains, (, "lines", ), &&, text, ., contains, (, "to", ), &&, text, ., contains, (, ")", ), ;]
[), &&, text, ., contains, (, "to", ), &&, text, ., contains, (, ")", ), ;, if, (, flag, )]
[&&, text, ., contains, (, ")", ), ;, if, (, flag, ), {, final, int, [, ], numbers, =, new]
[., contains, (, "to", ), &&, text, ., contains, (, ")", ), ;, if, (, flag, ), {, final, int]
[), &&, text, ., contains, (, ")", ), ;, if, (, flag, ), {, final, int, [, ], numbers, =]
[;, if, (, flag, ), {, final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String]
[., contains, (, ")", ), ;, if, (, flag, ), {, final, int, [, ], numbers, =, new, int, []
[), ;, if, (, flag, ), {, final, int, [, ], numbers, =, new, int, [, 2, ], ;, final]
[), {, final, int, [, ], numbers, =, new, int, [, 2, ], ;, final, String, from, =, text, .]
[;, final, String, from, =, text, ., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,, text, .]
[], ;, final, String, from, =, text, ., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,, text]
[;, numbers, [, 0, ], =, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to]
[., substring, (, text, ., indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), ), ;]
[,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =, Integer, ., parseInt, (, from, .]
[+, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =, Integer, ., parseInt, (]
[., indexOf, (, "lines", ), +, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ]]
[), +, 5, ,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =, Integer, ., parseInt]
[,, text, ., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =, Integer, ., parseInt, (, from, .]
[), ;, numbers, [, 0, ], =, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String]
[., indexOf, (, "to", ), ), ;, numbers, [, 0, ], =, Integer, ., parseInt, (, from, ., trim, (]
[), ), ;, numbers, [, 0, ], =, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final]
[=, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =, text, ., substring, (]
[[, 0, ], =, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =, text]
[], =, Integer, ., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =, text, ., substring]
[;, final, String, to, =, text, ., substring, (, text, ., indexOf, (, "to", ), +, 2, ,, text, .]
[., parseInt, (, from, ., trim, (, ), ), ;, final, String, to, =, text, ., substring, (, text, .]
[), ;, final, String, to, =, text, ., substring, (, text, ., indexOf, (, "to", ), +, 2, ,, text]
[., trim, (, ), ), ;, final, String, to, =, text, ., substring, (, text, ., indexOf, (, "to", )]
[;, numbers, [, 1, ], =, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return, numbers, ;]
[., substring, (, text, ., indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), ), ;]
[,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (, to, .]
[+, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (]
[., indexOf, (, "to", ), +, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ]]
[), +, 2, ,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =, Integer, ., parseInt]
[,, text, ., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (, to, .]
[), ;, numbers, [, 1, ], =, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return, numbers]
[., indexOf, (, ")", ), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (, to, ., trim, (]
[), ), ;, numbers, [, 1, ], =, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return]
[=, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return, numbers, ;, }, }, return, null, ;]
[[, 1, ], =, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return, numbers, ;, }, }]
[], =, Integer, ., parseInt, (, to, ., trim, (, ), ), ;, return, numbers, ;, }, }, return, null]
[;, return, numbers, ;, }, }, return, null, ;, }, }]
[., parseInt, (, to, ., trim, (, ), ), ;, return, numbers, ;, }, }, return, null, ;, }, }]
[), ;, return, numbers, ;, }, }, return, null, ;, }, }]
[., trim, (, ), ), ;, return, numbers, ;, }, }, return, null, ;, }, }]
[;, }, }, return, null, ;, }, }]
[;, }, }]
