[., time, ., DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, DividedDateTimeField, extends, DecoratedDateTimeField, {]
[DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, DividedDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (]
[., DurationField, ;, public, class, DividedDateTimeField, extends, DecoratedDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[private, final, int, iMax, ;, public, DividedDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, this, (]
[int, iMax, ;, public, DividedDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, this, (, field, ,]
[int, iMax, ;, public, DividedDateTimeField, (, DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, this, (, field, ,]
[DateTimeField, field, ,, DateTimeFieldType, type, ,, int, divisor, ), {, this, (, field, ,, field, ., getRangeDurationField, (, ), ,]
[,, DateTimeFieldType, type, ,, int, divisor, ), {, this, (, field, ,, field, ., getRangeDurationField, (, ), ,, type, ,]
[;, }, public, DividedDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (]
[public, DividedDateTimeField, (, DateTimeField, field, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,]
[,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (]
[,, DurationField, rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (]
[rangeField, ,, DateTimeFieldType, type, ,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (, divisor, <]
[,, int, divisor, ), {, super, (, field, ,, type, ), ;, if, (, divisor, <, 2, ), {, throw]
[), {, super, (, field, ,, type, ), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =]
[), ;, if, (, divisor, <, 2, ), {, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =]
[{, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if, (]
[{, throw, new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if, (]
[new, IllegalArgumentException, (, "The divisor must be at least 2", ), ;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if, (, unitField, ==]
["The divisor must be at least 2", ), ;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if, (, unitField, ==, null, ), {]
[;, }, DurationField, unitField, =, field, ., getDurationField, (, ), ;, if, (, unitField, ==, null, ), {, iDurationField, =]
[field, ., getDurationField, (, ), ;, if, (, unitField, ==, null, ), {, iDurationField, =, null, ;, }, else, {]
[getDurationField, (, ), ;, if, (, unitField, ==, null, ), {, iDurationField, =, null, ;, }, else, {, iDurationField, =]
[;, if, (, unitField, ==, null, ), {, iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (]
[(, unitField, ==, null, ), {, iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,]
[(, unitField, ==, null, ), {, iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,]
[iDurationField, =, null, ;, }, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,]
[}, else, {, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor, ), ;, }]
[{, iDurationField, =, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =]
[=, new, ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;]
[ScaledDurationField, (, unitField, ,, type, ., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =]
[., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =]
[., getDurationType, (, ), ,, divisor, ), ;, }, iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =]
[iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =]
[iRangeDurationField, =, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =]
[=, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (]
[=, rangeField, ;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (]
[;, iDivisor, =, divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=]
[divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?]
[divisor, ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?]
[int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /]
[=, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :]
[field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (]
[field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (]
[field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (]
[., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (]
[., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (]
[(, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +]
[int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /]
[=, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -]
[?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =]
[?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =]
[1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =]
[1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /]
[=, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :]
[field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (]
[field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (]
[field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (]
[., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (]
[., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (]
[(, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +]
[int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /]
[=, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -]
[>=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;]
[), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =]
[j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;]
[divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =]
[=, min, ;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {, this, (]
[;, iMax, =, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {, this, (, remainderField, ,]
[=, max, ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DateTimeFieldType, type, ), {, this, (, remainderField, ,, null, ,]
[,, type, ), ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ), {, super, (]
[,, type, ), ;, }, public, DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ), {, super, (]
[DividedDateTimeField, (, RemainderDateTimeField, remainderField, ,, DurationField, rangeField, ,, DateTimeFieldType, type, ), {, super, (, remainderField, ., getWrappedField, (, ), ,]
[rangeField, ,, DateTimeFieldType, type, ), {, super, (, remainderField, ., getWrappedField, (, ), ,, type, ), ;, int, divisor, =]
[DateTimeFieldType, type, ), {, super, (, remainderField, ., getWrappedField, (, ), ,, type, ), ;, int, divisor, =, iDivisor, =]
[DateTimeFieldType, type, ), {, super, (, remainderField, ., getWrappedField, (, ), ,, type, ), ;, int, divisor, =, iDivisor, =]
[super, (, remainderField, ., getWrappedField, (, ), ,, type, ), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;]
[remainderField, ., getWrappedField, (, ), ,, type, ), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =]
[remainderField, ., getWrappedField, (, ), ,, type, ), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =]
[), ,, type, ), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =, remainderField, ., iRangeField, ;]
[type, ), ;, int, divisor, =, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =]
[=, iDivisor, =, remainderField, ., iDivisor, ;, iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =]
[iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =]
[iDurationField, =, remainderField, ., iRangeField, ;, iRangeDurationField, =, rangeField, ;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =]
[;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =]
[;, DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =]
[DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (]
[DateTimeField, field, =, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (]
[=, getWrappedField, (, ), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=]
[), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?]
[), ;, int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?]
[int, i, =, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /]
[=, field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :]
[field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (]
[field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (]
[field, ., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (]
[., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (]
[., getMinimumValue, (, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (]
[(, ), ;, int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +]
[int, min, =, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /]
[=, (, i, >=, 0, ), ?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -]
[?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =]
[?, i, /, divisor, :, (, (, i, +, 1, ), /, divisor, -, 1, ), ;, int, j, =]
[1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =]
[1, ), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[), /, divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (]
[divisor, -, 1, ), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[), ;, int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?]
[int, j, =, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /]
[=, field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :]
[field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (]
[field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (]
[field, ., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (]
[., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (]
[., getMaximumValue, (, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (]
[(, ), ;, int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +]
[int, max, =, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /]
[=, (, j, >=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -]
[>=, 0, ), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;]
[), ?, j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =]
[j, /, divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;]
[divisor, :, (, (, j, +, 1, ), /, divisor, -, 1, ), ;, iMin, =, min, ;, iMax, =]
[;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (]
[;, iMin, =, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (]
[=, min, ;, iMax, =, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=]
[=, max, ;, }, @, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=, null, ), {, return]
[@, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=, null, ), {, return, iRangeDurationField, ;, }, return]
[@, Override, public, DurationField, getRangeDurationField, (, ), {, if, (, iRangeDurationField, !=, null, ), {, return, iRangeDurationField, ;, }, return]
[}, return, super, ., getRangeDurationField, (, ), ;, }, public, int, get, (, long, instant, ), {, int, value, =]
[}, return, super, ., getRangeDurationField, (, ), ;, }, public, int, get, (, long, instant, ), {, int, value, =]
[), ;, }, public, int, get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (]
[get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[get, (, long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (]
[long, instant, ), {, int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=]
[int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return]
[int, value, =, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return]
[=, getWrappedField, (, ), ., get, (, instant, ), ;, if, (, value, >=, 0, ), {, return, value, /]
[(, instant, ), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return]
[(, instant, ), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return]
[instant, ), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (]
[instant, ), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (]
[), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (]
[), ;, if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (]
[if, (, value, >=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +]
[>=, 0, ), {, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /]
[{, return, value, /, iDivisor, ;, }, else, {, return, (, (, value, +, 1, ), /, iDivisor, ), -]
[/, iDivisor, ), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return]
[/, iDivisor, ), -, 1, ;, }, }, public, long, add, (, long, instant, ,, int, amount, ), {, return]
[}, }, public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[public, long, add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, long, instant, ,, int, amount, ), {, return, getWrappedField, (, ), ., add, (, instant, ,, amount, *]
[instant, ,, amount, *, iDivisor, ), ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return]
[instant, ,, amount, *, iDivisor, ), ;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return]
[;, }, public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, ), ., add, (]
[public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[public, long, add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, ), ., add, (, instant, ,]
[add, (, long, instant, ,, long, amount, ), {, return, getWrappedField, (, ), ., add, (, instant, ,, amount, *]
[instant, ,, amount, *, iDivisor, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return]
[amount, *, iDivisor, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (]
[iDivisor, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[iDivisor, ), ;, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,]
[public, long, addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (]
[addWrapField, (, long, instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (]
[instant, ,, int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,]
[int, amount, ), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,]
[), {, return, set, (, instant, ,, FieldUtils, ., getWrappedValue, (, get, (, instant, ), ,, amount, ,, iMin, ,]
[,, iMin, ,, iMax, ), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[,, iMin, ,, iMax, ), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[,, iMin, ,, iMax, ), ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (]
[public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (, minuendInstant, ,]
[(, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), /]
[minuendInstant, ,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[minuendInstant, ,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[minuendInstant, ,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (]
[public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,]
[(, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getWrappedField, (, ), ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), /]
[(, minuendInstant, ,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[(, minuendInstant, ,, subtrahendInstant, ), /, iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[), /, iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (]
[iDivisor, ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,]
[long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,]
[int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, int, remainder, =]
[), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, int, remainder, =, getRemainder, (]
[), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, iMin, ,, iMax, ), ;, int, remainder, =, getRemainder, (]
[this, ,, value, ,, iMin, ,, iMax, ), ;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (]
[,, iMax, ), ;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return]
[,, iMax, ), ;, int, remainder, =, getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return]
[=, getRemainder, (, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (]
[(, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,]
[(, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,]
[(, getWrappedField, (, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,]
[(, ), ., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, value, *]
[., get, (, instant, ), ), ;, return, getWrappedField, (, ), ., set, (, instant, ,, value, *, iDivisor, +]
[., set, (, instant, ,, value, *, iDivisor, +, remainder, ), ;, }, public, DurationField, getDurationField, (, ), {, return]
[), ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, int, getMinimumValue, (, ), {, return]
[iDurationField, ;, }, public, int, getMinimumValue, (, ), {, return, iMin, ;, }, public, int, getMaximumValue, (, ), {, return]
[int, getMaximumValue, (, ), {, return, iMax, ;, }, public, long, roundFloor, (, long, instant, ), {, DateTimeField, field, =]
[return, iMax, ;, }, public, long, roundFloor, (, long, instant, ), {, DateTimeField, field, =, getWrappedField, (, ), ;, return]
[return, iMax, ;, }, public, long, roundFloor, (, long, instant, ), {, DateTimeField, field, =, getWrappedField, (, ), ;, return]
[public, long, roundFloor, (, long, instant, ), {, DateTimeField, field, =, getWrappedField, (, ), ;, return, field, ., roundFloor, (]
[public, long, roundFloor, (, long, instant, ), {, DateTimeField, field, =, getWrappedField, (, ), ;, return, field, ., roundFloor, (]
[long, instant, ), {, DateTimeField, field, =, getWrappedField, (, ), ;, return, field, ., roundFloor, (, field, ., set, (]
[), {, DateTimeField, field, =, getWrappedField, (, ), ;, return, field, ., roundFloor, (, field, ., set, (, instant, ,]
[), {, DateTimeField, field, =, getWrappedField, (, ), ;, return, field, ., roundFloor, (, field, ., set, (, instant, ,]
[DateTimeField, field, =, getWrappedField, (, ), ;, return, field, ., roundFloor, (, field, ., set, (, instant, ,, get, (]
[getWrappedField, (, ), ;, return, field, ., roundFloor, (, field, ., set, (, instant, ,, get, (, instant, ), *]
[,, get, (, instant, ), *, iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return]
[(, instant, ), *, iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (]
[), *, iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,]
[iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get, (]
[iDivisor, ), ), ;, }, public, long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get, (]
[long, remainder, (, long, instant, ), {, return, set, (, instant, ,, get, (, getWrappedField, (, ), ., remainder, (]
[(, getWrappedField, (, ), ., remainder, (, instant, ), ), ), ;, }, public, int, getDivisor, (, ), {, return]
[public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getRemainder, (, int, value, ), {, if, (]
[public, int, getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getRemainder, (, int, value, ), {, if, (]
[getDivisor, (, ), {, return, iDivisor, ;, }, private, int, getRemainder, (, int, value, ), {, if, (, value, >=]
[return, iDivisor, ;, }, private, int, getRemainder, (, int, value, ), {, if, (, value, >=, 0, ), {, return]
[return, iDivisor, ;, }, private, int, getRemainder, (, int, value, ), {, if, (, value, >=, 0, ), {, return]
[;, }, private, int, getRemainder, (, int, value, ), {, if, (, value, >=, 0, ), {, return, value, %]
[int, value, ), {, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return]
[int, value, ), {, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return]
[value, ), {, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (]
[value, ), {, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (]
[{, if, (, value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -]
[value, >=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +]
[>=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (]
[>=, 0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (]
[0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (]
[0, ), {, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (]
[{, return, value, %, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +]
[%, iDivisor, ;, }, else, {, return, (, iDivisor, -, 1, ), +, (, (, value, +, 1, ), %]
