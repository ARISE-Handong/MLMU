[java, ., util, ., Set, ;, public, class, JSModule, implements, DependencyInfo, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[class, JSModule, implements, DependencyInfo, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 1, ;, static, final, DiagnosticType, CIRCULAR_DEPENDENCY_ERROR, =]
[class, JSModule, implements, DependencyInfo, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 1, ;, static, final, DiagnosticType, CIRCULAR_DEPENDENCY_ERROR, =]
[,, Serializable, {, private, static, final, long, serialVersionUID, =, 1, ;, static, final, DiagnosticType, CIRCULAR_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (]
[{, private, static, final, long, serialVersionUID, =, 1, ;, static, final, DiagnosticType, CIRCULAR_DEPENDENCY_ERROR, =, DiagnosticType, ., error, (, "JSC_CIRCULAR_DEP", ,]
[error, (, "JSC_CIRCULAR_DEP", ,, "Circular dependency detected: {0}", ), ;, private, final, String, name, ;, private, final, List, <, CompilerInput, >, inputs, =]
[CompilerInput, >, inputs, =, new, ArrayList, <, CompilerInput, >, (, ), ;, private, final, List, <, JSModule, >, deps, =]
[=, new, ArrayList, <, JSModule, >, (, ), ;, private, int, depth, ;, public, JSModule, (, String, name, ), {]
[=, new, ArrayList, <, JSModule, >, (, ), ;, private, int, depth, ;, public, JSModule, (, String, name, ), {]
[JSModule, >, (, ), ;, private, int, depth, ;, public, JSModule, (, String, name, ), {, this, ., name, =]
[(, ), ;, private, int, depth, ;, public, JSModule, (, String, name, ), {, this, ., name, =, name, ;]
[(, ), ;, private, int, depth, ;, public, JSModule, (, String, name, ), {, this, ., name, =, name, ;]
[int, depth, ;, public, JSModule, (, String, name, ), {, this, ., name, =, name, ;, this, ., depth, =]
[depth, ;, public, JSModule, (, String, name, ), {, this, ., name, =, name, ;, this, ., depth, =, -]
[=, name, ;, this, ., depth, =, -, 1, ;, }, @, Override, public, String, getName, (, ), {, return]
[getName, (, ), {, return, name, ;, }, @, Override, public, List, <, String, >, getProvides, (, ), {, return]
[getName, (, ), {, return, name, ;, }, @, Override, public, List, <, String, >, getProvides, (, ), {, return]
[}, @, Override, public, List, <, String, >, getProvides, (, ), {, return, ImmutableList, ., <, String, >, of, (]
[}, @, Override, public, List, <, String, >, getRequires, (, ), {, ImmutableList, ., Builder, <, String, >, builder, =]
[}, @, Override, public, List, <, String, >, getRequires, (, ), {, ImmutableList, ., Builder, <, String, >, builder, =]
[{, ImmutableList, ., Builder, <, String, >, builder, =, ImmutableList, ., builder, (, ), ;, for, (, JSModule, m, :]
[Builder, <, String, >, builder, =, ImmutableList, ., builder, (, ), ;, for, (, JSModule, m, :, deps, ), {]
[Builder, <, String, >, builder, =, ImmutableList, ., builder, (, ), ;, for, (, JSModule, m, :, deps, ), {]
[builder, =, ImmutableList, ., builder, (, ), ;, for, (, JSModule, m, :, deps, ), {, builder, ., add, (]
[builder, =, ImmutableList, ., builder, (, ), ;, for, (, JSModule, m, :, deps, ), {, builder, ., add, (]
[(, JSModule, m, :, deps, ), {, builder, ., add, (, m, ., getName, (, ), ), ;, }, return]
[(, JSModule, m, :, deps, ), {, builder, ., add, (, m, ., getName, (, ), ), ;, }, return]
[), ;, }, return, builder, ., build, (, ), ;, }, @, Override, public, String, getPathRelativeToClosureBase, (, ), {, throw]
[String, getPathRelativeToClosureBase, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, public, void, add, (, SourceFile, file, ), {]
[(, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, public, void, add, (, SourceFile, file, ), {, add, (]
[throw, new, UnsupportedOperationException, (, ), ;, }, public, void, add, (, SourceFile, file, ), {, add, (, new, CompilerInput, (]
[), {, add, (, new, CompilerInput, (, file, ), ), ;, }, public, void, addFirst, (, SourceFile, file, ), {]
[add, (, new, CompilerInput, (, file, ), ), ;, }, public, void, addFirst, (, SourceFile, file, ), {, addFirst, (]
[CompilerInput, (, file, ), ), ;, }, public, void, addFirst, (, SourceFile, file, ), {, addFirst, (, new, CompilerInput, (]
[), {, addFirst, (, new, CompilerInput, (, file, ), ), ;, }, public, void, add, (, CompilerInput, input, ), {]
[), {, addFirst, (, new, CompilerInput, (, file, ), ), ;, }, public, void, add, (, CompilerInput, input, ), {]
[new, CompilerInput, (, file, ), ), ;, }, public, void, add, (, CompilerInput, input, ), {, inputs, ., add, (]
[file, ), ), ;, }, public, void, add, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;]
[file, ), ), ;, }, public, void, add, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;]
[}, public, void, add, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;, input, ., setModule, (]
[add, (, input, ), ;, input, ., setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {]
[add, (, input, ), ;, input, ., setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {]
[;, input, ., setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (]
[setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;]
[setModule, (, this, ), ;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;]
[;, }, void, addAndOverrideModule, (, CompilerInput, input, ), {, inputs, ., add, (, input, ), ;, input, ., overrideModule, (]
[(, input, ), ;, input, ., overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input, ), {]
[(, input, ), ;, input, ., overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input, ), {]
[input, ., overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (]
[overrideModule, (, this, ), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (, 0, ,]
[), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (, 0, ,, input, ), ;]
[), ;, }, public, void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (, 0, ,, input, ), ;]
[void, addFirst, (, CompilerInput, input, ), {, inputs, ., add, (, 0, ,, input, ), ;, input, ., setModule, (]
[;, input, ., setModule, (, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {]
[;, input, ., setModule, (, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {]
[(, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, ., checkState, (]
[(, this, ), ;, }, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, ., checkState, (]
[}, public, void, addAfter, (, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, ., checkState, (, inputs, ., contains, (]
[(, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, ., checkState, (, inputs, ., contains, (, other, ), ), ;]
[(, CompilerInput, input, ,, CompilerInput, other, ), {, Preconditions, ., checkState, (, inputs, ., contains, (, other, ), ), ;]
[CompilerInput, other, ), {, Preconditions, ., checkState, (, inputs, ., contains, (, other, ), ), ;, inputs, ., add, (]
[CompilerInput, other, ), {, Preconditions, ., checkState, (, inputs, ., contains, (, other, ), ), ;, inputs, ., add, (]
[Preconditions, ., checkState, (, inputs, ., contains, (, other, ), ), ;, inputs, ., add, (, inputs, ., indexOf, (]
[(, inputs, ., contains, (, other, ), ), ;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,]
[contains, (, other, ), ), ;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,, input, ), ;]
[contains, (, other, ), ), ;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,, input, ), ;]
[), ;, inputs, ., add, (, inputs, ., indexOf, (, other, ), ,, input, ), ;, input, ., setModule, (]
[,, input, ), ;, input, ., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {]
[,, input, ), ;, input, ., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {]
[input, ., setModule, (, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (]
[(, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;]
[(, this, ), ;, }, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;]
[}, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, ., checkState, (]
[}, public, void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, ., checkState, (]
[void, addDependency, (, JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, ., checkState, (, dep, !=]
[JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, ., checkState, (, dep, !=, this, ), ;]
[JSModule, dep, ), {, Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, ., checkState, (, dep, !=, this, ), ;]
[Preconditions, ., checkNotNull, (, dep, ), ;, Preconditions, ., checkState, (, dep, !=, this, ), ;, deps, ., add, (]
[!=, this, ), ;, deps, ., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {]
[!=, this, ), ;, deps, ., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {]
[deps, ., add, (, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule, (]
[(, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule, (, null, ), ;]
[(, dep, ), ;, }, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule, (, null, ), ;]
[}, public, void, remove, (, CompilerInput, input, ), {, input, ., setModule, (, null, ), ;, inputs, ., remove, (]
[;, inputs, ., remove, (, input, ), ;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :]
[remove, (, input, ), ;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, ), {]
[remove, (, input, ), ;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, ), {]
[;, }, public, void, removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, ), {, input, ., setModule, (]
[removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, ), {, input, ., setModule, (, null, ), ;, }]
[removeAll, (, ), {, for, (, CompilerInput, input, :, inputs, ), {, input, ., setModule, (, null, ), ;, }]
[), ;, }, inputs, ., clear, (, ), ;, }, public, List, <, JSModule, >, getDependencies, (, ), {, return]
[), {, return, deps, ;, }, List, <, String, >, getSortedDependencyNames, (, ), {, List, <, String, >, names, =]
[), {, return, deps, ;, }, List, <, String, >, getSortedDependencyNames, (, ), {, List, <, String, >, names, =]
[(, ), {, List, <, String, >, names, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :]
[String, >, names, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getDependencies, (, ), ), {]
[String, >, names, =, Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getDependencies, (, ), ), {]
[Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getDependencies, (, ), ), {, names, ., add, (]
[Lists, ., newArrayList, (, ), ;, for, (, JSModule, module, :, getDependencies, (, ), ), {, names, ., add, (]
[JSModule, module, :, getDependencies, (, ), ), {, names, ., add, (, module, ., getName, (, ), ), ;, }]
[JSModule, module, :, getDependencies, (, ), ), {, names, ., add, (, module, ., getName, (, ), ), ;, }]
[(, ), ), {, names, ., add, (, module, ., getName, (, ), ), ;, }, Collections, ., sort, (]
[names, ., add, (, module, ., getName, (, ), ), ;, }, Collections, ., sort, (, names, ), ;, return]
[;, return, names, ;, }, public, Set, <, JSModule, >, getAllDependencies, (, ), {, Set, <, JSModule, >, allDeps, =]
[;, return, names, ;, }, public, Set, <, JSModule, >, getAllDependencies, (, ), {, Set, <, JSModule, >, allDeps, =]
[}, public, Set, <, JSModule, >, getAllDependencies, (, ), {, Set, <, JSModule, >, allDeps, =, Sets, ., newHashSet, (]
[{, Set, <, JSModule, >, allDeps, =, Sets, ., newHashSet, (, deps, ), ;, List, <, JSModule, >, workList, =]
[{, Set, <, JSModule, >, allDeps, =, Sets, ., newHashSet, (, deps, ), ;, List, <, JSModule, >, workList, =]
[>, allDeps, =, Sets, ., newHashSet, (, deps, ), ;, List, <, JSModule, >, workList, =, Lists, ., newArrayList, (]
[newHashSet, (, deps, ), ;, List, <, JSModule, >, workList, =, Lists, ., newArrayList, (, deps, ), ;, while, (]
[newHashSet, (, deps, ), ;, List, <, JSModule, >, workList, =, Lists, ., newArrayList, (, deps, ), ;, while, (]
[newHashSet, (, deps, ), ;, List, <, JSModule, >, workList, =, Lists, ., newArrayList, (, deps, ), ;, while, (]
[<, JSModule, >, workList, =, Lists, ., newArrayList, (, deps, ), ;, while, (, workList, ., size, (, ), >]
[., newArrayList, (, deps, ), ;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =]
[., newArrayList, (, deps, ), ;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =]
[), ;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =, workList, ., remove, (]
[), ;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =, workList, ., remove, (]
[), ;, while, (, workList, ., size, (, ), >, 0, ), {, JSModule, module, =, workList, ., remove, (]
[size, (, ), >, 0, ), {, JSModule, module, =, workList, ., remove, (, workList, ., size, (, ), -]
[module, =, workList, ., remove, (, workList, ., size, (, ), -, 1, ), ;, for, (, JSModule, dep, :]
[module, =, workList, ., remove, (, workList, ., size, (, ), -, 1, ), ;, for, (, JSModule, dep, :]
[(, ), -, 1, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (]
[(, ), -, 1, ), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (]
[), ;, for, (, JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (, allDeps, ., add, (]
[JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (, allDeps, ., add, (, dep, ), ), {]
[JSModule, dep, :, module, ., getDependencies, (, ), ), {, if, (, allDeps, ., add, (, dep, ), ), {]
[., getDependencies, (, ), ), {, if, (, allDeps, ., add, (, dep, ), ), {, workList, ., add, (]
[(, allDeps, ., add, (, dep, ), ), {, workList, ., add, (, dep, ), ;, }, }, }, return]
[}, return, allDeps, ;, }, public, Set, <, JSModule, >, getThisAndAllDependencies, (, ), {, Set, <, JSModule, >, deps, =]
[}, public, Set, <, JSModule, >, getThisAndAllDependencies, (, ), {, Set, <, JSModule, >, deps, =, getAllDependencies, (, ), ;]
[}, public, Set, <, JSModule, >, getThisAndAllDependencies, (, ), {, Set, <, JSModule, >, deps, =, getAllDependencies, (, ), ;]
[JSModule, >, getThisAndAllDependencies, (, ), {, Set, <, JSModule, >, deps, =, getAllDependencies, (, ), ;, deps, ., add, (]
[), {, Set, <, JSModule, >, deps, =, getAllDependencies, (, ), ;, deps, ., add, (, this, ), ;, return]
[., add, (, this, ), ;, return, deps, ;, }, public, List, <, CompilerInput, >, getInputs, (, ), {, return]
[(, ), {, return, inputs, ;, }, public, CompilerInput, getByName, (, String, name, ), {, for, (, CompilerInput, input, :]
[;, }, public, CompilerInput, getByName, (, String, name, ), {, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[;, }, public, CompilerInput, getByName, (, String, name, ), {, for, (, CompilerInput, input, :, inputs, ), {, if, (]
[getByName, (, String, name, ), {, for, (, CompilerInput, input, :, inputs, ), {, if, (, name, ., equals, (]
[getByName, (, String, name, ), {, for, (, CompilerInput, input, :, inputs, ), {, if, (, name, ., equals, (]
[input, :, inputs, ), {, if, (, name, ., equals, (, input, ., getName, (, ), ), ), {, return]
[if, (, name, ., equals, (, input, ., getName, (, ), ), ), {, return, input, ;, }, }, return]
[return, input, ;, }, }, return, null, ;, }, public, boolean, removeByName, (, String, name, ), {, boolean, found, =]
[}, public, boolean, removeByName, (, String, name, ), {, boolean, found, =, false, ;, Iterator, <, CompilerInput, >, iter, =]
[}, public, boolean, removeByName, (, String, name, ), {, boolean, found, =, false, ;, Iterator, <, CompilerInput, >, iter, =]
[{, boolean, found, =, false, ;, Iterator, <, CompilerInput, >, iter, =, inputs, ., iterator, (, ), ;, while, (]
[{, boolean, found, =, false, ;, Iterator, <, CompilerInput, >, iter, =, inputs, ., iterator, (, ), ;, while, (]
[iter, =, inputs, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, CompilerInput, file, =]
[iter, =, inputs, ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, CompilerInput, file, =]
[while, (, iter, ., hasNext, (, ), ), {, CompilerInput, file, =, iter, ., next, (, ), ;, if, (]
[while, (, iter, ., hasNext, (, ), ), {, CompilerInput, file, =, iter, ., next, (, ), ;, if, (]
[hasNext, (, ), ), {, CompilerInput, file, =, iter, ., next, (, ), ;, if, (, name, ., equals, (]
[hasNext, (, ), ), {, CompilerInput, file, =, iter, ., next, (, ), ;, if, (, name, ., equals, (]
[iter, ., next, (, ), ;, if, (, name, ., equals, (, file, ., getName, (, ), ), ), {]
[iter, ., next, (, ), ;, if, (, name, ., equals, (, file, ., getName, (, ), ), ), {]
[if, (, name, ., equals, (, file, ., getName, (, ), ), ), {, iter, ., remove, (, ), ;]
[if, (, name, ., equals, (, file, ., getName, (, ), ), ), {, iter, ., remove, (, ), ;]
[equals, (, file, ., getName, (, ), ), ), {, iter, ., remove, (, ), ;, file, ., setModule, (]
[., getName, (, ), ), ), {, iter, ., remove, (, ), ;, file, ., setModule, (, null, ), ;]
[(, ), ), ), {, iter, ., remove, (, ), ;, file, ., setModule, (, null, ), ;, found, =]
[iter, ., remove, (, ), ;, file, ., setModule, (, null, ), ;, found, =, true, ;, }, }, return]
[;, found, =, true, ;, }, }, return, found, ;, }, @, Override, public, String, toString, (, ), {, return]
[String, toString, (, ), {, return, name, ;, }, public, void, clearAsts, (, ), {, for, (, CompilerInput, input, :]
[), {, return, name, ;, }, public, void, clearAsts, (, ), {, for, (, CompilerInput, input, :, inputs, ), {]
[), {, return, name, ;, }, public, void, clearAsts, (, ), {, for, (, CompilerInput, input, :, inputs, ), {]
[., clearAst, (, ), ;, }, }, public, void, sortInputsByDeps, (, Compiler, compiler, ), {, for, (, CompilerInput, input, :]
[), ;, }, }, public, void, sortInputsByDeps, (, Compiler, compiler, ), {, for, (, CompilerInput, input, :, inputs, ), {]
[), ;, }, }, public, void, sortInputsByDeps, (, Compiler, compiler, ), {, for, (, CompilerInput, input, :, inputs, ), {]
[public, void, sortInputsByDeps, (, Compiler, compiler, ), {, for, (, CompilerInput, input, :, inputs, ), {, input, ., setCompiler, (]
[:, inputs, ), {, input, ., setCompiler, (, compiler, ), ;, }, try, {, List, <, CompilerInput, >, sortedList, =]
[:, inputs, ), {, input, ., setCompiler, (, compiler, ), ;, }, try, {, List, <, CompilerInput, >, sortedList, =]
[inputs, ), {, input, ., setCompiler, (, compiler, ), ;, }, try, {, List, <, CompilerInput, >, sortedList, =, (]
[(, compiler, ), ;, }, try, {, List, <, CompilerInput, >, sortedList, =, (, new, SortedDependencies, <, CompilerInput, >, (]
[(, compiler, ), ;, }, try, {, List, <, CompilerInput, >, sortedList, =, (, new, SortedDependencies, <, CompilerInput, >, (]
[List, <, CompilerInput, >, sortedList, =, (, new, SortedDependencies, <, CompilerInput, >, (, Collections, ., <, CompilerInput, >, unmodifiableList, (]
[<, CompilerInput, >, (, Collections, ., <, CompilerInput, >, unmodifiableList, (, inputs, ), ), ), ., getSortedList, (, ), ;]
[<, CompilerInput, >, (, Collections, ., <, CompilerInput, >, unmodifiableList, (, inputs, ), ), ), ., getSortedList, (, ), ;]
[<, CompilerInput, >, unmodifiableList, (, inputs, ), ), ), ., getSortedList, (, ), ;, inputs, ., clear, (, ), ;]
[<, CompilerInput, >, unmodifiableList, (, inputs, ), ), ), ., getSortedList, (, ), ;, inputs, ., clear, (, ), ;]
[(, inputs, ), ), ), ., getSortedList, (, ), ;, inputs, ., clear, (, ), ;, inputs, ., addAll, (]
[inputs, ., clear, (, ), ;, inputs, ., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {]
[inputs, ., clear, (, ), ;, inputs, ., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {]
[), ;, inputs, ., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (]
[), ;, inputs, ., addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (]
[addAll, (, sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (, JSError, ., make, (, CIRCULAR_DEPENDENCY_ERROR, ,]
[sortedList, ), ;, }, catch, (, CircularDependencyException, e, ), {, compiler, ., report, (, JSError, ., make, (, CIRCULAR_DEPENDENCY_ERROR, ,]
[JSModule, [, ], sortJsModules, (, Collection, <, JSModule, >, modules, ), throws, CircularDependencyException, {, List, <, JSModule, >, sortedList, =]
[JSModule, [, ], sortJsModules, (, Collection, <, JSModule, >, modules, ), throws, CircularDependencyException, {, List, <, JSModule, >, sortedList, =]
[[, ], sortJsModules, (, Collection, <, JSModule, >, modules, ), throws, CircularDependencyException, {, List, <, JSModule, >, sortedList, =, (]
[JSModule, >, modules, ), throws, CircularDependencyException, {, List, <, JSModule, >, sortedList, =, (, new, SortedDependencies, <, JSModule, >, (]
[JSModule, >, modules, ), throws, CircularDependencyException, {, List, <, JSModule, >, sortedList, =, (, new, SortedDependencies, <, JSModule, >, (]
[throws, CircularDependencyException, {, List, <, JSModule, >, sortedList, =, (, new, SortedDependencies, <, JSModule, >, (, Lists, ., newArrayList, (]
[new, SortedDependencies, <, JSModule, >, (, Lists, ., newArrayList, (, modules, ), ), ), ., getSortedList, (, ), ;, return]
[new, SortedDependencies, <, JSModule, >, (, Lists, ., newArrayList, (, modules, ), ), ), ., getSortedList, (, ), ;, return]
[>, (, Lists, ., newArrayList, (, modules, ), ), ), ., getSortedList, (, ), ;, return, sortedList, ., toArray, (]
[., newArrayList, (, modules, ), ), ), ., getSortedList, (, ), ;, return, sortedList, ., toArray, (, new, JSModule, []
[., newArrayList, (, modules, ), ), ), ., getSortedList, (, ), ;, return, sortedList, ., toArray, (, new, JSModule, []
[new, JSModule, [, sortedList, ., size, (, ), ], ), ;, }, public, void, setDepth, (, int, dep, ), {]
[new, JSModule, [, sortedList, ., size, (, ), ], ), ;, }, public, void, setDepth, (, int, dep, ), {]
[., size, (, ), ], ), ;, }, public, void, setDepth, (, int, dep, ), {, this, ., depth, =]
[setDepth, (, int, dep, ), {, this, ., depth, =, dep, ;, }, public, int, getDepth, (, ), {, return]
