[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >, 0d, &&, alpha, <=, 2d]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >, 0d, &&, alpha]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, !, (, alpha, >, 0d, &&, alpha, <=, 2d]
[;, }, if, (, !, (, alpha, >, 0d, &&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if]
[&&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2]
[>, 0d, &&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0]
[&&, alpha, <=, 2d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if]
[<=, 2d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if]
[;, }, if, (, !, (, beta, >=, -, 1d, &&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException]
[,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&, beta, <=]
[., OUT_OF_RANGE_LEFT, ,, alpha, ,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&]
[,, 0, ,, 2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&, beta, <=, 1d, )]
[,, 2, ), ;, }, if, (, !, (, beta, >=, -, 1d, &&, beta, <=, 1d, ), ), {]
[), ;, }, if, (, !, (, beta, >=, -, 1d, &&, beta, <=, 1d, ), ), {, throw, new]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }, this]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }, this]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }]
[&&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,]
[>=, -, 1d, &&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,]
[&&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,]
[&&, beta, <=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }]
[<=, 1d, ), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, )]
[), ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }]
[;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;]
[,, beta, ,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =]
[., OUT_OF_RANGE_SIMPLE, ,, beta, ,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;, this, .]
[,, -, 1, ,, 1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;]
[,, 1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta]
[,, 1, ), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta]
[), ;, }, this, ., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta]
[=, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d]
[., generator, =, generator, ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha]
[;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta]
[=, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {]
[., alpha, =, alpha, ;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d]
[;, this, ., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =]
[=, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, .]
[., beta, =, beta, ;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *]
[;, if, (, alpha, <, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (]
[), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }]
[&&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /]
[<, 2d, &&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *]
[&&, beta, !=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /]
[), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }]
[!=, 0d, ), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, )]
[), {, zeta, =, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }]
[=, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, else, {, zeta]
[;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -]
[*, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, else, {, zeta, =, 0d]
[;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -]
[., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, else, {, zeta, =, 0d, ;, }]
[), ;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =]
[/, 2, ), ;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double]
[*, alpha, /, 2, ), ;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, )]
[., PI, *, alpha, /, 2, ), ;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble]
[/, 2, ), ;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double]
[), ;, }, else, {, zeta, =, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =]
[=, 0d, ;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -, FastMath, ., log, (, generator]
[;, }, }, public, double, nextNormalizedDouble, (, ), {, double, omega, =, -, FastMath, ., log, (, generator, ., nextDouble]
[;, double, phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (]
[;, double, phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (]
[., log, (, generator, ., nextDouble, (, ), ), ;, double, phi, =, FastMath, ., PI, *, (, generator, .]
[), ;, double, phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if]
[., nextDouble, (, ), ), ;, double, phi, =, FastMath, ., PI, *, (, generator, ., nextDouble, (, ), -]
[;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath, .]
[*, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath]
[., PI, *, (, generator, ., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {]
[;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath, .]
[), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath]
[-, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, )]
[., nextDouble, (, ), -, 0.5, ), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (]
[), ;, if, (, alpha, ==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath]
[), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath, ., sin, (, phi, ), ;, }]
[==, 2d, ), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath, ., sin, (, phi, )]
[), {, return, FastMath, ., sqrt, (, 2d, *, omega, ), *, FastMath, ., sin, (, phi, ), ;, }]
[;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha, ==, 1d, ), {, x]
[*, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if]
[., sqrt, (, 2d, *, omega, ), *, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if]
[), *, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {]
[*, omega, ), *, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d]
[), *, FastMath, ., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {]
[;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha, ==, 1d, ), {, x]
[., sin, (, phi, ), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha]
[), ;, }, double, x, ;, if, (, beta, ==, 0d, ), {, if, (, alpha, ==, 1d, ), {]
[), {, if, (, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else]
[==, 0d, ), {, if, (, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;]
[), {, if, (, alpha, ==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else]
[), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (]
[==, 1d, ), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, .]
[), {, x, =, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (]
[=, FastMath, ., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath]
[;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha]
[., tan, (, phi, ), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos]
[), ;, }, else, {, x, =, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -]
[=, FastMath, ., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,]
[;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, ., abs]
[/, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }, else]
[*, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, )]
[., pow, (, omega, *, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,, 1d, /]
[,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow]
[*, FastMath, ., cos, (, (, 1, -, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, )]
[,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow]
[., cos, (, (, 1, -, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath]
[), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, .]
[*, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /]
[), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, )]
[-, alpha, ), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *]
[), *, phi, ), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, )]
[), ,, 1d, /, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, .]
[), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi]
[-, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos]
[/, alpha, -, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath]
[-, 1d, ), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos]
[), *, FastMath, ., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi]
[/, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }, else]
[., sin, (, alpha, *, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,, 1d]
[), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }]
[*, phi, ), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;]
[), /, FastMath, ., pow, (, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }]
[;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, ., abs]
[., pow, (, FastMath, ., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }, else, {, double]
[,, 1d, /, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;]
[., cos, (, phi, ), ,, 1d, /, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, .]
[), ,, 1d, /, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, )]
[), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, .]
[/, alpha, ), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (]
[), ;, }, }, else, {, double, cosPhi, =, FastMath, ., cos, (, phi, ), ;, if, (, FastMath, .]
[;, if, (, FastMath, ., abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *]
[., cos, (, phi, ), ;, if, (, FastMath, ., abs, (, alpha, -, 1d, ), >, 1e-8, ), {]
[), ;, if, (, FastMath, ., abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha]
[), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath]
[>, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =]
[., abs, (, alpha, -, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi]
[), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x]
[-, 1d, ), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi]
[), >, 1e-8, ), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x]
[), {, double, alphaPhi, =, alpha, *, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath]
[;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *]
[*, phi, ;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +]
[;, double, invAlphaPhi, =, phi, -, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *]
[;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), )]
[-, alphaPhi, ;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi]
[;, x, =, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), )]
[=, (, FastMath, ., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi]
[;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d]
[/, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else]
[*, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath]
[/, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), )]
[), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, )]
[+, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, )]
[., sin, (, alphaPhi, ), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath]
[), +, zeta, *, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi]
[), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, )]
[*, FastMath, ., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta]
[), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, )]
[., cos, (, alphaPhi, ), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath]
[), ), /, cosPhi, *, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi]
[*, (, FastMath, ., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath]
[/, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else]
[), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }]
[+, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (]
[., cos, (, invAlphaPhi, ), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (]
[), +, zeta, *, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,]
[), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }]
[*, FastMath, ., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -]
[), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }]
[., sin, (, invAlphaPhi, ), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, )]
[), ), /, FastMath, ., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;]
[;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =, 2d]
[., pow, (, omega, *, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double]
[,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /]
[*, cosPhi, ,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, .]
[,, (, 1, -, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /]
[), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =]
[/, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;]
[), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi]
[-, alpha, ), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta]
[), /, alpha, ), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi]
[), ;, }, else, {, double, betaPhi, =, FastMath, ., PI, /, 2, +, beta, *, phi, ;, x, =]
[;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta]
[+, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (]
[/, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, .]
[., PI, /, 2, +, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *]
[+, beta, *, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (]
[;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta]
[*, phi, ;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, )]
[;, x, =, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta]
[=, 2d, /, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath]
[;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath, .]
[*, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI]
[/, FastMath, ., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log]
[*, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI]
[., PI, *, (, betaPhi, *, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath]
[;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath, .]
[), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath]
[-, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), )]
[*, FastMath, ., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *]
[-, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), )]
[., tan, (, phi, ), -, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *]
[), -, beta, *, FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, )]
[), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath]
[*, FastMath, ., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if]
[), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath]
[., log, (, FastMath, ., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha]
[), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (]
[/, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, .]
[*, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *]
[*, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +]
[/, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =]
[., PI, /, 2d, *, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {]
[*, omega, *, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +]
[*, cosPhi, /, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *]
[/, betaPhi, ), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, .]
[), ), ;, if, (, alpha, !=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (]
[), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, )]
[!=, 1d, ), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /]
[), {, x, =, x, +, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, )]
[=, x, +, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, }]
[;, }, }, }, return, x, ;, }, }]
[+, beta, *, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, }, }, return]
[;, }, }, }, return, x, ;, }, }]
[*, FastMath, ., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, }, }, return, x, ;]
[;, }, }, }, return, x, ;, }, }]
[., tan, (, FastMath, ., PI, *, alpha, /, 2, ), ;, }, }, }, return, x, ;, }, }]
[), ;, }, }, }, return, x, ;, }, }]
[/, 2, ), ;, }, }, }, return, x, ;, }, }]
[*, alpha, /, 2, ), ;, }, }, }, return, x, ;, }, }]
[., PI, *, alpha, /, 2, ), ;, }, }, }, return, x, ;, }, }]
[/, 2, ), ;, }, }, }, return, x, ;, }, }]
[), ;, }, }, }, return, x, ;, }, }]
[;, }, }]
