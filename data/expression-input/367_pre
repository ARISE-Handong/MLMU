[commons, ., math3, ., random, ., Well19937c, ;, public, class, BetaDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, BetaDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[class, BetaDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, -]
[double, z, ;, private, final, double, solverAbsoluteAccuracy, ;, public, BetaDistribution, (, double, alpha, ,, double, beta, ), {, this, (]
[;, private, final, double, solverAbsoluteAccuracy, ;, public, BetaDistribution, (, double, alpha, ,, double, beta, ), {, this, (, alpha, ,]
[final, double, solverAbsoluteAccuracy, ;, public, BetaDistribution, (, double, alpha, ,, double, beta, ), {, this, (, alpha, ,, beta, ,]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, BetaDistribution, (, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, this, (]
[public, BetaDistribution, (, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,]
[(, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,, alpha, ,]
[alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,, alpha, ,, beta, ,]
[;, }, public, BetaDistribution, (, RandomGenerator, rng, ,, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, super, (]
[BetaDistribution, (, RandomGenerator, rng, ,, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;]
[BetaDistribution, (, RandomGenerator, rng, ,, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;]
[,, double, alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, this, ., alpha, =]
[alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, this, ., alpha, =, alpha, ;]
[alpha, ,, double, beta, ,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, this, ., alpha, =, alpha, ;]
[,, double, inverseCumAccuracy, ), {, super, (, rng, ), ;, this, ., alpha, =, alpha, ;, this, ., beta, =]
[inverseCumAccuracy, ), {, super, (, rng, ), ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;]
[{, super, (, rng, ), ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, z, =]
[{, super, (, rng, ), ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, z, =]
[), ;, this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, z, =, Double, ., NaN, ;]
[this, ., alpha, =, alpha, ;, this, ., beta, =, beta, ;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =]
[beta, ;, z, =, Double, ., NaN, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {, return]
[inverseCumAccuracy, ;, }, public, double, getAlpha, (, ), {, return, alpha, ;, }, public, double, getBeta, (, ), {, return]
[;, }, public, double, getBeta, (, ), {, return, beta, ;, }, private, void, recomputeZ, (, ), {, if, (]
[;, }, public, double, getBeta, (, ), {, return, beta, ;, }, private, void, recomputeZ, (, ), {, if, (]
[getBeta, (, ), {, return, beta, ;, }, private, void, recomputeZ, (, ), {, if, (, Double, ., isNaN, (]
[return, beta, ;, }, private, void, recomputeZ, (, ), {, if, (, Double, ., isNaN, (, z, ), ), {]
[;, }, private, void, recomputeZ, (, ), {, if, (, Double, ., isNaN, (, z, ), ), {, z, =]
[;, }, private, void, recomputeZ, (, ), {, if, (, Double, ., isNaN, (, z, ), ), {, z, =]
[;, }, private, void, recomputeZ, (, ), {, if, (, Double, ., isNaN, (, z, ), ), {, z, =]
[;, }, private, void, recomputeZ, (, ), {, if, (, Double, ., isNaN, (, z, ), ), {, z, =]
[recomputeZ, (, ), {, if, (, Double, ., isNaN, (, z, ), ), {, z, =, Gamma, ., logGamma, (]
[{, if, (, Double, ., isNaN, (, z, ), ), {, z, =, Gamma, ., logGamma, (, alpha, ), +]
[{, if, (, Double, ., isNaN, (, z, ), ), {, z, =, Gamma, ., logGamma, (, alpha, ), +]
[., isNaN, (, z, ), ), {, z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (]
[z, ), ), {, z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -]
[z, ), ), {, z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -]
[z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -, Gamma, ., logGamma, (]
[z, =, Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -, Gamma, ., logGamma, (]
[Gamma, ., logGamma, (, alpha, ), +, Gamma, ., logGamma, (, beta, ), -, Gamma, ., logGamma, (, alpha, +]
[-, Gamma, ., logGamma, (, alpha, +, beta, ), ;, }, }, public, double, density, (, double, x, ), {]
[+, beta, ), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (]
[+, beta, ), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (]
[+, beta, ), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (]
[), ;, }, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <]
[}, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <, 0, ||]
[}, }, public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <, 0, ||]
[public, double, density, (, double, x, ), {, recomputeZ, (, ), ;, if, (, x, <, 0, ||, x, >]
[double, x, ), {, recomputeZ, (, ), ;, if, (, x, <, 0, ||, x, >, 1, ), {, return]
[), ;, if, (, x, <, 0, ||, x, >, 1, ), {, return, 0, ;, }, else, if, (]
[), ;, if, (, x, <, 0, ||, x, >, 1, ), {, return, 0, ;, }, else, if, (]
[if, (, x, <, 0, ||, x, >, 1, ), {, return, 0, ;, }, else, if, (, x, ==]
[||, x, >, 1, ), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (]
[||, x, >, 1, ), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (]
[>, 1, ), {, return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (, alpha, <]
[return, 0, ;, }, else, if, (, x, ==, 0, ), {, if, (, alpha, <, 1, ), {, throw]
[}, else, if, (, x, ==, 0, ), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (]
[}, else, if, (, x, ==, 0, ), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (]
[x, ==, 0, ), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,]
[0, ), {, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,]
[{, if, (, alpha, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,]
[1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }, return]
[(, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, if, (]
[(, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, if, (]
[., CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA, ,, alpha, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, if, (, x, ==]
[1, ,, false, ), ;, }, return, 0, ;, }, else, if, (, x, ==, 1, ), {, if, (]
[1, ,, false, ), ;, }, return, 0, ;, }, else, if, (, x, ==, 1, ), {, if, (]
[false, ), ;, }, return, 0, ;, }, else, if, (, x, ==, 1, ), {, if, (, beta, <]
[return, 0, ;, }, else, if, (, x, ==, 1, ), {, if, (, beta, <, 1, ), {, throw]
[}, else, if, (, x, ==, 1, ), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (]
[}, else, if, (, x, ==, 1, ), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (]
[x, ==, 1, ), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,]
[1, ), {, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,]
[{, if, (, beta, <, 1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,]
[1, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,, false, ), ;, }, return]
[., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, {, double, logX, =]
[., CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA, ,, beta, ,, 1, ,, false, ), ;, }, return, 0, ;, }, else, {, double, logX, =]
[,, 1, ,, false, ), ;, }, return, 0, ;, }, else, {, double, logX, =, FastMath, ., log, (]
[}, return, 0, ;, }, else, {, double, logX, =, FastMath, ., log, (, x, ), ;, double, log1mX, =]
[}, return, 0, ;, }, else, {, double, logX, =, FastMath, ., log, (, x, ), ;, double, log1mX, =]
[}, else, {, double, logX, =, FastMath, ., log, (, x, ), ;, double, log1mX, =, FastMath, ., log1p, (]
[else, {, double, logX, =, FastMath, ., log, (, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -]
[=, FastMath, ., log, (, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return]
[=, FastMath, ., log, (, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return]
[(, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (]
[(, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (]
[(, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (]
[(, x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (]
[x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (]
[x, ), ;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (]
[;, double, log1mX, =, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -]
[=, FastMath, ., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *]
[., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +]
[., log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +]
[log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (]
[log1p, (, -, x, ), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (]
[-, x, ), ;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (, beta, -]
[;, return, FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (, beta, -, 1, ), *]
[FastMath, ., exp, (, (, alpha, -, 1, ), *, logX, +, (, beta, -, 1, ), *, log1mX, -]
[1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[1, ), *, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[*, log1mX, -, z, ), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=]
[), ;, }, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return]
[cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, else, if, (]
[cumulativeProbability, (, double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, else, if, (]
[double, x, ), {, if, (, x, <=, 0, ), {, return, 0, ;, }, else, if, (, x, >=]
[if, (, x, <=, 0, ), {, return, 0, ;, }, else, if, (, x, >=, 1, ), {, return]
[{, return, 0, ;, }, else, if, (, x, >=, 1, ), {, return, 1, ;, }, else, {, return]
[{, return, 0, ;, }, else, if, (, x, >=, 1, ), {, return, 1, ;, }, else, {, return]
[}, else, if, (, x, >=, 1, ), {, return, 1, ;, }, else, {, return, Beta, ., regularizedBeta, (]
[if, (, x, >=, 1, ), {, return, 1, ;, }, else, {, return, Beta, ., regularizedBeta, (, x, ,]
[x, >=, 1, ), {, return, 1, ;, }, else, {, return, Beta, ., regularizedBeta, (, x, ,, alpha, ,]
[regularizedBeta, (, x, ,, alpha, ,, beta, ), ;, }, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, a, =]
[{, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, a, =, getAlpha, (, ), ;, return]
[{, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, a, =, getAlpha, (, ), ;, return]
[solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, final, double, a, =, getAlpha, (, ), ;, return, a, /]
[;, }, public, double, getNumericalMean, (, ), {, final, double, a, =, getAlpha, (, ), ;, return, a, /, (]
[;, }, public, double, getNumericalMean, (, ), {, final, double, a, =, getAlpha, (, ), ;, return, a, /, (]
[public, double, getNumericalMean, (, ), {, final, double, a, =, getAlpha, (, ), ;, return, a, /, (, a, +]
[/, (, a, +, getBeta, (, ), ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, a, =, getAlpha, (, ), ;, final, double, b, =]
[final, double, a, =, getAlpha, (, ), ;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =]
[final, double, a, =, getAlpha, (, ), ;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =]
[a, =, getAlpha, (, ), ;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =, a, +]
[(, ), ;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return]
[(, ), ;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return]
[), ;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (]
[), ;, final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (]
[final, double, b, =, getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *]
[=, getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /]
[getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /, (]
[getBeta, (, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /, (]
[(, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /, (, (]
[(, ), ;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /, (, (]
[;, final, double, alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /, (, (, alphabetasum, *]
[alphabetasum, =, a, +, b, ;, return, (, a, *, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *]
[=, a, +, b, ;, return, (, a, *, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *, (]
[=, a, +, b, ;, return, (, a, *, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *, (]
[+, b, ;, return, (, a, *, b, ), /, (, (, alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +]
[alphabetasum, *, alphabetasum, ), *, (, alphabetasum, +, 1, ), ), ;, }, public, double, getSupportLowerBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[0, ;, }, public, double, getSupportUpperBound, (, ), {, return, 1, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[1, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
