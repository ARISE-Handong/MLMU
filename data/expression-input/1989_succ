[;, static, final, boolean, MAKE_LOCAL_NAMES_UNIQUE, =, true, ;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,]
[;, public, static, final, DiagnosticType, CATCH_BLOCK_VAR_ERROR, =, DiagnosticType, ., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,, "The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (]
[;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;, this, ., assertOnChange, =]
[., error, (, "JSC_CATCH_BLOCK_VAR_ERROR", ,, "The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this]
[,, "The use of scope variable {0} is not allowed within a catch block ", +, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler]
[), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;, this, ., assertOnChange]
[+, "with a catch exception of the same name.", ), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;, this]
[), ;, Normalize, (, AbstractCompiler, compiler, ,, boolean, assertOnChange, ), {, this, ., compiler, =, compiler, ;, this, ., assertOnChange]
[=, compiler, ;, this, ., assertOnChange, =, assertOnChange, ;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,]
[., compiler, =, compiler, ;, this, ., assertOnChange, =, assertOnChange, ;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String]
[;, this, ., assertOnChange, =, assertOnChange, ;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix]
[=, assertOnChange, ;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js]
[., assertOnChange, =, assertOnChange, ;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {]
[;, }, static, Node, parseAndNormalizeSyntheticCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;]
[., parseSyntheticCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), )]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, )]
[., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, .]
[,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (]
[,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier]
[;, return, js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node]
[., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,, prefix]
[,, js, ,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,, prefix, ), ), ), ;]
[,, new, MakeDeclaredNamesUnique, (, new, BoilerplateRenamer, (, compiler, ., getUniqueNameIdSupplier, (, ), ,, prefix, ), ), ), ;, return, js]
[), ;, return, js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {]
[), ), ;, return, js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, )]
[,, prefix, ), ), ), ;, return, js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,]
[., getUniqueNameIdSupplier, (, ), ,, prefix, ), ), ), ;, return, js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler]
[), ), ), ;, return, js, ;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix]
[;, }, static, Node, parseAndNormalizeTestCode, (, AbstractCompiler, compiler, ,, String, code, ,, String, prefix, ), {, Node, js, =, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;]
[., parseTestCode, (, code, ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), )]
[;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, ), ), ;, return, js, ;, }, private]
[., traverse, (, compiler, ,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, .]
[,, js, ,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, new, Normalize, ., NormalizeStatements, (, compiler, ,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, ), ), ;, return, js, ;, }]
[,, false, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, ), ), ;, return]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, ), ), ;, return, js, ;]
[;, return, js, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new]
[., traverse, (, compiler, ,, js, ,, new, MakeDeclaredNamesUnique, (, ), ), ;, return, js, ;, }, private, void, reportCodeChange]
[,, js, ,, new, MakeDeclaredNamesUnique, (, ), ), ;, return, js, ;, }, private, void, reportCodeChange, (, String, changeDescription, )]
[,, new, MakeDeclaredNamesUnique, (, ), ), ;, return, js, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if]
[), ;, return, js, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw]
[;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n"]
[), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[+, changeDescription, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[., reportCodeChange, (, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new]
[;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal, (]
[., traverseRoots, (, externs, ,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, )]
[,, new, NormalizeStatements, (, compiler, ,, assertOnChange, ), ), ., traverseRoots, (, externs, ,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE]
[), ., traverseRoots, (, externs, ,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (]
[,, assertOnChange, ), ), ., traverseRoots, (, externs, ,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =]
[), ), ., traverseRoots, (, externs, ,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique]
[,, root, ), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =]
[), ;, if, (, MAKE_LOCAL_NAMES_UNIQUE, ), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal]
[), {, MakeDeclaredNamesUnique, renamer, =, new, MakeDeclaredNamesUnique, (, ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, renamer, )]
[;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, renamer, ), ;, t, ., traverseRoots, (, externs, ,, root, )]
[;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars]
[,, renamer, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, )]
[), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new]
[;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (, externs]
[., traverseRoots, (, externs, ,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler]
[,, root, ), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), .]
[), ;, }, removeDuplicateDeclarations, (, externs, ,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (]
[;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new]
[,, root, ), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations]
[), ;, new, PropagateConstantAnnotationsOverVars, (, compiler, ,, assertOnChange, ), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =]
[;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, ), ;]
[., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (]
[,, assertOnChange, ), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal]
[), ., process, (, externs, ,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse]
[,, root, ), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), ;, FindExposeAnnotations, findExposeAnnotations, =, new, FindExposeAnnotations, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, )]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty]
[;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root]
[., traverse, (, compiler, ,, root, ,, findExposeAnnotations, ), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, )]
[,, root, ,, findExposeAnnotations, ), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, .]
[,, findExposeAnnotations, ), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (]
[), ;, if, (, !, findExposeAnnotations, ., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }]
[., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties]
[., exposedProperties, ., isEmpty, (, ), ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations]
[;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, compiler, ., setLifeCycleStage, (]
[., traverse, (, compiler, ,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }, if, (, !]
[,, root, ,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }, if, (, !, compiler, ., getLifeCycleStage, (]
[,, new, RewriteExposedProperties, (, findExposeAnnotations, ., exposedProperties, ), ), ;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), .]
[), ;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, compiler, ., setLifeCycleStage]
[), ), ;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, compiler, .]
[., exposedProperties, ), ), ;, }, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {]
[), {, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED, ), ;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {]
[), {, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED, ), ;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {]
[., isNormalized, (, ), ), {, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED, ), ;, }, }, private, static, class]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), {, compiler, ., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED, ), ;, }]
[;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, =, Sets, .]
[., setLifeCycleStage, (, LifeCycleStage, ., NORMALIZED, ), ;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {, private, final, Set]
[), ;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, =, Sets]
[., NORMALIZED, ), ;, }, }, private, static, class, FindExposeAnnotations, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil]
[., newHashSet, (, ), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;]
[., isExprAssign, (, n, ), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign]
[), ), {, Node, assign, =, n, ., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, )]
[;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (]
[., getFirstChild, (, ), ;, Node, lhs, =, assign, ., getFirstChild, (, ), ;, if, (, lhs, ., isGetProp, (]
[;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {, exposedProperties, ., add, (, lhs]
[., getFirstChild, (, ), ;, if, (, lhs, ., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {, exposedProperties]
[), {, exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, else]
[&&, isMarkedExpose, (, assign, ), ), {, exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, )]
[., isGetProp, (, ), &&, isMarkedExpose, (, assign, ), ), {, exposedProperties, ., add, (, lhs, ., getLastChild, (, )]
[), {, exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, else]
[), ), {, exposedProperties, ., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }]
[;, }, }, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (, n, ), ), {, exposedProperties, .]
[., add, (, lhs, ., getLastChild, (, ), ., getString, (, ), ), ;, }, }, else, if, (, n]
[), ;, }, }, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (, n, ), ), {, exposedProperties]
[., getString, (, ), ), ;, }, }, else, if, (, n, ., isStringKey, (, ), &&, isMarkedExpose, (, n]
[., getLastChild, (, ), ., getString, (, ), ), ;, }, }, else, if, (, n, ., isStringKey, (, )]
[), {, exposedProperties, ., add, (, n, ., getString, (, ), ), ;, }, }, private, boolean, isMarkedExpose, (, Node]
[&&, isMarkedExpose, (, n, ), ), {, exposedProperties, ., add, (, n, ., getString, (, ), ), ;, }, }]
[., isStringKey, (, ), &&, isMarkedExpose, (, n, ), ), {, exposedProperties, ., add, (, n, ., getString, (, )]
[), {, exposedProperties, ., add, (, n, ., getString, (, ), ), ;, }, }, private, boolean, isMarkedExpose, (, Node]
[), ), {, exposedProperties, ., add, (, n, ., getString, (, ), ), ;, }, }, private, boolean, isMarkedExpose, (]
[;, }, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, ), ;]
[., add, (, n, ., getString, (, ), ), ;, }, }, private, boolean, isMarkedExpose, (, Node, n, ), {]
[), ;, }, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n, ., getJSDocInfo, (, )]
[., getString, (, ), ), ;, }, }, private, boolean, isMarkedExpose, (, Node, n, ), {, JSDocInfo, info, =, n]
[;, return, info, !=, null, &&, info, ., isExpose, (, ), ;, }, }, private, class, RewriteExposedProperties, extends, AbstractPostOrderCallback, {]
[., getJSDocInfo, (, ), ;, return, info, !=, null, &&, info, ., isExpose, (, ), ;, }, }, private, class]
[;, }, }, private, class, RewriteExposedProperties, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, ;, RewriteExposedProperties, (, Set]
[&&, info, ., isExpose, (, ), ;, }, }, private, class, RewriteExposedProperties, extends, AbstractPostOrderCallback, {, private, final, Set, <, String]
[!=, null, &&, info, ., isExpose, (, ), ;, }, }, private, class, RewriteExposedProperties, extends, AbstractPostOrderCallback, {, private, final, Set]
[&&, info, ., isExpose, (, ), ;, }, }, private, class, RewriteExposedProperties, extends, AbstractPostOrderCallback, {, private, final, Set, <, String]
[;, }, }, private, class, RewriteExposedProperties, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties, ;, RewriteExposedProperties, (, Set]
[., isExpose, (, ), ;, }, }, private, class, RewriteExposedProperties, extends, AbstractPostOrderCallback, {, private, final, Set, <, String, >, exposedProperties]
[=, exposedProperties, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., exposedProperties, =, exposedProperties, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, exposedProperties, ., contains]
[., isGetProp, (, ), ), {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if]
[;, if, (, exposedProperties, ., contains, (, propName, ), ), {, Node, obj, =, n, ., removeFirstChild, (, ), ;]
[., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {, Node, obj, =, n, .]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {, Node]
[), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =, n, ., removeFirstChild, (, ), ;]
[., contains, (, propName, ), ), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =, n]
[), ), {, Node, obj, =, n, ., removeFirstChild, (, ), ;, Node, prop, =, n, ., removeFirstChild, (, )]
[;, Node, prop, =, n, ., removeFirstChild, (, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,]
[., removeFirstChild, (, ), ;, Node, prop, =, n, ., removeFirstChild, (, ), ;, n, ., getParent, (, ), .]
[;, n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (, obj, ,, prop, ), )]
[., removeFirstChild, (, ), ;, n, ., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (, obj]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, n, ., isStringKey, (, ), ), {, String]
[., replaceChild, (, n, ,, IR, ., getelem, (, obj, ,, prop, ), ), ;, compiler, ., reportCodeChange, (, )]
[., getParent, (, ), ., replaceChild, (, n, ,, IR, ., getelem, (, obj, ,, prop, ), ), ;, compiler]
[,, IR, ., getelem, (, obj, ,, prop, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, n, ., isStringKey, (, ), ), {]
[., getelem, (, obj, ,, prop, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[,, prop, ), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, n, ., isStringKey, (]
[), ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, n, ., isStringKey, (, ), )]
[;, }, }, else, if, (, n, ., isStringKey, (, ), ), {, String, propName, =, n, ., getString, (]
[., reportCodeChange, (, ), ;, }, }, else, if, (, n, ., isStringKey, (, ), ), {, String, propName, =]
[), {, String, propName, =, n, ., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), )]
[., isStringKey, (, ), ), {, String, propName, =, n, ., getString, (, ), ;, if, (, exposedProperties, ., contains]
[;, if, (, exposedProperties, ., contains, (, propName, ), ), {, n, ., setQuotedString, (, ), ;, compiler, ., reportCodeChange]
[., getString, (, ), ;, if, (, exposedProperties, ., contains, (, propName, ), ), {, n, ., setQuotedString, (, )]
[), {, n, ., setQuotedString, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, static, class]
[., contains, (, propName, ), ), {, n, ., setQuotedString, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }]
[), ), {, n, ., setQuotedString, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, static]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, static, class, PropagateConstantAnnotationsOverVars, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private]
[., setQuotedString, (, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, }, static, class, PropagateConstantAnnotationsOverVars, extends, AbstractPostOrderCallback]
[;, }, }, }, }, static, class, PropagateConstantAnnotationsOverVars, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final]
[., reportCodeChange, (, ), ;, }, }, }, }, static, class, PropagateConstantAnnotationsOverVars, extends, AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler]
[=, compiler, ;, this, ., assertOnChange, =, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., assertOnChange, =, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., assertOnChange, =, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (]
[., assertOnChange, =, forbidChanges, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, new, NodeTraversal, (, compiler, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., traverseRoots, (, externs, ,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[,, this, ), ., traverseRoots, (, externs, ,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[), ., traverseRoots, (, externs, ,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[,, root, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, JSDocInfo, info]
[., isName, (, ), ), {, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, return]
[), {, return, ;, }, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (, ), ., getVar]
[., isEmpty, (, ), ), {, return, ;, }, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope]
[., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, JSDocInfo, info, =, null, ;, Var, var]
[;, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if]
[;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =, var]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, )]
[), ;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant]
[., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, )]
[), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&, info]
[!=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null]
[), {, info, =, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&, info]
[=, var, ., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&, info, ., isConstant, (]
[;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention]
[., getJSDocInfo, (, ), ;, }, boolean, shouldBeConstant, =, (, info, !=, null, &&, info, ., isConstant, (, ), )]
[;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, )]
[||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n]
[), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =]
[&&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,]
[!=, null, &&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,]
[&&, info, ., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,]
[), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =]
[., isConstant, (, ), ), ||, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, )]
[;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, )]
[., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp]
[,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (]
[., getCodingConvention, (, ), ,, n, ,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[,, parent, ), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&]
[), ;, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant]
[;, if, (, shouldBeConstant, &&, !, isMarkedConstant, ), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, ), {, if, (, assertOnChange, )]
[), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, ), {, if, (, assertOnChange, ), {, String, name, =, n, .]
[., IS_CONSTANT_NAME, ), ;, if, (, shouldBeConstant, &&, !, isMarkedConstant, ), {, if, (, assertOnChange, ), {, String, name, =]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[&&, !, isMarkedConstant, ), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name]
[;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, )]
[., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n]
[;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, static, class, VerifyConstants]
[), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, static, class]
[+, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[+, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node]
[+, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp]
[+, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n]
[+, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;]
[+, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n]
[+, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp]
[+, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node]
[+, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, static, class]
[., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }]
[., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true]
[;, }, }, }, }, static, class, VerifyConstants, extends, AbstractPostOrderCallback, implements, CompilerPass, {, final, private, AbstractCompiler, compiler, ;, final, private]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, static, class, VerifyConstants, extends, AbstractPostOrderCallback, implements]
[,, true, ), ;, }, }, }, }, static, class, VerifyConstants, extends, AbstractPostOrderCallback, implements, CompilerPass, {, final, private, AbstractCompiler, compiler]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, }, static, class, VerifyConstants, extends, AbstractPostOrderCallback, implements, CompilerPass, {, final, private]
[), ;, }, }, }, }, static, class, VerifyConstants, extends, AbstractPostOrderCallback, implements, CompilerPass, {, final, private, AbstractCompiler, compiler, ;, final]
[=, compiler, ;, this, ., checkUserDeclarations, =, checkUserDeclarations, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., compiler, =, compiler, ;, this, ., checkUserDeclarations, =, checkUserDeclarations, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., checkUserDeclarations, =, checkUserDeclarations, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, checkUserDeclarations, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, externsAndJs, =]
[., checkUserDeclarations, =, checkUserDeclarations, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Node, externsAndJs, =, root, .]
[;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, )]
[., getParent, (, ), ;, Preconditions, ., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, .]
[;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists]
[., checkState, (, externsAndJs, !=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;]
[), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,]
[!=, null, ), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (]
[), ;, Preconditions, ., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,]
[;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }]
[., checkState, (, externsAndJs, ., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList]
[), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;]
[., hasChild, (, externs, ), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root]
[), ), ;, NodeTraversal, ., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, )]
[;, }, private, Map, <, String, ,, Boolean, >, constantMap, =, Maps, ., newHashMap, (, ), ;, @, Override, public]
[., traverseRoots, (, compiler, ,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, Map]
[,, Lists, ., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, Map, <, String, ,, Boolean]
[,, this, ), ;, }, private, Map, <, String, ,, Boolean, >, constantMap, =, Maps, ., newHashMap, (, ), ;]
[., newArrayList, (, externs, ,, root, ), ,, this, ), ;, }, private, Map, <, String, ,, Boolean, >, constantMap]
[,, root, ), ,, this, ), ;, }, private, Map, <, String, ,, Boolean, >, constantMap, =, Maps, ., newHashMap]
[), ,, this, ), ;, }, private, Map, <, String, ,, Boolean, >, constantMap, =, Maps, ., newHashMap, (, )]
[), ;, }, private, Map, <, String, ,, Boolean, >, constantMap, =, Maps, ., newHashMap, (, ), ;, @, Override]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n]
[., newHashMap, (, ), ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), {, String, name, =, n, ., getString, (, ), ;, if, (, n, ., getString, (, ), ., isEmpty]
[., isName, (, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (, n, ., getString]
[;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, boolean, isConst, =]
[., getString, (, ), ;, if, (, n, ., getString, (, ), ., isEmpty, (, ), ), {, return, ;]
[), {, return, ;, }, boolean, isConst, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, checkUserDeclarations]
[., isEmpty, (, ), ), {, return, ;, }, boolean, isConst, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, )]
[., getString, (, ), ., isEmpty, (, ), ), {, return, ;, }, boolean, isConst, =, n, ., getBooleanProp, (]
[;, if, (, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention]
[), ;, if, (, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, )]
[., IS_CONSTANT_NAME, ), ;, if, (, checkUserDeclarations, ), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention]
[), {, boolean, expectedConst, =, false, ;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, NodeUtil, .]
[;, CodingConvention, convention, =, compiler, ., getCodingConvention, (, ), ;, if, (, NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil]
[;, if, (, NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, )]
[., getCodingConvention, (, ), ;, if, (, NodeUtil, ., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,]
[), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var]
[||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {, expectedConst, =, true, ;, }, else, {]
[., isConstantName, (, n, ), ||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {, expectedConst, =]
[), ||, NodeUtil, ., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {, expectedConst, =, true, ;, }, else]
[), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var]
[., isConstantByConvention, (, convention, ,, n, ,, parent, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =]
[,, n, ,, parent, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info]
[,, parent, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null]
[), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var]
[=, true, ;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var, =, t, .]
[;, }, else, {, expectedConst, =, false, ;, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (]
[=, false, ;, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, n]
[;, JSDocInfo, info, =, null, ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString]
[;, Var, var, =, t, ., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if]
[;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (, info]
[., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =, var]
[., getScope, (, ), ., getVar, (, n, ., getString, (, ), ), ;, if, (, var, !=, null, )]
[), ;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (]
[., getString, (, ), ), ;, if, (, var, !=, null, ), {, info, =, var, ., getJSDocInfo, (, )]
[), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isConstant]
[!=, null, ), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info]
[), {, info, =, var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isConstant]
[=, var, ., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isConstant, (, ), )]
[;, }, if, (, info, !=, null, &&, info, ., isConstant, (, ), ), {, expectedConst, =, true, ;, }]
[., getJSDocInfo, (, ), ;, }, if, (, info, !=, null, &&, info, ., isConstant, (, ), ), {, expectedConst]
[), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {]
[&&, info, ., isConstant, (, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }]
[!=, null, &&, info, ., isConstant, (, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false]
[&&, info, ., isConstant, (, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }]
[), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {]
[., isConstant, (, ), ), {, expectedConst, =, true, ;, }, else, {, expectedConst, =, false, ;, }, }, if]
[=, true, ;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState]
[;, }, else, {, expectedConst, =, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst]
[=, false, ;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,]
[;, }, }, if, (, expectedConst, ), {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, )]
[), {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, .]
[;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean]
[., checkState, (, expectedConst, ==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst]
[,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name]
[==, isConst, ,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant."]
[,, "The name %s is not annotated as constant.", ,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name]
[,, name, ), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;]
[), ;, }, else, {, Preconditions, ., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }]
[;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (, value, ==, null, ), {]
[., checkState, (, expectedConst, ==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get]
[,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (]
[==, isConst, ,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;]
[,, "The name %s should not be annotated as constant.", ,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (]
[,, name, ), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (, value, ==]
[), ;, }, }, Boolean, value, =, constantMap, ., get, (, name, ), ;, if, (, value, ==, null, )]
[;, if, (, value, ==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {]
[., get, (, name, ), ;, if, (, value, ==, null, ), {, constantMap, ., put, (, name, ,, isConst]
[), ;, if, (, value, ==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else]
[), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (, value, .]
[==, null, ), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (]
[), {, constantMap, ., put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (, value, .]
[;, }, else, {, Preconditions, ., checkState, (, value, ., booleanValue, (, ), ==, isConst, ,, "The name %s is not consistently annotated as constant.", ,, name, )]
[., put, (, name, ,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (, value, ., booleanValue, (, )]
[,, isConst, ), ;, }, else, {, Preconditions, ., checkState, (, value, ., booleanValue, (, ), ==, isConst, ,, "The name %s is not consistently annotated as constant."]
[), ;, }, else, {, Preconditions, ., checkState, (, value, ., booleanValue, (, ), ==, isConst, ,, "The name %s is not consistently annotated as constant.", ,, name]
[;, }, }, }, }, static, class, NormalizeStatements, implements, Callback, {, private, final, AbstractCompiler, compiler, ;, private, final, boolean, assertOnChange]
[., checkState, (, value, ., booleanValue, (, ), ==, isConst, ,, "The name %s is not consistently annotated as constant.", ,, name, ), ;, }, }, }, }]
[,, "The name %s is not consistently annotated as constant.", ,, name, ), ;, }, }, }, }, static, class, NormalizeStatements, implements, Callback, {, private, final, AbstractCompiler, compiler]
[==, isConst, ,, "The name %s is not consistently annotated as constant.", ,, name, ), ;, }, }, }, }, static, class, NormalizeStatements, implements, Callback, {, private, final]
[., booleanValue, (, ), ==, isConst, ,, "The name %s is not consistently annotated as constant.", ,, name, ), ;, }, }, }, }, static, class, NormalizeStatements, implements]
[,, "The name %s is not consistently annotated as constant.", ,, name, ), ;, }, }, }, }, static, class, NormalizeStatements, implements, Callback, {, private, final, AbstractCompiler, compiler]
[,, name, ), ;, }, }, }, }, static, class, NormalizeStatements, implements, Callback, {, private, final, AbstractCompiler, compiler, ;, private]
[), ;, }, }, }, }, static, class, NormalizeStatements, implements, Callback, {, private, final, AbstractCompiler, compiler, ;, private, final, boolean]
[=, compiler, ;, this, ., assertOnChange, =, assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (]
[., compiler, =, compiler, ;, this, ., assertOnChange, =, assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {]
[;, this, ., assertOnChange, =, assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, )]
[=, assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException]
[., assertOnChange, =, assertOnChange, ;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw]
[;, }, private, void, reportCodeChange, (, String, changeDescription, ), {, if, (, assertOnChange, ), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n"]
[), {, throw, new, IllegalStateException, (, "Normalize constraints violated:\n", +, changeDescription, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[+, changeDescription, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, doStatementNormalizations, (]
[., reportCodeChange, (, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[,, n, ,, parent, ), ;, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[,, parent, ), ;, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[), ;, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n, ., getFirstChild, (, )]
[., getType, (, ), ), {, case, Token, ., WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n]
[:, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n, ., getFirstChild, (, ), ;, n, ., setType, (, Token]
[., WHILE, :, if, (, CONVERT_WHILE_TO_FOR, ), {, Node, expr, =, n, ., getFirstChild, (, ), ;, n, ., setType]
[), {, Node, expr, =, n, ., getFirstChild, (, ), ;, n, ., setType, (, Token, ., FOR, ), ;]
[;, n, ., setType, (, Token, ., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty]
[., getFirstChild, (, ), ;, n, ., setType, (, Token, ., FOR, ), ;, Node, empty, =, IR, ., empty]
[;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore]
[., setType, (, Token, ., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom]
[), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;, n, .]
[., FOR, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;]
[;, empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter]
[., empty, (, ), ;, empty, ., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,, expr, )]
[;, n, ., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,]
[., copyInformationFrom, (, n, ), ;, n, ., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (, empty]
[), ;, n, ., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, )]
[;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }]
[., addChildBefore, (, empty, ,, expr, ), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, )]
[,, expr, ), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node"]
[), ;, n, ., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;]
[;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break]
[., addChildAfter, (, empty, ., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;]
[,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n]
[., cloneNode, (, ), ,, expr, ), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION]
[), ;, reportCodeChange, (, "WHILE node", ), ;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;]
[;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, ., NAME]
[), ;, }, break, ;, case, Token, ., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, .]
[:, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :, case, Token]
[., FUNCTION, :, normalizeFunctionDeclaration, (, n, ), ;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :]
[;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case, Token]
[), ;, break, ;, case, Token, ., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case]
[:, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF]
[., NAME, :, case, Token, ., STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token]
[:, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (, !, compiler]
[., STRING, :, case, Token, ., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (]
[:, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (, ), .]
[., STRING_KEY, :, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (]
[:, case, Token, ., SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {]
[., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, )]
[:, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,, parent]
[., SETTER_DEF, :, if, (, !, compiler, ., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n]
[), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild]
[), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild]
[., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;, case, Token, ., CAST]
[., getLifeCycleStage, (, ), ., isNormalizedObfuscated, (, ), ), {, annotateConstantsByConvention, (, n, ,, parent, ), ;, }, break, ;]
[;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild, (, n, ,, n, ., removeFirstChild, (, )]
[,, parent, ), ;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild, (, n, ,, n, .]
[), ;, }, break, ;, case, Token, ., CAST, :, parent, ., replaceChild, (, n, ,, n, ., removeFirstChild, (]
[:, parent, ., replaceChild, (, n, ,, n, ., removeFirstChild, (, ), ), ;, break, ;, }, }, private, void]
[., CAST, :, parent, ., replaceChild, (, n, ,, n, ., removeFirstChild, (, ), ), ;, break, ;, }, }]
[;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[., replaceChild, (, n, ,, n, ., removeFirstChild, (, ), ), ;, break, ;, }, }, private, void, annotateConstantsByConvention, (]
[,, n, ., removeFirstChild, (, ), ), ;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node]
[), ;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState]
[., removeFirstChild, (, ), ), ;, break, ;, }, }, private, void, annotateConstantsByConvention, (, Node, n, ,, Node, parent, )]
[;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent]
[., checkState, (, n, ., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, )]
[), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (]
[||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;]
[||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey]
[||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;]
[||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n]
[., isName, (, ), ||, n, ., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef]
[||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;]
[., isString, (, ), ||, n, ., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef]
[||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey]
[., isStringKey, (, ), ||, n, ., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey]
[||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;]
[., isGetterDef, (, ), ||, n, ., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n]
[), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (]
[., isSetterDef, (, ), ), ;, boolean, isObjLitKey, =, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty]
[;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n]
[., isObjectLitKey, (, n, ,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&]
[,, parent, ), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (]
[), ;, boolean, isProperty, =, isObjLitKey, ||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==]
[;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node]
[||, (, parent, ., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), ;, if, (, n]
[;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node]
[), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (]
[&&, parent, ., getLastChild, (, ), ==, n, ), ;, if, (, n, ., isName, (, ), ||, isProperty, )]
[., isGetProp, (, ), &&, parent, ., getLastChild, (, ), ==, n, ), ;, if, (, n, ., isName, (]
[), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (]
[==, n, ), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, .]
[., getLastChild, (, ), ==, n, ), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean]
[), ;, if, (, n, ., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (]
[), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil]
[||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant]
[., isName, (, ), ||, isProperty, ), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;]
[), {, boolean, isMarkedConstant, =, n, ., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil]
[;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, )]
[., getBooleanProp, (, Node, ., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention]
[), ;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent]
[., IS_CONSTANT_NAME, ), ;, if, (, !, isMarkedConstant, &&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[&&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ), {, if, (, assertOnChange]
[&&, NodeUtil, ., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ), {, if, (, assertOnChange]
[), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (]
[., isConstantByConvention, (, compiler, ., getCodingConvention, (, ), ,, n, ,, parent, ), ), {, if, (, assertOnChange, ), {]
[,, n, ,, parent, ), ), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, )]
[., getCodingConvention, (, ), ,, n, ,, parent, ), ), {, if, (, assertOnChange, ), {, String, name, =, n]
[,, parent, ), ), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw]
[), ), {, if, (, assertOnChange, ), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException]
[), {, String, name, =, n, ., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name]
[;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, )]
[., getString, (, ), ;, throw, new, IllegalStateException, (, "Unexpected const change.\n", +, "  name: ", +, name, +, "\n", +, "  parent:", +, n]
[;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (]
[), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration]
[+, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[+, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node]
[+, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp]
[+, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n]
[+, "  name: ", +, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;]
[+, name, +, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n]
[+, "\n", +, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp]
[+, "  parent:", +, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node]
[+, n, ., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME]
[), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration]
[., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }]
[., getParent, (, ), ., toStringTree, (, ), ), ;, }, n, ., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true]
[;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isFunction, (]
[., putBooleanProp, (, Node, ., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, )]
[,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (, n]
[., IS_CONSTANT_NAME, ,, true, ), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState]
[), ;, }, }, }, private, void, normalizeFunctionDeclaration, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isFunction]
[;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {]
[., checkState, (, n, ., isFunction, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&]
[), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), )]
[., isFunction, (, ), ), ;, if, (, !, NodeUtil, ., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration]
[), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =]
[&&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration]
[&&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration]
[., isFunctionExpression, (, n, ), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, rewriteFunctionDeclaration, (, n, ), ;]
[), &&, !, NodeUtil, ., isHoistedFunctionDeclaration, (, n, ), ), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void]
[), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =]
[), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =]
[., isHoistedFunctionDeclaration, (, n, ), ), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n]
[), ), {, rewriteFunctionDeclaration, (, n, ), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode]
[;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =, n, ., getFirstChild, (, ), ;]
[), ;, }, }, private, void, rewriteFunctionDeclaration, (, Node, n, ), {, Node, oldNameNode, =, n, ., getFirstChild, (, )]
[;, Node, fnNameNode, =, oldNameNode, ., cloneNode, (, ), ;, Node, var, =, IR, ., var, (, fnNameNode, ), .]
[., getFirstChild, (, ), ;, Node, fnNameNode, =, oldNameNode, ., cloneNode, (, ), ;, Node, var, =, IR, ., var]
[;, Node, var, =, IR, ., var, (, fnNameNode, ), ., srcref, (, n, ), ;, oldNameNode, ., setString, (]
[., cloneNode, (, ), ;, Node, var, =, IR, ., var, (, fnNameNode, ), ., srcref, (, n, ), ;]
[;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild]
[., srcref, (, n, ), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =, n, ., getParent, (]
[., var, (, fnNameNode, ), ., srcref, (, n, ), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent]
[), ., srcref, (, n, ), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =, n, ., getParent]
[), ;, oldNameNode, ., setString, (, "", ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, .]
[;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, var, ), ;, fnNameNode]
[., setString, (, "", ), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, var, ), ;]
[;, parent, ., replaceChild, (, n, ,, var, ), ;, fnNameNode, ., addChildToFront, (, n, ), ;, reportCodeChange, (, "Function declaration"]
[., getParent, (, ), ;, parent, ., replaceChild, (, n, ,, var, ), ;, fnNameNode, ., addChildToFront, (, n, )]
[;, fnNameNode, ., addChildToFront, (, n, ), ;, reportCodeChange, (, "Function declaration", ), ;, }, private, void, doStatementNormalizations, (, NodeTraversal, t]
[., replaceChild, (, n, ,, var, ), ;, fnNameNode, ., addChildToFront, (, n, ), ;, reportCodeChange, (, "Function declaration", ), ;]
[,, var, ), ;, fnNameNode, ., addChildToFront, (, n, ), ;, reportCodeChange, (, "Function declaration", ), ;, }, private, void, doStatementNormalizations]
[), ;, fnNameNode, ., addChildToFront, (, n, ), ;, reportCodeChange, (, "Function declaration", ), ;, }, private, void, doStatementNormalizations, (, NodeTraversal]
[;, reportCodeChange, (, "Function declaration", ), ;, }, private, void, doStatementNormalizations, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[., addChildToFront, (, n, ), ;, reportCodeChange, (, "Function declaration", ), ;, }, private, void, doStatementNormalizations, (, NodeTraversal, t, ,, Node]
[), ;, reportCodeChange, (, "Function declaration", ), ;, }, private, void, doStatementNormalizations, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, private, void, doStatementNormalizations, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, .]
[), ;, }, private, void, doStatementNormalizations, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n]
[), {, normalizeLabels, (, n, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel]
[., isLabel, (, ), ), {, normalizeLabels, (, n, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, )]
[;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel, (, ), ), {, extractForInitializer, (]
[), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ||, n, ., isLabel, (, ), ), {, extractForInitializer]
[), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, )]
[||, n, ., isLabel, (, ), ), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (]
[., isStatementBlock, (, n, ), ||, n, ., isLabel, (, ), ), {, extractForInitializer, (, n, ,, null, ,, null]
[), ||, n, ., isLabel, (, ), ), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if]
[), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, )]
[., isLabel, (, ), ), {, extractForInitializer, (, n, ,, null, ,, null, ), ;, }, if, (, NodeUtil, .]
[;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (, n, ), ;, }, if, (]
[,, null, ,, null, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (, n]
[,, null, ), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (, n, ), ;]
[), ;, }, if, (, NodeUtil, ., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (, n, ), ;, }, if]
[), {, splitVarDeclarations, (, n, ), ;, }, if, (, n, ., isFunction, (, ), ), {, moveNamedFunctions, (, n]
[., isStatementBlock, (, n, ), ), {, splitVarDeclarations, (, n, ), ;, }, if, (, n, ., isFunction, (, )]
[), ), {, splitVarDeclarations, (, n, ), ;, }, if, (, n, ., isFunction, (, ), ), {, moveNamedFunctions, (]
[;, }, if, (, n, ., isFunction, (, ), ), {, moveNamedFunctions, (, n, ., getLastChild, (, ), ), ;]
[), ;, }, if, (, n, ., isFunction, (, ), ), {, moveNamedFunctions, (, n, ., getLastChild, (, ), )]
[), {, moveNamedFunctions, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, normalizeLabels, (, Node, n, )]
[., isFunction, (, ), ), {, moveNamedFunctions, (, n, ., getLastChild, (, ), ), ;, }, }, private, void, normalizeLabels]
[;, }, }, private, void, normalizeLabels, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isLabel, (, )]
[), ;, }, }, private, void, normalizeLabels, (, Node, n, ), {, Preconditions, ., checkArgument, (, n, ., isLabel, (]
[., getLastChild, (, ), ), ;, }, }, private, void, normalizeLabels, (, Node, n, ), {, Preconditions, ., checkArgument, (]
[;, Node, last, =, n, ., getLastChild, (, ), ;, switch, (, last, ., getType, (, ), ), {, case]
[., checkArgument, (, n, ., isLabel, (, ), ), ;, Node, last, =, n, ., getLastChild, (, ), ;, switch]
[), ;, Node, last, =, n, ., getLastChild, (, ), ;, switch, (, last, ., getType, (, ), ), {]
[., isLabel, (, ), ), ;, Node, last, =, n, ., getLastChild, (, ), ;, switch, (, last, ., getType]
[;, switch, (, last, ., getType, (, ), ), {, case, Token, ., LABEL, :, case, Token, ., BLOCK, :]
[., getLastChild, (, ), ;, switch, (, last, ., getType, (, ), ), {, case, Token, ., LABEL, :, case]
[), {, case, Token, ., LABEL, :, case, Token, ., BLOCK, :, case, Token, ., FOR, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., LABEL, :, case, Token, ., BLOCK, :, case, Token, ., FOR]
[:, case, Token, ., BLOCK, :, case, Token, ., FOR, :, case, Token, ., WHILE, :, case, Token, ., DO]
[., LABEL, :, case, Token, ., BLOCK, :, case, Token, ., FOR, :, case, Token, ., WHILE, :, case, Token]
[:, case, Token, ., FOR, :, case, Token, ., WHILE, :, case, Token, ., DO, :, return, ;, default, :]
[., BLOCK, :, case, Token, ., FOR, :, case, Token, ., WHILE, :, case, Token, ., DO, :, return, ;]
[:, case, Token, ., WHILE, :, case, Token, ., DO, :, return, ;, default, :, Node, block, =, IR, .]
[., FOR, :, case, Token, ., WHILE, :, case, Token, ., DO, :, return, ;, default, :, Node, block, =]
[:, case, Token, ., DO, :, return, ;, default, :, Node, block, =, IR, ., block, (, ), ;, block]
[., WHILE, :, case, Token, ., DO, :, return, ;, default, :, Node, block, =, IR, ., block, (, )]
[:, return, ;, default, :, Node, block, =, IR, ., block, (, ), ;, block, ., copyInformationFrom, (, last, )]
[., DO, :, return, ;, default, :, Node, block, =, IR, ., block, (, ), ;, block, ., copyInformationFrom, (]
[;, block, ., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront]
[., block, (, ), ;, block, ., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (, last, ,, block, )]
[;, n, ., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront, (, last, ), ;, reportCodeChange, (, "LABEL normalization"]
[., copyInformationFrom, (, last, ), ;, n, ., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront, (, last]
[), ;, n, ., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront, (, last, ), ;, reportCodeChange, (]
[;, block, ., addChildToFront, (, last, ), ;, reportCodeChange, (, "LABEL normalization", ), ;, return, ;, }, }, private, void, extractForInitializer]
[., replaceChild, (, last, ,, block, ), ;, block, ., addChildToFront, (, last, ), ;, reportCodeChange, (, "LABEL normalization", ), ;]
[,, block, ), ;, block, ., addChildToFront, (, last, ), ;, reportCodeChange, (, "LABEL normalization", ), ;, return, ;, }, }]
[), ;, block, ., addChildToFront, (, last, ), ;, reportCodeChange, (, "LABEL normalization", ), ;, return, ;, }, }, private, void]
[;, reportCodeChange, (, "LABEL normalization", ), ;, return, ;, }, }, private, void, extractForInitializer, (, Node, n, ,, Node, before, ,]
[., addChildToFront, (, last, ), ;, reportCodeChange, (, "LABEL normalization", ), ;, return, ;, }, }, private, void, extractForInitializer, (, Node]
[), ;, reportCodeChange, (, "LABEL normalization", ), ;, return, ;, }, }, private, void, extractForInitializer, (, Node, n, ,, Node, before]
[;, return, ;, }, }, private, void, extractForInitializer, (, Node, n, ,, Node, before, ,, Node, beforeParent, ), {, for]
[), ;, return, ;, }, }, private, void, extractForInitializer, (, Node, n, ,, Node, before, ,, Node, beforeParent, ), {]
[;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==]
[!=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==]
[=, next, ), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, )]
[), {, next, =, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c]
[=, c, ., getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;]
[;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==]
[., getNext, (, ), ;, Node, insertBefore, =, (, before, ==, null, ), ?, c, :, before, ;, Node, insertBeforeParent]
[;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (]
[?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (]
[), ?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch]
[==, null, ), ?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent]
[), ?, c, :, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch]
[:, before, ;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (, c, .]
[;, Node, insertBeforeParent, =, (, before, ==, null, ), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (]
[;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,, insertBefore]
[?, n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer]
[), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :]
[==, null, ), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, .]
[), ?, n, :, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :]
[:, beforeParent, ;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c]
[;, switch, (, c, ., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,, insertBefore]
[), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case, Token]
[., getType, (, ), ), {, case, Token, ., LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;]
[:, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil]
[., LABEL, :, extractForInitializer, (, c, ,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case, Token, ., FOR, :, if]
[;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, c, ), ), {, Node, first]
[,, insertBefore, ,, insertBeforeParent, ), ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, c]
[,, insertBeforeParent, ), ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, c, ), )]
[), ;, break, ;, case, Token, ., FOR, :, if, (, NodeUtil, ., isForIn, (, c, ), ), {, Node]
[:, if, (, NodeUtil, ., isForIn, (, c, ), ), {, Node, first, =, c, ., getFirstChild, (, ), ;]
[., FOR, :, if, (, NodeUtil, ., isForIn, (, c, ), ), {, Node, first, =, c, ., getFirstChild, (]
[), {, Node, first, =, c, ., getFirstChild, (, ), ;, if, (, first, ., isVar, (, ), ), {]
[., isForIn, (, c, ), ), {, Node, first, =, c, ., getFirstChild, (, ), ;, if, (, first, .]
[), ), {, Node, first, =, c, ., getFirstChild, (, ), ;, if, (, first, ., isVar, (, ), )]
[;, if, (, first, ., isVar, (, ), ), {, Node, newStatement, =, first, ;, Node, name, =, newStatement, .]
[., getFirstChild, (, ), ;, if, (, first, ., isVar, (, ), ), {, Node, newStatement, =, first, ;, Node]
[), {, Node, newStatement, =, first, ;, Node, name, =, newStatement, ., getFirstChild, (, ), ., cloneNode, (, ), ;]
[., isVar, (, ), ), {, Node, newStatement, =, first, ;, Node, name, =, newStatement, ., getFirstChild, (, ), .]
[;, Node, name, =, newStatement, ., getFirstChild, (, ), ., cloneNode, (, ), ;, first, ., getParent, (, ), .]
[;, first, ., getParent, (, ), ., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,]
[., cloneNode, (, ), ;, first, ., getParent, (, ), ., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, .]
[., getFirstChild, (, ), ., cloneNode, (, ), ;, first, ., getParent, (, ), ., replaceChild, (, first, ,, name]
[;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (]
[., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration"]
[., getParent, (, ), ., replaceChild, (, first, ,, name, ), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, )]
[,, name, ), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }]
[), ;, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if]
[;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (, !, c, ., getFirstChild, (, ), ., isEmpty, (]
[., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (, !, c]
[,, insertBefore, ), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (, !, c, ., getFirstChild, (, )]
[), ;, reportCodeChange, (, "FOR-IN var declaration", ), ;, }, }, else, if, (, !, c, ., getFirstChild, (, ), ., isEmpty]
[;, }, }, else, if, (, !, c, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, Node, init]
[), ;, }, }, else, if, (, !, c, ., getFirstChild, (, ), ., isEmpty, (, ), ), {, Node]
[), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;]
[), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;]
[., isEmpty, (, ), ), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node, empty, =, IR, .]
[., getFirstChild, (, ), ., isEmpty, (, ), ), {, Node, init, =, c, ., getFirstChild, (, ), ;, Node]
[;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, c, ), ;, c, ., replaceChild]
[., getFirstChild, (, ), ;, Node, empty, =, IR, ., empty, (, ), ;, empty, ., copyInformationFrom, (, c, )]
[;, empty, ., copyInformationFrom, (, c, ), ;, c, ., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;]
[., empty, (, ), ;, empty, ., copyInformationFrom, (, c, ), ;, c, ., replaceChild, (, init, ,, empty, )]
[;, c, ., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;, if, (, init, ., isVar, (, )]
[., copyInformationFrom, (, c, ), ;, c, ., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;, if, (]
[), ;, c, ., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;, if, (, init, ., isVar, (]
[;, Node, newStatement, ;, if, (, init, ., isVar, (, ), ), {, newStatement, =, init, ;, }, else, {]
[., replaceChild, (, init, ,, empty, ), ;, Node, newStatement, ;, if, (, init, ., isVar, (, ), ), {]
[,, empty, ), ;, Node, newStatement, ;, if, (, init, ., isVar, (, ), ), {, newStatement, =, init, ;]
[), ;, Node, newStatement, ;, if, (, init, ., isVar, (, ), ), {, newStatement, =, init, ;, }, else]
[), {, newStatement, =, init, ;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent]
[., isVar, (, ), ), {, newStatement, =, init, ;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init]
[=, init, ;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (]
[;, }, else, {, newStatement, =, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,]
[=, NodeUtil, ., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (]
[;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR initializer", ), ;, }, break, ;, }]
[., newExpr, (, init, ), ;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR initializer", )]
[), ;, }, insertBeforeParent, ., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR initializer", ), ;, }, break, ;]
[;, reportCodeChange, (, "FOR initializer", ), ;, }, break, ;, }, }, }, private, void, splitVarDeclarations, (, Node, n, ), {]
[., addChildBefore, (, newStatement, ,, insertBefore, ), ;, reportCodeChange, (, "FOR initializer", ), ;, }, break, ;, }, }, }, private]
[,, insertBefore, ), ;, reportCodeChange, (, "FOR initializer", ), ;, }, break, ;, }, }, }, private, void, splitVarDeclarations, (, Node]
[), ;, reportCodeChange, (, "FOR initializer", ), ;, }, break, ;, }, }, }, private, void, splitVarDeclarations, (, Node, n, )]
[;, }, break, ;, }, }, }, private, void, splitVarDeclarations, (, Node, n, ), {, for, (, Node, next, ,]
[), ;, }, break, ;, }, }, }, private, void, splitVarDeclarations, (, Node, n, ), {, for, (, Node, next]
[;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, if, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, if, (, c, ., isVar, (]
[!=, null, ;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, if, (, c, .]
[;, c, =, next, ), {, next, =, c, ., getNext, (, ), ;, if, (, c, ., isVar, (]
[=, next, ), {, next, =, c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), )]
[), {, next, =, c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if]
[=, c, ., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if, (, assertOnChange, &&]
[;, if, (, c, ., isVar, (, ), ), {, if, (, assertOnChange, &&, !, c, ., hasChildren, (, )]
[., getNext, (, ), ;, if, (, c, ., isVar, (, ), ), {, if, (, assertOnChange, &&, !, c]
[), {, if, (, assertOnChange, &&, !, c, ., hasChildren, (, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", )]
[., isVar, (, ), ), {, if, (, assertOnChange, &&, !, c, ., hasChildren, (, ), ), {, throw, new]
[), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (, c, ., getFirstChild, (, ), !=, c, .]
[&&, !, c, ., hasChildren, (, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (, c]
[), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (, c, ., getFirstChild, (, ), !=, c, .]
[), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (, c, ., getFirstChild, (, ), !=, c, .]
[., hasChildren, (, ), ), {, throw, new, IllegalStateException, (, "Empty VAR node.", ), ;, }, while, (, c, ., getFirstChild, (]
[;, }, while, (, c, ., getFirstChild, (, ), !=, c, ., getLastChild, (, ), ), {, Node, name, =]
[), ;, }, while, (, c, ., getFirstChild, (, ), !=, c, ., getLastChild, (, ), ), {, Node, name]
[), {, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild, (, name, ), ;, Node, newVar]
[!=, c, ., getLastChild, (, ), ), {, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild]
[., getFirstChild, (, ), !=, c, ., getLastChild, (, ), ), {, Node, name, =, c, ., getFirstChild, (, )]
[), {, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild, (, name, ), ;, Node, newVar]
[., getLastChild, (, ), ), {, Node, name, =, c, ., getFirstChild, (, ), ;, c, ., removeChild, (, name]
[;, c, ., removeChild, (, name, ), ;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (]
[., getFirstChild, (, ), ;, c, ., removeChild, (, name, ), ;, Node, newVar, =, IR, ., var, (, name]
[;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;, n, ., addChildBefore, (]
[., removeChild, (, name, ), ;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (, n, )]
[), ;, Node, newVar, =, IR, ., var, (, name, ), ., srcref, (, n, ), ;, n, ., addChildBefore]
[;, n, ., addChildBefore, (, newVar, ,, c, ), ;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }, private]
[., srcref, (, n, ), ;, n, ., addChildBefore, (, newVar, ,, c, ), ;, reportCodeChange, (, "VAR with multiple children", ), ;]
[., var, (, name, ), ., srcref, (, n, ), ;, n, ., addChildBefore, (, newVar, ,, c, ), ;]
[), ., srcref, (, n, ), ;, n, ., addChildBefore, (, newVar, ,, c, ), ;, reportCodeChange, (, "VAR with multiple children", )]
[), ;, n, ., addChildBefore, (, newVar, ,, c, ), ;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }]
[;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {, Preconditions, .]
[., addChildBefore, (, newVar, ,, c, ), ;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions]
[,, c, ), ;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, )]
[), ;, reportCodeChange, (, "VAR with multiple children", ), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {, Preconditions]
[;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {, Preconditions, ., checkState, (, functionBody, ., getParent]
[), ;, }, }, }, }, private, void, moveNamedFunctions, (, Node, functionBody, ), {, Preconditions, ., checkState, (, functionBody, .]
[;, Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (, current, !=, null]
[., checkState, (, functionBody, ., getParent, (, ), ., isFunction, (, ), ), ;, Node, previous, =, null, ;, Node]
[), ;, Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (, current, !=]
[., isFunction, (, ), ), ;, Node, previous, =, null, ;, Node, current, =, functionBody, ., getFirstChild, (, ), ;]
[., getParent, (, ), ., isFunction, (, ), ), ;, Node, previous, =, null, ;, Node, current, =, functionBody, .]
[;, Node, current, =, functionBody, ., getFirstChild, (, ), ;, while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (]
[;, while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;, current]
[., getFirstChild, (, ), ;, while, (, current, !=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous]
[), {, previous, =, current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;]
[&&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;, current, =, current, ., getNext, (, )]
[!=, null, &&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;, current, =, current, ., getNext]
[&&, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;, current, =, current, ., getNext, (, )]
[), {, previous, =, current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;]
[., isFunctionDeclaration, (, current, ), ), {, previous, =, current, ;, current, =, current, ., getNext, (, ), ;, }]
[), ), {, previous, =, current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous]
[=, current, ;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (, current]
[;, current, =, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (, current, !=, null]
[=, current, ., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (, current, !=, null, ), {]
[;, }, Node, insertAfter, =, previous, ;, while, (, current, !=, null, ), {, Node, next, =, current, ., getNext]
[., getNext, (, ), ;, }, Node, insertAfter, =, previous, ;, while, (, current, !=, null, ), {, Node, next]
[;, while, (, current, !=, null, ), {, Node, next, =, current, ., getNext, (, ), ;, if, (, NodeUtil]
[), {, Node, next, =, current, ., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), )]
[!=, null, ), {, Node, next, =, current, ., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current]
[), {, Node, next, =, current, ., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), )]
[;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, .]
[., getNext, (, ), ;, if, (, NodeUtil, ., isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (, previous]
[), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (]
[., isFunctionDeclaration, (, current, ), ), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, )]
[), ), {, Preconditions, ., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront]
[;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange]
[., checkNotNull, (, previous, ), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,, current]
[), ;, functionBody, ., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;]
[;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {]
[., removeChildAfter, (, previous, ), ;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function"]
[), ;, insertAfter, =, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else]
[=, addToFront, (, functionBody, ,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =]
[;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =, current, ;, }, current, =, next, ;, }, }]
[,, current, ,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =, current, ;, }, current]
[,, insertAfter, ), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =, current, ;, }, current, =, next]
[), ;, reportCodeChange, (, "Move function declaration not at top of function", ), ;, }, else, {, previous, =, current, ;, }, current, =, next, ;, }]
[;, }, else, {, previous, =, current, ;, }, current, =, next, ;, }, }, private, Node, addToFront, (, Node]
[), ;, }, else, {, previous, =, current, ;, }, current, =, next, ;, }, }, private, Node, addToFront, (]
[=, current, ;, }, current, =, next, ;, }, }, private, Node, addToFront, (, Node, parent, ,, Node, newChild, ,]
[;, }, current, =, next, ;, }, }, private, Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after]
[=, next, ;, }, }, private, Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after, ), {, if]
[;, }, }, private, Node, addToFront, (, Node, parent, ,, Node, newChild, ,, Node, after, ), {, if, (, after]
[), {, parent, ., addChildToFront, (, newChild, ), ;, }, else, {, parent, ., addChildAfter, (, newChild, ,, after, )]
[==, null, ), {, parent, ., addChildToFront, (, newChild, ), ;, }, else, {, parent, ., addChildAfter, (, newChild, ,]
[), {, parent, ., addChildToFront, (, newChild, ), ;, }, else, {, parent, ., addChildAfter, (, newChild, ,, after, )]
[;, }, else, {, parent, ., addChildAfter, (, newChild, ,, after, ), ;, }, return, newChild, ;, }, }, private]
[., addChildToFront, (, newChild, ), ;, }, else, {, parent, ., addChildAfter, (, newChild, ,, after, ), ;, }, return]
[), ;, }, else, {, parent, ., addChildAfter, (, newChild, ,, after, ), ;, }, return, newChild, ;, }, }]
[;, }, return, newChild, ;, }, }, private, void, removeDuplicateDeclarations, (, Node, externs, ,, Node, root, ), {, Callback, tickler]
[., addChildAfter, (, newChild, ,, after, ), ;, }, return, newChild, ;, }, }, private, void, removeDuplicateDeclarations, (, Node, externs]
[,, after, ), ;, }, return, newChild, ;, }, }, private, void, removeDuplicateDeclarations, (, Node, externs, ,, Node, root, )]
[), ;, }, return, newChild, ;, }, }, private, void, removeDuplicateDeclarations, (, Node, externs, ,, Node, root, ), {, Callback]
[;, }, }, private, void, removeDuplicateDeclarations, (, Node, externs, ,, Node, root, ), {, Callback, tickler, =, new, ScopeTicklingCallback, (]
[;, ScopeCreator, scopeCreator, =, new, SyntacticScopeCreator, (, compiler, ,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal]
[;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, ), ;, t, ., traverseRoots, (, externs, ,]
[,, new, DuplicateDeclarationHandler, (, ), ), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, ), ;]
[), ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, tickler, ,, scopeCreator, ), ;, t, ., traverseRoots, (, externs]
[;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler, {]
[,, tickler, ,, scopeCreator, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, private, final, class, DuplicateDeclarationHandler]
[,, scopeCreator, ), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator]
[), ;, t, ., traverseRoots, (, externs, ,, root, ), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler]
[;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler, {, private, Set, <, Var, >, hasOkDuplicateDeclaration, =, Sets, .]
[., traverseRoots, (, externs, ,, root, ), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler, {, private, Set]
[,, root, ), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler, {, private, Set, <, Var, >, hasOkDuplicateDeclaration]
[), ;, }, private, final, class, DuplicateDeclarationHandler, implements, SyntacticScopeCreator, ., RedeclarationHandler, {, private, Set, <, Var, >, hasOkDuplicateDeclaration, =, Sets]
[;, @, Override, public, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,, CompilerInput, input, ), {]
[., newHashSet, (, ), ;, @, Override, public, void, onRedeclaration, (, Scope, s, ,, String, name, ,, Node, n, ,]
[;, Node, parent, =, n, ., getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;]
[., checkState, (, n, ., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Var]
[), ;, Node, parent, =, n, ., getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, )]
[., isName, (, ), ), ;, Node, parent, =, n, ., getParent, (, ), ;, Var, v, =, s, .]
[;, Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, !=, null, &&, s, ., isGlobal]
[., getParent, (, ), ;, Var, v, =, s, ., getVar, (, name, ), ;, if, (, v, !=, null]
[;, if, (, v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern, (]
[., getVar, (, name, ), ;, if, (, v, !=, null, &&, s, ., isGlobal, (, ), ), {, if]
[), ;, if, (, v, !=, null, &&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern]
[), {, if, (, v, ., isExtern, (, ), &&, !, input, ., isExtern, (, ), ), {, if, (]
[&&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern, (, ), &&, !, input, ., isExtern]
[!=, null, &&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern, (, ), &&, !, input]
[&&, s, ., isGlobal, (, ), ), {, if, (, v, ., isExtern, (, ), &&, !, input, ., isExtern]
[), {, if, (, v, ., isExtern, (, ), &&, !, input, ., isExtern, (, ), ), {, if, (]
[., isGlobal, (, ), ), {, if, (, v, ., isExtern, (, ), &&, !, input, ., isExtern, (, )]
[), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (, v]
[&&, !, input, ., isExtern, (, ), ), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return]
[., isExtern, (, ), &&, !, input, ., isExtern, (, ), ), {, if, (, hasOkDuplicateDeclaration, ., add, (, v]
[), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (, v]
[), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }, }, if, (, v]
[., isExtern, (, ), ), {, if, (, hasOkDuplicateDeclaration, ., add, (, v, ), ), {, return, ;, }, }]
[), {, return, ;, }, }, }, if, (, v, !=, null, &&, v, ., getParentNode, (, ), ., isCatch]
[., add, (, v, ), ), {, return, ;, }, }, }, if, (, v, !=, null, &&, v, .]
[), ), {, return, ;, }, }, }, if, (, v, !=, null, &&, v, ., getParentNode, (, ), .]
[), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make]
[&&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (]
[!=, null, &&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, .]
[&&, v, ., getParentNode, (, ), ., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (]
[), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make]
[., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report]
[., getParentNode, (, ), ., isCatch, (, ), ), {, name, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, )]
[=, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make, (, input, .]
[;, compiler, ., report, (, JSError, ., make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name]
[., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make, (, input, ., getName, (, ), ,]
[., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, compiler, ., report, (, JSError, ., make, (, input, ., getName, (]
[), ;, compiler, ., report, (, JSError, ., make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,]
[;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, ), ), {, if, (, v, .]
[., report, (, JSError, ., make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), )]
[), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, ), ), {, if, (, v]
[., make, (, input, ., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if]
[,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction]
[., getName, (, ), ,, n, ,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (, v, !=, null]
[,, CATCH_BLOCK_VAR_ERROR, ,, name, ), ), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, )]
[,, name, ), ), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, ), ), {]
[), ), ;, }, else, if, (, v, !=, null, &&, parent, ., isFunction, (, ), ), {, if, (]
[), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, s, ., undeclare, (, v]
[&&, parent, ., isFunction, (, ), ), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), )]
[!=, null, &&, parent, ., isFunction, (, ), ), {, if, (, v, ., getParentNode, (, ), ., isVar, (]
[&&, parent, ., isFunction, (, ), ), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), )]
[), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, s, ., undeclare, (, v]
[., isFunction, (, ), ), {, if, (, v, ., getParentNode, (, ), ., isVar, (, ), ), {, s]
[), {, s, ., undeclare, (, v, ), ;, s, ., declare, (, name, ,, n, ,, n, ., getJSType]
[., isVar, (, ), ), {, s, ., undeclare, (, v, ), ;, s, ., declare, (, name, ,, n]
[., getParentNode, (, ), ., isVar, (, ), ), {, s, ., undeclare, (, v, ), ;, s, ., declare]
[;, s, ., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,, v, ., input, ), ;]
[., undeclare, (, v, ), ;, s, ., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,]
[), ;, s, ., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,, v, ., input, )]
[;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,, v, ., getParentNode, (, )]
[., declare, (, name, ,, n, ,, n, ., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (]
[,, n, ,, n, ., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (]
[,, n, ., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,]
[,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,]
[., getJSType, (, ), ,, v, ., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, .]
[), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,, v, ., getParentNode, (]
[., input, ), ;, replaceVarWithAssignment, (, v, ., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,, v, .]
[;, }, }, else, if, (, parent, ., isVar, (, ), ), {, Preconditions, ., checkState, (, parent, ., hasOneChild]
[,, v, ., getParentNode, (, ), ,, v, ., getParentNode, (, ), ., getParent, (, ), ), ;, }, }]
[., getNameNode, (, ), ,, v, ., getParentNode, (, ), ,, v, ., getParentNode, (, ), ., getParent, (, )]
[,, v, ., getParentNode, (, ), ., getParent, (, ), ), ;, }, }, else, if, (, parent, ., isVar]
[., getParentNode, (, ), ,, v, ., getParentNode, (, ), ., getParent, (, ), ), ;, }, }, else, if]
[), ;, }, }, else, if, (, parent, ., isVar, (, ), ), {, Preconditions, ., checkState, (, parent, .]
[., getParent, (, ), ), ;, }, }, else, if, (, parent, ., isVar, (, ), ), {, Preconditions, .]
[., getParentNode, (, ), ., getParent, (, ), ), ;, }, }, else, if, (, parent, ., isVar, (, )]
[), {, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (, n, ,, parent, ,, parent]
[., isVar, (, ), ), {, Preconditions, ., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (, n]
[;, replaceVarWithAssignment, (, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, }, private, void, replaceVarWithAssignment, (]
[., checkState, (, parent, ., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (, n, ,, parent, ,, parent, ., getParent, (]
[), ;, replaceVarWithAssignment, (, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, }, }, private, void, replaceVarWithAssignment]
[., hasOneChild, (, ), ), ;, replaceVarWithAssignment, (, n, ,, parent, ,, parent, ., getParent, (, ), ), ;, }]
[;, }, }, private, void, replaceVarWithAssignment, (, Node, n, ,, Node, parent, ,, Node, gramps, ), {, if, (, n]
[,, parent, ,, parent, ., getParent, (, ), ), ;, }, }, private, void, replaceVarWithAssignment, (, Node, n, ,, Node]
[,, parent, ., getParent, (, ), ), ;, }, }, private, void, replaceVarWithAssignment, (, Node, n, ,, Node, parent, ,]
[), ;, }, }, private, void, replaceVarWithAssignment, (, Node, n, ,, Node, parent, ,, Node, gramps, ), {, if, (]
[., getParent, (, ), ), ;, }, }, private, void, replaceVarWithAssignment, (, Node, n, ,, Node, parent, ,, Node, gramps]
[), {, parent, ., removeChild, (, n, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;, n, .]
[., hasChildren, (, ), ), {, parent, ., removeChild, (, n, ), ;, Node, value, =, n, ., getFirstChild, (]
[;, Node, value, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, value, ), ;, Node, replacement, =]
[., removeChild, (, n, ), ;, Node, value, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, value]
[), ;, Node, value, =, n, ., getFirstChild, (, ), ;, n, ., removeChild, (, value, ), ;, Node, replacement]
[;, n, ., removeChild, (, value, ), ;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;]
[., getFirstChild, (, ), ;, n, ., removeChild, (, value, ), ;, Node, replacement, =, IR, ., assign, (, n]
[;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;]
[., removeChild, (, value, ), ;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;, replacement, .]
[), ;, Node, replacement, =, IR, ., assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, )]
[;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, )]
[., assign, (, n, ,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent]
[,, value, ), ;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr]
[), ;, replacement, ., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement]
[;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, if, (]
[., copyInformationFrom, (, parent, ), ;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;]
[), ;, gramps, ., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, if]
[;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, ), ), {, gramps, ., removeChild, (, parent, )]
[., replaceChild, (, parent, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, if, (, NodeUtil, .]
[,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, )]
[), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, ), ), {, gramps, ., removeChild, (, parent]
[., newExpr, (, replacement, ), ), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, ), ), {]
[), ), ;, }, else, {, if, (, NodeUtil, ., isStatementBlock, (, gramps, ), ), {, gramps, ., removeChild, (]
[), {, gramps, ., removeChild, (, parent, ), ;, }, else, if, (, gramps, ., isFor, (, ), ), {]
[., isStatementBlock, (, gramps, ), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, if, (, gramps, .]
[), ), {, gramps, ., removeChild, (, parent, ), ;, }, else, if, (, gramps, ., isFor, (, ), )]
[;, }, else, if, (, gramps, ., isFor, (, ), ), {, parent, ., removeChild, (, n, ), ;, gramps]
[., removeChild, (, parent, ), ;, }, else, if, (, gramps, ., isFor, (, ), ), {, parent, ., removeChild]
[), ;, }, else, if, (, gramps, ., isFor, (, ), ), {, parent, ., removeChild, (, n, ), ;]
[), {, parent, ., removeChild, (, n, ), ;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else]
[., isFor, (, ), ), {, parent, ., removeChild, (, n, ), ;, gramps, ., replaceChild, (, parent, ,, n]
[;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (, gramps, ., isLabel]
[., removeChild, (, n, ), ;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else, {, Preconditions, .]
[), ;, gramps, ., replaceChild, (, parent, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (, gramps, .]
[;, }, else, {, Preconditions, ., checkState, (, gramps, ., isLabel, (, ), ), ;, throw, new, IllegalStateException, (, "Unexpected LABEL"]
[., replaceChild, (, parent, ,, n, ), ;, }, else, {, Preconditions, ., checkState, (, gramps, ., isLabel, (, )]
[,, n, ), ;, }, else, {, Preconditions, ., checkState, (, gramps, ., isLabel, (, ), ), ;, throw, new]
[), ;, }, else, {, Preconditions, ., checkState, (, gramps, ., isLabel, (, ), ), ;, throw, new, IllegalStateException, (]
[;, throw, new, IllegalStateException, (, "Unexpected LABEL", ), ;, }, }, reportCodeChange, (, "Duplicate VAR declaration", ), ;, }, }, private, final, class]
[., checkState, (, gramps, ., isLabel, (, ), ), ;, throw, new, IllegalStateException, (, "Unexpected LABEL", ), ;, }, }, reportCodeChange]
[), ;, throw, new, IllegalStateException, (, "Unexpected LABEL", ), ;, }, }, reportCodeChange, (, "Duplicate VAR declaration", ), ;, }, }, private, final]
[., isLabel, (, ), ), ;, throw, new, IllegalStateException, (, "Unexpected LABEL", ), ;, }, }, reportCodeChange, (, "Duplicate VAR declaration", ), ;]
[;, }, }, reportCodeChange, (, "Duplicate VAR declaration", ), ;, }, }, private, final, class, ScopeTicklingCallback, implements, NodeTraversal, ., ScopedCallback, {, @]
[), ;, }, }, reportCodeChange, (, "Duplicate VAR declaration", ), ;, }, }, private, final, class, ScopeTicklingCallback, implements, NodeTraversal, ., ScopedCallback, {]
[;, }, }, private, final, class, ScopeTicklingCallback, implements, NodeTraversal, ., ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal, t]
[), ;, }, }, private, final, class, ScopeTicklingCallback, implements, NodeTraversal, ., ScopedCallback, {, @, Override, public, void, enterScope, (, NodeTraversal]
[;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal]
[., getScope, (, ), ;, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }, }]
