[;, public, FractionFormat, (, ), {, }, public, FractionFormat, (, final, NumberFormat, format, ), {, super, (, format, ), ;]
[), ;, }, public, FractionFormat, (, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super, (, numeratorFormat, ,, denominatorFormat]
[,, denominatorFormat, ), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return, NumberFormat, ., getAvailableLocales, (, )]
[), ;, }, public, static, Locale, [, ], getAvailableLocales, (, ), {, return, NumberFormat, ., getAvailableLocales, (, ), ;, }]
[;, }, public, static, String, formatFraction, (, Fraction, f, ), {, return, getImproperInstance, (, ), ., format, (, f, )]
[., getAvailableLocales, (, ), ;, }, public, static, String, formatFraction, (, Fraction, f, ), {, return, getImproperInstance, (, ), .]
[;, }, public, static, FractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (, Locale, ., getDefault, (, ), ), ;, }]
[., format, (, f, ), ;, }, public, static, FractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (, Locale, ., getDefault]
[), ;, }, public, static, FractionFormat, getImproperInstance, (, ), {, return, getImproperInstance, (, Locale, ., getDefault, (, ), ), ;]
[;, }, public, static, FractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, FractionFormat, (, getDefaultNumberFormat, (, locale, )]
[), ;, }, public, static, FractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, FractionFormat, (, getDefaultNumberFormat, (, locale]
[., getDefault, (, ), ), ;, }, public, static, FractionFormat, getImproperInstance, (, final, Locale, locale, ), {, return, new, FractionFormat]
[;, }, public, static, FractionFormat, getProperInstance, (, ), {, return, getProperInstance, (, Locale, ., getDefault, (, ), ), ;, }]
[), ;, }, public, static, FractionFormat, getProperInstance, (, ), {, return, getProperInstance, (, Locale, ., getDefault, (, ), ), ;]
[), ), ;, }, public, static, FractionFormat, getProperInstance, (, ), {, return, getProperInstance, (, Locale, ., getDefault, (, ), )]
[;, }, public, static, FractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperFractionFormat, (, getDefaultNumberFormat, (, locale, )]
[), ;, }, public, static, FractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperFractionFormat, (, getDefaultNumberFormat, (, locale]
[., getDefault, (, ), ), ;, }, public, static, FractionFormat, getProperInstance, (, final, Locale, locale, ), {, return, new, ProperFractionFormat]
[;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return, getDefaultNumberFormat, (, Locale, ., getDefault, (, ), ), ;, }]
[), ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return, getDefaultNumberFormat, (, Locale, ., getDefault, (, ), ), ;]
[), ), ;, }, protected, static, NumberFormat, getDefaultNumberFormat, (, ), {, return, getDefaultNumberFormat, (, Locale, ., getDefault, (, ), )]
[;, }, public, StringBuffer, format, (, final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {, pos]
[), ;, }, public, StringBuffer, format, (, final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, ), {]
[., getDefault, (, ), ), ;, }, public, StringBuffer, format, (, final, Fraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final]
[;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,]
[., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction]
[), ;, pos, ., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, )]
[;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, .]
[., setEndIndex, (, 0, ), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,]
[), ;, getNumeratorFormat, (, ), ., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo]
[;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, ), ,]
[., format, (, fraction, ., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", )]
[,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, fraction]
[., getNumerator, (, ), ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, )]
[,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator]
[), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, )]
[;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return, toAppendTo]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, ), ,, toAppendTo, ,]
[), ;, getDenominatorFormat, (, ), ., format, (, fraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return]
[;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,, final]
[., format, (, fraction, ., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, @, Override]
[,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,]
[., getDenominator, (, ), ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (]
[,, pos, ), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer]
[), ;, return, toAppendTo, ;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,]
[;, }, @, Override, public, StringBuffer, format, (, final, Object, obj, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, )]
[;, if, (, obj, instanceof, Fraction, ), {, ret, =, format, (, (, Fraction, ), obj, ,, toAppendTo, ,, pos]
[), {, ret, =, format, (, (, Fraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (]
[instanceof, Fraction, ), {, ret, =, format, (, (, Fraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else]
[=, format, (, (, Fraction, ), obj, ,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number]
[;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, Fraction, (, (, (, Number]
[,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new]
[,, toAppendTo, ,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new]
[,, pos, ), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, Fraction, (]
[), ;, }, else, if, (, obj, instanceof, Number, ), {, ret, =, format, (, new, Fraction, (, (, (]
[), {, ret, =, format, (, new, Fraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), )]
[instanceof, Number, ), {, ret, =, format, (, new, Fraction, (, (, (, Number, ), obj, ), ., doubleValue, (]
[=, format, (, new, Fraction, (, (, (, Number, ), obj, ), ., doubleValue, (, ), ), ,, toAppendTo, ,]
[;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;, }, @, Override]
[,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return]
[), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }]
[., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[), ., doubleValue, (, ), ), ,, toAppendTo, ,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[,, pos, ), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;]
[), ;, }, else, {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;, }, @]
[;, }, return, ret, ;, }, @, Override, public, Fraction, parse, (, final, String, source, ), throws, MathParseException, {, final]
[), ;, }, return, ret, ;, }, @, Override, public, Fraction, parse, (, final, String, source, ), throws, MathParseException, {]
[., CANNOT_FORMAT_OBJECT_TO_FRACTION, ), ;, }, return, ret, ;, }, @, Override, public, Fraction, parse, (, final, String, source, ), throws]
[;, }, @, Override, public, Fraction, parse, (, final, String, source, ), throws, MathParseException, {, final, ParsePosition, parsePosition, =, new]
[;, final, Fraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==]
[), ;, final, Fraction, result, =, parse, (, source, ,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, )]
[;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, .]
[,, parsePosition, ), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source]
[), ;, if, (, parsePosition, ., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition]
[), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, Fraction, ., class, ), ;, }]
[==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, Fraction, ., class, )]
[., getIndex, (, ), ==, 0, ), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,]
[), {, throw, new, MathParseException, (, source, ,, parsePosition, ., getErrorIndex, (, ), ,, Fraction, ., class, ), ;, }]
[;, }, return, result, ;, }, @, Override, public, Fraction, parse, (, final, String, source, ,, final, ParsePosition, pos, )]
[,, parsePosition, ., getErrorIndex, (, ), ,, Fraction, ., class, ), ;, }, return, result, ;, }, @, Override, public]
[,, Fraction, ., class, ), ;, }, return, result, ;, }, @, Override, public, Fraction, parse, (, final, String, source]
[., getErrorIndex, (, ), ,, Fraction, ., class, ), ;, }, return, result, ;, }, @, Override, public, Fraction, parse]
[), ;, }, return, result, ;, }, @, Override, public, Fraction, parse, (, final, String, source, ,, final, ParsePosition, pos]
[;, }, @, Override, public, Fraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, final, int, initialIndex]
[;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,]
[., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, num, =, getNumeratorFormat, (, ), .]
[;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num, ==]
[,, pos, ), ;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if]
[), ;, final, Number, num, =, getNumeratorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, num]
[;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final]
[., parse, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex]
[,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex]
[;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;]
[), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =]
[;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,]
[;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :]
[., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, )]
[;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,, 1]
[,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (]
[), ;, switch, (, c, ), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,]
[), {, case, 0, :, return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/']
[:, return, new, Fraction, (, num, ., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default]
[;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex]
[,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, .]
[., intValue, (, ), ,, 1, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final]
[., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source]
[), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den, =, getDenominatorFormat, (, ), .]
[., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den]
[), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den, =, getDenominatorFormat, (, )]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source]
[;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den, ==]
[,, pos, ), ;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if]
[), ;, final, Number, den, =, getDenominatorFormat, (, ), ., parse, (, source, ,, pos, ), ;, if, (, den]
[;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return]
[., parse, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex]
[,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (, num, ., intValue]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (, num]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (, num, ., intValue]
[;, return, null, ;, }, return, new, Fraction, (, num, ., intValue, (, ), ,, den, ., intValue, (, )]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, return, new, Fraction, (, num, ., intValue, (, ), ,]
[), ;, return, null, ;, }, return, new, Fraction, (, num, ., intValue, (, ), ,, den, ., intValue, (]
[;, }, return, new, Fraction, (, num, ., intValue, (, ), ,, den, ., intValue, (, ), ), ;, }]
[;, }, }]
[,, den, ., intValue, (, ), ), ;, }, }]
[., intValue, (, ), ,, den, ., intValue, (, ), ), ;, }, }]
[), ;, }, }]
[., intValue, (, ), ), ;, }, }]
