[), {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else]
[>, 0, ), {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;]
[., length, >, 0, ), {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, )]
[), {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else]
[=, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else, {, this, ., options, =]
[., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else, {, this, .]
[;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ]]
[., copyOf, (, Arrays, ., asList, (, options, ), ), ;, }, else, {, this, ., options, =, EnumSet, .]
[), ;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, []
[., asList, (, options, ), ), ;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, .]
[), ), ;, }, else, {, this, ., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION]
[=, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ], {, OPTION, ., semiColonRequired, }, ), )]
[., options, =, EnumSet, ., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ], {, OPTION, ., semiColonRequired, }]
[;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?, false, :, options]
[., copyOf, (, Arrays, ., asList, (, new, OPTION, [, ], {, OPTION, ., semiColonRequired, }, ), ), ;, }]
[), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?, false, :]
[., asList, (, new, OPTION, [, ], {, OPTION, ., semiColonRequired, }, ), ), ;, }, }, public, boolean, isSet]
[), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?, false]
[), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?, false]
[}, ), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==, null, ?]
[., semiColonRequired, }, ), ), ;, }, }, public, boolean, isSet, (, final, OPTION, option, ), {, return, options, ==]
[;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, )]
[?, false, :, options, ., contains, (, option, ), ;, }, @, Override, public, int, translate, (, final, CharSequence, input]
[==, null, ?, false, :, options, ., contains, (, option, ), ;, }, @, Override, public, int, translate, (, final]
[?, false, :, options, ., contains, (, option, ), ;, }, @, Override, public, int, translate, (, final, CharSequence, input]
[:, options, ., contains, (, option, ), ;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final]
[;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out, )]
[., contains, (, option, ), ;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index]
[), ;, }, @, Override, public, int, translate, (, final, CharSequence, input, ,, final, int, index, ,, final, Writer, out]
[;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, .]
[., length, (, ), ;, if, (, input, ., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -]
[), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, .]
[&&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +, 2, ;]
[&&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int]
[==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', )]
[., charAt, (, index, ), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +]
[), ==, '&', &&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#']
[&&, index, <, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int]
[&&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +, 2, ;]
[<, seqEnd, -, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =]
[&&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +, 2, ;]
[-, 2, &&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +]
[&&, input, ., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +, 2, ;]
[), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, .]
[==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =]
[., charAt, (, index, +, 1, ), ==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex]
[), ==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar]
[+, 1, ), ==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final]
[), ==, '#', ), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar]
[), {, int, start, =, index, +, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, .]
[;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar]
[+, 2, ;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if]
[;, boolean, isHex, =, false, ;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar]
[;, final, char, firstChar, =, input, ., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==]
[;, if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if]
[., charAt, (, start, ), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;]
[), ;, if, (, firstChar, ==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;]
[), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }]
[||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {]
[==, 'x', ||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd]
[||, firstChar, ==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {]
[), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }]
[==, 'X', ), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return, 0]
[), {, start, ++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }]
[;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =]
[++, ;, isHex, =, true, ;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end]
[=, true, ;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;]
[;, if, (, start, ==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (]
[), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (, input]
[==, seqEnd, ), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&]
[), {, return, 0, ;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (, input]
[;, }, }, int, end, =, start, ;, while, (, end, <, seqEnd, &&, (, input, ., charAt, (, end]
[;, while, (, end, <, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt]
[), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end, )]
[&&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||]
[<, seqEnd, &&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=]
[&&, (, input, ., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||]
[), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end, )]
[), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end]
[||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), )]
[||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input]
[&&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input]
[>=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a']
[., charAt, (, end, ), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt]
[), >=, '0', &&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=]
[&&, input, ., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input]
[||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input]
[<=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f']
[., charAt, (, end, ), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt]
[), <=, '9', ||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=]
[||, input, ., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input]
[||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), )]
[&&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input]
[>=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A']
[., charAt, (, end, ), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt]
[), >=, 'a', &&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=]
[&&, input, ., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input]
[||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), )]
[<=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F']
[., charAt, (, end, ), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt]
[), <=, 'f', ||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=]
[||, input, ., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), )]
[), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end]
[&&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =]
[>=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean]
[., charAt, (, end, ), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end]
[), >=, 'A', &&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final]
[&&, input, ., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =]
[), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end]
[<=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt]
[., charAt, (, end, ), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=]
[), <=, 'F', ), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, .]
[), ), {, end, ++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end]
[;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end, ), ==, ';', ;, if]
[++, ;, }, final, boolean, semiNext, =, end, !=, seqEnd, &&, input, ., charAt, (, end, ), ==, ';', ;]
[;, if, (, !, semiNext, ), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;]
[&&, input, ., charAt, (, end, ), ==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (]
[!=, seqEnd, &&, input, ., charAt, (, end, ), ==, ';', ;, if, (, !, semiNext, ), {, if, (]
[&&, input, ., charAt, (, end, ), ==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (]
[;, if, (, !, semiNext, ), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;]
[==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return]
[., charAt, (, end, ), ==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (, OPTION, .]
[), ==, ';', ;, if, (, !, semiNext, ), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {]
[;, if, (, !, semiNext, ), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;]
[), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;, }, else, if, (, isSet]
[), {, if, (, isSet, (, OPTION, ., semiColonRequired, ), ), {, return, 0, ;, }, else, if, (, isSet]
[), {, return, 0, ;, }, else, if, (, isSet, (, OPTION, ., errorIfNoSemiColon, ), ), {, throw, new, IllegalArgumentException]
[), ), {, return, 0, ;, }, else, if, (, isSet, (, OPTION, ., errorIfNoSemiColon, ), ), {, throw, new]
[., semiColonRequired, ), ), {, return, 0, ;, }, else, if, (, isSet, (, OPTION, ., errorIfNoSemiColon, ), ), {]
[;, }, else, if, (, isSet, (, OPTION, ., errorIfNoSemiColon, ), ), {, throw, new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;]
[), {, throw, new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, )]
[), ), {, throw, new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;, }, }, int, entityValue, ;, try, {, if, (, isHex]
[., errorIfNoSemiColon, ), ), {, throw, new, IllegalArgumentException, (, "Semi-colon required at end of numeric entity", ), ;, }, }, int, entityValue, ;, try, {, if]
[;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =, Integer, ., parseInt, (, input]
[), ;, }, }, int, entityValue, ;, try, {, if, (, isHex, ), {, entityValue, =, Integer, ., parseInt, (]
[), {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, )]
[=, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 16, )]
[;, }, else, {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString]
[., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 16, ), ;, }]
[,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end]
[., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence]
[., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =]
[,, end, ), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (]
[), ., toString, (, ), ,, 16, ), ;, }, else, {, entityValue, =, Integer, ., parseInt, (, input, .]
[), ;, }, else, {, entityValue, =, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), .]
[=, Integer, ., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, )]
[;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0, ;, }, if, (, entityValue, >, 0xFFFF, )]
[., parseInt, (, input, ., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, ), ;, }]
[,, 10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0, ;, }, if, (, entityValue]
[., toString, (, ), ,, 10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0, ;]
[., subSequence, (, start, ,, end, ), ., toString, (, ), ,, 10, ), ;, }, }, catch, (, final]
[,, end, ), ., toString, (, ), ,, 10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {]
[), ., toString, (, ), ,, 10, ), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0]
[), ;, }, }, catch, (, final, NumberFormatException, nfe, ), {, return, 0, ;, }, if, (, entityValue, >, 0xFFFF]
[;, }, if, (, entityValue, >, 0xFFFF, ), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue]
[), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write, (, chrs]
[>, 0xFFFF, ), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write]
[), {, final, char, [, ], chrs, =, Character, ., toChars, (, entityValue, ), ;, out, ., write, (, chrs]
[;, out, ., write, (, chrs, [, 0, ], ), ;, out, ., write, (, chrs, [, 1, ], )]
[., toChars, (, entityValue, ), ;, out, ., write, (, chrs, [, 0, ], ), ;, out, ., write, (]
[), ;, out, ., write, (, chrs, [, 0, ], ), ;, out, ., write, (, chrs, [, 1, ]]
[;, out, ., write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, )]
[., write, (, chrs, [, 0, ], ), ;, out, ., write, (, chrs, [, 1, ], ), ;, }]
[), ;, out, ., write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue]
[[, 0, ], ), ;, out, ., write, (, chrs, [, 1, ], ), ;, }, else, {, out, .]
[], ), ;, out, ., write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (]
[;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +, (]
[., write, (, chrs, [, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }]
[), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +]
[[, 1, ], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end]
[], ), ;, }, else, {, out, ., write, (, entityValue, ), ;, }, return, 2, +, end, -, start]
[;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?]
[., write, (, entityValue, ), ;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0]
[), ;, }, return, 2, +, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext]
[;, }, return, 0, ;, }, }]
[+, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0, ;, }, }]
[+, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0]
[-, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, ), ;, }]
[+, end, -, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, )]
[-, start, +, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, ), ;, }]
[+, (, isHex, ?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0]
[+, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0, ;, }, }]
[), +, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0, ;, }, }]
[?, 1, :, 0, ), +, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0, ;, }, }]
[:, 0, ), +, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0, ;, }, }]
[), +, (, semiNext, ?, 1, :, 0, ), ;, }, return, 0, ;, }, }]
[;, }, return, 0, ;, }, }]
[), ;, }, return, 0, ;, }, }]
[?, 1, :, 0, ), ;, }, return, 0, ;, }, }]
[:, 0, ), ;, }, return, 0, ;, }, }]
[), ;, }, return, 0, ;, }, }]
[;, }, }]
