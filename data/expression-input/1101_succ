[), ;, }, protected, BackgroundInitializer, (, final, ExecutorService, exec, ), {, setExternalExecutor, (, exec, ), ;, }, public, final, synchronized]
[;, }, public, final, synchronized, ExecutorService, getExternalExecutor, (, ), {, return, externalExecutor, ;, }, public, synchronized, boolean, isStarted, (, )]
[), ;, }, public, final, synchronized, ExecutorService, getExternalExecutor, (, ), {, return, externalExecutor, ;, }, public, synchronized, boolean, isStarted, (]
[;, }, public, synchronized, boolean, isStarted, (, ), {, return, future, !=, null, ;, }, public, final, synchronized, void, setExternalExecutor]
[;, }, public, final, synchronized, void, setExternalExecutor, (, final, ExecutorService, externalExecutor, ), {, if, (, isStarted, (, ), ), {]
[!=, null, ;, }, public, final, synchronized, void, setExternalExecutor, (, final, ExecutorService, externalExecutor, ), {, if, (, isStarted, (, )]
[;, }, public, final, synchronized, void, setExternalExecutor, (, final, ExecutorService, externalExecutor, ), {, if, (, isStarted, (, ), ), {]
[), {, throw, new, IllegalStateException, (, "Cannot set ExecutorService after start()!", ), ;, }, this, ., externalExecutor, =, externalExecutor, ;, }, public, synchronized, boolean]
[;, }, this, ., externalExecutor, =, externalExecutor, ;, }, public, synchronized, boolean, start, (, ), {, if, (, !, isStarted]
[), ;, }, this, ., externalExecutor, =, externalExecutor, ;, }, public, synchronized, boolean, start, (, ), {, if, (, !]
[=, externalExecutor, ;, }, public, synchronized, boolean, start, (, ), {, if, (, !, isStarted, (, ), ), {, ExecutorService]
[., externalExecutor, =, externalExecutor, ;, }, public, synchronized, boolean, start, (, ), {, if, (, !, isStarted, (, ), )]
[;, }, public, synchronized, boolean, start, (, ), {, if, (, !, isStarted, (, ), ), {, ExecutorService, tempExec, ;]
[), {, ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (, executor, ==, null, ), {, executor, =]
[), {, ExecutorService, tempExec, ;, executor, =, getExternalExecutor, (, ), ;, if, (, executor, ==, null, ), {, executor, =]
[=, getExternalExecutor, (, ), ;, if, (, executor, ==, null, ), {, executor, =, tempExec, =, createExecutor, (, ), ;]
[;, if, (, executor, ==, null, ), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec]
[), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =]
[==, null, ), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }]
[), {, executor, =, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =]
[=, tempExec, =, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =, executor, ., submit]
[=, createExecutor, (, ), ;, }, else, {, tempExec, =, null, ;, }, future, =, executor, ., submit, (, createTask]
[;, }, else, {, tempExec, =, null, ;, }, future, =, executor, ., submit, (, createTask, (, tempExec, ), )]
[=, null, ;, }, future, =, executor, ., submit, (, createTask, (, tempExec, ), ), ;, return, true, ;, }]
[;, }, future, =, executor, ., submit, (, createTask, (, tempExec, ), ), ;, return, true, ;, }, return, false]
[=, executor, ., submit, (, createTask, (, tempExec, ), ), ;, return, true, ;, }, return, false, ;, }, @]
[;, return, true, ;, }, return, false, ;, }, @, Override, public, T, get, (, ), throws, ConcurrentException, {, try]
[., submit, (, createTask, (, tempExec, ), ), ;, return, true, ;, }, return, false, ;, }, @, Override, public]
[), ;, return, true, ;, }, return, false, ;, }, @, Override, public, T, get, (, ), throws, ConcurrentException, {]
[), ), ;, return, true, ;, }, return, false, ;, }, @, Override, public, T, get, (, ), throws, ConcurrentException]
[;, }, return, false, ;, }, @, Override, public, T, get, (, ), throws, ConcurrentException, {, try, {, return, getFuture]
[;, }, @, Override, public, T, get, (, ), throws, ConcurrentException, {, try, {, return, getFuture, (, ), ., get]
[;, }, catch, (, final, ExecutionException, execex, ), {, ConcurrentUtils, ., handleCause, (, execex, ), ;, return, null, ;, }]
[., get, (, ), ;, }, catch, (, final, ExecutionException, execex, ), {, ConcurrentUtils, ., handleCause, (, execex, ), ;]
[;, return, null, ;, }, catch, (, final, InterruptedException, iex, ), {, Thread, ., currentThread, (, ), ., interrupt, (]
[., handleCause, (, execex, ), ;, return, null, ;, }, catch, (, final, InterruptedException, iex, ), {, Thread, ., currentThread]
[), ;, return, null, ;, }, catch, (, final, InterruptedException, iex, ), {, Thread, ., currentThread, (, ), ., interrupt]
[;, }, catch, (, final, InterruptedException, iex, ), {, Thread, ., currentThread, (, ), ., interrupt, (, ), ;, throw]
[;, throw, new, ConcurrentException, (, iex, ), ;, }, }, public, synchronized, Future, <, T, >, getFuture, (, ), {]
[., interrupt, (, ), ;, throw, new, ConcurrentException, (, iex, ), ;, }, }, public, synchronized, Future, <, T, >]
[., currentThread, (, ), ., interrupt, (, ), ;, throw, new, ConcurrentException, (, iex, ), ;, }, }, public, synchronized]
[;, }, }, public, synchronized, Future, <, T, >, getFuture, (, ), {, if, (, future, ==, null, ), {]
[), ;, }, }, public, synchronized, Future, <, T, >, getFuture, (, ), {, if, (, future, ==, null, )]
[), {, throw, new, IllegalStateException, (, "start() must be called first!", ), ;, }, return, future, ;, }, protected, synchronized, final, ExecutorService, getActiveExecutor, (]
[==, null, ), {, throw, new, IllegalStateException, (, "start() must be called first!", ), ;, }, return, future, ;, }, protected, synchronized, final, ExecutorService]
[), {, throw, new, IllegalStateException, (, "start() must be called first!", ), ;, }, return, future, ;, }, protected, synchronized, final, ExecutorService, getActiveExecutor, (]
[;, }, return, future, ;, }, protected, synchronized, final, ExecutorService, getActiveExecutor, (, ), {, return, executor, ;, }, protected, int]
[), ;, }, return, future, ;, }, protected, synchronized, final, ExecutorService, getActiveExecutor, (, ), {, return, executor, ;, }, protected]
[;, }, protected, synchronized, final, ExecutorService, getActiveExecutor, (, ), {, return, executor, ;, }, protected, int, getTaskCount, (, ), {]
[;, }, protected, int, getTaskCount, (, ), {, return, 1, ;, }, protected, abstract, T, initialize, (, ), throws, Exception]
[;, }, protected, abstract, T, initialize, (, ), throws, Exception, ;, private, Callable, <, T, >, createTask, (, final, ExecutorService]
[;, }, private, ExecutorService, createExecutor, (, ), {, return, Executors, ., newFixedThreadPool, (, getTaskCount, (, ), ), ;, }, private]
[), ;, }, private, ExecutorService, createExecutor, (, ), {, return, Executors, ., newFixedThreadPool, (, getTaskCount, (, ), ), ;, }]
[;, }, private, class, InitializationTask, implements, Callable, <, T, >, {, private, final, ExecutorService, execFinally, ;, public, InitializationTask, (, final]
[., newFixedThreadPool, (, getTaskCount, (, ), ), ;, }, private, class, InitializationTask, implements, Callable, <, T, >, {, private, final]
[), ;, }, private, class, InitializationTask, implements, Callable, <, T, >, {, private, final, ExecutorService, execFinally, ;, public, InitializationTask, (]
[=, exec, ;, }, @, Override, public, T, call, (, ), throws, Exception, {, try, {, return, initialize, (, )]
[;, }, @, Override, public, T, call, (, ), throws, Exception, {, try, {, return, initialize, (, ), ;, }]
[;, }, finally, {, if, (, execFinally, !=, null, ), {, execFinally, ., shutdown, (, ), ;, }, }, }]
[), {, execFinally, ., shutdown, (, ), ;, }, }, }, }, }]
[!=, null, ), {, execFinally, ., shutdown, (, ), ;, }, }, }, }, }]
[), {, execFinally, ., shutdown, (, ), ;, }, }, }, }, }]
[;, }, }, }, }, }]
[., shutdown, (, ), ;, }, }, }, }, }]
