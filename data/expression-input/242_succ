[;, private, static, final, long, serialVersionUID, =, -, 8352658048349159782L, ;, private, final, GammaDistribution, gamma, ;, private, final, double, solverAbsoluteAccuracy, ;]
[;, private, final, GammaDistribution, gamma, ;, private, final, double, solverAbsoluteAccuracy, ;, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ), {, this, (]
[;, private, final, GammaDistribution, gamma, ;, private, final, double, solverAbsoluteAccuracy, ;, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ), {, this, (]
[,, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, ), ;, }, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (]
[), ;, }, public, ChiSquaredDistribution, (, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, this, (, new, Well19937c, (, ), ,]
[,, degreesOfFreedom, ,, inverseCumAccuracy, ), ;, }, public, ChiSquaredDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {]
[,, inverseCumAccuracy, ), ;, }, public, ChiSquaredDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (]
[), ;, }, public, ChiSquaredDistribution, (, RandomGenerator, rng, ,, double, degreesOfFreedom, ,, double, inverseCumAccuracy, ), {, super, (, rng, )]
[), ;, gamma, =, new, GammaDistribution, (, degreesOfFreedom, /, 2, ,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public]
[=, new, GammaDistribution, (, degreesOfFreedom, /, 2, ,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (]
[;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, ., getShape, (, ), *, 2.0]
[,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, ., getShape, (]
[/, 2, ,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, .]
[,, 2, ), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, ., getShape, (]
[), ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, ., getShape, (, ), *]
[=, inverseCumAccuracy, ;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, ., getShape, (, ), *, 2.0, ;, }]
[;, }, public, double, getDegreesOfFreedom, (, ), {, return, gamma, ., getShape, (, ), *, 2.0, ;, }, public, double]
[;, }, public, double, density, (, double, x, ), {, return, gamma, ., density, (, x, ), ;, }, public]
[*, 2.0, ;, }, public, double, density, (, double, x, ), {, return, gamma, ., density, (, x, ), ;]
[., getShape, (, ), *, 2.0, ;, }, public, double, density, (, double, x, ), {, return, gamma, ., density]
[;, }, public, double, density, (, double, x, ), {, return, gamma, ., density, (, x, ), ;, }, public]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, return, gamma, ., cumulativeProbability, (, x, ), ;, }, @]
[., density, (, x, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, gamma, ., cumulativeProbability, (]
[), ;, }, public, double, cumulativeProbability, (, double, x, ), {, return, gamma, ., cumulativeProbability, (, x, ), ;, }]
[;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {]
[., cumulativeProbability, (, x, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public]
[), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, )]
[;, }, public, double, getNumericalMean, (, ), {, return, getDegreesOfFreedom, (, ), ;, }, public, double, getNumericalVariance, (, ), {]
[;, }, public, double, getNumericalVariance, (, ), {, return, 2, *, getDegreesOfFreedom, (, ), ;, }, public, double, getSupportLowerBound, (]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[*, getDegreesOfFreedom, (, ), ;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (]
[;, }, public, double, getSupportLowerBound, (, ), {, return, 0, ;, }, public, double, getSupportUpperBound, (, ), {, return, Double]
[;, }, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false]
[., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {]
[;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return, true]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
