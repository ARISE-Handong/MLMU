[), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, byte, x, ), {, super, (, factory, ,, x, )]
[,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, int, x, ), {, super, (, factory, ,]
[), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, int, x, ), {, super, (, factory, ,, x, )]
[,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, long, x, ), {, super, (, factory, ,]
[), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, long, x, ), {, super, (, factory, ,, x, )]
[,, x, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, double, x, ), {, super, (, factory, ,]
[), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, double, x, ), {, super, (, factory, ,, x, )]
[,, x, ), ;, round, (, 0, ), ;, }, public, DfpDec, (, final, Dfp, d, ), {, super, (]
[), ;, round, (, 0, ), ;, }, public, DfpDec, (, final, Dfp, d, ), {, super, (, d, )]
[;, }, public, DfpDec, (, final, Dfp, d, ), {, super, (, d, ), ;, round, (, 0, ), ;]
[), ;, }, public, DfpDec, (, final, Dfp, d, ), {, super, (, d, ), ;, round, (, 0, )]
[), ;, round, (, 0, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, String, s, ), {]
[;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, String, s, ), {, super, (, factory, ,, s, )]
[), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, String, s, ), {, super, (, factory, ,, s]
[,, s, ), ;, round, (, 0, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, byte, sign]
[), ;, round, (, 0, ), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, byte, sign, ,, final]
[;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, byte, sign, ,, final, byte, nans, ), {, super, (]
[), ;, }, protected, DfpDec, (, final, DfpField, factory, ,, final, byte, sign, ,, final, byte, nans, ), {, super]
[,, sign, ,, nans, ), ;, }, @, Override, public, Dfp, newInstance, (, ), {, return, new, DfpDec, (, getField]
[,, nans, ), ;, }, @, Override, public, Dfp, newInstance, (, ), {, return, new, DfpDec, (, getField, (, )]
[), ;, }, @, Override, public, Dfp, newInstance, (, ), {, return, new, DfpDec, (, getField, (, ), ), ;]
[;, }, @, Override, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, DfpDec, (, getField, (, )]
[), ;, }, @, Override, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, DfpDec, (, getField, (]
[;, }, @, Override, public, Dfp, newInstance, (, final, int, x, ), {, return, new, DfpDec, (, getField, (, )]
[,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, int, x, ), {, return, new, DfpDec, (]
[), ;, }, @, Override, public, Dfp, newInstance, (, final, int, x, ), {, return, new, DfpDec, (, getField, (]
[;, }, @, Override, public, Dfp, newInstance, (, final, long, x, ), {, return, new, DfpDec, (, getField, (, )]
[,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, long, x, ), {, return, new, DfpDec, (]
[), ;, }, @, Override, public, Dfp, newInstance, (, final, long, x, ), {, return, new, DfpDec, (, getField, (]
[;, }, @, Override, public, Dfp, newInstance, (, final, double, x, ), {, return, new, DfpDec, (, getField, (, )]
[,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, double, x, ), {, return, new, DfpDec, (]
[), ;, }, @, Override, public, Dfp, newInstance, (, final, double, x, ), {, return, new, DfpDec, (, getField, (]
[;, }, @, Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, getField, (, ), ., getRadixDigits]
[,, x, ), ;, }, @, Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, getField, (]
[), ;, }, @, Override, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, getField, (, ), .]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero]
[!=, d, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, .]
[., getRadixDigits, (, ), !=, d, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), .]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero]
[., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, )]
[), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, ), ;, }, return, new]
[., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, ), ;, }]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, ), ;, }, return, new, DfpDec, (]
[;, }, return, new, DfpDec, (, d, ), ;, }, @, Override, public, Dfp, newInstance, (, final, String, s, )]
[,, "newInstance", ,, d, ,, result, ), ;, }, return, new, DfpDec, (, d, ), ;, }, @, Override, public]
[., FLAG_INVALID, ,, "newInstance", ,, d, ,, result, ), ;, }, return, new, DfpDec, (, d, ), ;, }, @]
[,, d, ,, result, ), ;, }, return, new, DfpDec, (, d, ), ;, }, @, Override, public, Dfp, newInstance]
[,, result, ), ;, }, return, new, DfpDec, (, d, ), ;, }, @, Override, public, Dfp, newInstance, (, final]
[), ;, }, return, new, DfpDec, (, d, ), ;, }, @, Override, public, Dfp, newInstance, (, final, String, s]
[;, }, @, Override, public, Dfp, newInstance, (, final, String, s, ), {, return, new, DfpDec, (, getField, (, )]
[), ;, }, @, Override, public, Dfp, newInstance, (, final, String, s, ), {, return, new, DfpDec, (, getField, (]
[;, }, @, Override, public, Dfp, newInstance, (, final, byte, sign, ,, final, byte, nans, ), {, return, new, DfpDec]
[,, s, ), ;, }, @, Override, public, Dfp, newInstance, (, final, byte, sign, ,, final, byte, nans, ), {]
[), ;, }, @, Override, public, Dfp, newInstance, (, final, byte, sign, ,, final, byte, nans, ), {, return, new]
[;, }, protected, int, getDecimalDigits, (, ), {, return, getRadixDigits, (, ), *, 4, -, 3, ;, }, @, Override]
[,, sign, ,, nans, ), ;, }, protected, int, getDecimalDigits, (, ), {, return, getRadixDigits, (, ), *, 4, -]
[,, nans, ), ;, }, protected, int, getDecimalDigits, (, ), {, return, getRadixDigits, (, ), *, 4, -, 3, ;]
[), ;, }, protected, int, getDecimalDigits, (, ), {, return, getRadixDigits, (, ), *, 4, -, 3, ;, }, @]
[;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, [, mant, ., length]
[-, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, [, mant]
[*, 4, -, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant]
[-, 3, ;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, [, mant]
[;, }, @, Override, protected, int, round, (, int, in, ), {, int, msb, =, mant, [, mant, ., length]
[;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *, 4]
[[, mant, ., length, -, 1, ], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int]
[], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *]
[-, 1, ], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =, mant, .]
[., length, -, 1, ], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =]
[], ;, if, (, msb, ==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *]
[), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;]
[==, 0, ), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =]
[), {, return, 0, ;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;]
[;, }, int, cmaxdigits, =, mant, ., length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >]
[;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10, ;, cmaxdigits, --, ;]
[*, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10, ;, cmaxdigits]
[., length, *, 4, ;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10]
[;, int, lsbthreshold, =, 1000, ;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10, ;, cmaxdigits, --, ;]
[;, while, (, lsbthreshold, >, msb, ), {, lsbthreshold, /=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =]
[), {, lsbthreshold, /=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int]
[>, msb, ), {, lsbthreshold, /=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;]
[), {, lsbthreshold, /=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int]
[/=, 10, ;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits]
[;, cmaxdigits, --, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -, digits]
[;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final, int]
[--, ;, }, final, int, digits, =, getDecimalDigits, (, ), ;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final]
[;, final, int, lsbshift, =, cmaxdigits, -, digits, ;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1]
[;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;]
[-, digits, ;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =]
[;, final, int, lsd, =, lsbshift, /, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;]
[;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;, i, ++]
[/, 4, ;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;]
[;, lsbthreshold, =, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;, i, ++]
[=, 1, ;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, lsbshift, %, 4, ;, i, ++, ), {, lsbthreshold, *=]
[;, i, <, lsbshift, %, 4, ;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =]
[;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if]
[<, lsbshift, %, 4, ;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, []
[;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if]
[%, 4, ;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ]]
[;, i, ++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if]
[), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=]
[++, ), {, lsbthreshold, *=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold]
[*=, 10, ;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits]
[;, }, final, int, lsb, =, mant, [, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4]
[;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return, super]
[[, lsd, ], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3, )]
[], ;, if, (, lsbthreshold, <=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return]
[), {, return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;]
[&&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return, super, ., round, (, in, ), ;]
[<=, 1, &&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return, super, ., round, (, in]
[&&, digits, ==, 4, *, mant, ., length, -, 3, ), {, return, super, ., round, (, in, ), ;]
[), {, return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;]
[==, 4, *, mant, ., length, -, 3, ), {, return, super, ., round, (, in, ), ;, }, int]
[), {, return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;]
[-, 3, ), {, return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int]
[*, mant, ., length, -, 3, ), {, return, super, ., round, (, in, ), ;, }, int, discarded, =]
[-, 3, ), {, return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int]
[., length, -, 3, ), {, return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;]
[), {, return, super, ., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;]
[;, }, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =]
[., round, (, in, ), ;, }, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==]
[), ;, }, int, discarded, =, in, ;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n]
[;, final, int, n, ;, if, (, lsbthreshold, ==, 1, ), {, n, =, (, mant, [, lsd, -, 1]
[), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd]
[==, 1, ), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant]
[), {, n, =, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd]
[=, (, mant, [, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ]]
[;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }]
[%, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ]]
[), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1]
[/, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd]
[[, lsd, -, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;]
[], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, []
[-, 1, ], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=]
[], /, 1000, ), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, []
[), %, 10, ;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1]
[;, mant, [, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }]
[%=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *]
[[, lsd, -, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {]
[], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb]
[-, 1, ], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =]
[], %=, 1000, ;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb]
[;, discarded, |=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *, 10, /]
[|=, mant, [, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, )]
[;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %]
[[, lsd, -, 1, ], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10]
[], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb]
[-, 1, ], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded]
[], ;, }, else, {, n, =, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb]
[=, (, lsb, *, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, )]
[;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;, i]
[%, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0]
[), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =]
[/, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int]
[*, 10, /, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for]
[/, lsbthreshold, ), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int]
[), %, 10, ;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =]
[;, discarded, |=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;, i]
[|=, lsb, %, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;, i, <, lsd]
[;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=, mant]
[%, (, lsbthreshold, /, 10, ), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i]
[;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=, mant]
[), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=]
[/, 10, ), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, lsd, ;, i, ++, ), {, discarded, |=]
[;, i, <, lsd, ;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ]]
[;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }]
[<, lsd, ;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0]
[;, i, ++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }]
[), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd]
[++, ), {, discarded, |=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, []
[|=, mant, [, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =, lsb]
[;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;]
[[, i, ], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold]
[], ;, mant, [, i, ], =, 0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold]
[=, 0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch]
[[, i, ], =, 0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean]
[], =, 0, ;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;]
[;, }, mant, [, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField]
[=, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, )]
[[, lsd, ], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), .]
[], =, lsb, /, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (]
[;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc]
[*, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN]
[/, lsbthreshold, *, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {]
[*, lsbthreshold, ;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN]
[;, final, boolean, inc, ;, switch, (, getField, (, ), ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc]
[), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0]
[., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =]
[:, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||, (, discarded]
[=, false, ;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||, (, discarded, !=, 0]
[;, break, ;, case, ROUND_UP, :, inc, =, (, n, !=, 0, ), ||, (, discarded, !=, 0, ), ;]
[:, inc, =, (, n, !=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :]
[=, (, n, !=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =]
[;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n]
[||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;]
[), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break]
[!=, 0, ), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5]
[), ||, (, discarded, !=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break]
[;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n]
[), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =]
[!=, 0, ), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :]
[), ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =]
[:, inc, =, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;]
[=, n, >=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN]
[;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (]
[>=, 5, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc]
[;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (]
[:, inc, =, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||]
[=, n, >, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n]
[;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded]
[>, 5, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5]
[;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[=, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==]
[;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded]
[||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==]
[||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&]
[), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0]
[>, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded]
[), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0]
[||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==]
[), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, )]
[&&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold]
[==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb]
[&&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold]
[), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, )]
[!=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &]
[), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, )]
[;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded]
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&]
[&&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc]
[&&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;]
[==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;]
[&&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;]
[&&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc]
[==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD]
[&&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc]
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&]
[==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==]
[), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n]
[&, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||]
[), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, )]
[/, lsbthreshold, ), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >]
[), &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, )]
[), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n]
[), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&]
[:, inc, =, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (]
[=, (, n, >, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==]
[;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||, discarded]
[||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==]
[||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&]
[), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0]
[>, 5, ), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded]
[), ||, (, n, ==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0]
[||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==]
[), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, )]
[&&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold]
[==, 5, &&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb]
[&&, discarded, !=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold]
[), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, )]
[!=, 0, ), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &]
[), ||, (, n, ==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, )]
[;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||, discarded]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||]
[&&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc]
[&&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;]
[==, 5, &&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;]
[&&, discarded, ==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;]
[&&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc]
[==, 0, &&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL]
[&&, (, (, lsb, /, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||]
[==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=]
[), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n]
[&, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&]
[), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, )]
[/, lsbthreshold, ), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==]
[), &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, )]
[), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||]
[:, inc, =, (, sign, ==, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break]
[=, (, sign, ==, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case]
[;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n, !=]
[&&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =]
[), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc]
[==, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default]
[), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc]
[;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n, !=]
[), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n]
[||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1]
[!=, 0, ||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==]
[||, discarded, !=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1]
[), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n]
[!=, 0, ), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&]
[), ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n]
[:, default, :, inc, =, (, sign, ==, -, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0]
[=, (, sign, ==, -, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;]
[;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd]
[&&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {, int]
[), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {]
[==, -, 1, ), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (]
[), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {]
[), &&, (, n, !=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {]
[;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd]
[), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =]
[||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for]
[!=, 0, ||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold]
[||, discarded, !=, 0, ), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for]
[), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =]
[!=, 0, ), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int]
[), ;, break, ;, }, if, (, inc, ), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =]
[), {, int, rh, =, lsbthreshold, ;, for, (, int, i, =, lsd, ;, i, <, mant, ., length, ;]
[;, for, (, int, i, =, lsd, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int]
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh]
[+, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if]
[[, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX]
[], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }]
[;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh]
[=, r, /, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0]
[;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (]
[/, RADIX, ;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {]
[;, mant, [, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (]
[=, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant]
[[, i, ], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;]
[], =, r, %, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, []
[;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1]
[%, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length]
[;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1]
[), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if]
[!=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }]
[), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if]
[;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, )]
[=, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, .]
[[, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField]
[], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField]
[-, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits]
[., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, )]
[], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField]
[;, }, }, if, (, exp, <, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, )]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if]
[<, MIN_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if]
[;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, )]
[), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits]
[., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, getField, (, )]
[;, }, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;]
[., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if]
[>, MAX_EXP, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if]
[;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {, getField, (]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||]
[), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {, getField]
[., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, )]
[;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField]
[., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return]
[||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, .]
[!=, 0, ||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return]
[||, discarded, !=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, .]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return]
[!=, 0, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return]
[;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, )]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, @, Override]
[), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x]
[., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, @, Override, public, Dfp, nextAfter, (]
[;, }, return, 0, ;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, ), {, final, String, trapName, =]
[., FLAG_INEXACT, ;, }, return, 0, ;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, ), {, final, String]
[;, }, @, Override, public, Dfp, nextAfter, (, Dfp, x, ), {, final, String, trapName, =, "nextAfter", ;, if, (]
[;, if, (, getField, (, ), ., getRadixDigits, (, ), !=, x, ., getField, (, ), ., getRadixDigits, (, )]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero]
[!=, x, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, .]
[., getRadixDigits, (, ), !=, x, ., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), .]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero]
[., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result]
[., getField, (, ), ., getRadixDigits, (, ), ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, )]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN]
[;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,, result, )]
[), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,, result]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,, result, ), ;, }, boolean, up]
[., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,, result, ), ;, }]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, trapName, ,, x, ,, result, ), ;, }, boolean, up, =, false]
[;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (, this, ., lessThan, (, x]
[,, trapName, ,, x, ,, result, ), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;]
[., FLAG_INVALID, ,, trapName, ,, x, ,, result, ), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp]
[,, x, ,, result, ), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (]
[,, result, ), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (, this, .]
[), ;, }, boolean, up, =, false, ;, Dfp, result, ;, Dfp, inc, ;, if, (, this, ., lessThan, (]
[;, Dfp, result, ;, Dfp, inc, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true]
[), {, up, =, true, ;, }, if, (, equals, (, x, ), ), {, return, newInstance, (, x, )]
[., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, equals, (, x, ), ), {]
[), ), {, up, =, true, ;, }, if, (, equals, (, x, ), ), {, return, newInstance, (, x]
[=, true, ;, }, if, (, equals, (, x, ), ), {, return, newInstance, (, x, ), ;, }, if]
[;, }, if, (, equals, (, x, ), ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan]
[), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up]
[), ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {]
[;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =, !, up, ;, }, if, (]
[), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =, !, up, ;, }, if]
[), {, up, =, !, up, ;, }, if, (, up, ), {, inc, =, power10, (, intLog10, (, )]
[), ), {, up, =, !, up, ;, }, if, (, up, ), {, inc, =, power10, (, intLog10, (]
[=, !, up, ;, }, if, (, up, ), {, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (]
[;, }, if, (, up, ), {, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1]
[;, }, if, (, up, ), {, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1]
[), {, inc, =, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1, ), ;, inc, =, copysign]
[=, power10, (, intLog10, (, ), -, getDecimalDigits, (, ), +, 1, ), ;, inc, =, copysign, (, inc, ,]
[;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), )]
[), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero, (, )]
[+, 1, ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero]
[-, getDecimalDigits, (, ), +, 1, ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this]
[+, 1, ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero]
[), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero, (, )]
[=, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant]
[,, this, ), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[), ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -]
[), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc, .]
[., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1]
[), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc]
[=, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero]
[;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (]
[), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance]
[-, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign]
[-, mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), )]
[-, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign]
[., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result]
[), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance]
[), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result]
[., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,]
[), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {]
[=, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result, =, add, (]
[;, }, else, {, result, =, add, (, inc, ), ;, }, }, else, {, inc, =, power10, (, intLog10]
[,, this, ), ;, }, else, {, result, =, add, (, inc, ), ;, }, }, else, {, inc, =]
[), ,, this, ), ;, }, else, {, result, =, add, (, inc, ), ;, }, }, else, {, inc]
[), ;, }, else, {, result, =, add, (, inc, ), ;, }, }, else, {, inc, =, power10, (]
[=, add, (, inc, ), ;, }, }, else, {, inc, =, power10, (, intLog10, (, ), ), ;, inc]
[;, }, }, else, {, inc, =, power10, (, intLog10, (, ), ), ;, inc, =, copysign, (, inc, ,]
[), ;, }, }, else, {, inc, =, power10, (, intLog10, (, ), ), ;, inc, =, copysign, (, inc]
[=, power10, (, intLog10, (, ), ), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this]
[;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, inc, ), ), {]
[), ;, inc, =, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, inc, ), )]
[=, copysign, (, inc, ,, this, ), ;, if, (, this, ., equals, (, inc, ), ), {, inc, =]
[;, if, (, this, ., equals, (, inc, ), ), {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits]
[,, this, ), ;, if, (, this, ., equals, (, inc, ), ), {, inc, =, inc, ., divide, (]
[), ;, if, (, this, ., equals, (, inc, ), ), {, inc, =, inc, ., divide, (, power10, (]
[), {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc]
[., equals, (, inc, ), ), {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), )]
[), ), {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {]
[=, inc, ., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc, =, inc, .]
[;, }, else, {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), ), ;]
[., divide, (, power10, (, getDecimalDigits, (, ), ), ), ;, }, else, {, inc, =, inc, ., divide, (]
[), ;, }, else, {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), )]
[), ), ;, }, else, {, inc, =, inc, ., divide, (, power10, (, getDecimalDigits, (, ), -, 1, )]
[=, inc, ., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), ), ;, }, if, (, this, .]
[;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -]
[., divide, (, power10, (, getDecimalDigits, (, ), -, 1, ), ), ;, }, if, (, this, ., equals, (]
[), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP]
[), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[-, 1, ), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =]
[), ), ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (]
[), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc, .]
[., equals, (, getZero, (, ), ), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1]
[), ), {, inc, =, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc]
[=, power10K, (, MIN_EXP, -, mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero]
[;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (]
[), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance]
[-, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign]
[-, mant, ., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), )]
[-, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign]
[., length, -, 1, ), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result]
[), ;, }, if, (, inc, ., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance]
[), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result]
[., equals, (, getZero, (, ), ), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,]
[), ), {, result, =, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {]
[=, copysign, (, newInstance, (, getZero, (, ), ), ,, this, ), ;, }, else, {, result, =, subtract, (]
[;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (, result, ., classify, (, )]
[,, this, ), ;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (, result, .]
[), ,, this, ), ;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (, result]
[), ;, }, else, {, result, =, subtract, (, inc, ), ;, }, }, if, (, result, ., classify, (]
[=, subtract, (, inc, ), ;, }, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, .]
[;, }, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE]
[), ;, }, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[&&, this, ., classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, .]
[., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, getField, (, ), .]
[&&, this, ., classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, )]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[!=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField]
[., classify, (, ), !=, INFINITE, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (, result]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (]
[., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (, result, ., equals]
[;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, )]
[,, trapName, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, )]
[,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, .]
[,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (]
[), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[&&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField]
[., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {]
[), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField]
[., equals, (, getZero, (, ), ), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT]
[), ==, false, ), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[), {, getField, (, ), ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT]
[;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, return, result, ;]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, return, result]
[., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, return, result, ;, }, }]
[;, }, return, result, ;, }, }]
[,, trapName, ,, x, ,, result, ), ;, }, return, result, ;, }, }]
[., FLAG_INEXACT, ,, trapName, ,, x, ,, result, ), ;, }, return, result, ;, }, }]
[,, x, ,, result, ), ;, }, return, result, ;, }, }]
[,, result, ), ;, }, return, result, ;, }, }]
[), ;, }, return, result, ;, }, }]
[;, }, }]
