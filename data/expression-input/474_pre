[(, AbstractCompiler, compiler, ,, JsMessage, ., IdGenerator, idGenerator, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ), {, super, (]
[compiler, ,, JsMessage, ., IdGenerator, idGenerator, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ), {, super, (, compiler, ,]
[JsMessage, ., IdGenerator, idGenerator, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ), {, super, (, compiler, ,, checkDuplicatedMessages, ,]
[IdGenerator, idGenerator, ,, boolean, checkDuplicatedMessages, ,, JsMessage, ., Style, style, ), {, super, (, compiler, ,, checkDuplicatedMessages, ,, style, ,]
[checkDuplicatedMessages, ,, style, ,, idGenerator, ), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =]
[checkDuplicatedMessages, ,, style, ,, idGenerator, ), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =]
[idGenerator, ), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR, ., getprop, (]
[idGenerator, ), ;, }, private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR, ., getprop, (]
[private, static, Node, getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR, ., getprop, (, IR, ., name, (]
[getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR, ., getprop, (, IR, ., name, (, "chrome", ), ,]
[getChromeI18nGetMessageNode, (, String, messageId, ), {, Node, chromeI18n, =, IR, ., getprop, (, IR, ., name, (, "chrome", ), ,]
[), {, Node, chromeI18n, =, IR, ., getprop, (, IR, ., name, (, "chrome", ), ,, IR, ., string, (]
[getprop, (, IR, ., name, (, "chrome", ), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =]
[getprop, (, IR, ., name, (, "chrome", ), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =]
[name, (, "chrome", ), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop, (]
["chrome", ), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,]
["chrome", ), ,, IR, ., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,]
[., string, (, "i18n", ), ), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (]
[), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return]
[), ;, Node, getMessage, =, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return]
[=, IR, ., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return, IR, ., call, (]
[., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return, IR, ., call, (, getMessage, ,]
[., getprop, (, chromeI18n, ,, IR, ., string, (, "getMessage", ), ), ;, return, IR, ., call, (, getMessage, ,]
[,, IR, ., string, (, "getMessage", ), ), ;, return, IR, ., call, (, getMessage, ,, IR, ., string, (]
[;, }, @, Override, protected, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, try, {, Node, msgNode, =]
[;, }, @, Override, protected, void, processJsMessage, (, JsMessage, message, ,, JsMessageDefinition, definition, ), {, try, {, Node, msgNode, =]
[message, ,, JsMessageDefinition, definition, ), {, try, {, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, Node, newValue, =]
[JsMessageDefinition, definition, ), {, try, {, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, Node, newValue, =, getNewValueNode, (]
[), {, try, {, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,]
[{, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;]
[{, Node, msgNode, =, definition, ., getMessageNode, (, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;]
[definition, ., getMessageNode, (, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;, newValue, ., copyInformationFromForTree, (]
[(, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;]
[(, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;]
[(, ), ;, Node, newValue, =, getNewValueNode, (, msgNode, ,, message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;]
[msgNode, ,, message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (]
[message, ), ;, newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,]
[newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;]
[newValue, ., copyInformationFromForTree, (, msgNode, ), ;, definition, ., getMessageParentNode, (, ), ., replaceChild, (, msgNode, ,, newValue, ), ;]
[replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {]
[replaceChild, (, msgNode, ,, newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {]
[newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (]
[newValue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (]
[., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[., reportCodeChange, (, ), ;, }, catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,]
[catch, (, MalformedException, e, ), {, compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,]
[compiler, ., report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,]
[report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,]
[report, (, JSError, ., make, (, message, ., getSourceName, (, ), ,, e, ., getNode, (, ), ,, MESSAGE_TREE_MALFORMED, ,]
[), ;, }, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message, ), throws, MalformedException, {, Node, newValueNode, =]
[}, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message, ), throws, MalformedException, {, Node, newValueNode, =, getChromeI18nGetMessageNode, (]
[}, }, private, Node, getNewValueNode, (, Node, origNode, ,, JsMessage, message, ), throws, MalformedException, {, Node, newValueNode, =, getChromeI18nGetMessageNode, (]
[JsMessage, message, ), throws, MalformedException, {, Node, newValueNode, =, getChromeI18nGetMessageNode, (, message, ., getId, (, ), ), ;, if, (]
[message, ), throws, MalformedException, {, Node, newValueNode, =, getChromeI18nGetMessageNode, (, message, ., getId, (, ), ), ;, if, (, !]
[message, ), throws, MalformedException, {, Node, newValueNode, =, getChromeI18nGetMessageNode, (, message, ., getId, (, ), ), ;, if, (, !]
[message, ), throws, MalformedException, {, Node, newValueNode, =, getChromeI18nGetMessageNode, (, message, ., getId, (, ), ), ;, if, (, !]
[), ), ;, if, (, !, message, ., placeholders, (, ), ., isEmpty, (, ), ), {, Node, placeholderValues, =]
[), ), ;, if, (, !, message, ., placeholders, (, ), ., isEmpty, (, ), ), {, Node, placeholderValues, =]
[message, ., placeholders, (, ), ., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;]
[placeholders, (, ), ., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;, checkNode, (]
[), ., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,]
[), ., isEmpty, (, ), ), {, Node, placeholderValues, =, origNode, ., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,]
[., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,, Token, ., OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =]
[., getLastChild, (, ), ;, checkNode, (, placeholderValues, ,, Token, ., OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =]
[OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =, Lists, ., newArrayList, (, ), ;, for, (, CharSequence, cs, :]
[OBJECTLIT, ), ;, List, <, String, >, placeholderNames, =, Lists, ., newArrayList, (, ), ;, for, (, CharSequence, cs, :]
[Lists, ., newArrayList, (, ), ;, for, (, CharSequence, cs, :, message, ., parts, (, ), ), {, if, (]
[Lists, ., newArrayList, (, ), ;, for, (, CharSequence, cs, :, message, ., parts, (, ), ), {, if, (]
[CharSequence, cs, :, message, ., parts, (, ), ), {, if, (, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =]
[CharSequence, cs, :, message, ., parts, (, ), ), {, if, (, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =]
[cs, :, message, ., parts, (, ), ), {, if, (, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =, (]
[., parts, (, ), ), {, if, (, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =, (, (, PlaceholderReference, )]
[(, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =, (, (, PlaceholderReference, ), cs, ), ., getName, (, ), ;]
[(, cs, instanceof, PlaceholderReference, ), {, String, placeholderName, =, (, (, PlaceholderReference, ), cs, ), ., getName, (, ), ;]
[), {, String, placeholderName, =, (, (, PlaceholderReference, ), cs, ), ., getName, (, ), ;, placeholderNames, ., add, (]
[(, (, PlaceholderReference, ), cs, ), ., getName, (, ), ;, placeholderNames, ., add, (, placeholderName, ), ;, }, }]
[(, (, PlaceholderReference, ), cs, ), ., getName, (, ), ;, placeholderNames, ., add, (, placeholderName, ), ;, }, }]
[cs, ), ., getName, (, ), ;, placeholderNames, ., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (]
[;, placeholderNames, ., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =]
[;, placeholderNames, ., add, (, placeholderName, ), ;, }, }, Collections, ., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =]
[., sort, (, placeholderNames, ), ;, Node, placeholderValueArray, =, IR, ., arraylit, (, ), ;, for, (, String, name, :]
[Node, placeholderValueArray, =, IR, ., arraylit, (, ), ;, for, (, String, name, :, placeholderNames, ), {, Node, value, =]
[=, IR, ., arraylit, (, ), ;, for, (, String, name, :, placeholderNames, ), {, Node, value, =, getPlaceholderValue, (]
[., arraylit, (, ), ;, for, (, String, name, :, placeholderNames, ), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,]
[for, (, String, name, :, placeholderNames, ), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (]
[for, (, String, name, :, placeholderNames, ), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (]
[String, name, :, placeholderNames, ), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (, value, ==]
[), {, Node, value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (, value, ==, null, ), {, throw]
[value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (, value, ==, null, ), {, throw, new, MalformedException, (]
[value, =, getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (, value, ==, null, ), {, throw, new, MalformedException, (]
[getPlaceholderValue, (, placeholderValues, ,, name, ), ;, if, (, value, ==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +]
[placeholderValues, ,, name, ), ;, if, (, value, ==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,]
[;, if, (, value, ==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }]
[;, if, (, value, ==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }]
[==, null, ), {, throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (]
[throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }]
[throw, new, MalformedException, (, "No value was provided for placeholder ", +, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }]
["No value was provided for placeholder ", +, name, ,, origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (]
[origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }]
[origNode, ), ;, }, placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }]
[placeholderValueArray, ., addChildToBack, (, value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode, ., copyInformationFromForTree, (]
[value, ), ;, }, newValueNode, ., addChildToBack, (, placeholderValueArray, ), ;, }, newValueNode, ., copyInformationFromForTree, (, origNode, ), ;, return]
[return, newValueNode, ;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues, ,, String, placeholderName, ), {, for, (, Node, key, :]
[return, newValueNode, ;, }, private, Node, getPlaceholderValue, (, Node, placeholderValues, ,, String, placeholderName, ), {, for, (, Node, key, :]
[placeholderValues, ,, String, placeholderName, ), {, for, (, Node, key, :, placeholderValues, ., children, (, ), ), {, if, (]
[placeholderValues, ,, String, placeholderName, ), {, for, (, Node, key, :, placeholderValues, ., children, (, ), ), {, if, (]
[placeholderValues, ,, String, placeholderName, ), {, for, (, Node, key, :, placeholderValues, ., children, (, ), ), {, if, (]
[Node, key, :, placeholderValues, ., children, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (]
[children, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (, placeholderName, ), ), {, return]
[children, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (, placeholderName, ), ), {, return]
[children, (, ), ), {, if, (, key, ., getString, (, ), ., equals, (, placeholderName, ), ), {, return]
[equals, (, placeholderName, ), ), {, return, key, ., getFirstChild, (, ), ., cloneTree, (, ), ;, }, }, return]
