[;, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Scope, ., Var, >, initializedConstants, ;, public, ConstCheck, (, AbstractCompiler]
[., error, (, "JSC_CONSTANT_REASSIGNED_VALUE_ERROR", ,, "constant {0} assigned a value more than once", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Scope, ., Var]
[,, "constant {0} assigned a value more than once", ), ;, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Scope, ., Var, >, initializedConstants, ;, public]
[), ;, private, final, AbstractCompiler, compiler, ;, private, final, Set, <, Scope, ., Var, >, initializedConstants, ;, public, ConstCheck, (]
[=, compiler, ;, this, ., initializedConstants, =, new, HashSet, <, Scope, ., Var, >, (, ), ;, }, @, Override]
[., compiler, =, compiler, ;, this, ., initializedConstants, =, new, HashSet, <, Scope, ., Var, >, (, ), ;, }]
[;, this, ., initializedConstants, =, new, HashSet, <, Scope, ., Var, >, (, ), ;, }, @, Override, public, void]
[=, new, HashSet, <, Scope, ., Var, >, (, ), ;, }, @, Override, public, void, process, (, Node, externs]
[., initializedConstants, =, new, HashSet, <, Scope, ., Var, >, (, ), ;, }, @, Override, public, void, process, (]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override]
[., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, )]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch]
[), {, case, Token, ., NAME, :, if, (, parent, !=, null, &&, parent, ., isVar, (, ), &&, n]
[., getType, (, ), ), {, case, Token, ., NAME, :, if, (, parent, !=, null, &&, parent, ., isVar]
[:, if, (, parent, !=, null, &&, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), ), {]
[., NAME, :, if, (, parent, !=, null, &&, parent, ., isVar, (, ), &&, n, ., hasChildren, (, )]
[), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (]
[&&, n, ., hasChildren, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var]
[&&, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), ), {, String, name, =, n, ., getString]
[!=, null, &&, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), ), {, String, name, =, n]
[&&, parent, ., isVar, (, ), &&, n, ., hasChildren, (, ), ), {, String, name, =, n, ., getString]
[&&, n, ., hasChildren, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var]
[., isVar, (, ), &&, n, ., hasChildren, (, ), ), {, String, name, =, n, ., getString, (, )]
[), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (]
[., hasChildren, (, ), ), {, String, name, =, n, ., getString, (, ), ;, Scope, ., Var, var, =]
[;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant]
[., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError]
[., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (]
[), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {]
[), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, )]
[), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name]
[), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, )]
[., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants]
[), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (, var]
[;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN]
[,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break]
[,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, case]
[), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, case, Token, .]
[;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR]
[., add, (, var, ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR]
[), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, .]
[:, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH]
[., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token]
[:, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH]
[., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token]
[:, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH]
[., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token]
[:, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD]
[., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token]
[:, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB]
[., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token]
[:, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL]
[., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token]
[:, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV]
[., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token]
[:, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD]
[., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node]
[:, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =, n, ., getFirstChild, (, )]
[., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =, n, ., getFirstChild]
[:, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, .]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[:, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {]
[., ASSIGN_MOD, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, )]
[;, if, (, lhs, ., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope]
[., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {, String, name, =, lhs, ., getString]
[), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant]
[., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError]
[., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, if, (]
[), ;, if, (, isConstant, (, var, ), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {]
[), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, )]
[), ), {, if, (, initializedConstants, ., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name]
[), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, )]
[., contains, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants]
[), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (, var]
[;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, }, case, Token, .]
[,, n, ,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break]
[,, name, ), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, }]
[), ;, }, else, {, initializedConstants, ., add, (, var, ), ;, }, }, }, break, ;, }, case, Token]
[;, }, }, }, break, ;, }, case, Token, ., INC, :, case, Token, ., DEC, :, {, Node, lhs]
[., add, (, var, ), ;, }, }, }, break, ;, }, case, Token, ., INC, :, case, Token, .]
[), ;, }, }, }, break, ;, }, case, Token, ., INC, :, case, Token, ., DEC, :, {, Node]
[:, case, Token, ., DEC, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, .]
[., INC, :, case, Token, ., DEC, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[:, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {]
[., DEC, :, {, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, )]
[;, if, (, lhs, ., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope]
[., getFirstChild, (, ), ;, if, (, lhs, ., isName, (, ), ), {, String, name, =, lhs, ., getString]
[), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (]
[., isName, (, ), ), {, String, name, =, lhs, ., getString, (, ), ;, Scope, ., Var, var, =]
[;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant]
[., getString, (, ), ;, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, if, (, isConstant, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, }]
[., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, reportError, (, t, ,, n, ,]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, isConstant, (, var, ), ), {, reportError, (]
[), ;, if, (, isConstant, (, var, ), ), {, reportError, (, t, ,, n, ,, name, ), ;, }]
[), {, reportError, (, t, ,, n, ,, name, ), ;, }, }, break, ;, }, }, }, private, boolean]
[), ), {, reportError, (, t, ,, n, ,, name, ), ;, }, }, break, ;, }, }, }, private]
[;, }, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return, var]
[,, n, ,, name, ), ;, }, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var]
[,, name, ), ;, }, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, )]
[), ;, }, }, break, ;, }, }, }, private, boolean, isConstant, (, Scope, ., Var, var, ), {, return]
[;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {, compiler, ., report, (, t]
[&&, var, ., isConst, (, ), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, )]
[!=, null, &&, var, ., isConst, (, ), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String]
[&&, var, ., isConst, (, ), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, )]
[;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {, compiler, ., report, (, t]
[., isConst, (, ), ;, }, void, reportError, (, NodeTraversal, t, ,, Node, n, ,, String, name, ), {, compiler]
[;, }, }]
[., report, (, t, ., makeError, (, n, ,, CONST_REASSIGNED_VALUE_ERROR, ,, name, ), ), ;, }, }]
[), ;, }, }]
[., makeError, (, n, ,, CONST_REASSIGNED_VALUE_ERROR, ,, name, ), ), ;, }, }]
[,, CONST_REASSIGNED_VALUE_ERROR, ,, name, ), ), ;, }, }]
[,, name, ), ), ;, }, }]
[), ), ;, }, }]
