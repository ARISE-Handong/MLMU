[import, java, ., util, ., logging, ., Logger, ;, class, RemoveUnusedNames, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[import, java, ., util, ., logging, ., Logger, ;, class, RemoveUnusedNames, implements, CompilerPass, {, private, static, final, Logger, logger, =]
[., logging, ., Logger, ;, class, RemoveUnusedNames, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., logging, ., Logger, ;, class, RemoveUnusedNames, implements, CompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ), {]
[;, private, final, AbstractCompiler, compiler, ;, private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ), {]
[compiler, ;, private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ), {, this, ., compiler, =]
[private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;]
[private, final, boolean, canModifyExterns, ;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;]
[;, RemoveUnusedNames, (, AbstractCompiler, compiler, ,, boolean, canModifyExterns, ), {, this, ., compiler, =, compiler, ;, this, ., canModifyExterns, =]
[=, canModifyExterns, ;, }, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences, analyzer, =]
[}, @, Override, public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (]
[public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (, compiler, ), ;]
[public, void, process, (, Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (, compiler, ), ;]
[Node, externRoot, ,, Node, root, ), {, AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (, compiler, ), ;, analyzer, ., process, (]
[,, Node, root, ), {, AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (, compiler, ), ;, analyzer, ., process, (, externRoot, ,]
[), {, AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (, compiler, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;]
[AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (, compiler, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedProperties, (]
[AnalyzeNameReferences, analyzer, =, new, AnalyzeNameReferences, (, compiler, ), ;, analyzer, ., process, (, externRoot, ,, root, ), ;, removeUnusedProperties, (]
[;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph, ), {, for, (, GraphNode, <, Name, ,, Reference, >, node, :]
[;, }, private, void, removeUnusedProperties, (, NameReferenceGraph, graph, ), {, for, (, GraphNode, <, Name, ,, Reference, >, node, :]
[for, (, GraphNode, <, Name, ,, Reference, >, node, :, graph, ., getNodes, (, ), ), {, Name, name, =]
[for, (, GraphNode, <, Name, ,, Reference, >, node, :, graph, ., getNodes, (, ), ), {, Name, name, =]
[:, graph, ., getNodes, (, ), ), {, Name, name, =, node, ., getValue, (, ), ;, NameInfo, nameInfo, =]
[:, graph, ., getNodes, (, ), ), {, Name, name, =, node, ., getValue, (, ), ;, NameInfo, nameInfo, =]
[Name, name, =, node, ., getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (]
[Name, name, =, node, ., getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (]
[Name, name, =, node, ., getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (]
[=, node, ., getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (, nameInfo, ==]
[., getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||]
[getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||, !]
[getValue, (, ), ;, NameInfo, nameInfo, =, node, ., getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||, !]
[getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if, (]
[getAnnotation, (, ), ;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if, (]
[), ;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||]
[;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !]
[;, if, (, nameInfo, ==, null, ||, !, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !]
[!, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {]
[!, nameInfo, ., isReferenced, (, ), ), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {]
[), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;]
[), {, if, (, canModifyExterns, ||, !, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;]
[!, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;]
[!, name, ., isExtern, (, ), ), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;]
[(, ), ), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (]
[(, ), ), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (]
[), {, name, ., remove, (, ), ;, compiler, ., reportCodeChange, (, ), ;, logger, ., fine, (, "Removed unused name", +]
