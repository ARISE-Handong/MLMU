[public, PolynomialFunctionNewtonForm, (, double, a, [, ], ,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {]
[(, double, a, [, ], ,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, verifyInputArray, (]
[a, [, ], ,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, verifyInputArray, (, a, ,]
[,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, verifyInputArray, (, a, ,, c, ), ;]
[,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, verifyInputArray, (, a, ,, c, ), ;]
[], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, verifyInputArray, (, a, ,, c, ), ;, this, ., a, =]
[NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, verifyInputArray, (, a, ,, c, ), ;, this, ., a, =, new, double, []
[NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, verifyInputArray, (, a, ,, c, ), ;, this, ., a, =, new, double, []
[{, verifyInputArray, (, a, ,, c, ), ;, this, ., a, =, new, double, [, a, ., length, ], ;]
[{, verifyInputArray, (, a, ,, c, ), ;, this, ., a, =, new, double, [, a, ., length, ], ;]
[,, c, ), ;, this, ., a, =, new, double, [, a, ., length, ], ;, this, ., c, =]
[;, this, ., a, =, new, double, [, a, ., length, ], ;, this, ., c, =, new, double, []
[;, this, ., a, =, new, double, [, a, ., length, ], ;, this, ., c, =, new, double, []
[new, double, [, a, ., length, ], ;, this, ., c, =, new, double, [, c, ., length, ], ;]
[new, double, [, a, ., length, ], ;, this, ., c, =, new, double, [, c, ., length, ], ;]
[., length, ], ;, this, ., c, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (]
[], ;, this, ., c, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (, a, ,]
[this, ., c, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,]
[this, ., c, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,]
[new, double, [, c, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,, this, ., a, ,]
[[, c, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,, this, ., a, ,, 0, ,]
[[, c, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,, this, ., a, ,, 0, ,]
[;, System, ., arraycopy, (, a, ,, 0, ,, this, ., a, ,, 0, ,, a, ., length, ), ;]
[;, System, ., arraycopy, (, a, ,, 0, ,, this, ., a, ,, 0, ,, a, ., length, ), ;]
[(, a, ,, 0, ,, this, ., a, ,, 0, ,, a, ., length, ), ;, System, ., arraycopy, (]
[,, 0, ,, this, ., a, ,, 0, ,, a, ., length, ), ;, System, ., arraycopy, (, c, ,]
[,, this, ., a, ,, 0, ,, a, ., length, ), ;, System, ., arraycopy, (, c, ,, 0, ,]
[,, this, ., a, ,, 0, ,, a, ., length, ), ;, System, ., arraycopy, (, c, ,, 0, ,]
[,, 0, ,, a, ., length, ), ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., c, ,]
[,, a, ., length, ), ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., c, ,, 0, ,]
[,, a, ., length, ), ;, System, ., arraycopy, (, c, ,, 0, ,, this, ., c, ,, 0, ,]
[;, System, ., arraycopy, (, c, ,, 0, ,, this, ., c, ,, 0, ,, c, ., length, ), ;]
[., arraycopy, (, c, ,, 0, ,, this, ., c, ,, 0, ,, c, ., length, ), ;, coefficientsComputed, =]
[,, c, ., length, ), ;, coefficientsComputed, =, false, ;, }, public, double, value, (, double, z, ), {, return]
[., length, ), ;, coefficientsComputed, =, false, ;, }, public, double, value, (, double, z, ), {, return, evaluate, (]
[), ;, coefficientsComputed, =, false, ;, }, public, double, value, (, double, z, ), {, return, evaluate, (, a, ,]
[coefficientsComputed, =, false, ;, }, public, double, value, (, double, z, ), {, return, evaluate, (, a, ,, c, ,]
[return, evaluate, (, a, ,, c, ,, z, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {]
[(, a, ,, c, ,, z, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, verifyInputArray, (]
[,, c, ,, z, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, verifyInputArray, (, a, ,]
[public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, verifyInputArray, (, a, ,, c, ), ;, final, int, n, =]
[public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, verifyInputArray, (, a, ,, c, ), ;, final, int, n, =]
[), {, verifyInputArray, (, a, ,, c, ), ;, final, int, n, =, c, ., length, ;, DerivativeStructure, value, =]
[(, a, ,, c, ), ;, final, int, n, =, c, ., length, ;, DerivativeStructure, value, =, new, DerivativeStructure, (]
[(, a, ,, c, ), ;, final, int, n, =, c, ., length, ;, DerivativeStructure, value, =, new, DerivativeStructure, (]
[final, int, n, =, c, ., length, ;, DerivativeStructure, value, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,]
[final, int, n, =, c, ., length, ;, DerivativeStructure, value, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,]
[length, ;, DerivativeStructure, value, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,]
[length, ;, DerivativeStructure, value, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,]
[DerivativeStructure, value, =, new, DerivativeStructure, (, t, ., getFreeParameters, (, ), ,, t, ., getOrder, (, ), ,, a, []
[(, ), ,, t, ., getOrder, (, ), ,, a, [, n, ], ), ;, for, (, int, i, =]
[(, ), ,, t, ., getOrder, (, ), ,, a, [, n, ], ), ;, for, (, int, i, =]
[,, t, ., getOrder, (, ), ,, a, [, n, ], ), ;, for, (, int, i, =, n, -]
[., getOrder, (, ), ,, a, [, n, ], ), ;, for, (, int, i, =, n, -, 1, ;]
[., getOrder, (, ), ,, a, [, n, ], ), ;, for, (, int, i, =, n, -, 1, ;]
[(, ), ,, a, [, n, ], ), ;, for, (, int, i, =, n, -, 1, ;, i, >=]
[,, a, [, n, ], ), ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;]
[,, a, [, n, ], ), ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;]
[], ), ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =]
[;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =]
[;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =]
[;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =]
[i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, t, ., subtract, (]
[i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, t, ., subtract, (]
[n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, t, ., subtract, (, c, []
[0, ;, i, --, ), {, value, =, t, ., subtract, (, c, [, i, ], ), ., multiply, (]
[{, value, =, t, ., subtract, (, c, [, i, ], ), ., multiply, (, value, ), ., add, (]
[{, value, =, t, ., subtract, (, c, [, i, ], ), ., multiply, (, value, ), ., add, (]
[=, t, ., subtract, (, c, [, i, ], ), ., multiply, (, value, ), ., add, (, a, []
[[, i, ], ), ., multiply, (, value, ), ., add, (, a, [, i, ], ), ;, }, return]
[add, (, a, [, i, ], ), ;, }, return, value, ;, }, public, int, degree, (, ), {, return]
[add, (, a, [, i, ], ), ;, }, return, value, ;, }, public, int, degree, (, ), {, return]
[{, return, c, ., length, ;, }, public, double, [, ], getNewtonCoefficients, (, ), {, double, [, ], out, =]
[., length, ;, }, public, double, [, ], getNewtonCoefficients, (, ), {, double, [, ], out, =, new, double, []
[., length, ;, }, public, double, [, ], getNewtonCoefficients, (, ), {, double, [, ], out, =, new, double, []
[double, [, ], getNewtonCoefficients, (, ), {, double, [, ], out, =, new, double, [, a, ., length, ], ;]
[double, [, ], getNewtonCoefficients, (, ), {, double, [, ], out, =, new, double, [, a, ., length, ], ;]
[(, ), {, double, [, ], out, =, new, double, [, a, ., length, ], ;, System, ., arraycopy, (]
[{, double, [, ], out, =, new, double, [, a, ., length, ], ;, System, ., arraycopy, (, a, ,]
[[, ], out, =, new, double, [, a, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,]
[out, =, new, double, [, a, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,, out, ,]
[new, double, [, a, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,, out, ,, 0, ,]
[new, double, [, a, ., length, ], ;, System, ., arraycopy, (, a, ,, 0, ,, out, ,, 0, ,]
[], ;, System, ., arraycopy, (, a, ,, 0, ,, out, ,, 0, ,, a, ., length, ), ;, return]
[length, ), ;, return, out, ;, }, public, double, [, ], getCenters, (, ), {, double, [, ], out, =]
[return, out, ;, }, public, double, [, ], getCenters, (, ), {, double, [, ], out, =, new, double, []
[return, out, ;, }, public, double, [, ], getCenters, (, ), {, double, [, ], out, =, new, double, []
[double, [, ], getCenters, (, ), {, double, [, ], out, =, new, double, [, c, ., length, ], ;]
[double, [, ], getCenters, (, ), {, double, [, ], out, =, new, double, [, c, ., length, ], ;]
[(, ), {, double, [, ], out, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (]
[{, double, [, ], out, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (, c, ,]
[[, ], out, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (, c, ,, 0, ,]
[out, =, new, double, [, c, ., length, ], ;, System, ., arraycopy, (, c, ,, 0, ,, out, ,]
[new, double, [, c, ., length, ], ;, System, ., arraycopy, (, c, ,, 0, ,, out, ,, 0, ,]
[new, double, [, c, ., length, ], ;, System, ., arraycopy, (, c, ,, 0, ,, out, ,, 0, ,]
[], ;, System, ., arraycopy, (, c, ,, 0, ,, out, ,, 0, ,, c, ., length, ), ;, return]
[,, c, ., length, ), ;, return, out, ;, }, public, double, [, ], getCoefficients, (, ), {, if, (]
[c, ., length, ), ;, return, out, ;, }, public, double, [, ], getCoefficients, (, ), {, if, (, !]
[), ;, return, out, ;, }, public, double, [, ], getCoefficients, (, ), {, if, (, !, coefficientsComputed, ), {]
[getCoefficients, (, ), {, if, (, !, coefficientsComputed, ), {, computeCoefficients, (, ), ;, }, double, [, ], out, =]
[{, if, (, !, coefficientsComputed, ), {, computeCoefficients, (, ), ;, }, double, [, ], out, =, new, double, []
[{, if, (, !, coefficientsComputed, ), {, computeCoefficients, (, ), ;, }, double, [, ], out, =, new, double, []
[), {, computeCoefficients, (, ), ;, }, double, [, ], out, =, new, double, [, coefficients, ., length, ], ;]
[), {, computeCoefficients, (, ), ;, }, double, [, ], out, =, new, double, [, coefficients, ., length, ], ;]
[), ;, }, double, [, ], out, =, new, double, [, coefficients, ., length, ], ;, System, ., arraycopy, (]
[}, double, [, ], out, =, new, double, [, coefficients, ., length, ], ;, System, ., arraycopy, (, coefficients, ,]
[[, ], out, =, new, double, [, coefficients, ., length, ], ;, System, ., arraycopy, (, coefficients, ,, 0, ,]
[out, =, new, double, [, coefficients, ., length, ], ;, System, ., arraycopy, (, coefficients, ,, 0, ,, out, ,]
[new, double, [, coefficients, ., length, ], ;, System, ., arraycopy, (, coefficients, ,, 0, ,, out, ,, 0, ,]
[new, double, [, coefficients, ., length, ], ;, System, ., arraycopy, (, coefficients, ,, 0, ,, out, ,, 0, ,]
[], ;, System, ., arraycopy, (, coefficients, ,, 0, ,, out, ,, 0, ,, coefficients, ., length, ), ;, return]
[double, a, [, ], ,, double, c, [, ], ,, double, z, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {]
[[, ], ,, double, c, [, ], ,, double, z, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, verifyInputArray, (]
[,, double, c, [, ], ,, double, z, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, verifyInputArray, (, a, ,]
[z, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, verifyInputArray, (, a, ,, c, ), ;, final, int, n, =]
[z, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NoDataException, {, verifyInputArray, (, a, ,, c, ), ;, final, int, n, =]
[NoDataException, {, verifyInputArray, (, a, ,, c, ), ;, final, int, n, =, c, ., length, ;, double, value, =]
[NoDataException, {, verifyInputArray, (, a, ,, c, ), ;, final, int, n, =, c, ., length, ;, double, value, =]
[verifyInputArray, (, a, ,, c, ), ;, final, int, n, =, c, ., length, ;, double, value, =, a, []
[int, n, =, c, ., length, ;, double, value, =, a, [, n, ], ;, for, (, int, i, =]
[int, n, =, c, ., length, ;, double, value, =, a, [, n, ], ;, for, (, int, i, =]
[=, c, ., length, ;, double, value, =, a, [, n, ], ;, for, (, int, i, =, n, -]
[., length, ;, double, value, =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;]
[., length, ;, double, value, =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;]
[;, double, value, =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;, i, >=]
[value, =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;]
[value, =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;]
[n, ], ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =]
[;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =]
[;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =]
[(, int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, a, []
[=, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, a, [, i, ], +]
[=, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, a, [, i, ], +]
[n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, a, [, i, ], +, (]
[n, -, 1, ;, i, >=, 0, ;, i, --, ), {, value, =, a, [, i, ], +, (]
[1, ;, i, >=, 0, ;, i, --, ), {, value, =, a, [, i, ], +, (, z, -]
[1, ;, i, >=, 0, ;, i, --, ), {, value, =, a, [, i, ], +, (, z, -]
[i, >=, 0, ;, i, --, ), {, value, =, a, [, i, ], +, (, z, -, c, []
[i, --, ), {, value, =, a, [, i, ], +, (, z, -, c, [, i, ], ), *]
[value, =, a, [, i, ], +, (, z, -, c, [, i, ], ), *, value, ;, }, return]
[], ), *, value, ;, }, return, value, ;, }, protected, void, computeCoefficients, (, ), {, final, int, n, =]
[;, }, return, value, ;, }, protected, void, computeCoefficients, (, ), {, final, int, n, =, degree, (, ), ;]
[return, value, ;, }, protected, void, computeCoefficients, (, ), {, final, int, n, =, degree, (, ), ;, coefficients, =]
[}, protected, void, computeCoefficients, (, ), {, final, int, n, =, degree, (, ), ;, coefficients, =, new, double, []
[}, protected, void, computeCoefficients, (, ), {, final, int, n, =, degree, (, ), ;, coefficients, =, new, double, []
[void, computeCoefficients, (, ), {, final, int, n, =, degree, (, ), ;, coefficients, =, new, double, [, n, +]
[=, degree, (, ), ;, coefficients, =, new, double, [, n, +, 1, ], ;, for, (, int, i, =]
[(, ), ;, coefficients, =, new, double, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;]
[(, ), ;, coefficients, =, new, double, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;]
[;, coefficients, =, new, double, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=]
[=, new, double, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;]
[=, new, double, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;]
[n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {]
[n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {]
[1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, coefficients, []
[for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, coefficients, [, i, ], =]
[i, =, 0, ;, i, <=, n, ;, i, ++, ), {, coefficients, [, i, ], =, 0.0, ;, }]
[i, =, 0, ;, i, <=, n, ;, i, ++, ), {, coefficients, [, i, ], =, 0.0, ;, }]
[0, ;, i, <=, n, ;, i, ++, ), {, coefficients, [, i, ], =, 0.0, ;, }, coefficients, []
[<=, n, ;, i, ++, ), {, coefficients, [, i, ], =, 0.0, ;, }, coefficients, [, 0, ], =]
[<=, n, ;, i, ++, ), {, coefficients, [, i, ], =, 0.0, ;, }, coefficients, [, 0, ], =]
[;, i, ++, ), {, coefficients, [, i, ], =, 0.0, ;, }, coefficients, [, 0, ], =, a, []
[], =, 0.0, ;, }, coefficients, [, 0, ], =, a, [, n, ], ;, for, (, int, i, =]
[], =, 0.0, ;, }, coefficients, [, 0, ], =, a, [, n, ], ;, for, (, int, i, =]
[0.0, ;, }, coefficients, [, 0, ], =, a, [, n, ], ;, for, (, int, i, =, n, -]
[}, coefficients, [, 0, ], =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;]
[}, coefficients, [, 0, ], =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;]
[[, 0, ], =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;, i, >=]
[], =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;]
[], =, a, [, n, ], ;, for, (, int, i, =, n, -, 1, ;, i, >=, 0, ;]
[int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =]
[int, i, =, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =]
[=, n, -, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, n, -]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, n, -, i, ;]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, n, -, i, ;]
[;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, n, -, i, ;, j, >]
[>=, 0, ;, i, --, ), {, for, (, int, j, =, n, -, i, ;, j, >, 0, ;]
[>=, 0, ;, i, --, ), {, for, (, int, j, =, n, -, i, ;, j, >, 0, ;]
[--, ), {, for, (, int, j, =, n, -, i, ;, j, >, 0, ;, j, --, ), {]
[--, ), {, for, (, int, j, =, n, -, i, ;, j, >, 0, ;, j, --, ), {]
[{, for, (, int, j, =, n, -, i, ;, j, >, 0, ;, j, --, ), {, coefficients, []
[int, j, =, n, -, i, ;, j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =]
[int, j, =, n, -, i, ;, j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =]
[int, j, =, n, -, i, ;, j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =]
[=, n, -, i, ;, j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =, coefficients, []
[=, n, -, i, ;, j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =, coefficients, []
[-, i, ;, j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =, coefficients, [, j, -]
[j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =, coefficients, [, j, -, 1, ], -]
[j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =, coefficients, [, j, -, 1, ], -]
[j, >, 0, ;, j, --, ), {, coefficients, [, j, ], =, coefficients, [, j, -, 1, ], -]
[0, ;, j, --, ), {, coefficients, [, j, ], =, coefficients, [, j, -, 1, ], -, c, []
[--, ), {, coefficients, [, j, ], =, coefficients, [, j, -, 1, ], -, c, [, i, ], *]
[--, ), {, coefficients, [, j, ], =, coefficients, [, j, -, 1, ], -, c, [, i, ], *]
[{, coefficients, [, j, ], =, coefficients, [, j, -, 1, ], -, c, [, i, ], *, coefficients, []
[], =, coefficients, [, j, -, 1, ], -, c, [, i, ], *, coefficients, [, j, ], ;, }]
[], =, coefficients, [, j, -, 1, ], -, c, [, i, ], *, coefficients, [, j, ], ;, }]
[coefficients, [, j, -, 1, ], -, c, [, i, ], *, coefficients, [, j, ], ;, }, coefficients, []
[-, 1, ], -, c, [, i, ], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =]
[-, 1, ], -, c, [, i, ], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =]
[-, 1, ], -, c, [, i, ], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =]
[], -, c, [, i, ], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =, a, []
[[, i, ], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =, a, [, i, ], -]
[[, i, ], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =, a, [, i, ], -]
[[, i, ], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =, a, [, i, ], -]
[], *, coefficients, [, j, ], ;, }, coefficients, [, 0, ], =, a, [, i, ], -, c, []
[[, j, ], ;, }, coefficients, [, 0, ], =, a, [, i, ], -, c, [, i, ], *]
[[, j, ], ;, }, coefficients, [, 0, ], =, a, [, i, ], -, c, [, i, ], *]
[], ;, }, coefficients, [, 0, ], =, a, [, i, ], -, c, [, i, ], *, coefficients, []
[[, 0, ], =, a, [, i, ], -, c, [, i, ], *, coefficients, [, 0, ], ;, }]
[], =, a, [, i, ], -, c, [, i, ], *, coefficients, [, 0, ], ;, }, coefficientsComputed, =]
[void, verifyInputArray, (, double, a, [, ], ,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {]
[void, verifyInputArray, (, double, a, [, ], ,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {]
[a, [, ], ,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (]
[,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, a, ), ;]
[,, double, c, [, ], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, a, ), ;]
[], ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (]
[NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (]
[NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (]
[NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (]
[NoDataException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (]
[MathUtils, ., checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (, a, ., length, ==]
[checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (, a, ., length, ==, 0, ||]
[checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (, a, ., length, ==, 0, ||]
[checkNotNull, (, a, ), ;, MathUtils, ., checkNotNull, (, c, ), ;, if, (, a, ., length, ==, 0, ||]
[;, MathUtils, ., checkNotNull, (, c, ), ;, if, (, a, ., length, ==, 0, ||, c, ., length, ==]
[(, c, ), ;, if, (, a, ., length, ==, 0, ||, c, ., length, ==, 0, ), {, throw]
[;, if, (, a, ., length, ==, 0, ||, c, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[;, if, (, a, ., length, ==, 0, ||, c, ., length, ==, 0, ), {, throw, new, NoDataException, (]
[||, c, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (]
[||, c, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (]
[||, c, ., length, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, a, ., length, !=]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, a, ., length, !=]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, a, ., length, !=]
[throw, new, NoDataException, (, LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, a, ., length, !=, c, ., length, +]
[LocalizedFormats, ., EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY, ), ;, }, if, (, a, ., length, !=, c, ., length, +, 1, ), {, throw]
[), ;, }, if, (, a, ., length, !=, c, ., length, +, 1, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, a, ., length, !=, c, ., length, +, 1, ), {, throw, new, DimensionMismatchException, (]
[(, a, ., length, !=, c, ., length, +, 1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, ,]
[(, a, ., length, !=, c, ., length, +, 1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, ,]
[!=, c, ., length, +, 1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, ,, a, ., length, ,]
[!=, c, ., length, +, 1, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, ,, a, ., length, ,]
