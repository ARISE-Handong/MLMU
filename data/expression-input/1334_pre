[import, java, ., util, ., logging, ., Logger, ;, class, InlineSimpleMethods, extends, MethodCompilerPass, {, private, static, final, Logger, logger, =]
[import, java, ., util, ., logging, ., Logger, ;, class, InlineSimpleMethods, extends, MethodCompilerPass, {, private, static, final, Logger, logger, =]
[., logging, ., Logger, ;, class, InlineSimpleMethods, extends, MethodCompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., logging, ., Logger, ;, class, InlineSimpleMethods, extends, MethodCompilerPass, {, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[., getLogger, (, InlineSimpleMethods, ., class, ., getName, (, ), ), ;, InlineSimpleMethods, (, AbstractCompiler, compiler, ), {, super, (]
[@, Override, void, visit, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, String, callName, ), {, if, (]
[@, Override, void, visit, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, String, callName, ), {, if, (]
[@, Override, void, visit, (, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, String, callName, ), {, if, (]
[(, NodeTraversal, t, ,, Node, callNode, ,, Node, parent, ,, String, callName, ), {, if, (, externMethods, ., contains, (]
[,, Node, callNode, ,, Node, parent, ,, String, callName, ), {, if, (, externMethods, ., contains, (, callName, ), ||]
[,, Node, callNode, ,, Node, parent, ,, String, callName, ), {, if, (, externMethods, ., contains, (, callName, ), ||]
[Node, parent, ,, String, callName, ), {, if, (, externMethods, ., contains, (, callName, ), ||, nonMethodProperties, ., contains, (]
[callName, ), ||, nonMethodProperties, ., contains, (, callName, ), ), {, return, ;, }, Collection, <, Node, >, definitions, =]
[callName, ), ||, nonMethodProperties, ., contains, (, callName, ), ), {, return, ;, }, Collection, <, Node, >, definitions, =]
[., contains, (, callName, ), ), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (]
[), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (]
[), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (]
[), {, return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (]
[return, ;, }, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (, definitions, ==]
[}, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (, definitions, ==, null, ||]
[}, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (, definitions, ==, null, ||]
[}, Collection, <, Node, >, definitions, =, methodDefinitions, ., get, (, callName, ), ;, if, (, definitions, ==, null, ||]
[=, methodDefinitions, ., get, (, callName, ), ;, if, (, definitions, ==, null, ||, definitions, ., size, (, ), ==]
[(, definitions, ==, null, ||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }, Node, firstDefinition, =]
[(, definitions, ==, null, ||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }, Node, firstDefinition, =]
[(, definitions, ==, null, ||, definitions, ., size, (, ), ==, 0, ), {, return, ;, }, Node, firstDefinition, =]
[), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (]
[), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (]
[), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (]
[), {, return, ;, }, Node, firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (]
[firstDefinition, =, definitions, ., iterator, (, ), ., next, (, ), ;, if, (, definitions, ., size, (, ), ==]
[definitions, ., iterator, (, ), ., next, (, ), ;, if, (, definitions, ., size, (, ), ==, 1, ||]
[iterator, (, ), ., next, (, ), ;, if, (, definitions, ., size, (, ), ==, 1, ||, allDefinitionsEquivalent, (]
[), ;, if, (, definitions, ., size, (, ), ==, 1, ||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (]
[;, if, (, definitions, ., size, (, ), ==, 1, ||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !]
[(, definitions, ., size, (, ), ==, 1, ||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !, argsMayHaveSideEffects, (]
[1, ||, allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =]
[allDefinitionsEquivalent, (, definitions, ), ), {, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression, (]
[{, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (]
[{, if, (, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (]
[(, !, argsMayHaveSideEffects, (, callNode, ), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=]
[), ), {, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=, null, ), {, if, (]
[{, Node, returned, =, returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=, null, ), {, if, (, isPropertyTree, (]
[returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {]
[returnedExpression, (, firstDefinition, ), ;, if, (, returned, !=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {]
[;, if, (, returned, !=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (]
[;, if, (, returned, !=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (]
[(, returned, !=, null, ), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +]
[null, ), {, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;]
[{, if, (, isPropertyTree, (, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (]
[(, isPropertyTree, (, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,]
[(, returned, ), ), {, logger, ., fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,]
[fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (]
[fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (]
[fine, (, "Inlining property accessor: ", +, callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (]
[callName, ), ;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (]
[;, inlinePropertyReturn, (, parent, ,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,]
[parent, ,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&]
[,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !]
[,, callNode, ,, returned, ), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !]
[), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[), ;, }, else, if, (, NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[NodeUtil, ., isLiteralValue, (, returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,]
[returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {]
[returned, ,, false, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (]
[NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +]
[(, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;]
[., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (]
[(, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,]
[,, compiler, ), ), {, logger, ., fine, (, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,]
[(, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (]
[(, "Inlining constant accessor: ", +, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (]
[+, callName, ), ;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (]
[;, inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&]
[inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !]
[inlineConstReturn, (, parent, ,, callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !]
[callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[callNode, ,, returned, ), ;, }, }, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[}, else, if, (, isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,]
[isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {]
[isEmptyMethod, (, firstDefinition, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (]
[&&, !, NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (]
[NodeUtil, ., mayHaveSideEffects, (, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +]
[(, callNode, ., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;]
[., getFirstChild, (, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (]
[(, ), ,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,]
[,, compiler, ), ), {, logger, ., fine, (, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,]
[(, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {]
[(, "Inlining empty method: ", +, callName, ), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {]
[), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (]
[), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (]
[), ;, inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (]
[inlineEmptyMethod, (, t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (, "Method '", +]
[t, ,, parent, ,, callNode, ), ;, }, }, }, else, {, logger, ., fine, (, "Method '", +, callName, +]
[fine, (, "Method '", +, callName, +, "' has conflicting definitions.", ), ;, }, }, }, @, Override, Callback, getActingCallback, (, ), {, return]
[), {, return, new, InlineTrivialAccessors, (, ), ;, }, private, static, boolean, isPropertyTree, (, Node, expectedGetprop, ), {, if, (]
[{, return, new, InlineTrivialAccessors, (, ), ;, }, private, static, boolean, isPropertyTree, (, Node, expectedGetprop, ), {, if, (, !]
[{, return, new, InlineTrivialAccessors, (, ), ;, }, private, static, boolean, isPropertyTree, (, Node, expectedGetprop, ), {, if, (, !]
[private, static, boolean, isPropertyTree, (, Node, expectedGetprop, ), {, if, (, !, expectedGetprop, ., isGetProp, (, ), ), {, return]
[expectedGetprop, ), {, if, (, !, expectedGetprop, ., isGetProp, (, ), ), {, return, false, ;, }, Node, leftChild, =]
[expectedGetprop, ), {, if, (, !, expectedGetprop, ., isGetProp, (, ), ), {, return, false, ;, }, Node, leftChild, =]
[isGetProp, (, ), ), {, return, false, ;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (]
[isGetProp, (, ), ), {, return, false, ;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (]
[(, ), ), {, return, false, ;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !]
[(, ), ), {, return, false, ;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !]
[;, }, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !, leftChild, ., isThis, (, ), &&]
[}, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !, leftChild, ., isThis, (, ), &&, !]
[leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, !, leftChild, ., isThis, (, ), &&, !, isPropertyTree, (]
[(, ), ;, if, (, !, leftChild, ., isThis, (, ), &&, !, isPropertyTree, (, leftChild, ), ), {, return]
[leftChild, ., isThis, (, ), &&, !, isPropertyTree, (, leftChild, ), ), {, return, false, ;, }, Node, retVal, =]
[leftChild, ., isThis, (, ), &&, !, isPropertyTree, (, leftChild, ), ), {, return, false, ;, }, Node, retVal, =]
[(, leftChild, ), ), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (]
[(, leftChild, ), ), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (]
[(, leftChild, ), ), {, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (]
[{, return, false, ;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue, (]
[;, }, Node, retVal, =, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue, (, retVal, ), ==]
[=, leftChild, ., getNext, (, ), ;, if, (, NodeUtil, ., getStringValue, (, retVal, ), ==, null, ), {, return]
[(, ), ;, if, (, NodeUtil, ., getStringValue, (, retVal, ), ==, null, ), {, return, false, ;, }, return]
[}, return, true, ;, }, private, static, void, replaceThis, (, Node, expectedGetprop, ,, Node, replacement, ), {, Node, leftChild, =]
[}, return, true, ;, }, private, static, void, replaceThis, (, Node, expectedGetprop, ,, Node, replacement, ), {, Node, leftChild, =]
[replaceThis, (, Node, expectedGetprop, ,, Node, replacement, ), {, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (]
[replaceThis, (, Node, expectedGetprop, ,, Node, replacement, ), {, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (]
[), {, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, leftChild, ., isThis, (, ), ), {]
[), {, Node, leftChild, =, expectedGetprop, ., getFirstChild, (, ), ;, if, (, leftChild, ., isThis, (, ), ), {]
[=, expectedGetprop, ., getFirstChild, (, ), ;, if, (, leftChild, ., isThis, (, ), ), {, expectedGetprop, ., replaceChild, (]
[., getFirstChild, (, ), ;, if, (, leftChild, ., isThis, (, ), ), {, expectedGetprop, ., replaceChild, (, leftChild, ,]
[(, leftChild, ., isThis, (, ), ), {, expectedGetprop, ., replaceChild, (, leftChild, ,, replacement, ), ;, }, else, {]
[., isThis, (, ), ), {, expectedGetprop, ., replaceChild, (, leftChild, ,, replacement, ), ;, }, else, {, replaceThis, (]
[(, ), ), {, expectedGetprop, ., replaceChild, (, leftChild, ,, replacement, ), ;, }, else, {, replaceThis, (, leftChild, ,]
[(, leftChild, ,, replacement, ), ;, }, }, private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =]
[,, replacement, ), ;, }, }, private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (]
[}, private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, if, (]
[private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, if, (, !]
[private, static, Node, returnedExpression, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, if, (, !]
[{, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, if, (, !, expectedBlock, ., hasOneChild, (, ), ), {, return]
[fn, ), ;, if, (, !, expectedBlock, ., hasOneChild, (, ), ), {, return, null, ;, }, Node, expectedReturn, =]
[fn, ), ;, if, (, !, expectedBlock, ., hasOneChild, (, ), ), {, return, null, ;, }, Node, expectedReturn, =]
[hasOneChild, (, ), ), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if, (]
[(, ), ), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if, (, !]
[(, ), ), {, return, null, ;, }, Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if, (, !]
[Node, expectedReturn, =, expectedBlock, ., getFirstChild, (, ), ;, if, (, !, expectedReturn, ., isReturn, (, ), ), {, return]
[getFirstChild, (, ), ;, if, (, !, expectedReturn, ., isReturn, (, ), ), {, return, null, ;, }, if, (]
[(, ), ;, if, (, !, expectedReturn, ., isReturn, (, ), ), {, return, null, ;, }, if, (, !]
[(, ), ;, if, (, !, expectedReturn, ., isReturn, (, ), ), {, return, null, ;, }, if, (, !]
[isReturn, (, ), ), {, return, null, ;, }, if, (, !, expectedReturn, ., hasOneChild, (, ), ), {, return]
[{, return, null, ;, }, if, (, !, expectedReturn, ., hasOneChild, (, ), ), {, return, null, ;, }, return]
[{, return, null, ;, }, if, (, !, expectedReturn, ., hasOneChild, (, ), ), {, return, null, ;, }, return]
[return, expectedReturn, ., getLastChild, (, ), ;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =]
[., getLastChild, (, ), ;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (]
[;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return]
[;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return]
[;, }, private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return]
[private, static, boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return, expectedBlock, ==]
[boolean, isEmptyMethod, (, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return, expectedBlock, ==, null, ?]
[(, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return, expectedBlock, ==, null, ?, false, :]
[(, Node, fn, ), {, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return, expectedBlock, ==, null, ?, false, :]
[{, Node, expectedBlock, =, getMethodBlock, (, fn, ), ;, return, expectedBlock, ==, null, ?, false, :, NodeUtil, ., isEmptyBlock, (]
[:, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (]
[:, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (]
[:, NodeUtil, ., isEmptyBlock, (, expectedBlock, ), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (]
[), ;, }, private, static, Node, getMethodBlock, (, Node, fn, ), {, if, (, fn, ., getChildCount, (, ), !=]
[static, Node, getMethodBlock, (, Node, fn, ), {, if, (, fn, ., getChildCount, (, ), !=, 3, ), {, return]
[), {, if, (, fn, ., getChildCount, (, ), !=, 3, ), {, return, null, ;, }, Node, expectedBlock, =]
[), {, if, (, fn, ., getChildCount, (, ), !=, 3, ), {, return, null, ;, }, Node, expectedBlock, =]
[(, ), !=, 3, ), {, return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return]
[(, ), !=, 3, ), {, return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return]
[(, ), !=, 3, ), {, return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return]
[return, null, ;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return, expectedBlock, ., isBlock, (, ), ?]
[;, }, Node, expectedBlock, =, fn, ., getLastChild, (, ), ;, return, expectedBlock, ., isBlock, (, ), ?, expectedBlock, :]
[null, ;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node, >, definitions, ), {, List, <, Node, >, list, =]
[null, ;, }, private, boolean, allDefinitionsEquivalent, (, Collection, <, Node, >, definitions, ), {, List, <, Node, >, list, =]
[(, Collection, <, Node, >, definitions, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (, ), ;]
[(, Collection, <, Node, >, definitions, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (, ), ;]
[>, definitions, ), {, List, <, Node, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., addAll, (]
[Node, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., addAll, (, definitions, ), ;, Node, node0, =]
[Node, >, list, =, Lists, ., newArrayList, (, ), ;, list, ., addAll, (, definitions, ), ;, Node, node0, =]
[Lists, ., newArrayList, (, ), ;, list, ., addAll, (, definitions, ), ;, Node, node0, =, list, ., get, (]
[addAll, (, definitions, ), ;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i, =]
[definitions, ), ;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;]
[definitions, ), ;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;]
[;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <]
[;, Node, node0, =, list, ., get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <]
[get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, list, ., size, (, ), ;]
[get, (, 0, ), ;, for, (, int, i, =, 1, ;, i, <, list, ., size, (, ), ;]
[(, int, i, =, 1, ;, i, <, list, ., size, (, ), ;, i, ++, ), {, if, (]
[int, i, =, 1, ;, i, <, list, ., size, (, ), ;, i, ++, ), {, if, (, !]
[int, i, =, 1, ;, i, <, list, ., size, (, ), ;, i, ++, ), {, if, (, !]
[;, i, <, list, ., size, (, ), ;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (]
[;, i, <, list, ., size, (, ), ;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (]
[., size, (, ), ;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (]
[), ;, i, ++, ), {, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (, i, ), ,]
[{, if, (, !, compiler, ., areNodesEqualForInlining, (, list, ., get, (, i, ), ,, node0, ), ), {, return]
[., areNodesEqualForInlining, (, list, ., get, (, i, ), ,, node0, ), ), {, return, false, ;, }, }, return]
[true, ;, }, private, void, inlinePropertyReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, getProp, =]
[true, ;, }, private, void, inlinePropertyReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, getProp, =]
[(, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, getProp, =, returnedValue, ., cloneTree, (, ), ;]
[parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, getProp, =, returnedValue, ., cloneTree, (, ), ;, replaceThis, (]
[Node, call, ,, Node, returnedValue, ), {, Node, getProp, =, returnedValue, ., cloneTree, (, ), ;, replaceThis, (, getProp, ,]
[Node, call, ,, Node, returnedValue, ), {, Node, getProp, =, returnedValue, ., cloneTree, (, ), ;, replaceThis, (, getProp, ,]
[Node, call, ,, Node, returnedValue, ), {, Node, getProp, =, returnedValue, ., cloneTree, (, ), ;, replaceThis, (, getProp, ,]
[., cloneTree, (, ), ;, replaceThis, (, getProp, ,, call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;]
[., cloneTree, (, ), ;, replaceThis, (, getProp, ,, call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;]
[;, replaceThis, (, getProp, ,, call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (]
[(, getProp, ,, call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, call, ,]
[call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, call, ,, getProp, ), ;]
[call, ., getFirstChild, (, ), ., removeFirstChild, (, ), ), ;, parent, ., replaceChild, (, call, ,, getProp, ), ;]
[), ;, }, private, void, inlineConstReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, retValue, =]
[), ;, }, private, void, inlineConstReturn, (, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, retValue, =]
[(, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, retValue, =, returnedValue, ., cloneTree, (, ), ;]
[(, Node, parent, ,, Node, call, ,, Node, returnedValue, ), {, Node, retValue, =, returnedValue, ., cloneTree, (, ), ;]
[Node, call, ,, Node, returnedValue, ), {, Node, retValue, =, returnedValue, ., cloneTree, (, ), ;, parent, ., replaceChild, (]
[,, Node, returnedValue, ), {, Node, retValue, =, returnedValue, ., cloneTree, (, ), ;, parent, ., replaceChild, (, call, ,]
[), {, Node, retValue, =, returnedValue, ., cloneTree, (, ), ;, parent, ., replaceChild, (, call, ,, retValue, ), ;]
[), {, Node, retValue, =, returnedValue, ., cloneTree, (, ), ;, parent, ., replaceChild, (, call, ,, retValue, ), ;]
[(, ), ;, }, private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {, if, (]
[(, ), ;, }, private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {, if, (]
[private, void, inlineEmptyMethod, (, NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {, if, (, NodeUtil, ., isExprCall, (]
[NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {]
[NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {]
[NodeTraversal, t, ,, Node, parent, ,, Node, call, ), {, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {]
[), {, if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, parent, ., getParent, (, ), ., replaceChild, (]
[if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,]
[if, (, NodeUtil, ., isExprCall, (, parent, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,]
[(, ), ., replaceChild, (, parent, ,, IR, ., empty, (, ), ), ;, }, else, {, Node, srcLocation, =]
[., replaceChild, (, parent, ,, IR, ., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;]
[., replaceChild, (, parent, ,, IR, ., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;]
[,, IR, ., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (]
[., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,]
[., empty, (, ), ), ;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,]
[), ;, }, else, {, Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (]
[Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }]
[Node, srcLocation, =, call, ;, parent, ., replaceChild, (, call, ,, NodeUtil, ., newUndefinedNode, (, srcLocation, ), ), ;, }]
[compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for, (, Node, currentChild, =]
[compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for, (, Node, currentChild, =]
[compiler, ., reportCodeChange, (, ), ;, }, private, boolean, argsMayHaveSideEffects, (, Node, call, ), {, for, (, Node, currentChild, =]
[(, Node, call, ), {, for, (, Node, currentChild, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;]
[(, Node, call, ), {, for, (, Node, currentChild, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;]
[call, ), {, for, (, Node, currentChild, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, currentChild, !=]
[{, for, (, Node, currentChild, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, currentChild, !=, null, ;]
[(, Node, currentChild, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, currentChild, !=, null, ;, currentChild, =]
[(, Node, currentChild, =, call, ., getFirstChild, (, ), ., getNext, (, ), ;, currentChild, !=, null, ;, currentChild, =]
[., getNext, (, ), ;, currentChild, !=, null, ;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (]
[., getNext, (, ), ;, currentChild, !=, null, ;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (]
[;, currentChild, !=, null, ;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (]
[!=, null, ;, currentChild, =, currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,]
[currentChild, ., getNext, (, ), ), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,, compiler, ), ), {, return]
[), {, if, (, NodeUtil, ., mayHaveSideEffects, (, currentChild, ,, compiler, ), ), {, return, true, ;, }, }, return]
[compiler, ), ), {, return, true, ;, }, }, return, false, ;, }, static, final, MethodCompilerPass, ., SignatureStore, DUMMY_SIGNATURE_STORE, =]
[}, @, Override, public, void, reset, (, ), {, }, }, ;, @, Override, SignatureStore, getSignatureStore, (, ), {, return]
