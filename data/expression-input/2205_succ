[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[+, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[+, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,, y, ), ;, }, return, (, int, )]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,, y, )]
[<, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,, y, )]
[., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,, y, ), ;, }, return, (, int, )]
[>, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,, y, ), ;, }]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,, y, ), ;, }, return, (, int, )]
[., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, x, ,, y, ), ;, }, return, (]
[;, }, return, (, int, ), s, ;, }, public, static, long, addAndCheck, (, long, a, ,, long, b, )]
[,, x, ,, y, ), ;, }, return, (, int, ), s, ;, }, public, static, long, addAndCheck, (, long]
[., OVERFLOW_IN_ADDITION, ,, x, ,, y, ), ;, }, return, (, int, ), s, ;, }, public, static, long, addAndCheck]
[,, y, ), ;, }, return, (, int, ), s, ;, }, public, static, long, addAndCheck, (, long, a, ,]
[), ;, }, return, (, int, ), s, ;, }, public, static, long, addAndCheck, (, long, a, ,, long, b]
[;, }, public, static, long, addAndCheck, (, long, a, ,, long, b, ), throws, MathArithmeticException, {, return, ArithmeticUtils, ., addAndCheck]
[;, }, public, static, long, addAndCheck, (, long, a, ,, long, b, ), throws, MathArithmeticException, {, return, ArithmeticUtils, ., addAndCheck]
[;, }, public, static, long, binomialCoefficient, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,]
[., addAndCheck, (, a, ,, b, ,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }, public, static, long, binomialCoefficient, (, final, int]
[,, b, ,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }, public, static, long, binomialCoefficient, (, final, int, n, ,, final, int]
[,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }, public, static, long, binomialCoefficient, (, final, int, n, ,, final, int, k, )]
[), ;, }, public, static, long, binomialCoefficient, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException]
[., OVERFLOW_IN_ADDITION, ), ;, }, public, static, long, binomialCoefficient, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException]
[;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,]
[., binomialCoefficient, (, n, ,, k, ), ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int]
[,, k, ), ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException]
[), ;, }, public, static, double, binomialCoefficientDouble, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException]
[;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,]
[., binomialCoefficientDouble, (, n, ,, k, ), ;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int]
[,, k, ), ;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException]
[), ;, }, public, static, double, binomialCoefficientLog, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException]
[;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, return, CombinatoricsUtils, ., factorial]
[., binomialCoefficientLog, (, n, ,, k, ), ;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException]
[,, k, ), ;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, return]
[), ;, }, public, static, long, factorial, (, final, int, n, ), throws, NotPositiveException, ,, MathArithmeticException, {, return, CombinatoricsUtils, .]
[;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, return, CombinatoricsUtils, ., factorialDouble, (, n]
[., factorial, (, n, ), ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, return]
[), ;, }, public, static, double, factorialDouble, (, final, int, n, ), throws, NotPositiveException, {, return, CombinatoricsUtils, ., factorialDouble, (]
[;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, return, CombinatoricsUtils, ., factorialLog, (, n]
[., factorialDouble, (, n, ), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, return]
[), ;, }, public, static, double, factorialLog, (, final, int, n, ), throws, NotPositiveException, {, return, CombinatoricsUtils, ., factorialLog, (]
[;, }, public, static, int, gcd, (, int, p, ,, int, q, ), throws, MathArithmeticException, {, int, a, =, p]
[., factorialLog, (, n, ), ;, }, public, static, int, gcd, (, int, p, ,, int, q, ), throws, MathArithmeticException]
[), ;, }, public, static, int, gcd, (, int, p, ,, int, q, ), throws, MathArithmeticException, {, int, a, =]
[;, int, b, =, q, ;, if, (, a, ==, 0, ||, b, ==, 0, ), {, if, (, a]
[;, if, (, a, ==, 0, ||, b, ==, 0, ), {, if, (, a, ==, Integer, ., MIN_VALUE, ||]
[), {, if, (, a, ==, Integer, ., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException]
[||, b, ==, 0, ), {, if, (, a, ==, Integer, ., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, )]
[==, 0, ||, b, ==, 0, ), {, if, (, a, ==, Integer, ., MIN_VALUE, ||, b, ==, Integer, .]
[||, b, ==, 0, ), {, if, (, a, ==, Integer, ., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, )]
[), {, if, (, a, ==, Integer, ., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException]
[==, 0, ), {, if, (, a, ==, Integer, ., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, ), {, throw]
[), {, if, (, a, ==, Integer, ., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, FastMath, ., abs]
[||, b, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, )]
[==, Integer, ., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,]
[||, b, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, )]
[., MIN_VALUE, ||, b, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, FastMath, ., abs]
[==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, FastMath, ., abs]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, FastMath]
[;, }, return, FastMath, ., abs, (, a, +, b, ), ;, }, long, al, =, a, ;, long, bl]
[,, p, ,, q, ), ;, }, return, FastMath, ., abs, (, a, +, b, ), ;, }, long, al]
[., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, FastMath, ., abs, (, a, +, b, ), ;, }]
[,, q, ), ;, }, return, FastMath, ., abs, (, a, +, b, ), ;, }, long, al, =, a]
[), ;, }, return, FastMath, ., abs, (, a, +, b, ), ;, }, long, al, =, a, ;, long]
[;, }, long, al, =, a, ;, long, bl, =, b, ;, boolean, useLong, =, false, ;, if, (, a]
[., abs, (, a, +, b, ), ;, }, long, al, =, a, ;, long, bl, =, b, ;, boolean]
[), ;, }, long, al, =, a, ;, long, bl, =, b, ;, boolean, useLong, =, false, ;, if, (]
[+, b, ), ;, }, long, al, =, a, ;, long, bl, =, b, ;, boolean, useLong, =, false, ;]
[), ;, }, long, al, =, a, ;, long, bl, =, b, ;, boolean, useLong, =, false, ;, if, (]
[;, long, bl, =, b, ;, boolean, useLong, =, false, ;, if, (, a, <, 0, ), {, if, (]
[;, boolean, useLong, =, false, ;, if, (, a, <, 0, ), {, if, (, Integer, ., MIN_VALUE, ==, a]
[;, if, (, a, <, 0, ), {, if, (, Integer, ., MIN_VALUE, ==, a, ), {, useLong, =, true]
[), {, if, (, Integer, ., MIN_VALUE, ==, a, ), {, useLong, =, true, ;, }, else, {, a, =]
[<, 0, ), {, if, (, Integer, ., MIN_VALUE, ==, a, ), {, useLong, =, true, ;, }, else, {]
[), {, if, (, Integer, ., MIN_VALUE, ==, a, ), {, useLong, =, true, ;, }, else, {, a, =]
[), {, useLong, =, true, ;, }, else, {, a, =, -, a, ;, }, al, =, -, al, ;]
[==, a, ), {, useLong, =, true, ;, }, else, {, a, =, -, a, ;, }, al, =, -]
[., MIN_VALUE, ==, a, ), {, useLong, =, true, ;, }, else, {, a, =, -, a, ;, }, al]
[), {, useLong, =, true, ;, }, else, {, a, =, -, a, ;, }, al, =, -, al, ;]
[=, true, ;, }, else, {, a, =, -, a, ;, }, al, =, -, al, ;, }, if, (]
[;, }, else, {, a, =, -, a, ;, }, al, =, -, al, ;, }, if, (, b, <]
[=, -, a, ;, }, al, =, -, al, ;, }, if, (, b, <, 0, ), {, if, (]
[;, }, al, =, -, al, ;, }, if, (, b, <, 0, ), {, if, (, Integer, ., MIN_VALUE]
[;, }, al, =, -, al, ;, }, if, (, b, <, 0, ), {, if, (, Integer, ., MIN_VALUE]
[=, -, al, ;, }, if, (, b, <, 0, ), {, if, (, Integer, ., MIN_VALUE, ==, b, )]
[;, }, if, (, b, <, 0, ), {, if, (, Integer, ., MIN_VALUE, ==, b, ), {, useLong, =]
[;, }, if, (, b, <, 0, ), {, if, (, Integer, ., MIN_VALUE, ==, b, ), {, useLong, =]
[), {, if, (, Integer, ., MIN_VALUE, ==, b, ), {, useLong, =, true, ;, }, else, {, b, =]
[<, 0, ), {, if, (, Integer, ., MIN_VALUE, ==, b, ), {, useLong, =, true, ;, }, else, {]
[), {, if, (, Integer, ., MIN_VALUE, ==, b, ), {, useLong, =, true, ;, }, else, {, b, =]
[), {, useLong, =, true, ;, }, else, {, b, =, -, b, ;, }, bl, =, -, bl, ;]
[==, b, ), {, useLong, =, true, ;, }, else, {, b, =, -, b, ;, }, bl, =, -]
[., MIN_VALUE, ==, b, ), {, useLong, =, true, ;, }, else, {, b, =, -, b, ;, }, bl]
[), {, useLong, =, true, ;, }, else, {, b, =, -, b, ;, }, bl, =, -, bl, ;]
[=, true, ;, }, else, {, b, =, -, b, ;, }, bl, =, -, bl, ;, }, if, (]
[;, }, else, {, b, =, -, b, ;, }, bl, =, -, bl, ;, }, if, (, useLong, )]
[=, -, b, ;, }, bl, =, -, bl, ;, }, if, (, useLong, ), {, if, (, al, ==]
[;, }, bl, =, -, bl, ;, }, if, (, useLong, ), {, if, (, al, ==, bl, ), {]
[;, }, bl, =, -, bl, ;, }, if, (, useLong, ), {, if, (, al, ==, bl, ), {]
[=, -, bl, ;, }, if, (, useLong, ), {, if, (, al, ==, bl, ), {, throw, new, MathArithmeticException]
[;, }, if, (, useLong, ), {, if, (, al, ==, bl, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[;, }, if, (, useLong, ), {, if, (, al, ==, bl, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[), {, if, (, al, ==, bl, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, long, blbu, =, bl]
[==, bl, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, long, blbu]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, long, blbu, =, bl]
[;, }, long, blbu, =, bl, ;, bl, =, al, ;, al, =, blbu, %, al, ;, if, (, al]
[,, p, ,, q, ), ;, }, long, blbu, =, bl, ;, bl, =, al, ;, al, =, blbu, %]
[., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, long, blbu, =, bl, ;, bl, =, al, ;, al, =]
[,, q, ), ;, }, long, blbu, =, bl, ;, bl, =, al, ;, al, =, blbu, %, al, ;]
[), ;, }, long, blbu, =, bl, ;, bl, =, al, ;, al, =, blbu, %, al, ;, if, (]
[;, bl, =, al, ;, al, =, blbu, %, al, ;, if, (, al, ==, 0, ), {, if, (]
[=, al, ;, al, =, blbu, %, al, ;, if, (, al, ==, 0, ), {, if, (, bl, >]
[;, al, =, blbu, %, al, ;, if, (, al, ==, 0, ), {, if, (, bl, >, Integer, .]
[=, blbu, %, al, ;, if, (, al, ==, 0, ), {, if, (, bl, >, Integer, ., MAX_VALUE, )]
[;, if, (, al, ==, 0, ), {, if, (, bl, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException]
[%, al, ;, if, (, al, ==, 0, ), {, if, (, bl, >, Integer, ., MAX_VALUE, ), {, throw]
[;, if, (, al, ==, 0, ), {, if, (, bl, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException]
[), {, if, (, bl, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p]
[==, 0, ), {, if, (, bl, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS]
[), {, if, (, bl, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, (, int, )]
[>, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, (, int, )]
[., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, (]
[;, }, return, (, int, ), bl, ;, }, blbu, =, bl, ;, b, =, (, int, ), al, ;]
[,, p, ,, q, ), ;, }, return, (, int, ), bl, ;, }, blbu, =, bl, ;, b, =]
[., GCD_OVERFLOW_32_BITS, ,, p, ,, q, ), ;, }, return, (, int, ), bl, ;, }, blbu, =, bl, ;]
[,, q, ), ;, }, return, (, int, ), bl, ;, }, blbu, =, bl, ;, b, =, (, int]
[), ;, }, return, (, int, ), bl, ;, }, blbu, =, bl, ;, b, =, (, int, ), al]
[;, }, blbu, =, bl, ;, b, =, (, int, ), al, ;, a, =, (, int, ), (, blbu]
[;, }, blbu, =, bl, ;, b, =, (, int, ), al, ;, a, =, (, int, ), (, blbu]
[=, bl, ;, b, =, (, int, ), al, ;, a, =, (, int, ), (, blbu, %, al, )]
[;, b, =, (, int, ), al, ;, a, =, (, int, ), (, blbu, %, al, ), ;, }]
[=, (, int, ), al, ;, a, =, (, int, ), (, blbu, %, al, ), ;, }, return, gcdPositive]
[;, a, =, (, int, ), (, blbu, %, al, ), ;, }, return, gcdPositive, (, a, ,, b, )]
[;, a, =, (, int, ), (, blbu, %, al, ), ;, }, return, gcdPositive, (, a, ,, b, )]
[=, (, int, ), (, blbu, %, al, ), ;, }, return, gcdPositive, (, a, ,, b, ), ;, }]
[;, }, return, gcdPositive, (, a, ,, b, ), ;, }, private, static, int, gcdPositive, (, int, a, ,, int]
[;, }, return, gcdPositive, (, a, ,, b, ), ;, }, private, static, int, gcdPositive, (, int, a, ,, int]
[), ;, }, return, gcdPositive, (, a, ,, b, ), ;, }, private, static, int, gcdPositive, (, int, a, ,]
[%, al, ), ;, }, return, gcdPositive, (, a, ,, b, ), ;, }, private, static, int, gcdPositive, (, int]
[), ;, }, return, gcdPositive, (, a, ,, b, ), ;, }, private, static, int, gcdPositive, (, int, a, ,]
[;, }, private, static, int, gcdPositive, (, int, a, ,, int, b, ), {, if, (, a, ==, 0, )]
[,, b, ), ;, }, private, static, int, gcdPositive, (, int, a, ,, int, b, ), {, if, (, a]
[), ;, }, private, static, int, gcdPositive, (, int, a, ,, int, b, ), {, if, (, a, ==, 0]
[), {, return, b, ;, }, else, if, (, b, ==, 0, ), {, return, a, ;, }, final, int]
[==, 0, ), {, return, b, ;, }, else, if, (, b, ==, 0, ), {, return, a, ;, }]
[), {, return, b, ;, }, else, if, (, b, ==, 0, ), {, return, a, ;, }, final, int]
[;, }, else, if, (, b, ==, 0, ), {, return, a, ;, }, final, int, aTwos, =, Integer, .]
[), {, return, a, ;, }, final, int, aTwos, =, Integer, ., numberOfTrailingZeros, (, a, ), ;, a, >>=, aTwos]
[==, 0, ), {, return, a, ;, }, final, int, aTwos, =, Integer, ., numberOfTrailingZeros, (, a, ), ;, a]
[), {, return, a, ;, }, final, int, aTwos, =, Integer, ., numberOfTrailingZeros, (, a, ), ;, a, >>=, aTwos]
[;, }, final, int, aTwos, =, Integer, ., numberOfTrailingZeros, (, a, ), ;, a, >>=, aTwos, ;, final, int, bTwos]
[;, a, >>=, aTwos, ;, final, int, bTwos, =, Integer, ., numberOfTrailingZeros, (, b, ), ;, b, >>=, bTwos, ;]
[., numberOfTrailingZeros, (, a, ), ;, a, >>=, aTwos, ;, final, int, bTwos, =, Integer, ., numberOfTrailingZeros, (, b, )]
[), ;, a, >>=, aTwos, ;, final, int, bTwos, =, Integer, ., numberOfTrailingZeros, (, b, ), ;, b, >>=, bTwos]
[>>=, aTwos, ;, final, int, bTwos, =, Integer, ., numberOfTrailingZeros, (, b, ), ;, b, >>=, bTwos, ;, final, int]
[;, final, int, bTwos, =, Integer, ., numberOfTrailingZeros, (, b, ), ;, b, >>=, bTwos, ;, final, int, shift, =]
[;, b, >>=, bTwos, ;, final, int, shift, =, Math, ., min, (, aTwos, ,, bTwos, ), ;, while, (]
[., numberOfTrailingZeros, (, b, ), ;, b, >>=, bTwos, ;, final, int, shift, =, Math, ., min, (, aTwos, ,]
[), ;, b, >>=, bTwos, ;, final, int, shift, =, Math, ., min, (, aTwos, ,, bTwos, ), ;, while]
[>>=, bTwos, ;, final, int, shift, =, Math, ., min, (, aTwos, ,, bTwos, ), ;, while, (, a, !=]
[;, final, int, shift, =, Math, ., min, (, aTwos, ,, bTwos, ), ;, while, (, a, !=, b, )]
[;, while, (, a, !=, b, ), {, final, int, delta, =, a, -, b, ;, b, =, Math, .]
[., min, (, aTwos, ,, bTwos, ), ;, while, (, a, !=, b, ), {, final, int, delta, =, a]
[,, bTwos, ), ;, while, (, a, !=, b, ), {, final, int, delta, =, a, -, b, ;, b]
[), ;, while, (, a, !=, b, ), {, final, int, delta, =, a, -, b, ;, b, =, Math]
[), {, final, int, delta, =, a, -, b, ;, b, =, Math, ., min, (, a, ,, b, )]
[!=, b, ), {, final, int, delta, =, a, -, b, ;, b, =, Math, ., min, (, a, ,]
[), {, final, int, delta, =, a, -, b, ;, b, =, Math, ., min, (, a, ,, b, )]
[;, b, =, Math, ., min, (, a, ,, b, ), ;, a, =, Math, ., abs, (, delta, )]
[-, b, ;, b, =, Math, ., min, (, a, ,, b, ), ;, a, =, Math, ., abs, (]
[;, b, =, Math, ., min, (, a, ,, b, ), ;, a, =, Math, ., abs, (, delta, )]
[=, Math, ., min, (, a, ,, b, ), ;, a, =, Math, ., abs, (, delta, ), ;, a]
[;, a, =, Math, ., abs, (, delta, ), ;, a, >>=, Integer, ., numberOfTrailingZeros, (, a, ), ;, }]
[., min, (, a, ,, b, ), ;, a, =, Math, ., abs, (, delta, ), ;, a, >>=, Integer]
[,, b, ), ;, a, =, Math, ., abs, (, delta, ), ;, a, >>=, Integer, ., numberOfTrailingZeros, (, a]
[), ;, a, =, Math, ., abs, (, delta, ), ;, a, >>=, Integer, ., numberOfTrailingZeros, (, a, ), ;]
[=, Math, ., abs, (, delta, ), ;, a, >>=, Integer, ., numberOfTrailingZeros, (, a, ), ;, }, return, a]
[;, a, >>=, Integer, ., numberOfTrailingZeros, (, a, ), ;, }, return, a, <<, shift, ;, }, public, static, long]
[., abs, (, delta, ), ;, a, >>=, Integer, ., numberOfTrailingZeros, (, a, ), ;, }, return, a, <<, shift]
[), ;, a, >>=, Integer, ., numberOfTrailingZeros, (, a, ), ;, }, return, a, <<, shift, ;, }, public, static]
[>>=, Integer, ., numberOfTrailingZeros, (, a, ), ;, }, return, a, <<, shift, ;, }, public, static, long, gcd, (]
[;, }, return, a, <<, shift, ;, }, public, static, long, gcd, (, final, long, p, ,, final, long, q]
[., numberOfTrailingZeros, (, a, ), ;, }, return, a, <<, shift, ;, }, public, static, long, gcd, (, final, long]
[), ;, }, return, a, <<, shift, ;, }, public, static, long, gcd, (, final, long, p, ,, final, long]
[;, }, public, static, long, gcd, (, final, long, p, ,, final, long, q, ), throws, MathArithmeticException, {, long, u]
[<<, shift, ;, }, public, static, long, gcd, (, final, long, p, ,, final, long, q, ), throws, MathArithmeticException, {]
[;, }, public, static, long, gcd, (, final, long, p, ,, final, long, q, ), throws, MathArithmeticException, {, long, u]
[;, long, v, =, q, ;, if, (, (, u, ==, 0, ), ||, (, v, ==, 0, ), )]
[;, if, (, (, u, ==, 0, ), ||, (, v, ==, 0, ), ), {, if, (, (, u]
[), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (, v, ==, Long, ., MIN_VALUE, ), )]
[||, (, v, ==, 0, ), ), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (, v]
[), ||, (, v, ==, 0, ), ), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (]
[==, 0, ), ||, (, v, ==, 0, ), ), {, if, (, (, u, ==, Long, ., MIN_VALUE, )]
[), ||, (, v, ==, 0, ), ), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (]
[), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (, v, ==, Long, ., MIN_VALUE, ), )]
[), ), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (, v, ==, Long, ., MIN_VALUE, )]
[==, 0, ), ), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (, v, ==, Long, .]
[), ), {, if, (, (, u, ==, Long, ., MIN_VALUE, ), ||, (, v, ==, Long, ., MIN_VALUE, )]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, return, FastMath, ., abs]
[||, (, v, ==, Long, ., MIN_VALUE, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,]
[), ||, (, v, ==, Long, ., MIN_VALUE, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p]
[==, Long, ., MIN_VALUE, ), ||, (, v, ==, Long, ., MIN_VALUE, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[), ||, (, v, ==, Long, ., MIN_VALUE, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p]
[., MIN_VALUE, ), ||, (, v, ==, Long, ., MIN_VALUE, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, return, FastMath, ., abs]
[), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, return, FastMath, .]
[==, Long, ., MIN_VALUE, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;]
[), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, return, FastMath, .]
[., MIN_VALUE, ), ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, return]
[;, }, return, FastMath, ., abs, (, u, ), +, FastMath, ., abs, (, v, ), ;, }, if, (]
[,, p, ,, q, ), ;, }, return, FastMath, ., abs, (, u, ), +, FastMath, ., abs, (, v]
[., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, return, FastMath, ., abs, (, u, ), +, FastMath, ., abs]
[,, q, ), ;, }, return, FastMath, ., abs, (, u, ), +, FastMath, ., abs, (, v, ), ;]
[), ;, }, return, FastMath, ., abs, (, u, ), +, FastMath, ., abs, (, v, ), ;, }, if]
[;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0]
[+, FastMath, ., abs, (, v, ), ;, }, if, (, u, >, 0, ), {, u, =, -, u]
[., abs, (, u, ), +, FastMath, ., abs, (, v, ), ;, }, if, (, u, >, 0, )]
[), +, FastMath, ., abs, (, v, ), ;, }, if, (, u, >, 0, ), {, u, =, -]
[;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0]
[., abs, (, v, ), ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }]
[), ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (, v, >]
[), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -, v, ;]
[>, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -]
[), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -, v, ;]
[=, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k]
[;, }, if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;]
[;, }, if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;]
[), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, )]
[>, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &]
[), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, )]
[=, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&]
[;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &]
[;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &]
[;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k]
[), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 63, )]
[&&, k, <, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[&&, (, v, &, 1, ), ==, 0, &&, k, <, 63, ), {, u, /=, 2, ;, v, /=]
[==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 63, ), {, u, /=, 2, ;]
[), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 63, ), {, u, /=, 2]
[&, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 63, ), {, u]
[), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 63, ), {, u, /=, 2]
[&&, (, v, &, 1, ), ==, 0, &&, k, <, 63, ), {, u, /=, 2, ;, v, /=]
[&&, k, <, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[==, 0, &&, k, <, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }]
[), ==, 0, &&, k, <, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;]
[&, 1, ), ==, 0, &&, k, <, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k]
[), ==, 0, &&, k, <, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;]
[&&, k, <, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 63, )]
[<, 63, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==]
[), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 63, )]
[/=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 63, ), {, throw, new]
[;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 63, ), {, throw, new, MathArithmeticException, (]
[/=, 2, ;, k, ++, ;, }, if, (, k, ==, 63, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[;, k, ++, ;, }, if, (, k, ==, 63, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,]
[;, }, if, (, k, ==, 63, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q]
[++, ;, }, if, (, k, ==, 63, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, long, t, =, (]
[==, 63, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, long, t]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, long, t, =, (]
[;, }, long, t, =, (, (, u, &, 1, ), ==, 1, ), ?, v, :, -, (, u]
[,, p, ,, q, ), ;, }, long, t, =, (, (, u, &, 1, ), ==, 1, ), ?]
[., GCD_OVERFLOW_64_BITS, ,, p, ,, q, ), ;, }, long, t, =, (, (, u, &, 1, ), ==, 1]
[,, q, ), ;, }, long, t, =, (, (, u, &, 1, ), ==, 1, ), ?, v, :]
[), ;, }, long, t, =, (, (, u, &, 1, ), ==, 1, ), ?, v, :, -, (]
[;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if]
[?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==]
[), ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, )]
[==, 1, ), ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &]
[), ==, 1, ), ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t]
[&, 1, ), ==, 1, ), ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (]
[), ==, 1, ), ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t]
[), ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, )]
[:, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==, 0, )]
[;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if]
[;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if]
[), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }]
[/, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2]
[), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }]
[), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }]
[==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t]
[), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -]
[&, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u]
[), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -]
[), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }]
[/=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }, else, {, v]
[;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t]
[), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -]
[>, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (]
[), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -]
[=, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /]
[;, }, else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }]
[;, }, else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }]
[=, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0]
[;, }, t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;]
[=, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u]
[;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1L, <<, k, ), ;, }]
[/, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1L, <<, k, )]
[), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1L, <<, k]
[-, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1L]
[), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1L, <<, k]
[;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1L, <<, k, ), ;, }]
[), ;, return, -, u, *, (, 1L, <<, k, ), ;, }, public, static, int, lcm, (, int, a]
[!=, 0, ), ;, return, -, u, *, (, 1L, <<, k, ), ;, }, public, static, int, lcm, (]
[), ;, return, -, u, *, (, 1L, <<, k, ), ;, }, public, static, int, lcm, (, int, a]
[;, }, public, static, int, lcm, (, int, a, ,, int, b, ), throws, MathArithmeticException, {, if, (, a, ==]
[*, (, 1L, <<, k, ), ;, }, public, static, int, lcm, (, int, a, ,, int, b, ), throws]
[*, (, 1L, <<, k, ), ;, }, public, static, int, lcm, (, int, a, ,, int, b, ), throws]
[;, }, public, static, int, lcm, (, int, a, ,, int, b, ), throws, MathArithmeticException, {, if, (, a, ==]
[), ;, }, public, static, int, lcm, (, int, a, ,, int, b, ), throws, MathArithmeticException, {, if, (, a]
[<<, k, ), ;, }, public, static, int, lcm, (, int, a, ,, int, b, ), throws, MathArithmeticException, {, if]
[), ;, }, public, static, int, lcm, (, int, a, ,, int, b, ), throws, MathArithmeticException, {, if, (, a]
[), {, return, 0, ;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd]
[||, b, ==, 0, ), {, return, 0, ;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck]
[==, 0, ||, b, ==, 0, ), {, return, 0, ;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils]
[||, b, ==, 0, ), {, return, 0, ;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck]
[), {, return, 0, ;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd]
[==, 0, ), {, return, 0, ;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a]
[), {, return, 0, ;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd]
[;, }, int, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd, (, a, ,, b]
[;, if, (, lcm, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_32_BITS, ,, a, ,]
[., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd, (, a, ,, b, ), ,, b, ), ), ;]
[), ;, if, (, lcm, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_32_BITS, ,, a]
[., mulAndCheck, (, a, /, gcd, (, a, ,, b, ), ,, b, ), ), ;, if, (, lcm, ==]
[,, b, ), ), ;, if, (, lcm, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[/, gcd, (, a, ,, b, ), ,, b, ), ), ;, if, (, lcm, ==, Integer, ., MIN_VALUE, )]
[,, b, ), ), ;, if, (, lcm, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[,, b, ), ,, b, ), ), ;, if, (, lcm, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException]
[), ,, b, ), ), ;, if, (, lcm, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[), ), ;, if, (, lcm, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_32_BITS, ,]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_32_BITS, ,, a, ,, b, ), ;, }, return, lcm, ;, }]
[==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_32_BITS, ,, a, ,, b, ), ;, }]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_32_BITS, ,, a, ,, b, ), ;, }, return, lcm, ;, }]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_32_BITS, ,, a, ,, b, ), ;, }, return, lcm]
[;, }, return, lcm, ;, }, public, static, long, lcm, (, long, a, ,, long, b, ), throws, MathArithmeticException, {]
[,, a, ,, b, ), ;, }, return, lcm, ;, }, public, static, long, lcm, (, long, a, ,, long]
[., LCM_OVERFLOW_32_BITS, ,, a, ,, b, ), ;, }, return, lcm, ;, }, public, static, long, lcm, (, long, a]
[,, b, ), ;, }, return, lcm, ;, }, public, static, long, lcm, (, long, a, ,, long, b, )]
[), ;, }, return, lcm, ;, }, public, static, long, lcm, (, long, a, ,, long, b, ), throws, MathArithmeticException]
[;, }, public, static, long, lcm, (, long, a, ,, long, b, ), throws, MathArithmeticException, {, if, (, a, ==]
[), {, return, 0, ;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd]
[||, b, ==, 0, ), {, return, 0, ;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck]
[==, 0, ||, b, ==, 0, ), {, return, 0, ;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils]
[||, b, ==, 0, ), {, return, 0, ;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck]
[), {, return, 0, ;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd]
[==, 0, ), {, return, 0, ;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a]
[), {, return, 0, ;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd]
[;, }, long, lcm, =, FastMath, ., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd, (, a, ,, b]
[;, if, (, lcm, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_64_BITS, ,, a, ,]
[., abs, (, ArithmeticUtils, ., mulAndCheck, (, a, /, gcd, (, a, ,, b, ), ,, b, ), ), ;]
[), ;, if, (, lcm, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_64_BITS, ,, a]
[., mulAndCheck, (, a, /, gcd, (, a, ,, b, ), ,, b, ), ), ;, if, (, lcm, ==]
[,, b, ), ), ;, if, (, lcm, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[/, gcd, (, a, ,, b, ), ,, b, ), ), ;, if, (, lcm, ==, Long, ., MIN_VALUE, )]
[,, b, ), ), ;, if, (, lcm, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[,, b, ), ,, b, ), ), ;, if, (, lcm, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException]
[), ,, b, ), ), ;, if, (, lcm, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[), ), ;, if, (, lcm, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_64_BITS, ,]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_64_BITS, ,, a, ,, b, ), ;, }, return, lcm, ;, }]
[==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_64_BITS, ,, a, ,, b, ), ;, }]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_64_BITS, ,, a, ,, b, ), ;, }, return, lcm, ;, }]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., LCM_OVERFLOW_64_BITS, ,, a, ,, b, ), ;, }, return, lcm]
[;, }, return, lcm, ;, }, public, static, int, mulAndCheck, (, int, x, ,, int, y, ), throws, MathArithmeticException, {]
[,, a, ,, b, ), ;, }, return, lcm, ;, }, public, static, int, mulAndCheck, (, int, x, ,, int]
[., LCM_OVERFLOW_64_BITS, ,, a, ,, b, ), ;, }, return, lcm, ;, }, public, static, int, mulAndCheck, (, int, x]
[,, b, ), ;, }, return, lcm, ;, }, public, static, int, mulAndCheck, (, int, x, ,, int, y, )]
[), ;, }, return, lcm, ;, }, public, static, int, mulAndCheck, (, int, x, ,, int, y, ), throws, MathArithmeticException]
[;, }, public, static, int, mulAndCheck, (, int, x, ,, int, y, ), throws, MathArithmeticException, {, long, m, =, (]
[;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[*, (, (, long, ), y, ), ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, .]
[), *, (, (, long, ), y, ), ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer]
[), *, (, (, long, ), y, ), ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer]
[;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[), ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException]
[), ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException]
[), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int, ), m, ;, }, public, static, long, mulAndCheck]
[||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int, ), m]
[<, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, ), ;, }, return]
[||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int, ), m]
[., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int]
[), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int, ), m, ;, }, public, static, long, mulAndCheck]
[>, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int, ), m, ;, }]
[), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int, ), m, ;, }, public, static, long, mulAndCheck]
[., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, ), ;, }, return, (, int, ), m, ;, }, public, static]
[;, }, return, (, int, ), m, ;, }, public, static, long, mulAndCheck, (, long, a, ,, long, b, )]
[;, }, public, static, long, mulAndCheck, (, long, a, ,, long, b, ), throws, MathArithmeticException, {, long, ret, ;, if]
[;, }, public, static, long, mulAndCheck, (, long, a, ,, long, b, ), throws, MathArithmeticException, {, long, ret, ;, if]
[), {, ret, =, mulAndCheck, (, b, ,, a, ), ;, }, else, {, if, (, a, <, 0, )]
[>, b, ), {, ret, =, mulAndCheck, (, b, ,, a, ), ;, }, else, {, if, (, a, <]
[), {, ret, =, mulAndCheck, (, b, ,, a, ), ;, }, else, {, if, (, a, <, 0, )]
[=, mulAndCheck, (, b, ,, a, ), ;, }, else, {, if, (, a, <, 0, ), {, if, (]
[;, }, else, {, if, (, a, <, 0, ), {, if, (, b, <, 0, ), {, if, (]
[,, a, ), ;, }, else, {, if, (, a, <, 0, ), {, if, (, b, <, 0, )]
[), ;, }, else, {, if, (, a, <, 0, ), {, if, (, b, <, 0, ), {, if]
[), {, if, (, b, <, 0, ), {, if, (, a, >=, Long, ., MAX_VALUE, /, b, ), {]
[<, 0, ), {, if, (, b, <, 0, ), {, if, (, a, >=, Long, ., MAX_VALUE, /, b]
[), {, if, (, b, <, 0, ), {, if, (, a, >=, Long, ., MAX_VALUE, /, b, ), {]
[), {, if, (, a, >=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }]
[<, 0, ), {, if, (, a, >=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b]
[), {, if, (, a, >=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[>=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[/, b, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }]
[., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, )]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[=, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, if, (, b]
[;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, if, (, b, >, 0, ), {]
[*, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, if, (, b, >, 0]
[;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, if, (, b, >, 0, ), {]
[;, }, }, else, if, (, b, >, 0, ), {, if, (, Long, ., MIN_VALUE, /, b, <=, a]
[), {, if, (, Long, ., MIN_VALUE, /, b, <=, a, ), {, ret, =, a, *, b, ;, }]
[>, 0, ), {, if, (, Long, ., MIN_VALUE, /, b, <=, a, ), {, ret, =, a, *, b]
[), {, if, (, Long, ., MIN_VALUE, /, b, <=, a, ), {, ret, =, a, *, b, ;, }]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[<=, a, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }]
[/, b, <=, a, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, )]
[., MIN_VALUE, /, b, <=, a, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException]
[<=, a, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[=, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =]
[;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =, 0, ;, }, }]
[*, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =, 0, ;]
[;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =, 0, ;, }, }]
[;, }, }, else, {, ret, =, 0, ;, }, }, else, if, (, a, >, 0, ), {, if]
[=, 0, ;, }, }, else, if, (, a, >, 0, ), {, if, (, a, <=, Long, ., MAX_VALUE]
[;, }, }, else, if, (, a, >, 0, ), {, if, (, a, <=, Long, ., MAX_VALUE, /, b]
[), {, if, (, a, <=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }]
[>, 0, ), {, if, (, a, <=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b]
[), {, if, (, a, <=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[<=, Long, ., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[/, b, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }]
[., MAX_VALUE, /, b, ), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, )]
[), {, ret, =, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else]
[=, a, *, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =]
[;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =, 0, ;, }, }]
[*, b, ;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =, 0, ;]
[;, }, else, {, throw, new, MathArithmeticException, (, ), ;, }, }, else, {, ret, =, 0, ;, }, }]
[;, }, }, else, {, ret, =, 0, ;, }, }, return, ret, ;, }, public, static, int, subAndCheck, (]
[=, 0, ;, }, }, return, ret, ;, }, public, static, int, subAndCheck, (, int, x, ,, int, y, )]
[;, }, }, return, ret, ;, }, public, static, int, subAndCheck, (, int, x, ,, int, y, ), throws, MathArithmeticException]
[;, }, public, static, int, subAndCheck, (, int, x, ,, int, y, ), throws, MathArithmeticException, {, long, s, =, (]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[-, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[-, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, ), ;, }, return, (, int, )]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, )]
[<, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, )]
[., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, ), ;, }, return, (, int, )]
[>, Integer, ., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, ), ;, }]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, ), ;, }, return, (, int, )]
[., MAX_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, ), ;, }, return, (]
[;, }, return, (, int, ), s, ;, }, public, static, long, subAndCheck, (, long, a, ,, long, b, )]
[,, x, ,, y, ), ;, }, return, (, int, ), s, ;, }, public, static, long, subAndCheck, (, long]
[., OVERFLOW_IN_SUBTRACTION, ,, x, ,, y, ), ;, }, return, (, int, ), s, ;, }, public, static, long, subAndCheck]
[,, y, ), ;, }, return, (, int, ), s, ;, }, public, static, long, subAndCheck, (, long, a, ,]
[), ;, }, return, (, int, ), s, ;, }, public, static, long, subAndCheck, (, long, a, ,, long, b]
[;, }, public, static, long, subAndCheck, (, long, a, ,, long, b, ), throws, MathArithmeticException, {, long, ret, ;, if]
[;, }, public, static, long, subAndCheck, (, long, a, ,, long, b, ), throws, MathArithmeticException, {, long, ret, ;, if]
[), {, if, (, a, <, 0, ), {, ret, =, a, -, b, ;, }, else, {, throw, new]
[==, Long, ., MIN_VALUE, ), {, if, (, a, <, 0, ), {, ret, =, a, -, b, ;, }]
[), {, if, (, a, <, 0, ), {, ret, =, a, -, b, ;, }, else, {, throw, new]
[., MIN_VALUE, ), {, if, (, a, <, 0, ), {, ret, =, a, -, b, ;, }, else, {]
[), {, ret, =, a, -, b, ;, }, else, {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, a]
[<, 0, ), {, ret, =, a, -, b, ;, }, else, {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION]
[), {, ret, =, a, -, b, ;, }, else, {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, a]
[=, a, -, b, ;, }, else, {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, a, ,, -, b]
[;, }, else, {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, a, ,, -, b, ), ;, }, }]
[-, b, ;, }, else, {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, a, ,, -, b, ), ;]
[;, }, else, {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ,, a, ,, -, b, ), ;, }, }]
[;, }, }, else, {, ret, =, addAndCheck, (, a, ,, -, b, ,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }]
[,, a, ,, -, b, ), ;, }, }, else, {, ret, =, addAndCheck, (, a, ,, -, b, ,]
[., OVERFLOW_IN_ADDITION, ,, a, ,, -, b, ), ;, }, }, else, {, ret, =, addAndCheck, (, a, ,, -]
[,, -, b, ), ;, }, }, else, {, ret, =, addAndCheck, (, a, ,, -, b, ,, LocalizedFormats, .]
[), ;, }, }, else, {, ret, =, addAndCheck, (, a, ,, -, b, ,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;]
[), ;, }, }, else, {, ret, =, addAndCheck, (, a, ,, -, b, ,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;]
[=, addAndCheck, (, a, ,, -, b, ,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }, return, ret, ;, }, public, static]
[;, }, return, ret, ;, }, public, static, int, pow, (, final, int, k, ,, int, e, ), throws, NotPositiveException]
[,, -, b, ,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }, return, ret, ;, }, public, static, int, pow, (, final]
[,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }, return, ret, ;, }, public, static, int, pow, (, final, int, k, ,]
[,, LocalizedFormats, ., OVERFLOW_IN_ADDITION, ), ;, }, return, ret, ;, }, public, static, int, pow, (, final, int, k, ,]
[), ;, }, return, ret, ;, }, public, static, int, pow, (, final, int, k, ,, int, e, ), throws]
[., OVERFLOW_IN_ADDITION, ), ;, }, return, ret, ;, }, public, static, int, pow, (, final, int, k, ,, int, e]
[;, }, public, static, int, pow, (, final, int, k, ,, int, e, ), throws, NotPositiveException, {, if, (, e]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, int, result, =, 1, ;, int]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, int, result, =, 1]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, int, result, =, 1, ;, int]
[;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e, !=, 0, ), {, if]
[,, e, ), ;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e, !=, 0]
[., EXPONENT, ,, e, ), ;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e]
[), ;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e, !=, 0, ), {]
[;, int, k2p, =, k, ;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, )]
[;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[!=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[!=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[&, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[*=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }]
[;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static]
[*=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, int, pow, (]
[;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, int, pow, (, final, int]
[=, e, >, >, 1, ;, }, return, result, ;, }, public, static, int, pow, (, final, int, k, ,]
[;, }, return, result, ;, }, public, static, int, pow, (, final, int, k, ,, long, e, ), throws, NotPositiveException]
[>, >, 1, ;, }, return, result, ;, }, public, static, int, pow, (, final, int, k, ,, long, e]
[;, }, return, result, ;, }, public, static, int, pow, (, final, int, k, ,, long, e, ), throws, NotPositiveException]
[;, }, public, static, int, pow, (, final, int, k, ,, long, e, ), throws, NotPositiveException, {, if, (, e]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, int, result, =, 1, ;, int]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, int, result, =, 1]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, int, result, =, 1, ;, int]
[;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e, !=, 0, ), {, if]
[,, e, ), ;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e, !=, 0]
[., EXPONENT, ,, e, ), ;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e]
[), ;, }, int, result, =, 1, ;, int, k2p, =, k, ;, while, (, e, !=, 0, ), {]
[;, int, k2p, =, k, ;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, )]
[;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[!=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[!=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[&, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[*=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }]
[;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static]
[*=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (]
[;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (, final, long]
[=, e, >, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,]
[;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,, int, e, ), throws, NotPositiveException]
[>, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,, int, e]
[;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,, int, e, ), throws, NotPositiveException]
[;, }, public, static, long, pow, (, final, long, k, ,, int, e, ), throws, NotPositiveException, {, if, (, e]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, long, result, =, 1l, ;, long]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, long, result, =, 1l]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, long, result, =, 1l, ;, long]
[;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e, !=, 0, ), {, if]
[,, e, ), ;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e, !=, 0]
[., EXPONENT, ,, e, ), ;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e]
[), ;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e, !=, 0, ), {]
[;, long, k2p, =, k, ;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, )]
[;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[!=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[!=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[&, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[*=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }]
[;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static]
[*=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (]
[;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (, final, long]
[=, e, >, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,]
[;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,, long, e, ), throws, NotPositiveException]
[>, >, 1, ;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,, long, e]
[;, }, return, result, ;, }, public, static, long, pow, (, final, long, k, ,, long, e, ), throws, NotPositiveException]
[;, }, public, static, long, pow, (, final, long, k, ,, long, e, ), throws, NotPositiveException, {, if, (, e]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, long, result, =, 1l, ;, long]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, long, result, =, 1l]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, long, result, =, 1l, ;, long]
[;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e, !=, 0, ), {, if]
[,, e, ), ;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e, !=, 0]
[., EXPONENT, ,, e, ), ;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e]
[), ;, }, long, result, =, 1l, ;, long, k2p, =, k, ;, while, (, e, !=, 0, ), {]
[;, long, k2p, =, k, ;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, )]
[;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[!=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[!=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[&, 0x1, ), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >]
[), !=, 0, ), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1]
[), {, result, *=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return]
[*=, k2p, ;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }]
[;, }, k2p, *=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static]
[*=, k2p, ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (]
[;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger]
[=, e, >, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,]
[;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, int, e, ), throws, NotPositiveException]
[>, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, int, e]
[;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, int, e, ), throws, NotPositiveException]
[;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, int, e, ), throws, NotPositiveException, {, if, (, e]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, return, k, ., pow, (, e]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, return, k, ., pow]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, return, k, ., pow, (, e]
[;, }, return, k, ., pow, (, e, ), ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,]
[,, e, ), ;, }, return, k, ., pow, (, e, ), ;, }, public, static, BigInteger, pow, (, final]
[., EXPONENT, ,, e, ), ;, }, return, k, ., pow, (, e, ), ;, }, public, static, BigInteger, pow]
[), ;, }, return, k, ., pow, (, e, ), ;, }, public, static, BigInteger, pow, (, final, BigInteger, k]
[;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, long, e, ), throws, NotPositiveException, {, if, (, e]
[., pow, (, e, ), ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, long, e, ), throws]
[), ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, long, e, ), throws, NotPositiveException, {, if, (]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE]
[;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while, (, e, !=, 0, )]
[,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while, (, e]
[., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while]
[), ;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while, (, e, !=, 0]
[;, BigInteger, k2p, =, k, ;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, )]
[., ONE, ;, BigInteger, k2p, =, k, ;, while, (, e, !=, 0, ), {, if, (, (, e, &]
[;, while, (, e, !=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, =, result, ., multiply, (, k2p]
[!=, 0, ), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, =, result, ., multiply]
[), {, if, (, (, e, &, 0x1, ), !=, 0, ), {, result, =, result, ., multiply, (, k2p]
[), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p, )]
[!=, 0, ), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (]
[), !=, 0, ), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply]
[&, 0x1, ), !=, 0, ), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p]
[), !=, 0, ), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply]
[), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p, )]
[=, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =]
[;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =, e, >, >, 1, ;, }, return]
[., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =, e, >]
[), ;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =, e, >, >, 1, ;, }]
[=, k2p, ., multiply, (, k2p, ), ;, e, =, e, >, >, 1, ;, }, return, result, ;, }]
[;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger]
[., multiply, (, k2p, ), ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static]
[), ;, e, =, e, >, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (, final]
[=, e, >, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,]
[;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, BigInteger, e, ), throws, NotPositiveException]
[>, >, 1, ;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, BigInteger, e]
[;, }, return, result, ;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, BigInteger, e, ), throws, NotPositiveException]
[;, }, public, static, BigInteger, pow, (, final, BigInteger, k, ,, BigInteger, e, ), throws, NotPositiveException, {, if, (, e]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE]
[<, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger]
[., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e]
[), <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger, result, =]
[., ZERO, ), <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE]
[;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while, (, !, BigInteger, ., ZERO]
[,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while, (, !]
[., EXPONENT, ,, e, ), ;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while]
[), ;, }, BigInteger, result, =, BigInteger, ., ONE, ;, BigInteger, k2p, =, k, ;, while, (, !, BigInteger, .]
[;, BigInteger, k2p, =, k, ;, while, (, !, BigInteger, ., ZERO, ., equals, (, e, ), ), {, if]
[., ONE, ;, BigInteger, k2p, =, k, ;, while, (, !, BigInteger, ., ZERO, ., equals, (, e, ), )]
[;, while, (, !, BigInteger, ., ZERO, ., equals, (, e, ), ), {, if, (, e, ., testBit, (]
[), {, if, (, e, ., testBit, (, 0, ), ), {, result, =, result, ., multiply, (, k2p, )]
[), {, if, (, e, ., testBit, (, 0, ), ), {, result, =, result, ., multiply, (, k2p, )]
[., equals, (, e, ), ), {, if, (, e, ., testBit, (, 0, ), ), {, result, =, result]
[., ZERO, ., equals, (, e, ), ), {, if, (, e, ., testBit, (, 0, ), ), {, result]
[), ), {, if, (, e, ., testBit, (, 0, ), ), {, result, =, result, ., multiply, (, k2p]
[), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p, )]
[., testBit, (, 0, ), ), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p]
[), ), {, result, =, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p]
[=, result, ., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =]
[;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =, e, ., shiftRight, (, 1, ), ;]
[., multiply, (, k2p, ), ;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =, e, .]
[), ;, }, k2p, =, k2p, ., multiply, (, k2p, ), ;, e, =, e, ., shiftRight, (, 1, )]
[=, k2p, ., multiply, (, k2p, ), ;, e, =, e, ., shiftRight, (, 1, ), ;, }, return, result]
[;, e, =, e, ., shiftRight, (, 1, ), ;, }, return, result, ;, }, public, static, long, stirlingS2, (]
[., multiply, (, k2p, ), ;, e, =, e, ., shiftRight, (, 1, ), ;, }, return, result, ;, }]
[), ;, e, =, e, ., shiftRight, (, 1, ), ;, }, return, result, ;, }, public, static, long, stirlingS2]
[=, e, ., shiftRight, (, 1, ), ;, }, return, result, ;, }, public, static, long, stirlingS2, (, final, int]
[;, }, return, result, ;, }, public, static, long, stirlingS2, (, final, int, n, ,, final, int, k, ), throws]
[., shiftRight, (, 1, ), ;, }, return, result, ;, }, public, static, long, stirlingS2, (, final, int, n, ,]
[), ;, }, return, result, ;, }, public, static, long, stirlingS2, (, final, int, n, ,, final, int, k, )]
[;, }, public, static, long, stirlingS2, (, final, int, n, ,, final, int, k, ), throws, NotPositiveException, ,, NumberIsTooLargeException, ,]
[;, }, private, static, long, addAndCheck, (, long, a, ,, long, b, ,, Localizable, pattern, ), throws, MathArithmeticException, {, long]
[., stirlingS2, (, n, ,, k, ), ;, }, private, static, long, addAndCheck, (, long, a, ,, long, b, ,]
[,, k, ), ;, }, private, static, long, addAndCheck, (, long, a, ,, long, b, ,, Localizable, pattern, ), throws]
[), ;, }, private, static, long, addAndCheck, (, long, a, ,, long, b, ,, Localizable, pattern, ), throws, MathArithmeticException, {]
[), {, ret, =, addAndCheck, (, b, ,, a, ,, pattern, ), ;, }, else, {, if, (, a, <]
[>, b, ), {, ret, =, addAndCheck, (, b, ,, a, ,, pattern, ), ;, }, else, {, if, (]
[), {, ret, =, addAndCheck, (, b, ,, a, ,, pattern, ), ;, }, else, {, if, (, a, <]
[=, addAndCheck, (, b, ,, a, ,, pattern, ), ;, }, else, {, if, (, a, <, 0, ), {]
[;, }, else, {, if, (, a, <, 0, ), {, if, (, b, <, 0, ), {, if, (]
[,, a, ,, pattern, ), ;, }, else, {, if, (, a, <, 0, ), {, if, (, b, <]
[,, pattern, ), ;, }, else, {, if, (, a, <, 0, ), {, if, (, b, <, 0, )]
[), ;, }, else, {, if, (, a, <, 0, ), {, if, (, b, <, 0, ), {, if]
[), {, if, (, b, <, 0, ), {, if, (, Long, ., MIN_VALUE, -, b, <=, a, ), {]
[<, 0, ), {, if, (, b, <, 0, ), {, if, (, Long, ., MIN_VALUE, -, b, <=, a]
[), {, if, (, b, <, 0, ), {, if, (, Long, ., MIN_VALUE, -, b, <=, a, ), {]
[), {, if, (, Long, ., MIN_VALUE, -, b, <=, a, ), {, ret, =, a, +, b, ;, }]
[<, 0, ), {, if, (, Long, ., MIN_VALUE, -, b, <=, a, ), {, ret, =, a, +, b]
[), {, if, (, Long, ., MIN_VALUE, -, b, <=, a, ), {, ret, =, a, +, b, ;, }]
[), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b]
[<=, a, ), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a]
[-, b, <=, a, ), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern]
[., MIN_VALUE, -, b, <=, a, ), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException]
[<=, a, ), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a]
[), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b]
[=, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }]
[;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }, }, else, {, ret]
[+, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }, }, else]
[;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }, }, else, {, ret]
[;, }, }, else, {, ret, =, a, +, b, ;, }, }, else, {, if, (, a, <=, Long]
[,, a, ,, b, ), ;, }, }, else, {, ret, =, a, +, b, ;, }, }, else, {]
[,, b, ), ;, }, }, else, {, ret, =, a, +, b, ;, }, }, else, {, if, (]
[), ;, }, }, else, {, ret, =, a, +, b, ;, }, }, else, {, if, (, a, <=]
[=, a, +, b, ;, }, }, else, {, if, (, a, <=, Long, ., MAX_VALUE, -, b, ), {]
[;, }, }, else, {, if, (, a, <=, Long, ., MAX_VALUE, -, b, ), {, ret, =, a, +]
[+, b, ;, }, }, else, {, if, (, a, <=, Long, ., MAX_VALUE, -, b, ), {, ret, =]
[;, }, }, else, {, if, (, a, <=, Long, ., MAX_VALUE, -, b, ), {, ret, =, a, +]
[), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b]
[<=, Long, ., MAX_VALUE, -, b, ), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException]
[), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b]
[-, b, ), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a]
[., MAX_VALUE, -, b, ), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern]
[), {, ret, =, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b]
[=, a, +, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }]
[;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }, }, }, return, ret]
[+, b, ;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }, }, }]
[;, }, else, {, throw, new, MathArithmeticException, (, pattern, ,, a, ,, b, ), ;, }, }, }, return, ret]
[;, }, }, }, return, ret, ;, }, public, static, boolean, isPowerOfTwo, (, long, n, ), {, return, (, n]
[,, a, ,, b, ), ;, }, }, }, return, ret, ;, }, public, static, boolean, isPowerOfTwo, (, long, n]
[,, b, ), ;, }, }, }, return, ret, ;, }, public, static, boolean, isPowerOfTwo, (, long, n, ), {]
[), ;, }, }, }, return, ret, ;, }, public, static, boolean, isPowerOfTwo, (, long, n, ), {, return, (]
[;, }, public, static, boolean, isPowerOfTwo, (, long, n, ), {, return, (, n, >, 0, ), &&, (, (]
[;, }, }]
[&&, (, (, n, &, (, n, -, 1, ), ), ==, 0, ), ;, }, }]
[), &&, (, (, n, &, (, n, -, 1, ), ), ==, 0, ), ;, }, }]
[>, 0, ), &&, (, (, n, &, (, n, -, 1, ), ), ==, 0, ), ;, }, }]
[), &&, (, (, n, &, (, n, -, 1, ), ), ==, 0, ), ;, }, }]
[;, }, }]
[), ;, }, }]
[==, 0, ), ;, }, }]
[), ==, 0, ), ;, }, }]
[&, (, n, -, 1, ), ), ==, 0, ), ;, }, }]
[), ==, 0, ), ;, }, }]
[), ), ==, 0, ), ;, }, }]
[-, 1, ), ), ==, 0, ), ;, }, }]
[), ), ==, 0, ), ;, }, }]
[), ;, }, }]
