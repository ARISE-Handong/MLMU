[,, Lists, ., <, Callback, >, newArrayList, (, callbacks, ), ), ;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <]
[), ;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, this, ., compiler, =, compiler]
[., <, Callback, >, newArrayList, (, callbacks, ), ), ;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >]
[), ), ;, }, CombinedCompilerPass, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, this, ., compiler, =]
[=, compiler, ;, this, ., callbacks, =, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int]
[., compiler, =, compiler, ;, this, ., callbacks, =, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for]
[;, this, ., callbacks, =, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =]
[=, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[., callbacks, =, new, CallbackWrapper, [, callbacks, ., size, (, ), ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, callbacks, ., size, (, )]
[;, i, <, callbacks, ., size, (, ), ;, i, ++, ), {, this, ., callbacks, [, i, ], =]
[;, i, ++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (, callbacks, ., get, (, i]
[<, callbacks, ., size, (, ), ;, i, ++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper]
[;, i, ++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (, callbacks, ., get, (, i]
[., size, (, ), ;, i, ++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (, callbacks]
[), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (, callbacks, ., get, (, i, ), ), ;]
[++, ), {, this, ., callbacks, [, i, ], =, new, CallbackWrapper, (, callbacks, ., get, (, i, ), )]
[=, new, CallbackWrapper, (, callbacks, ., get, (, i, ), ), ;, }, }, static, void, traverse, (, AbstractCompiler, compiler]
[[, i, ], =, new, CallbackWrapper, (, callbacks, ., get, (, i, ), ), ;, }, }, static, void, traverse]
[., callbacks, [, i, ], =, new, CallbackWrapper, (, callbacks, ., get, (, i, ), ), ;, }, }, static]
[], =, new, CallbackWrapper, (, callbacks, ., get, (, i, ), ), ;, }, }, static, void, traverse, (, AbstractCompiler]
[;, }, }, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, List, <, Callback, >, callbacks, ), {]
[), ;, }, }, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, List, <, Callback, >, callbacks, )]
[., get, (, i, ), ), ;, }, }, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, List]
[), ), ;, }, }, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, List, <, Callback, >, callbacks]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else]
[==, 1, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;]
[., size, (, ), ==, 1, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (]
[), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else]
[;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,, callbacks, ), ), ., process, (, null, ,, root, )]
[., traverse, (, compiler, ,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else, {, (, new]
[,, root, ,, callbacks, ., get, (, 0, ), ), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,]
[,, callbacks, ., get, (, 0, ), ), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,, callbacks, )]
[), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,, callbacks, ), ), ., process, (, null, ,, root]
[., get, (, 0, ), ), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,, callbacks, ), ), .]
[), ), ;, }, else, {, (, new, CombinedCompilerPass, (, compiler, ,, callbacks, ), ), ., process, (, null, ,]
[;, }, }, private, static, class, CallbackWrapper, {, private, final, Callback, callback, ;, private, final, ScopedCallback, scopedCallback, ;, private, Node]
[., process, (, null, ,, root, ), ;, }, }, private, static, class, CallbackWrapper, {, private, final, Callback, callback, ;]
[), ., process, (, null, ,, root, ), ;, }, }, private, static, class, CallbackWrapper, {, private, final, Callback, callback]
[,, callbacks, ), ), ., process, (, null, ,, root, ), ;, }, }, private, static, class, CallbackWrapper, {, private]
[), ), ., process, (, null, ,, root, ), ;, }, }, private, static, class, CallbackWrapper, {, private, final, Callback]
[,, root, ), ;, }, }, private, static, class, CallbackWrapper, {, private, final, Callback, callback, ;, private, final, ScopedCallback, scopedCallback]
[), ;, }, }, private, static, class, CallbackWrapper, {, private, final, Callback, callback, ;, private, final, ScopedCallback, scopedCallback, ;, private]
[;, private, CallbackWrapper, (, Callback, callback, ), {, this, ., callback, =, callback, ;, if, (, callback, instanceof, ScopedCallback, )]
[=, callback, ;, if, (, callback, instanceof, ScopedCallback, ), {, scopedCallback, =, (, ScopedCallback, ), callback, ;, }, else, {]
[., callback, =, callback, ;, if, (, callback, instanceof, ScopedCallback, ), {, scopedCallback, =, (, ScopedCallback, ), callback, ;, }]
[;, if, (, callback, instanceof, ScopedCallback, ), {, scopedCallback, =, (, ScopedCallback, ), callback, ;, }, else, {, scopedCallback, =]
[), {, scopedCallback, =, (, ScopedCallback, ), callback, ;, }, else, {, scopedCallback, =, null, ;, }, }, void, visitOrMaybeActivate]
[instanceof, ScopedCallback, ), {, scopedCallback, =, (, ScopedCallback, ), callback, ;, }, else, {, scopedCallback, =, null, ;, }, }]
[=, (, ScopedCallback, ), callback, ;, }, else, {, scopedCallback, =, null, ;, }, }, void, visitOrMaybeActivate, (, NodeTraversal, t]
[;, }, else, {, scopedCallback, =, null, ;, }, }, void, visitOrMaybeActivate, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, else, {, scopedCallback, =, null, ;, }, }, void, visitOrMaybeActivate, (, NodeTraversal, t, ,, Node, n, ,, Node]
[=, null, ;, }, }, void, visitOrMaybeActivate, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, }, void, visitOrMaybeActivate, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (]
[), {, callback, ., visit, (, t, ,, n, ,, parent, ), ;, }, else, if, (, waiting, ==, n]
[;, }, else, if, (, waiting, ==, n, ), {, waiting, =, null, ;, }, }, void, shouldTraverseIfActive, (, NodeTraversal]
[., visit, (, t, ,, n, ,, parent, ), ;, }, else, if, (, waiting, ==, n, ), {, waiting]
[,, n, ,, parent, ), ;, }, else, if, (, waiting, ==, n, ), {, waiting, =, null, ;, }]
[,, parent, ), ;, }, else, if, (, waiting, ==, n, ), {, waiting, =, null, ;, }, }, void]
[), ;, }, else, if, (, waiting, ==, n, ), {, waiting, =, null, ;, }, }, void, shouldTraverseIfActive, (]
[), {, waiting, =, null, ;, }, }, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[==, n, ), {, waiting, =, null, ;, }, }, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), {, waiting, =, null, ;, }, }, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[=, null, ;, }, }, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, }, void, shouldTraverseIfActive, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isActive, (]
[), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, )]
[&&, !, callback, ., shouldTraverse, (, t, ,, n, ,, parent, ), ), {, waiting, =, n, ;, }, }]
[), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, )]
[), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, )]
[., shouldTraverse, (, t, ,, n, ,, parent, ), ), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (]
[,, n, ,, parent, ), ), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {]
[,, parent, ), ), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[), ), {, waiting, =, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (]
[=, n, ;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=]
[;, }, }, void, enterScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, )]
[), {, scopedCallback, ., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[&&, scopedCallback, !=, null, ), {, scopedCallback, ., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t]
[), {, scopedCallback, ., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[!=, null, ), {, scopedCallback, ., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {]
[), {, scopedCallback, ., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (]
[;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null, )]
[., enterScope, (, t, ), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, )]
[), ;, }, }, void, exitScopeIfActive, (, NodeTraversal, t, ), {, if, (, isActive, (, ), &&, scopedCallback, !=, null]
[), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return, waiting, ==, null]
[&&, scopedCallback, !=, null, ), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {]
[), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return, waiting, ==, null]
[!=, null, ), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return, waiting]
[), {, scopedCallback, ., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return, waiting, ==, null]
[;, }, }, boolean, isActive, (, ), {, return, waiting, ==, null, ;, }, }, @, Override, public, final, void]
[., exitScope, (, t, ), ;, }, }, boolean, isActive, (, ), {, return, waiting, ==, null, ;, }, }]
[), ;, }, }, boolean, isActive, (, ), {, return, waiting, ==, null, ;, }, }, @, Override, public, final]
[;, }, }, @, Override, public, final, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[==, null, ;, }, }, @, Override, public, final, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, }, @, Override, public, final, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (, compiler]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[,, this, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, .]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, NodeTraversal, ., traverse, (]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (]
[., traverse, (, compiler, ,, scriptRoot, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,]
[,, scriptRoot, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for]
[), {, callback, ., shouldTraverseIfActive, (, t, ,, n, ,, parent, ), ;, }, return, true, ;, }, @, Override]
[;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., shouldTraverseIfActive, (, t, ,, n, ,, parent, ), ;, }, return, true, ;, }, @, Override, public, void, visit]
[,, n, ,, parent, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[,, parent, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n]
[), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (]
[), {, callback, ., visitOrMaybeActivate, (, t, ,, n, ,, parent, ), ;, }, }, @, Override, public, void, enterScope]
[;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, )]
[., visitOrMaybeActivate, (, t, ,, n, ,, parent, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t]
[,, n, ,, parent, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, for, (]
[,, parent, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback]
[), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks]
[), {, callback, ., enterScopeIfActive, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks, )]
[., enterScopeIfActive, (, t, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, for, (]
[), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, for, (, CallbackWrapper, callback, :, callbacks]
[), {, callback, ., exitScopeIfActive, (, t, ), ;, }, }, }]
[;, }, }, }]
[., exitScopeIfActive, (, t, ), ;, }, }, }]
[), ;, }, }, }]
