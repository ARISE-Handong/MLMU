[AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, CodingConvention, convention, ;, private, static, final, Logger, logger, =]
[AbstractPostOrderCallback, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, CodingConvention, convention, ;, private, static, final, Logger, logger, =]
[private, final, AbstractCompiler, compiler, ;, private, final, CodingConvention, convention, ;, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[private, final, AbstractCompiler, compiler, ;, private, final, CodingConvention, convention, ;, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[logger, =, Logger, ., getLogger, (, ExpandJqueryAliases, ., class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =]
[logger, =, Logger, ., getLogger, (, ExpandJqueryAliases, ., class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =]
[getLogger, (, ExpandJqueryAliases, ., class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (]
[ExpandJqueryAliases, ., class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,]
[ExpandJqueryAliases, ., class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,]
[ExpandJqueryAliases, ., class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,]
[class, ., getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +]
[getName, (, ), ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +]
[JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =]
[JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, =, DiagnosticType, ., warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =]
[warning, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (]
["JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,]
["JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_LIT", ,, "jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,]
["jQuery.expandedEach call cannot be expanded because the first ", +, "argument must be an object literal or an array of strings ", +, "literal.", ), ;, static, final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +]
[final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =]
[final, DiagnosticType, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, =, DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =]
[DiagnosticType, ., error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (]
[error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,]
[error, (, "JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,]
["JSC_JQUERY_UNABLE_TO_EXPAND_INVALID_NAME", ,, "jQuery.expandedEach expansion would result in the invalid ", +, "property name \"{0}\".", ), ;, static, final, DiagnosticType, JQUERY_USELESS_EACH_EXPANSION, =, DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +]
[DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =]
[DiagnosticType, ., warning, (, "JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =]
["JSC_JQUERY_USELESS_EACH_EXPANSION", ,, "jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (]
["jQuery.expandedEach was not expanded as no valid property ", +, "assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend", ,]
["assignments were encountered. Consider using jQuery.each instead.", ), ;, private, static, final, Set, <, String, >, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend", ,, "jQuery.fn.extend", ,]
[>, JQUERY_EXTEND_NAMES, =, ImmutableSet, ., of, (, "jQuery.extend", ,, "jQuery.fn.extend", ,, "jQuery.prototype.extend", ), ;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =]
[;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {]
[;, private, static, final, String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {]
[String, JQUERY_EXPANDED_EACH_NAME, =, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[=, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[=, "jQuery.expandedEach", ;, private, final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., convention, =]
[final, PeepholeOptimizationsPass, peepholePasses, ;, ExpandJqueryAliases, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., convention, =]
[this, ., compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =]
[compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;]
[compiler, =, compiler, ;, this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;]
[this, ., convention, =, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this, ., peepholePasses, =]
[=, compiler, ., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (]
[., getCodingConvention, (, ), ;, final, boolean, late, =, false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,]
[), ;, final, boolean, late, =, false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (]
[boolean, late, =, false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,]
[false, ;, this, ., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (]
[., peepholePasses, =, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,]
[(, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,]
[new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (]
[late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,]
[), ;, }, public, static, boolean, isJqueryExtendCall, (, Node, n, ,, String, qname, ,, AbstractCompiler, compiler, ), {, if, (]
[), ;, }, public, static, boolean, isJqueryExtendCall, (, Node, n, ,, String, qname, ,, AbstractCompiler, compiler, ), {, if, (]
[static, boolean, isJqueryExtendCall, (, Node, n, ,, String, qname, ,, AbstractCompiler, compiler, ), {, if, (, JQUERY_EXTEND_NAMES, ., contains, (]
[String, qname, ,, AbstractCompiler, compiler, ), {, if, (, JQUERY_EXTEND_NAMES, ., contains, (, qname, ), ), {, Node, firstArgument, =]
[String, qname, ,, AbstractCompiler, compiler, ), {, if, (, JQUERY_EXTEND_NAMES, ., contains, (, qname, ), ), {, Node, firstArgument, =]
[(, JQUERY_EXTEND_NAMES, ., contains, (, qname, ), ), {, Node, firstArgument, =, n, ., getNext, (, ), ;, if, (]
[(, JQUERY_EXTEND_NAMES, ., contains, (, qname, ), ), {, Node, firstArgument, =, n, ., getNext, (, ), ;, if, (]
[., contains, (, qname, ), ), {, Node, firstArgument, =, n, ., getNext, (, ), ;, if, (, firstArgument, ==]
[), ), {, Node, firstArgument, =, n, ., getNext, (, ), ;, if, (, firstArgument, ==, null, ), {, return]
[n, ., getNext, (, ), ;, if, (, firstArgument, ==, null, ), {, return, false, ;, }, Node, secondArgument, =]
[n, ., getNext, (, ), ;, if, (, firstArgument, ==, null, ), {, return, false, ;, }, Node, secondArgument, =]
[firstArgument, ==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (]
[firstArgument, ==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (]
[==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (]
[==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (]
[==, null, ), {, return, false, ;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (]
[;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&]
[;, }, Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&]
[Node, secondArgument, =, firstArgument, ., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==]
[firstArgument, ., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||]
[., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (]
[., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (]
[., getNext, (, ), ;, if, (, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (]
[(, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||]
[(, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||]
[(, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||]
[(, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||]
[(, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||]
[(, (, firstArgument, ., isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||]
[isObjectLit, (, ), &&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (]
[&&, secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&]
[secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !]
[secondArgument, ==, null, ), ||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !]
[||, (, firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (]
[firstArgument, ., isName, (, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,]
[(, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&]
[(, ), ||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&]
[||, NodeUtil, ., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=]
[., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&]
[., isGet, (, firstArgument, ), &&, !, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&]
[!, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&]
[!, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&]
[!, NodeUtil, ., mayHaveSideEffects, (, firstArgument, ,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&]
[,, compiler, ), &&, secondArgument, !=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==]
[!=, null, &&, secondArgument, ., isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return]
[isObjectLit, (, ), &&, secondArgument, ., getNext, (, ), ==, null, ), ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName, ), {]
[return, true, ;, }, }, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName, ), {]
[}, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName, ), {, Preconditions, ., checkArgument, (]
[}, return, false, ;, }, public, boolean, isJqueryExpandedEachCall, (, Node, call, ,, String, qName, ), {, Preconditions, ., checkArgument, (]
[Node, call, ,, String, qName, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, if, (]
[Node, call, ,, String, qName, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, if, (]
[Node, call, ,, String, qName, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, if, (]
[Node, call, ,, String, qName, ), {, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, if, (]
[{, Preconditions, ., checkArgument, (, call, ., isCall, (, ), ), ;, if, (, call, ., getFirstChild, (, ), !=]
[., checkArgument, (, call, ., isCall, (, ), ), ;, if, (, call, ., getFirstChild, (, ), !=, null, &&]
[., checkArgument, (, call, ., isCall, (, ), ), ;, if, (, call, ., getFirstChild, (, ), !=, null, &&]
[., isCall, (, ), ), ;, if, (, call, ., getFirstChild, (, ), !=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (]
[;, if, (, call, ., getFirstChild, (, ), !=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {, return]
[., getFirstChild, (, ), !=, null, &&, JQUERY_EXPANDED_EACH_NAME, ., equals, (, qName, ), ), {, return, true, ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), &&]
[visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), &&]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), &&, convention, ., isPrototypeAlias, (]
[Node, parent, ), {, if, (, n, ., isGetProp, (, ), &&, convention, ., isPrototypeAlias, (, n, ), ), {]
[), {, if, (, n, ., isGetProp, (, ), &&, convention, ., isPrototypeAlias, (, n, ), ), {, maybeReplaceJqueryPrototypeAlias, (]
[(, ), &&, convention, ., isPrototypeAlias, (, n, ), ), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (]
[(, ), &&, convention, ., isPrototypeAlias, (, n, ), ), {, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (]
[{, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (, n, ., isCall, (, ), ), {, Node, callTarget, =]
[{, maybeReplaceJqueryPrototypeAlias, (, n, ), ;, }, else, if, (, n, ., isCall, (, ), ), {, Node, callTarget, =]
[(, n, ., isCall, (, ), ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, qName, =]
[(, n, ., isCall, (, ), ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, qName, =]
[Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (]
[., getFirstChild, (, ), ;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,]
[(, ), ;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,, qName, ,]
[(, ), ;, String, qName, =, callTarget, ., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,, qName, ,]
[callTarget, ., getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,, qName, ,, this, ., compiler, ), ), {]
[getQualifiedName, (, ), ;, if, (, isJqueryExtendCall, (, callTarget, ,, qName, ,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall, (]
[(, callTarget, ,, qName, ,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (]
[,, qName, ,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (]
[,, this, ., compiler, ), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,]
[), ), {, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, ), ), {]
[{, maybeExpandJqueryExtendCall, (, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, ), ), {, maybeExpandJqueryEachCall, (]
[(, n, ), ;, }, else, if, (, isJqueryExpandedEachCall, (, n, ,, qName, ), ), {, maybeExpandJqueryEachCall, (, t, ,]
[,, n, ), ;, }, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[,, n, ), ;, }, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[}, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Expanding Jquery Aliases", ), ;]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Expanding Jquery Aliases", ), ;]
[process, (, Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Expanding Jquery Aliases", ), ;, NodeTraversal, ., traverse, (]
[Node, externs, ,, Node, root, ), {, logger, ., fine, (, "Expanding Jquery Aliases", ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, Node, root, ), {, logger, ., fine, (, "Expanding Jquery Aliases", ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[traverse, (, compiler, ,, root, ,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (]
[traverse, (, compiler, ,, root, ,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (]
[root, ,, this, ), ;, }, private, void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (, NodeUtil, ., isLValue, (]
[void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (, NodeUtil, ., isLValue, (, n, ), ), {, Node, maybeAssign, =]
[void, maybeReplaceJqueryPrototypeAlias, (, Node, n, ), {, if, (, NodeUtil, ., isLValue, (, n, ), ), {, Node, maybeAssign, =]
[(, NodeUtil, ., isLValue, (, n, ), ), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (]
[(, NodeUtil, ., isLValue, (, n, ), ), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (]
[NodeUtil, ., isLValue, (, n, ), ), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !]
[NodeUtil, ., isLValue, (, n, ), ), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !]
[n, ), ), {, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatement, (]
[{, Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&]
[Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&, !]
[Node, maybeAssign, =, n, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&, !]
[), ;, while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&, !, maybeAssign, ., isAssign, (, ), ), {]
[while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =]
[while, (, !, NodeUtil, ., isStatement, (, maybeAssign, ), &&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =]
[&&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (]
[&&, !, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (]
[), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {]
[maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =]
[maybeAssign, =, maybeAssign, ., getParent, (, ), ;, }, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =]
[}, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (]
[}, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (]
[}, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (]
[}, if, (, maybeAssign, ., isAssign, (, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (]
[(, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (, ), ||]
[(, ), ), {, maybeAssign, =, maybeAssign, ., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (, ), ||]
[maybeAssign, ., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (, ), ||, maybeAssign, ., isScript, (, ), ||]
[maybeAssign, ., getParent, (, ), ;, if, (, maybeAssign, ., isBlock, (, ), ||, maybeAssign, ., isScript, (, ), ||]
[), ;, if, (, maybeAssign, ., isBlock, (, ), ||, maybeAssign, ., isScript, (, ), ||, NodeUtil, ., isStatement, (]
[isScript, (, ), ||, NodeUtil, ., isStatement, (, maybeAssign, ), ), {, return, ;, }, }, }, Node, fn, =]
[isScript, (, ), ||, NodeUtil, ., isStatement, (, maybeAssign, ), ), {, return, ;, }, }, }, Node, fn, =]
[maybeAssign, ), ), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (]
[maybeAssign, ), ), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (]
[), {, return, ;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (, fn, !=]
[;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (, fn, !=, null, ), {]
[;, }, }, }, Node, fn, =, n, ., getLastChild, (, ), ;, if, (, fn, !=, null, ), {]
[Node, fn, =, n, ., getLastChild, (, ), ;, if, (, fn, !=, null, ), {, n, ., replaceChild, (]
[=, n, ., getLastChild, (, ), ;, if, (, fn, !=, null, ), {, n, ., replaceChild, (, fn, ,]
[=, n, ., getLastChild, (, ), ;, if, (, fn, !=, null, ), {, n, ., replaceChild, (, fn, ,]
[(, ), ;, if, (, fn, !=, null, ), {, n, ., replaceChild, (, fn, ,, IR, ., string, (]
[(, fn, !=, null, ), {, n, ., replaceChild, (, fn, ,, IR, ., string, (, "prototype", ), ), ;]
[(, fn, !=, null, ), {, n, ., replaceChild, (, fn, ,, IR, ., string, (, "prototype", ), ), ;]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget, =]
[;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget, =]
[private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToExtend, =]
[private, void, maybeExpandJqueryExtendCall, (, Node, n, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToExtend, =]
[callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToExtend, =, callTarget, ., getNext, (, ), ;, Node, extendArg, =]
[callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToExtend, =, callTarget, ., getNext, (, ), ;, Node, extendArg, =]
[objectToExtend, =, callTarget, ., getNext, (, ), ;, Node, extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =]
[getNext, (, ), ;, Node, extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (]
[getNext, (, ), ;, Node, extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (]
[), ;, Node, extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==]
[extendArg, =, objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null, ), {]
[objectToExtend, ., getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null, ), {, extendArg, =]
[getNext, (, ), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null, ), {, extendArg, =, objectToExtend, ;]
[), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null, ), {, extendArg, =, objectToExtend, ;, objectToExtend, =]
[), ;, boolean, ensureObjectDefined, =, true, ;, if, (, extendArg, ==, null, ), {, extendArg, =, objectToExtend, ;, objectToExtend, =]
[;, if, (, extendArg, ==, null, ), {, extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;]
[(, extendArg, ==, null, ), {, extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =]
[extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (]
[extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (]
[extendArg, =, objectToExtend, ;, objectToExtend, =, callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (]
[callTarget, ., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&]
[., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (]
[., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (]
[., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (]
[., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (]
[., getFirstChild, (, ), ;, ensureObjectDefined, =, false, ;, }, else, if, (, objectToExtend, ., isGetProp, (, ), &&, (]
[(, objectToExtend, ., isGetProp, (, ), &&, (, objectToExtend, ., getLastChild, (, ), ., getString, (, ), ., equals, (]
[isGetProp, (, ), &&, (, objectToExtend, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ||]
[isGetProp, (, ), &&, (, objectToExtend, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ||]
[(, objectToExtend, ., getLastChild, (, ), ., getString, (, ), ., equals, (, "prototype", ), ||, convention, ., isPrototypeAlias, (]
[), ., getString, (, ), ., equals, (, "prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {]
[getString, (, ), ., equals, (, "prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =]
[(, "prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =, false, ;, }, if, (]
["prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =, false, ;, }, if, (, !]
["prototype", ), ||, convention, ., isPrototypeAlias, (, objectToExtend, ), ), ), {, ensureObjectDefined, =, false, ;, }, if, (, !]
[=, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;, }, Node, fncBlock, =]
[=, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;, }, Node, fncBlock, =]
[=, false, ;, }, if, (, !, extendArg, ., hasChildren, (, ), ), {, return, ;, }, Node, fncBlock, =]
[., hasChildren, (, ), ), {, return, ;, }, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (]
[{, return, ;, }, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, if, (]
[=, IR, ., block, (, ), ., srcref, (, n, ), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =]
[=, IR, ., block, (, ), ., srcref, (, n, ), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =]
[=, IR, ., block, (, ), ., srcref, (, n, ), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =]
[(, ), ., srcref, (, n, ), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (]
[(, ), ., srcref, (, n, ), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (]
[), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (, objectToExtend, ., cloneTree, (, ), ,]
[), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (, objectToExtend, ., cloneTree, (, ), ,]
[), ;, if, (, ensureObjectDefined, ), {, Node, assignVal, =, IR, ., or, (, objectToExtend, ., cloneTree, (, ), ,]
[assignVal, =, IR, ., or, (, objectToExtend, ., cloneTree, (, ), ,, IR, ., objectlit, (, ), ., srcref, (]
[objectToExtend, ., cloneTree, (, ), ,, IR, ., objectlit, (, ), ., srcref, (, n, ), ), ., srcref, (]
[IR, ., objectlit, (, ), ., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign, =]
[IR, ., objectlit, (, ), ., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign, =]
[IR, ., objectlit, (, ), ., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign, =]
[), ., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign, =, IR, ., assign, (]
[), ., srcref, (, n, ), ), ., srcref, (, n, ), ;, Node, assign, =, IR, ., assign, (]
[), ., srcref, (, n, ), ;, Node, assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,]
[), ;, Node, assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (]
[assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;]
[assign, =, IR, ., assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;]
[assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (]
[assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (]
[assign, (, objectToExtend, ., cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (]
[cloneTree, (, ), ,, assignVal, ), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (]
[), ., srcref, (, n, ), ;, fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (]
[fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (, n, ), ), ;, }, while, (]
[fncBlock, ., addChildrenToFront, (, IR, ., exprResult, (, assign, ), ., srcref, (, n, ), ), ;, }, while, (]
[., srcref, (, n, ), ), ;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =]
[., srcref, (, n, ), ), ;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =]
[;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, ), ;]
[;, }, while, (, extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, ), ;]
[extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, ), ;, currentProp, ., setType, (]
[extendArg, ., hasChildren, (, ), ), {, Node, currentProp, =, extendArg, ., removeFirstChild, (, ), ;, currentProp, ., setType, (]
[currentProp, =, extendArg, ., removeFirstChild, (, ), ;, currentProp, ., setType, (, Token, ., STRING, ), ;, Node, propValue, =]
[currentProp, =, extendArg, ., removeFirstChild, (, ), ;, currentProp, ., setType, (, Token, ., STRING, ), ;, Node, propValue, =]
[(, Token, ., STRING, ), ;, Node, propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (]
[(, Token, ., STRING, ), ;, Node, propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (]
[propValue, =, currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {]
[currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {, newProp, =]
[currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {, newProp, =]
[currentProp, ., removeFirstChild, (, ), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {, newProp, =]
[), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {, newProp, =, IR, ., getelem, (]
[), ;, Node, newProp, ;, if, (, currentProp, ., isQuotedString, (, ), ), {, newProp, =, IR, ., getelem, (]
[(, currentProp, ., isQuotedString, (, ), ), {, newProp, =, IR, ., getelem, (, objectToExtend, ., cloneTree, (, ), ,]
[), ), {, newProp, =, IR, ., getelem, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (]
[., getelem, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {]
[(, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =]
[(, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =]
[(, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =]
[(, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =, IR, ., getprop, (]
[(, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, else, {, newProp, =, IR, ., getprop, (]
[srcref, (, currentProp, ), ;, }, else, {, newProp, =, IR, ., getprop, (, objectToExtend, ., cloneTree, (, ), ,]
[}, else, {, newProp, =, IR, ., getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (]
[getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =]
[getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =]
[getprop, (, objectToExtend, ., cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =]
[cloneTree, (, ), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =, IR, ., assign, (]
[), ,, currentProp, ), ., srcref, (, currentProp, ), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,]
[srcref, (, currentProp, ), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (]
[), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;]
[), ;, }, Node, assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;]
[assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (]
[assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (]
[assignNode, =, IR, ., assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (]
[assign, (, newProp, ,, propValue, ), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (]
[), ., srcref, (, currentProp, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (]
[fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (, currentProp, ), ), ;, }, if, (]
[fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (, currentProp, ), ), ;, }, if, (]
[fncBlock, ., addChildToBack, (, IR, ., exprResult, (, assignNode, ), ., srcref, (, currentProp, ), ), ;, }, if, (]
[), ), ;, }, if, (, n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =]
[), ), ;, }, if, (, n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =]
[n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;]
[n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;]
[n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;]
[), ), {, Node, parent, =, n, ., getParent, (, ), ;, parent, ., getParent, (, ), ., replaceChild, (]
[{, Node, parent, =, n, ., getParent, (, ), ;, parent, ., getParent, (, ), ., replaceChild, (, parent, ,]
[., getParent, (, ), ., replaceChild, (, parent, ,, fncBlock, ), ;, }, else, {, Node, targetVal, ;, if, (]
[., getParent, (, ), ., replaceChild, (, parent, ,, fncBlock, ), ;, }, else, {, Node, targetVal, ;, if, (]
[., replaceChild, (, parent, ,, fncBlock, ), ;, }, else, {, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (]
[., replaceChild, (, parent, ,, fncBlock, ), ;, }, else, {, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (]
[}, else, {, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (, objectToExtend, ., getQualifiedName, (, ), ), ), {]
[{, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (, objectToExtend, ., getQualifiedName, (, ), ), ), {, targetVal, =]
[{, Node, targetVal, ;, if, (, "jQuery.prototype", ., equals, (, objectToExtend, ., getQualifiedName, (, ), ), ), {, targetVal, =]
[(, objectToExtend, ., getQualifiedName, (, ), ), ), {, targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {]
[., getQualifiedName, (, ), ), ), {, targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =]
[., getQualifiedName, (, ), ), ), {, targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =]
[targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }]
[targetVal, =, objectToExtend, ., removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }]
[removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (]
[removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (]
[removeFirstChild, (, ), ;, }, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (]
[}, else, {, targetVal, =, objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (, IR, ., returnNode, (]
[objectToExtend, ., detachFromParent, (, ), ;, }, fncBlock, ., addChildToBack, (, IR, ., returnNode, (, targetVal, ), ., srcref, (]
[fncBlock, ., addChildToBack, (, IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =]
[fncBlock, ., addChildToBack, (, IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =]
[IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR, ., function, (]
[IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR, ., function, (]
[IR, ., returnNode, (, targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR, ., function, (]
[targetVal, ), ., srcref, (, targetVal, ), ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (]
[targetVal, ), ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, n, ), ,]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, n, ), ,]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, n, ), ,]
[IR, ., name, (, "", ), ., srcref, (, n, ), ,, IR, ., paramList, (, ), ., srcref, (]
[(, "", ), ., srcref, (, n, ), ,, IR, ., paramList, (, ), ., srcref, (, n, ), ,]
[., srcref, (, n, ), ,, IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;]
[., srcref, (, n, ), ,, IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;]
[), ,, IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (]
[IR, ., paramList, (, ), ., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,]
[(, ), ., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;]
[(, ), ., srcref, (, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;]
[(, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (]
[(, n, ), ,, fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (]
[fncBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (]
[replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (]
[replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (]
[;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=]
[putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {]
[putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {]
[FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (]
[while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }]
[while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }]
[., reportCodeChange, (, ), ;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, objectToLoopOver, =]
[., reportCodeChange, (, ), ;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, objectToLoopOver, =]
[;, }, private, void, maybeExpandJqueryEachCall, (, NodeTraversal, t, ,, Node, n, ), {, Node, objectToLoopOver, =, n, ., getChildAtIndex, (]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, objectToLoopOver, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[(, NodeTraversal, t, ,, Node, n, ), {, Node, objectToLoopOver, =, n, ., getChildAtIndex, (, 1, ), ;, if, (]
[t, ,, Node, n, ), {, Node, objectToLoopOver, =, n, ., getChildAtIndex, (, 1, ), ;, if, (, objectToLoopOver, ==]
[n, ., getChildAtIndex, (, 1, ), ;, if, (, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =]
[n, ., getChildAtIndex, (, 1, ), ;, if, (, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =]
[(, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (]
[(, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (]
[(, objectToLoopOver, ==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (]
[==, null, ), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (, callbackFunction, ==]
[), {, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (, callbackFunction, ==, null, ||]
[{, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (, callbackFunction, ==, null, ||, !]
[{, return, ;, }, Node, callbackFunction, =, objectToLoopOver, ., getNext, (, ), ;, if, (, callbackFunction, ==, null, ||, !]
[(, ), ;, if, (, callbackFunction, ==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }]
[(, ), ;, if, (, callbackFunction, ==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }]
[(, callbackFunction, ==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (]
[==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (, null, ,]
[==, null, ||, !, callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (, null, ,]
[callbackFunction, ., isFunction, (, ), ), {, return, ;, }, peepholePasses, ., process, (, null, ,, n, ., getChildAtIndex, (]
[return, ;, }, peepholePasses, ., process, (, null, ,, n, ., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =]
[return, ;, }, peepholePasses, ., process, (, null, ,, n, ., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =]
[(, null, ,, n, ., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =, n, ., cloneTree, (, ), ;]
[,, n, ., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =]
[,, n, ., getChildAtIndex, (, 1, ), ), ;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =]
[(, 1, ), ), ;, Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (]
[Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (]
[Node, nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (]
[nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !]
[nClone, =, n, ., cloneTree, (, ), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !]
[), ;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&]
[;, objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !]
[objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (]
[objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (]
[objectToLoopOver, =, nClone, ., getChildAtIndex, (, 1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (]
[1, ), ;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&]
[;, if, (, !, objectToLoopOver, ., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (]
[., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {]
[., isObjectLit, (, ), &&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {]
[&&, !, (, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (]
[(, objectToLoopOver, ., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (, n, ,]
[., isArrayLit, (, ), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,]
[), &&, isArrayLitValidForExpansion, (, objectToLoopOver, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, )]
[(, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }, List, <, Node, >, keyNodeReferences, =]
[(, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_LIT_ERROR, ,, (, String, ), null, ), ;, return, ;, }, List, <, Node, >, keyNodeReferences, =]
[;, }, List, <, Node, >, keyNodeReferences, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, valueNodeReferences, =]
[;, }, List, <, Node, >, keyNodeReferences, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, valueNodeReferences, =]
[keyNodeReferences, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;]
[keyNodeReferences, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;]
[newArrayList, (, ), ;, List, <, Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (]
[), ;, List, <, Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, List, <, Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[Node, >, valueNodeReferences, =, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (]
[=, Lists, ., newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,]
[newArrayList, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,]
[NodeTraversal, ., traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,]
[traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,]
[traverse, (, compiler, ,, NodeUtil, ., getFunctionBody, (, callbackFunction, ), ,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,]
[,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (]
[,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (]
[,, new, FindCallbackArgumentReferences, (, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (]
[keyNodeReferences, ,, valueNodeReferences, ,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (, keyNodeReferences, ., size, (, ), ==]
[,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {]
[,, objectToLoopOver, ., isArrayLit, (, ), ), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {]
[(, ), ), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {, t, ., report, (]
[), ), ;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {, t, ., report, (, n, ,]
[;, if, (, keyNodeReferences, ., size, (, ), ==, 0, ), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,]
[keyNodeReferences, ., size, (, ), ==, 0, ), {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, )]
[t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node, fncBlock, =]
[report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (]
[n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,]
[JQUERY_USELESS_EACH_EXPANSION, ,, (, String, ), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,]
[(, String, ), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,]
[), null, ), ;, return, ;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,]
[;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (]
[;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (]
[;, }, Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (]
[Node, fncBlock, =, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=]
[=, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&]
[=, tryExpandJqueryEachCall, (, t, ,, nClone, ,, callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&]
[callbackFunction, ,, keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), ), {]
[keyNodeReferences, ,, valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (]
[valueNodeReferences, ), ;, if, (, fncBlock, !=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,]
[!=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {]
[!=, null, &&, fncBlock, ., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {]
[., hasChildren, (, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, ., report, (]
[(, ), ), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, ., report, (, n, ,]
[), {, replaceOriginalJqueryEachCall, (, n, ,, fncBlock, ), ;, }, else, {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,]
[(, n, ,, fncBlock, ), ;, }, else, {, t, ., report, (, n, ,, JQUERY_USELESS_EACH_EXPANSION, ,, (, String, )]
[,, Node, callbackFunction, ,, List, <, Node, >, keyNodes, ,, List, <, Node, >, valueNodes, ), {, Node, callTarget, =]
[,, Node, callbackFunction, ,, List, <, Node, >, keyNodes, ,, List, <, Node, >, valueNodes, ), {, Node, callTarget, =]
[,, List, <, Node, >, valueNodes, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =]
[,, List, <, Node, >, valueNodes, ), {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =]
[callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, Node, fncBlock, =]
[callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, Node, fncBlock, =]
[callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, Node, fncBlock, =]
[Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (]
[(, ), ;, Node, fncBlock, =, IR, ., block, (, ), ., srcref, (, callTarget, ), ;, boolean, isValidExpansion, =]
[=, IR, ., block, (, ), ., srcref, (, callTarget, ), ;, boolean, isValidExpansion, =, true, ;, Node, key, =]
[=, IR, ., block, (, ), ., srcref, (, callTarget, ), ;, boolean, isValidExpansion, =, true, ;, Node, key, =]
[(, callTarget, ), ;, boolean, isValidExpansion, =, true, ;, Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,, val, =]
[true, ;, Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,, val, =, null, ;, for, (, int, i, =]
[Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,, val, =, null, ;, for, (, int, i, =, 0, ;]
[Node, key, =, objectToLoopOver, ., getFirstChild, (, ), ,, val, =, null, ;, for, (, int, i, =, 0, ;]
[=, objectToLoopOver, ., getFirstChild, (, ), ,, val, =, null, ;, for, (, int, i, =, 0, ;, key, !=]
[., getFirstChild, (, ), ,, val, =, null, ;, for, (, int, i, =, 0, ;, key, !=, null, ;]
[(, ), ,, val, =, null, ;, for, (, int, i, =, 0, ;, key, !=, null, ;, key, =]
[(, ), ,, val, =, null, ;, for, (, int, i, =, 0, ;, key, !=, null, ;, key, =]
[;, for, (, int, i, =, 0, ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ,]
[;, for, (, int, i, =, 0, ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ,]
[0, ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ,, i, ++, ), {, if, (]
[0, ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ,, i, ++, ), {, if, (]
[key, !=, null, ;, key, =, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key, !=]
[=, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key, !=, null, ), {, if, (]
[=, key, ., getNext, (, ), ,, i, ++, ), {, if, (, key, !=, null, ), {, if, (]
[i, ++, ), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {]
[), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =]
[), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =]
[), {, if, (, key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =]
[key, !=, null, ), {, if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =, IR, ., number, (]
[if, (, objectToLoopOver, ., isArrayLit, (, ), ), {, val, =, IR, ., number, (, i, ), ., srcref, (]
[), ), {, val, =, IR, ., number, (, i, ), ., srcref, (, key, ), ;, }, else, {]
[{, val, =, IR, ., number, (, i, ), ., srcref, (, key, ), ;, }, else, {, val, =]
[{, val, =, IR, ., number, (, i, ), ., srcref, (, key, ), ;, }, else, {, val, =]
[;, }, else, {, val, =, key, ., getFirstChild, (, ), ;, }, }, List, <, Node, >, newKeys, =]
[;, }, else, {, val, =, key, ., getFirstChild, (, ), ;, }, }, List, <, Node, >, newKeys, =]
[}, }, List, <, Node, >, newKeys, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, newValues, =]
[}, }, List, <, Node, >, newKeys, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, newValues, =]
[), ;, List, <, Node, >, newValues, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, origGetElems, =]
[), ;, List, <, Node, >, newValues, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, origGetElems, =]
[), ;, List, <, Node, >, origGetElems, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, newGetProps, =]
[), ;, List, <, Node, >, origGetElems, =, Lists, ., newArrayList, (, ), ;, List, <, Node, >, newGetProps, =]
[(, ), ;, List, <, Node, >, newGetProps, =, Lists, ., newArrayList, (, ), ;, for, (, int, j, =]
[;, List, <, Node, >, newGetProps, =, Lists, ., newArrayList, (, ), ;, for, (, int, j, =, 0, ;]
[;, List, <, Node, >, newGetProps, =, Lists, ., newArrayList, (, ), ;, for, (, int, j, =, 0, ;]
[<, Node, >, newGetProps, =, Lists, ., newArrayList, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[<, Node, >, newGetProps, =, Lists, ., newArrayList, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[., newArrayList, (, ), ;, for, (, int, j, =, 0, ;, j, <, keyNodes, ., size, (, ), ;]
[., newArrayList, (, ), ;, for, (, int, j, =, 0, ;, j, <, keyNodes, ., size, (, ), ;]
[int, j, =, 0, ;, j, <, keyNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =]
[int, j, =, 0, ;, j, <, keyNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =]
[;, j, <, keyNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (]
[(, ), ;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (, j, ), ;, Node, ancestor, =]
[(, ), ;, j, ++, ), {, Node, origNode, =, keyNodes, ., get, (, j, ), ;, Node, ancestor, =]
[=, keyNodes, ., get, (, j, ), ;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =]
[=, keyNodes, ., get, (, j, ), ;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =]
[=, keyNodes, ., get, (, j, ), ;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =]
[(, j, ), ;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =, IR, ., string, (]
[(, j, ), ;, Node, ancestor, =, origNode, ., getParent, (, ), ;, Node, newNode, =, IR, ., string, (]
[getParent, (, ), ;, Node, newNode, =, IR, ., string, (, key, ., getString, (, ), ), ., srcref, (]
[;, Node, newNode, =, IR, ., string, (, key, ., getString, (, ), ), ., srcref, (, key, ), ;]
[;, Node, newNode, =, IR, ., string, (, key, ., getString, (, ), ), ., srcref, (, key, ), ;]
[IR, ., string, (, key, ., getString, (, ), ), ., srcref, (, key, ), ;, newKeys, ., add, (]
[(, key, ., getString, (, ), ), ., srcref, (, key, ), ;, newKeys, ., add, (, newNode, ), ;]
[(, key, ., getString, (, ), ), ., srcref, (, key, ), ;, newKeys, ., add, (, newNode, ), ;]
[(, ), ), ., srcref, (, key, ), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (]
[), ., srcref, (, key, ), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,]
[), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (]
[), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (]
[), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (]
[), ;, newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (]
[newKeys, ., add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=]
[add, (, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&]
[(, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !]
[(, newNode, ), ;, ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !]
[ancestor, ., replaceChild, (, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (]
[(, origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&]
[origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !]
[origNode, ,, newNode, ), ;, while, (, ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !]
[ancestor, !=, null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (, ), ), {]
[null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =]
[null, &&, !, NodeUtil, ., isStatement, (, ancestor, ), &&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =]
[&&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (]
[&&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (]
[&&, !, ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (]
[ancestor, ., isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=]
[isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=, null, &&]
[isGetElem, (, ), ), {, ancestor, =, ancestor, ., getParent, (, ), ;, }, if, (, ancestor, !=, null, &&]
[(, ), ;, }, if, (, ancestor, !=, null, &&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =]
[if, (, ancestor, !=, null, &&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (]
[if, (, ancestor, !=, null, &&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (]
[if, (, ancestor, !=, null, &&, ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (]
[ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||]
[ancestor, ., isGetElem, (, ), ), {, Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||]
[Node, propObject, =, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||, propObject, ., isGetElem, (, ), ), {]
[=, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||, propObject, ., isGetElem, (, ), ), {, propObject, =]
[=, ancestor, ;, while, (, propObject, ., isGetProp, (, ), ||, propObject, ., isGetElem, (, ), ), {, propObject, =]
[||, propObject, ., isGetElem, (, ), ), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =]
[||, propObject, ., isGetElem, (, ), ), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =]
[), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;]
[), {, propObject, =, propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;]
[propObject, ., getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;, peepholePasses, ., process, (]
[getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;, peepholePasses, ., process, (, null, ,]
[getFirstChild, (, ), ;, }, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;, peepholePasses, ., process, (, null, ,]
[}, Node, ancestorClone, =, ancestor, ., cloneTree, (, ), ;, peepholePasses, ., process, (, null, ,, ancestorClone, ., getChildAtIndex, (]
[(, ), ;, peepholePasses, ., process, (, null, ,, ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =]
[(, ), ;, peepholePasses, ., process, (, null, ,, ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =]
[., process, (, null, ,, ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (]
[ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (]
[ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (]
[ancestorClone, ., getChildAtIndex, (, 1, ), ), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (]
[), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, ), &&]
[), ;, Node, prop, =, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, ), &&]
[=, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (]
[=, ancestorClone, ., getChildAtIndex, (, 1, ), ;, if, (, prop, ., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (]
[., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, Node, target, =]
[., isString, (, ), &&, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, Node, target, =]
[prop, ., getString, (, ), ), ), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =]
[prop, ., getString, (, ), ), ), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =]
[), ), ), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (]
[), ), ), {, Node, target, =, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (]
[=, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (, target, ., detachFromParent, (, ), ,]
[=, ancestorClone, ., getFirstChild, (, ), ;, Node, newGetProp, =, IR, ., getprop, (, target, ., detachFromParent, (, ), ,]
[Node, newGetProp, =, IR, ., getprop, (, target, ., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), ), ;]
[Node, newGetProp, =, IR, ., getprop, (, target, ., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), ), ;]
[., getprop, (, target, ., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), ), ;, newGetProps, ., add, (]
[target, ., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;]
[target, ., detachFromParent, (, ), ,, prop, ., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;]
[), ,, prop, ., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (]
[., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;]
[., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;]
[., detachFromParent, (, ), ), ;, newGetProps, ., add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;]
[add, (, newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;, ancestor, ., getParent, (, ), ., replaceChild, (]
[newGetProp, ), ;, origGetElems, ., add, (, ancestor, ), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,]
[), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (]
[), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (]
[), ;, ancestor, ., getParent, (, ), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (]
[), ., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString, (, ), &&]
[., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString, (, ), &&, !]
[., replaceChild, (, ancestor, ,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString, (, ), &&, !]
[,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (]
[,, newGetProp, ), ;, }, else, {, if, (, prop, ., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (]
[(, prop, ., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {]
[(, prop, ., isString, (, ), &&, !, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {]
[(, ), &&, !, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, t, ., report, (]
[&&, !, NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, t, ., report, (, n, ,]
[NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,]
[NodeUtil, ., isValidPropertyName, (, prop, ., getString, (, ), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,]
[), ), ), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }]
[), {, t, ., report, (, n, ,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =]
[,, JQUERY_UNABLE_TO_EXPAND_INVALID_NAME_ERROR, ,, prop, ., getString, (, ), ), ;, }, isValidExpansion, =, false, ;, }, }, }, if, (]
[), ;, }, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =]
[}, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;]
[}, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;]
[}, isValidExpansion, =, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;]
[=, false, ;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;, val, !=]
[;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;, val, !=, null, &&]
[;, }, }, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;, val, !=, null, &&]
[}, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;, val, !=, null, &&, j, <]
[}, }, if, (, isValidExpansion, ), {, for, (, int, j, =, 0, ;, val, !=, null, &&, j, <]
[{, for, (, int, j, =, 0, ;, val, !=, null, &&, j, <, valueNodes, ., size, (, ), ;]
[{, for, (, int, j, =, 0, ;, val, !=, null, &&, j, <, valueNodes, ., size, (, ), ;]
[;, val, !=, null, &&, j, <, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =]
[;, val, !=, null, &&, j, <, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =]
[&&, j, <, valueNodes, ., size, (, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (]
[(, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =]
[(, ), ;, j, ++, ), {, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =]
[{, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, ., cloneTree, (, ), ;]
[{, Node, origNode, =, valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, ., cloneTree, (, ), ;]
[valueNodes, ., get, (, j, ), ;, Node, newNode, =, val, ., cloneTree, (, ), ;, newValues, ., add, (]
[(, j, ), ;, Node, newNode, =, val, ., cloneTree, (, ), ;, newValues, ., add, (, newNode, ), ;]
[(, j, ), ;, Node, newNode, =, val, ., cloneTree, (, ), ;, newValues, ., add, (, newNode, ), ;]
[(, j, ), ;, Node, newNode, =, val, ., cloneTree, (, ), ;, newValues, ., add, (, newNode, ), ;]
[., cloneTree, (, ), ;, newValues, ., add, (, newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (]
[(, ), ;, newValues, ., add, (, newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,]
[newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =]
[newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =]
[newNode, ), ;, origNode, ., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =]
[., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR, ., function, (]
[., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR, ., function, (]
[., getParent, (, ), ., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR, ., function, (]
[., replaceChild, (, origNode, ,, newNode, ), ;, }, Node, fnc, =, IR, ., function, (, IR, ., name, (]
[newNode, ), ;, }, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (]
[}, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, key, ), ,]
[}, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, key, ), ,]
[}, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, key, ), ,]
[IR, ., name, (, "", ), ., srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (]
[(, "", ), ., srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (, key, ), ,]
[(, "", ), ., srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (, key, ), ,]
[(, "", ), ., srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (, key, ), ,]
[srcref, (, key, ), ,, IR, ., paramList, (, ), ., srcref, (, key, ), ,, callbackFunction, ., getChildAtIndex, (]
[., srcref, (, key, ), ,, callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (]
[callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call, =]
[callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call, =]
[callbackFunction, ., getChildAtIndex, (, 2, ), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call, =]
[2, ), ., cloneTree, (, ), ), ., srcref, (, key, ), ;, Node, call, =, IR, ., call, (]
[), ), ., srcref, (, key, ), ;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (]
[srcref, (, key, ), ;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key, ), ;]
[srcref, (, key, ), ;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key, ), ;]
[;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp, (]
[;, Node, call, =, IR, ., call, (, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp, (]
[IR, ., call, (, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[(, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[(, fnc, ), ., srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;]
[srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (]
[srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (]
[srcref, (, key, ), ;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (]
[;, call, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (]
[Node, ., FREE_CALL, ,, true, ), ;, fncBlock, ., addChildToBack, (, IR, ., exprResult, (, call, ), ., srcref, (]
[(, IR, ., exprResult, (, call, ), ., srcref, (, call, ), ), ;, }, for, (, int, j, =]
[., exprResult, (, call, ), ., srcref, (, call, ), ), ;, }, for, (, int, j, =, 0, ;]
[., exprResult, (, call, ), ., srcref, (, call, ), ), ;, }, for, (, int, j, =, 0, ;]
[(, call, ), ., srcref, (, call, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[(, call, ), ., srcref, (, call, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[call, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;]
[call, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;]
[}, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j, ++, ), {]
[j, =, 0, ;, j, <, newGetProps, ., size, (, ), ;, j, ++, ), {, newGetProps, ., get, (]
[(, ), ;, j, ++, ), {, newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (]
[(, ), ;, j, ++, ), {, newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (]
[++, ), {, newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (]
[newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (, j, ), ,]
[newGetProps, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (, j, ), ,]
[j, ), ., getParent, (, ), ., replaceChild, (, newGetProps, ., get, (, j, ), ,, origGetElems, ., get, (]
[., get, (, j, ), ,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =]
[(, j, ), ,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;]
[(, j, ), ,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;]
[), ,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[), ,, origGetElems, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;]
[j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;]
[}, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j, ++, ), {]
[j, =, 0, ;, j, <, newKeys, ., size, (, ), ;, j, ++, ), {, newKeys, ., get, (]
[(, ), ;, j, ++, ), {, newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (]
[(, ), ;, j, ++, ), {, newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (]
[++, ), {, newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (]
[newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (, j, ), ,]
[newKeys, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (, j, ), ,]
[j, ), ., getParent, (, ), ., replaceChild, (, newKeys, ., get, (, j, ), ,, keyNodes, ., get, (]
[., get, (, j, ), ,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =]
[(, j, ), ,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;]
[(, j, ), ,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;]
[), ,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[), ,, keyNodes, ., get, (, j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <]
[j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;]
[j, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;]
[}, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j, ++, ), {]
[}, for, (, int, j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j, ++, ), {]
[j, =, 0, ;, j, <, newValues, ., size, (, ), ;, j, ++, ), {, newValues, ., get, (]
[(, ), ;, j, ++, ), {, newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (]
[(, ), ;, j, ++, ), {, newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (]
[++, ), {, newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (]
[newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (, j, ), ,]
[newValues, ., get, (, j, ), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (, j, ), ,]
[j, ), ., getParent, (, ), ., replaceChild, (, newValues, ., get, (, j, ), ,, valueNodes, ., get, (]
[replaceChild, (, newValues, ., get, (, j, ), ,, valueNodes, ., get, (, j, ), ), ;, }, if, (]
[(, newValues, ., get, (, j, ), ,, valueNodes, ., get, (, j, ), ), ;, }, if, (, !]
[(, j, ), ,, valueNodes, ., get, (, j, ), ), ;, }, if, (, !, isValidExpansion, ), {, return]
[., get, (, j, ), ), ;, }, if, (, !, isValidExpansion, ), {, return, null, ;, }, }, return]
[;, }, }, return, fncBlock, ;, }, private, void, replaceOriginalJqueryEachCall, (, Node, n, ,, Node, expandedBlock, ), {, if, (]
[;, }, }, return, fncBlock, ;, }, private, void, replaceOriginalJqueryEachCall, (, Node, n, ,, Node, expandedBlock, ), {, if, (]
[;, }, }, return, fncBlock, ;, }, private, void, replaceOriginalJqueryEachCall, (, Node, n, ,, Node, expandedBlock, ), {, if, (]
[Node, expandedBlock, ), {, if, (, n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =]
[Node, expandedBlock, ), {, if, (, n, ., getParent, (, ), ., isExprResult, (, ), ), {, Node, parent, =]
[(, ), ., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, Node, grandparent, =]
[(, ), ., isExprResult, (, ), ), {, Node, parent, =, n, ., getParent, (, ), ;, Node, grandparent, =]
[parent, =, n, ., getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, Node, insertAfter, =]
[getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, Node, insertAfter, =, parent, ;, while, (]
[getParent, (, ), ;, Node, grandparent, =, parent, ., getParent, (, ), ;, Node, insertAfter, =, parent, ;, while, (]
[(, ), ;, Node, insertAfter, =, parent, ;, while, (, expandedBlock, ., hasChildren, (, ), ), {, Node, child, =]
[(, ), ;, Node, insertAfter, =, parent, ;, while, (, expandedBlock, ., hasChildren, (, ), ), {, Node, child, =]
[(, ), ;, Node, insertAfter, =, parent, ;, while, (, expandedBlock, ., hasChildren, (, ), ), {, Node, child, =]
[expandedBlock, ., hasChildren, (, ), ), {, Node, child, =, expandedBlock, ., getFirstChild, (, ), ., detachFromParent, (, ), ;]
[expandedBlock, ., hasChildren, (, ), ), {, Node, child, =, expandedBlock, ., getFirstChild, (, ), ., detachFromParent, (, ), ;]
[), ), {, Node, child, =, expandedBlock, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (]
[{, Node, child, =, expandedBlock, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child, ,]
[=, expandedBlock, ., getFirstChild, (, ), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;]
[., getFirstChild, (, ), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =]
[), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =, child, ;, }]
[), ., detachFromParent, (, ), ;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =, child, ;, }]
[), ;, grandparent, ., addChildAfter, (, child, ,, insertAfter, ), ;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (]
[), ;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =]
[), ;, insertAfter, =, child, ;, }, grandparent, ., removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =]
[removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =]
[removeChild, (, parent, ), ;, }, else, {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =]
[else, {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;]
[else, {, Node, callTarget, =, n, ., getFirstChild, (, ), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;]
[), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =]
[), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =]
[), ;, Node, objectToLoopOver, =, callTarget, ., getNext, (, ), ;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =]
[=, callTarget, ., getNext, (, ), ;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =, IR, ., returnNode, (]
[), ;, objectToLoopOver, ., detachFromParent, (, ), ;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, ), ., srcref, (]
[., detachFromParent, (, ), ;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;]
[., detachFromParent, (, ), ;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;]
[;, Node, ret, =, IR, ., returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (]
[returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =]
[returnNode, (, objectToLoopOver, ), ., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =]
[., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (]
[., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (]
[., srcref, (, callTarget, ), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (]
[), ;, expandedBlock, ., addChildToBack, (, ret, ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (]
[(, ret, ), ;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, callTarget, ), ,]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, callTarget, ), ,]
[;, Node, fnc, =, IR, ., function, (, IR, ., name, (, "", ), ., srcref, (, callTarget, ), ,]
[IR, ., name, (, "", ), ., srcref, (, callTarget, ), ,, IR, ., paramList, (, ), ., srcref, (]
[(, "", ), ., srcref, (, callTarget, ), ,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,]
[., srcref, (, callTarget, ), ,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;]
[., srcref, (, callTarget, ), ,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;]
[), ,, IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (]
[IR, ., paramList, (, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,]
[(, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;]
[(, ), ., srcref, (, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;]
[(, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (]
[(, callTarget, ), ,, expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (]
[expandedBlock, ), ;, n, ., replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (]
[replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (]
[replaceChild, (, callTarget, ,, fnc, ), ;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (]
[;, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=]
[putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {]
[putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {]
[FREE_CALL, ,, true, ), ;, while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (]
[while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }]
[while, (, fnc, ., getNext, (, ), !=, null, ), {, n, ., removeChildAfter, (, fnc, ), ;, }, }]
[., reportCodeChange, (, ), ;, }, private, boolean, isArrayLitValidForExpansion, (, Node, n, ), {, Iterator, <, Node, >, iter, =]
[., reportCodeChange, (, ), ;, }, private, boolean, isArrayLitValidForExpansion, (, Node, n, ), {, Iterator, <, Node, >, iter, =]
[., reportCodeChange, (, ), ;, }, private, boolean, isArrayLitValidForExpansion, (, Node, n, ), {, Iterator, <, Node, >, iter, =]
[), {, Iterator, <, Node, >, iter, =, n, ., children, (, ), ., iterator, (, ), ;, while, (]
[), {, Iterator, <, Node, >, iter, =, n, ., children, (, ), ., iterator, (, ), ;, while, (]
[children, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, Node, child, =]
[children, (, ), ., iterator, (, ), ;, while, (, iter, ., hasNext, (, ), ), {, Node, child, =]
[while, (, iter, ., hasNext, (, ), ), {, Node, child, =, iter, ., next, (, ), ;, if, (]
[(, iter, ., hasNext, (, ), ), {, Node, child, =, iter, ., next, (, ), ;, if, (, !]
[(, iter, ., hasNext, (, ), ), {, Node, child, =, iter, ., next, (, ), ;, if, (, !]
[Node, child, =, iter, ., next, (, ), ;, if, (, !, child, ., isString, (, ), ), {, return]
[next, (, ), ;, if, (, !, child, ., isString, (, ), ), {, return, false, ;, }, }, return]
[(, Node, functionRoot, ,, List, <, Node, >, keyReferences, ,, List, <, Node, >, valueReferences, ,, boolean, useArrayMode, ), {]
[(, Node, functionRoot, ,, List, <, Node, >, keyReferences, ,, List, <, Node, >, valueReferences, ,, boolean, useArrayMode, ), {]
[List, <, Node, >, keyReferences, ,, List, <, Node, >, valueReferences, ,, boolean, useArrayMode, ), {, Preconditions, ., checkState, (]
[List, <, Node, >, keyReferences, ,, List, <, Node, >, valueReferences, ,, boolean, useArrayMode, ), {, Preconditions, ., checkState, (]
[valueReferences, ,, boolean, useArrayMode, ), {, Preconditions, ., checkState, (, functionRoot, ., isFunction, (, ), ), ;, String, keyString, =]
[), {, Preconditions, ., checkState, (, functionRoot, ., isFunction, (, ), ), ;, String, keyString, =, null, ,, valueString, =]
[(, functionRoot, ., isFunction, (, ), ), ;, String, keyString, =, null, ,, valueString, =, null, ;, Node, callbackParams, =]
[(, functionRoot, ., isFunction, (, ), ), ;, String, keyString, =, null, ,, valueString, =, null, ;, Node, callbackParams, =]
[(, ), ), ;, String, keyString, =, null, ,, valueString, =, null, ;, Node, callbackParams, =, NodeUtil, ., getFunctionParameters, (]
[=, null, ,, valueString, =, null, ;, Node, callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;, Node, param, =]
[=, null, ,, valueString, =, null, ;, Node, callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;, Node, param, =]
[callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (]
[callbackParams, =, NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (]
[NodeUtil, ., getFunctionParameters, (, functionRoot, ), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=]
[(, functionRoot, ), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=, null, ), {]
[(, functionRoot, ), ;, Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=, null, ), {]
[Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (]
[Node, param, =, callbackParams, ., getFirstChild, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (]
[), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, keyString, =]
[if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, keyString, =]
[{, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, keyString, =, param, ., getString, (, ), ;]
[., checkState, (, param, ., isName, (, ), ), ;, keyString, =, param, ., getString, (, ), ;, param, =]
[., checkState, (, param, ., isName, (, ), ), ;, keyString, =, param, ., getString, (, ), ;, param, =]
[), ;, keyString, =, param, ., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (]
[), ;, keyString, =, param, ., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (]
[keyString, =, param, ., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (, param, !=]
[., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (, param, !=, null, ), {]
[., getString, (, ), ;, param, =, param, ., getNext, (, ), ;, if, (, param, !=, null, ), {]
[;, param, =, param, ., getNext, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (]
[;, param, =, param, ., getNext, (, ), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (]
[), ;, if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;]
[if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, valueString, =]
[if, (, param, !=, null, ), {, Preconditions, ., checkState, (, param, ., isName, (, ), ), ;, valueString, =]
[., checkState, (, param, ., isName, (, ), ), ;, valueString, =, param, ., getString, (, ), ;, }, }]
[., checkState, (, param, ., isName, (, ), ), ;, valueString, =, param, ., getString, (, ), ;, }, }]
[., isName, (, ), ), ;, valueString, =, param, ., getString, (, ), ;, }, }, this, ., keyName, =]
[(, ), ), ;, valueString, =, param, ., getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;]
[(, ), ), ;, valueString, =, param, ., getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;]
[valueString, =, param, ., getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName, =]
[getString, (, ), ;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName, =, valueString, ;, if, (]
[;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {]
[;, }, }, this, ., keyName, =, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {]
[., keyName, =, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =]
[=, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;]
[=, keyString, ;, this, ., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;]
[., valueName, =, valueString, ;, if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =]
[if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {]
[if, (, useArrayMode, ), {, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {]
[{, this, ., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =]
[., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;]
[., keyReferences, =, valueReferences, ;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;]
[;, this, ., valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =]
[valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;, }]
[valueReferences, =, keyReferences, ;, }, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;, }]
[}, else, {, this, ., keyReferences, =, keyReferences, ;, this, ., valueReferences, =, valueReferences, ;, }, this, ., startingScope, =]
[., startingScope, =, null, ;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =]
[., startingScope, =, null, ;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =]
[;, }, private, boolean, isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (]
[isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (, name, ), ;, return]
[isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (, name, ), ;, return]
[isShadowed, (, String, name, ,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (, name, ), ;, return]
[String, name, ,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (, name, ), ;, return, nameVar, !=]
[,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (, name, ), ;, return, nameVar, !=, null, &&]
[,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (, name, ), ;, return, nameVar, !=, null, &&]
[,, Scope, scope, ), {, Var, nameVar, =, scope, ., getVar, (, name, ), ;, return, nameVar, !=, null, &&]
[nameVar, =, scope, ., getVar, (, name, ), ;, return, nameVar, !=, null, &&, nameVar, ., getScope, (, ), !=]
[nameVar, =, scope, ., getVar, (, name, ), ;, return, nameVar, !=, null, &&, nameVar, ., getScope, (, ), !=]
[}, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, boolean, isThis, =]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, boolean, isThis, =, false, ;, if, (]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, boolean, isThis, =, false, ;, if, (]
[void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, boolean, isThis, =, false, ;, if, (]
[Node, n, ,, Node, parent, ), {, boolean, isThis, =, false, ;, if, (, t, ., getScope, (, ), ==]
[Node, n, ,, Node, parent, ), {, boolean, isThis, =, false, ;, if, (, t, ., getScope, (, ), ==]
[), {, boolean, isThis, =, false, ;, if, (, t, ., getScope, (, ), ==, this, ., startingScope, ), {]
[boolean, isThis, =, false, ;, if, (, t, ., getScope, (, ), ==, this, ., startingScope, ), {, isThis, =]
[boolean, isThis, =, false, ;, if, (, t, ., getScope, (, ), ==, this, ., startingScope, ), {, isThis, =]
[getScope, (, ), ==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if, (]
[getScope, (, ), ==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if, (]
[), ==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||]
[), ==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||]
[), ==, this, ., startingScope, ), {, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||]
[{, isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, ), &&]
[isThis, =, n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, ), &&, !]
[n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, ), &&, !, isShadowed, (]
[n, ., isThis, (, ), ;, }, if, (, isThis, ||, n, ., isName, (, ), &&, !, isShadowed, (]
[}, if, (, isThis, ||, n, ., isName, (, ), &&, !, isShadowed, (, n, ., getString, (, ), ,]
[}, if, (, isThis, ||, n, ., isName, (, ), &&, !, isShadowed, (, n, ., getString, (, ), ,]
[!, isShadowed, (, n, ., getString, (, ), ,, t, ., getScope, (, ), ), ), {, String, nodeValue, =]
[!, isShadowed, (, n, ., getString, (, ), ,, t, ., getScope, (, ), ), ), {, String, nodeValue, =]
[(, n, ., getString, (, ), ,, t, ., getScope, (, ), ), ), {, String, nodeValue, =, isThis, ?]
[., getString, (, ), ,, t, ., getScope, (, ), ), ), {, String, nodeValue, =, isThis, ?, null, :]
[., getString, (, ), ,, t, ., getScope, (, ), ), ), {, String, nodeValue, =, isThis, ?, null, :]
[(, ), ), ), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (]
[(, ), ), ), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (]
[(, ), ), ), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (]
[), ), ), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !]
[), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&]
[), {, String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&]
[String, nodeValue, =, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&, keyName, !=]
[=, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&]
[=, isThis, ?, null, :, n, ., getString, (, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&]
[:, n, ., getString, (, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (]
[(, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, ), ), {]
[(, ), ;, if, (, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, ), ), {]
[(, !, isThis, &&, keyName, !=, null, &&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (]
[&&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (]
[&&, nodeValue, ., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (]
[., equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||]
[equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (]
[equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (]
[equals, (, keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (]
[keyName, ), ), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=]
[), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&]
[), {, keyReferences, ., add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&]
[add, (, n, ), ;, }, else, if, (, isThis, ||, (, valueName, !=, null, &&, nodeValue, ., equals, (]
[}, else, if, (, isThis, ||, (, valueName, !=, null, &&, nodeValue, ., equals, (, valueName, ), ), ), {]
[}, else, if, (, isThis, ||, (, valueName, !=, null, &&, nodeValue, ., equals, (, valueName, ), ), ), {]
[isThis, ||, (, valueName, !=, null, &&, nodeValue, ., equals, (, valueName, ), ), ), {, valueReferences, ., add, (]
[add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[add, (, n, ), ;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[;, }, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, this, ., startingScope, ==]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, this, ., startingScope, ==, null, ), {]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, this, ., startingScope, ==, null, ), {]
[void, enterScope, (, NodeTraversal, t, ), {, if, (, this, ., startingScope, ==, null, ), {, this, ., startingScope, =]
[void, enterScope, (, NodeTraversal, t, ), {, if, (, this, ., startingScope, ==, null, ), {, this, ., startingScope, =]
