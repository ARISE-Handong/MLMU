[;, private, final, Node, root, ;, private, final, String, sourceName, ;, public, JSTypeExpression, (, Node, root, ,, String, sourceName, )]
[=, root, ;, this, ., sourceName, =, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if]
[., root, =, root, ;, this, ., sourceName, =, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, )]
[;, this, ., sourceName, =, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (, expr]
[=, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (, expr, ., isOptionalArg, (, )]
[., sourceName, =, sourceName, ;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (, expr, ., isOptionalArg]
[;, }, public, static, JSTypeExpression, makeOptionalArg, (, JSTypeExpression, expr, ), {, if, (, expr, ., isOptionalArg, (, ), ||, expr]
[), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,, expr]
[||, expr, ., isVarArgs, (, ), ), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node]
[., isOptionalArg, (, ), ||, expr, ., isVarArgs, (, ), ), {, return, expr, ;, }, else, {, return, new]
[), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,, expr]
[., isVarArgs, (, ), ), {, return, expr, ;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token]
[;, }, else, {, return, new, JSTypeExpression, (, new, Node, (, Token, ., EQUALS, ,, expr, ., root, ), ,]
[;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, ., getType, (, ), ==, Token, ., EQUALS, ;]
[,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, ., getType, (, )]
[,, expr, ., root, ), ,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return]
[., EQUALS, ,, expr, ., root, ), ,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, )]
[), ,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, ., getType, (]
[., root, ), ,, expr, ., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, .]
[), ;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, ., getType, (, ), ==, Token, ., EQUALS]
[., sourceName, ), ;, }, }, public, boolean, isOptionalArg, (, ), {, return, root, ., getType, (, ), ==, Token]
[;, }, public, boolean, isVarArgs, (, ), {, return, root, ., getType, (, ), ==, Token, ., ELLIPSIS, ;, }]
[==, Token, ., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return, root, ., getType, (, ), ==, Token]
[., getType, (, ), ==, Token, ., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return, root, ., getType]
[;, }, public, boolean, isVarArgs, (, ), {, return, root, ., getType, (, ), ==, Token, ., ELLIPSIS, ;, }]
[., EQUALS, ;, }, public, boolean, isVarArgs, (, ), {, return, root, ., getType, (, ), ==, Token, ., ELLIPSIS]
[;, }, public, JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =, registry]
[==, Token, ., ELLIPSIS, ;, }, public, JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {]
[., getType, (, ), ==, Token, ., ELLIPSIS, ;, }, public, JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,]
[;, }, public, JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type, =, registry]
[., ELLIPSIS, ;, }, public, JSType, evaluate, (, StaticScope, <, JSType, >, scope, ,, JSTypeRegistry, registry, ), {, JSType, type]
[;, root, ., setJSType, (, type, ), ;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other]
[., createFromTypeNodes, (, root, ,, sourceName, ,, scope, ), ;, root, ., setJSType, (, type, ), ;, return, type, ;]
[,, sourceName, ,, scope, ), ;, root, ., setJSType, (, type, ), ;, return, type, ;, }, @, Override, public]
[,, scope, ), ;, root, ., setJSType, (, type, ), ;, return, type, ;, }, @, Override, public, boolean, equals]
[), ;, root, ., setJSType, (, type, ), ;, return, type, ;, }, @, Override, public, boolean, equals, (, Object]
[;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression, &&]
[., setJSType, (, type, ), ;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {]
[), ;, return, type, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, return, other, instanceof, JSTypeExpression, &&, (, (, JSTypeExpression]
[;, }, @, Override, public, int, hashCode, (, ), {, return, root, ., toStringTree, (, ), ., hashCode, (, )]
[&&, (, (, JSTypeExpression, ), other, ), ., root, ., isEquivalentTo, (, root, ), ;, }, @, Override, public, int]
[instanceof, JSTypeExpression, &&, (, (, JSTypeExpression, ), other, ), ., root, ., isEquivalentTo, (, root, ), ;, }, @, Override]
[;, }, @, Override, public, int, hashCode, (, ), {, return, root, ., toStringTree, (, ), ., hashCode, (, )]
[., isEquivalentTo, (, root, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, root, ., toStringTree, (]
[., root, ., isEquivalentTo, (, root, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, root, .]
[), ., root, ., isEquivalentTo, (, root, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, root]
[), ., root, ., isEquivalentTo, (, root, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, root]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, root, ., toStringTree, (, ), ., hashCode, (]
[;, }, public, Node, getRoot, (, ), {, return, root, ;, }, }]
[., hashCode, (, ), ;, }, public, Node, getRoot, (, ), {, return, root, ;, }, }]
[., toStringTree, (, ), ., hashCode, (, ), ;, }, public, Node, getRoot, (, ), {, return, root, ;, }]
[;, }, }]
