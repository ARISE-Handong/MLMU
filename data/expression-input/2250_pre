[commons, ., math3, ., util, ., MathUtils, ;, public, class, EmpiricalDistribution, extends, AbstractRealDistribution, {, public, static, final, int, DEFAULT_BIN_COUNT, =]
[public, class, EmpiricalDistribution, extends, AbstractRealDistribution, {, public, static, final, int, DEFAULT_BIN_COUNT, =, 1000, ;, private, static, final, String, FILE_CHARSET, =]
[final, int, DEFAULT_BIN_COUNT, =, 1000, ;, private, static, final, String, FILE_CHARSET, =, "US-ASCII", ;, private, static, final, long, serialVersionUID, =]
[=, 5729073523949762654L, ;, protected, final, RandomDataGenerator, randomData, ;, private, final, List, <, SummaryStatistics, >, binStats, ;, private, SummaryStatistics, sampleStats, =]
[randomData, ;, private, final, List, <, SummaryStatistics, >, binStats, ;, private, SummaryStatistics, sampleStats, =, null, ;, private, double, max, =]
[randomData, ;, private, final, List, <, SummaryStatistics, >, binStats, ;, private, SummaryStatistics, sampleStats, =, null, ;, private, double, max, =]
[binStats, ;, private, SummaryStatistics, sampleStats, =, null, ;, private, double, max, =, Double, ., NEGATIVE_INFINITY, ;, private, double, min, =]
[binStats, ;, private, SummaryStatistics, sampleStats, =, null, ;, private, double, max, =, Double, ., NEGATIVE_INFINITY, ;, private, double, min, =]
[private, double, max, =, Double, ., NEGATIVE_INFINITY, ;, private, double, min, =, Double, ., POSITIVE_INFINITY, ;, private, double, delta, =]
[=, Double, ., POSITIVE_INFINITY, ;, private, double, delta, =, 0d, ;, private, final, int, binCount, ;, private, boolean, loaded, =]
[=, 0d, ;, private, final, int, binCount, ;, private, boolean, loaded, =, false, ;, private, double, [, ], upperBounds, =]
[boolean, loaded, =, false, ;, private, double, [, ], upperBounds, =, null, ;, public, EmpiricalDistribution, (, ), {, this, (]
[public, EmpiricalDistribution, (, ), {, this, (, DEFAULT_BIN_COUNT, ), ;, }, public, EmpiricalDistribution, (, int, binCount, ), {, this, (]
[(, ), {, this, (, DEFAULT_BIN_COUNT, ), ;, }, public, EmpiricalDistribution, (, int, binCount, ), {, this, (, binCount, ,]
[,, new, RandomDataGenerator, (, ), ), ;, }, public, EmpiricalDistribution, (, int, binCount, ,, RandomGenerator, generator, ), {, this, (]
[RandomDataGenerator, (, ), ), ;, }, public, EmpiricalDistribution, (, int, binCount, ,, RandomGenerator, generator, ), {, this, (, binCount, ,]
[), ;, }, public, EmpiricalDistribution, (, int, binCount, ,, RandomGenerator, generator, ), {, this, (, binCount, ,, new, RandomDataGenerator, (]
[(, binCount, ,, new, RandomDataGenerator, (, generator, ), ), ;, }, public, EmpiricalDistribution, (, RandomGenerator, generator, ), {, this, (]
[,, new, RandomDataGenerator, (, generator, ), ), ;, }, public, EmpiricalDistribution, (, RandomGenerator, generator, ), {, this, (, DEFAULT_BIN_COUNT, ,]
[DEFAULT_BIN_COUNT, ,, generator, ), ;, }, @, Deprecated, public, EmpiricalDistribution, (, int, binCount, ,, RandomDataImpl, randomData, ), {, this, (]
[generator, ), ;, }, @, Deprecated, public, EmpiricalDistribution, (, int, binCount, ,, RandomDataImpl, randomData, ), {, this, (, binCount, ,]
[generator, ), ;, }, @, Deprecated, public, EmpiricalDistribution, (, int, binCount, ,, RandomDataImpl, randomData, ), {, this, (, binCount, ,]
[,, randomData, ., getDelegate, (, ), ), ;, }, @, Deprecated, public, EmpiricalDistribution, (, RandomDataImpl, randomData, ), {, this, (]
[., getDelegate, (, ), ), ;, }, @, Deprecated, public, EmpiricalDistribution, (, RandomDataImpl, randomData, ), {, this, (, DEFAULT_BIN_COUNT, ,]
[this, (, DEFAULT_BIN_COUNT, ,, randomData, ), ;, }, private, EmpiricalDistribution, (, int, binCount, ,, RandomDataGenerator, randomData, ), {, super, (]
[,, randomData, ), ;, }, private, EmpiricalDistribution, (, int, binCount, ,, RandomDataGenerator, randomData, ), {, super, (, null, ), ;]
[,, randomData, ), ;, }, private, EmpiricalDistribution, (, int, binCount, ,, RandomDataGenerator, randomData, ), {, super, (, null, ), ;]
[}, private, EmpiricalDistribution, (, int, binCount, ,, RandomDataGenerator, randomData, ), {, super, (, null, ), ;, this, ., binCount, =]
[EmpiricalDistribution, (, int, binCount, ,, RandomDataGenerator, randomData, ), {, super, (, null, ), ;, this, ., binCount, =, binCount, ;]
[EmpiricalDistribution, (, int, binCount, ,, RandomDataGenerator, randomData, ), {, super, (, null, ), ;, this, ., binCount, =, binCount, ;]
[,, RandomDataGenerator, randomData, ), {, super, (, null, ), ;, this, ., binCount, =, binCount, ;, this, ., randomData, =]
[randomData, ), {, super, (, null, ), ;, this, ., binCount, =, binCount, ;, this, ., randomData, =, randomData, ;]
[{, super, (, null, ), ;, this, ., binCount, =, binCount, ;, this, ., randomData, =, randomData, ;, binStats, =]
[>, (, ), ;, }, public, void, load, (, double, [, ], in, ), throws, NullArgumentException, {, DataAdapter, da, =]
[;, }, public, void, load, (, double, [, ], in, ), throws, NullArgumentException, {, DataAdapter, da, =, new, ArrayDataAdapter, (]
[(, double, [, ], in, ), throws, NullArgumentException, {, DataAdapter, da, =, new, ArrayDataAdapter, (, in, ), ;, try, {]
[(, double, [, ], in, ), throws, NullArgumentException, {, DataAdapter, da, =, new, ArrayDataAdapter, (, in, ), ;, try, {]
[throws, NullArgumentException, {, DataAdapter, da, =, new, ArrayDataAdapter, (, in, ), ;, try, {, da, ., computeStats, (, ), ;]
[{, DataAdapter, da, =, new, ArrayDataAdapter, (, in, ), ;, try, {, da, ., computeStats, (, ), ;, fillBinStats, (]
[=, new, ArrayDataAdapter, (, in, ), ;, try, {, da, ., computeStats, (, ), ;, fillBinStats, (, new, ArrayDataAdapter, (]
[(, ), ;, fillBinStats, (, new, ArrayDataAdapter, (, in, ), ), ;, }, catch, (, IOException, ex, ), {, throw]
[ArrayDataAdapter, (, in, ), ), ;, }, catch, (, IOException, ex, ), {, throw, new, MathInternalError, (, ), ;, }]
[in, ), ), ;, }, catch, (, IOException, ex, ), {, throw, new, MathInternalError, (, ), ;, }, loaded, =]
[}, loaded, =, true, ;, }, public, void, load, (, URL, url, ), throws, IOException, ,, NullArgumentException, ,, ZeroException, {]
[}, loaded, =, true, ;, }, public, void, load, (, URL, url, ), throws, IOException, ,, NullArgumentException, ,, ZeroException, {]
[;, }, public, void, load, (, URL, url, ), throws, IOException, ,, NullArgumentException, ,, ZeroException, {, MathUtils, ., checkNotNull, (]
[URL, url, ), throws, IOException, ,, NullArgumentException, ,, ZeroException, {, MathUtils, ., checkNotNull, (, url, ), ;, Charset, charset, =]
[URL, url, ), throws, IOException, ,, NullArgumentException, ,, ZeroException, {, MathUtils, ., checkNotNull, (, url, ), ;, Charset, charset, =]
[IOException, ,, NullArgumentException, ,, ZeroException, {, MathUtils, ., checkNotNull, (, url, ), ;, Charset, charset, =, Charset, ., forName, (]
[MathUtils, ., checkNotNull, (, url, ), ;, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, BufferedReader, in, =]
[(, url, ), ;, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, BufferedReader, in, =, new, BufferedReader, (]
[;, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, BufferedReader, in, =, new, BufferedReader, (, new, InputStreamReader, (]
[;, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, BufferedReader, in, =, new, BufferedReader, (, new, InputStreamReader, (]
[forName, (, FILE_CHARSET, ), ;, BufferedReader, in, =, new, BufferedReader, (, new, InputStreamReader, (, url, ., openStream, (, ), ,]
[BufferedReader, (, new, InputStreamReader, (, url, ., openStream, (, ), ,, charset, ), ), ;, try, {, DataAdapter, da, =]
[InputStreamReader, (, url, ., openStream, (, ), ,, charset, ), ), ;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (]
[., openStream, (, ), ,, charset, ), ), ;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;]
[., openStream, (, ), ,, charset, ), ), ;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;]
[;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;, if, (]
[;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;, if, (]
[;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;, if, (]
[new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;, if, (, sampleStats, ., getN, (, ), ==]
[), ;, da, ., computeStats, (, ), ;, if, (, sampleStats, ., getN, (, ), ==, 0, ), {, throw]
[., computeStats, (, ), ;, if, (, sampleStats, ., getN, (, ), ==, 0, ), {, throw, new, ZeroException, (]
[., computeStats, (, ), ;, if, (, sampleStats, ., getN, (, ), ==, 0, ), {, throw, new, ZeroException, (]
[;, if, (, sampleStats, ., getN, (, ), ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., URL_CONTAINS_NO_DATA, ,]
[., getN, (, ), ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., URL_CONTAINS_NO_DATA, ,, url, ), ;, }]
[(, ), ==, 0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., URL_CONTAINS_NO_DATA, ,, url, ), ;, }, in, =]
[0, ), {, throw, new, ZeroException, (, LocalizedFormats, ., URL_CONTAINS_NO_DATA, ,, url, ), ;, }, in, =, new, BufferedReader, (]
[throw, new, ZeroException, (, LocalizedFormats, ., URL_CONTAINS_NO_DATA, ,, url, ), ;, }, in, =, new, BufferedReader, (, new, InputStreamReader, (]
[throw, new, ZeroException, (, LocalizedFormats, ., URL_CONTAINS_NO_DATA, ,, url, ), ;, }, in, =, new, BufferedReader, (, new, InputStreamReader, (]
[URL_CONTAINS_NO_DATA, ,, url, ), ;, }, in, =, new, BufferedReader, (, new, InputStreamReader, (, url, ., openStream, (, ), ,]
[;, }, in, =, new, BufferedReader, (, new, InputStreamReader, (, url, ., openStream, (, ), ,, charset, ), ), ;]
[in, =, new, BufferedReader, (, new, InputStreamReader, (, url, ., openStream, (, ), ,, charset, ), ), ;, fillBinStats, (]
[BufferedReader, (, new, InputStreamReader, (, url, ., openStream, (, ), ,, charset, ), ), ;, fillBinStats, (, new, StreamDataAdapter, (]
[(, url, ., openStream, (, ), ,, charset, ), ), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;]
[., openStream, (, ), ,, charset, ), ), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;, loaded, =]
[), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;, loaded, =, true, ;, }, finally, {, try, {]
[), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;, loaded, =, true, ;, }, finally, {, try, {]
[(, IOException, ex, ), {, }, }, }, public, void, load, (, File, file, ), throws, IOException, ,, NullArgumentException, {]
[(, IOException, ex, ), {, }, }, }, public, void, load, (, File, file, ), throws, IOException, ,, NullArgumentException, {]
[{, }, }, }, public, void, load, (, File, file, ), throws, IOException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (]
[load, (, File, file, ), throws, IOException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, file, ), ;, Charset, charset, =]
[load, (, File, file, ), throws, IOException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, file, ), ;, Charset, charset, =]
[), throws, IOException, ,, NullArgumentException, {, MathUtils, ., checkNotNull, (, file, ), ;, Charset, charset, =, Charset, ., forName, (]
[MathUtils, ., checkNotNull, (, file, ), ;, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, InputStream, is, =]
[(, file, ), ;, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, InputStream, is, =, new, FileInputStream, (]
[=, Charset, ., forName, (, FILE_CHARSET, ), ;, InputStream, is, =, new, FileInputStream, (, file, ), ;, BufferedReader, in, =]
[forName, (, FILE_CHARSET, ), ;, InputStream, is, =, new, FileInputStream, (, file, ), ;, BufferedReader, in, =, new, BufferedReader, (]
[), ;, InputStream, is, =, new, FileInputStream, (, file, ), ;, BufferedReader, in, =, new, BufferedReader, (, new, InputStreamReader, (]
[InputStream, is, =, new, FileInputStream, (, file, ), ;, BufferedReader, in, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,]
[BufferedReader, in, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, try, {, DataAdapter, da, =]
[new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (]
[new, InputStreamReader, (, is, ,, charset, ), ), ;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;]
[new, InputStreamReader, (, is, ,, charset, ), ), ;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;]
[), ), ;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;]
[;, try, {, DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;, is, =]
[DataAdapter, da, =, new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;, is, =, new, FileInputStream, (]
[new, StreamDataAdapter, (, in, ), ;, da, ., computeStats, (, ), ;, is, =, new, FileInputStream, (, file, ), ;]
[(, in, ), ;, da, ., computeStats, (, ), ;, is, =, new, FileInputStream, (, file, ), ;, in, =]
[;, da, ., computeStats, (, ), ;, is, =, new, FileInputStream, (, file, ), ;, in, =, new, BufferedReader, (]
[computeStats, (, ), ;, is, =, new, FileInputStream, (, file, ), ;, in, =, new, BufferedReader, (, new, InputStreamReader, (]
[), ;, is, =, new, FileInputStream, (, file, ), ;, in, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,]
[new, FileInputStream, (, file, ), ;, in, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;]
[(, file, ), ;, in, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, fillBinStats, (]
[;, in, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, fillBinStats, (, new, StreamDataAdapter, (]
[BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;]
[new, InputStreamReader, (, is, ,, charset, ), ), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;, loaded, =]
[), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;, loaded, =, true, ;, }, finally, {, try, {]
[), ;, fillBinStats, (, new, StreamDataAdapter, (, in, ), ), ;, loaded, =, true, ;, }, finally, {, try, {]
[class, StreamDataAdapter, extends, DataAdapter, {, private, BufferedReader, inputStream, ;, public, StreamDataAdapter, (, BufferedReader, in, ), {, super, (, ), ;]
[extends, DataAdapter, {, private, BufferedReader, inputStream, ;, public, StreamDataAdapter, (, BufferedReader, in, ), {, super, (, ), ;, inputStream, =]
[), ;, inputStream, =, in, ;, }, @, Override, public, void, computeBinStats, (, ), throws, IOException, {, String, str, =]
[;, }, @, Override, public, void, computeBinStats, (, ), throws, IOException, {, String, str, =, null, ;, double, val, =]
[public, void, computeBinStats, (, ), throws, IOException, {, String, str, =, null, ;, double, val, =, 0.0d, ;, while, (]
[public, void, computeBinStats, (, ), throws, IOException, {, String, str, =, null, ;, double, val, =, 0.0d, ;, while, (]
[void, computeBinStats, (, ), throws, IOException, {, String, str, =, null, ;, double, val, =, 0.0d, ;, while, (, (]
[(, ), throws, IOException, {, String, str, =, null, ;, double, val, =, 0.0d, ;, while, (, (, str, =]
[(, ), throws, IOException, {, String, str, =, null, ;, double, val, =, 0.0d, ;, while, (, (, str, =]
[=, null, ;, double, val, =, 0.0d, ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=]
[double, val, =, 0.0d, ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {]
[=, 0.0d, ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =]
[=, 0.0d, ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =]
[(, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =, Double, ., parseDouble, (]
[readLine, (, ), ), !=, null, ), {, val, =, Double, ., parseDouble, (, str, ), ;, SummaryStatistics, stats, =]
[readLine, (, ), ), !=, null, ), {, val, =, Double, ., parseDouble, (, str, ), ;, SummaryStatistics, stats, =]
[!=, null, ), {, val, =, Double, ., parseDouble, (, str, ), ;, SummaryStatistics, stats, =, binStats, ., get, (]
[), {, val, =, Double, ., parseDouble, (, str, ), ;, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (]
[Double, ., parseDouble, (, str, ), ;, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, val, ), ), ;]
[Double, ., parseDouble, (, str, ), ;, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, val, ), ), ;]
[str, ), ;, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, val, ), ), ;, stats, ., addValue, (]
[stats, =, binStats, ., get, (, findBin, (, val, ), ), ;, stats, ., addValue, (, val, ), ;, }]
[stats, =, binStats, ., get, (, findBin, (, val, ), ), ;, stats, ., addValue, (, val, ), ;, }]
[findBin, (, val, ), ), ;, stats, ., addValue, (, val, ), ;, }, inputStream, ., close, (, ), ;]
[val, ), ), ;, stats, ., addValue, (, val, ), ;, }, inputStream, ., close, (, ), ;, inputStream, =]
[), ;, inputStream, =, null, ;, }, @, Override, public, void, computeStats, (, ), throws, IOException, {, String, str, =]
[;, }, @, Override, public, void, computeStats, (, ), throws, IOException, {, String, str, =, null, ;, double, val, =]
[@, Override, public, void, computeStats, (, ), throws, IOException, {, String, str, =, null, ;, double, val, =, 0.0, ;]
[public, void, computeStats, (, ), throws, IOException, {, String, str, =, null, ;, double, val, =, 0.0, ;, sampleStats, =]
[{, String, str, =, null, ;, double, val, =, 0.0, ;, sampleStats, =, new, SummaryStatistics, (, ), ;, while, (]
[{, String, str, =, null, ;, double, val, =, 0.0, ;, sampleStats, =, new, SummaryStatistics, (, ), ;, while, (]
[String, str, =, null, ;, double, val, =, 0.0, ;, sampleStats, =, new, SummaryStatistics, (, ), ;, while, (, (]
[=, null, ;, double, val, =, 0.0, ;, sampleStats, =, new, SummaryStatistics, (, ), ;, while, (, (, str, =]
[=, null, ;, double, val, =, 0.0, ;, sampleStats, =, new, SummaryStatistics, (, ), ;, while, (, (, str, =]
[;, sampleStats, =, new, SummaryStatistics, (, ), ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=]
[new, SummaryStatistics, (, ), ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {]
[(, ), ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =]
[(, ), ;, while, (, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =]
[(, (, str, =, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =, Double, ., parseDouble, (]
[=, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =, Double, ., parseDouble, (, str, ), ;]
[=, inputStream, ., readLine, (, ), ), !=, null, ), {, val, =, Double, ., parseDouble, (, str, ), ;]
[(, ), ), !=, null, ), {, val, =, Double, ., parseDouble, (, str, ), ;, sampleStats, ., addValue, (]
[null, ), {, val, =, Double, ., parseDouble, (, str, ), ;, sampleStats, ., addValue, (, val, ), ;, }]
[null, ), {, val, =, Double, ., parseDouble, (, str, ), ;, sampleStats, ., addValue, (, val, ), ;, }]
[., parseDouble, (, str, ), ;, sampleStats, ., addValue, (, val, ), ;, }, inputStream, ., close, (, ), ;]
[(, str, ), ;, sampleStats, ., addValue, (, val, ), ;, }, inputStream, ., close, (, ), ;, inputStream, =]
[double, [, ], inputArray, ;, public, ArrayDataAdapter, (, double, [, ], in, ), throws, NullArgumentException, {, super, (, ), ;]
[double, [, ], inputArray, ;, public, ArrayDataAdapter, (, double, [, ], in, ), throws, NullArgumentException, {, super, (, ), ;]
[;, public, ArrayDataAdapter, (, double, [, ], in, ), throws, NullArgumentException, {, super, (, ), ;, MathUtils, ., checkNotNull, (]
[(, double, [, ], in, ), throws, NullArgumentException, {, super, (, ), ;, MathUtils, ., checkNotNull, (, in, ), ;]
[[, ], in, ), throws, NullArgumentException, {, super, (, ), ;, MathUtils, ., checkNotNull, (, in, ), ;, inputArray, =]
[checkNotNull, (, in, ), ;, inputArray, =, in, ;, }, @, Override, public, void, computeStats, (, ), throws, IOException, {]
[in, ), ;, inputArray, =, in, ;, }, @, Override, public, void, computeStats, (, ), throws, IOException, {, sampleStats, =]
[public, void, computeStats, (, ), throws, IOException, {, sampleStats, =, new, SummaryStatistics, (, ), ;, for, (, int, i, =]
[computeStats, (, ), throws, IOException, {, sampleStats, =, new, SummaryStatistics, (, ), ;, for, (, int, i, =, 0, ;]
[computeStats, (, ), throws, IOException, {, sampleStats, =, new, SummaryStatistics, (, ), ;, for, (, int, i, =, 0, ;]
[), throws, IOException, {, sampleStats, =, new, SummaryStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[), throws, IOException, {, sampleStats, =, new, SummaryStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[sampleStats, =, new, SummaryStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;]
[sampleStats, =, new, SummaryStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {, sampleStats, ., addValue, (]
[(, int, i, =, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {, sampleStats, ., addValue, (]
[i, =, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {, sampleStats, ., addValue, (, inputArray, []
[], ), ;, }, }, @, Override, public, void, computeBinStats, (, ), throws, IOException, {, for, (, int, i, =]
[;, }, }, @, Override, public, void, computeBinStats, (, ), throws, IOException, {, for, (, int, i, =, 0, ;]
[;, }, }, @, Override, public, void, computeBinStats, (, ), throws, IOException, {, for, (, int, i, =, 0, ;]
[}, @, Override, public, void, computeBinStats, (, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, <]
[}, @, Override, public, void, computeBinStats, (, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, <]
[void, computeBinStats, (, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;]
[void, computeBinStats, (, ), throws, IOException, {, for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {, SummaryStatistics, stats, =]
[for, (, int, i, =, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {, SummaryStatistics, stats, =]
[=, 0, ;, i, <, inputArray, ., length, ;, i, ++, ), {, SummaryStatistics, stats, =, binStats, ., get, (]
[;, i, <, inputArray, ., length, ;, i, ++, ), {, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (]
[;, i, <, inputArray, ., length, ;, i, ++, ), {, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (]
[<, inputArray, ., length, ;, i, ++, ), {, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, inputArray, []
[i, ++, ), {, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, inputArray, [, i, ], ), ), ;]
[i, ++, ), {, SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, inputArray, [, i, ], ), ), ;]
[SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, inputArray, [, i, ], ), ), ;, stats, ., addValue, (]
[SummaryStatistics, stats, =, binStats, ., get, (, findBin, (, inputArray, [, i, ], ), ), ;, stats, ., addValue, (]
[=, binStats, ., get, (, findBin, (, inputArray, [, i, ], ), ), ;, stats, ., addValue, (, inputArray, []
[inputArray, [, i, ], ), ;, }, }, }, private, void, fillBinStats, (, final, DataAdapter, da, ), throws, IOException, {]
[i, ], ), ;, }, }, }, private, void, fillBinStats, (, final, DataAdapter, da, ), throws, IOException, {, min, =]
[i, ], ), ;, }, }, }, private, void, fillBinStats, (, final, DataAdapter, da, ), throws, IOException, {, min, =]
[}, private, void, fillBinStats, (, final, DataAdapter, da, ), throws, IOException, {, min, =, sampleStats, ., getMin, (, ), ;]
[void, fillBinStats, (, final, DataAdapter, da, ), throws, IOException, {, min, =, sampleStats, ., getMin, (, ), ;, max, =]
[void, fillBinStats, (, final, DataAdapter, da, ), throws, IOException, {, min, =, sampleStats, ., getMin, (, ), ;, max, =]
[), throws, IOException, {, min, =, sampleStats, ., getMin, (, ), ;, max, =, sampleStats, ., getMax, (, ), ;]
[IOException, {, min, =, sampleStats, ., getMin, (, ), ;, max, =, sampleStats, ., getMax, (, ), ;, delta, =]
[IOException, {, min, =, sampleStats, ., getMin, (, ), ;, max, =, sampleStats, ., getMax, (, ), ;, delta, =]
[{, min, =, sampleStats, ., getMin, (, ), ;, max, =, sampleStats, ., getMax, (, ), ;, delta, =, (]
[{, min, =, sampleStats, ., getMin, (, ), ;, max, =, sampleStats, ., getMax, (, ), ;, delta, =, (]
[=, sampleStats, ., getMin, (, ), ;, max, =, sampleStats, ., getMax, (, ), ;, delta, =, (, max, -]
[getMin, (, ), ;, max, =, sampleStats, ., getMax, (, ), ;, delta, =, (, max, -, min, ), /]
[(, ), ;, max, =, sampleStats, ., getMax, (, ), ;, delta, =, (, max, -, min, ), /, (]
[max, =, sampleStats, ., getMax, (, ), ;, delta, =, (, max, -, min, ), /, (, (, double, )]
[(, ), ;, delta, =, (, max, -, min, ), /, (, (, double, ), binCount, ), ;, if, (]
[), ;, delta, =, (, max, -, min, ), /, (, (, double, ), binCount, ), ;, if, (, !]
[), ;, delta, =, (, max, -, min, ), /, (, (, double, ), binCount, ), ;, if, (, !]
[min, ), /, (, (, double, ), binCount, ), ;, if, (, !, binStats, ., isEmpty, (, ), ), {]
[min, ), /, (, (, double, ), binCount, ), ;, if, (, !, binStats, ., isEmpty, (, ), ), {]
[!, binStats, ., isEmpty, (, ), ), {, binStats, ., clear, (, ), ;, }, for, (, int, i, =]
[., isEmpty, (, ), ), {, binStats, ., clear, (, ), ;, }, for, (, int, i, =, 0, ;]
[., isEmpty, (, ), ), {, binStats, ., clear, (, ), ;, }, for, (, int, i, =, 0, ;]
[(, ), ), {, binStats, ., clear, (, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[), {, binStats, ., clear, (, ), ;, }, for, (, int, i, =, 0, ;, i, <, binCount, ;]
[), {, binStats, ., clear, (, ), ;, }, for, (, int, i, =, 0, ;, i, <, binCount, ;]
[;, }, for, (, int, i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, SummaryStatistics, stats, =]
[i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, SummaryStatistics, stats, =, new, SummaryStatistics, (, ), ;]
[i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, SummaryStatistics, stats, =, new, SummaryStatistics, (, ), ;]
[i, <, binCount, ;, i, ++, ), {, SummaryStatistics, stats, =, new, SummaryStatistics, (, ), ;, binStats, ., add, (]
[binCount, ;, i, ++, ), {, SummaryStatistics, stats, =, new, SummaryStatistics, (, ), ;, binStats, ., add, (, i, ,]
[), {, SummaryStatistics, stats, =, new, SummaryStatistics, (, ), ;, binStats, ., add, (, i, ,, stats, ), ;, }]
[), {, SummaryStatistics, stats, =, new, SummaryStatistics, (, ), ;, binStats, ., add, (, i, ,, stats, ), ;, }]
[SummaryStatistics, (, ), ;, binStats, ., add, (, i, ,, stats, ), ;, }, da, ., computeBinStats, (, ), ;]
[), ;, binStats, ., add, (, i, ,, stats, ), ;, }, da, ., computeBinStats, (, ), ;, upperBounds, =]
[., add, (, i, ,, stats, ), ;, }, da, ., computeBinStats, (, ), ;, upperBounds, =, new, double, []
[i, ,, stats, ), ;, }, da, ., computeBinStats, (, ), ;, upperBounds, =, new, double, [, binCount, ], ;]
[i, ,, stats, ), ;, }, da, ., computeBinStats, (, ), ;, upperBounds, =, new, double, [, binCount, ], ;]
[stats, ), ;, }, da, ., computeBinStats, (, ), ;, upperBounds, =, new, double, [, binCount, ], ;, upperBounds, []
[}, da, ., computeBinStats, (, ), ;, upperBounds, =, new, double, [, binCount, ], ;, upperBounds, [, 0, ], =]
[}, da, ., computeBinStats, (, ), ;, upperBounds, =, new, double, [, binCount, ], ;, upperBounds, [, 0, ], =]
[da, ., computeBinStats, (, ), ;, upperBounds, =, new, double, [, binCount, ], ;, upperBounds, [, 0, ], =, (]
[(, ), ;, upperBounds, =, new, double, [, binCount, ], ;, upperBounds, [, 0, ], =, (, (, double, )]
[(, ), ;, upperBounds, =, new, double, [, binCount, ], ;, upperBounds, [, 0, ], =, (, (, double, )]
[(, ), ;, upperBounds, =, new, double, [, binCount, ], ;, upperBounds, [, 0, ], =, (, (, double, )]
[=, new, double, [, binCount, ], ;, upperBounds, [, 0, ], =, (, (, double, ), binStats, ., get, (]
[[, 0, ], =, (, (, double, ), binStats, ., get, (, 0, ), ., getN, (, ), ), /]
[=, (, (, double, ), binStats, ., get, (, 0, ), ., getN, (, ), ), /, (, double, )]
[=, (, (, double, ), binStats, ., get, (, 0, ), ., getN, (, ), ), /, (, double, )]
[., getN, (, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, for, (, int, i, =]
[(, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, for, (, int, i, =, 1, ;]
[(, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, for, (, int, i, =, 1, ;]
[), /, (, double, ), sampleStats, ., getN, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[), /, (, double, ), sampleStats, ., getN, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[(, double, ), sampleStats, ., getN, (, ), ;, for, (, int, i, =, 1, ;, i, <, binCount, -]
[), sampleStats, ., getN, (, ), ;, for, (, int, i, =, 1, ;, i, <, binCount, -, 1, ;]
[), sampleStats, ., getN, (, ), ;, for, (, int, i, =, 1, ;, i, <, binCount, -, 1, ;]
[(, ), ;, for, (, int, i, =, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {, upperBounds, []
[int, i, =, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =]
[int, i, =, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =]
[int, i, =, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =]
[=, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =, upperBounds, []
[=, 1, ;, i, <, binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =, upperBounds, []
[;, i, <, binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =, upperBounds, [, i, -]
[binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =, upperBounds, [, i, -, 1, ], +]
[binCount, -, 1, ;, i, ++, ), {, upperBounds, [, i, ], =, upperBounds, [, i, -, 1, ], +]
[-, 1, ;, i, ++, ), {, upperBounds, [, i, ], =, upperBounds, [, i, -, 1, ], +, (]
[i, ++, ), {, upperBounds, [, i, ], =, upperBounds, [, i, -, 1, ], +, (, (, double, )]
[i, ++, ), {, upperBounds, [, i, ], =, upperBounds, [, i, -, 1, ], +, (, (, double, )]
[i, ++, ), {, upperBounds, [, i, ], =, upperBounds, [, i, -, 1, ], +, (, (, double, )]
[upperBounds, [, i, ], =, upperBounds, [, i, -, 1, ], +, (, (, double, ), binStats, ., get, (]
[-, 1, ], +, (, (, double, ), binStats, ., get, (, i, ), ., getN, (, ), ), /]
[+, (, (, double, ), binStats, ., get, (, i, ), ., getN, (, ), ), /, (, double, )]
[+, (, (, double, ), binStats, ., get, (, i, ), ., getN, (, ), ), /, (, double, )]
[get, (, i, ), ., getN, (, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, }]
[get, (, i, ), ., getN, (, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, }]
[i, ), ., getN, (, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, }, upperBounds, []
[i, ), ., getN, (, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, }, upperBounds, []
[., getN, (, ), ), /, (, double, ), sampleStats, ., getN, (, ), ;, }, upperBounds, [, binCount, -]
[), ), /, (, double, ), sampleStats, ., getN, (, ), ;, }, upperBounds, [, binCount, -, 1, ], =]
[}, upperBounds, [, binCount, -, 1, ], =, 1.0d, ;, }, private, int, findBin, (, double, value, ), {, return]
[}, upperBounds, [, binCount, -, 1, ], =, 1.0d, ;, }, private, int, findBin, (, double, value, ), {, return]
[-, 1, ], =, 1.0d, ;, }, private, int, findBin, (, double, value, ), {, return, FastMath, ., min, (]
[-, 1, ], =, 1.0d, ;, }, private, int, findBin, (, double, value, ), {, return, FastMath, ., min, (]
[1.0d, ;, }, private, int, findBin, (, double, value, ), {, return, FastMath, ., min, (, FastMath, ., max, (]
[1.0d, ;, }, private, int, findBin, (, double, value, ), {, return, FastMath, ., min, (, FastMath, ., max, (]
[private, int, findBin, (, double, value, ), {, return, FastMath, ., min, (, FastMath, ., max, (, (, int, )]
[private, int, findBin, (, double, value, ), {, return, FastMath, ., min, (, FastMath, ., max, (, (, int, )]
[double, value, ), {, return, FastMath, ., min, (, FastMath, ., max, (, (, int, ), FastMath, ., ceil, (]
[double, value, ), {, return, FastMath, ., min, (, FastMath, ., max, (, (, int, ), FastMath, ., ceil, (]
[value, ), {, return, FastMath, ., min, (, FastMath, ., max, (, (, int, ), FastMath, ., ceil, (, (]
[value, ), {, return, FastMath, ., min, (, FastMath, ., max, (, (, int, ), FastMath, ., ceil, (, (]
[{, return, FastMath, ., min, (, FastMath, ., max, (, (, int, ), FastMath, ., ceil, (, (, value, -]
[., min, (, FastMath, ., max, (, (, int, ), FastMath, ., ceil, (, (, value, -, min, ), /]
[FastMath, ., max, (, (, int, ), FastMath, ., ceil, (, (, value, -, min, ), /, delta, ), -]
[max, (, (, int, ), FastMath, ., ceil, (, (, value, -, min, ), /, delta, ), -, 1, ,]
[int, ), FastMath, ., ceil, (, (, value, -, min, ), /, delta, ), -, 1, ,, 0, ), ,]
[int, ), FastMath, ., ceil, (, (, value, -, min, ), /, delta, ), -, 1, ,, 0, ), ,]
[FastMath, ., ceil, (, (, value, -, min, ), /, delta, ), -, 1, ,, 0, ), ,, binCount, -]
[,, 0, ), ,, binCount, -, 1, ), ;, }, public, double, getNextValue, (, ), throws, MathIllegalStateException, {, if, (]
[0, ), ,, binCount, -, 1, ), ;, }, public, double, getNextValue, (, ), throws, MathIllegalStateException, {, if, (, !]
[-, 1, ), ;, }, public, double, getNextValue, (, ), throws, MathIllegalStateException, {, if, (, !, loaded, ), {, throw]
[;, }, public, double, getNextValue, (, ), throws, MathIllegalStateException, {, if, (, !, loaded, ), {, throw, new, MathIllegalStateException, (]
[;, }, public, double, getNextValue, (, ), throws, MathIllegalStateException, {, if, (, !, loaded, ), {, throw, new, MathIllegalStateException, (]
[if, (, !, loaded, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., DISTRIBUTION_NOT_LOADED, ), ;, }, final, double, x, =]
[if, (, !, loaded, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., DISTRIBUTION_NOT_LOADED, ), ;, }, final, double, x, =]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., DISTRIBUTION_NOT_LOADED, ), ;, }, final, double, x, =, randomData, ., nextUniform, (]
[throw, new, MathIllegalStateException, (, LocalizedFormats, ., DISTRIBUTION_NOT_LOADED, ), ;, }, final, double, x, =, randomData, ., nextUniform, (, 0, ,]
[;, }, final, double, x, =, randomData, ., nextUniform, (, 0, ,, 1, ), ;, for, (, int, i, =]
[final, double, x, =, randomData, ., nextUniform, (, 0, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[final, double, x, =, randomData, ., nextUniform, (, 0, ,, 1, ), ;, for, (, int, i, =, 0, ;]
[x, =, randomData, ., nextUniform, (, 0, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[randomData, ., nextUniform, (, 0, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, binCount, ;]
[randomData, ., nextUniform, (, 0, ,, 1, ), ;, for, (, int, i, =, 0, ;, i, <, binCount, ;]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, if, (]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, if, (, x, <=]
[;, for, (, int, i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, if, (, x, <=]
[(, int, i, =, 0, ;, i, <, binCount, ;, i, ++, ), {, if, (, x, <=, upperBounds, []
[<, binCount, ;, i, ++, ), {, if, (, x, <=, upperBounds, [, i, ], ), {, SummaryStatistics, stats, =]
[<, binCount, ;, i, ++, ), {, if, (, x, <=, upperBounds, [, i, ], ), {, SummaryStatistics, stats, =]
[++, ), {, if, (, x, <=, upperBounds, [, i, ], ), {, SummaryStatistics, stats, =, binStats, ., get, (]
[x, <=, upperBounds, [, i, ], ), {, SummaryStatistics, stats, =, binStats, ., get, (, i, ), ;, if, (]
[x, <=, upperBounds, [, i, ], ), {, SummaryStatistics, stats, =, binStats, ., get, (, i, ), ;, if, (]
[x, <=, upperBounds, [, i, ], ), {, SummaryStatistics, stats, =, binStats, ., get, (, i, ), ;, if, (]
[), {, SummaryStatistics, stats, =, binStats, ., get, (, i, ), ;, if, (, stats, ., getN, (, ), >]
[binStats, ., get, (, i, ), ;, if, (, stats, ., getN, (, ), >, 0, ), {, if, (]
[binStats, ., get, (, i, ), ;, if, (, stats, ., getN, (, ), >, 0, ), {, if, (]
[binStats, ., get, (, i, ), ;, if, (, stats, ., getN, (, ), >, 0, ), {, if, (]
[;, if, (, stats, ., getN, (, ), >, 0, ), {, if, (, stats, ., getStandardDeviation, (, ), >]
[., getN, (, ), >, 0, ), {, if, (, stats, ., getStandardDeviation, (, ), >, 0, ), {, return]
[., getN, (, ), >, 0, ), {, if, (, stats, ., getStandardDeviation, (, ), >, 0, ), {, return]
[(, ), >, 0, ), {, if, (, stats, ., getStandardDeviation, (, ), >, 0, ), {, return, getKernel, (]
[(, ), >, 0, ), {, return, getKernel, (, stats, ), ., sample, (, ), ;, }, else, {, return]
[(, ), >, 0, ), {, return, getKernel, (, stats, ), ., sample, (, ), ;, }, else, {, return]
[., sample, (, ), ;, }, else, {, return, stats, ., getMean, (, ), ;, }, }, }, }, throw]
[), ;, }, else, {, return, stats, ., getMean, (, ), ;, }, }, }, }, throw, new, MathIllegalStateException, (]
[), ;, }, else, {, return, stats, ., getMean, (, ), ;, }, }, }, }, throw, new, MathIllegalStateException, (]
[}, }, }, throw, new, MathIllegalStateException, (, LocalizedFormats, ., NO_BIN_SELECTED, ), ;, }, public, StatisticalSummary, getSampleStats, (, ), {, return]
[), ;, }, public, StatisticalSummary, getSampleStats, (, ), {, return, sampleStats, ;, }, public, int, getBinCount, (, ), {, return]
[public, int, getBinCount, (, ), {, return, binCount, ;, }, public, List, <, SummaryStatistics, >, getBinStats, (, ), {, return]
[(, ), {, return, binStats, ;, }, public, double, [, ], getUpperBounds, (, ), {, double, [, ], binUpperBounds, =]
[return, binStats, ;, }, public, double, [, ], getUpperBounds, (, ), {, double, [, ], binUpperBounds, =, new, double, []
[getUpperBounds, (, ), {, double, [, ], binUpperBounds, =, new, double, [, binCount, ], ;, for, (, int, i, =]
[), {, double, [, ], binUpperBounds, =, new, double, [, binCount, ], ;, for, (, int, i, =, 0, ;]
[), {, double, [, ], binUpperBounds, =, new, double, [, binCount, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], binUpperBounds, =, new, double, [, binCount, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], binUpperBounds, =, new, double, [, binCount, ], ;, for, (, int, i, =, 0, ;, i, <]
[], binUpperBounds, =, new, double, [, binCount, ], ;, for, (, int, i, =, 0, ;, i, <, binCount, -]
[=, new, double, [, binCount, ], ;, for, (, int, i, =, 0, ;, i, <, binCount, -, 1, ;]
[=, new, double, [, binCount, ], ;, for, (, int, i, =, 0, ;, i, <, binCount, -, 1, ;]
[binCount, ], ;, for, (, int, i, =, 0, ;, i, <, binCount, -, 1, ;, i, ++, ), {]
[binCount, ], ;, for, (, int, i, =, 0, ;, i, <, binCount, -, 1, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, []
[int, i, =, 0, ;, i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =]
[int, i, =, 0, ;, i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =]
[=, 0, ;, i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =, min, +]
[=, 0, ;, i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =, min, +]
[;, i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =, min, +, delta, *]
[i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =, min, +, delta, *, (]
[i, <, binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =, min, +, delta, *, (]
[binCount, -, 1, ;, i, ++, ), {, binUpperBounds, [, i, ], =, min, +, delta, *, (, i, +]
[i, ++, ), {, binUpperBounds, [, i, ], =, min, +, delta, *, (, i, +, 1, ), ;, }]
[i, ++, ), {, binUpperBounds, [, i, ], =, min, +, delta, *, (, i, +, 1, ), ;, }]
[), {, binUpperBounds, [, i, ], =, min, +, delta, *, (, i, +, 1, ), ;, }, binUpperBounds, []
[), {, binUpperBounds, [, i, ], =, min, +, delta, *, (, i, +, 1, ), ;, }, binUpperBounds, []
[binUpperBounds, [, i, ], =, min, +, delta, *, (, i, +, 1, ), ;, }, binUpperBounds, [, binCount, -]
[], =, min, +, delta, *, (, i, +, 1, ), ;, }, binUpperBounds, [, binCount, -, 1, ], =]
[+, delta, *, (, i, +, 1, ), ;, }, binUpperBounds, [, binCount, -, 1, ], =, max, ;, return]
[1, ], =, max, ;, return, binUpperBounds, ;, }, public, double, [, ], getGeneratorUpperBounds, (, ), {, int, len, =]
[1, ], =, max, ;, return, binUpperBounds, ;, }, public, double, [, ], getGeneratorUpperBounds, (, ), {, int, len, =]
[public, double, [, ], getGeneratorUpperBounds, (, ), {, int, len, =, upperBounds, ., length, ;, double, [, ], out, =]
[], getGeneratorUpperBounds, (, ), {, int, len, =, upperBounds, ., length, ;, double, [, ], out, =, new, double, []
[), {, int, len, =, upperBounds, ., length, ;, double, [, ], out, =, new, double, [, len, ], ;]
[), {, int, len, =, upperBounds, ., length, ;, double, [, ], out, =, new, double, [, len, ], ;]
[=, upperBounds, ., length, ;, double, [, ], out, =, new, double, [, len, ], ;, System, ., arraycopy, (]
[., length, ;, double, [, ], out, =, new, double, [, len, ], ;, System, ., arraycopy, (, upperBounds, ,]
[;, double, [, ], out, =, new, double, [, len, ], ;, System, ., arraycopy, (, upperBounds, ,, 0, ,]
[[, ], out, =, new, double, [, len, ], ;, System, ., arraycopy, (, upperBounds, ,, 0, ,, out, ,]
[out, =, new, double, [, len, ], ;, System, ., arraycopy, (, upperBounds, ,, 0, ,, out, ,, 0, ,]
[[, len, ], ;, System, ., arraycopy, (, upperBounds, ,, 0, ,, out, ,, 0, ,, len, ), ;, return]
[0, ,, out, ,, 0, ,, len, ), ;, return, out, ;, }, public, boolean, isLoaded, (, ), {, return]
[;, }, public, boolean, isLoaded, (, ), {, return, loaded, ;, }, public, void, reSeed, (, long, seed, ), {]
[;, }, public, boolean, isLoaded, (, ), {, return, loaded, ;, }, public, void, reSeed, (, long, seed, ), {]
[isLoaded, (, ), {, return, loaded, ;, }, public, void, reSeed, (, long, seed, ), {, randomData, ., reSeed, (]
[{, randomData, ., reSeed, (, seed, ), ;, }, @, Override, public, double, probability, (, double, x, ), {, return]
[probability, (, double, x, ), {, return, 0, ;, }, public, double, density, (, double, x, ), {, if, (]
[probability, (, double, x, ), {, return, 0, ;, }, public, double, density, (, double, x, ), {, if, (]
[probability, (, double, x, ), {, return, 0, ;, }, public, double, density, (, double, x, ), {, if, (]
[double, x, ), {, return, 0, ;, }, public, double, density, (, double, x, ), {, if, (, x, <]
[), {, return, 0, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, min, ||]
[), {, return, 0, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, min, ||]
[return, 0, ;, }, public, double, density, (, double, x, ), {, if, (, x, <, min, ||, x, >]
[public, double, density, (, double, x, ), {, if, (, x, <, min, ||, x, >, max, ), {, return]
[{, if, (, x, <, min, ||, x, >, max, ), {, return, 0d, ;, }, final, int, binIndex, =]
[(, x, <, min, ||, x, >, max, ), {, return, 0d, ;, }, final, int, binIndex, =, findBin, (]
[max, ), {, return, 0d, ;, }, final, int, binIndex, =, findBin, (, x, ), ;, final, RealDistribution, kernel, =]
[{, return, 0d, ;, }, final, int, binIndex, =, findBin, (, x, ), ;, final, RealDistribution, kernel, =, getKernel, (]
[{, return, 0d, ;, }, final, int, binIndex, =, findBin, (, x, ), ;, final, RealDistribution, kernel, =, getKernel, (]
[}, final, int, binIndex, =, findBin, (, x, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (]
[findBin, (, x, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, binIndex, ), ), ;, return]
[findBin, (, x, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, binIndex, ), ), ;, return]
[findBin, (, x, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, binIndex, ), ), ;, return]
[findBin, (, x, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, binIndex, ), ), ;, return]
[;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, binIndex, ), ), ;, return, kernel, ., density, (]
[kernel, =, getKernel, (, binStats, ., get, (, binIndex, ), ), ;, return, kernel, ., density, (, x, ), *]
[getKernel, (, binStats, ., get, (, binIndex, ), ), ;, return, kernel, ., density, (, x, ), *, pB, (]
[., get, (, binIndex, ), ), ;, return, kernel, ., density, (, x, ), *, pB, (, binIndex, ), /]
[(, binIndex, ), ), ;, return, kernel, ., density, (, x, ), *, pB, (, binIndex, ), /, kB, (]
[(, binIndex, ), /, kB, (, binIndex, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[(, binIndex, ), /, kB, (, binIndex, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (]
[), /, kB, (, binIndex, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <]
[binIndex, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, if, (, x, <, min, ), {, return]
[cumulativeProbability, (, double, x, ), {, if, (, x, <, min, ), {, return, 0d, ;, }, else, if, (]
[cumulativeProbability, (, double, x, ), {, if, (, x, <, min, ), {, return, 0d, ;, }, else, if, (]
[double, x, ), {, if, (, x, <, min, ), {, return, 0d, ;, }, else, if, (, x, >=]
[if, (, x, <, min, ), {, return, 0d, ;, }, else, if, (, x, >=, max, ), {, return]
[return, 0d, ;, }, else, if, (, x, >=, max, ), {, return, 1d, ;, }, final, int, binIndex, =]
[;, }, else, if, (, x, >=, max, ), {, return, 1d, ;, }, final, int, binIndex, =, findBin, (]
[max, ), {, return, 1d, ;, }, final, int, binIndex, =, findBin, (, x, ), ;, final, double, pBminus, =]
[{, return, 1d, ;, }, final, int, binIndex, =, findBin, (, x, ), ;, final, double, pBminus, =, pBminus, (]
[binIndex, =, findBin, (, x, ), ;, final, double, pBminus, =, pBminus, (, binIndex, ), ;, final, double, pB, =]
[findBin, (, x, ), ;, final, double, pBminus, =, pBminus, (, binIndex, ), ;, final, double, pB, =, pB, (]
[pBminus, (, binIndex, ), ;, final, double, pB, =, pB, (, binIndex, ), ;, final, double, [, ], binBounds, =]
[=, pB, (, binIndex, ), ;, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, kB, =]
[(, binIndex, ), ;, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, kB, =, kB, (]
[], binBounds, =, getUpperBounds, (, ), ;, final, double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =]
[], binBounds, =, getUpperBounds, (, ), ;, final, double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =]
[], binBounds, =, getUpperBounds, (, ), ;, final, double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =]
[=, getUpperBounds, (, ), ;, final, double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =, binIndex, ==]
[(, ), ;, final, double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =, binIndex, ==, 0, ?]
[;, final, double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =, binIndex, ==, 0, ?, min, :]
[;, final, double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =, binIndex, ==, 0, ?, min, :]
[double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =, binIndex, ==, 0, ?, min, :, binBounds, []
[double, kB, =, kB, (, binIndex, ), ;, final, double, lower, =, binIndex, ==, 0, ?, min, :, binBounds, []
[=, kB, (, binIndex, ), ;, final, double, lower, =, binIndex, ==, 0, ?, min, :, binBounds, [, binIndex, -]
[double, lower, =, binIndex, ==, 0, ?, min, :, binBounds, [, binIndex, -, 1, ], ;, final, RealDistribution, kernel, =]
[=, binIndex, ==, 0, ?, min, :, binBounds, [, binIndex, -, 1, ], ;, final, RealDistribution, kernel, =, k, (]
[binBounds, [, binIndex, -, 1, ], ;, final, RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =]
[binBounds, [, binIndex, -, 1, ], ;, final, RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =]
[[, binIndex, -, 1, ], ;, final, RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =, (]
[[, binIndex, -, 1, ], ;, final, RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =, (]
[[, binIndex, -, 1, ], ;, final, RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =, (]
[], ;, final, RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =, (, kernel, ., cumulativeProbability, (]
[RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =, (, kernel, ., cumulativeProbability, (, x, ), -]
[RealDistribution, kernel, =, k, (, x, ), ;, final, double, withinBinCum, =, (, kernel, ., cumulativeProbability, (, x, ), -]
[(, x, ), ;, final, double, withinBinCum, =, (, kernel, ., cumulativeProbability, (, x, ), -, kernel, ., cumulativeProbability, (]
[final, double, withinBinCum, =, (, kernel, ., cumulativeProbability, (, x, ), -, kernel, ., cumulativeProbability, (, lower, ), ), /]
[=, (, kernel, ., cumulativeProbability, (, x, ), -, kernel, ., cumulativeProbability, (, lower, ), ), /, kB, ;, return]
[=, (, kernel, ., cumulativeProbability, (, x, ), -, kernel, ., cumulativeProbability, (, lower, ), ), /, kB, ;, return]
[kernel, ., cumulativeProbability, (, x, ), -, kernel, ., cumulativeProbability, (, lower, ), ), /, kB, ;, return, pBminus, +]
[kernel, ., cumulativeProbability, (, x, ), -, kernel, ., cumulativeProbability, (, lower, ), ), /, kB, ;, return, pBminus, +]
[cumulativeProbability, (, x, ), -, kernel, ., cumulativeProbability, (, lower, ), ), /, kB, ;, return, pBminus, +, pB, *]
[pB, *, withinBinCum, ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[pB, *, withinBinCum, ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[pB, *, withinBinCum, ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[withinBinCum, ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[}, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[}, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >]
[(, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw]
[p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,]
[{, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, if, (]
[||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, if, (]
[>, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, if, (, p, ==]
[throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, if, (, p, ==, 0.0, ), {, return]
[,, 1, ), ;, }, if, (, p, ==, 0.0, ), {, return, getSupportLowerBound, (, ), ;, }, if, (]
[,, 1, ), ;, }, if, (, p, ==, 0.0, ), {, return, getSupportLowerBound, (, ), ;, }, if, (]
[), ;, }, if, (, p, ==, 0.0, ), {, return, getSupportLowerBound, (, ), ;, }, if, (, p, ==]
[(, p, ==, 0.0, ), {, return, getSupportLowerBound, (, ), ;, }, if, (, p, ==, 1.0, ), {, return]
[(, ), ;, }, if, (, p, ==, 1.0, ), {, return, getSupportUpperBound, (, ), ;, }, int, i, =]
[if, (, p, ==, 1.0, ), {, return, getSupportUpperBound, (, ), ;, }, int, i, =, 0, ;, while, (]
[if, (, p, ==, 1.0, ), {, return, getSupportUpperBound, (, ), ;, }, int, i, =, 0, ;, while, (]
[p, ==, 1.0, ), {, return, getSupportUpperBound, (, ), ;, }, int, i, =, 0, ;, while, (, cumBinP, (]
[), {, return, getSupportUpperBound, (, ), ;, }, int, i, =, 0, ;, while, (, cumBinP, (, i, ), <]
[getSupportUpperBound, (, ), ;, }, int, i, =, 0, ;, while, (, cumBinP, (, i, ), <, p, ), {]
[getSupportUpperBound, (, ), ;, }, int, i, =, 0, ;, while, (, cumBinP, (, i, ), <, p, ), {]
[0, ;, while, (, cumBinP, (, i, ), <, p, ), {, i, ++, ;, }, final, RealDistribution, kernel, =]
[while, (, cumBinP, (, i, ), <, p, ), {, i, ++, ;, }, final, RealDistribution, kernel, =, getKernel, (]
[while, (, cumBinP, (, i, ), <, p, ), {, i, ++, ;, }, final, RealDistribution, kernel, =, getKernel, (]
[i, ), <, p, ), {, i, ++, ;, }, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (]
[;, }, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, final, double, kB, =]
[final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, final, double, kB, =, kB, (]
[(, i, ), ), ;, final, double, kB, =, kB, (, i, ), ;, final, double, [, ], binBounds, =]
[=, kB, (, i, ), ;, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =]
[=, kB, (, i, ), ;, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =]
[=, kB, (, i, ), ;, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =]
[(, i, ), ;, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =, i, ==]
[), ;, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =, i, ==, 0, ?]
[final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =, i, ==, 0, ?, min, :]
[final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =, i, ==, 0, ?, min, :]
[[, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =, i, ==, 0, ?, min, :, binBounds, []
[[, ], binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =, i, ==, 0, ?, min, :, binBounds, []
[binBounds, =, getUpperBounds, (, ), ;, final, double, lower, =, i, ==, 0, ?, min, :, binBounds, [, i, -]
[double, lower, =, i, ==, 0, ?, min, :, binBounds, [, i, -, 1, ], ;, final, double, kBminus, =]
[double, lower, =, i, ==, 0, ?, min, :, binBounds, [, i, -, 1, ], ;, final, double, kBminus, =]
[==, 0, ?, min, :, binBounds, [, i, -, 1, ], ;, final, double, kBminus, =, kernel, ., cumulativeProbability, (]
[i, -, 1, ], ;, final, double, kBminus, =, kernel, ., cumulativeProbability, (, lower, ), ;, final, double, pB, =]
[1, ], ;, final, double, kBminus, =, kernel, ., cumulativeProbability, (, lower, ), ;, final, double, pB, =, pB, (]
[kernel, ., cumulativeProbability, (, lower, ), ;, final, double, pB, =, pB, (, i, ), ;, final, double, pBminus, =]
[cumulativeProbability, (, lower, ), ;, final, double, pB, =, pB, (, i, ), ;, final, double, pBminus, =, pBminus, (]
[pB, =, pB, (, i, ), ;, final, double, pBminus, =, pBminus, (, i, ), ;, final, double, pCrit, =]
[pB, =, pB, (, i, ), ;, final, double, pBminus, =, pBminus, (, i, ), ;, final, double, pCrit, =]
[pB, (, i, ), ;, final, double, pBminus, =, pBminus, (, i, ), ;, final, double, pCrit, =, p, -]
[;, final, double, pBminus, =, pBminus, (, i, ), ;, final, double, pCrit, =, p, -, pBminus, ;, if, (]
[;, final, double, pBminus, =, pBminus, (, i, ), ;, final, double, pCrit, =, p, -, pBminus, ;, if, (]
[double, pBminus, =, pBminus, (, i, ), ;, final, double, pCrit, =, p, -, pBminus, ;, if, (, pCrit, <=]
[(, i, ), ;, final, double, pCrit, =, p, -, pBminus, ;, if, (, pCrit, <=, 0, ), {, return]
[final, double, pCrit, =, p, -, pBminus, ;, if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return]
[final, double, pCrit, =, p, -, pBminus, ;, if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return]
[p, -, pBminus, ;, if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return, kernel, ., inverseCumulativeProbability, (]
[p, -, pBminus, ;, if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return, kernel, ., inverseCumulativeProbability, (]
[pBminus, ;, if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return, kernel, ., inverseCumulativeProbability, (, kBminus, +]
[pBminus, ;, if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return, kernel, ., inverseCumulativeProbability, (, kBminus, +]
[pBminus, ;, if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return, kernel, ., inverseCumulativeProbability, (, kBminus, +]
[if, (, pCrit, <=, 0, ), {, return, lower, ;, }, return, kernel, ., inverseCumulativeProbability, (, kBminus, +, pCrit, *]
[pCrit, <=, 0, ), {, return, lower, ;, }, return, kernel, ., inverseCumulativeProbability, (, kBminus, +, pCrit, *, kB, /]
[., inverseCumulativeProbability, (, kBminus, +, pCrit, *, kB, /, pB, ), ;, }, public, double, getNumericalMean, (, ), {, return]
[., inverseCumulativeProbability, (, kBminus, +, pCrit, *, kB, /, pB, ), ;, }, public, double, getNumericalMean, (, ), {, return]
[double, getNumericalMean, (, ), {, return, sampleStats, ., getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, return]
[double, getNumericalMean, (, ), {, return, sampleStats, ., getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, return]
[double, getNumericalVariance, (, ), {, return, sampleStats, ., getVariance, (, ), ;, }, public, double, getSupportLowerBound, (, ), {, return]
[), ;, }, public, double, getSupportLowerBound, (, ), {, return, min, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[min, ;, }, public, double, getSupportUpperBound, (, ), {, return, max, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[max, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[true, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, true, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[}, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, return]
[sample, (, ), {, return, getNextValue, (, ), ;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, ), {]
[sample, (, ), {, return, getNextValue, (, ), ;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, ), {]
[return, getNextValue, (, ), ;, }, @, Override, public, void, reseedRandomGenerator, (, long, seed, ), {, randomData, ., reSeed, (]
[seed, ), {, randomData, ., reSeed, (, seed, ), ;, }, private, double, pB, (, int, i, ), {, return]
[seed, ), {, randomData, ., reSeed, (, seed, ), ;, }, private, double, pB, (, int, i, ), {, return]
[seed, ), {, randomData, ., reSeed, (, seed, ), ;, }, private, double, pB, (, int, i, ), {, return]
[{, randomData, ., reSeed, (, seed, ), ;, }, private, double, pB, (, int, i, ), {, return, i, ==]
[., reSeed, (, seed, ), ;, }, private, double, pB, (, int, i, ), {, return, i, ==, 0, ?]
[., reSeed, (, seed, ), ;, }, private, double, pB, (, int, i, ), {, return, i, ==, 0, ?]
[(, seed, ), ;, }, private, double, pB, (, int, i, ), {, return, i, ==, 0, ?, upperBounds, []
[;, }, private, double, pB, (, int, i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :]
[;, }, private, double, pB, (, int, i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :]
[;, }, private, double, pB, (, int, i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :]
[private, double, pB, (, int, i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :, upperBounds, []
[(, int, i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :, upperBounds, [, i, ], -]
[(, int, i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :, upperBounds, [, i, ], -]
[i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :, upperBounds, [, i, ], -, upperBounds, []
[i, ), {, return, i, ==, 0, ?, upperBounds, [, 0, ], :, upperBounds, [, i, ], -, upperBounds, []
[{, return, i, ==, 0, ?, upperBounds, [, 0, ], :, upperBounds, [, i, ], -, upperBounds, [, i, -]
[i, ], -, upperBounds, [, i, -, 1, ], ;, }, private, double, pBminus, (, int, i, ), {, return]
[i, ], -, upperBounds, [, i, -, 1, ], ;, }, private, double, pBminus, (, int, i, ), {, return]
[i, ], -, upperBounds, [, i, -, 1, ], ;, }, private, double, pBminus, (, int, i, ), {, return]
[-, upperBounds, [, i, -, 1, ], ;, }, private, double, pBminus, (, int, i, ), {, return, i, ==]
[[, i, -, 1, ], ;, }, private, double, pBminus, (, int, i, ), {, return, i, ==, 0, ?]
[-, 1, ], ;, }, private, double, pBminus, (, int, i, ), {, return, i, ==, 0, ?, 0, :]
[-, 1, ], ;, }, private, double, pBminus, (, int, i, ), {, return, i, ==, 0, ?, 0, :]
[], ;, }, private, double, pBminus, (, int, i, ), {, return, i, ==, 0, ?, 0, :, upperBounds, []
[], ;, }, private, double, pBminus, (, int, i, ), {, return, i, ==, 0, ?, 0, :, upperBounds, []
[}, private, double, pBminus, (, int, i, ), {, return, i, ==, 0, ?, 0, :, upperBounds, [, i, -]
[(, int, i, ), {, return, i, ==, 0, ?, 0, :, upperBounds, [, i, -, 1, ], ;, }]
[), {, return, i, ==, 0, ?, 0, :, upperBounds, [, i, -, 1, ], ;, }, @, SuppressWarnings, (]
[}, @, SuppressWarnings, (, "deprecation", ), private, double, kB, (, int, i, ), {, final, double, [, ], binBounds, =]
[kB, (, int, i, ), {, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, RealDistribution, kernel, =]
[int, i, ), {, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, RealDistribution, kernel, =, getKernel, (]
[int, i, ), {, final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, RealDistribution, kernel, =, getKernel, (]
[final, double, [, ], binBounds, =, getUpperBounds, (, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (]
[=, getUpperBounds, (, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, return]
[=, getUpperBounds, (, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, return]
[=, getUpperBounds, (, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, return]
[(, ), ;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, return, i, ==]
[;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, return, i, ==, 0, ?]
[;, final, RealDistribution, kernel, =, getKernel, (, binStats, ., get, (, i, ), ), ;, return, i, ==, 0, ?]
[=, getKernel, (, binStats, ., get, (, i, ), ), ;, return, i, ==, 0, ?, kernel, ., cumulativeProbability, (]
[(, binStats, ., get, (, i, ), ), ;, return, i, ==, 0, ?, kernel, ., cumulativeProbability, (, min, ,]
[(, binStats, ., get, (, i, ), ), ;, return, i, ==, 0, ?, kernel, ., cumulativeProbability, (, min, ,]
[., get, (, i, ), ), ;, return, i, ==, 0, ?, kernel, ., cumulativeProbability, (, min, ,, binBounds, []
[), ), ;, return, i, ==, 0, ?, kernel, ., cumulativeProbability, (, min, ,, binBounds, [, 0, ], ), :]
[), ), ;, return, i, ==, 0, ?, kernel, ., cumulativeProbability, (, min, ,, binBounds, [, 0, ], ), :]
[i, ==, 0, ?, kernel, ., cumulativeProbability, (, min, ,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (]
[i, ==, 0, ?, kernel, ., cumulativeProbability, (, min, ,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (]
[0, ?, kernel, ., cumulativeProbability, (, min, ,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (, binBounds, []
[0, ?, kernel, ., cumulativeProbability, (, min, ,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (, binBounds, []
[kernel, ., cumulativeProbability, (, min, ,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (, binBounds, [, i, -]
[(, min, ,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (, binBounds, [, i, -, 1, ], ,]
[(, min, ,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (, binBounds, [, i, -, 1, ], ,]
[,, binBounds, [, 0, ], ), :, kernel, ., cumulativeProbability, (, binBounds, [, i, -, 1, ], ,, binBounds, []
[,, binBounds, [, i, ], ), ;, }, private, RealDistribution, k, (, double, x, ), {, final, int, binIndex, =]
[[, i, ], ), ;, }, private, RealDistribution, k, (, double, x, ), {, final, int, binIndex, =, findBin, (]
[;, }, private, RealDistribution, k, (, double, x, ), {, final, int, binIndex, =, findBin, (, x, ), ;, return]
[private, RealDistribution, k, (, double, x, ), {, final, int, binIndex, =, findBin, (, x, ), ;, return, getKernel, (]
[private, RealDistribution, k, (, double, x, ), {, final, int, binIndex, =, findBin, (, x, ), ;, return, getKernel, (]
[double, x, ), {, final, int, binIndex, =, findBin, (, x, ), ;, return, getKernel, (, binStats, ., get, (]
[getKernel, (, binStats, ., get, (, binIndex, ), ), ;, }, private, double, cumBinP, (, int, binIndex, ), {, return]
[getKernel, (, binStats, ., get, (, binIndex, ), ), ;, }, private, double, cumBinP, (, int, binIndex, ), {, return]
[binStats, ., get, (, binIndex, ), ), ;, }, private, double, cumBinP, (, int, binIndex, ), {, return, upperBounds, []
[int, binIndex, ), {, return, upperBounds, [, binIndex, ], ;, }, protected, RealDistribution, getKernel, (, SummaryStatistics, bStats, ), {, return]
[{, return, upperBounds, [, binIndex, ], ;, }, protected, RealDistribution, getKernel, (, SummaryStatistics, bStats, ), {, return, new, NormalDistribution, (]
[{, return, upperBounds, [, binIndex, ], ;, }, protected, RealDistribution, getKernel, (, SummaryStatistics, bStats, ), {, return, new, NormalDistribution, (]
[;, }, protected, RealDistribution, getKernel, (, SummaryStatistics, bStats, ), {, return, new, NormalDistribution, (, randomData, ., getRandomGenerator, (, ), ,]
[;, }, protected, RealDistribution, getKernel, (, SummaryStatistics, bStats, ), {, return, new, NormalDistribution, (, randomData, ., getRandomGenerator, (, ), ,]
[SummaryStatistics, bStats, ), {, return, new, NormalDistribution, (, randomData, ., getRandomGenerator, (, ), ,, bStats, ., getMean, (, ), ,]
[SummaryStatistics, bStats, ), {, return, new, NormalDistribution, (, randomData, ., getRandomGenerator, (, ), ,, bStats, ., getMean, (, ), ,]
[NormalDistribution, (, randomData, ., getRandomGenerator, (, ), ,, bStats, ., getMean, (, ), ,, bStats, ., getStandardDeviation, (, ), ,]
[NormalDistribution, (, randomData, ., getRandomGenerator, (, ), ,, bStats, ., getMean, (, ), ,, bStats, ., getStandardDeviation, (, ), ,]
