[apache, ., commons, ., math3, ., util, ., FastMath, ;, public, class, Beta, {, private, static, final, double, DEFAULT_EPSILON, =]
[FastMath, ;, public, class, Beta, {, private, static, final, double, DEFAULT_EPSILON, =, 1E-14, ;, private, static, final, double, HALF_LOG_TWO_PI, =]
[DEFAULT_EPSILON, =, 1E-14, ;, private, static, final, double, HALF_LOG_TWO_PI, =, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =]
[=, 1E-14, ;, private, static, final, double, HALF_LOG_TWO_PI, =, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =, {]
[;, private, static, final, double, HALF_LOG_TWO_PI, =, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,]
[private, static, final, double, HALF_LOG_TWO_PI, =, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -]
[final, double, HALF_LOG_TWO_PI, =, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,]
[HALF_LOG_TWO_PI, =, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,]
[=, .9189385332046727, ;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -]
[;, private, static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,]
[static, final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,]
[final, double, [, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -]
[[, ], DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,]
[DELTA, =, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,]
[=, {, .833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -]
[.833333333333333333333333333333E-01, ,, -, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,]
[-, .277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,]
[.277777777777777777777777752282E-04, ,, .793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -]
[.793650793650793650791732130419E-07, ,, -, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,]
[-, .595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,]
[.595238095238095232389839236182E-09, ,, .841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -]
[.841750841750832853294451671990E-11, ,, -, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,]
[-, .191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,]
[.191752691751854612334149171243E-12, ,, .641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -]
[.641025640510325475730918472625E-14, ,, -, .295506514125338232839867823991E-15, ,, .179643716359402238723287696452E-16, ,, -, .139228964661627791231203060395E-17, ,, .133802855014020915603275339093E-18, ,, -, .154246009867966094273710216533E-19, ,, .197701992980957427278370133333E-20, ,, -, .234065664793997056856992426667E-21, ,]
[(, ), {, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ), {, return]
[{, }, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ), {, return, regularizedBeta, (]
[public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ), {, return, regularizedBeta, (, x, ,]
[double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ), {, return, regularizedBeta, (, x, ,, a, ,]
[(, double, x, ,, double, a, ,, double, b, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,]
[x, ,, double, a, ,, double, b, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,, DEFAULT_EPSILON, ,]
[x, ,, double, a, ,, double, b, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,, DEFAULT_EPSILON, ,]
[}, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, double, epsilon, ), {, return]
[static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, double, epsilon, ), {, return, regularizedBeta, (]
[regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, double, epsilon, ), {, return, regularizedBeta, (, x, ,]
[double, x, ,, double, a, ,, double, b, ,, double, epsilon, ), {, return, regularizedBeta, (, x, ,, a, ,]
[,, double, a, ,, double, b, ,, double, epsilon, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,]
[a, ,, double, b, ,, double, epsilon, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,, epsilon, ,]
[a, ,, double, b, ,, double, epsilon, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,, epsilon, ,]
[}, public, static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, int, maxIterations, ), {, return]
[static, double, regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, int, maxIterations, ), {, return, regularizedBeta, (]
[regularizedBeta, (, double, x, ,, double, a, ,, double, b, ,, int, maxIterations, ), {, return, regularizedBeta, (, x, ,]
[double, x, ,, double, a, ,, double, b, ,, int, maxIterations, ), {, return, regularizedBeta, (, x, ,, a, ,]
[,, double, a, ,, double, b, ,, int, maxIterations, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,]
[a, ,, double, b, ,, int, maxIterations, ), {, return, regularizedBeta, (, x, ,, a, ,, b, ,, DEFAULT_EPSILON, ,]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, a, ,, final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (]
[final, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (, Double, ., isNaN, (]
[,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (, Double, ., isNaN, (, x, ), ||]
[,, double, epsilon, ,, int, maxIterations, ), {, double, ret, ;, if, (, Double, ., isNaN, (, x, ), ||]
[int, maxIterations, ), {, double, ret, ;, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (]
[{, double, ret, ;, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||]
[{, double, ret, ;, if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||]
[if, (, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (]
[., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||]
[., isNaN, (, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||]
[(, x, ), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <]
[), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||]
[), ||, Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||]
[Double, ., isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >]
[isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||]
[isNaN, (, a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||]
[a, ), ||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=]
[||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||]
[||, Double, ., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||]
[., isNaN, (, b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=]
[b, ), ||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {]
[||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =]
[||, x, <, 0, ||, x, >, 1, ||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =]
[||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (]
[||, a, <=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (]
[<=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >]
[<=, 0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >]
[0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (]
[0.0, ||, b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (]
[b, <=, 0.0, ), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +]
[), {, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /]
[{, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (]
[{, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (]
[{, ret, =, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (]
[=, Double, ., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (, a, +]
[., NaN, ;, }, else, if, (, x, >, (, a, +, 1.0, ), /, (, a, +, b, +]
[else, if, (, x, >, (, a, +, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {]
[(, x, >, (, a, +, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =]
[(, x, >, (, a, +, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =]
[>, (, a, +, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -]
[a, +, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (]
[a, +, 1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (]
[1.0, ), /, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -]
[/, (, a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,]
[a, +, b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,]
[b, +, 2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,]
[2.0, ), ), {, ret, =, 1.0, -, regularizedBeta, (, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,]
[(, 1.0, -, x, ,, b, ,, a, ,, epsilon, ,, maxIterations, ), ;, }, else, {, ContinuedFraction, fraction, =]
[Override, protected, double, getB, (, int, n, ,, double, x, ), {, double, ret, ;, double, m, ;, if, (]
[Override, protected, double, getB, (, int, n, ,, double, x, ), {, double, ret, ;, double, m, ;, if, (]
[Override, protected, double, getB, (, int, n, ,, double, x, ), {, double, ret, ;, double, m, ;, if, (]
[double, getB, (, int, n, ,, double, x, ), {, double, ret, ;, double, m, ;, if, (, n, %]
[(, int, n, ,, double, x, ), {, double, ret, ;, double, m, ;, if, (, n, %, 2, ==]
[,, double, x, ), {, double, ret, ;, double, m, ;, if, (, n, %, 2, ==, 0, ), {]
[x, ), {, double, ret, ;, double, m, ;, if, (, n, %, 2, ==, 0, ), {, m, =]
[x, ), {, double, ret, ;, double, m, ;, if, (, n, %, 2, ==, 0, ), {, m, =]
[{, double, ret, ;, double, m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /]
[ret, ;, double, m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;]
[double, m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =]
[double, m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =]
[m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (]
[m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (]
[m, ;, if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (]
[if, (, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *]
[(, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (]
[(, n, %, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (]
[%, 2, ==, 0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -]
[0, ), {, m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *]
[m, =, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /]
[=, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (]
[=, n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (]
[n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (]
[n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (]
[n, /, 2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (]
[2.0, ;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +]
[;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (]
[;, ret, =, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (]
[=, (, m, *, (, b, -, m, ), *, x, ), /, (, (, a, +, (, 2, *]
[*, (, b, -, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -]
[-, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *]
[m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (]
[m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (]
[*, x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +]
[x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (]
[x, ), /, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (]
[/, (, (, a, +, (, 2, *, m, ), -, 1, ), *, (, a, +, (, 2, *]
[m, ), -, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {]
[-, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =]
[-, 1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =]
[1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (]
[1, ), *, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (]
[*, (, a, +, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (, n, -]
[+, (, 2, *, m, ), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /]
[2, *, m, ), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;]
[m, ), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =]
[m, ), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =]
[), ), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -]
[), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (]
[), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (]
[), ), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (]
[), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (]
[), ;, }, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (]
[}, else, {, m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +]
[m, =, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *]
[=, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (]
[=, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (]
[=, (, n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (]
[n, -, 1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +]
[1.0, ), /, 2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +]
[2.0, ;, ret, =, -, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *]
[=, -, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /]
[-, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (]
[-, (, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (]
[(, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (]
[(, (, a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (]
[a, +, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +]
[+, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (]
[+, m, ), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (]
[), *, (, a, +, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *]
[+, b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *]
[b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (]
[b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (]
[b, +, m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (]
[m, ), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +]
[), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (]
[), *, x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (]
[x, ), /, (, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *]
[(, (, a, +, (, 2, *, m, ), ), *, (, a, +, (, 2, *, m, ), +]
[*, m, ), ), *, (, a, +, (, 2, *, m, ), +, 1.0, ), ), ;, }, return]
[;, }, return, ret, ;, }, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {, return]
[}, @, Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;]
[Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =]
[Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =]
[Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =]
[Override, protected, double, getA, (, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =]
[(, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (]
[(, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (]
[(, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (]
[(, int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (]
[int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (, (]
[int, n, ,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (, (]
[,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (, (, a, *]
[,, double, x, ), {, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (, (, a, *]
[{, return, 1.0, ;, }, }, ;, ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (]
[}, }, ;, ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +]
[}, ;, ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (]
[}, ;, ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (]
[ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *]
[ret, =, FastMath, ., exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *]
[exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (]
[exp, (, (, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (]
[(, a, *, FastMath, ., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -]
[., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -]
[., log, (, x, ), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -]
[), ), +, (, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (]
[(, b, *, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -]
[*, FastMath, ., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (]
[., log, (, 1.0, -, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,]
[-, x, ), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *]
[), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /]
[), ), -, FastMath, ., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /]
[., log, (, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (]
[(, a, ), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,]
[), -, logBeta, (, a, ,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,]
[,, b, ), ), *, 1.0, /, fraction, ., evaluate, (, x, ,, epsilon, ,, maxIterations, ), ;, }, return]
[Deprecated, public, static, double, logBeta, (, double, a, ,, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, return]
[static, double, logBeta, (, double, a, ,, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, return, logBeta, (]
[logBeta, (, double, a, ,, double, b, ,, double, epsilon, ,, int, maxIterations, ), {, return, logBeta, (, a, ,]
[;, }, private, static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (]
[;, }, private, static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (]
[}, private, static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (, (]
[}, private, static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (, (]
[static, double, logGammaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (, (, a, <]
[(, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (, (, a, <, 1.0, ), ||]
[final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (, (, a, <, 1.0, ), ||, (]
[final, double, a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (, (, a, <, 1.0, ), ||, (]
[a, ,, final, double, b, ), throws, OutOfRangeException, {, if, (, (, a, <, 1.0, ), ||, (, a, >]
[), throws, OutOfRangeException, {, if, (, (, a, <, 1.0, ), ||, (, a, >, 2.0, ), ), {, throw]
[{, if, (, (, a, <, 1.0, ), ||, (, a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (]
[(, (, a, <, 1.0, ), ||, (, a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,]
[a, <, 1.0, ), ||, (, a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,]
[a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (]
[a, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (]
[>, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (]
[>, 2.0, ), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (]
[), ), {, throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <]
[throw, new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <, 1.0, ), ||]
[new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <, 1.0, ), ||, (]
[new, OutOfRangeException, (, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <, 1.0, ), ||, (]
[(, a, ,, 1.0, ,, 2.0, ), ;, }, if, (, (, b, <, 1.0, ), ||, (, b, >]
[2.0, ), ;, }, if, (, (, b, <, 1.0, ), ||, (, b, >, 2.0, ), ), {, throw]
[}, if, (, (, b, <, 1.0, ), ||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException, (]
[(, (, b, <, 1.0, ), ||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,]
[b, <, 1.0, ), ||, (, b, >, 2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,]
[2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =]
[2.0, ), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =]
[), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (]
[), ), {, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (]
[{, throw, new, OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a, -]
[OutOfRangeException, (, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a, -, 1.0, ), +]
[(, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a, -, 1.0, ), +, (]
[(, b, ,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a, -, 1.0, ), +, (]
[,, 1.0, ,, 2.0, ), ;, }, final, double, x, =, (, a, -, 1.0, ), +, (, b, -]
[;, }, final, double, x, =, (, a, -, 1.0, ), +, (, b, -, 1.0, ), ;, if, (]
[;, }, final, double, x, =, (, a, -, 1.0, ), +, (, b, -, 1.0, ), ;, if, (]
[final, double, x, =, (, a, -, 1.0, ), +, (, b, -, 1.0, ), ;, if, (, x, <=]
[(, a, -, 1.0, ), +, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return]
[(, a, -, 1.0, ), +, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return]
[), +, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (]
[), +, (, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (]
[(, b, -, 1.0, ), ;, if, (, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +]
[(, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (]
[(, x, <=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (]
[<=, 0.5, ), {, return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=]
[return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return]
[return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return]
[return, Gamma, ., logGamma1p, (, 1.0, +, x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return]
[(, 1.0, +, x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (]
[x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, ), +]
[x, ), ;, }, else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, ), +]
[else, if, (, x, <=, 1.5, ), {, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (]
[{, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return]
[{, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return]
[{, return, Gamma, ., logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return]
[logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (]
[logGamma1p, (, x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (]
[x, ), +, FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -]
[FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +]
[FastMath, ., log1p, (, x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +]
[x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (]
[x, ), ;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (]
[;, }, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *]
[}, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *, (]
[}, else, {, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *, (]
[{, return, Gamma, ., logGamma1p, (, x, -, 1.0, ), +, FastMath, ., log, (, x, *, (, 1.0, +]
[}, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {, if, (]
[}, }, private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {, if, (]
[private, static, double, logGammaMinusLogGammaSum, (, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {, if, (, a, <]
[(, final, double, a, ,, final, double, b, ), throws, NumberIsTooSmallException, {, if, (, a, <, 0.0, ), {, throw]
[a, ,, final, double, b, ), throws, NumberIsTooSmallException, {, if, (, a, <, 0.0, ), {, throw, new, NumberIsTooSmallException, (]
[final, double, b, ), throws, NumberIsTooSmallException, {, if, (, a, <, 0.0, ), {, throw, new, NumberIsTooSmallException, (, a, ,]
[b, ), throws, NumberIsTooSmallException, {, if, (, a, <, 0.0, ), {, throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,]
[(, a, <, 0.0, ), {, throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, ), ;, }, if, (]
[(, a, <, 0.0, ), {, throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, ), ;, }, if, (]
[<, 0.0, ), {, throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, ), ;, }, if, (, b, <]
[throw, new, NumberIsTooSmallException, (, a, ,, 0.0, ,, true, ), ;, }, if, (, b, <, 10.0, ), {, throw]
[(, a, ,, 0.0, ,, true, ), ;, }, if, (, b, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (]
[,, 0.0, ,, true, ), ;, }, if, (, b, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, b, ,]
[,, true, ), ;, }, if, (, b, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10.0, ,]
[NumberIsTooSmallException, (, b, ,, 10.0, ,, true, ), ;, }, final, double, d, ;, final, double, w, ;, if, (]
[NumberIsTooSmallException, (, b, ,, 10.0, ,, true, ), ;, }, final, double, d, ;, final, double, w, ;, if, (]
[b, ,, 10.0, ,, true, ), ;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=]
[,, true, ), ;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {]
[), ;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =]
[), ;, }, final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =]
[}, final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =, b, +]
[final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =, b, +, (]
[final, double, d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =, b, +, (]
[d, ;, final, double, w, ;, if, (, a, <=, b, ), {, d, =, b, +, (, a, -]
[double, w, ;, if, (, a, <=, b, ), {, d, =, b, +, (, a, -, 0.5, ), ;]
[;, if, (, a, <=, b, ), {, d, =, b, +, (, a, -, 0.5, ), ;, w, =]
[(, a, <=, b, ), {, d, =, b, +, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (]
[<=, b, ), {, d, =, b, +, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,]
[b, +, (, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {]
[(, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =]
[(, a, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =]
[-, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +]
[0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (]
[0.5, ), ;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (]
[;, w, =, deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (, b, -]
[deltaMinusDeltaSum, (, a, ,, b, ), ;, }, else, {, d, =, a, +, (, b, -, 0.5, ), ;]
[a, ,, b, ), ;, }, else, {, d, =, a, +, (, b, -, 0.5, ), ;, w, =]
[b, ), ;, }, else, {, d, =, a, +, (, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (]
[;, }, else, {, d, =, a, +, (, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,]
[(, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =]
[(, b, -, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =]
[-, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *]
[-, 0.5, ), ;, w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *]
[w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, ., log1p, (]
[w, =, deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, ., log1p, (]
[deltaMinusDeltaSum, (, b, ,, a, ), ;, }, final, double, u, =, d, *, FastMath, ., log1p, (, a, /]
[}, final, double, u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =]
[}, final, double, u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =]
[double, u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =, a, *]
[u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =, a, *, (]
[u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =, a, *, (]
[u, =, d, *, FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =, a, *, (]
[FastMath, ., log1p, (, a, /, b, ), ;, final, double, v, =, a, *, (, FastMath, ., log, (]
[(, a, /, b, ), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -]
[), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return]
[), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return]
[), ;, final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return]
[final, double, v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u, <=]
[v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?]
[v, =, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?]
[=, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (]
[=, a, *, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (]
[*, (, FastMath, ., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -]
[., log, (, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -]
[(, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :]
[(, b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :]
[b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (]
[b, ), -, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (]
[-, 1.0, ), ;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -]
[;, return, u, <=, v, ?, (, w, -, u, ), -, v, :, (, w, -, v, ), -]
[private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (]
[private, static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (]
[static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (]
[static, double, deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (]
[deltaMinusDeltaSum, (, final, double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (, a, <]
[double, a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (, a, <, 0, ), ||]
[a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (, a, <, 0, ), ||, (]
[a, ,, final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (, a, <, 0, ), ||, (]
[final, double, b, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (, a, <, 0, ), ||, (, a, >]
[OutOfRangeException, ,, NumberIsTooSmallException, {, if, (, (, a, <, 0, ), ||, (, a, >, b, ), ), {, throw]
[{, if, (, (, a, <, 0, ), ||, (, a, >, b, ), ), {, throw, new, OutOfRangeException, (]
[(, (, a, <, 0, ), ||, (, a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,]
[a, <, 0, ), ||, (, a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,]
[a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (]
[a, >, b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (]
[b, ), ), {, throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (, b, <]
[throw, new, OutOfRangeException, (, a, ,, 0, ,, b, ), ;, }, if, (, b, <, 10, ), {, throw]
[(, a, ,, 0, ,, b, ), ;, }, if, (, b, <, 10, ), {, throw, new, NumberIsTooSmallException, (]
[,, 0, ,, b, ), ;, }, if, (, b, <, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,]
[,, b, ), ;, }, if, (, b, <, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,]
[<, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, ), ;, }, final, double, h, =]
[<, 10, ), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, ), ;, }, final, double, h, =]
[), {, throw, new, NumberIsTooSmallException, (, b, ,, 10, ,, true, ), ;, }, final, double, h, =, a, /]
[b, ,, 10, ,, true, ), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =]
[b, ,, 10, ,, true, ), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =]
[10, ,, true, ), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h, /]
[,, true, ), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h, /, (]
[,, true, ), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h, /, (]
[), ;, }, final, double, h, =, a, /, b, ;, final, double, p, =, h, /, (, 1.0, +]
[a, /, b, ;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =]
[a, /, b, ;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =]
[b, ;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =, 1.0, /]
[;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =, 1.0, /, (]
[;, final, double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =, 1.0, /, (]
[double, p, =, h, /, (, 1.0, +, h, ), ;, final, double, q, =, 1.0, /, (, 1.0, +]
[+, h, ), ;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =]
[+, h, ), ;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =]
[), ;, final, double, q, =, 1.0, /, (, 1.0, +, h, ), ;, final, double, q2, =, q, *]
[(, 1.0, +, h, ), ;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =]
[h, ), ;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, []
[h, ), ;, final, double, q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, []
[q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, [, DELTA, ., length, ], ;]
[q2, =, q, *, q, ;, final, double, [, ], s, =, new, double, [, DELTA, ., length, ], ;]
[q, *, q, ;, final, double, [, ], s, =, new, double, [, DELTA, ., length, ], ;, s, []
[;, final, double, [, ], s, =, new, double, [, DELTA, ., length, ], ;, s, [, 0, ], =]
[new, double, [, DELTA, ., length, ], ;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =]
[[, DELTA, ., length, ], ;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;]
[[, DELTA, ., length, ], ;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;]
[., length, ], ;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <]
[., length, ], ;, s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <]
[s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;]
[s, [, 0, ], =, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;]
[=, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, ), {]
[=, 1.0, ;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, ), {, s, []
[int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =]
[int, i, =, 1, ;, i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =]
[=, 1, ;, i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +]
[1, ;, i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (]
[1, ;, i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (]
[i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +]
[i, <, s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +]
[s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *]
[s, ., length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *]
[length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s, []
[length, ;, i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s, []
[i, ++, ), {, s, [, i, ], =, 1.0, +, (, q, +, q2, *, s, [, i, -]
[1.0, +, (, q, +, q2, *, s, [, i, -, 1, ], ), ;, }, final, double, sqrtT, =]
[1.0, +, (, q, +, q2, *, s, [, i, -, 1, ], ), ;, }, final, double, sqrtT, =]
[(, q, +, q2, *, s, [, i, -, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /]
[[, i, -, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =]
[[, i, -, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =]
[-, 1, ], ), ;, }, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *]
[}, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =]
[}, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =]
[}, final, double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =]
[double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, []
[double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, []
[double, sqrtT, =, 10.0, /, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, []
[/, b, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -]
[final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *]
[final, double, t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *]
[t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *, s, []
[t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *, s, []
[t, =, sqrtT, *, sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *, s, []
[sqrtT, ;, double, w, =, DELTA, [, DELTA, ., length, -, 1, ], *, s, [, s, ., length, -]
[., length, -, 1, ], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =]
[., length, -, 1, ], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =]
[., length, -, 1, ], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =]
[], *, s, [, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -]
[s, [, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;]
[s, [, s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;]
[s, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=]
[length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;]
[length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;]
[;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =]
[(, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =]
[(, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =]
[i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =, t, *]
[DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +]
[DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +]
[DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, []
[;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *]
[;, i, >=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *]
[>=, 0, ;, i, --, ), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, []
[), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return]
[), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return]
[), {, w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return]
[w, =, t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return, w, *]
[t, *, w, +, DELTA, [, i, ], *, s, [, i, ], ;, }, return, w, *, p, /]
[/, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (]
[/, b, ;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (]
[;, }, private, static, double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (, p, <]
[double, sumDeltaMinusDeltaSum, (, final, double, p, ,, final, double, q, ), {, if, (, p, <, 10.0, ), {, throw]
[final, double, p, ,, final, double, q, ), {, if, (, p, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (]
[p, ,, final, double, q, ), {, if, (, p, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, p, ,]
[final, double, q, ), {, if, (, p, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,]
[(, p, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, ), ;, }, if, (]
[(, p, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, ), ;, }, if, (]
[<, 10.0, ), {, throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, ), ;, }, if, (, q, <]
[throw, new, NumberIsTooSmallException, (, p, ,, 10.0, ,, true, ), ;, }, if, (, q, <, 10.0, ), {, throw]
[(, p, ,, 10.0, ,, true, ), ;, }, if, (, q, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (]
[,, 10.0, ,, true, ), ;, }, if, (, q, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,]
[,, true, ), ;, }, if, (, q, <, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,]
[<, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;, }, final, double, a, =]
[<, 10.0, ), {, throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;, }, final, double, a, =]
[throw, new, NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;, }, final, double, a, =, FastMath, ., min, (]
[NumberIsTooSmallException, (, q, ,, 10.0, ,, true, ), ;, }, final, double, a, =, FastMath, ., min, (, p, ,]
[), ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =]
[), ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =]
[double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (]
[=, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,]
[q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, final, double, sqrtT, =]
[q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, final, double, sqrtT, =]
[;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, final, double, sqrtT, =, 10.0, /]
[., max, (, p, ,, q, ), ;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =]
[., max, (, p, ,, q, ), ;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =]
[(, p, ,, q, ), ;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *]
[;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =]
[;, final, double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =]
[double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =, DELTA, []
[double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =, DELTA, []
[double, sqrtT, =, 10.0, /, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =, DELTA, []
[/, a, ;, final, double, t, =, sqrtT, *, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -]
[*, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =]
[*, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =]
[*, sqrtT, ;, double, z, =, DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =]
[z, =, DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -]
[DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;]
[DELTA, [, DELTA, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;]
[DELTA, ., length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=]
[length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;]
[length, -, 1, ], ;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;]
[;, for, (, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =]
[(, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =]
[(, int, i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =]
[i, =, DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =, t, *]
[DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =, t, *, z, +]
[DELTA, ., length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =, t, *, z, +]
[length, -, 2, ;, i, >=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, []
[>=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return]
[>=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return]
[>=, 0, ;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return]
[;, i, --, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /]
[--, ), {, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /, a, +]
[{, z, =, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (]
[=, t, *, z, +, DELTA, [, i, ], ;, }, return, z, /, a, +, deltaMinusDeltaSum, (, a, ,]
[b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (]
[b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (]
[b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (]
[b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (]
[b, ), ;, }, public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (]
[public, static, double, logBeta, (, final, double, p, ,, final, double, q, ), {, if, (, Double, ., isNaN, (]
[logBeta, (, final, double, p, ,, final, double, q, ), {, if, (, Double, ., isNaN, (, p, ), ||]
[logBeta, (, final, double, p, ,, final, double, q, ), {, if, (, Double, ., isNaN, (, p, ), ||]
[p, ,, final, double, q, ), {, if, (, Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (]
[double, q, ), {, if, (, Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||]
[q, ), {, if, (, Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (]
[q, ), {, if, (, Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (]
[{, if, (, Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=]
[Double, ., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||]
[., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (]
[., isNaN, (, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (]
[(, p, ), ||, Double, ., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (, q, <=]
[., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, ), ), {, return]
[., isNaN, (, q, ), ||, (, p, <=, 0.0, ), ||, (, q, <=, 0.0, ), ), {, return]
[0.0, ), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =]
[0.0, ), ||, (, q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =]
[q, <=, 0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, ., min, (]
[0.0, ), ), {, return, Double, ., NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,]
[NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =]
[NaN, ;, }, final, double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =]
[double, a, =, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (]
[=, FastMath, ., min, (, p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,]
[p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, if, (]
[p, ,, q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, if, (]
[q, ), ;, final, double, b, =, FastMath, ., max, (, p, ,, q, ), ;, if, (, a, >=]
[FastMath, ., max, (, p, ,, q, ), ;, if, (, a, >=, 10.0, ), {, final, double, w, =]
[max, (, p, ,, q, ), ;, if, (, a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (]
[p, ,, q, ), ;, if, (, a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,]
[a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =]
[a, >=, 10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =]
[10.0, ), {, final, double, w, =, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =, a, /]
[=, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =, a, /, b, ;, final, double, c, =]
[=, sumDeltaMinusDeltaSum, (, a, ,, b, ), ;, final, double, h, =, a, /, b, ;, final, double, c, =]
[(, a, ,, b, ), ;, final, double, h, =, a, /, b, ;, final, double, c, =, h, /]
[a, ,, b, ), ;, final, double, h, =, a, /, b, ;, final, double, c, =, h, /, (]
[a, ,, b, ), ;, final, double, h, =, a, /, b, ;, final, double, c, =, h, /, (]
[b, ), ;, final, double, h, =, a, /, b, ;, final, double, c, =, h, /, (, 1.0, +]
[a, /, b, ;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =]
[a, /, b, ;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =]
[/, b, ;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -]
[b, ;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -, (]
[b, ;, final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -, (]
[final, double, c, =, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -, (, a, -]
[=, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -, (, a, -, 0.5, ), *]
[=, h, /, (, 1.0, +, h, ), ;, final, double, u, =, -, (, a, -, 0.5, ), *]
[1.0, +, h, ), ;, final, double, u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (]
[u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;, final, double, v, =]
[u, =, -, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;, final, double, v, =]
[-, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *]
[-, (, a, -, 0.5, ), *, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *]
[0.5, ), *, FastMath, ., log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (]
[log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (]
[log, (, c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (]
[c, ), ;, final, double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=]
[double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return]
[double, v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return]
[v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (]
[v, =, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (]
[=, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (]
[=, b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (]
[b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (]
[b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (]
[b, *, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (]
[*, FastMath, ., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (, -]
[., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (, -, 0.5, *]
[., log1p, (, h, ), ;, if, (, u, <=, v, ), {, return, (, (, (, -, 0.5, *]
[), ;, if, (, u, <=, v, ), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (]
[(, u, <=, v, ), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +]
[v, ), {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +]
[return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -]
[(, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -]
[log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return]
[log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return]
[(, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (]
[(, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (]
[b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (]
[b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (]
[), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (]
[), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (]
[), +, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (]
[+, HALF_LOG_TWO_PI, ), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -]
[), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *]
[), +, w, ), -, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *]
[-, u, ), -, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (]
[-, v, ;, }, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +]
[}, else, {, return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +]
[return, (, (, (, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -]
[(, -, 0.5, *, FastMath, ., log, (, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -]
[(, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }, }, else, if, (]
[(, b, ), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }, }, else, if, (]
[), +, HALF_LOG_TWO_PI, ), +, w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >]
[w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (]
[w, ), -, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (]
[-, v, ), -, u, ;, }, }, else, if, (, a, >, 2.0, ), {, if, (, b, >]
[}, else, if, (, a, >, 2.0, ), {, if, (, b, >, 1000.0, ), {, final, int, n, =]
[(, a, >, 2.0, ), {, if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, )]
[(, a, >, 2.0, ), {, if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, )]
[), {, if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor, (]
[), {, if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor, (]
[if, (, b, >, 1000.0, ), {, final, int, n, =, (, int, ), FastMath, ., floor, (, a, -]
[{, final, int, n, =, (, int, ), FastMath, ., floor, (, a, -, 1.0, ), ;, double, prod, =]
[(, int, ), FastMath, ., floor, (, a, -, 1.0, ), ;, double, prod, =, 1.0, ;, double, ared, =]
[a, -, 1.0, ), ;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =]
[1.0, ), ;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;]
[1.0, ), ;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;]
[;, double, prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i, <]
[prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[prod, =, 1.0, ;, double, ared, =, a, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, ared, =, a, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, a, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /]
[=, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (]
[=, 0, ;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (]
[;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +]
[;, i, <, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +]
[<, n, ;, i, ++, ), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /]
[), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return]
[), {, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return]
[{, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (]
[{, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (]
[{, ared, -=, 1.0, ;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (]
[;, prod, *=, ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (]
[ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -]
[ared, /, (, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -]
[(, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *]
[(, 1.0, +, ared, /, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *]
[/, b, ), ;, }, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (]
[}, return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), ), +]
[return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), ), +, (]
[return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), ), +, (]
[return, (, FastMath, ., log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), ), +, (]
[log, (, prod, ), -, n, *, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (]
[), -, n, *, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +]
[n, *, FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (]
[FastMath, ., log, (, b, ), ), +, (, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,]
[., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else, {, double, prod1, =]
[+, logGammaMinusLogGammaSum, (, ared, ,, b, ), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =]
[,, b, ), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (]
[,, b, ), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (]
[), ), ;, }, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >]
[}, else, {, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >, 2.0, ), {]
[{, double, prod1, =, 1.0, ;, double, ared, =, a, ;, while, (, ared, >, 2.0, ), {, ared, -=]
[double, ared, =, a, ;, while, (, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =]
[double, ared, =, a, ;, while, (, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =]
[=, a, ;, while, (, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /]
[;, while, (, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;]
[(, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=]
[(, ared, >, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=]
[>, 2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /]
[2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /, (]
[2.0, ), {, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /, (]
[{, ared, -=, 1.0, ;, final, double, h, =, ared, /, b, ;, prod1, *=, h, /, (, 1.0, +]
[double, h, =, ared, /, b, ;, prod1, *=, h, /, (, 1.0, +, h, ), ;, }, if, (]
[double, h, =, ared, /, b, ;, prod1, *=, h, /, (, 1.0, +, h, ), ;, }, if, (]
[=, ared, /, b, ;, prod1, *=, h, /, (, 1.0, +, h, ), ;, }, if, (, b, <]
[*=, h, /, (, 1.0, +, h, ), ;, }, if, (, b, <, 10.0, ), {, double, prod2, =]
[+, h, ), ;, }, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =]
[}, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (]
[}, if, (, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (]
[(, b, <, 10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >]
[10.0, ), {, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {]
[{, double, prod2, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=]
[prod2, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;]
[1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=]
[1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=]
[double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /]
[bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (]
[bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (]
[b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return]
[bred, -=, 1.0, ;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (]
[;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +]
[;, prod2, *=, bred, /, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +]
[/, (, ared, +, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (]
[+, bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +]
[bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (]
[bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (]
[bred, ), ;, }, return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (]
[return, FastMath, ., log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (]
[log, (, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +]
[(, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (]
[(, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (]
[(, prod1, ), +, FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (]
[FastMath, ., log, (, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (]
[(, prod2, ), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -]
[), +, (, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (]
[(, Gamma, ., logGamma, (, ared, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return]
[bred, ), -, logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return, FastMath, ., log, (]
[logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +]
[logGammaSum, (, ared, ,, bred, ), ), ), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +]
[bred, ), ), ), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (]
[), ;, }, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +]
[}, else, {, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (]
[{, return, FastMath, ., log, (, prod1, ), +, Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,]
[Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (]
[Gamma, ., logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (]
[logGamma, (, ared, ), +, logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (, a, >=]
[logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (, a, >=, 1.0, ), {, if, (]
[logGammaMinusLogGammaSum, (, ared, ,, b, ), ;, }, }, }, else, if, (, a, >=, 1.0, ), {, if, (]
[ared, ,, b, ), ;, }, }, }, else, if, (, a, >=, 1.0, ), {, if, (, b, >]
[}, }, }, else, if, (, a, >=, 1.0, ), {, if, (, b, >, 2.0, ), {, if, (]
[}, }, }, else, if, (, a, >=, 1.0, ), {, if, (, b, >, 2.0, ), {, if, (]
[}, else, if, (, a, >=, 1.0, ), {, if, (, b, >, 2.0, ), {, if, (, b, <]
[1.0, ), {, if, (, b, >, 2.0, ), {, if, (, b, <, 10.0, ), {, double, prod, =]
[b, >, 2.0, ), {, if, (, b, <, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =]
[{, if, (, b, <, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (]
[{, if, (, b, <, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (]
[(, b, <, 10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >]
[10.0, ), {, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {]
[{, double, prod, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=]
[prod, =, 1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;]
[1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=]
[1.0, ;, double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=]
[double, bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /]
[bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (]
[bred, =, b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (]
[b, ;, while, (, bred, >, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return]
[>, 2.0, ), {, bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return]
[bred, -=, 1.0, ;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (]
[;, prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +]
[prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (]
[prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (]
[prod, *=, bred, /, (, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (]
[(, a, +, bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (]
[bred, ), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +]
[), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (]
[), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (]
[), ;, }, return, FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (]
[FastMath, ., log, (, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (]
[(, prod, ), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -]
[), +, (, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (]
[(, Gamma, ., logGamma, (, a, ), +, (, Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return]
[Gamma, ., logGamma, (, bred, ), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return]
[bred, ), -, logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return, Gamma, ., logGamma, (]
[logGammaSum, (, a, ,, bred, ), ), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +]
[a, ,, bred, ), ), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (]
[bred, ), ), ), ;, }, else, {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,]
[return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return]
[return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return]
[return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return]
[return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return]
[(, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return, Gamma, ., logGamma, (]
[+, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +]
[+, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +]
[,, b, ), ;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (]
[;, }, }, else, {, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, ), -]
[}, else, {, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, ), -, logGammaSum, (]
[{, return, Gamma, ., logGamma, (, a, ), +, Gamma, ., logGamma, (, b, ), -, logGammaSum, (, a, ,]
[Gamma, ., logGamma, (, b, ), -, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (]
[Gamma, ., logGamma, (, b, ), -, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (]
[logGamma, (, b, ), -, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b, >=]
[-, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return]
[-, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return]
[-, logGammaSum, (, a, ,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return]
[,, b, ), ;, }, }, else, {, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (]
[;, }, }, else, {, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (, a, ), +]
[}, else, {, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (]
[{, if, (, b, >=, 10.0, ), {, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,]
[{, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return]
[{, return, Gamma, ., logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return]
[logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (]
[logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (]
[logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (]
[logGamma, (, a, ), +, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (]
[+, logGammaMinusLogGammaSum, (, a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (]
[a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *]
[a, ,, b, ), ;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *]
[;, }, else, {, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (]
[{, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /]
[{, return, FastMath, ., log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /]
[log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (]
[log, (, Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (]
[Gamma, ., gamma, (, a, ), *, Gamma, ., gamma, (, b, ), /, Gamma, ., gamma, (, a, +]
