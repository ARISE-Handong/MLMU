[=, compiler, ;, visibilityByDeclaringNameNode, =, Maps, ., newHashMap, (, ), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {]
[., compiler, =, compiler, ;, visibilityByDeclaringNameNode, =, Maps, ., newHashMap, (, ), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode]
[;, visibilityByDeclaringNameNode, =, Maps, ., newHashMap, (, ), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent]
[=, Maps, ., newHashMap, (, ), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode]
[;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent, (, ), ;, Preconditions]
[., newHashMap, (, ), ;, }, public, VariableVisibility, getVariableVisibility, (, Node, declaringNameNode, ), {, Node, parent, =, declaringNameNode, ., getParent]
[;, Preconditions, ., checkArgument, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ||, parent, ., isParamList]
[., getParent, (, ), ;, Preconditions, ., checkArgument, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, )]
[;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., checkArgument, (, parent, ., isVar, (, ), ||, parent, ., isFunction, (, ), ||, parent, ., isParamList, (, )]
[), ;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[||, parent, ., isParamList, (, ), ), ;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode, ), ;, }, @, Override, public]
[||, parent, ., isFunction, (, ), ||, parent, ., isParamList, (, ), ), ;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode]
[., isVar, (, ), ||, parent, ., isFunction, (, ), ||, parent, ., isParamList, (, ), ), ;, return, visibilityByDeclaringNameNode]
[||, parent, ., isParamList, (, ), ), ;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode, ), ;, }, @, Override, public]
[., isFunction, (, ), ||, parent, ., isParamList, (, ), ), ;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode, ), ;]
[), ;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[., isParamList, (, ), ), ;, return, visibilityByDeclaringNameNode, ., get, (, declaringNameNode, ), ;, }, @, Override, public, void, process]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback]
[., get, (, declaringNameNode, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols]
[,, ReferenceCollectingCallback, ., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, .]
[., DO_NOTHING_BEHAVIOR, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :]
[;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (]
[., traverse, (, compiler, ,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, )]
[,, root, ,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection]
[,, callback, ), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback]
[), ;, for, (, Var, variable, :, callback, ., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences]
[), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (, variable]
[., getAllSymbols, (, ), ), {, ReferenceCollection, referenceCollection, =, callback, ., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if]
[;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (, variable, ), ), {, visibility, =, VariableVisibility, ., PARAMETER, ;, }, else]
[., getReferences, (, variable, ), ;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (, variable, ), ), {, visibility, =, VariableVisibility]
[), ;, VariableVisibility, visibility, ;, if, (, variableIsParameter, (, variable, ), ), {, visibility, =, VariableVisibility, ., PARAMETER, ;, }]
[), {, visibility, =, VariableVisibility, ., PARAMETER, ;, }, else, if, (, variable, ., isLocal, (, ), ), {, if]
[), ), {, visibility, =, VariableVisibility, ., PARAMETER, ;, }, else, if, (, variable, ., isLocal, (, ), ), {]
[=, VariableVisibility, ., PARAMETER, ;, }, else, if, (, variable, ., isLocal, (, ), ), {, if, (, referenceCollection, .]
[;, }, else, if, (, variable, ., isLocal, (, ), ), {, if, (, referenceCollection, ., isEscaped, (, ), )]
[., PARAMETER, ;, }, else, if, (, variable, ., isLocal, (, ), ), {, if, (, referenceCollection, ., isEscaped, (]
[), {, if, (, referenceCollection, ., isEscaped, (, ), ), {, visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {]
[., isLocal, (, ), ), {, if, (, referenceCollection, ., isEscaped, (, ), ), {, visibility, =, VariableVisibility, ., CAPTURED_LOCAL]
[), {, visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {, visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else]
[., isEscaped, (, ), ), {, visibility, =, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {, visibility, =, VariableVisibility, ., LOCAL]
[=, VariableVisibility, ., CAPTURED_LOCAL, ;, }, else, {, visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (, variable]
[;, }, else, {, visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (, variable, ., isGlobal, (, )]
[., CAPTURED_LOCAL, ;, }, else, {, visibility, =, VariableVisibility, ., LOCAL, ;, }, }, else, if, (, variable, ., isGlobal]
[=, VariableVisibility, ., LOCAL, ;, }, }, else, if, (, variable, ., isGlobal, (, ), ), {, visibility, =, VariableVisibility]
[;, }, }, else, if, (, variable, ., isGlobal, (, ), ), {, visibility, =, VariableVisibility, ., GLOBAL, ;, }]
[., LOCAL, ;, }, }, else, if, (, variable, ., isGlobal, (, ), ), {, visibility, =, VariableVisibility, ., GLOBAL]
[), {, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;]
[., isGlobal, (, ), ), {, visibility, =, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for "]
[=, VariableVisibility, ., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }, visibilityByDeclaringNameNode, .]
[;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }, visibilityByDeclaringNameNode, ., put, (, variable, .]
[., GLOBAL, ;, }, else, {, throw, new, IllegalStateException, (, "Un-handled variable visibility for ", +, variable, ), ;, }, visibilityByDeclaringNameNode, ., put, (]
[;, }, visibilityByDeclaringNameNode, ., put, (, variable, ., getNameNode, (, ), ,, visibility, ), ;, }, }, private, static, boolean]
[), ;, }, visibilityByDeclaringNameNode, ., put, (, variable, ., getNameNode, (, ), ,, visibility, ), ;, }, }, private, static]
[+, variable, ), ;, }, visibilityByDeclaringNameNode, ., put, (, variable, ., getNameNode, (, ), ,, visibility, ), ;, }, }]
[), ;, }, visibilityByDeclaringNameNode, ., put, (, variable, ., getNameNode, (, ), ,, visibility, ), ;, }, }, private, static]
[;, }, }, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (, )]
[., put, (, variable, ., getNameNode, (, ), ,, visibility, ), ;, }, }, private, static, boolean, variableIsParameter, (, Var]
[,, visibility, ), ;, }, }, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, .]
[., getNameNode, (, ), ,, visibility, ), ;, }, }, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node]
[), ;, }, }, private, static, boolean, variableIsParameter, (, Var, variable, ), {, Node, variableParent, =, variable, ., getParentNode, (]
[;, return, variableParent, !=, null, &&, variableParent, ., isParamList, (, ), ;, }, }]
[., getParentNode, (, ), ;, return, variableParent, !=, null, &&, variableParent, ., isParamList, (, ), ;, }, }]
[;, }, }]
[&&, variableParent, ., isParamList, (, ), ;, }, }]
[!=, null, &&, variableParent, ., isParamList, (, ), ;, }, }]
[&&, variableParent, ., isParamList, (, ), ;, }, }]
[;, }, }]
[., isParamList, (, ), ;, }, }]
