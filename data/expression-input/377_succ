[;, static, final, char, [, ], NONFIRST_CHAR, =, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$", ., toCharArray, (, ), ;, private, final, Set, <, String, >]
[., toCharArray, (, ), ;, static, final, char, [, ], NONFIRST_CHAR, =, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$", ., toCharArray, (, ), ;, private, final]
[;, private, final, Set, <, String, >, reservedNames, ;, private, final, String, prefix, ;, private, int, nameCount, ;, private, final]
[., toCharArray, (, ), ;, private, final, Set, <, String, >, reservedNames, ;, private, final, String, prefix, ;, private, int]
[=, reservedNames, ;, this, ., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;]
[., reservedNames, =, reservedNames, ;, this, ., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters]
[;, this, ., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, .]
[=, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (]
[., prefix, =, prefix, ;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =]
[;, this, ., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,]
[=, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;, checkPrefix]
[., firstChars, =, reserveCharacters, (, FIRST_CHAR, ,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, )]
[;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;, checkPrefix, (, prefix, ), ;, }, static, char]
[,, reservedCharacters, ), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;, checkPrefix, (, prefix, ), ;]
[), ;, this, ., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;, checkPrefix, (, prefix, ), ;, }, static]
[=, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;, checkPrefix, (, prefix, ), ;, }, static, char, [, ], reserveCharacters, (]
[., nonFirstChars, =, reserveCharacters, (, NONFIRST_CHAR, ,, reservedCharacters, ), ;, checkPrefix, (, prefix, ), ;, }, static, char, [, ]]
[;, checkPrefix, (, prefix, ), ;, }, static, char, [, ], reserveCharacters, (, char, [, ], chars, ,, char, []
[,, reservedCharacters, ), ;, checkPrefix, (, prefix, ), ;, }, static, char, [, ], reserveCharacters, (, char, [, ], chars]
[), ;, checkPrefix, (, prefix, ), ;, }, static, char, [, ], reserveCharacters, (, char, [, ], chars, ,, char]
[;, }, static, char, [, ], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {, if]
[), ;, }, static, char, [, ], reserveCharacters, (, char, [, ], chars, ,, char, [, ], reservedCharacters, ), {]
[), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (, Chars, ., asList, (]
[||, reservedCharacters, ., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, .]
[==, null, ||, reservedCharacters, ., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =]
[||, reservedCharacters, ., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, .]
[), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (, Chars, ., asList, (]
[==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (, Chars, .]
[., length, ==, 0, ), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (]
[), {, return, chars, ;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (, Chars, ., asList, (]
[;, }, Set, <, Character, >, charSet, =, Sets, ., newLinkedHashSet, (, Chars, ., asList, (, chars, ), ), ;]
[;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (, reservedCharacter, ), ;, }, return, Chars, .]
[., newLinkedHashSet, (, Chars, ., asList, (, chars, ), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet]
[), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (, reservedCharacter, ), ;, }, return, Chars]
[., asList, (, chars, ), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (, reservedCharacter]
[), ), ;, for, (, char, reservedCharacter, :, reservedCharacters, ), {, charSet, ., remove, (, reservedCharacter, ), ;, }, return]
[), {, charSet, ., remove, (, reservedCharacter, ), ;, }, return, Chars, ., toArray, (, charSet, ), ;, }, private]
[;, }, return, Chars, ., toArray, (, charSet, ), ;, }, private, void, checkPrefix, (, String, prefix, ), {, if]
[., remove, (, reservedCharacter, ), ;, }, return, Chars, ., toArray, (, charSet, ), ;, }, private, void, checkPrefix, (]
[), ;, }, return, Chars, ., toArray, (, charSet, ), ;, }, private, void, checkPrefix, (, String, prefix, ), {]
[;, }, private, void, checkPrefix, (, String, prefix, ), {, if, (, prefix, ., length, (, ), >, 0, )]
[., toArray, (, charSet, ), ;, }, private, void, checkPrefix, (, String, prefix, ), {, if, (, prefix, ., length]
[), ;, }, private, void, checkPrefix, (, String, prefix, ), {, if, (, prefix, ., length, (, ), >, 0]
[), {, if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {, throw, new]
[>, 0, ), {, if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {]
[., length, (, ), >, 0, ), {, if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (, 0]
[), {, if, (, !, contains, (, firstChars, ,, prefix, ., charAt, (, 0, ), ), ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int]
[), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int]
[,, prefix, ., charAt, (, 0, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (]
[), ), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (]
[., charAt, (, 0, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, )]
[), ), ), {, throw, new, IllegalArgumentException, (, "prefix must start with one of: ", +, Arrays, ., toString, (, firstChars, ), ), ;, }, for]
[;, }, for, (, int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;, ++, pos, )]
[), ;, }, for, (, int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;, ++, pos]
[+, Arrays, ., toString, (, firstChars, ), ), ;, }, for, (, int, pos, =, 1, ;, pos, <, prefix]
[), ;, }, for, (, int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;, ++, pos]
[., toString, (, firstChars, ), ), ;, }, for, (, int, pos, =, 1, ;, pos, <, prefix, ., length]
[), ), ;, }, for, (, int, pos, =, 1, ;, pos, <, prefix, ., length, (, ), ;, ++]
[;, pos, <, prefix, ., length, (, ), ;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,]
[;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), )]
[<, prefix, ., length, (, ), ;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,, prefix, .]
[;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), )]
[., length, (, ), ;, ++, pos, ), {, if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (]
[), {, if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new]
[), {, if, (, !, contains, (, nonFirstChars, ,, prefix, ., charAt, (, pos, ), ), ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +, Arrays, ., toString, (, nonFirstChars, ), ), ;, }, }]
[), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +, Arrays, ., toString, (, nonFirstChars, ), ), ;, }, }]
[,, prefix, ., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +, Arrays, .]
[), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +, Arrays, ., toString, (, nonFirstChars, ), ), ;, }]
[., charAt, (, pos, ), ), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +, Arrays, ., toString, (]
[), ), ), {, throw, new, IllegalArgumentException, (, "prefix has invalid characters, ", +, "must be one of: ", +, Arrays, ., toString, (, nonFirstChars, ), ), ;]
[;, }, }, }, }, private, boolean, contains, (, char, [, ], arr, ,, char, c, ), {, for, (]
[), ;, }, }, }, }, private, boolean, contains, (, char, [, ], arr, ,, char, c, ), {, for]
[+, Arrays, ., toString, (, nonFirstChars, ), ), ;, }, }, }, }, private, boolean, contains, (, char, [, ]]
[+, "must be one of: ", +, Arrays, ., toString, (, nonFirstChars, ), ), ;, }, }, }, }, private, boolean, contains, (, char]
[+, Arrays, ., toString, (, nonFirstChars, ), ), ;, }, }, }, }, private, boolean, contains, (, char, [, ]]
[), ;, }, }, }, }, private, boolean, contains, (, char, [, ], arr, ,, char, c, ), {, for]
[., toString, (, nonFirstChars, ), ), ;, }, }, }, }, private, boolean, contains, (, char, [, ], arr, ,]
[), ), ;, }, }, }, }, private, boolean, contains, (, char, [, ], arr, ,, char, c, ), {]
[;, i, <, arr, ., length, ;, i, ++, ), {, if, (, arr, [, i, ], ==, c, )]
[;, i, ++, ), {, if, (, arr, [, i, ], ==, c, ), {, return, true, ;, }, }]
[<, arr, ., length, ;, i, ++, ), {, if, (, arr, [, i, ], ==, c, ), {, return]
[;, i, ++, ), {, if, (, arr, [, i, ], ==, c, ), {, return, true, ;, }, }]
[., length, ;, i, ++, ), {, if, (, arr, [, i, ], ==, c, ), {, return, true, ;]
[), {, if, (, arr, [, i, ], ==, c, ), {, return, true, ;, }, }, return, false, ;]
[++, ), {, if, (, arr, [, i, ], ==, c, ), {, return, true, ;, }, }, return, false]
[), {, return, true, ;, }, }, return, false, ;, }, String, generateNextName, (, ), {, while, (, true, )]
[==, c, ), {, return, true, ;, }, }, return, false, ;, }, String, generateNextName, (, ), {, while, (]
[[, i, ], ==, c, ), {, return, true, ;, }, }, return, false, ;, }, String, generateNextName, (, )]
[], ==, c, ), {, return, true, ;, }, }, return, false, ;, }, String, generateNextName, (, ), {, while]
[), {, return, true, ;, }, }, return, false, ;, }, String, generateNextName, (, ), {, while, (, true, )]
[;, }, }, return, false, ;, }, String, generateNextName, (, ), {, while, (, true, ), {, String, name, =]
[;, }, String, generateNextName, (, ), {, while, (, true, ), {, String, name, =, prefix, ;, int, i, =]
[), {, String, name, =, prefix, ;, int, i, =, nameCount, ;, if, (, name, ., isEmpty, (, ), )]
[;, int, i, =, nameCount, ;, if, (, name, ., isEmpty, (, ), ), {, int, pos, =, i, %]
[;, if, (, name, ., isEmpty, (, ), ), {, int, pos, =, i, %, firstChars, ., length, ;, name]
[), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=, firstChars, [, pos, ], ;, i, /=]
[., isEmpty, (, ), ), {, int, pos, =, i, %, firstChars, ., length, ;, name, +=, firstChars, [, pos]
[;, name, +=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0]
[%, firstChars, ., length, ;, name, +=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while]
[;, name, +=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0]
[., length, ;, name, +=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i]
[+=, firstChars, [, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {]
[;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos]
[[, pos, ], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --]
[], ;, i, /=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int]
[/=, firstChars, ., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos, =, i]
[;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length]
[., length, ;, }, while, (, i, >, 0, ), {, i, --, ;, int, pos, =, i, %, nonFirstChars]
[), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ]]
[>, 0, ), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, []
[), {, i, --, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ]]
[;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars]
[--, ;, int, pos, =, i, %, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=]
[;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (]
[%, nonFirstChars, ., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount]
[;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (]
[., length, ;, name, +=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;]
[+=, nonFirstChars, [, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, .]
[;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||]
[[, pos, ], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (]
[], ;, i, /=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, )]
[/=, nonFirstChars, ., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||, reservedNames, .]
[;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||, reservedNames, ., contains, (, name, )]
[., length, ;, }, nameCount, ++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||, reservedNames, ., contains, (]
[;, if, (, TokenStream, ., isKeyword, (, name, ), ||, reservedNames, ., contains, (, name, ), ), {, continue, ;]
[++, ;, if, (, TokenStream, ., isKeyword, (, name, ), ||, reservedNames, ., contains, (, name, ), ), {, continue]
[), {, continue, ;, }, return, name, ;, }, }, }]
[||, reservedNames, ., contains, (, name, ), ), {, continue, ;, }, return, name, ;, }, }, }]
[., isKeyword, (, name, ), ||, reservedNames, ., contains, (, name, ), ), {, continue, ;, }, return, name, ;]
[), ||, reservedNames, ., contains, (, name, ), ), {, continue, ;, }, return, name, ;, }, }, }]
[), {, continue, ;, }, return, name, ;, }, }, }]
[., contains, (, name, ), ), {, continue, ;, }, return, name, ;, }, }, }]
[), ), {, continue, ;, }, return, name, ;, }, }, }]
[;, }, }, }]
