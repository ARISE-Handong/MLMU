[;, public, RombergIntegrator, (, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, )]
[,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount]
[,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, final, int]
[>, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, final, int]
[;, }, }, public, RombergIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,, NumberIsTooLargeException]
[,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws]
[,, false, ), ;, }, }, public, RombergIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,]
[), ;, }, }, public, RombergIntegrator, (, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, ,]
[,, maximalIterationCount, ), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false]
[), ;, if, (, maximalIterationCount, >, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, ), {]
[>, ROMBERG_MAX_ITERATIONS_COUNT, ), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (]
[), {, throw, new, NumberIsTooLargeException, (, maximalIterationCount, ,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, ), {]
[;, }, }, public, RombergIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, ROMBERG_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double]
[,, ROMBERG_MAX_ITERATIONS_COUNT, ,, false, ), ;, }, }, public, RombergIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, ROMBERG_MAX_ITERATIONS_COUNT, ), ;]
[,, false, ), ;, }, }, public, RombergIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, ROMBERG_MAX_ITERATIONS_COUNT, ), ;, }, @]
[), ;, }, }, public, RombergIntegrator, (, ), {, super, (, DEFAULT_MIN_ITERATIONS_COUNT, ,, ROMBERG_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected]
[,, ROMBERG_MAX_ITERATIONS_COUNT, ), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, int, m]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, TooManyEvaluationsException, ,, MaxCountExceededException, {, final, int, m, =, iterations]
[;, double, previousRow, [, ], =, new, double, [, m, ], ;, double, currentRow, [, ], =, new, double, []
[+, 1, ;, double, previousRow, [, ], =, new, double, [, m, ], ;, double, currentRow, [, ], =, new]
[., getMaximalCount, (, ), +, 1, ;, double, previousRow, [, ], =, new, double, [, m, ], ;, double, currentRow]
[;, double, previousRow, [, ], =, new, double, [, m, ], ;, double, currentRow, [, ], =, new, double, []
[;, double, currentRow, [, ], =, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;]
[], ;, double, currentRow, [, ], =, new, double, [, m, ], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, )]
[;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,]
[], ;, TrapezoidIntegrator, qtrap, =, new, TrapezoidIntegrator, (, ), ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this]
[;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, )]
[=, qtrap, ., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =, currentRow]
[[, 0, ], =, qtrap, ., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double]
[], =, qtrap, ., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =]
[;, iterations, ., incrementCount, (, ), ;, double, olds, =, currentRow, [, 0, ], ;, while, (, true, ), {]
[., stage, (, this, ,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =, currentRow, [, 0]
[,, 0, ), ;, iterations, ., incrementCount, (, ), ;, double, olds, =, currentRow, [, 0, ], ;, while, (]
[), ;, iterations, ., incrementCount, (, ), ;, double, olds, =, currentRow, [, 0, ], ;, while, (, true, )]
[;, double, olds, =, currentRow, [, 0, ], ;, while, (, true, ), {, final, int, i, =, iterations, .]
[., incrementCount, (, ), ;, double, olds, =, currentRow, [, 0, ], ;, while, (, true, ), {, final, int]
[;, while, (, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, [, ]]
[[, 0, ], ;, while, (, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;, final]
[], ;, while, (, true, ), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, []
[), {, final, int, i, =, iterations, ., getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;]
[;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0]
[., getCount, (, ), ;, final, double, [, ], tmpRow, =, previousRow, ;, previousRow, =, currentRow, ;, currentRow, =, tmpRow]
[;, previousRow, =, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,]
[=, currentRow, ;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, i, )]
[;, currentRow, =, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, i, ), ;, iterations]
[=, tmpRow, ;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, i, ), ;, iterations, ., incrementCount]
[;, currentRow, [, 0, ], =, qtrap, ., stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, )]
[=, qtrap, ., stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j]
[[, 0, ], =, qtrap, ., stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for]
[], =, qtrap, ., stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int]
[;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;, j, <=, i, ;, j, ++]
[., stage, (, this, ,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1]
[,, i, ), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;, j, <=, i]
[), ;, iterations, ., incrementCount, (, ), ;, for, (, int, j, =, 1, ;, j, <=, i, ;, j]
[;, for, (, int, j, =, 1, ;, j, <=, i, ;, j, ++, ), {, final, double, r, =]
[., incrementCount, (, ), ;, for, (, int, j, =, 1, ;, j, <=, i, ;, j, ++, ), {]
[;, j, <=, i, ;, j, ++, ), {, final, double, r, =, (, 1L, <<, (, 2, *, j]
[;, j, ++, ), {, final, double, r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1]
[<=, i, ;, j, ++, ), {, final, double, r, =, (, 1L, <<, (, 2, *, j, ), )]
[;, j, ++, ), {, final, double, r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1]
[), {, final, double, r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1, ;, final, double]
[++, ), {, final, double, r, =, (, 1L, <<, (, 2, *, j, ), ), -, 1, ;, final]
[;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (]
[-, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1]
[), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =]
[<<, (, 2, *, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ]]
[), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =]
[), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ]]
[*, j, ), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, []
[), ), -, 1, ;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ]]
[;, final, double, tIJm1, =, currentRow, [, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (]
[;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r]
[[, j, -, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -]
[], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /]
[-, 1, ], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ]]
[], ;, currentRow, [, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /]
[=, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r, ;, }, final, double, s]
[[, j, ], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r, ;, }]
[], =, tIJm1, +, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r, ;, }, final, double]
[;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {]
[+, (, tIJm1, -, previousRow, [, j, -, 1, ], ), /, r, ;, }, final, double, s, =, currentRow]
[;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {]
[/, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (, )]
[), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (]
[-, previousRow, [, j, -, 1, ], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ]]
[), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (]
[[, j, -, 1, ], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if]
[], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount]
[-, 1, ], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i]
[], ), /, r, ;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount]
[;, }, final, double, s, =, currentRow, [, i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {]
[;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, s, -]
[[, i, ], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs]
[], ;, if, (, i, >=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, s]
[), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[>=, getMinimalIterationCount, (, ), ), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final]
[), {, final, double, delta, =, FastMath, ., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy]
[;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs]
[., abs, (, s, -, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, .]
[-, olds, ), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +]
[), ;, final, double, rLimit, =, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, olds, ), +, FastMath, .]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[*, (, FastMath, ., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if]
[*, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[+, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (]
[., abs, (, olds, ), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta]
[), +, FastMath, ., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||]
[), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), )]
[., abs, (, s, ), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=]
[), ), *, 0.5, ;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), )]
[;, if, (, (, delta, <=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s]
[), {, return, s, ;, }, }, olds, =, s, ;, }, }, }]
[||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;, }]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;]
[<=, rLimit, ), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =]
[), ||, (, delta, <=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;]
[), {, return, s, ;, }, }, olds, =, s, ;, }, }, }]
[), ), {, return, s, ;, }, }, olds, =, s, ;, }, }, }]
[<=, getAbsoluteAccuracy, (, ), ), ), {, return, s, ;, }, }, olds, =, s, ;, }, }, }]
[), ), {, return, s, ;, }, }, olds, =, s, ;, }, }, }]
[;, }, }, olds, =, s, ;, }, }, }]
[=, s, ;, }, }, }]
[;, }, }, }]
