[util, ., Set, ;, class, TypedCodeGenerator, extends, CodeGenerator, {, TypedCodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {, super, (]
[Set, ;, class, TypedCodeGenerator, extends, CodeGenerator, {, TypedCodeGenerator, (, CodeConsumer, consumer, ,, CompilerOptions, options, ), {, super, (, consumer, ,]
[,, options, ), ;, }, @, Override, void, add, (, Node, n, ,, Context, context, ), {, Node, parent, =]
[,, options, ), ;, }, @, Override, void, add, (, Node, n, ,, Context, context, ), {, Node, parent, =]
[add, (, Node, n, ,, Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[add, (, Node, n, ,, Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[add, (, Node, n, ,, Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (]
[Node, n, ,, Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=]
[,, Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, &&]
[Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, &&, (]
[Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, &&, (]
[Context, context, ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, parent, !=, null, &&, (]
[=, n, ., getParent, (, ), ;, if, (, parent, !=, null, &&, (, parent, ., isBlock, (, ), ||]
[=, n, ., getParent, (, ), ;, if, (, parent, !=, null, &&, (, parent, ., isBlock, (, ), ||]
[!=, null, &&, (, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), ), ), {, if, (]
[!=, null, &&, (, parent, ., isBlock, (, ), ||, parent, ., isScript, (, ), ), ), {, if, (]
[(, ), ||, parent, ., isScript, (, ), ), ), {, if, (, n, ., isFunction, (, ), ), {]
[||, parent, ., isScript, (, ), ), ), {, if, (, n, ., isFunction, (, ), ), {, add, (]
[., isScript, (, ), ), ), {, if, (, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (]
[(, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (]
[(, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (]
[(, n, ., isFunction, (, ), ), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (]
[), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (, n, ., isExprResult, (, ), &&]
[), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (, n, ., isExprResult, (, ), &&]
[), {, add, (, getFunctionAnnotation, (, n, ), ), ;, }, else, if, (, n, ., isExprResult, (, ), &&]
[n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (, ), ), {, Node, rhs, =]
[n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (, ), ), {, Node, rhs, =]
[n, ., isExprResult, (, ), &&, n, ., getFirstChild, (, ), ., isAssign, (, ), ), {, Node, rhs, =]
[), ., isAssign, (, ), ), {, Node, rhs, =, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;]
[isAssign, (, ), ), {, Node, rhs, =, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, add, (]
[), ), {, Node, rhs, =, n, ., getFirstChild, (, ), ., getLastChild, (, ), ;, add, (, getTypeAnnotation, (]
[getFirstChild, (, ), ., getLastChild, (, ), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (]
[getFirstChild, (, ), ., getLastChild, (, ), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (]
[getFirstChild, (, ), ., getLastChild, (, ), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (]
[), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (, n, ., isVar, (, ), &&]
[), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (, n, ., isVar, (, ), &&]
[), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (, n, ., isVar, (, ), &&]
[), ;, add, (, getTypeAnnotation, (, rhs, ), ), ;, }, else, if, (, n, ., isVar, (, ), &&]
[}, else, if, (, n, ., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=]
[(, n, ., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {]
[., isVar, (, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, add, (]
[(, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, add, (, getTypeAnnotation, (]
[(, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, add, (, getTypeAnnotation, (]
[(, ), &&, n, ., getFirstChild, (, ), ., getFirstChild, (, ), !=, null, ), {, add, (, getTypeAnnotation, (]
[), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }]
[), {, add, (, getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }]
[getTypeAnnotation, (, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }, super, ., add, (]
[n, ., getFirstChild, (, ), ., getFirstChild, (, ), ), ), ;, }, }, super, ., add, (, n, ,]
[., add, (, n, ,, context, ), ;, }, private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =]
[., add, (, n, ,, context, ), ;, }, private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =]
[,, context, ), ;, }, private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (]
[private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;, if, (]
[private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;, if, (]
[private, String, getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;, if, (]
[getTypeAnnotation, (, Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;, if, (, jsdoc, ==]
[Node, node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;, if, (, jsdoc, ==, null, &&]
[node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;, if, (, jsdoc, ==, null, &&, !]
[node, ), {, JSDocInfo, jsdoc, =, NodeUtil, ., getBestJSDocInfo, (, node, ), ;, if, (, jsdoc, ==, null, &&, !]
[getBestJSDocInfo, (, node, ), ;, if, (, jsdoc, ==, null, &&, !, node, ., isFunction, (, ), ), {, return]
[(, jsdoc, ==, null, &&, !, node, ., isFunction, (, ), ), {, return, "", ;, }, JSType, type, =]
[(, jsdoc, ==, null, &&, !, node, ., isFunction, (, ), ), {, return, "", ;, }, JSType, type, =]
[isFunction, (, ), ), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (]
[isFunction, (, ), ), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (]
[), ), {, return, "", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (, type, ==]
["", ;, }, JSType, type, =, node, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, return]
[node, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, return, "", ;, }, else, if, (]
[node, ., getJSType, (, ), ;, if, (, type, ==, null, ), {, return, "", ;, }, else, if, (]
[type, ==, null, ), {, return, "", ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return]
[null, ), {, return, "", ;, }, else, if, (, type, ., isFunctionType, (, ), ), {, return, getFunctionAnnotation, (]
[else, if, (, type, ., isFunctionType, (, ), ), {, return, getFunctionAnnotation, (, node, ), ;, }, else, if, (]
[else, if, (, type, ., isFunctionType, (, ), ), {, return, getFunctionAnnotation, (, node, ), ;, }, else, if, (]
[), {, return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return]
[), {, return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return]
[), {, return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return]
[return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return, "/** @enum {", +]
[return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return, "/** @enum {", +]
[return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return, "/** @enum {", +]
[return, getFunctionAnnotation, (, node, ), ;, }, else, if, (, type, ., isEnumType, (, ), ), {, return, "/** @enum {", +]
[), ), {, return, "/** @enum {", +, type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (]
[type, ., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (]
[., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !]
[., toMaybeEnumType, (, ), ., getElementsType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !]
[(, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (, ), &&]
[), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !]
[), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !]
["} */\n", ;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&]
[;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !]
[;, }, else, if, (, !, type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !]
[type, ., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&]
[., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !]
[., isUnknownType, (, ), &&, !, type, ., isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !]
[isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return]
[isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return]
[isEmptyType, (, ), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return]
[), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +]
[), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +]
[), &&, !, type, ., isVoidType, (, ), &&, !, type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +]
[type, ., isFunctionPrototypeType, (, ), ), {, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, ), +]
[{, return, "/** @type {", +, node, ., getJSType, (, ), ., toAnnotationString, (, ), +, "} */\n", ;, }, else, {, return]
[), +, "} */\n", ;, }, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {]
[), +, "} */\n", ;, }, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {]
[}, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions, ., checkState, (]
[}, else, {, return, "", ;, }, }, private, String, getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions, ., checkState, (]
[getFunctionAnnotation, (, Node, fnNode, ), {, Preconditions, ., checkState, (, fnNode, ., isFunction, (, ), ), ;, StringBuilder, sb, =]
[fnNode, ), {, Preconditions, ., checkState, (, fnNode, ., isFunction, (, ), ), ;, StringBuilder, sb, =, new, StringBuilder, (]
[(, fnNode, ., isFunction, (, ), ), ;, StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =]
[(, fnNode, ., isFunction, (, ), ), ;, StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =]
[StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (]
[StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (]
[StringBuilder, sb, =, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (]
[=, new, StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (, type, ==]
[StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (, type, ==, null, ||]
[StringBuilder, (, "/**\n", ), ;, JSType, type, =, fnNode, ., getJSType, (, ), ;, if, (, type, ==, null, ||]
[fnNode, ., getJSType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, return]
[if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =]
[if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =]
[isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[isUnknownType, (, ), ), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (]
[), ), {, return, "", ;, }, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=]
[}, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null, ), {, Node, paramNode, =]
[}, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null, ), {, Node, paramNode, =]
[}, FunctionType, funType, =, type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null, ), {, Node, paramNode, =]
[type, ., toMaybeFunctionType, (, ), ;, if, (, fnNode, !=, null, ), {, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (]
[{, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, for, (, Node, n, :]
[{, Node, paramNode, =, NodeUtil, ., getFunctionParameters, (, fnNode, ), ., getFirstChild, (, ), ;, for, (, Node, n, :]
[), ., getFirstChild, (, ), ;, for, (, Node, n, :, funType, ., getParameters, (, ), ), {, if, (]
[), ., getFirstChild, (, ), ;, for, (, Node, n, :, funType, ., getParameters, (, ), ), {, if, (]
[getFirstChild, (, ), ;, for, (, Node, n, :, funType, ., getParameters, (, ), ), {, if, (, paramNode, ==]
[Node, n, :, funType, ., getParameters, (, ), ), {, if, (, paramNode, ==, null, ), {, break, ;, }]
[Node, n, :, funType, ., getParameters, (, ), ), {, if, (, paramNode, ==, null, ), {, break, ;, }]
[., getParameters, (, ), ), {, if, (, paramNode, ==, null, ), {, break, ;, }, sb, ., append, (]
[), ), {, if, (, paramNode, ==, null, ), {, break, ;, }, sb, ., append, (, " * ", ), ;]
[{, if, (, paramNode, ==, null, ), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation, (]
[(, paramNode, ==, null, ), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[==, null, ), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,]
[), {, break, ;, }, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (]
[}, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;]
[}, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;]
[}, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;]
[}, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;]
[(, " * ", ), ;, appendAnnotation, (, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;, sb, ., append, (]
[(, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;, sb, ., append, (, " ", ), ., append, (]
[(, sb, ,, "param", ,, getParameterNodeJSDocType, (, n, ), ), ;, sb, ., append, (, " ", ), ., append, (]
[), ;, sb, ., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (]
[., append, (, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n", ), ;]
[(, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n", ), ;, paramNode, =]
[(, " ", ), ., append, (, paramNode, ., getString, (, ), ), ., append, (, "\n", ), ;, paramNode, =]
[), ., append, (, "\n", ), ;, paramNode, =, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =]
[), ., append, (, "\n", ), ;, paramNode, =, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =]
[=, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (]
[=, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (]
[=, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (]
[=, paramNode, ., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (]
[., getNext, (, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (, retType, !=]
[(, ), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (, retType, !=, null, &&]
[), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (, retType, !=, null, &&, !]
[), ;, }, }, JSType, retType, =, funType, ., getReturnType, (, ), ;, if, (, retType, !=, null, &&, !]
[=, funType, ., getReturnType, (, ), ;, if, (, retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&]
[funType, ., getReturnType, (, ), ;, if, (, retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&, !]
[funType, ., getReturnType, (, ), ;, if, (, retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&, !]
[(, retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {]
[(, retType, !=, null, &&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {]
[&&, !, retType, ., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (]
[., isUnknownType, (, ), &&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;]
[(, ), &&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (]
[&&, !, retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,]
[retType, ., isEmptyType, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,]
[sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, ), ), ;]
[sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, ), ), ;]
[" * ", ), ;, appendAnnotation, (, sb, ,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (]
[,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (]
[,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (]
[,, "return", ,, retType, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (]
[(, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ||]
[(, ), ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ||]
[;, }, if, (, funType, ., isConstructor, (, ), ||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =]
[;, }, if, (, funType, ., isConstructor, (, ), ||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =]
[), ||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (]
[), ||, funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (]
[funType, ., isInterface, (, ), ), {, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=]
[{, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=, null, ), {, ObjectType, superInstance, =]
[{, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=, null, ), {, ObjectType, superInstance, =]
[{, FunctionType, superConstructor, =, funType, ., getSuperClassConstructor, (, ), ;, if, (, superConstructor, !=, null, ), {, ObjectType, superInstance, =]
[superConstructor, !=, null, ), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (]
[!=, null, ), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !]
[!=, null, ), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !]
[!=, null, ), {, ObjectType, superInstance, =, funType, ., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !]
[., getSuperClassConstructor, (, ), ., getInstanceType, (, ), ;, if, (, !, superInstance, ., toString, (, ), ., equals, (]
[., getInstanceType, (, ), ;, if, (, !, superInstance, ., toString, (, ), ., equals, (, "Object", ), ), {]
[., getInstanceType, (, ), ;, if, (, !, superInstance, ., toString, (, ), ., equals, (, "Object", ), ), {]
[;, if, (, !, superInstance, ., toString, (, ), ., equals, (, "Object", ), ), {, sb, ., append, (]
[!, superInstance, ., toString, (, ), ., equals, (, "Object", ), ), {, sb, ., append, (, " * ", ), ;]
[., toString, (, ), ., equals, (, "Object", ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (]
[(, ), ., equals, (, "Object", ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[., equals, (, "Object", ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,]
[., equals, (, "Object", ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,]
[sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, ), ), ;]
[sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, ), ), ;]
[" * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, superInstance, ., toAnnotationString, (, ), ), ;, sb, ., append, (]
["extends", ,, superInstance, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, if, (]
["extends", ,, superInstance, ., toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, if, (]
[(, "\n", ), ;, }, }, if, (, funType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :]
[(, "\n", ), ;, }, }, if, (, funType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :]
[(, funType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {]
[(, funType, ., isInterface, (, ), ), {, for, (, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {]
[(, ), ), {, for, (, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {, sb, ., append, (]
[{, for, (, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {, sb, ., append, (, " * ", ), ;]
[(, ObjectType, interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (]
[interfaceType, :, funType, ., getExtendedInterfaces, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[funType, ., getExtendedInterfaces, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,]
[funType, ., getExtendedInterfaces, (, ), ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,]
[sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, ), ), ;]
[sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, ), ), ;]
[" * ", ), ;, appendAnnotation, (, sb, ,, "extends", ,, interfaceType, ., toAnnotationString, (, ), ), ;, sb, ., append, (]
[toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, Set, <, String, >, interfaces, =]
[toAnnotationString, (, ), ), ;, sb, ., append, (, "\n", ), ;, }, }, Set, <, String, >, interfaces, =]
[;, }, }, Set, <, String, >, interfaces, =, Sets, ., newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :]
[;, }, }, Set, <, String, >, interfaces, =, Sets, ., newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :]
[interfaces, =, Sets, ., newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :, funType, ., getImplementedInterfaces, (, ), ), {]
[interfaces, =, Sets, ., newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :, funType, ., getImplementedInterfaces, (, ), ), {]
[newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :, funType, ., getImplementedInterfaces, (, ), ), {, interfaces, ., add, (]
[newTreeSet, (, ), ;, for, (, ObjectType, interfaze, :, funType, ., getImplementedInterfaces, (, ), ), {, interfaces, ., add, (]
[), ), {, interfaces, ., add, (, interfaze, ., toAnnotationString, (, ), ), ;, }, for, (, String, interfaze, :]
[interfaces, ., add, (, interfaze, ., toAnnotationString, (, ), ), ;, }, for, (, String, interfaze, :, interfaces, ), {]
[interfaces, ., add, (, interfaze, ., toAnnotationString, (, ), ), ;, }, for, (, String, interfaze, :, interfaces, ), {]
[interfaze, ., toAnnotationString, (, ), ), ;, }, for, (, String, interfaze, :, interfaces, ), {, sb, ., append, (]
[(, ), ), ;, }, for, (, String, interfaze, :, interfaces, ), {, sb, ., append, (, " * ", ), ;]
[), ;, }, for, (, String, interfaze, :, interfaces, ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (]
[}, for, (, String, interfaze, :, interfaces, ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,]
[(, String, interfaze, :, interfaces, ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "implements", ,]
[:, interfaces, ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;]
[:, interfaces, ), {, sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;]
[sb, ., append, (, " * ", ), ;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;, sb, ., append, (]
[;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if, (]
[;, appendAnnotation, (, sb, ,, "implements", ,, interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if, (]
[interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ), {]
[interfaze, ), ;, sb, ., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ), {]
[., append, (, "\n", ), ;, }, if, (, funType, ., isConstructor, (, ), ), {, sb, ., append, (]
[if, (, funType, ., isConstructor, (, ), ), {, sb, ., append, (, " * @constructor\n", ), ;, }, else, if, (]
[if, (, funType, ., isConstructor, (, ), ), {, sb, ., append, (, " * @constructor\n", ), ;, }, else, if, (]
[), {, sb, ., append, (, " * @constructor\n", ), ;, }, else, if, (, funType, ., isInterface, (, ), ), {]
[), {, sb, ., append, (, " * @constructor\n", ), ;, }, else, if, (, funType, ., isInterface, (, ), ), {]
[append, (, " * @constructor\n", ), ;, }, else, if, (, funType, ., isInterface, (, ), ), {, sb, ., append, (]
[if, (, funType, ., isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (]
[if, (, funType, ., isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (]
[if, (, funType, ., isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (]
[funType, ., isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=]
[isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=, null, &&]
[isInterface, (, ), ), {, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=, null, &&]
[{, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (]
[{, sb, ., append, (, " * @interface\n", ), ;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (]
[), ;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {]
[), ;, }, }, if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {]
[if, (, fnNode, !=, null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (]
[null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }]
[null, &&, fnNode, ., getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }]
[getBooleanProp, (, Node, ., IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (]
[IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (, " */\n", ), ;, return]
[IS_DISPATCHER, ), ), {, sb, ., append, (, " * @javadispatch\n", ), ;, }, sb, ., append, (, " */\n", ), ;, return]
[., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {]
[., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {]
[., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {]
[., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {]
[., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {]
[., toString, (, ), ;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {]
[;, }, private, void, appendAnnotation, (, StringBuilder, sb, ,, String, name, ,, String, type, ), {, sb, ., append, (]
[(, StringBuilder, sb, ,, String, name, ,, String, type, ), {, sb, ., append, (, "@", ), ., append, (]
[name, ,, String, type, ), {, sb, ., append, (, "@", ), ., append, (, name, ), ., append, (]
[{, sb, ., append, (, "@", ), ., append, (, name, ), ., append, (, " {", ), ., append, (]
["@", ), ., append, (, name, ), ., append, (, " {", ), ., append, (, type, ), ., append, (]
[type, ), ., append, (, "}", ), ;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =]
[type, ), ., append, (, "}", ), ;, }, private, String, getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =]
[getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =, parameterNode, ., getJSType, (, ), ;, String, typeString, ;, if, (]
[getParameterNodeJSDocType, (, Node, parameterNode, ), {, JSType, parameterType, =, parameterNode, ., getJSType, (, ), ;, String, typeString, ;, if, (]
[parameterType, =, parameterNode, ., getJSType, (, ), ;, String, typeString, ;, if, (, parameterType, ., isUnknownType, (, ), ), {]
[parameterNode, ., getJSType, (, ), ;, String, typeString, ;, if, (, parameterType, ., isUnknownType, (, ), ), {, typeString, =]
[typeString, ;, if, (, parameterType, ., isUnknownType, (, ), ), {, typeString, =, "*", ;, }, else, {, if, (]
[typeString, ;, if, (, parameterType, ., isUnknownType, (, ), ), {, typeString, =, "*", ;, }, else, {, if, (]
[(, ), ), {, typeString, =, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {]
[), {, typeString, =, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =]
[), {, typeString, =, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =]
[), {, typeString, =, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =]
[), {, typeString, =, "*", ;, }, else, {, if, (, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =]
[(, parameterNode, ., isOptionalArg, (, ), ), {, typeString, =, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +]
[), {, typeString, =, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +, "=", ;, }, else, if, (]
[), {, typeString, =, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), +, "=", ;, }, else, if, (]
[(, ), ., toAnnotationString, (, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {]
[., toAnnotationString, (, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =]
[., toAnnotationString, (, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =]
[(, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =, "...", +]
[(, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =, "...", +]
[(, ), +, "=", ;, }, else, if, (, parameterNode, ., isVarArgs, (, ), ), {, typeString, =, "...", +]
[), ), {, typeString, =, "...", +, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;, }, else, {]
[{, typeString, =, "...", +, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;, }, else, {, typeString, =]
[{, typeString, =, "...", +, parameterType, ., restrictByNotNullOrUndefined, (, ), ., toAnnotationString, (, ), ;, }, else, {, typeString, =]
[), ., toAnnotationString, (, ), ;, }, else, {, typeString, =, parameterType, ., toAnnotationString, (, ), ;, }, }, return]
