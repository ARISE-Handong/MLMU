[math3, ., util, ., MathUtils, ;, public, class, HaltonSequenceGenerator, implements, RandomVectorGenerator, {, private, static, final, int, [, ], PRIMES, =]
[MathUtils, ;, public, class, HaltonSequenceGenerator, implements, RandomVectorGenerator, {, private, static, final, int, [, ], PRIMES, =, new, int, [, ]]
[;, public, class, HaltonSequenceGenerator, implements, RandomVectorGenerator, {, private, static, final, int, [, ], PRIMES, =, new, int, [, ], {]
[class, HaltonSequenceGenerator, implements, RandomVectorGenerator, {, private, static, final, int, [, ], PRIMES, =, new, int, [, ], {, 2, ,]
[implements, RandomVectorGenerator, {, private, static, final, int, [, ], PRIMES, =, new, int, [, ], {, 2, ,, 3, ,]
[{, private, static, final, int, [, ], PRIMES, =, new, int, [, ], {, 2, ,, 3, ,, 5, ,]
[static, final, int, [, ], PRIMES, =, new, int, [, ], {, 2, ,, 3, ,, 5, ,, 7, ,]
[int, [, ], PRIMES, =, new, int, [, ], {, 2, ,, 3, ,, 5, ,, 7, ,, 11, ,]
[], PRIMES, =, new, int, [, ], {, 2, ,, 3, ,, 5, ,, 7, ,, 11, ,, 13, ,]
[=, new, int, [, ], {, 2, ,, 3, ,, 5, ,, 7, ,, 11, ,, 13, ,, 17, ,]
[int, [, ], {, 2, ,, 3, ,, 5, ,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,]
[], {, 2, ,, 3, ,, 5, ,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,]
[2, ,, 3, ,, 5, ,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,]
[3, ,, 5, ,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,]
[5, ,, 7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,]
[7, ,, 11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,]
[11, ,, 13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,]
[13, ,, 17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,]
[17, ,, 19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,]
[19, ,, 23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,]
[23, ,, 29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,]
[29, ,, 31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,]
[31, ,, 37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,]
[37, ,, 41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,]
[41, ,, 43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,]
[43, ,, 47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,]
[47, ,, 53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,]
[53, ,, 59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,]
[59, ,, 61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,]
[61, ,, 67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,]
[67, ,, 71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,]
[71, ,, 73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,]
[73, ,, 79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,]
[79, ,, 83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,]
[83, ,, 89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,]
[89, ,, 97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,]
[97, ,, 101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,]
[101, ,, 103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,]
[103, ,, 107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,]
[107, ,, 109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,]
[109, ,, 113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,, 163, ,]
[113, ,, 127, ,, 131, ,, 137, ,, 139, ,, 149, ,, 151, ,, 157, ,, 163, ,, 167, ,]
[,, 151, ,, 157, ,, 163, ,, 167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =]
[,, 163, ,, 167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ]]
[163, ,, 167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {]
[167, ,, 173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,]
[173, }, ;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,]
[;, private, static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,, 3, ,]
[static, final, int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,, 3, ,, 3, ,]
[int, [, ], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,, 3, ,, 3, ,, 8, ,]
[], WEIGHTS, =, new, int, [, ], {, 1, ,, 2, ,, 3, ,, 3, ,, 8, ,, 11, ,]
[=, new, int, [, ], {, 1, ,, 2, ,, 3, ,, 3, ,, 8, ,, 11, ,, 12, ,]
[int, [, ], {, 1, ,, 2, ,, 3, ,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,]
[], {, 1, ,, 2, ,, 3, ,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,]
[1, ,, 2, ,, 3, ,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,]
[2, ,, 3, ,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,]
[3, ,, 3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,]
[3, ,, 8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,]
[8, ,, 11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,]
[11, ,, 12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,]
[12, ,, 14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,]
[14, ,, 7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,]
[7, ,, 18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,]
[18, ,, 12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,]
[12, ,, 13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,]
[13, ,, 17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,]
[17, ,, 18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,]
[18, ,, 29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,]
[29, ,, 14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,]
[14, ,, 18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,]
[18, ,, 43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,]
[43, ,, 41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,]
[41, ,, 44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,]
[44, ,, 40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,]
[40, ,, 30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,]
[30, ,, 47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,]
[47, ,, 65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,]
[65, ,, 71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,]
[71, ,, 28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,]
[28, ,, 40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,]
[40, ,, 60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,]
[60, ,, 79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,]
[79, ,, 89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,, 63, ,]
[89, ,, 56, ,, 50, ,, 52, ,, 61, ,, 108, ,, 56, ,, 66, ,, 63, ,, 60, ,]
[56, ,, 66, ,, 63, ,, 60, ,, 66, }, ;, private, final, int, dimension, ;, private, int, count, =]
[;, private, final, int, [, ], weight, ;, public, HaltonSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, this, (]
[final, int, [, ], weight, ;, public, HaltonSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, this, (, dimension, ,]
[[, ], weight, ;, public, HaltonSequenceGenerator, (, final, int, dimension, ), throws, OutOfRangeException, {, this, (, dimension, ,, PRIMES, ,]
[,, final, int, [, ], bases, ,, final, int, [, ], weights, ), throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {]
[,, final, int, [, ], bases, ,, final, int, [, ], weights, ), throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {]
[], bases, ,, final, int, [, ], weights, ), throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (]
[[, ], weights, ), throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (]
[[, ], weights, ), throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (]
[[, ], weights, ), throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (]
[weights, ), throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (, dimension, <]
[throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (, dimension, <, 1, ||]
[throws, NullArgumentException, ,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (, dimension, <, 1, ||]
[,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (, dimension, <, 1, ||, dimension, >]
[,, OutOfRangeException, ,, DimensionMismatchException, {, MathUtils, ., checkNotNull, (, bases, ), ;, if, (, dimension, <, 1, ||, dimension, >]
[., checkNotNull, (, bases, ), ;, if, (, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw]
[bases, ), ;, if, (, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (]
[;, if, (, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,]
[(, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,]
[(, dimension, <, 1, ||, dimension, >, bases, ., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,]
[., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=]
[throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=, null, &&]
[throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=, null, &&]
[throw, new, OutOfRangeException, (, dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=, null, &&]
[dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=, null, &&, weights, ., length, !=]
[dimension, ,, 1, ,, PRIMES, ., length, ), ;, }, if, (, weights, !=, null, &&, weights, ., length, !=]
[length, ), ;, }, if, (, weights, !=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw]
[}, if, (, weights, !=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (]
[}, if, (, weights, !=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (]
[!=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,]
[!=, null, &&, weights, ., length, !=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,]
[!=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }]
[!=, bases, ., length, ), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }]
[), {, throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =]
[throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =, dimension, ;]
[throw, new, DimensionMismatchException, (, weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =, dimension, ;]
[weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =]
[weights, ., length, ,, bases, ., length, ), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =]
[length, ), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;]
[length, ), ;, }, this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;]
[this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =]
[this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =]
[this, ., dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =]
[dimension, =, dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==]
[dimension, ;, this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==, null, ?]
[this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==, null, ?, null, :]
[this, ., base, =, bases, ., clone, (, ), ;, this, ., weight, =, weights, ==, null, ?, null, :]
[clone, (, ), ;, this, ., weight, =, weights, ==, null, ?, null, :, weights, ., clone, (, ), ;]
[), ;, this, ., weight, =, weights, ==, null, ?, null, :, weights, ., clone, (, ), ;, count, =]
[;, count, =, 0, ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =]
[0, ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double, []
[(, ), {, final, double, [, ], v, =, new, double, [, dimension, ], ;, for, (, int, i, =]
[{, final, double, [, ], v, =, new, double, [, dimension, ], ;, for, (, int, i, =, 0, ;]
[{, final, double, [, ], v, =, new, double, [, dimension, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], v, =, new, double, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <]
[], v, =, new, double, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[], v, =, new, double, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, int, index, =]
[i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, int, index, =, count, ;, double, f, =]
[i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, int, index, =, count, ;, double, f, =]
[0, ;, i, <, dimension, ;, i, ++, ), {, int, index, =, count, ;, double, f, =, 1.0, /]
[0, ;, i, <, dimension, ;, i, ++, ), {, int, index, =, count, ;, double, f, =, 1.0, /]
[i, <, dimension, ;, i, ++, ), {, int, index, =, count, ;, double, f, =, 1.0, /, base, []
[), {, int, index, =, count, ;, double, f, =, 1.0, /, base, [, i, ], ;, int, j, =]
[=, count, ;, double, f, =, 1.0, /, base, [, i, ], ;, int, j, =, 0, ;, while, (]
[=, count, ;, double, f, =, 1.0, /, base, [, i, ], ;, int, j, =, 0, ;, while, (]
[;, double, f, =, 1.0, /, base, [, i, ], ;, int, j, =, 0, ;, while, (, index, >]
[[, i, ], ;, int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =]
[], ;, int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (]
[int, j, =, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (, i, ,]
[=, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,]
[=, 0, ;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,]
[;, while, (, index, >, 0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, []
[index, >, 0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,]
[index, >, 0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,]
[0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,, index, %]
[0, ), {, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,, index, %]
[{, final, int, digit, =, scramble, (, i, ,, j, ,, base, [, i, ], ,, index, %, base, []
[=, scramble, (, i, ,, j, ,, base, [, i, ], ,, index, %, base, [, i, ], ), ;]
[=, scramble, (, i, ,, j, ,, base, [, i, ], ,, index, %, base, [, i, ], ), ;]
[(, i, ,, j, ,, base, [, i, ], ,, index, %, base, [, i, ], ), ;, v, []
[j, ,, base, [, i, ], ,, index, %, base, [, i, ], ), ;, v, [, i, ], +=]
[j, ,, base, [, i, ], ,, index, %, base, [, i, ], ), ;, v, [, i, ], +=]
[base, [, i, ], ,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f, *]
[i, ], ,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;]
[,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=]
[,, index, %, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=]
[%, base, [, i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, []
[i, ], ), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;]
[), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=]
[), ;, v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=]
[v, [, i, ], +=, f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=, base, []
[f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }, }]
[f, *, digit, ;, index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }, }]
[index, /=, base, [, i, ], ;, f, /=, base, [, i, ], ;, }, }, count, ++, ;, return]
[scramble, (, final, int, i, ,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return]
[scramble, (, final, int, i, ,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return]
[scramble, (, final, int, i, ,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return]
[final, int, i, ,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return, weight, !=]
[i, ,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return, weight, !=, null, ?]
[i, ,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return, weight, !=, null, ?]
[,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return, weight, !=, null, ?, (]
[,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return, weight, !=, null, ?, (]
[,, final, int, j, ,, final, int, b, ,, final, int, digit, ), {, return, weight, !=, null, ?, (]
[int, j, ,, final, int, b, ,, final, int, digit, ), {, return, weight, !=, null, ?, (, weight, []
[final, int, b, ,, final, int, digit, ), {, return, weight, !=, null, ?, (, weight, [, i, ], *]
[,, final, int, digit, ), {, return, weight, !=, null, ?, (, weight, [, i, ], *, digit, ), %]
[int, digit, ), {, return, weight, !=, null, ?, (, weight, [, i, ], *, digit, ), %, b, :]
[), %, b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {]
[b, :, digit, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, count, =]
[;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, count, =, index, ;, return]
[throws, NotPositiveException, {, count, =, index, ;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, ), {, return]
