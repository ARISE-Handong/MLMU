[;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, final, int, p, =, FastMath, ., min, (, m]
[., getRowDimension, (, ), ;, final, int, n, =, matrix, ., getColumnDimension, (, ), ;, final, int, p, =, FastMath]
[;, final, int, p, =, FastMath, ., min, (, m, ,, n, ), ;, householderVectors, =, matrix, ., getData, (]
[., getColumnDimension, (, ), ;, final, int, p, =, FastMath, ., min, (, m, ,, n, ), ;, householderVectors, =]
[;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =, new]
[., min, (, m, ,, n, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double]
[,, n, ), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;]
[), ;, householderVectors, =, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =]
[=, matrix, ., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =, new, double, []
[;, main, =, new, double, [, p, ], ;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU]
[., getData, (, ), ;, main, =, new, double, [, p, ], ;, secondary, =, new, double, [, p, -]
[=, new, double, [, p, ], ;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =, null]
[;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV]
[], ;, secondary, =, new, double, [, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;]
[=, new, double, [, p, -, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null]
[;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=, n, ), {]
[], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=, n, )]
[-, 1, ], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=]
[], ;, cachedU, =, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=, n, )]
[=, null, ;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=, n, ), {, transformToUpperBiDiagonal, (]
[;, cachedB, =, null, ;, cachedV, =, null, ;, if, (, m, >=, n, ), {, transformToUpperBiDiagonal, (, ), ;]
[=, null, ;, cachedV, =, null, ;, if, (, m, >=, n, ), {, transformToUpperBiDiagonal, (, ), ;, }, else]
[;, cachedV, =, null, ;, if, (, m, >=, n, ), {, transformToUpperBiDiagonal, (, ), ;, }, else, {, transformToLowerBiDiagonal]
[=, null, ;, if, (, m, >=, n, ), {, transformToUpperBiDiagonal, (, ), ;, }, else, {, transformToLowerBiDiagonal, (, )]
[;, if, (, m, >=, n, ), {, transformToUpperBiDiagonal, (, ), ;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }]
[), {, transformToUpperBiDiagonal, (, ), ;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }, }, public, RealMatrix, getU, (, )]
[>=, n, ), {, transformToUpperBiDiagonal, (, ), ;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }, }, public, RealMatrix, getU]
[), {, transformToUpperBiDiagonal, (, ), ;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }, }, public, RealMatrix, getU, (, )]
[;, }, else, {, transformToLowerBiDiagonal, (, ), ;, }, }, public, RealMatrix, getU, (, ), {, if, (, cachedU, ==]
[;, }, }, public, RealMatrix, getU, (, ), {, if, (, cachedU, ==, null, ), {, final, int, m, =]
[), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length]
[==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ]]
[), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length]
[;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;]
[., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, .]
[;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?, 0]
[., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, )]
[[, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m]
[], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n]
[;, final, int, diagOffset, =, (, m, >=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal]
[., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?, 0, :, 1, ;, final, double, []
[;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, main, :, secondary, ;, double, [, ]]
[?, 0, :, 1, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, main, :, secondary]
[), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, main, :]
[>=, n, ), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?]
[), ?, 0, :, 1, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, main, :]
[:, 1, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, main, :, secondary, ;, double]
[;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, main, :, secondary, ;, double, [, ]]
[;, double, [, ], [, ], ua, =, new, double, [, m, ], [, m, ], ;, for, (, int]
[?, main, :, secondary, ;, double, [, ], [, ], ua, =, new, double, [, m, ], [, m, ]]
[), ?, main, :, secondary, ;, double, [, ], [, ], ua, =, new, double, [, m, ], [, m]
[>=, n, ), ?, main, :, secondary, ;, double, [, ], [, ], ua, =, new, double, [, m, ]]
[), ?, main, :, secondary, ;, double, [, ], [, ], ua, =, new, double, [, m, ], [, m]
[:, secondary, ;, double, [, ], [, ], ua, =, new, double, [, m, ], [, m, ], ;, for]
[;, double, [, ], [, ], ua, =, new, double, [, m, ], [, m, ], ;, for, (, int]
[;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --, k, ), {, ua, []
[], [, m, ], ;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --, k]
[], ;, for, (, int, k, =, m, -, 1, ;, k, >=, p, ;, --, k, ), {, ua]
[;, k, >=, p, ;, --, k, ), {, ua, [, k, ], [, k, ], =, 1, ;, }]
[-, 1, ;, k, >=, p, ;, --, k, ), {, ua, [, k, ], [, k, ], =, 1]
[;, k, >=, p, ;, --, k, ), {, ua, [, k, ], [, k, ], =, 1, ;, }]
[;, --, k, ), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k]
[>=, p, ;, --, k, ), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (]
[;, --, k, ), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k]
[), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -]
[), {, ua, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -]
[=, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, )]
[[, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;]
[[, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k]
[], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset]
[], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k]
[;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final]
[;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[-, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k]
[;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, [, k, ]]
[>=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, []
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, [, k, ]]
[), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ]]
[), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, ua, [, k, ], [, k, ]]
[;, ua, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=]
[[, k, ], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, -]
[], ;, ua, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, -, diagOffset, ]]
[=, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =]
[[, k, ], =, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (]
[[, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, )]
[], [, k, ], =, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for]
[], =, 1, ;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j]
[;, if, (, hK, [, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;]
[), {, for, (, int, j, =, k, ;, j, <, m, ;, ++, j, ), {, double, alpha, =]
[!=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, m, ;, ++, j, ), {, double]
[[, k, -, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, m, ;]
[], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, m, ;, ++, j, ), {]
[-, diagOffset, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, m, ;, ++, j]
[], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, m, ;, ++, j, ), {]
[), {, for, (, int, j, =, k, ;, j, <, m, ;, ++, j, ), {, double, alpha, =]
[;, j, <, m, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k]
[;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m]
[<, m, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i]
[;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m]
[), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i]
[), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, alpha, -=, ua, []
[;, i, <, m, ;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors]
[;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], []
[<, m, ;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i]
[;, ++, i, ), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], []
[), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset]
[), {, alpha, -=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset]
[-=, ua, [, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }]
[;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (]
[*, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ]]
[[, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k]
[[, i, ], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=]
[], [, j, ], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, []
[], *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset]
[;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (]
[[, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -]
[[, i, ], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK]
[], [, k, -, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k]
[], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for]
[-, diagOffset, ], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ]]
[], ;, }, alpha, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for]
[/=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i, ]]
[*, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++]
[[, k, -, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;]
[], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;]
[-, diagOffset, ], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <]
[], *, hK, [, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i, ]]
[[, k, -, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, )]
[], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i]
[-, diagOffset, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, ua]
[], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, ua, [, i]
[;, i, <, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *]
[;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ]]
[<, m, ;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, []
[;, ++, i, ), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ]]
[), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ], [, k, -]
[), {, ua, [, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ], [, k, -]
[+=, -, alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (]
[[, j, ], +=, -, alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }]
[[, i, ], [, j, ], +=, -, alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;]
[], [, j, ], +=, -, alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }]
[], +=, -, alpha, *, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if]
[;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ], =]
[*, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0]
[*, householderVectors, [, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0]
[;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ], =]
[[, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0]
[[, i, ], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[], [, k, -, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, []
[], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ]]
[-, diagOffset, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], []
[], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, ua, [, 0, ], [, 0, ]]
[), {, ua, [, 0, ], [, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua]
[>, 0, ), {, ua, [, 0, ], [, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix]
[), {, ua, [, 0, ], [, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua]
[=, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public, RealMatrix]
[[, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;]
[[, 0, ], [, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }]
[], [, 0, ], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU]
[], =, 1, ;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public]
[;, }, cachedU, =, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public, RealMatrix, getB, (]
[=, MatrixUtils, ., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public, RealMatrix, getB, (, ), {, if]
[;, }, return, cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (, cachedB, ==, null, ), {, final]
[., createRealMatrix, (, ua, ), ;, }, return, cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (, cachedB]
[), ;, }, return, cachedU, ;, }, public, RealMatrix, getB, (, ), {, if, (, cachedB, ==, null, ), {]
[;, }, public, RealMatrix, getB, (, ), {, if, (, cachedB, ==, null, ), {, final, int, m, =, householderVectors]
[), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length]
[==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ]]
[), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length]
[;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, double, [, ], [, ], ba, =, new]
[., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, double, [, ], [, ], ba]
[;, double, [, ], [, ], ba, =, new, double, [, m, ], [, n, ], ;, for, (, int]
[., length, ;, double, [, ], [, ], ba, =, new, double, [, m, ], [, n, ], ;, for]
[[, 0, ], ., length, ;, double, [, ], [, ], ba, =, new, double, [, m, ], [, n]
[], ., length, ;, double, [, ], [, ], ba, =, new, double, [, m, ], [, n, ], ;]
[;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++, i, ), {, ba, []
[], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++, i]
[], ;, for, (, int, i, =, 0, ;, i, <, main, ., length, ;, ++, i, ), {, ba]
[;, i, <, main, ., length, ;, ++, i, ), {, ba, [, i, ], [, i, ], =, main]
[;, ++, i, ), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[<, main, ., length, ;, ++, i, ), {, ba, [, i, ], [, i, ], =, main, [, i]
[;, ++, i, ), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;, if, (]
[., length, ;, ++, i, ), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;]
[), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, m, <, n]
[), {, ba, [, i, ], [, i, ], =, main, [, i, ], ;, if, (, m, <, n]
[=, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {]
[[, i, ], =, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i, >]
[[, i, ], [, i, ], =, main, [, i, ], ;, if, (, m, <, n, ), {, if]
[], [, i, ], =, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i]
[], =, main, [, i, ], ;, if, (, m, <, n, ), {, if, (, i, >, 0, )]
[;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {, ba, [, i, ], []
[[, i, ], ;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {, ba, []
[], ;, if, (, m, <, n, ), {, if, (, i, >, 0, ), {, ba, [, i, ]]
[), {, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ], =, secondary]
[<, n, ), {, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ]]
[), {, if, (, i, >, 0, ), {, ba, [, i, ], [, i, -, 1, ], =, secondary]
[), {, ba, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }]
[>, 0, ), {, ba, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ]]
[), {, ba, [, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }]
[=, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -]
[[, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i]
[[, i, ], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {]
[], [, i, -, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (]
[], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length]
[-, 1, ], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <, main]
[], =, secondary, [, i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length]
[;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {, ba, [, i, ]]
[[, i, -, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, )]
[], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {, ba, [, i]
[-, 1, ], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {, ba]
[], ;, }, }, else, {, if, (, i, <, main, ., length, -, 1, ), {, ba, [, i]
[), {, ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }]
[<, main, ., length, -, 1, ), {, ba, [, i, ], [, i, +, 1, ], =, secondary, []
[), {, ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }]
[-, 1, ), {, ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }]
[., length, -, 1, ), {, ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ]]
[), {, ba, [, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }]
[=, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return]
[[, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (]
[[, i, ], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils]
[], [, i, +, 1, ], =, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix]
[], =, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }]
[+, 1, ], =, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, )]
[], =, secondary, [, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }]
[;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return, cachedB, ;, }, public, RealMatrix]
[[, i, ], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return, cachedB, ;]
[], ;, }, }, }, cachedB, =, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return, cachedB, ;, }, public]
[=, MatrixUtils, ., createRealMatrix, (, ba, ), ;, }, return, cachedB, ;, }, public, RealMatrix, getV, (, ), {, if]
[;, }, return, cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (, cachedV, ==, null, ), {, final]
[., createRealMatrix, (, ba, ), ;, }, return, cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (, cachedV]
[), ;, }, return, cachedB, ;, }, public, RealMatrix, getV, (, ), {, if, (, cachedV, ==, null, ), {]
[;, }, public, RealMatrix, getV, (, ), {, if, (, cachedV, ==, null, ), {, final, int, m, =, householderVectors]
[), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length]
[==, null, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ]]
[), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length]
[;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, ., length, ;]
[., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, final, int, p, =, main, .]
[;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?, 1]
[., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n, )]
[[, 0, ], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m]
[], ., length, ;, final, int, p, =, main, ., length, ;, final, int, diagOffset, =, (, m, >=, n]
[;, final, int, diagOffset, =, (, m, >=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal]
[., length, ;, final, int, diagOffset, =, (, m, >=, n, ), ?, 1, :, 0, ;, final, double, []
[;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, secondary, :, main, ;, double, [, ]]
[?, 1, :, 0, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, secondary, :, main]
[), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, secondary, :]
[>=, n, ), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?]
[), ?, 1, :, 0, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, secondary, :]
[:, 0, ;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, secondary, :, main, ;, double]
[;, final, double, [, ], diagonal, =, (, m, >=, n, ), ?, secondary, :, main, ;, double, [, ]]
[;, double, [, ], [, ], va, =, new, double, [, n, ], [, n, ], ;, for, (, int]
[?, secondary, :, main, ;, double, [, ], [, ], va, =, new, double, [, n, ], [, n, ]]
[), ?, secondary, :, main, ;, double, [, ], [, ], va, =, new, double, [, n, ], [, n]
[>=, n, ), ?, secondary, :, main, ;, double, [, ], [, ], va, =, new, double, [, n, ]]
[), ?, secondary, :, main, ;, double, [, ], [, ], va, =, new, double, [, n, ], [, n]
[:, main, ;, double, [, ], [, ], va, =, new, double, [, n, ], [, n, ], ;, for]
[;, double, [, ], [, ], va, =, new, double, [, n, ], [, n, ], ;, for, (, int]
[;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --, k, ), {, va, []
[], [, n, ], ;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --, k]
[], ;, for, (, int, k, =, n, -, 1, ;, k, >=, p, ;, --, k, ), {, va]
[;, k, >=, p, ;, --, k, ), {, va, [, k, ], [, k, ], =, 1, ;, }]
[-, 1, ;, k, >=, p, ;, --, k, ), {, va, [, k, ], [, k, ], =, 1]
[;, k, >=, p, ;, --, k, ), {, va, [, k, ], [, k, ], =, 1, ;, }]
[;, --, k, ), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k]
[>=, p, ;, --, k, ), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (]
[;, --, k, ), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k]
[), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -]
[), {, va, [, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -]
[=, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, )]
[[, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;]
[[, k, ], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k]
[], [, k, ], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset]
[], =, 1, ;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k]
[;, }, for, (, int, k, =, p, -, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final]
[;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset]
[-, 1, ;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k]
[;, k, >=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset]
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;, va, []
[>=, diagOffset, ;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;]
[;, --, k, ), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;, va, []
[), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;, va, [, k, ], []
[), {, final, double, [, ], hK, =, householderVectors, [, k, -, diagOffset, ], ;, va, [, k, ], []
[;, va, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, )]
[[, k, -, diagOffset, ], ;, va, [, k, ], [, k, ], =, 1, ;, if, (, hK, []
[], ;, va, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0]
[-, diagOffset, ], ;, va, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ]]
[], ;, va, [, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0]
[=, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;]
[[, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j]
[[, k, ], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for]
[], [, k, ], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int]
[], =, 1, ;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k]
[;, if, (, hK, [, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <]
[), {, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, double, beta, =]
[!=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, double]
[[, k, ], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, n, ;, ++, j]
[], !=, 0.0, ), {, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {]
[), {, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, double, beta, =]
[;, j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k]
[;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <, n]
[<, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i]
[;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <, n]
[), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i]
[), {, double, beta, =, 0, ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i]
[;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, beta, -=, va, []
[;, i, <, n, ;, ++, i, ), {, beta, -=, va, [, i, ], [, j, ], *, hK]
[;, ++, i, ), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;]
[<, n, ;, ++, i, ), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i]
[;, ++, i, ), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;]
[), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=]
[), {, beta, -=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=]
[-=, va, [, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k]
[;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i]
[*, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ]]
[[, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK]
[[, i, ], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset]
[], [, j, ], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *]
[], *, hK, [, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k]
[;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i]
[[, i, ], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for]
[], ;, }, beta, /=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int]
[/=, diagonal, [, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;]
[;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, va, [, i, ]]
[*, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, )]
[[, k, -, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <]
[], *, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i]
[-, diagOffset, ], *, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;]
[], *, hK, [, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i]
[;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, va, [, i, ]]
[[, k, ], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, va]
[], ;, for, (, int, i, =, k, ;, i, <, n, ;, ++, i, ), {, va, [, i]
[;, i, <, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=, -, beta, *]
[;, ++, i, ), {, va, [, i, ], [, j, ], +=, -, beta, *, hK, [, i, ]]
[<, n, ;, ++, i, ), {, va, [, i, ], [, j, ], +=, -, beta, *, hK, []
[;, ++, i, ), {, va, [, i, ], [, j, ], +=, -, beta, *, hK, [, i, ]]
[), {, va, [, i, ], [, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }]
[), {, va, [, i, ], [, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }]
[+=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {]
[[, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >]
[[, i, ], [, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if]
[], [, j, ], +=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset]
[], +=, -, beta, *, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, )]
[;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0, ], [, 0, ], =]
[*, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0]
[*, hK, [, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0]
[;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0, ], [, 0, ], =]
[[, i, ], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0, ], []
[], ;, }, }, }, }, if, (, diagOffset, >, 0, ), {, va, [, 0, ], [, 0, ]]
[), {, va, [, 0, ], [, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va]
[>, 0, ), {, va, [, 0, ], [, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix]
[), {, va, [, 0, ], [, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va]
[=, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va, ), ;, }, return, cachedV, ;, }, double, []
[[, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va, ), ;, }, return, cachedV, ;]
[[, 0, ], [, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va, ), ;, }]
[], [, 0, ], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va, ), ;, }, return, cachedV]
[], =, 1, ;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va, ), ;, }, return, cachedV, ;, }, double]
[;, }, cachedV, =, MatrixUtils, ., createRealMatrix, (, va, ), ;, }, return, cachedV, ;, }, double, [, ], []
[=, MatrixUtils, ., createRealMatrix, (, va, ), ;, }, return, cachedV, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (]
[;, }, return, cachedV, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, double]
[., createRealMatrix, (, va, ), ;, }, return, cachedV, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {]
[), ;, }, return, cachedV, ;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }]
[;, }, double, [, ], [, ], getHouseholderVectorsRef, (, ), {, return, householderVectors, ;, }, double, [, ], getMainDiagonalRef, (]
[;, }, double, [, ], getMainDiagonalRef, (, ), {, return, main, ;, }, double, [, ], getSecondaryDiagonalRef, (, ), {]
[;, }, double, [, ], getSecondaryDiagonalRef, (, ), {, return, secondary, ;, }, boolean, isUpperBiDiagonal, (, ), {, return, householderVectors]
[;, }, boolean, isUpperBiDiagonal, (, ), {, return, householderVectors, ., length, >=, householderVectors, [, 0, ], ., length, ;, }]
[;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[>=, householderVectors, [, 0, ], ., length, ;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors]
[., length, >=, householderVectors, [, 0, ], ., length, ;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m]
[;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int, n, =]
[., length, ;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final, int]
[[, 0, ], ., length, ;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length]
[], ., length, ;, }, private, void, transformToUpperBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length, ;, final]
[;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k]
[., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, double, xNormSqr, =, 0]
[., length, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, double, xNormSqr]
[[, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, )]
[], ., length, ;, for, (, int, k, =, 0, ;, k, <, n, ;, k, ++, ), {, double]
[;, k, <, n, ;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k]
[;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i, <, m]
[<, n, ;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i]
[;, k, ++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i, <, m]
[), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i]
[++, ), {, double, xNormSqr, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, c, =]
[;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ]]
[;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c]
[<, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr]
[;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c]
[), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;]
[), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final]
[[, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k]
[[, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =]
[], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, []
[], ;, xNormSqr, +=, c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[+=, c, *, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a]
[;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (, hK, []
[*, c, ;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (]
[;, }, final, double, [, ], hK, =, householderVectors, [, k, ], ;, final, double, a, =, (, hK, []
[;, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr]
[[, k, ], ;, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, .]
[], ;, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=]
[?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ]]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k]
[>, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main]
[[, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0]
[., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=]
[;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=]
[., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ]]
[=, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int]
[[, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;]
[], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (]
[;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, j, =]
[), {, hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[!=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;]
[), {, hK, [, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[-=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {]
[[, k, ], -=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[], -=, a, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, )]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, double, alpha]
[;, j, <, n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k]
[+, 1, ;, j, <, n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i]
[;, j, <, n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k]
[;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m]
[<, n, ;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i]
[;, ++, j, ), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m]
[), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i]
[), {, double, alpha, =, 0, ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ]]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, []
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, []
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, alpha, -=, hI, [, j, ], *]
[;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors, []
[[, i, ], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a]
[], ;, alpha, -=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors]
[-=, hI, [, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ]]
[;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k]
[*, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for]
[[, j, ], *, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k]
[], *, hI, [, k, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;]
[;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k]
[[, k, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int]
[], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =]
[/=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k, ;, i, <]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ]]
[*, householderVectors, [, k, ], [, k, ], ;, for, (, int, i, =, k, ;, i, <, m, ;]
[;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, [, ]]
[[, k, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final]
[[, k, ], [, k, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i]
[], [, k, ], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {]
[], ;, for, (, int, i, =, k, ;, i, <, m, ;, ++, i, ), {, final, double, []
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ]]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, []
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ]]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, alpha, *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, alpha, *]
[;, hI, [, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <]
[[, i, ], ;, hI, [, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if]
[], ;, hI, [, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k]
[-=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <, n, -, 1, ), {]
[[, j, ], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <, n, -]
[], -=, alpha, *, hI, [, k, ], ;, }, }, }, if, (, k, <, n, -, 1, )]
[;, }, }, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int]
[*, hI, [, k, ], ;, }, }, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =]
[;, }, }, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int]
[[, k, ], ;, }, }, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =, 0, ;]
[], ;, }, }, }, if, (, k, <, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (]
[), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[<, n, -, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j]
[), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[-, 1, ), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n]
[), {, xNormSqr, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[=, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, final, double]
[;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[+, 1, ;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;]
[;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;]
[<, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *]
[;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;]
[), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double]
[), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ], >]
[[, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hK, [, k, +]
[], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ]]
[+=, c, *, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ], >, 0, )]
[;, }, final, double, b, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, .]
[*, c, ;, }, final, double, b, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -]
[;, }, final, double, b, =, (, hK, [, k, +, 1, ], >, 0, ), ?, -, FastMath, .]
[;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +, 1]
[?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ]]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k]
[>, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary]
[[, k, +, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[+, 1, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0]
[., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=]
[;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +, 1]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {]
[), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +]
[=, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, b, ;, for]
[[, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +, 1, ], -=]
[], =, b, ;, if, (, b, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, b, ;]
[;, if, (, b, !=, 0.0, ), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int]
[), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;]
[!=, 0.0, ), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +]
[), {, hK, [, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;]
[-=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[[, k, +, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[], -=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, )]
[+, 1, ], -=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[], -=, b, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, )]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta, =, 0]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta, =, 0]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta, =, 0, ;, for, (]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, beta, =, 0, ;, for, (]
[;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[[, i, ], ;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[], ;, double, beta, =, 0, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=]
[;, j, <, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ]]
[+, 1, ;, j, <, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, []
[;, j, <, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ]]
[;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=]
[<, n, ;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }]
[;, ++, j, ), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=]
[), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *, hK]
[), {, beta, -=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *, hK]
[-=, hI, [, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *, hK, [, k, +]
[;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +]
[*, hK, [, j, ], ;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (]
[[, j, ], *, hK, [, j, ], ;, }, beta, /=, b, *, hK, [, k, +, 1, ]]
[], *, hK, [, j, ], ;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for]
[;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +]
[[, j, ], ;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j]
[], ;, }, beta, /=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k]
[/=, b, *, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;, j]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI, []
[*, hK, [, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <, n]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI, []
[[, k, +, 1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI]
[+, 1, ], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, )]
[], ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, hI]
[;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, beta, *, hK, [, j, ]]
[+, 1, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, beta, *, hK, []
[;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, beta, *, hK, [, j, ]]
[;, ++, j, ), {, hI, [, j, ], -=, beta, *, hK, [, j, ], ;, }, }, }]
[<, n, ;, ++, j, ), {, hI, [, j, ], -=, beta, *, hK, [, j, ], ;, }]
[;, ++, j, ), {, hI, [, j, ], -=, beta, *, hK, [, j, ], ;, }, }, }]
[), {, hI, [, j, ], -=, beta, *, hK, [, j, ], ;, }, }, }, }, }, }]
[), {, hI, [, j, ], -=, beta, *, hK, [, j, ], ;, }, }, }, }, }, }]
[-=, beta, *, hK, [, j, ], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {]
[[, j, ], -=, beta, *, hK, [, j, ], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal]
[], -=, beta, *, hK, [, j, ], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, )]
[;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length]
[*, hK, [, j, ], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int]
[;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =, householderVectors, ., length]
[[, j, ], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =]
[], ;, }, }, }, }, }, }, private, void, transformToLowerBiDiagonal, (, ), {, final, int, m, =, householderVectors, .]
[;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k]
[., length, ;, final, int, n, =, householderVectors, [, 0, ], ., length, ;, for, (, int, k, =, 0]
[;, for, (, int, k, =, 0, ;, k, <, m, ;, k, ++, ), {, final, double, [, ]]
[., length, ;, for, (, int, k, =, 0, ;, k, <, m, ;, k, ++, ), {, final, double]
[[, 0, ], ., length, ;, for, (, int, k, =, 0, ;, k, <, m, ;, k, ++, )]
[], ., length, ;, for, (, int, k, =, 0, ;, k, <, m, ;, k, ++, ), {, final]
[;, k, <, m, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;]
[;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =, 0]
[<, m, ;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, double, xNormSqr]
[;, k, ++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =, 0]
[), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =, 0, ;, for, (]
[++, ), {, final, double, [, ], hK, =, householderVectors, [, k, ], ;, double, xNormSqr, =, 0, ;, for]
[;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, )]
[[, k, ], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;]
[], ;, double, xNormSqr, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j]
[;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, final, double, c, =]
[;, j, <, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=]
[;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;]
[<, n, ;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *]
[;, ++, j, ), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;]
[), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double]
[), {, final, double, c, =, hK, [, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ], >, 0, )]
[[, j, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ]]
[], ;, xNormSqr, +=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ], >, 0]
[+=, c, *, c, ;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -]
[;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[*, c, ;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, .]
[;, }, final, double, a, =, (, hK, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=]
[?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ]]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k]
[>, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main]
[[, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0]
[., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=]
[;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=]
[., sqrt, (, xNormSqr, ), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {]
[), ;, main, [, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ]]
[=, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int]
[[, k, ], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;]
[], =, a, ;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (]
[;, if, (, a, !=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, i, =]
[), {, hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[!=, 0.0, ), {, hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;]
[), {, hK, [, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <]
[-=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[[, k, ], -=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[], -=, a, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, )]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, alpha, =, 0]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, alpha]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, alpha, =, 0]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, alpha, =, 0, ;, for, (]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, double, alpha, =, 0, ;, for, (]
[;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, )]
[[, i, ], ;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;]
[], ;, double, alpha, =, 0, ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j]
[;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, alpha, -=, hI, []
[;, j, <, n, ;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ]]
[;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=]
[<, n, ;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }]
[;, ++, j, ), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=]
[), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors]
[), {, alpha, -=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors]
[-=, hI, [, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ]]
[;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k]
[*, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for]
[[, j, ], *, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k]
[], *, hK, [, j, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;]
[;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k]
[[, j, ], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int]
[], ;, }, alpha, /=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =]
[/=, a, *, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k, ;, j, <]
[;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ]]
[*, householderVectors, [, k, ], [, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;]
[;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j, ]]
[[, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI]
[[, k, ], [, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j]
[], [, k, ], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {]
[], ;, for, (, int, j, =, k, ;, j, <, n, ;, ++, j, ), {, hI, [, j]
[;, j, <, n, ;, ++, j, ), {, hI, [, j, ], -=, alpha, *, hK, [, j, ]]
[;, ++, j, ), {, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }]
[<, n, ;, ++, j, ), {, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }]
[;, ++, j, ), {, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }]
[), {, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k]
[), {, hI, [, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k]
[-=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k, <, m, -, 1, ), {]
[[, j, ], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k, <, m, -]
[], -=, alpha, *, hK, [, j, ], ;, }, }, }, if, (, k, <, m, -, 1, )]
[;, }, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors]
[*, hK, [, j, ], ;, }, }, }, if, (, k, <, m, -, 1, ), {, final, double]
[;, }, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors]
[[, j, ], ;, }, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ]]
[], ;, }, }, }, if, (, k, <, m, -, 1, ), {, final, double, [, ], hKp1, =]
[), {, final, double, [, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for]
[<, m, -, 1, ), {, final, double, [, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr]
[), {, final, double, [, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for]
[-, 1, ), {, final, double, [, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0]
[), {, final, double, [, ], hKp1, =, householderVectors, [, k, +, 1, ], ;, xNormSqr, =, 0, ;, for]
[;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i]
[[, k, +, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i]
[], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[+, 1, ], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[], ;, xNormSqr, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[=, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double]
[;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ]]
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], []
[;, i, <, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ]]
[;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c]
[<, m, ;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr]
[;, ++, i, ), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c]
[), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;]
[), {, final, double, c, =, householderVectors, [, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;]
[;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, )]
[[, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ]]
[[, i, ], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1]
[], [, k, ], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k]
[], ;, xNormSqr, +=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >, 0]
[+=, c, *, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -]
[;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[*, c, ;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -, FastMath, .]
[;, }, final, double, b, =, (, hKp1, [, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (]
[;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=]
[?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ]]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k]
[>, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary]
[[, k, ], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr]
[], >, 0, ), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;]
[), ?, -, FastMath, ., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0]
[:, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0]
[., sqrt, (, xNormSqr, ), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;]
[), :, FastMath, ., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=]
[;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=]
[., sqrt, (, xNormSqr, ), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {]
[), ;, secondary, [, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ]]
[=, b, ;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int]
[[, k, ], =, b, ;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=, b, ;]
[], =, b, ;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (]
[;, if, (, b, !=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =]
[), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[!=, 0.0, ), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;]
[), {, hKp1, [, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <]
[-=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {]
[[, k, ], -=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++]
[], -=, b, ;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, )]
[;, for, (, int, j, =, k, +, 1, ;, j, <, n, ;, ++, j, ), {, double, beta]
[;, j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k]
[+, 1, ;, j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i]
[;, j, <, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k]
[;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i]
[<, n, ;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1]
[;, ++, j, ), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i]
[), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[), {, double, beta, =, 0, ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, []
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, []
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, beta, -=, hI, [, j, ], *]
[;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=, b, *, hKp1, []
[[, i, ], ;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=, b]
[], ;, beta, -=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=, b, *, hKp1]
[-=, hI, [, j, ], *, hI, [, k, ], ;, }, beta, /=, b, *, hKp1, [, k, ]]
[;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[*, hI, [, k, ], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i]
[[, j, ], *, hI, [, k, ], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for]
[], *, hI, [, k, ], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int]
[;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;]
[[, k, ], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k]
[], ;, }, beta, /=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1]
[/=, b, *, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double]
[*, hKp1, [, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++]
[;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final, double]
[[, k, ], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, )]
[], ;, for, (, int, i, =, k, +, 1, ;, i, <, m, ;, ++, i, ), {, final]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[+, 1, ;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i]
[;, i, <, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ]]
[<, m, ;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, []
[;, ++, i, ), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ]]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, beta, *]
[), {, final, double, [, ], hI, =, householderVectors, [, i, ], ;, hI, [, j, ], -=, beta, *]
[;, hI, [, j, ], -=, beta, *, hI, [, k, ], ;, }, }, }, }, }, }, }]
[[, i, ], ;, hI, [, j, ], -=, beta, *, hI, [, k, ], ;, }, }, }, }]
[], ;, hI, [, j, ], -=, beta, *, hI, [, k, ], ;, }, }, }, }, }, }]
[-=, beta, *, hI, [, k, ], ;, }, }, }, }, }, }, }]
[[, j, ], -=, beta, *, hI, [, k, ], ;, }, }, }, }, }, }, }]
[], -=, beta, *, hI, [, k, ], ;, }, }, }, }, }, }, }]
[;, }, }, }, }, }, }, }]
[*, hI, [, k, ], ;, }, }, }, }, }, }, }]
[;, }, }, }, }, }, }, }]
[[, k, ], ;, }, }, }, }, }, }, }]
[], ;, }, }, }, }, }, }, }]
