[;, private, NumberFormat, wholeFormat, ;, public, ProperBigFractionFormat, (, ), {, this, (, getDefaultNumberFormat, (, ), ), ;, }, public, ProperBigFractionFormat]
[;, private, NumberFormat, wholeFormat, ;, public, ProperBigFractionFormat, (, ), {, this, (, getDefaultNumberFormat, (, ), ), ;, }, public, ProperBigFractionFormat]
[), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, format, ), {, this, (, format, ,, (, NumberFormat, ), format, .]
[,, (, NumberFormat, ), format, ., clone, (, ), ,, (, NumberFormat, ), format, ., clone, (, ), ), ;]
[,, (, NumberFormat, ), format, ., clone, (, ), ), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, wholeFormat, ,, final]
[,, (, NumberFormat, ), format, ., clone, (, ), ), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, wholeFormat, ,, final]
[., clone, (, ), ,, (, NumberFormat, ), format, ., clone, (, ), ), ;, }, public, ProperBigFractionFormat, (, final]
[), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, wholeFormat, ,, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super]
[), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, wholeFormat, ,, final, NumberFormat, numeratorFormat, ,, final, NumberFormat, denominatorFormat, ), {, super]
[., clone, (, ), ), ;, }, public, ProperBigFractionFormat, (, final, NumberFormat, wholeFormat, ,, final, NumberFormat, numeratorFormat, ,, final, NumberFormat]
[,, denominatorFormat, ), ;, setWholeFormat, (, wholeFormat, ), ;, }, @, Override, public, StringBuffer, format, (, final, BigFraction, fraction, ,]
[), ;, setWholeFormat, (, wholeFormat, ), ;, }, @, Override, public, StringBuffer, format, (, final, BigFraction, fraction, ,, final, StringBuffer]
[;, }, @, Override, public, StringBuffer, format, (, final, BigFraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos, )]
[), ;, }, @, Override, public, StringBuffer, format, (, final, BigFraction, fraction, ,, final, StringBuffer, toAppendTo, ,, final, FieldPosition, pos]
[;, pos, ., setEndIndex, (, 0, ), ;, BigInteger, num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =]
[., setBeginIndex, (, 0, ), ;, pos, ., setEndIndex, (, 0, ), ;, BigInteger, num, =, fraction, ., getNumerator, (]
[), ;, pos, ., setEndIndex, (, 0, ), ;, BigInteger, num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den]
[;, BigInteger, num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;, BigInteger]
[., setEndIndex, (, 0, ), ;, BigInteger, num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =, fraction, .]
[), ;, BigInteger, num, =, fraction, ., getNumerator, (, ), ;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;]
[;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide, (, den, ), ;]
[., getNumerator, (, ), ;, BigInteger, den, =, fraction, ., getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide]
[;, BigInteger, whole, =, num, ., divide, (, den, ), ;, num, =, num, ., remainder, (, den, ), ;]
[., getDenominator, (, ), ;, BigInteger, whole, =, num, ., divide, (, den, ), ;, num, =, num, ., remainder]
[;, num, =, num, ., remainder, (, den, ), ;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole]
[., divide, (, den, ), ;, num, =, num, ., remainder, (, den, ), ;, if, (, !, BigInteger, .]
[), ;, num, =, num, ., remainder, (, den, ), ;, if, (, !, BigInteger, ., ZERO, ., equals, (]
[=, num, ., remainder, (, den, ), ;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole, ), )]
[;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (]
[., remainder, (, den, ), ;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole, ), ), {, getWholeFormat]
[), ;, if, (, !, BigInteger, ., ZERO, ., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format]
[), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ']
[), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ']
[., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;]
[., ZERO, ., equals, (, whole, ), ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos]
[), ), {, getWholeFormat, (, ), ., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[;, toAppendTo, ., append, (, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0]
[., format, (, whole, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (, num]
[,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger]
[,, pos, ), ;, toAppendTo, ., append, (, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO]
[), ;, toAppendTo, ., append, (, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <]
[;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, num, =, num, ., negate]
[., append, (, ' ', ), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[), ;, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, num, =, num, .]
[), {, num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,]
[<, 0, ), {, num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (]
[., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, num, =, num, ., negate, (, ), ;, }]
[), <, 0, ), {, num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format]
[., ZERO, ), <, 0, ), {, num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, )]
[), {, num, =, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,]
[=, num, ., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos]
[;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (]
[., negate, (, ), ;, }, }, getNumeratorFormat, (, ), ., format, (, num, ,, toAppendTo, ,, pos, ), ;]
[;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, )]
[., format, (, num, ,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, )]
[,, toAppendTo, ,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den]
[,, pos, ), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo]
[), ;, toAppendTo, ., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos]
[;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat]
[., append, (, " / ", ), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return]
[), ;, getDenominatorFormat, (, ), ., format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public]
[;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override, public, BigFraction, parse]
[., format, (, den, ,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {]
[,, toAppendTo, ,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }]
[,, pos, ), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override]
[), ;, return, toAppendTo, ;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override, public, BigFraction]
[;, }, public, NumberFormat, getWholeFormat, (, ), {, return, wholeFormat, ;, }, @, Override, public, BigFraction, parse, (, final, String]
[;, }, @, Override, public, BigFraction, parse, (, final, String, source, ,, final, ParsePosition, pos, ), {, BigFraction, ret, =]
[;, if, (, ret, !=, null, ), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex, (]
[., parse, (, source, ,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, final]
[,, pos, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, final, int, initialIndex, =, pos]
[), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex]
[), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,]
[!=, null, ), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (]
[), {, return, ret, ;, }, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,]
[;, }, final, int, initialIndex, =, pos, ., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger]
[;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (]
[., getIndex, (, ), ;, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos]
[;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {, pos, .]
[,, pos, ), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, whole, ==, null, )]
[), ;, BigInteger, whole, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, whole, ==, null, ), {, pos]
[;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace]
[,, pos, ), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, whole, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =]
[), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if]
[;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos, .]
[,, pos, ), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, )]
[), ;, BigInteger, num, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, num, ==, null, ), {, pos]
[;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if]
[,, pos, ), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, num, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., compareTo]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger]
[;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, )]
[), ;, return, null, ;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[;, }, if, (, num, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex]
[<, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos]
[., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =]
[., ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex]
[;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;]
[), ;, return, null, ;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =]
[;, }, final, int, startIndex, =, pos, ., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,]
[;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, ), {, case, 0, :]
[., getIndex, (, ), ;, final, char, c, =, parseNextCharacter, (, source, ,, pos, ), ;, switch, (, c, )]
[;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break]
[,, pos, ), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case]
[), ;, switch, (, c, ), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :]
[), {, case, 0, :, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos]
[:, return, new, BigFraction, (, num, ), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex]
[;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex]
[), ;, case, '/', :, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (]
[:, break, ;, default, :, pos, ., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return]
[;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final]
[., setIndex, (, initialIndex, ), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source]
[), ;, pos, ., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;]
[;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,]
[., setErrorIndex, (, startIndex, ), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den]
[), ;, return, null, ;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source]
[;, }, parseAndIgnoreWhitespace, (, source, ,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;]
[;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {, pos]
[,, pos, ), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null]
[), ;, final, BigInteger, den, =, parseNextBigInteger, (, source, ,, pos, ), ;, if, (, den, ==, null, ), {]
[;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if]
[,, pos, ), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), ;, if, (, den, ==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger]
[==, null, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., compareTo]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger]
[;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, )]
[), ;, return, null, ;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {]
[;, }, if, (, den, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (]
[<, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, .]
[., compareTo, (, BigInteger, ., ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null]
[), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole]
[., ZERO, ), <, 0, ), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg]
[), {, pos, ., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (]
[;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;, if]
[., setIndex, (, initialIndex, ), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO]
[), ;, return, null, ;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;]
[;, }, boolean, wholeIsNeg, =, whole, ., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;, if, (, wholeIsNeg, )]
[;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =, whole, ., multiply]
[<, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =, whole]
[., compareTo, (, BigInteger, ., ZERO, ), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate]
[), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =]
[., ZERO, ), <, 0, ;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }]
[;, if, (, wholeIsNeg, ), {, whole, =, whole, ., negate, (, ), ;, }, num, =, whole, ., multiply]
[), {, whole, =, whole, ., negate, (, ), ;, }, num, =, whole, ., multiply, (, den, ), .]
[=, whole, ., negate, (, ), ;, }, num, =, whole, ., multiply, (, den, ), ., add, (, num]
[;, }, num, =, whole, ., multiply, (, den, ), ., add, (, num, ), ;, if, (, wholeIsNeg, )]
[., negate, (, ), ;, }, num, =, whole, ., multiply, (, den, ), ., add, (, num, ), ;]
[=, whole, ., multiply, (, den, ), ., add, (, num, ), ;, if, (, wholeIsNeg, ), {, num, =]
[;, if, (, wholeIsNeg, ), {, num, =, num, ., negate, (, ), ;, }, return, new, BigFraction, (, num]
[., add, (, num, ), ;, if, (, wholeIsNeg, ), {, num, =, num, ., negate, (, ), ;, }]
[., multiply, (, den, ), ., add, (, num, ), ;, if, (, wholeIsNeg, ), {, num, =, num, .]
[), ., add, (, num, ), ;, if, (, wholeIsNeg, ), {, num, =, num, ., negate, (, ), ;]
[), ;, if, (, wholeIsNeg, ), {, num, =, num, ., negate, (, ), ;, }, return, new, BigFraction, (]
[), {, num, =, num, ., negate, (, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;]
[=, num, ., negate, (, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, void]
[;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, void, setWholeFormat, (, final, NumberFormat, format, )]
[., negate, (, ), ;, }, return, new, BigFraction, (, num, ,, den, ), ;, }, public, void, setWholeFormat, (]
[;, }, public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw, new]
[,, den, ), ;, }, public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, )]
[), ;, }, public, void, setWholeFormat, (, final, NumberFormat, format, ), {, if, (, format, ==, null, ), {, throw]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[;, }, this, ., wholeFormat, =, format, ;, }, }]
[), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[., WHOLE_FORMAT, ), ;, }, this, ., wholeFormat, =, format, ;, }, }]
[=, format, ;, }, }]
[., wholeFormat, =, format, ;, }, }]
[;, }, }]
