[;, private, FlatFlowScopeCache, flattened, ;, private, boolean, frozen, =, false, ;, private, LinkedFlowSlot, lastSlot, ;, private, LinkedFlowScope, (, FlatFlowScopeCache, cache]
[;, private, LinkedFlowSlot, lastSlot, ;, private, LinkedFlowScope, (, FlatFlowScopeCache, cache, ,, LinkedFlowScope, directParent, ), {, this, ., cache, =, cache]
[=, cache, ;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =]
[., cache, =, cache, ;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;, this, .]
[;, if, (, directParent, ==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;]
[), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;, this, ., parent, =, cache, .]
[==, null, ), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;, this, ., parent, =]
[), {, this, ., lastSlot, =, null, ;, this, ., depth, =, 0, ;, this, ., parent, =, cache, .]
[=, null, ;, this, ., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {]
[., lastSlot, =, null, ;, this, ., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }]
[;, this, ., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, .]
[=, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, .]
[., depth, =, 0, ;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =]
[;, this, ., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;]
[=, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =]
[., parent, =, cache, ., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, .]
[;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =, directParent, ., depth, +]
[., linkedEquivalent, ;, }, else, {, this, ., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =, directParent, .]
[=, directParent, ., lastSlot, ;, this, ., depth, =, directParent, ., depth, +, 1, ;, this, ., parent, =, directParent]
[., lastSlot, =, directParent, ., lastSlot, ;, this, ., depth, =, directParent, ., depth, +, 1, ;, this, ., parent]
[;, this, ., depth, =, directParent, ., depth, +, 1, ;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope]
[., lastSlot, ;, this, ., depth, =, directParent, ., depth, +, 1, ;, this, ., parent, =, directParent, ;, }]
[=, directParent, ., depth, +, 1, ;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, )]
[., depth, =, directParent, ., depth, +, 1, ;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache]
[;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (, cache, ,, null]
[+, 1, ;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (, cache]
[., depth, +, 1, ;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this]
[;, this, ., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (, cache, ,, null]
[=, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (, cache, ,, null, ), ;, }, LinkedFlowScope]
[., parent, =, directParent, ;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (, cache, ,, null, ), ;]
[;, }, }, LinkedFlowScope, (, FlatFlowScopeCache, cache, ), {, this, (, cache, ,, null, ), ;, }, LinkedFlowScope, (, LinkedFlowScope]
[,, null, ), ;, }, LinkedFlowScope, (, LinkedFlowScope, directParent, ), {, this, (, directParent, ., cache, ,, directParent, ), ;]
[), ;, }, LinkedFlowScope, (, LinkedFlowScope, directParent, ), {, this, (, directParent, ., cache, ,, directParent, ), ;, }, private]
[,, directParent, ), ;, }, private, Scope, getFunctionScope, (, ), {, return, cache, ., functionScope, ;, }, private, boolean, flowsFromBottom]
[., cache, ,, directParent, ), ;, }, private, Scope, getFunctionScope, (, ), {, return, cache, ., functionScope, ;, }, private]
[), ;, }, private, Scope, getFunctionScope, (, ), {, return, cache, ., functionScope, ;, }, private, boolean, flowsFromBottom, (, )]
[;, }, private, boolean, flowsFromBottom, (, ), {, return, getFunctionScope, (, ), ., isBottom, (, ), ;, }, public, static]
[., functionScope, ;, }, private, boolean, flowsFromBottom, (, ), {, return, getFunctionScope, (, ), ., isBottom, (, ), ;, }]
[;, }, public, static, LinkedFlowScope, createEntryLattice, (, Scope, scope, ), {, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (, scope, )]
[., isBottom, (, ), ;, }, public, static, LinkedFlowScope, createEntryLattice, (, Scope, scope, ), {, return, new, LinkedFlowScope, (, new]
[;, }, @, Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState, (, !]
[), ;, }, @, Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState, (]
[), ), ;, }, @, Override, public, void, inferSlotType, (, String, symbol, ,, JSType, type, ), {, Preconditions, ., checkState]
[;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;, cache, ., dirtySymbols, .]
[., checkState, (, !, frozen, ), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth]
[), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;, cache, ., dirtySymbols]
[), ;, lastSlot, =, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;, cache, ., dirtySymbols]
[=, new, LinkedFlowSlot, (, symbol, ,, type, ,, lastSlot, ), ;, depth, ++, ;, cache, ., dirtySymbols, ., add, (]
[;, depth, ++, ;, cache, ., dirtySymbols, ., add, (, symbol, ), ;, }, @, Override, public, void, inferQualifiedSlot, (]
[,, type, ,, lastSlot, ), ;, depth, ++, ;, cache, ., dirtySymbols, ., add, (, symbol, ), ;, }, @]
[,, lastSlot, ), ;, depth, ++, ;, cache, ., dirtySymbols, ., add, (, symbol, ), ;, }, @, Override, public]
[), ;, depth, ++, ;, cache, ., dirtySymbols, ., add, (, symbol, ), ;, }, @, Override, public, void, inferQualifiedSlot]
[;, cache, ., dirtySymbols, ., add, (, symbol, ), ;, }, @, Override, public, void, inferQualifiedSlot, (, Node, node, ,]
[++, ;, cache, ., dirtySymbols, ., add, (, symbol, ), ;, }, @, Override, public, void, inferQualifiedSlot, (, Node, node]
[;, }, @, Override, public, void, inferQualifiedSlot, (, Node, node, ,, String, symbol, ,, JSType, bottomType, ,, JSType, inferredType, )]
[., add, (, symbol, ), ;, }, @, Override, public, void, inferQualifiedSlot, (, Node, node, ,, String, symbol, ,, JSType]
[., dirtySymbols, ., add, (, symbol, ), ;, }, @, Override, public, void, inferQualifiedSlot, (, Node, node, ,, String, symbol]
[), ;, }, @, Override, public, void, inferQualifiedSlot, (, Node, node, ,, String, symbol, ,, JSType, bottomType, ,, JSType, inferredType]
[;, if, (, functionScope, ., isLocal, (, ), ), {, if, (, functionScope, ., getVar, (, symbol, ), ==, null]
[), {, if, (, functionScope, ., getVar, (, symbol, ), ==, null, &&, !, functionScope, ., isBottom, (, ), )]
[., isLocal, (, ), ), {, if, (, functionScope, ., getVar, (, symbol, ), ==, null, &&, !, functionScope, .]
[), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }, inferSlotType, (, symbol, ,]
[&&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null]
[==, null, &&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType]
[., getVar, (, symbol, ), ==, null, &&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (]
[), ==, null, &&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,]
[&&, !, functionScope, ., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null]
[), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }, inferSlotType, (, symbol, ,]
[), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }, inferSlotType, (, symbol, ,]
[., isBottom, (, ), ), {, functionScope, ., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }]
[;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return]
[., declare, (, symbol, ,, node, ,, bottomType, ,, null, ), ;, }, inferSlotType, (, symbol, ,, inferredType, ), ;]
[,, node, ,, bottomType, ,, null, ), ;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override]
[,, bottomType, ,, null, ), ;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override, public, JSType]
[,, null, ), ;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override, public, JSType, getTypeOfThis, (]
[), ;, }, inferSlotType, (, symbol, ,, inferredType, ), ;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {]
[;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, cache, ., functionScope, ., getTypeOfThis, (, ), ;]
[,, inferredType, ), ;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, cache, ., functionScope, ., getTypeOfThis]
[), ;, }, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, cache, ., functionScope, ., getTypeOfThis, (, )]
[;, }, @, Override, public, Node, getRootNode, (, ), {, return, getFunctionScope, (, ), ., getRootNode, (, ), ;, }]
[., getTypeOfThis, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, getFunctionScope, (, ), ., getRootNode]
[., functionScope, ., getTypeOfThis, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, getFunctionScope, (, )]
[;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return, getFunctionScope, (, ), ., getParentScope, (]
[., getRootNode, (, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return, getFunctionScope, (]
[;, }, @, Override, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (, cache, ., dirtySymbols]
[., getParentScope, (, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if]
[), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {]
[., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =]
[., dirtySymbols, ., contains, (, name, ), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;]
[), ), {, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, )]
[;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (, slot, ., getName, (, ), .]
[;, slot, =, slot, ., parent, ), {, if, (, slot, ., getName, (, ), ., equals, (, name, )]
[!=, null, ;, slot, =, slot, ., parent, ), {, if, (, slot, ., getName, (, ), ., equals, (]
[;, slot, =, slot, ., parent, ), {, if, (, slot, ., getName, (, ), ., equals, (, name, )]
[=, slot, ., parent, ), {, if, (, slot, ., getName, (, ), ., equals, (, name, ), ), {]
[), {, if, (, slot, ., getName, (, ), ., equals, (, name, ), ), {, return, slot, ;, }]
[., parent, ), {, if, (, slot, ., getName, (, ), ., equals, (, name, ), ), {, return, slot]
[), {, return, slot, ;, }, }, }, return, cache, ., getSlot, (, name, ), ;, }, @, Override, public]
[., equals, (, name, ), ), {, return, slot, ;, }, }, }, return, cache, ., getSlot, (, name, )]
[., getName, (, ), ., equals, (, name, ), ), {, return, slot, ;, }, }, }, return, cache, .]
[), ), {, return, slot, ;, }, }, }, return, cache, ., getSlot, (, name, ), ;, }, @, Override]
[;, }, }, }, return, cache, ., getSlot, (, name, ), ;, }, @, Override, public, StaticSlot, <, JSType, >]
[;, }, @, Override, public, StaticSlot, <, JSType, >, getOwnSlot, (, String, name, ), {, throw, new, UnsupportedOperationException, (, )]
[., getSlot, (, name, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, getOwnSlot, (, String, name, ), {]
[), ;, }, @, Override, public, StaticSlot, <, JSType, >, getOwnSlot, (, String, name, ), {, throw, new, UnsupportedOperationException, (]
[;, }, @, Override, public, FlowScope, createChildFlowScope, (, ), {, frozen, =, true, ;, if, (, depth, >, MAX_DEPTH, )]
[=, true, ;, if, (, depth, >, MAX_DEPTH, ), {, if, (, flattened, ==, null, ), {, flattened, =, new]
[;, if, (, depth, >, MAX_DEPTH, ), {, if, (, flattened, ==, null, ), {, flattened, =, new, FlatFlowScopeCache, (]
[), {, if, (, flattened, ==, null, ), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return, new]
[>, MAX_DEPTH, ), {, if, (, flattened, ==, null, ), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }]
[), {, if, (, flattened, ==, null, ), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return, new]
[), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return, new, LinkedFlowScope, (, flattened, ), ;, }, return]
[==, null, ), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return, new, LinkedFlowScope, (, flattened, ), ;]
[), {, flattened, =, new, FlatFlowScopeCache, (, this, ), ;, }, return, new, LinkedFlowScope, (, flattened, ), ;, }, return]
[=, new, FlatFlowScopeCache, (, this, ), ;, }, return, new, LinkedFlowScope, (, flattened, ), ;, }, return, new, LinkedFlowScope, (]
[;, }, return, new, LinkedFlowScope, (, flattened, ), ;, }, return, new, LinkedFlowScope, (, this, ), ;, }, @, Override]
[), ;, }, return, new, LinkedFlowScope, (, flattened, ), ;, }, return, new, LinkedFlowScope, (, this, ), ;, }, @]
[;, }, return, new, LinkedFlowScope, (, this, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, findUniqueRefinedSlot, (, FlowScope]
[), ;, }, return, new, LinkedFlowScope, (, this, ), ;, }, @, Override, public, StaticSlot, <, JSType, >, findUniqueRefinedSlot, (]
[;, }, @, Override, public, StaticSlot, <, JSType, >, findUniqueRefinedSlot, (, FlowScope, blindScope, ), {, StaticSlot, <, JSType, >, result]
[), ;, }, @, Override, public, StaticSlot, <, JSType, >, findUniqueRefinedSlot, (, FlowScope, blindScope, ), {, StaticSlot, <, JSType, >]
[;, for, (, LinkedFlowScope, currentScope, =, this, ;, currentScope, !=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for]
[;, currentScope, !=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot]
[;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null]
[!=, blindScope, ;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot]
[;, currentScope, =, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null]
[=, currentScope, ., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (]
[), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==]
[., parent, ), {, for, (, LinkedFlowSlot, currentSlot, =, currentScope, ., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, .]
[;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, )]
[., lastSlot, ;, currentSlot, !=, null, &&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=]
[;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }]
[&&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot]
[!=, null, &&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot]
[&&, (, currentScope, ., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot]
[;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }]
[), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;]
[||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result]
[==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if]
[., parent, ==, null, ||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, )]
[||, currentScope, ., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result]
[), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;]
[!=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =]
[., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {]
[., parent, ., lastSlot, !=, currentSlot, ), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null]
[), ;, currentSlot, =, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;]
[=, currentSlot, ., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }, else, if]
[), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }, else, if, (, !, currentSlot, .]
[., parent, ), {, if, (, result, ==, null, ), {, result, =, currentSlot, ;, }, else, if, (, !]
[), {, result, =, currentSlot, ;, }, else, if, (, !, currentSlot, ., getName, (, ), ., equals, (, result]
[==, null, ), {, result, =, currentSlot, ;, }, else, if, (, !, currentSlot, ., getName, (, ), ., equals]
[), {, result, =, currentSlot, ;, }, else, if, (, !, currentSlot, ., getName, (, ), ., equals, (, result]
[=, currentSlot, ;, }, else, if, (, !, currentSlot, ., getName, (, ), ., equals, (, result, ., getName, (]
[;, }, else, if, (, !, currentSlot, ., getName, (, ), ., equals, (, result, ., getName, (, ), )]
[), {, return, null, ;, }, }, }, return, result, ;, }, @, Override, public, void, completeScope, (, StaticScope, <]
[), {, return, null, ;, }, }, }, return, result, ;, }, @, Override, public, void, completeScope, (, StaticScope, <]
[., equals, (, result, ., getName, (, ), ), ), {, return, null, ;, }, }, }, return, result, ;]
[., getName, (, ), ., equals, (, result, ., getName, (, ), ), ), {, return, null, ;, }, }]
[), ), {, return, null, ;, }, }, }, return, result, ;, }, @, Override, public, void, completeScope, (, StaticScope]
[., getName, (, ), ), ), {, return, null, ;, }, }, }, return, result, ;, }, @, Override, public]
[;, }, }, }, return, result, ;, }, @, Override, public, void, completeScope, (, StaticScope, <, JSType, >, staticScope, )]
[;, }, @, Override, public, void, completeScope, (, StaticScope, <, JSType, >, staticScope, ), {, Scope, scope, =, (, Scope]
[;, for, (, Iterator, <, Var, >, it, =, scope, ., getVars, (, ), ;, it, ., hasNext, (, )]
[;, for, (, Iterator, <, Var, >, it, =, scope, ., getVars, (, ), ;, it, ., hasNext, (, )]
[;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (]
[;, ), {, Var, var, =, it, ., next, (, ), ;, if, (, var, ., isTypeInferred, (, ), )]
[., hasNext, (, ), ;, ), {, Var, var, =, it, ., next, (, ), ;, if, (, var, .]
[;, if, (, var, ., isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if]
[., next, (, ), ;, if, (, var, ., isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType]
[), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType]
[., isTypeInferred, (, ), ), {, JSType, type, =, var, ., getType, (, ), ;, if, (, type, ==, null]
[;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =, getSlot, (, var]
[., getType, (, ), ;, if, (, type, ==, null, ||, type, ., isUnknownType, (, ), ), {, JSType, flowType]
[), {, JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), ., getType, (, ), ;, var, .]
[||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), .]
[==, null, ||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =, getSlot, (, var, ., getName, (, )]
[||, type, ., isUnknownType, (, ), ), {, JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), .]
[), {, JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), ., getType, (, ), ;, var, .]
[., isUnknownType, (, ), ), {, JSType, flowType, =, getSlot, (, var, ., getName, (, ), ), ., getType, (]
[;, var, ., setType, (, flowType, ), ;, }, }, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {]
[., getType, (, ), ;, var, ., setType, (, flowType, ), ;, }, }, }, }, @, Override, public, LinkedFlowScope]
[), ., getType, (, ), ;, var, ., setType, (, flowType, ), ;, }, }, }, }, @, Override, public]
[., getName, (, ), ), ., getType, (, ), ;, var, ., setType, (, flowType, ), ;, }, }, }]
[;, }, }, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current, =]
[., setType, (, flowType, ), ;, }, }, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current]
[), ;, }, }, }, }, @, Override, public, LinkedFlowScope, optimize, (, ), {, LinkedFlowScope, current, ;, for, (, current]
[=, this, ;, current, ., parent, !=, null, &&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current]
[;, current, ., parent, !=, null, &&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =, current]
[;, current, =, current, ., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp]
[&&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =, current, ., parent, ), {, }, return]
[!=, null, &&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =, current, ., parent, ), {]
[., parent, !=, null, &&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =, current, ., parent]
[&&, current, ., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =, current, ., parent, ), {, }, return]
[;, current, =, current, ., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp]
[==, current, ., parent, ., lastSlot, ;, current, =, current, ., parent, ), {, }, return, current, ;, }, static]
[., lastSlot, ==, current, ., parent, ., lastSlot, ;, current, =, current, ., parent, ), {, }, return, current, ;]
[;, current, =, current, ., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp]
[., lastSlot, ;, current, =, current, ., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp]
[., parent, ., lastSlot, ;, current, =, current, ., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp]
[=, current, ., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp, <, FlowScope]
[), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp, <, FlowScope, >, {, @, SuppressWarnings]
[., parent, ), {, }, return, current, ;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp, <, FlowScope, >, {]
[;, }, static, class, FlowScopeJoinOp, extends, JoinOp, ., BinaryJoinOp, <, FlowScope, >, {, @, SuppressWarnings, (, "unchecked", ), @, Override]
[@, Override, public, FlowScope, apply, (, FlowScope, a, ,, FlowScope, b, ), {, LinkedFlowScope, linkedA, =, (, LinkedFlowScope, ), a]
[), @, Override, public, FlowScope, apply, (, FlowScope, a, ,, FlowScope, b, ), {, LinkedFlowScope, linkedA, =, (, LinkedFlowScope, )]
[;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true]
[;, LinkedFlowScope, linkedB, =, (, LinkedFlowScope, ), b, ;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true]
[;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (, linkedA, ., optimize, (, )]
[;, linkedA, ., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (, linkedA, ., optimize, (, )]
[=, true, ;, linkedB, ., frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==, linkedB, ., optimize]
[., frozen, =, true, ;, linkedB, ., frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==, linkedB]
[;, linkedB, ., frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==, linkedB, ., optimize, (, )]
[=, true, ;, if, (, linkedA, ., optimize, (, ), ==, linkedB, ., optimize, (, ), ), {, return, linkedA]
[., frozen, =, true, ;, if, (, linkedA, ., optimize, (, ), ==, linkedB, ., optimize, (, ), ), {]
[;, if, (, linkedA, ., optimize, (, ), ==, linkedB, ., optimize, (, ), ), {, return, linkedA, ., createChildFlowScope]
[), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (, linkedA, ,, linkedB]
[==, linkedB, ., optimize, (, ), ), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (]
[., optimize, (, ), ==, linkedB, ., optimize, (, ), ), {, return, linkedA, ., createChildFlowScope, (, ), ;, }]
[), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (, linkedA, ,, linkedB]
[., optimize, (, ), ), {, return, linkedA, ., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache]
[;, }, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (, linkedA, ,, linkedB, ), ), ;, }, }, @, Override, public]
[., createChildFlowScope, (, ), ;, }, return, new, LinkedFlowScope, (, new, FlatFlowScopeCache, (, linkedA, ,, linkedB, ), ), ;, }]
[;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, other, instanceof, LinkedFlowScope, ), {]
[), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, other, instanceof, LinkedFlowScope, )]
[,, linkedB, ), ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, other]
[), ), ;, }, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, other, instanceof, LinkedFlowScope]
[), {, LinkedFlowScope, that, =, (, LinkedFlowScope, ), other, ;, if, (, this, ., optimize, (, ), ==, that, .]
[instanceof, LinkedFlowScope, ), {, LinkedFlowScope, that, =, (, LinkedFlowScope, ), other, ;, if, (, this, ., optimize, (, ), ==]
[;, if, (, this, ., optimize, (, ), ==, that, ., optimize, (, ), ), {, return, true, ;, }]
[;, if, (, this, ., optimize, (, ), ==, that, ., optimize, (, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, if, (, this, ., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), )]
[==, that, ., optimize, (, ), ), {, return, true, ;, }, if, (, this, ., getFunctionScope, (, ), !=]
[., optimize, (, ), ==, that, ., optimize, (, ), ), {, return, true, ;, }, if, (, this, .]
[), {, return, true, ;, }, if, (, this, ., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), )]
[., optimize, (, ), ), {, return, true, ;, }, if, (, this, ., getFunctionScope, (, ), !=, that, .]
[;, }, if, (, this, ., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, cache, ==, that, ., cache, ), {, for, (, String, name, :]
[!=, that, ., getFunctionScope, (, ), ), {, return, false, ;, }, if, (, cache, ==, that, ., cache, )]
[., getFunctionScope, (, ), !=, that, ., getFunctionScope, (, ), ), {, return, false, ;, }, if, (, cache, ==]
[), {, return, false, ;, }, if, (, cache, ==, that, ., cache, ), {, for, (, String, name, :]
[., getFunctionScope, (, ), ), {, return, false, ;, }, if, (, cache, ==, that, ., cache, ), {, for]
[;, }, if, (, cache, ==, that, ., cache, ), {, for, (, String, name, :, cache, ., dirtySymbols, )]
[), {, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (, name, )]
[==, that, ., cache, ), {, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (]
[), {, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (, name, )]
[., cache, ), {, for, (, String, name, :, cache, ., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (]
[), {, if, (, diffSlots, (, getSlot, (, name, ), ,, that, ., getSlot, (, name, ), ), ), {]
[., dirtySymbols, ), {, if, (, diffSlots, (, getSlot, (, name, ), ,, that, ., getSlot, (, name, ), )]
[), {, return, false, ;, }, }, return, true, ;, }, Map, <, String, ,, StaticSlot, <, JSType, >, >]
[,, that, ., getSlot, (, name, ), ), ), {, return, false, ;, }, }, return, true, ;, }, Map]
[), ,, that, ., getSlot, (, name, ), ), ), {, return, false, ;, }, }, return, true, ;, }]
[), ), {, return, false, ;, }, }, return, true, ;, }, Map, <, String, ,, StaticSlot, <, JSType, >]
[., getSlot, (, name, ), ), ), {, return, false, ;, }, }, return, true, ;, }, Map, <, String]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, Map, <, String, ,, StaticSlot, <, JSType]
[;, }, }, return, true, ;, }, Map, <, String, ,, StaticSlot, <, JSType, >, >, myFlowSlots, =, allFlowSlots, (]
[;, }, Map, <, String, ,, StaticSlot, <, JSType, >, >, myFlowSlots, =, allFlowSlots, (, ), ;, Map, <, String]
[;, Map, <, String, ,, StaticSlot, <, JSType, >, >, otherFlowSlots, =, that, ., allFlowSlots, (, ), ;, for, (]
[;, for, (, StaticSlot, <, JSType, >, slot, :, myFlowSlots, ., values, (, ), ), {, if, (, diffSlots, (]
[., allFlowSlots, (, ), ;, for, (, StaticSlot, <, JSType, >, slot, :, myFlowSlots, ., values, (, ), ), {]
[), {, if, (, diffSlots, (, slot, ,, otherFlowSlots, ., get, (, slot, ., getName, (, ), ), ), )]
[., values, (, ), ), {, if, (, diffSlots, (, slot, ,, otherFlowSlots, ., get, (, slot, ., getName, (]
[), {, return, false, ;, }, otherFlowSlots, ., remove, (, slot, ., getName, (, ), ), ;, }, for, (]
[,, otherFlowSlots, ., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, otherFlowSlots, .]
[), ), {, return, false, ;, }, otherFlowSlots, ., remove, (, slot, ., getName, (, ), ), ;, }, for]
[., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, otherFlowSlots, ., remove, (]
[), ), ), {, return, false, ;, }, otherFlowSlots, ., remove, (, slot, ., getName, (, ), ), ;, }]
[., getName, (, ), ), ), ), {, return, false, ;, }, otherFlowSlots, ., remove, (, slot, ., getName, (]
[;, }, otherFlowSlots, ., remove, (, slot, ., getName, (, ), ), ;, }, for, (, StaticSlot, <, JSType, >]
[;, }, for, (, StaticSlot, <, JSType, >, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (, diffSlots]
[., remove, (, slot, ., getName, (, ), ), ;, }, for, (, StaticSlot, <, JSType, >, slot, :, otherFlowSlots]
[), ;, }, for, (, StaticSlot, <, JSType, >, slot, :, otherFlowSlots, ., values, (, ), ), {, if, (]
[., getName, (, ), ), ;, }, for, (, StaticSlot, <, JSType, >, slot, :, otherFlowSlots, ., values, (, )]
[), {, if, (, diffSlots, (, slot, ,, myFlowSlots, ., get, (, slot, ., getName, (, ), ), ), )]
[., values, (, ), ), {, if, (, diffSlots, (, slot, ,, myFlowSlots, ., get, (, slot, ., getName, (]
[), {, return, false, ;, }, }, return, true, ;, }, return, false, ;, }, private, boolean, diffSlots, (, StaticSlot]
[,, myFlowSlots, ., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, }, return]
[), ), {, return, false, ;, }, }, return, true, ;, }, return, false, ;, }, private, boolean, diffSlots, (]
[., get, (, slot, ., getName, (, ), ), ), ), {, return, false, ;, }, }, return, true, ;]
[), ), ), {, return, false, ;, }, }, return, true, ;, }, return, false, ;, }, private, boolean, diffSlots]
[., getName, (, ), ), ), ), {, return, false, ;, }, }, return, true, ;, }, return, false, ;]
[;, }, }, return, true, ;, }, return, false, ;, }, private, boolean, diffSlots, (, StaticSlot, <, JSType, >, slotA]
[;, }, return, false, ;, }, private, boolean, diffSlots, (, StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >]
[;, }, private, boolean, diffSlots, (, StaticSlot, <, JSType, >, slotA, ,, StaticSlot, <, JSType, >, slotB, ), {, boolean]
[;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&]
[||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (]
[==, null, ||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, .]
[||, slotA, ., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (]
[;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&]
[==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (]
[., getType, (, ), ==, null, ;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==]
[;, boolean, bIsNull, =, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&]
[;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {]
[||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }]
[==, null, ||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false]
[||, slotB, ., getType, (, ), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }]
[;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {]
[==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull]
[., getType, (, ), ==, null, ;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if]
[;, if, (, aIsNull, &&, bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {]
[), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return, slotA]
[&&, bIsNull, ), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }]
[), {, return, false, ;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return, slotA]
[;, }, else, if, (, aIsNull, ^, bIsNull, ), {, return, true, ;, }, return, slotA, ., getType, (, )]
[), {, return, true, ;, }, return, slotA, ., getType, (, ), ., differsFrom, (, slotB, ., getType, (, )]
[^, bIsNull, ), {, return, true, ;, }, return, slotA, ., getType, (, ), ., differsFrom, (, slotB, ., getType]
[), {, return, true, ;, }, return, slotA, ., getType, (, ), ., differsFrom, (, slotB, ., getType, (, )]
[;, }, return, slotA, ., getType, (, ), ., differsFrom, (, slotB, ., getType, (, ), ), ;, }, private]
[;, }, private, Map, <, String, ,, StaticSlot, <, JSType, >, >, allFlowSlots, (, ), {, Map, <, String, ,]
[., differsFrom, (, slotB, ., getType, (, ), ), ;, }, private, Map, <, String, ,, StaticSlot, <, JSType, >]
[., getType, (, ), ., differsFrom, (, slotB, ., getType, (, ), ), ;, }, private, Map, <, String, ,]
[), ;, }, private, Map, <, String, ,, StaticSlot, <, JSType, >, >, allFlowSlots, (, ), {, Map, <, String]
[., getType, (, ), ), ;, }, private, Map, <, String, ,, StaticSlot, <, JSType, >, >, allFlowSlots, (, )]
[;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if]
[., newHashMap, (, ), ;, for, (, LinkedFlowSlot, slot, =, lastSlot, ;, slot, !=, null, ;, slot, =, slot, .]
[;, slot, !=, null, ;, slot, =, slot, ., parent, ), {, if, (, !, slots, ., containsKey, (, slot]
[;, slot, =, slot, ., parent, ), {, if, (, !, slots, ., containsKey, (, slot, ., getName, (, )]
[!=, null, ;, slot, =, slot, ., parent, ), {, if, (, !, slots, ., containsKey, (, slot, ., getName]
[;, slot, =, slot, ., parent, ), {, if, (, !, slots, ., containsKey, (, slot, ., getName, (, )]
[=, slot, ., parent, ), {, if, (, !, slots, ., containsKey, (, slot, ., getName, (, ), ), )]
[), {, if, (, !, slots, ., containsKey, (, slot, ., getName, (, ), ), ), {, slots, ., put]
[., parent, ), {, if, (, !, slots, ., containsKey, (, slot, ., getName, (, ), ), ), {, slots]
[), {, slots, ., put, (, slot, ., getName, (, ), ,, slot, ), ;, }, }, for, (, Map]
[), {, slots, ., put, (, slot, ., getName, (, ), ,, slot, ), ;, }, }, for, (, Map]
[., containsKey, (, slot, ., getName, (, ), ), ), {, slots, ., put, (, slot, ., getName, (, )]
[), ), {, slots, ., put, (, slot, ., getName, (, ), ,, slot, ), ;, }, }, for, (]
[., getName, (, ), ), ), {, slots, ., put, (, slot, ., getName, (, ), ,, slot, ), ;]
[;, }, }, for, (, Map, ., Entry, <, String, ,, StaticSlot, <, JSType, >, >, symbolEntry, :, cache, .]
[., put, (, slot, ., getName, (, ), ,, slot, ), ;, }, }, for, (, Map, ., Entry, <]
[,, slot, ), ;, }, }, for, (, Map, ., Entry, <, String, ,, StaticSlot, <, JSType, >, >, symbolEntry]
[., getName, (, ), ,, slot, ), ;, }, }, for, (, Map, ., Entry, <, String, ,, StaticSlot, <]
[), ;, }, }, for, (, Map, ., Entry, <, String, ,, StaticSlot, <, JSType, >, >, symbolEntry, :, cache]
[), {, if, (, !, slots, ., containsKey, (, symbolEntry, ., getKey, (, ), ), ), {, slots, ., put]
[., entrySet, (, ), ), {, if, (, !, slots, ., containsKey, (, symbolEntry, ., getKey, (, ), ), )]
[., symbols, ., entrySet, (, ), ), {, if, (, !, slots, ., containsKey, (, symbolEntry, ., getKey, (, )]
[), {, slots, ., put, (, symbolEntry, ., getKey, (, ), ,, symbolEntry, ., getValue, (, ), ), ;, }]
[), {, slots, ., put, (, symbolEntry, ., getKey, (, ), ,, symbolEntry, ., getValue, (, ), ), ;, }]
[., containsKey, (, symbolEntry, ., getKey, (, ), ), ), {, slots, ., put, (, symbolEntry, ., getKey, (, )]
[), ), {, slots, ., put, (, symbolEntry, ., getKey, (, ), ,, symbolEntry, ., getValue, (, ), ), ;]
[., getKey, (, ), ), ), {, slots, ., put, (, symbolEntry, ., getKey, (, ), ,, symbolEntry, ., getValue]
[;, }, }, return, slots, ;, }, private, static, class, LinkedFlowSlot, extends, SimpleSlot, {, final, LinkedFlowSlot, parent, ;, LinkedFlowSlot, (]
[., put, (, symbolEntry, ., getKey, (, ), ,, symbolEntry, ., getValue, (, ), ), ;, }, }, return, slots]
[,, symbolEntry, ., getValue, (, ), ), ;, }, }, return, slots, ;, }, private, static, class, LinkedFlowSlot, extends, SimpleSlot]
[., getKey, (, ), ,, symbolEntry, ., getValue, (, ), ), ;, }, }, return, slots, ;, }, private, static]
[), ;, }, }, return, slots, ;, }, private, static, class, LinkedFlowSlot, extends, SimpleSlot, {, final, LinkedFlowSlot, parent, ;, LinkedFlowSlot]
[., getValue, (, ), ), ;, }, }, return, slots, ;, }, private, static, class, LinkedFlowSlot, extends, SimpleSlot, {, final]
[;, }, private, static, class, LinkedFlowSlot, extends, SimpleSlot, {, final, LinkedFlowSlot, parent, ;, LinkedFlowSlot, (, String, name, ,, JSType, type]
[,, type, ,, true, ), ;, this, ., parent, =, parent, ;, }, }, private, static, class, FlatFlowScopeCache, {, private]
[,, true, ), ;, this, ., parent, =, parent, ;, }, }, private, static, class, FlatFlowScopeCache, {, private, final, Scope]
[), ;, this, ., parent, =, parent, ;, }, }, private, static, class, FlatFlowScopeCache, {, private, final, Scope, functionScope, ;]
[=, parent, ;, }, }, private, static, class, FlatFlowScopeCache, {, private, final, Scope, functionScope, ;, private, final, LinkedFlowScope, linkedEquivalent, ;]
[., parent, =, parent, ;, }, }, private, static, class, FlatFlowScopeCache, {, private, final, Scope, functionScope, ;, private, final, LinkedFlowScope]
[;, }, }, private, static, class, FlatFlowScopeCache, {, private, final, Scope, functionScope, ;, private, final, LinkedFlowScope, linkedEquivalent, ;, private, Map]
[;, final, Set, <, String, >, dirtySymbols, =, Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {]
[., newHashMap, (, ), ;, final, Set, <, String, >, dirtySymbols, =, Sets, ., newHashSet, (, ), ;, FlatFlowScopeCache, (]
[;, FlatFlowScopeCache, (, Scope, functionScope, ), {, this, ., functionScope, =, functionScope, ;, symbols, =, ImmutableMap, ., of, (, )]
[., newHashSet, (, ), ;, FlatFlowScopeCache, (, Scope, functionScope, ), {, this, ., functionScope, =, functionScope, ;, symbols, =, ImmutableMap]
[=, functionScope, ;, symbols, =, ImmutableMap, ., of, (, ), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent]
[., functionScope, =, functionScope, ;, symbols, =, ImmutableMap, ., of, (, ), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (]
[;, symbols, =, ImmutableMap, ., of, (, ), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {]
[=, ImmutableMap, ., of, (, ), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache]
[;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope]
[., of, (, ), ;, linkedEquivalent, =, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent]
[=, null, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope, =, cache]
[;, }, FlatFlowScopeCache, (, LinkedFlowScope, directParent, ), {, FlatFlowScopeCache, cache, =, directParent, ., cache, ;, functionScope, =, cache, ., functionScope]
[;, functionScope, =, cache, ., functionScope, ;, symbols, =, directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }]
[., cache, ;, functionScope, =, cache, ., functionScope, ;, symbols, =, directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent]
[=, cache, ., functionScope, ;, symbols, =, directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (]
[;, symbols, =, directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope]
[., functionScope, ;, symbols, =, directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA]
[=, directParent, ., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, )]
[;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope]
[., allFlowSlots, (, ), ;, linkedEquivalent, =, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent]
[=, directParent, ;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope, =, joinedScopeA]
[;, }, FlatFlowScopeCache, (, LinkedFlowScope, joinedScopeA, ,, LinkedFlowScope, joinedScopeB, ), {, linkedEquivalent, =, null, ;, functionScope, =, joinedScopeA, ., flowsFromBottom]
[=, null, ;, functionScope, =, joinedScopeA, ., flowsFromBottom, (, ), ?, joinedScopeB, ., getFunctionScope, (, ), :, joinedScopeA, ., getFunctionScope]
[;, functionScope, =, joinedScopeA, ., flowsFromBottom, (, ), ?, joinedScopeB, ., getFunctionScope, (, ), :, joinedScopeA, ., getFunctionScope, (, )]
[=, joinedScopeA, ., flowsFromBottom, (, ), ?, joinedScopeB, ., getFunctionScope, (, ), :, joinedScopeA, ., getFunctionScope, (, ), ;, Map]
[;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsA, =, joinedScopeA, ., allFlowSlots, (, ), ;, Map, <]
[?, joinedScopeB, ., getFunctionScope, (, ), :, joinedScopeA, ., getFunctionScope, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType]
[., flowsFromBottom, (, ), ?, joinedScopeB, ., getFunctionScope, (, ), :, joinedScopeA, ., getFunctionScope, (, ), ;, Map, <, String]
[:, joinedScopeA, ., getFunctionScope, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsA, =, joinedScopeA, .]
[., getFunctionScope, (, ), :, joinedScopeA, ., getFunctionScope, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >]
[;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsA, =, joinedScopeA, ., allFlowSlots, (, ), ;, Map, <]
[., getFunctionScope, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsA, =, joinedScopeA, ., allFlowSlots, (]
[;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsB, =, joinedScopeB, ., allFlowSlots, (, ), ;, symbols, =]
[., allFlowSlots, (, ), ;, Map, <, String, ,, StaticSlot, <, JSType, >, >, slotsB, =, joinedScopeB, ., allFlowSlots, (]
[;, symbols, =, slotsA, ;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols, ., keySet, (, )]
[., allFlowSlots, (, ), ;, symbols, =, slotsA, ;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols]
[=, slotsA, ;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols, ., keySet, (, ), ), ;]
[;, Set, <, String, >, symbolNames, =, Sets, ., newHashSet, (, symbols, ., keySet, (, ), ), ;, symbolNames, .]
[;, symbolNames, ., addAll, (, slotsB, ., keySet, (, ), ), ;, for, (, String, name, :, symbolNames, ), {]
[., newHashSet, (, symbols, ., keySet, (, ), ), ;, symbolNames, ., addAll, (, slotsB, ., keySet, (, ), )]
[), ;, symbolNames, ., addAll, (, slotsB, ., keySet, (, ), ), ;, for, (, String, name, :, symbolNames, )]
[., keySet, (, ), ), ;, symbolNames, ., addAll, (, slotsB, ., keySet, (, ), ), ;, for, (, String]
[;, for, (, String, name, :, symbolNames, ), {, StaticSlot, <, JSType, >, slotA, =, slotsA, ., get, (, name]
[., addAll, (, slotsB, ., keySet, (, ), ), ;, for, (, String, name, :, symbolNames, ), {, StaticSlot, <]
[), ;, for, (, String, name, :, symbolNames, ), {, StaticSlot, <, JSType, >, slotA, =, slotsA, ., get, (]
[., keySet, (, ), ), ;, for, (, String, name, :, symbolNames, ), {, StaticSlot, <, JSType, >, slotA, =]
[), {, StaticSlot, <, JSType, >, slotA, =, slotsA, ., get, (, name, ), ;, StaticSlot, <, JSType, >, slotB]
[;, StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;, if]
[., get, (, name, ), ;, StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType]
[), ;, StaticSlot, <, JSType, >, slotB, =, slotsB, ., get, (, name, ), ;, JSType, joinedType, =, null, ;]
[;, JSType, joinedType, =, null, ;, if, (, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, )]
[., get, (, name, ), ;, JSType, joinedType, =, null, ;, if, (, slotB, ==, null, ||, slotB, ., getType]
[), ;, JSType, joinedType, =, null, ;, if, (, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null]
[;, if, (, slotB, ==, null, ||, slotB, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >]
[), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType]
[||, slotB, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (]
[==, null, ||, slotB, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, .]
[||, slotB, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (]
[), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType]
[==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, )]
[., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), .]
[), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeB, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType]
[;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==]
[., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, )]
[., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot]
[), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType]
[;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype]
[?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType]
[==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else]
[?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType]
[:, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =, slotA]
[;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype]
[., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, }, else, {, joinedType, =, slotA, ., getType]
[), {, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }]
[==, null, ), {, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;]
[), {, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }]
[=, slotA, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==, null]
[;, }, }, else, if, (, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ), {, StaticSlot]
[., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==, null, ||, slotA, ., getType, (, )]
[., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, if, (, slotA, ==, null, ||, slotA]
[), ;, }, }, else, if, (, slotA, ==, null, ||, slotA, ., getType, (, ), ==, null, ), {]
[), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType]
[||, slotA, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (]
[==, null, ||, slotA, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, .]
[||, slotA, ., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (]
[), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType]
[==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, )]
[., getType, (, ), ==, null, ), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), .]
[), {, StaticSlot, <, JSType, >, fnSlot, =, joinedScopeA, ., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType]
[;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==]
[., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, )]
[., getFunctionScope, (, ), ., getSlot, (, name, ), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot]
[), ;, JSType, fnSlotType, =, fnSlot, ==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType]
[;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {]
[?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (]
[==, null, ?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, symbols, .]
[?, null, :, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (]
[:, fnSlot, ., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,]
[;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {]
[., getType, (, ), ;, if, (, fnSlotType, ==, null, ), {, symbols, ., put, (, name, ,, slotB, )]
[), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =, slotB, ., getType, (]
[==, null, ), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =, slotB, .]
[), {, symbols, ., put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =, slotB, ., getType, (]
[;, }, else, {, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else]
[., put, (, name, ,, slotB, ), ;, }, else, {, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype]
[,, slotB, ), ;, }, else, {, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;]
[), ;, }, else, {, joinedType, =, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }]
[=, slotB, ., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =, slotA, .]
[;, }, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, slotB, ., getType, (, )]
[., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (]
[., getType, (, ), ., getLeastSupertype, (, fnSlotType, ), ;, }, }, else, {, joinedType, =, slotA, ., getType, (]
[), ;, }, }, else, {, joinedType, =, slotA, ., getType, (, ), ., getLeastSupertype, (, slotB, ., getType, (]
[=, slotA, ., getType, (, ), ., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (, joinedType]
[;, }, if, (, joinedType, !=, null, ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,]
[., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (, joinedType, !=, null, ), {, symbols, .]
[., getType, (, ), ., getLeastSupertype, (, slotB, ., getType, (, ), ), ;, }, if, (, joinedType, !=, null]
[), ;, }, if, (, joinedType, !=, null, ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name]
[., getType, (, ), ), ;, }, if, (, joinedType, !=, null, ), {, symbols, ., put, (, name, ,]
[), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, joinedType, ,, true, ), ), ;, }]
[!=, null, ), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, joinedType, ,, true, ), )]
[), {, symbols, ., put, (, name, ,, new, SimpleSlot, (, name, ,, joinedType, ,, true, ), ), ;, }]
[;, }, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (, symbols, ., containsKey]
[., put, (, name, ,, new, SimpleSlot, (, name, ,, joinedType, ,, true, ), ), ;, }, }, }, public]
[,, new, SimpleSlot, (, name, ,, joinedType, ,, true, ), ), ;, }, }, }, public, StaticSlot, <, JSType, >]
[), ;, }, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (, symbols, .]
[,, joinedType, ,, true, ), ), ;, }, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, )]
[,, true, ), ), ;, }, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if]
[), ), ;, }, }, }, public, StaticSlot, <, JSType, >, getSlot, (, String, name, ), {, if, (, symbols]
[), {, return, symbols, ., get, (, name, ), ;, }, else, {, return, functionScope, ., getSlot, (, name, )]
[., containsKey, (, name, ), ), {, return, symbols, ., get, (, name, ), ;, }, else, {, return, functionScope]
[), ), {, return, symbols, ., get, (, name, ), ;, }, else, {, return, functionScope, ., getSlot, (, name]
[;, }, else, {, return, functionScope, ., getSlot, (, name, ), ;, }, }, }, }]
[., get, (, name, ), ;, }, else, {, return, functionScope, ., getSlot, (, name, ), ;, }, }, }]
[), ;, }, else, {, return, functionScope, ., getSlot, (, name, ), ;, }, }, }, }]
[;, }, }, }, }]
[., getSlot, (, name, ), ;, }, }, }, }]
[), ;, }, }, }, }]
