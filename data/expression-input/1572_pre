[import, java, ., io, ., Serializable, ;, public, strictfp, class, Range, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[java, ., io, ., Serializable, ;, public, strictfp, class, Range, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[private, double, lower, ;, private, double, upper, ;, public, Range, (, double, lower, ,, double, upper, ), {, if, (]
[private, double, lower, ;, private, double, upper, ;, public, Range, (, double, lower, ,, double, upper, ), {, if, (]
[lower, ;, private, double, upper, ;, public, Range, (, double, lower, ,, double, upper, ), {, if, (, lower, >]
[public, Range, (, double, lower, ,, double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =]
[public, Range, (, double, lower, ,, double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =]
[public, Range, (, double, lower, ,, double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =]
[public, Range, (, double, lower, ,, double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =]
[public, Range, (, double, lower, ,, double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =]
[(, double, lower, ,, double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =, "Range(double, double): require lower (", +]
[lower, ,, double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =, "Range(double, double): require lower (", +, lower, +]
[double, upper, ), {, if, (, lower, >, upper, ), {, String, msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +]
[), {, if, (, lower, >, upper, ), {, String, msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +]
[(, lower, >, upper, ), {, String, msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +, ").", ;, throw]
[upper, ), {, String, msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (]
[msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }]
[msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }]
[lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =]
[") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;]
[") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;]
[").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =]
[this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, getLowerBound, (, ), {, return]
[this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, getLowerBound, (, ), {, return]
[}, public, double, getLowerBound, (, ), {, return, this, ., lower, ;, }, public, double, getUpperBound, (, ), {, return]
[}, public, double, getLowerBound, (, ), {, return, this, ., lower, ;, }, public, double, getUpperBound, (, ), {, return]
[}, public, double, getUpperBound, (, ), {, return, this, ., upper, ;, }, public, double, getLength, (, ), {, return]
[}, public, double, getUpperBound, (, ), {, return, this, ., upper, ;, }, public, double, getLength, (, ), {, return]
[}, public, double, getUpperBound, (, ), {, return, this, ., upper, ;, }, public, double, getLength, (, ), {, return]
[(, ), {, return, this, ., upper, ;, }, public, double, getLength, (, ), {, return, this, ., upper, -]
[(, ), {, return, this, ., upper, ;, }, public, double, getLength, (, ), {, return, this, ., upper, -]
[(, ), {, return, this, ., upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return]
[(, ), {, return, this, ., upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return]
[(, ), {, return, this, ., upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return]
[(, ), {, return, this, ., upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return]
[this, ., upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /]
[upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +]
[upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +]
[upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +]
[lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +, this, ., upper, /]
[lower, /, 2.0, +, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return]
[/, 2.0, +, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (]
[/, 2.0, +, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (]
[/, 2.0, +, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (]
[+, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=]
[+, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=]
[/, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&]
[/, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&]
[;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&, value, <=]
[;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&, value, <=]
[<=, this, ., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (]
[<=, this, ., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (]
[., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=]
[., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=]
[boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=, this, ., lower, ), {, return]
[intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=, this, ., lower, ), {, return, (]
[intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=, this, ., lower, ), {, return, (]
[double, b0, ,, double, b1, ), {, if, (, b0, <=, this, ., lower, ), {, return, (, b1, >]
[double, b0, ,, double, b1, ), {, if, (, b0, <=, this, ., lower, ), {, return, (, b1, >]
[b0, <=, this, ., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return]
[<=, this, ., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (]
[<=, this, ., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (]
[<=, this, ., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (]
[., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <]
[., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <]
[return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <, this, ., upper, &&]
[return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <, this, ., upper, &&]
[b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <, this, ., upper, &&, b1, >=]
[this, ., upper, &&, b1, >=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return]
[upper, &&, b1, >=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (]
[upper, &&, b1, >=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (]
[;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range, ., getLowerBound, (, ), ,]
[;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range, ., getLowerBound, (, ), ,]
[,, range, ., getUpperBound, (, ), ), ;, }, public, double, constrain, (, double, value, ), {, double, result, =]
[(, ), ), ;, }, public, double, constrain, (, double, value, ), {, double, result, =, value, ;, if, (]
[), ), ;, }, public, double, constrain, (, double, value, ), {, double, result, =, value, ;, if, (, !]
[;, }, public, double, constrain, (, double, value, ), {, double, result, =, value, ;, if, (, !, contains, (]
[double, value, ), {, double, result, =, value, ;, if, (, !, contains, (, value, ), ), {, if, (]
[double, value, ), {, double, result, =, value, ;, if, (, !, contains, (, value, ), ), {, if, (]
[), {, double, result, =, value, ;, if, (, !, contains, (, value, ), ), {, if, (, value, >]
[), {, double, result, =, value, ;, if, (, !, contains, (, value, ), ), {, if, (, value, >]
[value, ;, if, (, !, contains, (, value, ), ), {, if, (, value, >, this, ., upper, ), {]
[if, (, !, contains, (, value, ), ), {, if, (, value, >, this, ., upper, ), {, result, =]
[if, (, !, contains, (, value, ), ), {, if, (, value, >, this, ., upper, ), {, result, =]
[{, if, (, value, >, this, ., upper, ), {, result, =, this, ., upper, ;, }, else, if, (]
[{, if, (, value, >, this, ., upper, ), {, result, =, this, ., upper, ;, }, else, if, (]
[(, value, >, this, ., upper, ), {, result, =, this, ., upper, ;, }, else, if, (, value, <]
[(, value, >, this, ., upper, ), {, result, =, this, ., upper, ;, }, else, if, (, value, <]
[upper, ), {, result, =, this, ., upper, ;, }, else, if, (, value, <, this, ., lower, ), {]
[{, result, =, this, ., upper, ;, }, else, if, (, value, <, this, ., lower, ), {, result, =]
[{, result, =, this, ., upper, ;, }, else, if, (, value, <, this, ., lower, ), {, result, =]
[}, else, if, (, value, <, this, ., lower, ), {, result, =, this, ., lower, ;, }, }, return]
[}, }, return, result, ;, }, public, static, Range, combine, (, Range, range1, ,, Range, range2, ), {, if, (]
[}, }, return, result, ;, }, public, static, Range, combine, (, Range, range1, ,, Range, range2, ), {, if, (]
[return, result, ;, }, public, static, Range, combine, (, Range, range1, ,, Range, range2, ), {, if, (, range1, ==]
[public, static, Range, combine, (, Range, range1, ,, Range, range2, ), {, if, (, range1, ==, null, ), {, return]
[,, Range, range2, ), {, if, (, range1, ==, null, ), {, return, range2, ;, }, else, {, if, (]
[,, Range, range2, ), {, if, (, range1, ==, null, ), {, return, range2, ;, }, else, {, if, (]
[range2, ), {, if, (, range1, ==, null, ), {, return, range2, ;, }, else, {, if, (, range2, ==]
[(, range1, ==, null, ), {, return, range2, ;, }, else, {, if, (, range2, ==, null, ), {, return]
[;, }, else, {, if, (, range2, ==, null, ), {, return, range1, ;, }, else, {, double, l, =]
[;, }, else, {, if, (, range2, ==, null, ), {, return, range1, ;, }, else, {, double, l, =]
[if, (, range2, ==, null, ), {, return, range1, ;, }, else, {, double, l, =, Math, ., min, (]
[if, (, range2, ==, null, ), {, return, range1, ;, }, else, {, double, l, =, Math, ., min, (]
[{, return, range1, ;, }, else, {, double, l, =, Math, ., min, (, range1, ., getLowerBound, (, ), ,]
[{, return, range1, ;, }, else, {, double, l, =, Math, ., min, (, range1, ., getLowerBound, (, ), ,]
[Math, ., min, (, range1, ., getLowerBound, (, ), ,, range2, ., getLowerBound, (, ), ), ;, double, u, =]
[Math, ., min, (, range1, ., getLowerBound, (, ), ,, range2, ., getLowerBound, (, ), ), ;, double, u, =]
[range1, ., getLowerBound, (, ), ,, range2, ., getLowerBound, (, ), ), ;, double, u, =, Math, ., max, (]
[range1, ., getLowerBound, (, ), ,, range2, ., getLowerBound, (, ), ), ;, double, u, =, Math, ., max, (]
[range2, ., getLowerBound, (, ), ), ;, double, u, =, Math, ., max, (, range1, ., getUpperBound, (, ), ,]
[range2, ., getLowerBound, (, ), ), ;, double, u, =, Math, ., max, (, range1, ., getUpperBound, (, ), ,]
[u, =, Math, ., max, (, range1, ., getUpperBound, (, ), ,, range2, ., getUpperBound, (, ), ), ;, return]
[., max, (, range1, ., getUpperBound, (, ), ,, range2, ., getUpperBound, (, ), ), ;, return, new, Range, (]
[(, range1, ., getUpperBound, (, ), ,, range2, ., getUpperBound, (, ), ), ;, return, new, Range, (, l, ,]
[u, ), ;, }, }, }, public, static, Range, expandToInclude, (, Range, range, ,, double, value, ), {, if, (]
[u, ), ;, }, }, }, public, static, Range, expandToInclude, (, Range, range, ,, double, value, ), {, if, (]
[;, }, }, }, public, static, Range, expandToInclude, (, Range, range, ,, double, value, ), {, if, (, range, ==]
[public, static, Range, expandToInclude, (, Range, range, ,, double, value, ), {, if, (, range, ==, null, ), {, return]
[expandToInclude, (, Range, range, ,, double, value, ), {, if, (, range, ==, null, ), {, return, new, Range, (]
[Range, range, ,, double, value, ), {, if, (, range, ==, null, ), {, return, new, Range, (, value, ,]
[{, if, (, range, ==, null, ), {, return, new, Range, (, value, ,, value, ), ;, }, if, (]
[{, if, (, range, ==, null, ), {, return, new, Range, (, value, ,, value, ), ;, }, if, (]
[(, range, ==, null, ), {, return, new, Range, (, value, ,, value, ), ;, }, if, (, value, <]
[(, range, ==, null, ), {, return, new, Range, (, value, ,, value, ), ;, }, if, (, value, <]
[Range, (, value, ,, value, ), ;, }, if, (, value, <, range, ., getLowerBound, (, ), ), {, return]
[,, value, ), ;, }, if, (, value, <, range, ., getLowerBound, (, ), ), {, return, new, Range, (]
[), ;, }, if, (, value, <, range, ., getLowerBound, (, ), ), {, return, new, Range, (, value, ,]
[), ;, }, if, (, value, <, range, ., getLowerBound, (, ), ), {, return, new, Range, (, value, ,]
[), ), {, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), ), ;, }, else, if, (]
[), ), {, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), ), ;, }, else, if, (]
[{, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), ), ;, }, else, if, (, value, >]
[{, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), ), ;, }, else, if, (, value, >]
[., getUpperBound, (, ), ), ;, }, else, if, (, value, >, range, ., getUpperBound, (, ), ), {, return]
[), ), ;, }, else, if, (, value, >, range, ., getUpperBound, (, ), ), {, return, new, Range, (]
[), ), ;, }, else, if, (, value, >, range, ., getUpperBound, (, ), ), {, return, new, Range, (]
[(, value, >, range, ., getUpperBound, (, ), ), {, return, new, Range, (, range, ., getLowerBound, (, ), ,]
[), ), {, return, new, Range, (, range, ., getLowerBound, (, ), ,, value, ), ;, }, else, {, return]
[;, }, }, public, static, Range, expand, (, Range, range, ,, double, lowerMargin, ,, double, upperMargin, ), {, if, (]
[;, }, }, public, static, Range, expand, (, Range, range, ,, double, lowerMargin, ,, double, upperMargin, ), {, if, (]
[}, public, static, Range, expand, (, Range, range, ,, double, lowerMargin, ,, double, upperMargin, ), {, if, (, range, ==]
[expand, (, Range, range, ,, double, lowerMargin, ,, double, upperMargin, ), {, if, (, range, ==, null, ), {, throw]
[range, ,, double, lowerMargin, ,, double, upperMargin, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =]
[), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =, range, ., getLength, (, ), ;, double, lower, =]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =, range, ., getLength, (, ), ;, double, lower, =]
[throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =, range, ., getLength, (, ), ;, double, lower, =]
[;, }, double, length, =, range, ., getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -]
[;, }, double, length, =, range, ., getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -]
[double, length, =, range, ., getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -, length, *]
[getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =]
[getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =]
[getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =]
[=, range, ., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +]
[=, range, ., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +]
[., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +, length, *]
[-, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (]
[-, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (]
[*, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >]
[double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {]
[=, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =]
[=, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =]
[=, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =]
[., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /]
[(, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +]
[(, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +]
[+, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /]
[*, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;]
[;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =]
[>, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return]
[{, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range, (]
[=, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range, (, lower, ,]
[(, lower, ,, upper, ), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ), {, return]
[,, upper, ), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ), {, return, shift, (]
[), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ), {, return, shift, (, base, ,]
[}, public, static, Range, shift, (, Range, base, ,, double, delta, ), {, return, shift, (, base, ,, delta, ,]
[), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {, if, (]
[), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {, if, (]
[}, public, static, Range, shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {, if, (, base, ==]
[shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {, if, (, base, ==, null, ), {, throw]
[base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (]
[allowZeroCrossing, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (]
[(, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (]
[(, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base, ., getLowerBound, (, ), +]
[), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base, ., getLowerBound, (, ), +, delta, ,]
[), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base, ., getLowerBound, (, ), +, delta, ,]
[), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base, ., getLowerBound, (, ), +, delta, ,]
[), {, return, new, Range, (, base, ., getLowerBound, (, ), +, delta, ,, base, ., getUpperBound, (, ), +]
[., getLowerBound, (, ), +, delta, ,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return]
[), +, delta, ,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return, new, Range, (]
[delta, ,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (]
[delta, ,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (]
[), +, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,]
[), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta, ), ,]
[}, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta, ), ,, shiftWithNoZeroCrossing, (]
[}, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta, ), ,, shiftWithNoZeroCrossing, (]
[(, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta, ), ,, shiftWithNoZeroCrossing, (, base, ., getUpperBound, (, ), ,]
[delta, ), ), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (]
[delta, ), ), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (]
[), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (, value, >]
[private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (, value, >, 0.0, ), {, return]
[private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (, value, >, 0.0, ), {, return]
[(, double, value, ,, double, delta, ), {, if, (, value, >, 0.0, ), {, return, Math, ., max, (]
[(, double, value, ,, double, delta, ), {, if, (, value, >, 0.0, ), {, return, Math, ., max, (]
[value, ,, double, delta, ), {, if, (, value, >, 0.0, ), {, return, Math, ., max, (, value, +]
[double, delta, ), {, if, (, value, >, 0.0, ), {, return, Math, ., max, (, value, +, delta, ,]
[>, 0.0, ), {, return, Math, ., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (]
[>, 0.0, ), {, return, Math, ., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (]
[), {, return, Math, ., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (, value, <]
[., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return]
[., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return]
[+, delta, ,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (]
[+, delta, ,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (]
[,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (, value, +]
[), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (, value, +, delta, ,]
[<, 0.0, ), {, return, Math, ., min, (, value, +, delta, ,, 0.0, ), ;, }, else, {, return]
[<, 0.0, ), {, return, Math, ., min, (, value, +, delta, ,, 0.0, ), ;, }, else, {, return]
[), {, return, Math, ., min, (, value, +, delta, ,, 0.0, ), ;, }, else, {, return, value, +]
[value, +, delta, ;, }, }, public, static, Range, scale, (, Range, base, ,, double, factor, ), {, if, (]
[value, +, delta, ;, }, }, public, static, Range, scale, (, Range, base, ,, double, factor, ), {, if, (]
[delta, ;, }, }, public, static, Range, scale, (, Range, base, ,, double, factor, ), {, if, (, base, ==]
[public, static, Range, scale, (, Range, base, ,, double, factor, ), {, if, (, base, ==, null, ), {, throw]
[scale, (, Range, base, ,, double, factor, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (]
[factor, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (]
[factor, ), {, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (]
[{, if, (, base, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, factor, <]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, factor, <, 0, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException, (]
["Null 'base' argument.", ), ;, }, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return]
[}, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (]
[}, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (]
[}, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (]
[), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (, base, ., getLowerBound, (, ), *]
[throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (, base, ., getLowerBound, (, ), *, factor, ,]
[throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (, base, ., getLowerBound, (, ), *, factor, ,]
[throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (, base, ., getLowerBound, (, ), *, factor, ,]
[;, }, return, new, Range, (, base, ., getLowerBound, (, ), *, factor, ,, base, ., getUpperBound, (, ), *]
[base, ., getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !]
[getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (]
[getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (]
[}, public, boolean, equals, (, Object, obj, ), {, if, (, !, (, obj, instanceof, Range, ), ), {, return]
[obj, ), {, if, (, !, (, obj, instanceof, Range, ), ), {, return, false, ;, }, Range, range, =]
[if, (, !, (, obj, instanceof, Range, ), ), {, return, false, ;, }, Range, range, =, (, Range, )]
[obj, instanceof, Range, ), ), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (]
[instanceof, Range, ), ), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !]
[Range, ), ), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (]
[Range, ), ), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (]
[Range, ), ), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (]
[return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (, this, ., lower, ==]
[return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (, this, ., lower, ==]
[(, Range, ), obj, ;, if, (, !, (, this, ., lower, ==, range, ., lower, ), ), {, return]
[if, (, !, (, this, ., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (]
[(, !, (, this, ., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (, !]
[!, (, this, ., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (, !, (]
[!, (, this, ., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (, !, (]
[!, (, this, ., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (, !, (]
[lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (, !, (, this, ., upper, ==]
[lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (, !, (, this, ., upper, ==]
[{, return, false, ;, }, if, (, !, (, this, ., upper, ==, range, ., upper, ), ), {, return]
[}, if, (, !, (, this, ., upper, ==, range, ., upper, ), ), {, return, false, ;, }, return]
[return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, temp, =]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, temp, =]
[;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (]
[;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (]
[(, ), {, int, result, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;]
[{, int, result, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =]
[;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, )]
[long, temp, ;, temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (]
[long, temp, ;, temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (]
[;, temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (, temp, ^]
[temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (, temp, ^, (]
[temp, =, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (, temp, ^, (]
[doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (, temp, ^, (, temp, >, >, >]
[lower, ), ;, result, =, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, result, =, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[;, result, =, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (]
[int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (]
[(, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =]
[>, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *]
[), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +]
[temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, )]
[=, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, ), (]
[=, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, ), (]
[., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, ), (, temp, ^]
[doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (]
[upper, ), ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >]
[29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return]
[(, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (]
[temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (]
[temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (]
[temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (]
[temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (]
[>, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +]
[>, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +]
[), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +]
[return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +, ",", +]
[return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +, ",", +]
[public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +, ",", +, this, ., upper, +]
