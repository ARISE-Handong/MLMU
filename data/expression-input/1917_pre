[joda, ., time, ., field, ., UnsupportedDurationField, ;, final, class, BasicSingleEraDateTimeField, extends, BaseDateTimeField, {, private, static, final, int, ERA_VALUE, =]
[joda, ., time, ., field, ., UnsupportedDurationField, ;, final, class, BasicSingleEraDateTimeField, extends, BaseDateTimeField, {, private, static, final, int, ERA_VALUE, =]
[int, ERA_VALUE, =, DateTimeConstants, ., CE, ;, private, final, String, iEraText, ;, BasicSingleEraDateTimeField, (, String, text, ), {, super, (]
[int, ERA_VALUE, =, DateTimeConstants, ., CE, ;, private, final, String, iEraText, ;, BasicSingleEraDateTimeField, (, String, text, ), {, super, (]
[private, final, String, iEraText, ;, BasicSingleEraDateTimeField, (, String, text, ), {, super, (, DateTimeFieldType, ., era, (, ), ), ;]
[String, iEraText, ;, BasicSingleEraDateTimeField, (, String, text, ), {, super, (, DateTimeFieldType, ., era, (, ), ), ;, iEraText, =]
[(, DateTimeFieldType, ., era, (, ), ), ;, iEraText, =, text, ;, }, public, boolean, isLenient, (, ), {, return]
[}, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {, return]
[(, long, instant, ), {, return, ERA_VALUE, ;, }, public, long, set, (, long, instant, ,, int, era, ), {]
[(, long, instant, ), {, return, ERA_VALUE, ;, }, public, long, set, (, long, instant, ,, int, era, ), {]
[{, return, ERA_VALUE, ;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (]
[ERA_VALUE, ;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era, ,]
[long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era, ,, ERA_VALUE, ,]
[instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era, ,, ERA_VALUE, ,, ERA_VALUE, ), ;, return]
[return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (]
[return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (]
[return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (]
[return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (]
[public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (, iEraText, ., equals, (]
[(, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (, iEraText, ., equals, (, text, ), ==]
[instant, ,, String, text, ,, Locale, locale, ), {, if, (, iEraText, ., equals, (, text, ), ==, false, &&]
[instant, ,, String, text, ,, Locale, locale, ), {, if, (, iEraText, ., equals, (, text, ), ==, false, &&]
[instant, ,, String, text, ,, Locale, locale, ), {, if, (, iEraText, ., equals, (, text, ), ==, false, &&]
[,, Locale, locale, ), {, if, (, iEraText, ., equals, (, text, ), ==, false, &&, "1", ., equals, (]
[), {, if, (, iEraText, ., equals, (, text, ), ==, false, &&, "1", ., equals, (, text, ), ==]
[iEraText, ., equals, (, text, ), ==, false, &&, "1", ., equals, (, text, ), ==, false, ), {, throw]
[(, text, ), ==, false, &&, "1", ., equals, (, text, ), ==, false, ), {, throw, new, IllegalFieldValueException, (]
[(, text, ), ==, false, &&, "1", ., equals, (, text, ), ==, false, ), {, throw, new, IllegalFieldValueException, (]
["1", ., equals, (, text, ), ==, false, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., era, (, ), ,]
[), ==, false, ), {, throw, new, IllegalFieldValueException, (, DateTimeFieldType, ., era, (, ), ,, text, ), ;, }, return]
[(, ), ,, text, ), ;, }, return, instant, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[(, ), ,, text, ), ;, }, return, instant, ;, }, public, long, roundFloor, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, long, roundCeiling, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MAX_VALUE, ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MAX_VALUE, ;, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[(, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, long, roundHalfEven, (, long, instant, ), {, return]
[long, roundHalfEven, (, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, DurationField, getDurationField, (, ), {, return]
[long, roundHalfEven, (, long, instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, DurationField, getDurationField, (, ), {, return]
[instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, DurationField, getDurationField, (, ), {, return, UnsupportedDurationField, ., getInstance, (]
[instant, ), {, return, Long, ., MIN_VALUE, ;, }, public, DurationField, getDurationField, (, ), {, return, UnsupportedDurationField, ., getInstance, (]
[return, UnsupportedDurationField, ., getInstance, (, DurationFieldType, ., eras, (, ), ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, int, getMinimumValue, (, ), {, return]
[null, ;, }, public, int, getMinimumValue, (, ), {, return, ERA_VALUE, ;, }, public, int, getMaximumValue, (, ), {, return]
[getMaximumValue, (, ), {, return, ERA_VALUE, ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return]
[int, fieldValue, ,, Locale, locale, ), {, return, iEraText, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return]
[int, fieldValue, ,, Locale, locale, ), {, return, iEraText, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return]
