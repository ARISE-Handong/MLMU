[), {, throw, new, ArithmeticException, (, "Integer.MIN_VALUE cannot be negated", ), ;, }, return, -, value, ;, }, public, static, int, safeAdd, (]
[==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Integer.MIN_VALUE cannot be negated", ), ;, }, return, -, value, ;, }, public]
[), {, throw, new, ArithmeticException, (, "Integer.MIN_VALUE cannot be negated", ), ;, }, return, -, value, ;, }, public, static, int, safeAdd, (]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Integer.MIN_VALUE cannot be negated", ), ;, }, return, -, value, ;, }, public, static, int]
[;, }, return, -, value, ;, }, public, static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int]
[), ;, }, return, -, value, ;, }, public, static, int, safeAdd, (, int, val1, ,, int, val2, ), {]
[;, }, public, static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2]
[;, }, public, static, int, safeAdd, (, int, val1, ,, int, val2, ), {, int, sum, =, val1, +, val2]
[;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {]
[+, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0]
[;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }]
[&&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +]
[<, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +]
[), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1]
[^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: "]
[), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1]
[&&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }]
[>=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum]
[), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return]
[^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;]
[), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }]
[;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum]
[), ;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long]
[+, val2, ), ;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, )]
[+, " + ", +, val2, ), ;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long]
[+, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1]
[+, " + ", +, val2, ), ;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long]
[+, val2, ), ;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, )]
[), ;, }, return, sum, ;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long]
[;, }, public, static, long, safeAdd, (, long, val1, ,, long, val2, ), {, long, sum, =, val1, +, val2]
[;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {]
[+, val2, ;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0]
[;, if, (, (, val1, ^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }]
[&&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +]
[<, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +]
[), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1]
[^, sum, ), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: "]
[), <, 0, &&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1]
[&&, (, val1, ^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }]
[>=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum]
[), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return]
[^, val2, ), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;]
[), >=, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }]
[;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff]
[), ;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long]
[+, val2, ), ;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, )]
[+, " + ", +, val2, ), ;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long]
[+, val1, +, " + ", +, val2, ), ;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1]
[+, " + ", +, val2, ), ;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long]
[+, val2, ), ;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, )]
[), ;, }, return, sum, ;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long]
[;, }, public, static, long, safeSubtract, (, long, val1, ,, long, val2, ), {, long, diff, =, val1, -, val2]
[;, if, (, (, val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {]
[-, val2, ;, if, (, (, val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0]
[;, if, (, (, val1, ^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;, }, return, diff, ;, }]
[&&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +]
[<, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +]
[), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1]
[^, diff, ), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: "]
[), <, 0, &&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1]
[&&, (, val1, ^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;, }, return, diff, ;, }]
[<, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;, }, return, diff]
[), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;, }, return]
[^, val2, ), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;]
[), <, 0, ), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;, }, return]
[), {, throw, new, ArithmeticException, (, "The calculation caused an overflow: ", +, val1, +, " - ", +, val2, ), ;, }, return, diff, ;, }]
[;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long, total]
[), ;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long]
[+, val2, ), ;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, )]
[+, " - ", +, val2, ), ;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int]
[+, val1, +, " - ", +, val2, ), ;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1]
[+, " - ", +, val2, ), ;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int]
[+, val2, ), ;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, )]
[), ;, }, return, diff, ;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long]
[;, }, public, static, int, safeMultiply, (, int, val1, ,, int, val2, ), {, long, total, =, (, long, )]
[;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[*, (, long, ), val2, ;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, )]
[*, (, long, ), val2, ;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, )]
[;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[;, if, (, total, <, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, ), ;, }, return, (, int, )]
[||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, )]
[<, Integer, ., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +]
[||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, )]
[., MIN_VALUE, ||, total, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, ), ;, }, return, (, int, )]
[>, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, ), ;, }]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, ), ;, }, return, (, int, )]
[., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows an int: ", +, val1, +, " * ", +, val2, ), ;, }, return, (]
[;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, int, val2, )]
[), ;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, int, val2]
[+, val2, ), ;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply, (, long, val1, ,]
[+, " * ", +, val2, ), ;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply, (, long]
[+, val1, +, " * ", +, val2, ), ;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply]
[+, " * ", +, val2, ), ;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply, (, long]
[+, val2, ), ;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply, (, long, val1, ,]
[), ;, }, return, (, int, ), total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, int, val2]
[;, }, public, static, long, safeMultiply, (, long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case]
[;, }, public, static, long, safeMultiply, (, long, val1, ,, int, val2, ), {, switch, (, val2, ), {, case]
[), {, case, -, 1, :, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: "]
[:, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +]
[:, if, (, val1, ==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, -, val1, ;]
[==, Long, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, -, val1, ;]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, -]
[;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }, long]
[), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }]
[+, val2, ), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1]
[+, " * ", +, val2, ), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :]
[+, val1, +, " * ", +, val2, ), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case]
[+, " * ", +, val2, ), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :]
[+, val2, ), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1]
[), ;, }, return, -, val1, ;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }]
[;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2]
[;, case, 0, :, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2]
[:, return, 0L, ;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (]
[;, case, 1, :, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2]
[:, return, val1, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, )]
[;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new]
[;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +]
[*, val2, ;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +]
[;, if, (, total, /, val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }]
[!=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total]
[/, val2, !=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }]
[!=, val1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }]
[;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if, (]
[), ;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if]
[+, val2, ), ;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, )]
[+, " * ", +, val2, ), ;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long]
[+, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1]
[+, " * ", +, val2, ), ;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long]
[+, val2, ), ;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, )]
[), ;, }, return, total, ;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if]
[;, }, public, static, long, safeMultiply, (, long, val1, ,, long, val2, ), {, if, (, val2, ==, 1, )]
[), {, return, val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (, val1]
[==, 1, ), {, return, val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if]
[), {, return, val1, ;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (, val1]
[;, }, if, (, val1, ==, 1, ), {, return, val2, ;, }, if, (, val1, ==, 0, ||, val2]
[), {, return, val2, ;, }, if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return, 0, ;]
[==, 1, ), {, return, val2, ;, }, if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return]
[), {, return, val2, ;, }, if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return, 0, ;]
[;, }, if, (, val1, ==, 0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =]
[), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1]
[||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total]
[==, 0, ||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if]
[||, val2, ==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total]
[), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1]
[==, 0, ), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2]
[), {, return, 0, ;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1]
[;, }, long, total, =, val1, *, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long]
[;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||]
[*, val2, ;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -]
[;, if, (, total, /, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }]
[||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1]
[||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==]
[!=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&]
[/, val2, !=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, .]
[!=, val1, ||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&]
[||, val1, ==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==]
[||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1]
[&&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new]
[==, Long, ., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1]
[&&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new]
[., MIN_VALUE, &&, val2, ==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {]
[||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1]
[==, -, 1, ||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (]
[||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1]
[||, val2, ==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }]
[&&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;]
[==, Long, ., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * "]
[&&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;]
[., MIN_VALUE, &&, val1, ==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }]
[==, -, 1, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }]
[;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (]
[), ;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if]
[+, val2, ), ;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, )]
[+, " * ", +, val2, ), ;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long]
[+, val1, +, " * ", +, val2, ), ;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend]
[+, " * ", +, val2, ), ;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long]
[+, val2, ), ;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, )]
[), ;, }, return, total, ;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if]
[;, }, public, static, long, safeDivide, (, long, dividend, ,, long, divisor, ), {, if, (, dividend, ==, Long, .]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return, dividend, /, divisor]
[&&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;]
[==, Long, ., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / "]
[&&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;]
[., MIN_VALUE, &&, divisor, ==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return, dividend, /, divisor]
[==, -, 1L, ), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return, dividend, /, divisor]
[), {, throw, new, ArithmeticException, (, "Multiplication overflows a long: ", +, dividend, +, " / ", +, divisor, ), ;, }, return, dividend, /, divisor]
[;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer]
[), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (]
[+, divisor, ), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {]
[+, " / ", +, divisor, ), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value]
[+, dividend, +, " / ", +, divisor, ), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (]
[+, " / ", +, divisor, ), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value]
[+, divisor, ), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {]
[), ;, }, return, dividend, /, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (]
[;, }, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value, &&, value]
[/, divisor, ;, }, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value]
[;, }, public, static, int, safeToInt, (, long, value, ), {, if, (, Integer, ., MIN_VALUE, <=, value, &&, value]
[), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +, value, ), ;, }, public]
[&&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: "]
[<=, value, &&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException]
[., MIN_VALUE, <=, value, &&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw]
[&&, value, <=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: "]
[), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +, value, ), ;, }, public]
[<=, Integer, ., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +, value]
[), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +, value, ), ;, }, public]
[., MAX_VALUE, ), {, return, (, int, ), value, ;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +, value, ), ;]
[;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +, value, ), ;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,]
[;, }, throw, new, ArithmeticException, (, "Value cannot fit in an int: ", +, value, ), ;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,]
[;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =, FieldUtils, ., safeMultiply]
[), ;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =, FieldUtils, .]
[+, value, ), ;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =]
[), ;, }, public, static, int, safeMultiplyToInt, (, long, val1, ,, long, val2, ), {, long, val, =, FieldUtils, .]
[;, return, FieldUtils, ., safeToInt, (, val, ), ;, }, public, static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value]
[., safeMultiply, (, val1, ,, val2, ), ;, return, FieldUtils, ., safeToInt, (, val, ), ;, }, public, static, void]
[,, val2, ), ;, return, FieldUtils, ., safeToInt, (, val, ), ;, }, public, static, void, verifyValueBounds, (, DateTimeField, field]
[), ;, return, FieldUtils, ., safeToInt, (, val, ), ;, }, public, static, void, verifyValueBounds, (, DateTimeField, field, ,, int]
[;, }, public, static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, ), {]
[., safeToInt, (, val, ), ;, }, public, static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound]
[), ;, }, public, static, void, verifyValueBounds, (, DateTimeField, field, ,, int, value, ,, int, lowerBound, ,, int, upperBound, )]
[), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, Integer]
[||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, .]
[), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer]
[<, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, )]
[), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer]
[), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, Integer]
[), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,]
[>, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value]
[), ), {, throw, new, IllegalFieldValueException, (, field, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,]
[;, }, }, public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound, )]
[,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound]
[., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer]
[,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static]
[., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), )]
[), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public]
[,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int]
[., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds]
[), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,]
[), ;, }, }, public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int, upperBound]
[., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,]
[), ), ;, }, }, public, static, void, verifyValueBounds, (, DateTimeFieldType, fieldType, ,, int, value, ,, int, lowerBound, ,, int]
[), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound]
[||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, )]
[), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value]
[<, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf]
[), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value]
[), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound]
[), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (]
[>, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, .]
[), ), {, throw, new, IllegalFieldValueException, (, fieldType, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (]
[;, }, }, public, static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound, )]
[,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound]
[,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static]
[., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), )]
[), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public]
[,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds, (, String, fieldName, ,, int]
[., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds]
[), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds, (, String, fieldName, ,]
[), ;, }, }, public, static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int, upperBound]
[., valueOf, (, upperBound, ), ), ;, }, }, public, static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,]
[), ), ;, }, }, public, static, void, verifyValueBounds, (, String, fieldName, ,, int, value, ,, int, lowerBound, ,, int]
[), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound]
[||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, )]
[), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value]
[<, lowerBound, ), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf]
[), ||, (, value, >, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value]
[), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound]
[), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (]
[>, upperBound, ), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, .]
[), ), {, throw, new, IllegalFieldValueException, (, fieldName, ,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (]
[;, }, }, public, static, int, getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int, maxValue, )]
[,, Integer, ., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound]
[,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static]
[., valueOf, (, value, ), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), )]
[), ,, Integer, ., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public]
[,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, int, getWrappedValue, (, int, currentValue, ,, int]
[., valueOf, (, lowerBound, ), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, int, getWrappedValue]
[), ,, Integer, ., valueOf, (, upperBound, ), ), ;, }, }, public, static, int, getWrappedValue, (, int, currentValue, ,]
[), ;, }, }, public, static, int, getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int, maxValue]
[., valueOf, (, upperBound, ), ), ;, }, }, public, static, int, getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,]
[), ), ;, }, }, public, static, int, getWrappedValue, (, int, currentValue, ,, int, wrapValue, ,, int, minValue, ,, int]
[;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue, ), {, if, (, minValue]
[,, minValue, ,, maxValue, ), ;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue]
[+, wrapValue, ,, minValue, ,, maxValue, ), ;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,]
[,, minValue, ,, maxValue, ), ;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue]
[,, maxValue, ), ;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue, ), {]
[), ;, }, public, static, int, getWrappedValue, (, int, value, ,, int, minValue, ,, int, maxValue, ), {, if, (]
[), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value]
[>=, maxValue, ), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1]
[), {, throw, new, IllegalArgumentException, (, "MIN > MAX", ), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value]
[;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0]
[), ;, }, int, wrapRange, =, maxValue, -, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=]
[;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue]
[+, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, )]
[-, minValue, +, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %]
[+, 1, ;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, )]
[;, value, -=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue]
[-=, minValue, ;, if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue, ;, }]
[;, if, (, value, >=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange]
[), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %]
[>=, 0, ), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value]
[), {, return, (, value, %, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %]
[;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return]
[+, minValue, ;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, )]
[), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0]
[%, wrapRange, ), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange]
[), +, minValue, ;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0]
[;, }, int, remByRange, =, (, -, value, ), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return]
[;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -, remByRange, )]
[%, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -]
[), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange]
[), %, wrapRange, ;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange]
[;, if, (, remByRange, ==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -, remByRange, )]
[), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -, remByRange, ), +, minValue, ;, }, public, static]
[==, 0, ), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -, remByRange, ), +, minValue, ;, }]
[), {, return, 0, +, minValue, ;, }, return, (, wrapRange, -, remByRange, ), +, minValue, ;, }, public, static]
[;, }, return, (, wrapRange, -, remByRange, ), +, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,]
[+, minValue, ;, }, return, (, wrapRange, -, remByRange, ), +, minValue, ;, }, public, static, boolean, equals, (, Object]
[;, }, return, (, wrapRange, -, remByRange, ), +, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,]
[;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (, object1, ==, object2, )]
[+, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (, object1, ==]
[), +, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (, object1]
[-, remByRange, ), +, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if]
[), +, minValue, ;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (, object1]
[;, }, public, static, boolean, equals, (, Object, object1, ,, Object, object2, ), {, if, (, object1, ==, object2, )]
[), {, return, true, ;, }, if, (, object1, ==, null, ||, object2, ==, null, ), {, return, false, ;]
[==, object2, ), {, return, true, ;, }, if, (, object1, ==, null, ||, object2, ==, null, ), {, return]
[), {, return, true, ;, }, if, (, object1, ==, null, ||, object2, ==, null, ), {, return, false, ;]
[;, }, if, (, object1, ==, null, ||, object2, ==, null, ), {, return, false, ;, }, return, object1, .]
[), {, return, false, ;, }, return, object1, ., equals, (, object2, ), ;, }, }]
[||, object2, ==, null, ), {, return, false, ;, }, return, object1, ., equals, (, object2, ), ;, }, }]
[==, null, ||, object2, ==, null, ), {, return, false, ;, }, return, object1, ., equals, (, object2, ), ;]
[||, object2, ==, null, ), {, return, false, ;, }, return, object1, ., equals, (, object2, ), ;, }, }]
[), {, return, false, ;, }, return, object1, ., equals, (, object2, ), ;, }, }]
[==, null, ), {, return, false, ;, }, return, object1, ., equals, (, object2, ), ;, }, }]
[), {, return, false, ;, }, return, object1, ., equals, (, object2, ), ;, }, }]
[;, }, return, object1, ., equals, (, object2, ), ;, }, }]
[;, }, }]
[., equals, (, object2, ), ;, }, }]
[), ;, }, }]
