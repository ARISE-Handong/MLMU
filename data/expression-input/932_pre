[math3, ., util, ., FastMath, ;, public, class, ArrayRealVector, extends, RealVector, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., FastMath, ;, public, class, ArrayRealVector, extends, RealVector, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[extends, RealVector, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -, 1097961340710804027L, ;, private, static, final, RealVectorFormat, DEFAULT_FORMAT, =]
[extends, RealVector, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -, 1097961340710804027L, ;, private, static, final, RealVectorFormat, DEFAULT_FORMAT, =]
[RealVectorFormat, DEFAULT_FORMAT, =, RealVectorFormat, ., getInstance, (, ), ;, private, double, data, [, ], ;, public, ArrayRealVector, (, ), {]
[=, RealVectorFormat, ., getInstance, (, ), ;, private, double, data, [, ], ;, public, ArrayRealVector, (, ), {, data, =]
[getInstance, (, ), ;, private, double, data, [, ], ;, public, ArrayRealVector, (, ), {, data, =, new, double, []
[ArrayRealVector, (, ), {, data, =, new, double, [, 0, ], ;, }, public, ArrayRealVector, (, int, size, ), {]
[), {, data, =, new, double, [, 0, ], ;, }, public, ArrayRealVector, (, int, size, ), {, data, =]
[=, new, double, [, 0, ], ;, }, public, ArrayRealVector, (, int, size, ), {, data, =, new, double, []
[{, data, =, new, double, [, size, ], ;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {]
[=, new, double, [, size, ], ;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {, data, =]
[[, size, ], ;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {, data, =, new, double, []
[;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {, data, =, new, double, [, size, ], ;]
[;, }, public, ArrayRealVector, (, int, size, ,, double, preset, ), {, data, =, new, double, [, size, ], ;]
[(, int, size, ,, double, preset, ), {, data, =, new, double, [, size, ], ;, Arrays, ., fill, (]
[size, ,, double, preset, ), {, data, =, new, double, [, size, ], ;, Arrays, ., fill, (, data, ,]
[;, Arrays, ., fill, (, data, ,, preset, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ), {]
[., fill, (, data, ,, preset, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ), {, data, =]
[., fill, (, data, ,, preset, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ), {, data, =]
[(, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, {, if, (]
[(, ), ;, }, public, ArrayRealVector, (, double, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, {, if, (]
[;, }, public, ArrayRealVector, (, double, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, {, if, (, d, ==]
[(, double, [, ], d, ,, boolean, copyArray, ), throws, NullArgumentException, {, if, (, d, ==, null, ), {, throw]
[boolean, copyArray, ), throws, NullArgumentException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }]
[), throws, NullArgumentException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =]
[), throws, NullArgumentException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =]
[NullArgumentException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =, copyArray, ?]
[NullArgumentException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =, copyArray, ?]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =, copyArray, ?, d, ., clone, (, ), :]
[ArrayRealVector, (, double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (]
[ArrayRealVector, (, double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (]
[double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==]
[,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw]
[NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <]
[if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <]
[d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +]
[{, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw]
[NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (]
[NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (]
[), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +]
[}, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,]
[}, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,]
[., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,]
[+, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =, new, double, []
[pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;]
[pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;]
[d, ., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (]
[length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,]
[true, ), ;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,, pos, ,]
[;, }, data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,]
[data, =, new, double, [, size, ], ;, System, ., arraycopy, (, d, ,, pos, ,, data, ,, 0, ,]
[,, pos, ,, data, ,, 0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {]
[,, data, ,, 0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =]
[0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =, new, double, []
[0, ,, size, ), ;, }, public, ArrayRealVector, (, Double, [, ], d, ), {, data, =, new, double, []
[[, ], d, ), {, data, =, new, double, [, d, ., length, ], ;, for, (, int, i, =]
[d, ), {, data, =, new, double, [, d, ., length, ], ;, for, (, int, i, =, 0, ;]
[d, ), {, data, =, new, double, [, d, ., length, ], ;, for, (, int, i, =, 0, ;]
[{, data, =, new, double, [, d, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[{, data, =, new, double, [, d, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, d, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;]
[double, [, d, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {, data, []
[int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, d, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, d, ., length, ;, i, ++, ), {, data, [, i, ], =, d, []
[ArrayRealVector, (, Double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (]
[ArrayRealVector, (, Double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (]
[Double, [, ], d, ,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==]
[,, int, pos, ,, int, size, ), throws, NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw]
[NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, NumberIsTooLargeException, {, if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <]
[if, (, d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <]
[d, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +]
[{, throw, new, NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw]
[NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (]
[NullArgumentException, (, ), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (]
[), ;, }, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +]
[}, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,]
[}, if, (, d, ., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,]
[., length, <, pos, +, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,]
[+, size, ), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =]
[new, NumberIsTooLargeException, (, pos, +, size, ,, d, ., length, ,, true, ), ;, }, data, =, new, double, []
[., length, ,, true, ), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =]
[,, true, ), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;]
[,, true, ), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;]
[), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <]
[), ;, }, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <]
[}, data, =, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <, pos, +]
[=, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;]
[=, new, double, [, size, ], ;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;]
[size, ], ;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;, i, ++, ), {]
[size, ], ;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;, i, ++, ), {]
[;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data, []
[;, for, (, int, i, =, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data, []
[(, int, i, =, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data, [, i, -]
[=, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data, [, i, -, pos, ], =]
[=, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data, [, i, -, pos, ], =]
[=, pos, ;, i, <, pos, +, size, ;, i, ++, ), {, data, [, i, -, pos, ], =]
[;, i, <, pos, +, size, ;, i, ++, ), {, data, [, i, -, pos, ], =, d, []
[i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if, (]
[i, ], ., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if, (]
[., doubleValue, (, ), ;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if, (, v, ==]
[;, }, }, public, ArrayRealVector, (, RealVector, v, ), throws, NullArgumentException, {, if, (, v, ==, null, ), {, throw]
[RealVector, v, ), throws, NullArgumentException, {, if, (, v, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }]
[), throws, NullArgumentException, {, if, (, v, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =]
[{, if, (, v, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =, new, double, []
[{, if, (, v, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, data, =, new, double, []
[), ;, }, data, =, new, double, [, v, ., getDimension, (, ), ], ;, for, (, int, i, =]
[}, data, =, new, double, [, v, ., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;]
[}, data, =, new, double, [, v, ., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, v, ., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, v, ., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[v, ., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[., getDimension, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {]
[), ], ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, data, []
[int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, data, [, i, ], =]
[;, i, <, data, ., length, ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (]
[v, ., getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws, NullArgumentException, {, this, (]
[getEntry, (, i, ), ;, }, }, public, ArrayRealVector, (, ArrayRealVector, v, ), throws, NullArgumentException, {, this, (, v, ,]
[NullArgumentException, {, this, (, v, ,, true, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {]
[this, (, v, ,, true, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {, data, =]
[this, (, v, ,, true, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {, data, =]
[v, ,, true, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {, data, =, deep, ?]
[v, ,, true, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {, data, =, deep, ?]
[v, ,, true, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v, ,, boolean, deep, ), {, data, =, deep, ?]
[(, ArrayRealVector, v, ,, boolean, deep, ), {, data, =, deep, ?, v, ., data, ., clone, (, ), :]
[(, ArrayRealVector, v, ,, boolean, deep, ), {, data, =, deep, ?, v, ., data, ., clone, (, ), :]
[., clone, (, ), :, v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {]
[(, ), :, v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =]
[v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, []
[v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, []
[v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, []
[v, ., data, ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, []
[ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, [, v1, ., data, ., length, +]
[ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, [, v1, ., data, ., length, +]
[ArrayRealVector, (, ArrayRealVector, v1, ,, ArrayRealVector, v2, ), {, data, =, new, double, [, v1, ., data, ., length, +]
[), {, data, =, new, double, [, v1, ., data, ., length, +, v2, ., data, ., length, ], ;]
[), {, data, =, new, double, [, v1, ., data, ., length, +, v2, ., data, ., length, ], ;]
[new, double, [, v1, ., data, ., length, +, v2, ., data, ., length, ], ;, System, ., arraycopy, (]
[new, double, [, v1, ., data, ., length, +, v2, ., data, ., length, ], ;, System, ., arraycopy, (]
[., data, ., length, +, v2, ., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,]
[., length, +, v2, ., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,]
[+, v2, ., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,]
[., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,]
[., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,]
[., data, ., length, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,]
[., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, ., length, ), ;]
[., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, ., length, ), ;]
[., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (]
[., data, ,, 0, ,, data, ,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (]
[,, data, ,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,]
[,, 0, ,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,]
[,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,]
[,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,]
[,, v1, ., data, ., length, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,]
[), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, ., data, ., length, ,]
[), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, ., data, ., length, ,]
[), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, v1, ., data, ., length, ,]
[data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final, int, l1, =]
[data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final, int, l1, =]
[data, ., length, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, RealVector, v2, ), {, final, int, l1, =]
[v1, ,, RealVector, v2, ), {, final, int, l1, =, v1, ., data, ., length, ;, final, int, l2, =]
[v1, ,, RealVector, v2, ), {, final, int, l1, =, v1, ., data, ., length, ;, final, int, l2, =]
[final, int, l1, =, v1, ., data, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;]
[l1, =, v1, ., data, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =]
[., data, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, []
[., data, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, []
[., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +]
[final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;]
[final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;]
[v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (]
[v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (]
[), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,]
[data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,]
[new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,]
[[, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,]
[arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =]
[v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;]
[v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;]
[data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <]
[0, ,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;]
[,, data, ,, 0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++]
[0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {]
[0, ,, l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {]
[l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data, []
[l1, ), ;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data, []
[;, for, (, int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data, [, l1, +]
[int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data, [, l1, +, i, ], =]
[int, i, =, 0, ;, i, <, l2, ;, ++, i, ), {, data, [, l1, +, i, ], =]
[;, i, <, l2, ;, ++, i, ), {, data, [, l1, +, i, ], =, v2, ., getEntry, (]
[(, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =]
[(, i, ), ;, }, }, public, ArrayRealVector, (, RealVector, v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =]
[v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =]
[v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =]
[v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =]
[final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =, v2, ., data, ., length, ;]
[l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =, v2, ., data, ., length, ;, data, =]
[., getDimension, (, ), ;, final, int, l2, =, v2, ., data, ., length, ;, data, =, new, double, []
[., getDimension, (, ), ;, final, int, l2, =, v2, ., data, ., length, ;, data, =, new, double, []
[(, ), ;, final, int, l2, =, v2, ., data, ., length, ;, data, =, new, double, [, l1, +]
[., data, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, for, (, int, i, =]
[., length, ;, data, =, new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;]
[., length, ;, data, =, new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;]
[;, data, =, new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;, i, <, l1, ;]
[new, double, [, l1, +, l2, ], ;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++]
[l1, +, l2, ], ;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {]
[l1, +, l2, ], ;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {]
[l2, ], ;, for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {, data, []
[for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {, data, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, l1, ;, ++, i, ), {, data, [, i, ], =]
[=, 0, ;, i, <, l1, ;, ++, i, ), {, data, [, i, ], =, v1, ., getEntry, (]
[<, l1, ;, ++, i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }]
[<, l1, ;, ++, i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }]
[i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (]
[i, ), {, data, [, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (]
[[, i, ], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,]
[], =, v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,]
[v1, ., getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,]
[getEntry, (, i, ), ;, }, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,]
[l2, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ], v2, ), {, final, int, l1, =]
[l2, ), ;, }, public, ArrayRealVector, (, ArrayRealVector, v1, ,, double, [, ], v2, ), {, final, int, l1, =]
[double, [, ], v2, ), {, final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =]
[double, [, ], v2, ), {, final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =]
[), {, final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =, v2, ., length, ;]
[final, int, l1, =, v1, ., getDimension, (, ), ;, final, int, l2, =, v2, ., length, ;, data, =]
[=, v1, ., getDimension, (, ), ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, []
[=, v1, ., getDimension, (, ), ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, []
[., getDimension, (, ), ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +]
[), ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;]
[), ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;]
[l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (]
[l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (]
[length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,]
[data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,]
[new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,]
[[, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,]
[l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;]
[l2, ], ;, System, ., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;]
[., arraycopy, (, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (]
[(, v1, ., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,]
[., data, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,]
[,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,]
[,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,]
[l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =]
[l2, ), ;, }, public, ArrayRealVector, (, double, [, ], v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =]
[[, ], v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, ., length, ;, final, int, l2, =]
[[, ], v1, ,, ArrayRealVector, v2, ), {, final, int, l1, =, v1, ., length, ;, final, int, l2, =]
[), {, final, int, l1, =, v1, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;]
[final, int, l1, =, v1, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =]
[=, v1, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, []
[=, v1, ., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, []
[., length, ;, final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +]
[final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;]
[final, int, l2, =, v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;]
[v2, ., getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (]
[getDimension, (, ), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,]
[), ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,]
[data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,]
[new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,]
[l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;]
[l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (]
[(, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,]
[,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,]
[,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,]
[,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ., data, ,, 0, ,, data, ,, l1, ,]
[;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double, [, ], v2, ), {, final, int, l1, =]
[;, }, public, ArrayRealVector, (, double, [, ], v1, ,, double, [, ], v2, ), {, final, int, l1, =]
[v1, ,, double, [, ], v2, ), {, final, int, l1, =, v1, ., length, ;, final, int, l2, =]
[v1, ,, double, [, ], v2, ), {, final, int, l1, =, v1, ., length, ;, final, int, l2, =]
[], v2, ), {, final, int, l1, =, v1, ., length, ;, final, int, l2, =, v2, ., length, ;]
[), {, final, int, l1, =, v1, ., length, ;, final, int, l2, =, v2, ., length, ;, data, =]
[int, l1, =, v1, ., length, ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, []
[int, l1, =, v1, ., length, ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, []
[=, v1, ., length, ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +]
[length, ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;]
[length, ;, final, int, l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;]
[l2, =, v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (]
[v2, ., length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,]
[length, ;, data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,]
[data, =, new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,]
[new, double, [, l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,]
[l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;]
[l1, +, l2, ], ;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;]
[;, System, ., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (]
[., arraycopy, (, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,]
[(, v1, ,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,]
[,, 0, ,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,]
[,, data, ,, 0, ,, l1, ), ;, System, ., arraycopy, (, v2, ,, 0, ,, data, ,, l1, ,]
[,, 0, ,, data, ,, l1, ,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return]
[data, ,, l1, ,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return, new, ArrayRealVector, (]
[l1, ,, l2, ), ;, }, @, Override, public, ArrayRealVector, copy, (, ), {, return, new, ArrayRealVector, (, this, ,]
[this, ,, true, ), ;, }, @, Override, public, ArrayRealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[this, ,, true, ), ;, }, @, Override, public, ArrayRealVector, add, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, []
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], +]
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], +]
[i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], +, vData, []
[++, ), {, resultData, [, i, ], =, data, [, i, ], +, vData, [, i, ], ;, }, return]
[i, ], =, data, [, i, ], +, vData, [, i, ], ;, }, return, result, ;, }, else, {]
[=, data, [, i, ], +, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =]
[v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =]
[data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (]
[data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (]
[=, v, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[=, v, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, out, []
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, out, []
[{, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, ., getIndex, (, ), ], +=]
[{, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, ., getIndex, (, ), ], +=]
[(, ), ;, out, [, e, ., getIndex, (, ), ], +=, e, ., getValue, (, ), ;, }, return]
[out, [, e, ., getIndex, (, ), ], +=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (]
[e, ., getIndex, (, ), ], +=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,]
[,, false, ), ;, }, }, @, Override, public, ArrayRealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[,, false, ), ;, }, }, @, Override, public, ArrayRealVector, subtract, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, []
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], -]
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], -]
[i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], -, vData, []
[++, ), {, resultData, [, i, ], =, data, [, i, ], -, vData, [, i, ], ;, }, return]
[i, ], =, data, [, i, ], -, vData, [, i, ], ;, }, return, result, ;, }, else, {]
[=, data, [, i, ], -, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =]
[v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =]
[data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (]
[data, ., clone, (, ), ;, Iterator, <, Entry, >, it, =, v, ., iterator, (, ), ;, while, (]
[=, v, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[=, v, ., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[;, while, (, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;]
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, out, []
[(, it, ., hasNext, (, ), ), {, final, Entry, e, =, it, ., next, (, ), ;, out, []
[{, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, ., getIndex, (, ), ], -=]
[{, final, Entry, e, =, it, ., next, (, ), ;, out, [, e, ., getIndex, (, ), ], -=]
[(, ), ;, out, [, e, ., getIndex, (, ), ], -=, e, ., getValue, (, ), ;, }, return]
[out, [, e, ., getIndex, (, ), ], -=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (]
[e, ., getIndex, (, ), ], -=, e, ., getValue, (, ), ;, }, return, new, ArrayRealVector, (, out, ,]
[ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public, ArrayRealVector, map, (, UnivariateFunction, function, ), {, return]
[ArrayRealVector, (, out, ,, false, ), ;, }, }, @, Override, public, ArrayRealVector, map, (, UnivariateFunction, function, ), {, return]
[;, }, }, @, Override, public, ArrayRealVector, map, (, UnivariateFunction, function, ), {, return, copy, (, ), ., mapToSelf, (]
[(, function, ), ;, }, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =]
[), ;, }, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;]
[), ;, }, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;]
[}, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;, i, <]
[}, @, Override, public, ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;, i, <]
[ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[ArrayRealVector, mapToSelf, (, UnivariateFunction, function, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[function, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[function, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, function, ., value, (]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, function, ., value, (]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, function, ., value, (, data, []
[++, ), {, data, [, i, ], =, function, ., value, (, data, [, i, ], ), ;, }, return]
[}, return, this, ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =]
[this, ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[this, ;, }, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[}, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[}, @, Override, public, RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[RealVector, mapAddToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, []
[i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], +]
[length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], +, d, ;, }, return]
[}, return, this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =]
[this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[this, ;, }, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[}, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[}, @, Override, public, RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[RealVector, mapSubtractToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, []
[i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], -]
[length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], -, d, ;, }, return]
[}, return, this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =]
[this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[this, ;, }, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[}, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[}, @, Override, public, RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[RealVector, mapMultiplyToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, []
[i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], *]
[length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], *, d, ;, }, return]
[}, return, this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =]
[this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[this, ;, }, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;]
[}, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[}, @, Override, public, RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <]
[RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[RealVector, mapDivideToSelf, (, double, d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[d, ), {, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, []
[i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], /]
[length, ;, i, ++, ), {, data, [, i, ], =, data, [, i, ], /, d, ;, }, return]
[;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[;, }, return, this, ;, }, @, Override, public, ArrayRealVector, ebeMultiply, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, []
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], *]
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], *]
[i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], *, vData, []
[++, ), {, resultData, [, i, ], =, data, [, i, ], *, vData, [, i, ], ;, }, return]
[i, ], =, data, [, i, ], *, vData, [, i, ], ;, }, return, result, ;, }, else, {]
[=, data, [, i, ], *, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[(, v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[=, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], *=]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], *=]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], *=, v, ., getEntry, (]
[length, ;, i, ++, ), {, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }, return]
[++, ), {, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (]
[{, out, [, i, ], *=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,]
[,, false, ), ;, }, }, @, Override, public, ArrayRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[,, false, ), ;, }, }, @, Override, public, ArrayRealVector, ebeDivide, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =]
[], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (]
[), ., data, ;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =]
[;, final, int, dim, =, vData, ., length, ;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[;, checkVectorDimensions, (, dim, ), ;, ArrayRealVector, result, =, new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =]
[new, ArrayRealVector, (, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[(, dim, ), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[double, [, ], resultData, =, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[=, result, ., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {]
[., data, ;, for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, []
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =]
[int, i, =, 0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, []
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], /]
[0, ;, i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], /]
[i, <, dim, ;, i, ++, ), {, resultData, [, i, ], =, data, [, i, ], /, vData, []
[++, ), {, resultData, [, i, ], =, data, [, i, ], /, vData, [, i, ], ;, }, return]
[i, ], =, data, [, i, ], /, vData, [, i, ], ;, }, return, result, ;, }, else, {]
[=, data, [, i, ], /, vData, [, i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[i, ], ;, }, return, result, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, [, ], out, =]
[(, v, ), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[double, [, ], out, =, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[=, data, ., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], /=]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], /=]
[;, i, <, data, ., length, ;, i, ++, ), {, out, [, i, ], /=, v, ., getEntry, (]
[length, ;, i, ++, ), {, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }, return]
[++, ), {, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (]
[{, out, [, i, ], /=, v, ., getEntry, (, i, ), ;, }, return, new, ArrayRealVector, (, out, ,]
[return, new, ArrayRealVector, (, out, ,, false, ), ;, }, }, public, double, [, ], getDataRef, (, ), {, return]
[), {, return, data, ;, }, @, Override, public, double, dotProduct, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[), {, return, data, ;, }, @, Override, public, double, dotProduct, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;]
[(, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, vData, ., length, ), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[), ;, double, dot, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, +=]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, +=]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, +=]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, +=, data, []
[=, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, +=, data, [, i, ], *]
[=, 0, ;, i, <, data, ., length, ;, i, ++, ), {, dot, +=, data, [, i, ], *]
[;, i, <, data, ., length, ;, i, ++, ), {, dot, +=, data, [, i, ], *, vData, []
[length, ;, i, ++, ), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }, return]
[), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }, return, dot, ;, }, return]
[), {, dot, +=, data, [, i, ], *, vData, [, i, ], ;, }, return, dot, ;, }, return]
[data, [, i, ], *, vData, [, i, ], ;, }, return, dot, ;, }, return, super, ., dotProduct, (]
[return, super, ., dotProduct, (, v, ), ;, }, @, Override, public, double, getNorm, (, ), {, double, sum, =]
[;, }, @, Override, public, double, getNorm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :]
[Override, public, double, getNorm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :, data, ), {]
[double, getNorm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=]
[double, getNorm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=]
[(, ), {, double, sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=, a, *]
[sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=, a, *, a, ;, }, return]
[sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=, a, *, a, ;, }, return]
[for, (, double, a, :, data, ), {, sum, +=, a, *, a, ;, }, return, FastMath, ., sqrt, (]
[return, FastMath, ., sqrt, (, sum, ), ;, }, @, Override, public, double, getL1Norm, (, ), {, double, sum, =]
[;, }, @, Override, public, double, getL1Norm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :]
[Override, public, double, getL1Norm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :, data, ), {]
[double, getL1Norm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=]
[double, getL1Norm, (, ), {, double, sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=]
[{, double, sum, =, 0, ;, for, (, double, a, :, data, ), {, sum, +=, FastMath, ., abs, (]
[;, for, (, double, a, :, data, ), {, sum, +=, FastMath, ., abs, (, a, ), ;, }, return]
[(, a, ), ;, }, return, sum, ;, }, @, Override, public, double, getLInfNorm, (, ), {, double, max, =]
[;, }, @, Override, public, double, getLInfNorm, (, ), {, double, max, =, 0, ;, for, (, double, a, :]
[Override, public, double, getLInfNorm, (, ), {, double, max, =, 0, ;, for, (, double, a, :, data, ), {]
[double, getLInfNorm, (, ), {, double, max, =, 0, ;, for, (, double, a, :, data, ), {, max, =]
[double, getLInfNorm, (, ), {, double, max, =, 0, ;, for, (, double, a, :, data, ), {, max, =]
[{, double, max, =, 0, ;, for, (, double, a, :, data, ), {, max, =, FastMath, ., max, (]
[max, =, 0, ;, for, (, double, a, :, data, ), {, max, =, FastMath, ., max, (, max, ,]
[max, =, 0, ;, for, (, double, a, :, data, ), {, max, =, FastMath, ., max, (, max, ,]
[for, (, double, a, :, data, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, a, ), ), ;, }, return]
[;, }, return, max, ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[;, }, return, max, ;, }, @, Override, public, double, getDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[(, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, []
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, []
[length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=]
[), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, delta, *]
[delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, delta, *, delta, ;, }, return]
[delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, delta, *, delta, ;, }, return]
[i, ], -, vData, [, i, ], ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (]
[], ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {]
[sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions, (]
[}, return, FastMath, ., sqrt, (, sum, ), ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =]
[), ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[}, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[}, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[{, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[{, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, []
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=, delta, *]
[data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=, delta, *, delta, ;, }, return]
[data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=, delta, *, delta, ;, }, return]
[-, v, ., getEntry, (, i, ), ;, sum, +=, delta, *, delta, ;, }, return, FastMath, ., sqrt, (]
[(, sum, ), ;, }, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, sum, ), ;, }, }, @, Override, public, double, getL1Distance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[(, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, vData, ., length, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, []
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, []
[length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=]
[final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, sum, +=, FastMath, ., abs, (]
[[, i, ], -, vData, [, i, ], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return]
[[, i, ], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, else, {]
[], ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (]
[abs, (, delta, ), ;, }, return, sum, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =]
[sum, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =]
[}, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[}, else, {, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[{, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[{, checkVectorDimensions, (, v, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, []
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=]
[delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, sum, +=, FastMath, ., abs, (]
[], -, v, ., getEntry, (, i, ), ;, sum, +=, FastMath, ., abs, (, delta, ), ;, }, return]
[}, return, sum, ;, }, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[}, return, sum, ;, }, }, @, Override, public, double, getLInfDistance, (, RealVector, v, ), throws, DimensionMismatchException, {, if, (]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[(, RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealVector, v, ), throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[throws, DimensionMismatchException, {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (]
[=, (, (, ArrayRealVector, ), v, ), ., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =]
[., data, ;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i, =]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;]
[;, checkVectorDimensions, (, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;]
[(, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, vData, ., length, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, []
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[<, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, []
[length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, max, =]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, max, =]
[final, double, delta, =, data, [, i, ], -, vData, [, i, ], ;, max, =, FastMath, ., max, (]
[delta, =, data, [, i, ], -, vData, [, i, ], ;, max, =, FastMath, ., max, (, max, ,]
[delta, =, data, [, i, ], -, vData, [, i, ], ;, max, =, FastMath, ., max, (, max, ,]
[i, ], -, vData, [, i, ], ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[], ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return]
[., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }, else, {]
[(, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return, max, ;, }, else, {, checkVectorDimensions, (]
[(, delta, ), ), ;, }, return, max, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, max, =]
[max, ;, }, else, {, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for, (, int, i, =]
[}, else, {, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;]
[}, else, {, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;]
[{, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[{, checkVectorDimensions, (, v, ), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[;, double, max, =, 0, ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =]
[i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, []
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[;, i, <, data, ., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -]
[., length, ;, ++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (]
[++, i, ), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, max, =]
[), {, final, double, delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, max, =]
[delta, =, data, [, i, ], -, v, ., getEntry, (, i, ), ;, max, =, FastMath, ., max, (]
[data, [, i, ], -, v, ., getEntry, (, i, ), ;, max, =, FastMath, ., max, (, max, ,]
[data, [, i, ], -, v, ., getEntry, (, i, ), ;, max, =, FastMath, ., max, (, max, ,]
[-, v, ., getEntry, (, i, ), ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (]
[), ;, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, delta, ), ), ;, }, return]
[), ;, }, return, max, ;, }, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, v, ), {, if, (]
[), ;, }, return, max, ;, }, }, @, Override, public, RealMatrix, outerProduct, (, RealVector, v, ), {, if, (]
[RealMatrix, outerProduct, (, RealVector, v, ), {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[RealMatrix, outerProduct, (, RealVector, v, ), {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =]
[outerProduct, (, RealVector, v, ), {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (]
[v, ), {, if, (, v, instanceof, ArrayRealVector, ), {, final, double, [, ], vData, =, (, (, ArrayRealVector, )]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, m, =]
[{, final, double, [, ], vData, =, (, (, ArrayRealVector, ), v, ), ., data, ;, final, int, m, =]
[(, ArrayRealVector, ), v, ), ., data, ;, final, int, m, =, data, ., length, ;, final, int, n, =]
[(, ArrayRealVector, ), v, ), ., data, ;, final, int, m, =, data, ., length, ;, final, int, n, =]
[final, int, m, =, data, ., length, ;, final, int, n, =, vData, ., length, ;, final, RealMatrix, out, =]
[final, int, m, =, data, ., length, ;, final, int, n, =, vData, ., length, ;, final, RealMatrix, out, =]
[data, ., length, ;, final, int, n, =, vData, ., length, ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (]
[length, ;, final, int, n, =, vData, ., length, ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,]
[length, ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =]
[final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;]
[final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;]
[out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <]
[MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[{, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,]
[0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, []
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *]
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *]
[;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, vData, []
[setEntry, (, i, ,, j, ,, data, [, i, ], *, vData, [, j, ], ), ;, }, }, return]
[], *, vData, [, j, ], ), ;, }, }, return, out, ;, }, else, {, final, int, m, =]
[], *, vData, [, j, ], ), ;, }, }, return, out, ;, }, else, {, final, int, m, =]
[}, }, return, out, ;, }, else, {, final, int, m, =, data, ., length, ;, final, int, n, =]
[}, }, return, out, ;, }, else, {, final, int, m, =, data, ., length, ;, final, int, n, =]
[m, =, data, ., length, ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, out, =]
[m, =, data, ., length, ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, out, =]
[length, ;, final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (]
[final, int, n, =, v, ., getDimension, (, ), ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,]
[), ;, final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =]
[final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;]
[final, RealMatrix, out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;]
[out, =, MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <]
[MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[MatrixUtils, ., createRealMatrix, (, m, ,, n, ), ;, for, (, int, i, =, 0, ;, i, <, m, ;]
[for, (, int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, 0, ;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, <, m, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[{, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (]
[(, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,]
[j, =, 0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,]
[0, ;, j, <, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, []
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *]
[<, n, ;, j, ++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *]
[++, ), {, out, ., setEntry, (, i, ,, j, ,, data, [, i, ], *, v, ., getEntry, (]
[i, ,, j, ,, data, [, i, ], *, v, ., getEntry, (, j, ), ), ;, }, }, return]
[return, out, ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, try, {, return]
[return, out, ;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, try, {, return]
[;, }, }, @, Override, public, double, getEntry, (, int, index, ), throws, OutOfRangeException, {, try, {, return, data, []
[), throws, OutOfRangeException, {, try, {, return, data, [, index, ], ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw]
[{, try, {, return, data, [, index, ], ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (]
[{, try, {, return, data, [, index, ], ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (]
[data, [, index, ], ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,]
[index, ], ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, getDimension, (, ), -]
[0, ,, getDimension, (, ), -, 1, ), ;, }, }, @, Override, public, int, getDimension, (, ), {, return]
[0, ,, getDimension, (, ), -, 1, ), ;, }, }, @, Override, public, int, getDimension, (, ), {, return]
[{, return, data, ., length, ;, }, @, Override, public, RealVector, append, (, RealVector, v, ), {, try, {, return]
[., length, ;, }, @, Override, public, RealVector, append, (, RealVector, v, ), {, try, {, return, new, ArrayRealVector, (]
[;, }, @, Override, public, RealVector, append, (, RealVector, v, ), {, try, {, return, new, ArrayRealVector, (, this, ,]
[Override, public, RealVector, append, (, RealVector, v, ), {, try, {, return, new, ArrayRealVector, (, this, ,, (, ArrayRealVector, )]
[return, new, ArrayRealVector, (, this, ,, (, ArrayRealVector, ), v, ), ;, }, catch, (, ClassCastException, cce, ), {, return]
[(, this, ,, (, ArrayRealVector, ), v, ), ;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayRealVector, (]
[,, (, ArrayRealVector, ), v, ), ;, }, catch, (, ClassCastException, cce, ), {, return, new, ArrayRealVector, (, this, ,]
[return, new, ArrayRealVector, (, this, ,, v, ), ;, }, }, public, ArrayRealVector, append, (, ArrayRealVector, v, ), {, return]
[(, this, ,, v, ), ;, }, }, public, ArrayRealVector, append, (, ArrayRealVector, v, ), {, return, new, ArrayRealVector, (]
[,, v, ), ;, }, }, public, ArrayRealVector, append, (, ArrayRealVector, v, ), {, return, new, ArrayRealVector, (, this, ,]
[v, ), ;, }, @, Override, public, RealVector, append, (, double, in, ), {, final, double, [, ], out, =]
[}, @, Override, public, RealVector, append, (, double, in, ), {, final, double, [, ], out, =, new, double, []
[}, @, Override, public, RealVector, append, (, double, in, ), {, final, double, [, ], out, =, new, double, []
[}, @, Override, public, RealVector, append, (, double, in, ), {, final, double, [, ], out, =, new, double, []
[RealVector, append, (, double, in, ), {, final, double, [, ], out, =, new, double, [, data, ., length, +]
[double, in, ), {, final, double, [, ], out, =, new, double, [, data, ., length, +, 1, ], ;]
[double, in, ), {, final, double, [, ], out, =, new, double, [, data, ., length, +, 1, ], ;]
[final, double, [, ], out, =, new, double, [, data, ., length, +, 1, ], ;, System, ., arraycopy, (]
[[, ], out, =, new, double, [, data, ., length, +, 1, ], ;, System, ., arraycopy, (, data, ,]
[out, =, new, double, [, data, ., length, +, 1, ], ;, System, ., arraycopy, (, data, ,, 0, ,]
[new, double, [, data, ., length, +, 1, ], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,]
[[, data, ., length, +, 1, ], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,]
[[, data, ., length, +, 1, ], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,]
[1, ], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;]
[1, ], ;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;]
[;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, []
[;, System, ., arraycopy, (, data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, []
[data, ,, 0, ,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =]
[,, out, ,, 0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return]
[0, ,, data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayRealVector, (]
[data, ., length, ), ;, out, [, data, ., length, ], =, in, ;, return, new, ArrayRealVector, (, out, ,]
[}, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (]
[}, @, Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (]
[Override, public, RealVector, getSubVector, (, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <]
[(, int, index, ,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw]
[,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[,, int, n, ), throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (]
[throws, OutOfRangeException, ,, NotPositiveException, {, if, (, n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,]
[n, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (]
[(, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {]
[(, LocalizedFormats, ., NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, ,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {]
[,, n, ), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (]
[), ;, }, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (, data, ,]
[}, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (, data, ,, index, ,]
[}, ArrayRealVector, out, =, new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (, data, ,, index, ,]
[new, ArrayRealVector, (, n, ), ;, try, {, System, ., arraycopy, (, data, ,, index, ,, out, ., data, ,]
[(, n, ), ;, try, {, System, ., arraycopy, (, data, ,, index, ,, out, ., data, ,, 0, ,]
[data, ,, index, ,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {]
[index, ,, out, ., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (]
[., data, ,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;]
[,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[,, 0, ,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[,, n, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -]
[IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, n, -, 1, ), ;, }, return]
[out, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, try, {]
[out, ;, }, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, try, {]
[}, @, Override, public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, try, {, data, []
[public, void, setEntry, (, int, index, ,, double, value, ), throws, OutOfRangeException, {, try, {, data, [, index, ], =]
[), throws, OutOfRangeException, {, try, {, data, [, index, ], =, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {]
[OutOfRangeException, {, try, {, data, [, index, ], =, value, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (]
[;, }, }, @, Override, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, try, {]
[;, }, }, @, Override, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, try, {]
[}, @, Override, public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, try, {, data, []
[public, void, addToEntry, (, int, index, ,, double, increment, ), throws, OutOfRangeException, {, try, {, data, [, index, ], +=]
[throws, OutOfRangeException, {, try, {, data, [, index, ], +=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw]
[try, {, data, [, index, ], +=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (]
[try, {, data, [, index, ], +=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (]
[index, ], +=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,]
[+=, increment, ;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[;, }, catch, (, IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,]
[IndexOutOfBoundsException, e, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., INDEX, ,, index, ,, 0, ,, data, ., length, -]
[;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (]
[;, }, }, @, Override, public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (]
[public, void, setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (, v, instanceof, ArrayRealVector, ), {]
[setSubVector, (, int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (, v, instanceof, ArrayRealVector, ), {, setSubVector, (]
[int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (, v, instanceof, ArrayRealVector, ), {, setSubVector, (, index, ,]
[int, index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (, v, instanceof, ArrayRealVector, ), {, setSubVector, (, index, ,]
[index, ,, RealVector, v, ), throws, OutOfRangeException, {, if, (, v, instanceof, ArrayRealVector, ), {, setSubVector, (, index, ,, (]
[v, ), throws, OutOfRangeException, {, if, (, v, instanceof, ArrayRealVector, ), {, setSubVector, (, index, ,, (, (, ArrayRealVector, )]
[(, (, ArrayRealVector, ), v, ), ., data, ), ;, }, else, {, try, {, for, (, int, i, =]
[ArrayRealVector, ), v, ), ., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;]
[ArrayRealVector, ), v, ), ., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;]
[v, ), ., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <]
[v, ), ., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <]
[., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <, index, +]
[., data, ), ;, }, else, {, try, {, for, (, int, i, =, index, ;, i, <, index, +]
[{, try, {, for, (, int, i, =, index, ;, i, <, index, +, v, ., getDimension, (, ), ;]
[try, {, for, (, int, i, =, index, ;, i, <, index, +, v, ., getDimension, (, ), ;, ++]
[(, int, i, =, index, ;, i, <, index, +, v, ., getDimension, (, ), ;, ++, i, ), {]
[(, int, i, =, index, ;, i, <, index, +, v, ., getDimension, (, ), ;, ++, i, ), {]
[i, =, index, ;, i, <, index, +, v, ., getDimension, (, ), ;, ++, i, ), {, data, []
[;, i, <, index, +, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =]
[;, i, <, index, +, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =]
[+, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (]
[+, v, ., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (]
[., getDimension, (, ), ;, ++, i, ), {, data, [, i, ], =, v, ., getEntry, (, i, -]
[i, ], =, v, ., getEntry, (, i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {]
[=, v, ., getEntry, (, i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (]
[getEntry, (, i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;]
[i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[i, -, index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[index, ), ;, }, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[(, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, ., getDimension, (, ), -]
[}, }, }, public, void, setSubVector, (, int, index, ,, double, [, ], v, ), throws, OutOfRangeException, {, try, {]
[}, }, }, public, void, setSubVector, (, int, index, ,, double, [, ], v, ), throws, OutOfRangeException, {, try, {]
[void, setSubVector, (, int, index, ,, double, [, ], v, ), throws, OutOfRangeException, {, try, {, System, ., arraycopy, (]
[(, int, index, ,, double, [, ], v, ), throws, OutOfRangeException, {, try, {, System, ., arraycopy, (, v, ,]
[index, ,, double, [, ], v, ), throws, OutOfRangeException, {, try, {, System, ., arraycopy, (, v, ,, 0, ,]
[double, [, ], v, ), throws, OutOfRangeException, {, try, {, System, ., arraycopy, (, v, ,, 0, ,, data, ,]
[], v, ), throws, OutOfRangeException, {, try, {, System, ., arraycopy, (, v, ,, 0, ,, data, ,, index, ,]
[], v, ), throws, OutOfRangeException, {, try, {, System, ., arraycopy, (, v, ,, 0, ,, data, ,, index, ,]
[v, ,, 0, ,, data, ,, index, ,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {]
[0, ,, data, ,, index, ,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (]
[,, index, ,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;]
[,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[,, v, ., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (]
[., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[., length, ), ;, }, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +]
[}, catch, (, IndexOutOfBoundsException, e, ), {, checkIndex, (, index, ), ;, checkIndex, (, index, +, v, ., length, -]
[+, v, ., length, -, 1, ), ;, }, }, @, Override, public, void, set, (, double, value, ), {]
[+, v, ., length, -, 1, ), ;, }, }, @, Override, public, void, set, (, double, value, ), {]
[-, 1, ), ;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, ., fill, (]
[), ;, }, }, @, Override, public, void, set, (, double, value, ), {, Arrays, ., fill, (, data, ,]
[., fill, (, data, ,, value, ), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return]
[., fill, (, data, ,, value, ), ;, }, @, Override, public, double, [, ], toArray, (, ), {, return]
[(, ), {, return, data, ., clone, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[(, ), {, return, data, ., clone, (, ), ;, }, @, Override, public, String, toString, (, ), {, return]
[data, ., clone, (, ), ;, }, @, Override, public, String, toString, (, ), {, return, DEFAULT_FORMAT, ., format, (]
[DEFAULT_FORMAT, ., format, (, this, ), ;, }, @, Override, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {]
[format, (, this, ), ;, }, @, Override, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[format, (, this, ), ;, }, @, Override, protected, void, checkVectorDimensions, (, RealVector, v, ), throws, DimensionMismatchException, {, checkVectorDimensions, (]
[getDimension, (, ), ), ;, }, @, Override, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (]
[getDimension, (, ), ), ;, }, @, Override, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (]
[getDimension, (, ), ), ;, }, @, Override, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (]
[;, }, @, Override, protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length, !=]
[protected, void, checkVectorDimensions, (, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length, !=, n, ), {, throw]
[(, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length, !=, n, ), {, throw, new, DimensionMismatchException, (]
[(, int, n, ), throws, DimensionMismatchException, {, if, (, data, ., length, !=, n, ), {, throw, new, DimensionMismatchException, (]
[throws, DimensionMismatchException, {, if, (, data, ., length, !=, n, ), {, throw, new, DimensionMismatchException, (, data, ., length, ,]
[length, ,, n, ), ;, }, }, @, Override, public, boolean, isNaN, (, ), {, for, (, double, v, :]
[}, }, @, Override, public, boolean, isNaN, (, ), {, for, (, double, v, :, data, ), {, if, (]
[}, }, @, Override, public, boolean, isNaN, (, ), {, for, (, double, v, :, data, ), {, if, (]
[public, boolean, isNaN, (, ), {, for, (, double, v, :, data, ), {, if, (, Double, ., isNaN, (]
[{, for, (, double, v, :, data, ), {, if, (, Double, ., isNaN, (, v, ), ), {, return]
[:, data, ), {, if, (, Double, ., isNaN, (, v, ), ), {, return, true, ;, }, }, return]
[{, return, true, ;, }, }, return, false, ;, }, @, Override, public, boolean, isInfinite, (, ), {, if, (]
[return, false, ;, }, @, Override, public, boolean, isInfinite, (, ), {, if, (, isNaN, (, ), ), {, return]
[isInfinite, (, ), {, if, (, isNaN, (, ), ), {, return, false, ;, }, for, (, double, v, :]
[(, isNaN, (, ), ), {, return, false, ;, }, for, (, double, v, :, data, ), {, if, (]
[(, isNaN, (, ), ), {, return, false, ;, }, for, (, double, v, :, data, ), {, if, (]
[), {, return, false, ;, }, for, (, double, v, :, data, ), {, if, (, Double, ., isInfinite, (]
[}, for, (, double, v, :, data, ), {, if, (, Double, ., isInfinite, (, v, ), ), {, return]
[:, data, ), {, if, (, Double, ., isInfinite, (, v, ), ), {, return, true, ;, }, }, return]
[true, ;, }, }, return, false, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[true, ;, }, }, return, false, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[}, }, return, false, ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (, !]
[(, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (, !, (]
[(, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (, !, (]
[this, ==, other, ), {, return, true, ;, }, if, (, !, (, other, instanceof, RealVector, ), ), {, return]
[true, ;, }, if, (, !, (, other, instanceof, RealVector, ), ), {, return, false, ;, }, RealVector, rhs, =]
[if, (, !, (, other, instanceof, RealVector, ), ), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, )]
[other, instanceof, RealVector, ), ), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (]
[other, instanceof, RealVector, ), ), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (]
[other, instanceof, RealVector, ), ), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (]
[), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (, data, ., length, !=]
[), {, return, false, ;, }, RealVector, rhs, =, (, RealVector, ), other, ;, if, (, data, ., length, !=]
[=, (, RealVector, ), other, ;, if, (, data, ., length, !=, rhs, ., getDimension, (, ), ), {, return]
[;, if, (, data, ., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, if, (]
[;, if, (, data, ., length, !=, rhs, ., getDimension, (, ), ), {, return, false, ;, }, if, (]
[., getDimension, (, ), ), {, return, false, ;, }, if, (, rhs, ., isNaN, (, ), ), {, return]
[., getDimension, (, ), ), {, return, false, ;, }, if, (, rhs, ., isNaN, (, ), ), {, return]
[rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, for, (, int, i, =]
[isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;]
[isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;]
[), ), {, return, this, ., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[), ), {, return, this, ., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[this, ., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[., isNaN, (, ), ;, }, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[}, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (, data, []
[=, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (, data, [, i, ], !=]
[=, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (, data, [, i, ], !=]
[<, data, ., length, ;, ++, i, ), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (]
[++, i, ), {, if, (, data, [, i, ], !=, rhs, ., getEntry, (, i, ), ), {, return]
[(, data, [, i, ], !=, rhs, ., getEntry, (, i, ), ), {, return, false, ;, }, }, return]
[{, return, false, ;, }, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, if, (]
[return, true, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 9, ;, }, return]
[@, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 9, ;, }, return]
[hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 9, ;, }, return, MathUtils, ., hash, (]
[}, @, Override, public, ArrayRealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return]
[}, @, Override, public, ArrayRealVector, combine, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return]
[(, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, copy, (, ), ., combineToSelf, (]
[a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, copy, (, ), ., combineToSelf, (, a, ,]
[double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, return, copy, (, ), ., combineToSelf, (, a, ,, b, ,]
[@, Override, public, ArrayRealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, if, (]
[@, Override, public, ArrayRealVector, combineToSelf, (, double, a, ,, double, b, ,, RealVector, y, ), throws, DimensionMismatchException, {, if, (]
[,, RealVector, y, ), throws, DimensionMismatchException, {, if, (, y, instanceof, ArrayRealVector, ), {, final, double, [, ], yData, =]
[,, RealVector, y, ), throws, DimensionMismatchException, {, if, (, y, instanceof, ArrayRealVector, ), {, final, double, [, ], yData, =]
[RealVector, y, ), throws, DimensionMismatchException, {, if, (, y, instanceof, ArrayRealVector, ), {, final, double, [, ], yData, =, (]
[throws, DimensionMismatchException, {, if, (, y, instanceof, ArrayRealVector, ), {, final, double, [, ], yData, =, (, (, ArrayRealVector, )]
[y, instanceof, ArrayRealVector, ), {, final, double, [, ], yData, =, (, (, ArrayRealVector, ), y, ), ., data, ;]
[ArrayRealVector, ), {, final, double, [, ], yData, =, (, (, ArrayRealVector, ), y, ), ., data, ;, checkVectorDimensions, (]
[ArrayRealVector, ), {, final, double, [, ], yData, =, (, (, ArrayRealVector, ), y, ), ., data, ;, checkVectorDimensions, (]
[(, ArrayRealVector, ), y, ), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =]
[), y, ), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;]
[), y, ), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;]
[), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ., data, ;, checkVectorDimensions, (, yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <]
[yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;]
[yData, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, []
[=, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *]
[;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *]
[<, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, []
[data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +]
[data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +]
[length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *]
[length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *]
[i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, yData, []
[], =, a, *, data, [, i, ], +, b, *, yData, [, i, ], ;, }, }, else, {]
[a, *, data, [, i, ], +, b, *, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (]
[*, yData, [, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =]
[[, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;]
[[, i, ], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;]
[], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <]
[], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <]
[], ;, }, }, else, {, checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <]
[checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;]
[checkVectorDimensions, (, y, ), ;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, []
[=, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[=, 0, ;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *]
[;, i, <, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *]
[<, this, ., data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, []
[data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +]
[data, ., length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +]
[length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *]
[length, ;, i, ++, ), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *]
[), {, data, [, i, ], =, a, *, data, [, i, ], +, b, *, y, ., getEntry, (]
[=, a, *, data, [, i, ], +, b, *, y, ., getEntry, (, i, ), ;, }, }, return]
[i, ), ;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {]
[i, ), ;, }, }, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {]
[}, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (]
[}, return, this, ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (]
[}, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,]
[Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,]
[Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,]
[Override, public, double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,]
[(, final, RealVectorPreservingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,, data, ., length, -]
[start, (, data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =]
[data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;]
[data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;]
[length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, visitor, ., visit, (]
[i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, visitor, ., visit, (, i, ,]
[i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, visitor, ., visit, (, i, ,]
[0, ;, i, <, data, ., length, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, []
[length, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[length, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[double, walkInDefaultOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {]
[(, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (]
[RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (]
[throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, data, ., length, ,]
[,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, data, ., length, ,, start, ,]
[), ;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =]
[visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=]
[data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (]
[(, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,]
[(, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,]
[i, =, start, ;, i, <=, end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, []
[end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[end, ;, i, ++, ), {, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return]
[., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ), {, return, walkInDefaultOrder, (]
[walkInOptimizedOrder, (, final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return]
[final, RealVectorPreservingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (]
[visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,, start, ,]
[(, visitor, ,, start, ,, end, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {]
[(, visitor, ,, start, ,, end, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {]
[,, end, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (]
[,, end, ), ;, }, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (]
[}, @, Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,]
[Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,]
[Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,]
[Override, public, double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,]
[(, final, RealVectorChangingVisitor, visitor, ), {, visitor, ., start, (, data, ., length, ,, 0, ,, data, ., length, -]
[start, (, data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =]
[data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;]
[data, ., length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;]
[length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ,, 0, ,, data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[data, ., length, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[1, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, []
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[int, i, =, 0, ;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =]
[;, i, <, data, ., length, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,]
[<, data, ., length, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,]
[., length, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, []
[{, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[{, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[double, walkInDefaultOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {]
[(, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (]
[RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (]
[final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (]
[throws, NumberIsTooSmallException, ,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, data, ., length, ,]
[,, OutOfRangeException, {, checkIndices, (, start, ,, end, ), ;, visitor, ., start, (, data, ., length, ,, start, ,]
[), ;, visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =]
[visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[visitor, ., start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;]
[start, (, data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=]
[data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[data, ., length, ,, start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;]
[start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[start, ,, end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {]
[end, ), ;, for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, data, []
[for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, data, [, i, ], =]
[for, (, int, i, =, start, ;, i, <=, end, ;, i, ++, ), {, data, [, i, ], =]
[=, start, ;, i, <=, end, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (]
[;, i, <=, end, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,]
[;, i, <=, end, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,]
[<=, end, ;, i, ++, ), {, data, [, i, ], =, visitor, ., visit, (, i, ,, data, []
[{, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[{, data, [, i, ], =, visitor, ., visit, (, i, ,, data, [, i, ], ), ;, }, return]
[return, visitor, ., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return]
[., end, (, ), ;, }, @, Override, public, double, walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ), {, return, walkInDefaultOrder, (]
[walkInOptimizedOrder, (, final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return]
[final, RealVectorChangingVisitor, visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (]
[visitor, ,, final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,]
[final, int, start, ,, final, int, end, ), throws, NumberIsTooSmallException, ,, OutOfRangeException, {, return, walkInDefaultOrder, (, visitor, ,, start, ,]
