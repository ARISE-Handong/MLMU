[;, public, static, final, long, MILLIS_PER_MINUTE, =, 60, *, MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *, MILLIS_PER_MINUTE]
[;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =, 24, *, MILLIS_PER_HOUR]
[*, MILLIS_PER_SECOND, ;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =, 24]
[;, public, static, final, long, MILLIS_PER_HOUR, =, 60, *, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =, 24, *, MILLIS_PER_HOUR]
[;, public, static, final, long, MILLIS_PER_DAY, =, 24, *, MILLIS_PER_HOUR, ;, public, static, final, int, SEMI_MONTH, =, 1001, ;, private]
[*, MILLIS_PER_MINUTE, ;, public, static, final, long, MILLIS_PER_DAY, =, 24, *, MILLIS_PER_HOUR, ;, public, static, final, int, SEMI_MONTH, =, 1001]
[;, public, static, final, long, MILLIS_PER_DAY, =, 24, *, MILLIS_PER_HOUR, ;, public, static, final, int, SEMI_MONTH, =, 1001, ;, private]
[;, public, static, final, int, SEMI_MONTH, =, 1001, ;, private, static, final, int, [, ], [, ], fields, =, {]
[*, MILLIS_PER_HOUR, ;, public, static, final, int, SEMI_MONTH, =, 1001, ;, private, static, final, int, [, ], [, ], fields]
[;, public, static, final, int, SEMI_MONTH, =, 1001, ;, private, static, final, int, [, ], [, ], fields, =, {]
[;, private, static, final, int, [, ], [, ], fields, =, {, {, Calendar, ., MILLISECOND, }, ,, {, Calendar]
[;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final, int, RANGE_WEEK_MONDAY, =, 2, ;, public, static, final]
[,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, .]
[}, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar]
[., MILLISECOND, }, ,, {, Calendar, ., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY]
[,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, .]
[}, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar]
[., SECOND, }, ,, {, Calendar, ., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,]
[,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,]
[}, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH]
[., MINUTE, }, ,, {, Calendar, ., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar]
[,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,]
[,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,]
[., HOUR_OF_DAY, ,, Calendar, ., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM]
[}, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH]
[., HOUR, }, ,, {, Calendar, ., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar]
[,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {, Calendar, .]
[,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,]
[., DATE, ,, Calendar, ., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH]
[,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR]
[., DAY_OF_MONTH, ,, Calendar, ., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar]
[}, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {, Calendar]
[., AM_PM, }, ,, {, Calendar, ., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,]
[,, {, Calendar, ., YEAR, }, ,, {, Calendar, ., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =]
[,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {, Calendar, ., ERA, }, }, ;, public]
[., MONTH, ,, DateUtils, ., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {, Calendar, ., ERA, }, }]
[}, ,, {, Calendar, ., YEAR, }, ,, {, Calendar, ., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY]
[., SEMI_MONTH, }, ,, {, Calendar, ., YEAR, }, ,, {, Calendar, ., ERA, }, }, ;, public, static, final]
[,, {, Calendar, ., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final, int]
[}, ,, {, Calendar, ., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final]
[., YEAR, }, ,, {, Calendar, ., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public]
[}, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final, int, RANGE_WEEK_MONDAY, =, 2, ;, public, static]
[}, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final, int, RANGE_WEEK_MONDAY, =, 2, ;, public]
[., ERA, }, }, ;, public, static, final, int, RANGE_WEEK_SUNDAY, =, 1, ;, public, static, final, int, RANGE_WEEK_MONDAY, =, 2]
[;, public, static, final, int, RANGE_WEEK_MONDAY, =, 2, ;, public, static, final, int, RANGE_WEEK_RELATIVE, =, 3, ;, public, static, final]
[;, public, static, final, int, RANGE_WEEK_RELATIVE, =, 3, ;, public, static, final, int, RANGE_WEEK_CENTER, =, 4, ;, public, static, final]
[;, public, static, final, int, RANGE_WEEK_CENTER, =, 4, ;, public, static, final, int, RANGE_MONTH_SUNDAY, =, 5, ;, public, static, final]
[;, public, static, final, int, RANGE_MONTH_SUNDAY, =, 5, ;, public, static, final, int, RANGE_MONTH_MONDAY, =, 6, ;, private, static, final]
[;, public, static, final, int, RANGE_MONTH_MONDAY, =, 6, ;, private, static, final, int, MODIFY_TRUNCATE, =, 0, ;, private, static, final]
[;, private, static, final, int, MODIFY_TRUNCATE, =, 0, ;, private, static, final, int, MODIFY_ROUND, =, 1, ;, private, static, final]
[;, private, static, final, int, MODIFY_ROUND, =, 1, ;, private, static, final, int, MODIFY_CEILING, =, 2, ;, public, DateUtils, (]
[;, private, static, final, int, MODIFY_CEILING, =, 2, ;, public, DateUtils, (, ), {, super, (, ), ;, }, public]
[;, public, DateUtils, (, ), {, super, (, ), ;, }, public, static, boolean, isSameDay, (, final, Date, date1, ,]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;]
[||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, .]
[==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =]
[||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, .]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;, cal1, ., setTime, (, date1, ), ;, final]
[), ;, }, final, Calendar, cal1, =, Calendar, ., getInstance, (, ), ;, cal1, ., setTime, (, date1, ), ;]
[;, cal1, ., setTime, (, date1, ), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;, cal2, .]
[., getInstance, (, ), ;, cal1, ., setTime, (, date1, ), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (]
[;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;, cal2, ., setTime, (, date2, ), ;, return, isSameDay]
[., setTime, (, date1, ), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;, cal2, ., setTime, (]
[), ;, final, Calendar, cal2, =, Calendar, ., getInstance, (, ), ;, cal2, ., setTime, (, date2, ), ;, return]
[;, cal2, ., setTime, (, date2, ), ;, return, isSameDay, (, cal1, ,, cal2, ), ;, }, public, static, boolean]
[., getInstance, (, ), ;, cal2, ., setTime, (, date2, ), ;, return, isSameDay, (, cal1, ,, cal2, ), ;]
[;, return, isSameDay, (, cal1, ,, cal2, ), ;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final]
[., setTime, (, date2, ), ;, return, isSameDay, (, cal1, ,, cal2, ), ;, }, public, static, boolean, isSameDay, (]
[), ;, return, isSameDay, (, cal1, ,, cal2, ), ;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,]
[;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[,, cal2, ), ;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if]
[), ;, }, public, static, boolean, isSameDay, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, )]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, .]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, .]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, )]
[;, }, return, (, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA]
[), ;, }, return, (, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, .]
[;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1, ==]
[), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1]
[&&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;]
[&&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1]
[==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2]
[., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==]
[., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR]
[&&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1]
[., get, (, Calendar, ., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[., ERA, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR]
[&&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;]
[==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2]
[., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==]
[., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR]
[&&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;]
[., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), )]
[., YEAR, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR]
[), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1]
[==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1]
[., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;, }, public]
[), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;, }, public, static, boolean, isSameInstant, (, final, Date]
[., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;, }, public, static, boolean, isSameInstant, (]
[), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (, date1]
[., get, (, Calendar, ., DAY_OF_YEAR, ), ), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final]
[), ), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {, if, (]
[., DAY_OF_YEAR, ), ), ;, }, public, static, boolean, isSameInstant, (, final, Date, date1, ,, final, Date, date2, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, ), ==, date2, ., getTime]
[||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, )]
[==, null, ||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime]
[||, date2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, )]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, ), ==, date2, ., getTime]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, ), ==, date2]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, date1, ., getTime, (, ), ==, date2, ., getTime]
[;, }, return, date1, ., getTime, (, ), ==, date2, ., getTime, (, ), ;, }, public, static, boolean, isSameInstant]
[), ;, }, return, date1, ., getTime, (, ), ==, date2, ., getTime, (, ), ;, }, public, static, boolean]
[;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[==, date2, ., getTime, (, ), ;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2]
[., getTime, (, ), ==, date2, ., getTime, (, ), ;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1]
[;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[., getTime, (, ), ;, }, public, static, boolean, isSameInstant, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, ), ., getTime, (, )]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, )]
[==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, )]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, ), ., getTime, (, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, ), ., getTime]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, cal1, ., getTime, (, ), ., getTime, (, )]
[;, }, return, cal1, ., getTime, (, ), ., getTime, (, ), ==, cal2, ., getTime, (, ), ., getTime]
[), ;, }, return, cal1, ., getTime, (, ), ., getTime, (, ), ==, cal2, ., getTime, (, ), .]
[;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[==, cal2, ., getTime, (, ), ., getTime, (, ), ;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1]
[., getTime, (, ), ==, cal2, ., getTime, (, ), ., getTime, (, ), ;, }, public, static, boolean, isSameLocalTime]
[., getTime, (, ), ., getTime, (, ), ==, cal2, ., getTime, (, ), ., getTime, (, ), ;, }]
[;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {, if, (, cal1, ==]
[., getTime, (, ), ;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final, Calendar, cal2, ), {]
[., getTime, (, ), ., getTime, (, ), ;, }, public, static, boolean, isSameLocalTime, (, final, Calendar, cal1, ,, final]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, )]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[==, null, ||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, .]
[||, cal2, ==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, .]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, )]
[;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND]
[), ;, }, return, (, cal1, ., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, .]
[;, }, public, static, Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return]
[), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {]
[&&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, ), ), ;, }, public, static, Date, parseDate, (]
[&&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1]
[&&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1]
[&&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1]
[&&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1]
[&&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1]
[&&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1]
[==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2]
[., get, (, Calendar, ., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==]
[., MILLISECOND, ), ==, cal2, ., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND]
[&&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1]
[., get, (, Calendar, ., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&]
[., MILLISECOND, ), &&, cal1, ., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND]
[&&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1]
[==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2]
[., get, (, Calendar, ., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==]
[., SECOND, ), ==, cal2, ., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE]
[&&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1]
[., get, (, Calendar, ., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&]
[., SECOND, ), &&, cal1, ., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE]
[&&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1]
[==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2]
[., get, (, Calendar, ., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==]
[., MINUTE, ), ==, cal2, ., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY]
[&&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1]
[., get, (, Calendar, ., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&]
[., MINUTE, ), &&, cal1, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY]
[&&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1]
[==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2]
[., get, (, Calendar, ., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==]
[., HOUR_OF_DAY, ), ==, cal2, ., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR]
[&&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1]
[., get, (, Calendar, ., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&]
[., HOUR_OF_DAY, ), &&, cal1, ., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR]
[&&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1]
[==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2]
[., get, (, Calendar, ., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==]
[., DAY_OF_YEAR, ), ==, cal2, ., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR]
[&&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1]
[., get, (, Calendar, ., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&]
[., DAY_OF_YEAR, ), &&, cal1, ., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR]
[&&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1]
[==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2]
[., get, (, Calendar, ., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get]
[), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==]
[., YEAR, ), ==, cal2, ., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA]
[&&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1]
[., get, (, Calendar, ., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get]
[), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&]
[., YEAR, ), &&, cal1, ., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA]
[&&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, ), ), ;, }, public, static, Date, parseDate, (]
[==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (]
[., get, (, Calendar, ., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass]
[), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==, cal2, ., getClass]
[., ERA, ), ==, cal2, ., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==, cal2]
[&&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, ), ), ;, }, public, static, Date, parseDate, (]
[., get, (, Calendar, ., ERA, ), &&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, ), )]
[), &&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, ), ), ;, }, public, static, Date, parseDate]
[., ERA, ), &&, cal1, ., getClass, (, ), ==, cal2, ., getClass, (, ), ), ;, }, public, static]
[), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {]
[==, cal2, ., getClass, (, ), ), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, String]
[., getClass, (, ), ==, cal2, ., getClass, (, ), ), ;, }, public, static, Date, parseDate, (, final, String]
[), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {]
[., getClass, (, ), ), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, String, ..., parsePatterns]
[;, }, public, static, Date, parseDate, (, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, )]
[,, null, ,, parsePatterns, ), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, Locale, locale, ,]
[,, parsePatterns, ), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, Locale, locale, ,, final, String]
[), ;, }, public, static, Date, parseDate, (, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns]
[;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {, return]
[,, locale, ,, parsePatterns, ,, true, ), ;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, String]
[,, parsePatterns, ,, true, ), ;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, String, ..., parsePatterns]
[,, true, ), ;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws]
[), ;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, String, ..., parsePatterns, ), throws, ParseException, {]
[;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns, )]
[,, null, ,, parsePatterns, ), ;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, Locale, locale, ,]
[,, parsePatterns, ), ;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, Locale, locale, ,, final, String]
[), ;, }, public, static, Date, parseDateStrictly, (, final, String, str, ,, final, Locale, locale, ,, final, String, ..., parsePatterns]
[;, }, private, static, Date, parseDateWithLeniency, (, final, String, str, ,, final, Locale, locale, ,, final, String, [, ], parsePatterns]
[,, null, ,, parsePatterns, ,, false, ), ;, }, private, static, Date, parseDateWithLeniency, (, final, String, str, ,, final, Locale]
[,, parsePatterns, ,, false, ), ;, }, private, static, Date, parseDateWithLeniency, (, final, String, str, ,, final, Locale, locale, ,]
[,, false, ), ;, }, private, static, Date, parseDateWithLeniency, (, final, String, str, ,, final, Locale, locale, ,, final, String]
[), ;, }, private, static, Date, parseDateWithLeniency, (, final, String, str, ,, final, Locale, locale, ,, final, String, [, ]]
[), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {]
[||, parsePatterns, ==, null, ), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale]
[==, null, ||, parsePatterns, ==, null, ), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if]
[||, parsePatterns, ==, null, ), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale]
[), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null]
[), {, throw, new, IllegalArgumentException, (, "Date and Patterns must not be null", ), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {]
[;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {, parser, =, new, SimpleDateFormat, (, ), ;, }]
[), ;, }, SimpleDateFormat, parser, ;, if, (, locale, ==, null, ), {, parser, =, new, SimpleDateFormat, (, ), ;]
[), {, parser, =, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,, locale]
[==, null, ), {, parser, =, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (, ""]
[), {, parser, =, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,, locale]
[=, new, SimpleDateFormat, (, ), ;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,, locale, ), ;, }]
[;, }, else, {, parser, =, new, SimpleDateFormat, (, "", ,, locale, ), ;, }, parser, ., setLenient, (, lenient]
[=, new, SimpleDateFormat, (, "", ,, locale, ), ;, }, parser, ., setLenient, (, lenient, ), ;, final, ParsePosition, pos]
[;, }, parser, ., setLenient, (, lenient, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, for]
[,, locale, ), ;, }, parser, ., setLenient, (, lenient, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0]
[), ;, }, parser, ., setLenient, (, lenient, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;]
[;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, for, (, final, String, parsePattern, :, parsePatterns, ), {]
[., setLenient, (, lenient, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, for, (, final, String]
[), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, for, (, final, String, parsePattern, :, parsePatterns, )]
[;, for, (, final, String, parsePattern, :, parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (, parsePattern, ., endsWith]
[), ;, for, (, final, String, parsePattern, :, parsePatterns, ), {, String, pattern, =, parsePattern, ;, if, (, parsePattern, .]
[), {, String, pattern, =, parsePattern, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =, pattern]
[;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, pattern, =, pattern, ., substring, (, 0, ,, pattern]
[), {, pattern, =, pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }]
[., endsWith, (, "ZZ", ), ), {, pattern, =, pattern, ., substring, (, 0, ,, pattern, ., length, (, )]
[), ), {, pattern, =, pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -, 1, ), ;]
[=, pattern, ., substring, (, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }, parser, ., applyPattern]
[;, }, parser, ., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =, str]
[., substring, (, 0, ,, pattern, ., length, (, ), -, 1, ), ;, }, parser, ., applyPattern, (, pattern]
[,, pattern, ., length, (, ), -, 1, ), ;, }, parser, ., applyPattern, (, pattern, ), ;, pos, .]
[), ;, }, parser, ., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =]
[-, 1, ), ;, }, parser, ., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String]
[., length, (, ), -, 1, ), ;, }, parser, ., applyPattern, (, pattern, ), ;, pos, ., setIndex, (]
[), ;, }, parser, ., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =]
[;, pos, ., setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ"]
[., applyPattern, (, pattern, ), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (]
[), ;, pos, ., setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (]
[;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, str2, =, str, .]
[., setIndex, (, 0, ), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), )]
[), ;, String, str2, =, str, ;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, str2, =, str]
[;, if, (, parsePattern, ., endsWith, (, "ZZ", ), ), {, str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2"]
[), {, str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =, parser, .]
[., endsWith, (, "ZZ", ), ), {, str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final]
[), ), {, str2, =, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =, parser]
[=, str, ., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (, str2]
[;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (, date, !=, null]
[., replaceAll, (, "([-+][0-9][0-9]):([0-9][0-9])$", ,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos]
[,, "$1$2", ), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (]
[), ;, }, final, Date, date, =, parser, ., parse, (, str2, ,, pos, ), ;, if, (, date, !=]
[;, if, (, date, !=, null, &&, pos, ., getIndex, (, ), ==, str2, ., length, (, ), ), {]
[., parse, (, str2, ,, pos, ), ;, if, (, date, !=, null, &&, pos, ., getIndex, (, ), ==]
[,, pos, ), ;, if, (, date, !=, null, &&, pos, ., getIndex, (, ), ==, str2, ., length, (]
[), ;, if, (, date, !=, null, &&, pos, ., getIndex, (, ), ==, str2, ., length, (, ), )]
[), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str, ,, -, 1, ), ;, }]
[&&, pos, ., getIndex, (, ), ==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw]
[!=, null, &&, pos, ., getIndex, (, ), ==, str2, ., length, (, ), ), {, return, date, ;, }]
[&&, pos, ., getIndex, (, ), ==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw]
[), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str, ,, -, 1, ), ;, }]
[==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str]
[., getIndex, (, ), ==, str2, ., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException]
[), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str, ,, -, 1, ), ;, }]
[., length, (, ), ), {, return, date, ;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str, ,, -]
[;, }, }, throw, new, ParseException, (, "Unable to parse the date: ", +, str, ,, -, 1, ), ;, }, public, static, Date, addYears]
[;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, -, 1, ), ;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {]
[+, str, ,, -, 1, ), ;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount]
[,, -, 1, ), ;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {]
[), ;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[), ;, }, public, static, Date, addYears, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, Calendar, ., YEAR, ,, amount, ), ;, }, public, static, Date, addMonths, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, ), {, return]
[., YEAR, ,, amount, ), ;, }, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, addMonths, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, Calendar, ., MONTH, ,, amount, ), ;, }, public, static, Date, addWeeks, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return]
[., MONTH, ,, amount, ), ;, }, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, addWeeks, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, Calendar, ., WEEK_OF_YEAR, ,, amount, ), ;, }, public, static, Date, addDays, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, ), {, return]
[., WEEK_OF_YEAR, ,, amount, ), ;, }, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, addDays, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, Calendar, ., DAY_OF_MONTH, ,, amount, ), ;, }, public, static, Date, addHours, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, ), {, return]
[., DAY_OF_MONTH, ,, amount, ), ;, }, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, addHours, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, Calendar, ., HOUR_OF_DAY, ,, amount, ), ;, }, public, static, Date, addMinutes, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return]
[., HOUR_OF_DAY, ,, amount, ), ;, }, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, addMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, Calendar, ., MINUTE, ,, amount, ), ;, }, public, static, Date, addSeconds, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[., MINUTE, ,, amount, ), ;, }, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, addSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (, date]
[,, Calendar, ., SECOND, ,, amount, ), ;, }, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[., SECOND, ,, amount, ), ;, }, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, addMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, add, (]
[;, }, private, static, Date, add, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {]
[,, Calendar, ., MILLISECOND, ,, amount, ), ;, }, private, static, Date, add, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, private, static, Date, add, (, final, Date, date, ,, final, int, calendarField, ,, final, int]
[., MILLISECOND, ,, amount, ), ;, }, private, static, Date, add, (, final, Date, date, ,, final, int, calendarField, ,]
[), ;, }, private, static, Date, add, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, )]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (, date, ), ;, c]
[), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setTime, (, date, ), ;]
[;, c, ., setTime, (, date, ), ;, c, ., add, (, calendarField, ,, amount, ), ;, return, c, .]
[., getInstance, (, ), ;, c, ., setTime, (, date, ), ;, c, ., add, (, calendarField, ,, amount, )]
[;, c, ., add, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public, static]
[., setTime, (, date, ), ;, c, ., add, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (]
[), ;, c, ., add, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public]
[;, return, c, ., getTime, (, ), ;, }, public, static, Date, setYears, (, final, Date, date, ,, final, int]
[., add, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public, static, Date, setYears]
[,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public, static, Date, setYears, (, final, Date, date]
[), ;, return, c, ., getTime, (, ), ;, }, public, static, Date, setYears, (, final, Date, date, ,, final]
[;, }, public, static, Date, setYears, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date]
[., getTime, (, ), ;, }, public, static, Date, setYears, (, final, Date, date, ,, final, int, amount, ), {]
[;, }, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date]
[,, Calendar, ., YEAR, ,, amount, ), ;, }, public, static, Date, setMonths, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, ), {, return]
[., YEAR, ,, amount, ), ;, }, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, setMonths, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[;, }, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date]
[,, Calendar, ., MONTH, ,, amount, ), ;, }, public, static, Date, setDays, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, ), {, return]
[., MONTH, ,, amount, ), ;, }, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, setDays, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[;, }, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date]
[,, Calendar, ., DAY_OF_MONTH, ,, amount, ), ;, }, public, static, Date, setHours, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, ), {, return]
[., DAY_OF_MONTH, ,, amount, ), ;, }, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, setHours, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[;, }, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date]
[,, Calendar, ., HOUR_OF_DAY, ,, amount, ), ;, }, public, static, Date, setMinutes, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return]
[., HOUR_OF_DAY, ,, amount, ), ;, }, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, setMinutes, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[;, }, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date]
[,, Calendar, ., MINUTE, ,, amount, ), ;, }, public, static, Date, setSeconds, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[., MINUTE, ,, amount, ), ;, }, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, setSeconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[;, }, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (, date]
[,, Calendar, ., SECOND, ,, amount, ), ;, }, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return]
[., SECOND, ,, amount, ), ;, }, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, )]
[), ;, }, public, static, Date, setMilliseconds, (, final, Date, date, ,, final, int, amount, ), {, return, set, (]
[;, }, private, static, Date, set, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, ), {]
[,, Calendar, ., MILLISECOND, ,, amount, ), ;, }, private, static, Date, set, (, final, Date, date, ,, final, int]
[,, amount, ), ;, }, private, static, Date, set, (, final, Date, date, ,, final, int, calendarField, ,, final, int]
[., MILLISECOND, ,, amount, ), ;, }, private, static, Date, set, (, final, Date, date, ,, final, int, calendarField, ,]
[), ;, }, private, static, Date, set, (, final, Date, date, ,, final, int, calendarField, ,, final, int, amount, )]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;, c]
[), ;, }, final, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;]
[;, c, ., setLenient, (, false, ), ;, c, ., setTime, (, date, ), ;, c, ., set, (, calendarField]
[., getInstance, (, ), ;, c, ., setLenient, (, false, ), ;, c, ., setTime, (, date, ), ;, c]
[;, c, ., setTime, (, date, ), ;, c, ., set, (, calendarField, ,, amount, ), ;, return, c, .]
[., setLenient, (, false, ), ;, c, ., setTime, (, date, ), ;, c, ., set, (, calendarField, ,, amount]
[), ;, c, ., setTime, (, date, ), ;, c, ., set, (, calendarField, ,, amount, ), ;, return, c]
[;, c, ., set, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public, static]
[., setTime, (, date, ), ;, c, ., set, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (]
[), ;, c, ., set, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public]
[;, return, c, ., getTime, (, ), ;, }, public, static, Calendar, toCalendar, (, final, Date, date, ), {, final]
[., set, (, calendarField, ,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public, static, Calendar, toCalendar]
[,, amount, ), ;, return, c, ., getTime, (, ), ;, }, public, static, Calendar, toCalendar, (, final, Date, date]
[), ;, return, c, ., getTime, (, ), ;, }, public, static, Calendar, toCalendar, (, final, Date, date, ), {]
[;, }, public, static, Calendar, toCalendar, (, final, Date, date, ), {, final, Calendar, c, =, Calendar, ., getInstance, (]
[., getTime, (, ), ;, }, public, static, Calendar, toCalendar, (, final, Date, date, ), {, final, Calendar, c, =]
[;, c, ., setTime, (, date, ), ;, return, c, ;, }, public, static, Date, round, (, final, Date, date]
[., getInstance, (, ), ;, c, ., setTime, (, date, ), ;, return, c, ;, }, public, static, Date, round]
[;, return, c, ;, }, public, static, Date, round, (, final, Date, date, ,, final, int, field, ), {, if]
[., setTime, (, date, ), ;, return, c, ;, }, public, static, Date, round, (, final, Date, date, ,, final]
[), ;, return, c, ;, }, public, static, Date, round, (, final, Date, date, ,, final, int, field, ), {]
[;, }, public, static, Date, round, (, final, Date, date, ,, final, int, field, ), {, if, (, date, ==]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify]
[), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;]
[;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_ROUND, ), ;, return, gval, .]
[., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_ROUND, )]
[;, modify, (, gval, ,, field, ,, MODIFY_ROUND, ), ;, return, gval, ., getTime, (, ), ;, }, public, static]
[., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_ROUND, ), ;, return, gval, ., getTime, (]
[), ;, modify, (, gval, ,, field, ,, MODIFY_ROUND, ), ;, return, gval, ., getTime, (, ), ;, }, public]
[;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, round, (, final, Calendar, date, ,, final, int]
[,, field, ,, MODIFY_ROUND, ), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, round, (, final]
[,, MODIFY_ROUND, ), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, round, (, final, Calendar, date]
[), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, round, (, final, Calendar, date, ,, final]
[;, }, public, static, Calendar, round, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==]
[., getTime, (, ), ;, }, public, static, Calendar, round, (, final, Calendar, date, ,, final, int, field, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, rounded, =, (, Calendar, ), date, ., clone]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, rounded, =, (, Calendar, ), date]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, rounded, =, (, Calendar, ), date, ., clone]
[;, }, final, Calendar, rounded, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, rounded, ,, field]
[), ;, }, final, Calendar, rounded, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, rounded, ,]
[;, modify, (, rounded, ,, field, ,, MODIFY_ROUND, ), ;, return, rounded, ;, }, public, static, Date, round, (, final]
[;, modify, (, rounded, ,, field, ,, MODIFY_ROUND, ), ;, return, rounded, ;, }, public, static, Date, round, (, final]
[., clone, (, ), ;, modify, (, rounded, ,, field, ,, MODIFY_ROUND, ), ;, return, rounded, ;, }, public, static]
[;, return, rounded, ;, }, public, static, Date, round, (, final, Object, date, ,, final, int, field, ), {, if]
[,, field, ,, MODIFY_ROUND, ), ;, return, rounded, ;, }, public, static, Date, round, (, final, Object, date, ,, final]
[,, MODIFY_ROUND, ), ;, return, rounded, ;, }, public, static, Date, round, (, final, Object, date, ,, final, int, field]
[), ;, return, rounded, ;, }, public, static, Date, round, (, final, Object, date, ,, final, int, field, ), {]
[;, }, public, static, Date, round, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, round, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, round, (]
[;, }, if, (, date, instanceof, Date, ), {, return, round, (, (, Date, ), date, ,, field, ), ;]
[), ;, }, if, (, date, instanceof, Date, ), {, return, round, (, (, Date, ), date, ,, field, )]
[), {, return, round, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar]
[instanceof, Date, ), {, return, round, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date]
[;, }, else, if, (, date, instanceof, Calendar, ), {, return, round, (, (, Calendar, ), date, ,, field, )]
[,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, round, (, (, Calendar, ), date]
[,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, round, (, (, Calendar, ), date]
[), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, round, (, (, Calendar, ), date, ,, field]
[), {, return, round, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {]
[instanceof, Calendar, ), {, return, round, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }]
[;, }, else, {, throw, new, ClassCastException, (, "Could not round ", +, date, ), ;, }, }, public, static, Date, truncate, (]
[., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not round ", +, date, ), ;, }, }, public]
[,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not round ", +, date, ), ;]
[,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not round ", +, date, ), ;]
[), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not round ", +, date, ), ;, }, }]
[;, }, }, public, static, Date, truncate, (, final, Date, date, ,, final, int, field, ), {, if, (, date]
[), ;, }, }, public, static, Date, truncate, (, final, Date, date, ,, final, int, field, ), {, if, (]
[+, date, ), ;, }, }, public, static, Date, truncate, (, final, Date, date, ,, final, int, field, ), {]
[), ;, }, }, public, static, Date, truncate, (, final, Date, date, ,, final, int, field, ), {, if, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify]
[), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;]
[;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, ), ;, return, gval, .]
[., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, )]
[;, modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, ), ;, return, gval, ., getTime, (, ), ;, }, public, static]
[., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, ), ;, return, gval, ., getTime, (]
[), ;, modify, (, gval, ,, field, ,, MODIFY_TRUNCATE, ), ;, return, gval, ., getTime, (, ), ;, }, public]
[;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, truncate, (, final, Calendar, date, ,, final, int]
[,, field, ,, MODIFY_TRUNCATE, ), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, truncate, (, final]
[,, MODIFY_TRUNCATE, ), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, truncate, (, final, Calendar, date]
[), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, truncate, (, final, Calendar, date, ,, final]
[;, }, public, static, Calendar, truncate, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==]
[., getTime, (, ), ;, }, public, static, Calendar, truncate, (, final, Calendar, date, ,, final, int, field, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, truncated, =, (, Calendar, ), date, ., clone]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, truncated, =, (, Calendar, ), date]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, truncated, =, (, Calendar, ), date, ., clone]
[;, }, final, Calendar, truncated, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, truncated, ,, field]
[), ;, }, final, Calendar, truncated, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, truncated, ,]
[;, modify, (, truncated, ,, field, ,, MODIFY_TRUNCATE, ), ;, return, truncated, ;, }, public, static, Date, truncate, (, final]
[;, modify, (, truncated, ,, field, ,, MODIFY_TRUNCATE, ), ;, return, truncated, ;, }, public, static, Date, truncate, (, final]
[., clone, (, ), ;, modify, (, truncated, ,, field, ,, MODIFY_TRUNCATE, ), ;, return, truncated, ;, }, public, static]
[;, return, truncated, ;, }, public, static, Date, truncate, (, final, Object, date, ,, final, int, field, ), {, if]
[,, field, ,, MODIFY_TRUNCATE, ), ;, return, truncated, ;, }, public, static, Date, truncate, (, final, Object, date, ,, final]
[,, MODIFY_TRUNCATE, ), ;, return, truncated, ;, }, public, static, Date, truncate, (, final, Object, date, ,, final, int, field]
[), ;, return, truncated, ;, }, public, static, Date, truncate, (, final, Object, date, ,, final, int, field, ), {]
[;, }, public, static, Date, truncate, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, truncate, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, truncate, (]
[;, }, if, (, date, instanceof, Date, ), {, return, truncate, (, (, Date, ), date, ,, field, ), ;]
[), ;, }, if, (, date, instanceof, Date, ), {, return, truncate, (, (, Date, ), date, ,, field, )]
[), {, return, truncate, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar]
[instanceof, Date, ), {, return, truncate, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date]
[;, }, else, if, (, date, instanceof, Calendar, ), {, return, truncate, (, (, Calendar, ), date, ,, field, )]
[,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, truncate, (, (, Calendar, ), date]
[,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, truncate, (, (, Calendar, ), date]
[), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, truncate, (, (, Calendar, ), date, ,, field]
[), {, return, truncate, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {]
[instanceof, Calendar, ), {, return, truncate, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }]
[;, }, else, {, throw, new, ClassCastException, (, "Could not truncate ", +, date, ), ;, }, }, public, static, Date, ceiling, (]
[., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not truncate ", +, date, ), ;, }, }, public]
[,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not truncate ", +, date, ), ;]
[,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not truncate ", +, date, ), ;]
[), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not truncate ", +, date, ), ;, }, }]
[;, }, }, public, static, Date, ceiling, (, final, Date, date, ,, final, int, field, ), {, if, (, date]
[), ;, }, }, public, static, Date, ceiling, (, final, Date, date, ,, final, int, field, ), {, if, (]
[+, date, ), ;, }, }, public, static, Date, ceiling, (, final, Date, date, ,, final, int, field, ), {]
[), ;, }, }, public, static, Date, ceiling, (, final, Date, date, ,, final, int, field, ), {, if, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify]
[), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;]
[;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_CEILING, ), ;, return, gval, .]
[., getInstance, (, ), ;, gval, ., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_CEILING, )]
[;, modify, (, gval, ,, field, ,, MODIFY_CEILING, ), ;, return, gval, ., getTime, (, ), ;, }, public, static]
[., setTime, (, date, ), ;, modify, (, gval, ,, field, ,, MODIFY_CEILING, ), ;, return, gval, ., getTime, (]
[), ;, modify, (, gval, ,, field, ,, MODIFY_CEILING, ), ;, return, gval, ., getTime, (, ), ;, }, public]
[;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, ceiling, (, final, Calendar, date, ,, final, int]
[,, field, ,, MODIFY_CEILING, ), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, ceiling, (, final]
[,, MODIFY_CEILING, ), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, ceiling, (, final, Calendar, date]
[), ;, return, gval, ., getTime, (, ), ;, }, public, static, Calendar, ceiling, (, final, Calendar, date, ,, final]
[;, }, public, static, Calendar, ceiling, (, final, Calendar, date, ,, final, int, field, ), {, if, (, date, ==]
[., getTime, (, ), ;, }, public, static, Calendar, ceiling, (, final, Calendar, date, ,, final, int, field, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, ceiled, =, (, Calendar, ), date]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone]
[;, }, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, ceiled, ,, field]
[), ;, }, final, Calendar, ceiled, =, (, Calendar, ), date, ., clone, (, ), ;, modify, (, ceiled, ,]
[;, modify, (, ceiled, ,, field, ,, MODIFY_CEILING, ), ;, return, ceiled, ;, }, public, static, Date, ceiling, (, final]
[;, modify, (, ceiled, ,, field, ,, MODIFY_CEILING, ), ;, return, ceiled, ;, }, public, static, Date, ceiling, (, final]
[., clone, (, ), ;, modify, (, ceiled, ,, field, ,, MODIFY_CEILING, ), ;, return, ceiled, ;, }, public, static]
[;, return, ceiled, ;, }, public, static, Date, ceiling, (, final, Object, date, ,, final, int, field, ), {, if]
[,, field, ,, MODIFY_CEILING, ), ;, return, ceiled, ;, }, public, static, Date, ceiling, (, final, Object, date, ,, final]
[,, MODIFY_CEILING, ), ;, return, ceiled, ;, }, public, static, Date, ceiling, (, final, Object, date, ,, final, int, field]
[), ;, return, ceiled, ;, }, public, static, Date, ceiling, (, final, Object, date, ,, final, int, field, ), {]
[;, }, public, static, Date, ceiling, (, final, Object, date, ,, final, int, field, ), {, if, (, date, ==]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, ceiling, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, date, instanceof, Date, ), {, return, ceiling, (]
[;, }, if, (, date, instanceof, Date, ), {, return, ceiling, (, (, Date, ), date, ,, field, ), ;]
[), ;, }, if, (, date, instanceof, Date, ), {, return, ceiling, (, (, Date, ), date, ,, field, )]
[), {, return, ceiling, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date, instanceof, Calendar]
[instanceof, Date, ), {, return, ceiling, (, (, Date, ), date, ,, field, ), ;, }, else, if, (, date]
[;, }, else, if, (, date, instanceof, Calendar, ), {, return, ceiling, (, (, Calendar, ), date, ,, field, )]
[,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, ceiling, (, (, Calendar, ), date]
[,, field, ), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, ceiling, (, (, Calendar, ), date]
[), ;, }, else, if, (, date, instanceof, Calendar, ), {, return, ceiling, (, (, Calendar, ), date, ,, field]
[), {, return, ceiling, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }, else, {]
[instanceof, Calendar, ), {, return, ceiling, (, (, Calendar, ), date, ,, field, ), ., getTime, (, ), ;, }]
[;, }, else, {, throw, new, ClassCastException, (, "Could not find ceiling of for type: ", +, date, ., getClass, (, ), ), ;, }, }, private]
[., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not find ceiling of for type: ", +, date, ., getClass, (, ), )]
[,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not find ceiling of for type: ", +, date, ., getClass]
[,, field, ), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not find ceiling of for type: ", +, date, ., getClass]
[), ., getTime, (, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not find ceiling of for type: ", +, date, ., getClass, (, )]
[;, }, }, private, static, void, modify, (, final, Calendar, val, ,, final, int, field, ,, final, int, modType, )]
[), ;, }, }, private, static, void, modify, (, final, Calendar, val, ,, final, int, field, ,, final, int, modType]
[+, date, ., getClass, (, ), ), ;, }, }, private, static, void, modify, (, final, Calendar, val, ,, final]
[), ;, }, }, private, static, void, modify, (, final, Calendar, val, ,, final, int, field, ,, final, int, modType]
[., getClass, (, ), ), ;, }, }, private, static, void, modify, (, final, Calendar, val, ,, final, int, field]
[), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==, Calendar, ., MILLISECOND, ), {, return]
[>, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==, Calendar, ., MILLISECOND, )]
[., get, (, Calendar, ., YEAR, ), >, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if]
[), >, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==, Calendar, ., MILLISECOND]
[., YEAR, ), >, 280000000, ), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==, Calendar]
[), {, throw, new, ArithmeticException, (, "Calendar value too large for accurate calculations", ), ;, }, if, (, field, ==, Calendar, ., MILLISECOND, ), {, return]
[;, }, if, (, field, ==, Calendar, ., MILLISECOND, ), {, return, ;, }, final, Date, date, =, val, .]
[), ;, }, if, (, field, ==, Calendar, ., MILLISECOND, ), {, return, ;, }, final, Date, date, =, val]
[), {, return, ;, }, final, Date, date, =, val, ., getTime, (, ), ;, long, time, =, date, .]
[==, Calendar, ., MILLISECOND, ), {, return, ;, }, final, Date, date, =, val, ., getTime, (, ), ;, long]
[), {, return, ;, }, final, Date, date, =, val, ., getTime, (, ), ;, long, time, =, date, .]
[., MILLISECOND, ), {, return, ;, }, final, Date, date, =, val, ., getTime, (, ), ;, long, time, =]
[;, long, time, =, date, ., getTime, (, ), ;, boolean, done, =, false, ;, final, int, millisecs, =, val]
[., getTime, (, ), ;, long, time, =, date, ., getTime, (, ), ;, boolean, done, =, false, ;, final]
[;, boolean, done, =, false, ;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if]
[., getTime, (, ), ;, boolean, done, =, false, ;, final, int, millisecs, =, val, ., get, (, Calendar, .]
[;, final, int, millisecs, =, val, ., get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||]
[;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if]
[., get, (, Calendar, ., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time]
[), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }]
[., MILLISECOND, ), ;, if, (, MODIFY_TRUNCATE, ==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs]
[), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =]
[||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND]
[==, modType, ||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar]
[||, millisecs, <, 500, ), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND]
[), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =]
[<, 500, ), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {]
[), {, time, =, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =]
[=, time, -, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }]
[;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =]
[-, millisecs, ;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int]
[;, }, if, (, field, ==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =]
[), {, done, =, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;]
[==, Calendar, ., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar]
[), {, done, =, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;]
[., SECOND, ), {, done, =, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND]
[=, true, ;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !]
[;, }, final, int, seconds, =, val, ., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&]
[;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =, time]
[., get, (, Calendar, ., SECOND, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <]
[), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =]
[., SECOND, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {]
[), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, ., MINUTE]
[&&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L]
[&&, (, MODIFY_TRUNCATE, ==, modType, ||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L]
[), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, ., MINUTE]
[), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, .]
[||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (]
[==, modType, ||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }]
[||, seconds, <, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (]
[), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, .]
[<, 30, ), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==]
[), ), {, time, =, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, .]
[=, time, -, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done]
[;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =]
[-, (, seconds, *, 1000L, ), ;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true]
[;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =]
[), ;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes]
[*, 1000L, ), ;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final]
[), ;, }, if, (, field, ==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes]
[), {, done, =, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;]
[==, Calendar, ., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar]
[), {, done, =, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;]
[., MINUTE, ), {, done, =, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE]
[=, true, ;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !]
[;, }, final, int, minutes, =, val, ., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&]
[;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =, time]
[., get, (, Calendar, ., MINUTE, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <]
[), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =]
[., MINUTE, ), ;, if, (, !, done, &&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {]
[), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (, )]
[&&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L]
[&&, (, MODIFY_TRUNCATE, ==, modType, ||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L]
[), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (, )]
[), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (]
[||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (]
[==, modType, ||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }]
[||, minutes, <, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (]
[), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (]
[<, 30, ), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, .]
[), ), {, time, =, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (]
[=, time, -, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (, ), !=, time, )]
[;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, ), ;]
[-, (, minutes, *, 60000L, ), ;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date]
[;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, ), ;]
[), ;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, )]
[*, 60000L, ), ;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (]
[), ;, }, if, (, date, ., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, )]
[), {, date, ., setTime, (, time, ), ;, val, ., setTime, (, date, ), ;, }, boolean, roundUp, =]
[!=, time, ), {, date, ., setTime, (, time, ), ;, val, ., setTime, (, date, ), ;, }, boolean]
[., getTime, (, ), !=, time, ), {, date, ., setTime, (, time, ), ;, val, ., setTime, (, date]
[), {, date, ., setTime, (, time, ), ;, val, ., setTime, (, date, ), ;, }, boolean, roundUp, =]
[;, val, ., setTime, (, date, ), ;, }, boolean, roundUp, =, false, ;, for, (, final, int, [, ]]
[., setTime, (, time, ), ;, val, ., setTime, (, date, ), ;, }, boolean, roundUp, =, false, ;, for]
[), ;, val, ., setTime, (, date, ), ;, }, boolean, roundUp, =, false, ;, for, (, final, int, []
[;, }, boolean, roundUp, =, false, ;, for, (, final, int, [, ], aField, :, fields, ), {, for, (]
[., setTime, (, date, ), ;, }, boolean, roundUp, =, false, ;, for, (, final, int, [, ], aField, :]
[), ;, }, boolean, roundUp, =, false, ;, for, (, final, int, [, ], aField, :, fields, ), {, for]
[;, for, (, final, int, [, ], aField, :, fields, ), {, for, (, final, int, element, :, aField, )]
[), {, for, (, final, int, element, :, aField, ), {, if, (, element, ==, field, ), {, if, (]
[), {, if, (, element, ==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&]
[), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field]
[==, field, ), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if]
[), {, if, (, modType, ==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field]
[), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, ., DATE]
[||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if]
[==, MODIFY_CEILING, ||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, )]
[||, (, modType, ==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if]
[), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, ., DATE]
[), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, .]
[&&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (]
[==, MODIFY_ROUND, &&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, .]
[&&, roundUp, ), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (]
[), ), {, if, (, field, ==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, .]
[), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {, val, ., add, (]
[==, DateUtils, ., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {]
[), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {, val, ., add, (]
[., SEMI_MONTH, ), {, if, (, val, ., get, (, Calendar, ., DATE, ), ==, 1, ), {, val, .]
[), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, ., add, (]
[==, 1, ), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, .]
[., get, (, Calendar, ., DATE, ), ==, 1, ), {, val, ., add, (, Calendar, ., DATE, ,, 15]
[), ==, 1, ), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val]
[., DATE, ), ==, 1, ), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else]
[), {, val, ., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, ., add, (]
[;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;, val, ., add, (]
[., add, (, Calendar, ., DATE, ,, 15, ), ;, }, else, {, val, ., add, (, Calendar, ., DATE]
[,, 15, ), ;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;, val]
[., DATE, ,, 15, ), ;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, )]
[), ;, }, else, {, val, ., add, (, Calendar, ., DATE, ,, -, 15, ), ;, val, ., add]
[;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==, Calendar]
[., add, (, Calendar, ., DATE, ,, -, 15, ), ;, val, ., add, (, Calendar, ., MONTH, ,, 1]
[,, -, 15, ), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if]
[., DATE, ,, -, 15, ), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }]
[), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==]
[), ;, val, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==]
[;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (, Calendar]
[., add, (, Calendar, ., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM]
[,, 1, ), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (, val, .]
[., MONTH, ,, 1, ), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (]
[), ;, }, }, else, if, (, field, ==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (]
[), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (]
[==, Calendar, ., AM_PM, ), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {]
[), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (]
[., AM_PM, ), {, if, (, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {, val, .]
[), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (]
[==, 0, ), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, .]
[., get, (, Calendar, ., HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12]
[), ==, 0, ), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val]
[., HOUR_OF_DAY, ), ==, 0, ), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else]
[), {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (]
[;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;, val, ., add, (]
[., add, (, Calendar, ., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY]
[,, 12, ), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;, val]
[., HOUR_OF_DAY, ,, 12, ), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, )]
[), ;, }, else, {, val, ., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;, val, ., add]
[;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add, (]
[., add, (, Calendar, ., HOUR_OF_DAY, ,, -, 12, ), ;, val, ., add, (, Calendar, ., DATE, ,, 1]
[,, -, 12, ), ;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {]
[., HOUR_OF_DAY, ,, -, 12, ), ;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }]
[), ;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add]
[), ;, val, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add]
[;, }, }, else, {, val, ., add, (, aField, [, 0, ], ,, 1, ), ;, }, }, return]
[., add, (, Calendar, ., DATE, ,, 1, ), ;, }, }, else, {, val, ., add, (, aField, []
[,, 1, ), ;, }, }, else, {, val, ., add, (, aField, [, 0, ], ,, 1, ), ;]
[., DATE, ,, 1, ), ;, }, }, else, {, val, ., add, (, aField, [, 0, ], ,, 1]
[), ;, }, }, else, {, val, ., add, (, aField, [, 0, ], ,, 1, ), ;, }, }]
[;, }, }, return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =, false, ;, switch, (, field]
[., add, (, aField, [, 0, ], ,, 1, ), ;, }, }, return, ;, }, }, int, offset, =]
[,, 1, ), ;, }, }, return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =, false, ;]
[[, 0, ], ,, 1, ), ;, }, }, return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet]
[], ,, 1, ), ;, }, }, return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =, false]
[), ;, }, }, return, ;, }, }, int, offset, =, 0, ;, boolean, offsetSet, =, false, ;, switch, (]
[;, boolean, offsetSet, =, false, ;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, []
[;, switch, (, field, ), {, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, .]
[), {, case, DateUtils, ., SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset]
[:, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset, =, val, ., get, (, Calendar]
[., SEMI_MONTH, :, if, (, aField, [, 0, ], ==, Calendar, ., DATE, ), {, offset, =, val, ., get]
[), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=, 15]
[==, Calendar, ., DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if]
[[, 0, ], ==, Calendar, ., DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -]
[], ==, Calendar, ., DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;]
[), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=, 15]
[., DATE, ), {, offset, =, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset]
[=, val, ., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {, offset]
[;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet]
[-, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7]
[., get, (, Calendar, ., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15]
[), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >]
[., DATE, ), -, 1, ;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =]
[;, if, (, offset, >=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet]
[), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;]
[>=, 15, ), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }]
[), {, offset, -=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;]
[-=, 15, ;, }, roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, .]
[;, }, roundUp, =, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :]
[=, offset, >, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField]
[;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==]
[>, 7, ;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0]
[;, offsetSet, =, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==]
[=, true, ;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, .]
[;, }, break, ;, case, Calendar, ., AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, )]
[:, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar]
[., AM_PM, :, if, (, aField, [, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get]
[), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {]
[==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset]
[[, 0, ], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;]
[], ==, Calendar, ., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (]
[), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {]
[., HOUR_OF_DAY, ), {, offset, =, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12]
[=, val, ., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=, 12]
[;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet]
[., get, (, Calendar, ., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }]
[), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =, offset, >=, 6, ;]
[., HOUR_OF_DAY, ), ;, if, (, offset, >=, 12, ), {, offset, -=, 12, ;, }, roundUp, =, offset, >=]
[), {, offset, -=, 12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =, true, ;, }, break, ;]
[>=, 12, ), {, offset, -=, 12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =, true, ;, }]
[), {, offset, -=, 12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =, true, ;, }, break, ;]
[-=, 12, ;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (]
[;, }, roundUp, =, offset, >=, 6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (, !, offsetSet]
[=, offset, >=, 6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final]
[;, offsetSet, =, true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =, val]
[>=, 6, ;, offsetSet, =, true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min]
[;, offsetSet, =, true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =, val]
[=, true, ;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =, val, ., getActualMinimum]
[;, }, break, ;, }, if, (, !, offsetSet, ), {, final, int, min, =, val, ., getActualMinimum, (, aField]
[), {, final, int, min, =, val, ., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =]
[), {, final, int, min, =, val, ., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =]
[;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val, ., get]
[., getActualMinimum, (, aField, [, 0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0]
[), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val, .]
[[, 0, ], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset]
[], ), ;, final, int, max, =, val, ., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val]
[;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (]
[., getActualMaximum, (, aField, [, 0, ], ), ;, offset, =, val, ., get, (, aField, [, 0, ], )]
[), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >]
[[, 0, ], ), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp]
[], ), ;, offset, =, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset]
[=, val, ., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (, (, max]
[;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (, offset, !=]
[-, min, ;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (]
[., get, (, aField, [, 0, ], ), -, min, ;, roundUp, =, offset, >, (, (, max, -, min]
[), -, min, ;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if]
[[, 0, ], ), -, min, ;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, )]
[], ), -, min, ;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }]
[;, roundUp, =, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (, offset, !=]
[=, offset, >, (, (, max, -, min, ), /, 2, ), ;, }, if, (, offset, !=, 0, )]
[;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val, .]
[>, (, (, max, -, min, ), /, 2, ), ;, }, if, (, offset, !=, 0, ), {, val]
[;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val, .]
[), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val]
[/, 2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ]]
[), /, 2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0]
[-, min, ), /, 2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField]
[), /, 2, ), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0]
[), ;, }, if, (, offset, !=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val]
[), {, val, ., set, (, aField, [, 0, ], ,, val, ., get, (, aField, [, 0, ], )]
[!=, 0, ), {, val, ., set, (, aField, [, 0, ], ,, val, ., get, (, aField, [, 0]
[), {, val, ., set, (, aField, [, 0, ], ,, val, ., get, (, aField, [, 0, ], )]
[;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", ), ;, }, public, static, Iterator, <, Calendar]
[., set, (, aField, [, 0, ], ,, val, ., get, (, aField, [, 0, ], ), -, offset, )]
[,, val, ., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (]
[[, 0, ], ,, val, ., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw]
[], ,, val, ., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException]
[), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", ), ;, }, public, static, Iterator, <]
[-, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", ), ;, }, public, static]
[., get, (, aField, [, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +]
[), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", ), ;, }, public]
[[, 0, ], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", )]
[], ), -, offset, ), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", ), ;, }]
[), ;, }, }, throw, new, IllegalArgumentException, (, "The field ", +, field, +, " is not supported", ), ;, }, public, static, Iterator, <]
[;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle, ), {, if]
[), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle, ), {]
[+, " is not supported", ), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle]
[+, field, +, " is not supported", ), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final]
[+, " is not supported", ), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle]
[), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Date, focus, ,, final, int, rangeStyle, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, focus, ), ;, return]
[), ;, }, final, Calendar, gval, =, Calendar, ., getInstance, (, ), ;, gval, ., setTime, (, focus, ), ;]
[;, gval, ., setTime, (, focus, ), ;, return, iterator, (, gval, ,, rangeStyle, ), ;, }, public, static, Iterator]
[., getInstance, (, ), ;, gval, ., setTime, (, focus, ), ;, return, iterator, (, gval, ,, rangeStyle, ), ;]
[;, return, iterator, (, gval, ,, rangeStyle, ), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Calendar]
[., setTime, (, focus, ), ;, return, iterator, (, gval, ,, rangeStyle, ), ;, }, public, static, Iterator, <, Calendar]
[), ;, return, iterator, (, gval, ,, rangeStyle, ), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final]
[;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Calendar, focus, ,, final, int, rangeStyle, ), {, if]
[,, rangeStyle, ), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Calendar, focus, ,, final, int, rangeStyle]
[), ;, }, public, static, Iterator, <, Calendar, >, iterator, (, final, Calendar, focus, ,, final, int, rangeStyle, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, Calendar, start, =, null, ;, Calendar, end, =, null, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, Calendar, start, =, null, ;, Calendar, end, =]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, Calendar, start, =, null, ;, Calendar, end, =, null, ;]
[;, }, Calendar, start, =, null, ;, Calendar, end, =, null, ;, int, startCutoff, =, Calendar, ., SUNDAY, ;, int]
[), ;, }, Calendar, start, =, null, ;, Calendar, end, =, null, ;, int, startCutoff, =, Calendar, ., SUNDAY, ;]
[;, Calendar, end, =, null, ;, int, startCutoff, =, Calendar, ., SUNDAY, ;, int, endCutoff, =, Calendar, ., SATURDAY, ;]
[;, int, startCutoff, =, Calendar, ., SUNDAY, ;, int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {]
[;, int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start]
[., SUNDAY, ;, int, endCutoff, =, Calendar, ., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY]
[;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,, Calendar, .]
[., SATURDAY, ;, switch, (, rangeStyle, ), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,]
[), {, case, RANGE_MONTH_SUNDAY, :, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end]
[:, case, RANGE_MONTH_MONDAY, :, start, =, truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, )]
[:, start, =, truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone]
[=, truncate, (, focus, ,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone, (, )]
[;, end, =, (, Calendar, ), start, ., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,]
[,, Calendar, ., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone, (, ), ;, end, ., add]
[), ;, end, =, (, Calendar, ), start, ., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH]
[., MONTH, ), ;, end, =, (, Calendar, ), start, ., clone, (, ), ;, end, ., add, (, Calendar]
[=, (, Calendar, ), start, ., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,, 1, )]
[;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,]
[;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,]
[., clone, (, ), ;, end, ., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (]
[;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {]
[., add, (, Calendar, ., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,, -, 1]
[,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==]
[., MONTH, ,, 1, ), ;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (]
[), ;, end, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, )]
[;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;]
[., add, (, Calendar, ., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =]
[,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =]
[., DATE, ,, -, 1, ), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;]
[), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY]
[), ;, if, (, rangeStyle, ==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY]
[), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :]
[==, RANGE_MONTH_MONDAY, ), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case]
[), {, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :]
[=, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :]
[;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case]
[., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE]
[=, Calendar, ., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :]
[;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (]
[., SUNDAY, ;, }, break, ;, case, RANGE_WEEK_SUNDAY, :, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =]
[:, case, RANGE_WEEK_MONDAY, :, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, )]
[:, case, RANGE_WEEK_RELATIVE, :, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =]
[:, case, RANGE_WEEK_CENTER, :, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =, truncate, (, focus]
[:, start, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =, truncate, (, focus, ,, Calendar, .]
[=, truncate, (, focus, ,, Calendar, ., DATE, ), ;, end, =, truncate, (, focus, ,, Calendar, ., DATE, )]
[;, end, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :]
[,, Calendar, ., DATE, ), ;, end, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle]
[), ;, end, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY]
[., DATE, ), ;, end, =, truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {]
[=, truncate, (, focus, ,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;]
[;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;]
[,, Calendar, ., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff]
[), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY]
[., DATE, ), ;, switch, (, rangeStyle, ), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar]
[), {, case, RANGE_WEEK_SUNDAY, :, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, .]
[:, break, ;, case, RANGE_WEEK_MONDAY, :, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;]
[:, startCutoff, =, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =]
[=, Calendar, ., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, .]
[;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, .]
[., MONDAY, ;, endCutoff, =, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (]
[=, Calendar, ., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff]
[., SUNDAY, ;, break, ;, case, RANGE_WEEK_RELATIVE, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff]
[:, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;]
[=, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER]
[;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, .]
[., get, (, Calendar, ., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff]
[), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar]
[., DAY_OF_WEEK, ), ;, endCutoff, =, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get]
[=, startCutoff, -, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff]
[-, 1, ;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3]
[;, break, ;, case, RANGE_WEEK_CENTER, :, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff]
[:, startCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =, focus, ., get, (]
[=, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =, focus, ., get, (, Calendar, .]
[;, endCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default]
[-, 3, ;, endCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break]
[., get, (, Calendar, ., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, )]
[), -, 3, ;, endCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }]
[., DAY_OF_WEEK, ), -, 3, ;, endCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break]
[;, endCutoff, =, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default]
[=, focus, ., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw]
[;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }]
[+, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", )]
[., get, (, Calendar, ., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException]
[), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid."]
[., DAY_OF_WEEK, ), +, 3, ;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle]
[;, break, ;, }, break, ;, default, :, throw, new, IllegalArgumentException, (, "The range style ", +, rangeStyle, +, " is not valid.", ), ;, }]
[;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >]
[), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff]
[+, " is not valid.", ), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if]
[+, rangeStyle, +, " is not valid.", ), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;]
[+, " is not valid.", ), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if]
[), ;, }, if, (, startCutoff, <, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff]
[), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;]
[<, Calendar, ., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {]
[), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;]
[., SUNDAY, ), {, startCutoff, +=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=]
[+=, 7, ;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (]
[;, }, if, (, startCutoff, >, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <]
[), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;]
[>, Calendar, ., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {]
[), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;]
[., SATURDAY, ), {, startCutoff, -=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=]
[-=, 7, ;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (]
[;, }, if, (, endCutoff, <, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >]
[), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;]
[<, Calendar, ., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {]
[), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;]
[., SUNDAY, ), {, endCutoff, +=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=]
[+=, 7, ;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (]
[;, }, if, (, endCutoff, >, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (, start, .]
[), {, endCutoff, -=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, )]
[>, Calendar, ., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK]
[), {, endCutoff, -=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, )]
[., SATURDAY, ), {, endCutoff, -=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=]
[-=, 7, ;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, .]
[;, }, while, (, start, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, ., add, (]
[), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (, end, ., get]
[!=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (, end]
[., get, (, Calendar, ., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -]
[), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (]
[., DAY_OF_WEEK, ), !=, startCutoff, ), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }]
[), {, start, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (, end, ., get]
[;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add, (]
[., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, while, (, end, ., get, (, Calendar, .]
[,, -, 1, ), ;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {]
[., DATE, ,, -, 1, ), ;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff]
[), ;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add]
[), ;, }, while, (, end, ., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add]
[), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return, new, DateIterator, (, start, ,]
[!=, endCutoff, ), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return, new, DateIterator, (]
[., get, (, Calendar, ., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add, (, Calendar, ., DATE, ,, 1]
[), !=, endCutoff, ), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return, new, DateIterator]
[., DAY_OF_WEEK, ), !=, endCutoff, ), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return]
[), {, end, ., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return, new, DateIterator, (, start, ,]
[;, }, return, new, DateIterator, (, start, ,, end, ), ;, }, public, static, Iterator, <, ?, >, iterator, (]
[., add, (, Calendar, ., DATE, ,, 1, ), ;, }, return, new, DateIterator, (, start, ,, end, ), ;]
[,, 1, ), ;, }, return, new, DateIterator, (, start, ,, end, ), ;, }, public, static, Iterator, <, ?]
[., DATE, ,, 1, ), ;, }, return, new, DateIterator, (, start, ,, end, ), ;, }, public, static, Iterator]
[), ;, }, return, new, DateIterator, (, start, ,, end, ), ;, }, public, static, Iterator, <, ?, >, iterator]
[;, }, public, static, Iterator, <, ?, >, iterator, (, final, Object, focus, ,, final, int, rangeStyle, ), {, if]
[,, end, ), ;, }, public, static, Iterator, <, ?, >, iterator, (, final, Object, focus, ,, final, int, rangeStyle]
[), ;, }, public, static, Iterator, <, ?, >, iterator, (, final, Object, focus, ,, final, int, rangeStyle, ), {]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, focus, instanceof, Date, ), {, return, iterator, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, focus, instanceof, Date, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, if, (, focus, instanceof, Date, ), {, return, iterator, (]
[;, }, if, (, focus, instanceof, Date, ), {, return, iterator, (, (, Date, ), focus, ,, rangeStyle, ), ;]
[), ;, }, if, (, focus, instanceof, Date, ), {, return, iterator, (, (, Date, ), focus, ,, rangeStyle, )]
[), {, return, iterator, (, (, Date, ), focus, ,, rangeStyle, ), ;, }, else, if, (, focus, instanceof, Calendar]
[instanceof, Date, ), {, return, iterator, (, (, Date, ), focus, ,, rangeStyle, ), ;, }, else, if, (, focus]
[;, }, else, if, (, focus, instanceof, Calendar, ), {, return, iterator, (, (, Calendar, ), focus, ,, rangeStyle, )]
[,, rangeStyle, ), ;, }, else, if, (, focus, instanceof, Calendar, ), {, return, iterator, (, (, Calendar, ), focus]
[,, rangeStyle, ), ;, }, else, if, (, focus, instanceof, Calendar, ), {, return, iterator, (, (, Calendar, ), focus]
[), ;, }, else, if, (, focus, instanceof, Calendar, ), {, return, iterator, (, (, Calendar, ), focus, ,, rangeStyle]
[), {, return, iterator, (, (, Calendar, ), focus, ,, rangeStyle, ), ;, }, else, {, throw, new, ClassCastException, (]
[instanceof, Calendar, ), {, return, iterator, (, (, Calendar, ), focus, ,, rangeStyle, ), ;, }, else, {, throw, new]
[;, }, else, {, throw, new, ClassCastException, (, "Could not iterate based on ", +, focus, ), ;, }, }, public, static, long, getFragmentInMilliseconds, (]
[,, rangeStyle, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not iterate based on ", +, focus, ), ;, }, }, public, static]
[,, rangeStyle, ), ;, }, else, {, throw, new, ClassCastException, (, "Could not iterate based on ", +, focus, ), ;, }, }, public, static]
[), ;, }, else, {, throw, new, ClassCastException, (, "Could not iterate based on ", +, focus, ), ;, }, }, public, static, long, getFragmentInMilliseconds]
[;, }, }, public, static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[), ;, }, }, public, static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment]
[+, focus, ), ;, }, }, public, static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {]
[), ;, }, }, public, static, long, getFragmentInMilliseconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment]
[;, }, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date]
[,, fragment, ,, Calendar, ., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int]
[,, Calendar, ., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Date, date, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date]
[,, fragment, ,, Calendar, ., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int]
[,, Calendar, ., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Date, date, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date]
[,, fragment, ,, Calendar, ., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int]
[,, Calendar, ., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Date, date, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (, date]
[,, fragment, ,, Calendar, ., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int]
[,, Calendar, ., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return, getFragment, (]
[., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Date, date, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar]
[,, fragment, ,, Calendar, ., DAY_OF_YEAR, ), ;, }, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int]
[,, Calendar, ., DAY_OF_YEAR, ), ;, }, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[., DAY_OF_YEAR, ), ;, }, public, static, long, getFragmentInMilliseconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar]
[,, fragment, ,, Calendar, ., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int]
[,, Calendar, ., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[., MILLISECOND, ), ;, }, public, static, long, getFragmentInSeconds, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar]
[,, fragment, ,, Calendar, ., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int]
[,, Calendar, ., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[., SECOND, ), ;, }, public, static, long, getFragmentInMinutes, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar]
[,, fragment, ,, Calendar, ., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int]
[,, Calendar, ., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[., MINUTE, ), ;, }, public, static, long, getFragmentInHours, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[;, }, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (, calendar]
[,, fragment, ,, Calendar, ., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int]
[,, Calendar, ., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, )]
[), ;, }, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return, getFragment, (]
[., HOUR_OF_DAY, ), ;, }, public, static, long, getFragmentInDays, (, final, Calendar, calendar, ,, final, int, fragment, ), {, return]
[;, }, private, static, long, getFragment, (, final, Date, date, ,, final, int, fragment, ,, final, int, unit, ), {]
[,, fragment, ,, Calendar, ., DAY_OF_YEAR, ), ;, }, private, static, long, getFragment, (, final, Date, date, ,, final, int]
[,, Calendar, ., DAY_OF_YEAR, ), ;, }, private, static, long, getFragment, (, final, Date, date, ,, final, int, fragment, ,]
[), ;, }, private, static, long, getFragment, (, final, Date, date, ,, final, int, fragment, ,, final, int, unit, )]
[., DAY_OF_YEAR, ), ;, }, private, static, long, getFragment, (, final, Date, date, ,, final, int, fragment, ,, final, int]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;]
[;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;, calendar, ., setTime, (, date, ), ;, return]
[), ;, }, final, Calendar, calendar, =, Calendar, ., getInstance, (, ), ;, calendar, ., setTime, (, date, ), ;]
[;, calendar, ., setTime, (, date, ), ;, return, getFragment, (, calendar, ,, fragment, ,, unit, ), ;, }, private]
[., getInstance, (, ), ;, calendar, ., setTime, (, date, ), ;, return, getFragment, (, calendar, ,, fragment, ,, unit]
[;, return, getFragment, (, calendar, ,, fragment, ,, unit, ), ;, }, private, static, long, getFragment, (, final, Calendar, calendar]
[., setTime, (, date, ), ;, return, getFragment, (, calendar, ,, fragment, ,, unit, ), ;, }, private, static, long]
[), ;, return, getFragment, (, calendar, ,, fragment, ,, unit, ), ;, }, private, static, long, getFragment, (, final, Calendar]
[;, }, private, static, long, getFragment, (, final, Calendar, calendar, ,, final, int, fragment, ,, final, int, unit, ), {]
[,, fragment, ,, unit, ), ;, }, private, static, long, getFragment, (, final, Calendar, calendar, ,, final, int, fragment, ,]
[,, unit, ), ;, }, private, static, long, getFragment, (, final, Calendar, calendar, ,, final, int, fragment, ,, final, int]
[), ;, }, private, static, long, getFragment, (, final, Calendar, calendar, ,, final, int, fragment, ,, final, int, unit, )]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, long, millisPerUnit, =, getMillisPerUnit, (, unit, )]
[), {, throw, new, IllegalArgumentException, (, "The date must not be null", ), ;, }, final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long]
[;, }, final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long, result, =, 0, ;, switch, (, fragment, )]
[), ;, }, final, long, millisPerUnit, =, getMillisPerUnit, (, unit, ), ;, long, result, =, 0, ;, switch, (, fragment]
[;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (, calendar]
[), ;, long, result, =, 0, ;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (]
[;, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, result, +=, (, calendar, ., get, (, Calendar, .]
[), {, case, Calendar, ., YEAR, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY]
[:, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;]
[., YEAR, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;]
[+=, (, calendar, ., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar]
[;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *]
[/, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH]
[), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, .]
[*, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (]
[., get, (, Calendar, ., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :]
[), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get]
[., DAY_OF_YEAR, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar]
[), /, millisPerUnit, ;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, .]
[;, break, ;, case, Calendar, ., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *]
[:, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;]
[., MONTH, :, result, +=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;]
[+=, (, calendar, ., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch]
[;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case]
[/, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH]
[), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, .]
[*, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case]
[., get, (, Calendar, ., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, )]
[), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :]
[., DAY_OF_MONTH, ), *, MILLIS_PER_DAY, ), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, .]
[), /, millisPerUnit, ;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, .]
[;, break, ;, }, switch, (, fragment, ), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case]
[), {, case, Calendar, ., YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, .]
[:, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (, calendar]
[., YEAR, :, case, Calendar, ., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=]
[:, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (, Calendar, .]
[., MONTH, :, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (]
[:, case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, )]
[., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *]
[:, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar]
[., DATE, :, result, +=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;]
[+=, (, calendar, ., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY]
[;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, )]
[/, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *]
[), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, )]
[*, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, .]
[., get, (, Calendar, ., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=]
[), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar]
[., HOUR_OF_DAY, ), *, MILLIS_PER_HOUR, ), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get]
[), /, millisPerUnit, ;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, )]
[;, case, Calendar, ., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, )]
[:, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar]
[., HOUR_OF_DAY, :, result, +=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;]
[+=, (, calendar, ., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE]
[;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, )]
[/, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *]
[), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, )]
[*, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, .]
[., get, (, Calendar, ., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=]
[), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar]
[., MINUTE, ), *, MILLIS_PER_MINUTE, ), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get]
[), /, millisPerUnit, ;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, )]
[;, case, Calendar, ., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, )]
[:, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar]
[., MINUTE, :, result, +=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;]
[+=, (, calendar, ., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND]
[;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, )]
[/, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *]
[), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, )]
[*, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, .]
[., get, (, Calendar, ., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=]
[), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar]
[., SECOND, ), *, MILLIS_PER_SECOND, ), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get]
[), /, millisPerUnit, ;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, )]
[;, case, Calendar, ., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, )]
[:, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /, millisPerUnit, ;, break, ;]
[., SECOND, :, result, +=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /, millisPerUnit, ;]
[+=, (, calendar, ., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /, millisPerUnit, ;, break, ;, case, Calendar]
[;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +, fragment, +]
[/, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +]
[), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment "]
[*, 1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException]
[., get, (, Calendar, ., MILLISECOND, ), *, 1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :]
[), *, 1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new]
[., MILLISECOND, ), *, 1, ), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :]
[), /, millisPerUnit, ;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment "]
[;, break, ;, case, Calendar, ., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +, fragment, +]
[:, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +, fragment, +, " is not supported", ), ;, }, return, result, ;]
[., MILLISECOND, :, break, ;, default, :, throw, new, IllegalArgumentException, (, "The fragment ", +, fragment, +, " is not supported", ), ;, }, return]
[;, }, return, result, ;, }, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final]
[), ;, }, return, result, ;, }, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,]
[+, " is not supported", ), ;, }, return, result, ;, }, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar]
[+, fragment, +, " is not supported", ), ;, }, return, result, ;, }, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,]
[+, " is not supported", ), ;, }, return, result, ;, }, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar]
[), ;, }, return, result, ;, }, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,]
[;, }, public, static, boolean, truncatedEquals, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {]
[;, }, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {]
[==, 0, ;, }, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field]
[,, cal2, ,, field, ), ==, 0, ;, }, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date]
[,, field, ), ==, 0, ;, }, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,]
[), ==, 0, ;, }, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int]
[;, }, public, static, boolean, truncatedEquals, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {]
[;, }, public, static, int, truncatedCompareTo, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {]
[==, 0, ;, }, public, static, int, truncatedCompareTo, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field]
[,, date2, ,, field, ), ==, 0, ;, }, public, static, int, truncatedCompareTo, (, final, Calendar, cal1, ,, final, Calendar]
[,, field, ), ==, 0, ;, }, public, static, int, truncatedCompareTo, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,]
[), ==, 0, ;, }, public, static, int, truncatedCompareTo, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int]
[;, }, public, static, int, truncatedCompareTo, (, final, Calendar, cal1, ,, final, Calendar, cal2, ,, final, int, field, ), {]
[;, final, Calendar, truncatedCal2, =, truncate, (, cal2, ,, field, ), ;, return, truncatedCal1, ., compareTo, (, truncatedCal2, ), ;]
[,, field, ), ;, final, Calendar, truncatedCal2, =, truncate, (, cal2, ,, field, ), ;, return, truncatedCal1, ., compareTo, (]
[), ;, final, Calendar, truncatedCal2, =, truncate, (, cal2, ,, field, ), ;, return, truncatedCal1, ., compareTo, (, truncatedCal2, )]
[;, return, truncatedCal1, ., compareTo, (, truncatedCal2, ), ;, }, public, static, int, truncatedCompareTo, (, final, Date, date1, ,, final]
[,, field, ), ;, return, truncatedCal1, ., compareTo, (, truncatedCal2, ), ;, }, public, static, int, truncatedCompareTo, (, final, Date]
[), ;, return, truncatedCal1, ., compareTo, (, truncatedCal2, ), ;, }, public, static, int, truncatedCompareTo, (, final, Date, date1, ,]
[;, }, public, static, int, truncatedCompareTo, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, ), {]
[., compareTo, (, truncatedCal2, ), ;, }, public, static, int, truncatedCompareTo, (, final, Date, date1, ,, final, Date, date2, ,]
[), ;, }, public, static, int, truncatedCompareTo, (, final, Date, date1, ,, final, Date, date2, ,, final, int, field, )]
[;, final, Date, truncatedDate2, =, truncate, (, date2, ,, field, ), ;, return, truncatedDate1, ., compareTo, (, truncatedDate2, ), ;]
[,, field, ), ;, final, Date, truncatedDate2, =, truncate, (, date2, ,, field, ), ;, return, truncatedDate1, ., compareTo, (]
[), ;, final, Date, truncatedDate2, =, truncate, (, date2, ,, field, ), ;, return, truncatedDate1, ., compareTo, (, truncatedDate2, )]
[;, return, truncatedDate1, ., compareTo, (, truncatedDate2, ), ;, }, private, static, long, getMillisPerUnit, (, final, int, unit, ), {]
[,, field, ), ;, return, truncatedDate1, ., compareTo, (, truncatedDate2, ), ;, }, private, static, long, getMillisPerUnit, (, final, int]
[), ;, return, truncatedDate1, ., compareTo, (, truncatedDate2, ), ;, }, private, static, long, getMillisPerUnit, (, final, int, unit, )]
[;, }, private, static, long, getMillisPerUnit, (, final, int, unit, ), {, long, result, =, Long, ., MAX_VALUE, ;, switch]
[., compareTo, (, truncatedDate2, ), ;, }, private, static, long, getMillisPerUnit, (, final, int, unit, ), {, long, result, =]
[), ;, }, private, static, long, getMillisPerUnit, (, final, int, unit, ), {, long, result, =, Long, ., MAX_VALUE, ;]
[;, switch, (, unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;]
[., MAX_VALUE, ;, switch, (, unit, ), {, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =]
[), {, case, Calendar, ., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar]
[:, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR]
[., DAY_OF_YEAR, :, case, Calendar, ., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result]
[:, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar]
[., DATE, :, result, =, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;]
[=, MILLIS_PER_DAY, ;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE]
[;, break, ;, case, Calendar, ., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result]
[:, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar]
[., HOUR_OF_DAY, :, result, =, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;]
[=, MILLIS_PER_HOUR, ;, break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND]
[;, break, ;, case, Calendar, ., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result]
[:, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar]
[., MINUTE, :, result, =, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;]
[=, MILLIS_PER_MINUTE, ;, break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND]
[;, break, ;, case, Calendar, ., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND, :, result]
[:, result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :]
[., SECOND, :, result, =, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;]
[=, MILLIS_PER_SECOND, ;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new]
[;, break, ;, case, Calendar, ., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[:, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "The unit ", +, unit, +, " cannot be represented is milleseconds", ), ;]
[., MILLISECOND, :, result, =, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "The unit ", +, unit, +, " cannot be represented is milleseconds"]
[=, 1, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "The unit ", +, unit, +, " cannot be represented is milleseconds", ), ;, }, return]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "The unit ", +, unit, +, " cannot be represented is milleseconds", ), ;, }, return, result, ;]
[;, }, return, result, ;, }, static, class, DateIterator, implements, Iterator, <, Calendar, >, {, private, final, Calendar, endFinal, ;]
[), ;, }, return, result, ;, }, static, class, DateIterator, implements, Iterator, <, Calendar, >, {, private, final, Calendar, endFinal]
[+, " cannot be represented is milleseconds", ), ;, }, return, result, ;, }, static, class, DateIterator, implements, Iterator, <, Calendar, >, {, private, final]
[+, unit, +, " cannot be represented is milleseconds", ), ;, }, return, result, ;, }, static, class, DateIterator, implements, Iterator, <, Calendar, >, {]
[+, " cannot be represented is milleseconds", ), ;, }, return, result, ;, }, static, class, DateIterator, implements, Iterator, <, Calendar, >, {, private, final]
[), ;, }, return, result, ;, }, static, class, DateIterator, implements, Iterator, <, Calendar, >, {, private, final, Calendar, endFinal]
[;, }, static, class, DateIterator, implements, Iterator, <, Calendar, >, {, private, final, Calendar, endFinal, ;, private, final, Calendar, spot]
[=, endFinal, ;, spot, =, startFinal, ;, spot, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }]
[., endFinal, =, endFinal, ;, spot, =, startFinal, ;, spot, ., add, (, Calendar, ., DATE, ,, -, 1, )]
[;, spot, =, startFinal, ;, spot, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, @, Override]
[=, startFinal, ;, spot, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, @, Override, public, boolean]
[;, spot, ., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, @, Override, public, boolean, hasNext, (]
[;, }, @, Override, public, boolean, hasNext, (, ), {, return, spot, ., before, (, endFinal, ), ;, }, @]
[., add, (, Calendar, ., DATE, ,, -, 1, ), ;, }, @, Override, public, boolean, hasNext, (, ), {]
[,, -, 1, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, spot, ., before, (, endFinal]
[., DATE, ,, -, 1, ), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, spot, ., before]
[), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, spot, ., before, (, endFinal, ), ;, }]
[), ;, }, @, Override, public, boolean, hasNext, (, ), {, return, spot, ., before, (, endFinal, ), ;, }]
[;, }, @, Override, public, Calendar, next, (, ), {, if, (, spot, ., equals, (, endFinal, ), ), {]
[., before, (, endFinal, ), ;, }, @, Override, public, Calendar, next, (, ), {, if, (, spot, ., equals]
[), ;, }, @, Override, public, Calendar, next, (, ), {, if, (, spot, ., equals, (, endFinal, ), )]
[), {, throw, new, NoSuchElementException, (, ), ;, }, spot, ., add, (, Calendar, ., DATE, ,, 1, ), ;]
[., equals, (, endFinal, ), ), {, throw, new, NoSuchElementException, (, ), ;, }, spot, ., add, (, Calendar, .]
[), ), {, throw, new, NoSuchElementException, (, ), ;, }, spot, ., add, (, Calendar, ., DATE, ,, 1, )]
[;, }, spot, ., add, (, Calendar, ., DATE, ,, 1, ), ;, return, (, Calendar, ), spot, ., clone]
[;, return, (, Calendar, ), spot, ., clone, (, ), ;, }, @, Override, public, void, remove, (, ), {]
[., add, (, Calendar, ., DATE, ,, 1, ), ;, return, (, Calendar, ), spot, ., clone, (, ), ;]
[,, 1, ), ;, return, (, Calendar, ), spot, ., clone, (, ), ;, }, @, Override, public, void, remove]
[., DATE, ,, 1, ), ;, return, (, Calendar, ), spot, ., clone, (, ), ;, }, @, Override, public]
[), ;, return, (, Calendar, ), spot, ., clone, (, ), ;, }, @, Override, public, void, remove, (, )]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, }]
[;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;, }, }, }]
[., clone, (, ), ;, }, @, Override, public, void, remove, (, ), {, throw, new, UnsupportedOperationException, (, ), ;]
[;, }, }, }]
