[,, DifferentiableUnivariateFunction, {, private, final, double, lo, ;, private, final, double, hi, ;, public, Logit, (, ), {, this, (]
[{, private, final, double, lo, ;, private, final, double, hi, ;, public, Logit, (, ), {, this, (, 0, ,]
[), {, this, (, 0, ,, 1, ), ;, }, public, Logit, (, double, lo, ,, double, hi, ), {]
[), {, this, (, 0, ,, 1, ), ;, }, public, Logit, (, double, lo, ,, double, hi, ), {]
[0, ,, 1, ), ;, }, public, Logit, (, double, lo, ,, double, hi, ), {, this, ., lo, =]
[1, ), ;, }, public, Logit, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;]
[1, ), ;, }, public, Logit, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;]
[public, Logit, (, double, lo, ,, double, hi, ), {, this, ., lo, =, lo, ;, this, ., hi, =]
[lo, ;, this, ., hi, =, hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return]
[this, ., hi, =, hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return, value, (]
[hi, =, hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return, value, (, x, ,]
[hi, ;, }, public, double, value, (, double, x, ), throws, OutOfRangeException, {, return, value, (, x, ,, lo, ,]
[return, value, (, x, ,, lo, ,, hi, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[return, value, (, x, ,, lo, ,, hi, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[return, value, (, x, ,, lo, ,, hi, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return]
[,, lo, ,, hi, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (]
[value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return]
[value, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return]
[,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Logit, ., value, (]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Logit, ., value, (, x, ,]
[..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Logit, ., value, (, x, ,]
[), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Logit, ., value, (, x, ,, param, []
[,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Logit, ., value, (, x, ,, param, [, 0, ], ,]
[,, DimensionMismatchException, {, validateParameters, (, param, ), ;, return, Logit, ., value, (, x, ,, param, [, 0, ], ,]
[{, validateParameters, (, param, ), ;, return, Logit, ., value, (, x, ,, param, [, 0, ], ,, param, []
[;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (]
[x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, lo, =]
[x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, lo, =]
[double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, lo, =, param, []
[DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, lo, =, param, [, 0, ], ;, final, double, hi, =]
[DimensionMismatchException, {, validateParameters, (, param, ), ;, final, double, lo, =, param, [, 0, ], ;, final, double, hi, =]
[validateParameters, (, param, ), ;, final, double, lo, =, param, [, 0, ], ;, final, double, hi, =, param, []
[;, final, double, lo, =, param, [, 0, ], ;, final, double, hi, =, param, [, 1, ], ;, return]
[=, param, [, 0, ], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ]]
[param, [, 0, ], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {]
[param, [, 0, ], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {]
[0, ], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {, 1, /]
[], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {, 1, /, (]
[], ;, final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {, 1, /, (]
[final, double, hi, =, param, [, 1, ], ;, return, new, double, [, ], {, 1, /, (, lo, -]
[=, param, [, 1, ], ;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,]
[=, param, [, 1, ], ;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,]
[[, 1, ], ;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,, 1, /]
[1, ], ;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,, 1, /, (]
[1, ], ;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,, 1, /, (]
[;, return, new, double, [, ], {, 1, /, (, lo, -, x, ), ,, 1, /, (, hi, -]
[), }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[), }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==]
[validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[NullArgumentException, ,, DimensionMismatchException, {, if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[if, (, param, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=]
[null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (]
[), ;, }, if, (, param, ., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,]
[}, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (]
[}, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (]
[}, private, static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (]
[static, double, value, (, double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (, x, <]
[value, (, double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (, x, <, lo, ||]
[value, (, double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (, x, <, lo, ||]
[double, x, ,, double, lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (, x, <, lo, ||, x, >]
[lo, ,, double, hi, ), throws, OutOfRangeException, {, if, (, x, <, lo, ||, x, >, hi, ), {, throw]
[hi, ), throws, OutOfRangeException, {, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,]
[{, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,]
[lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return]
[lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return]
[hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (]
[hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (]
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (]
[), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (]
[throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (, x, -]
[(, x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (, x, -, lo, ), /]
[x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (, x, -, lo, ), /, (]
[x, ,, lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (, x, -, lo, ), /, (]
[lo, ,, hi, ), ;, }, return, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -]
[x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =]
[x, ), ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =]
[(, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t, ., getValue, (, ), ;, if, (]
[(, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t, ., getValue, (, ), ;, if, (]
[(, final, DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t, ., getValue, (, ), ;, if, (]
[DerivativeStructure, t, ), throws, OutOfRangeException, {, final, double, x, =, t, ., getValue, (, ), ;, if, (, x, <]
[), throws, OutOfRangeException, {, final, double, x, =, t, ., getValue, (, ), ;, if, (, x, <, lo, ||]
[), throws, OutOfRangeException, {, final, double, x, =, t, ., getValue, (, ), ;, if, (, x, <, lo, ||]
[OutOfRangeException, {, final, double, x, =, t, ., getValue, (, ), ;, if, (, x, <, lo, ||, x, >]
[x, =, t, ., getValue, (, ), ;, if, (, x, <, lo, ||, x, >, hi, ), {, throw]
[., getValue, (, ), ;, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (]
[(, ), ;, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,]
[;, if, (, x, <, lo, ||, x, >, hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,]
[hi, ), {, throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f, =]
[throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f, =, new, double, []
[throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f, =, new, double, []
[throw, new, OutOfRangeException, (, x, ,, lo, ,, hi, ), ;, }, double, [, ], f, =, new, double, []
[lo, ,, hi, ), ;, }, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +]
[), ;, }, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;]
[), ;, }, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;]
[}, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, f, []
[], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =]
[], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =]
[double, [, t, ., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (]
[double, [, t, ., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (]
[[, t, ., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (]
[[, t, ., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (]
[., getOrder, (, ), +, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -]
[), +, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /]
[+, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (]
[+, 1, ], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (]
[], ;, f, [, 0, ], =, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -]
[=, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, if, (]
[=, FastMath, ., log, (, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, if, (]
[(, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, if, (, Double, ., isInfinite, (]
[(, (, x, -, lo, ), /, (, hi, -, x, ), ), ;, if, (, Double, ., isInfinite, (]
[x, -, lo, ), /, (, hi, -, x, ), ), ;, if, (, Double, ., isInfinite, (, f, []
[-, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (]
[-, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (]
[-, x, ), ), ;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (]
[;, if, (, Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length, >]
[Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length, >, 1, ), {]
[Double, ., isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length, >, 1, ), {]
[isInfinite, (, f, [, 0, ], ), ), {, if, (, f, ., length, >, 1, ), {, f, []
[[, 0, ], ), ), {, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =]
[[, 0, ], ), ), {, if, (, f, ., length, >, 1, ), {, f, [, 1, ], =]
[length, >, 1, ), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =]
[1, ), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;]
[1, ), {, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;]
[{, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <]
[{, f, [, 1, ], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <]
[], =, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;]
[=, Double, ., POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++]
[POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {]
[POSITIVE_INFINITY, ;, }, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {]
[}, for, (, int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =]
[int, i, =, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =]
[=, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, f, []
[=, 2, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, f, []
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, f, [, i, -]
[f, [, i, ], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =]
[f, [, i, ], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =]
[i, ], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /]
[], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /, (]
[], =, f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /, (]
[f, [, i, -, 2, ], ;, }, }, else, {, final, double, invL, =, 1.0, /, (, x, -]
[;, }, }, else, {, final, double, invL, =, 1.0, /, (, x, -, lo, ), ;, double, xL, =]
[double, invL, =, 1.0, /, (, x, -, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =]
[double, invL, =, 1.0, /, (, x, -, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =]
[=, 1.0, /, (, x, -, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /]
[1.0, /, (, x, -, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (]
[1.0, /, (, x, -, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (]
[(, x, -, lo, ), ;, double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi, -]
[double, xL, =, invL, ;, final, double, invH, =, 1.0, /, (, hi, -, x, ), ;, double, xH, =]
[invH, =, 1.0, /, (, hi, -, x, ), ;, double, xH, =, invH, ;, for, (, int, i, =]
[1.0, /, (, hi, -, x, ), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;]
[1.0, /, (, hi, -, x, ), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;]
[(, hi, -, x, ), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <]
[(, hi, -, x, ), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <]
[), ;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;]
[;, double, xH, =, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++]
[=, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {]
[=, invH, ;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, []
[int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =]
[int, i, =, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =]
[=, 1, ;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, xL, +]
[;, i, <, f, ., length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;]
[<, f, ., length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=]
[<, f, ., length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=]
[f, ., length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -]
[length, ;, ++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *]
[++, i, ), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;]
[), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=]
[), {, f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=]
[f, [, i, ], =, xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=, i, *]
[xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }, return]
[xL, +, xH, ;, xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }, return]
[xL, *=, -, i, *, invL, ;, xH, *=, i, *, invH, ;, }, }, return, t, ., compose, (]
