[;, private, final, int, nbPoints, ;, private, final, double, stepSize, ;, private, final, double, halfSampleSpan, ;, private, final, double, tMin]
[,, stepSize, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,]
[,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,, final, double]
[,, Double, ., POSITIVE_INFINITY, ), ;, }, public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,, final, double, stepSize, ,, final, double]
[., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,, final, double, stepSize, ,]
[), ;, }, public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,, final, double, stepSize, ,, final, double, tLower, ,, final, double]
[., POSITIVE_INFINITY, ), ;, }, public, FiniteDifferencesDifferentiator, (, final, int, nbPoints, ,, final, double, stepSize, ,, final, double, tLower, ,]
[), {, throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;]
[<=, 1, ), {, throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }, this, ., nbPoints, =]
[), {, throw, new, NumberIsTooSmallException, (, stepSize, ,, 1, ,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;]
[;, }, this, ., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize]
[,, 1, ,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {]
[,, false, ), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new]
[), ;, }, this, ., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (]
[=, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, .]
[., nbPoints, =, nbPoints, ;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }]
[;, if, (, stepSize, <=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =]
[), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *]
[<=, 0, ), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =]
[), {, throw, new, NotPositiveException, (, stepSize, ), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *]
[;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;]
[), ;, }, this, ., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, )]
[=, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan]
[., stepSize, =, stepSize, ;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2]
[;, halfSampleSpan, =, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper]
[=, 0.5, *, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower]
[;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,]
[*, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new]
[*, stepSize, *, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {]
[*, (, nbPoints, -, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new]
[;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,]
[), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan]
[-, 1, ), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2]
[), ;, if, (, 2, *, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan]
[), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }, final, double]
[>=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, )]
[*, halfSampleSpan, >=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,]
[>=, tUpper, -, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, )]
[), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }, final, double]
[-, tLower, ), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, 2, *, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }, final, double]
[;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan]
[,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;]
[*, halfSampleSpan, ,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan]
[,, tUpper, -, tLower, ,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;]
[,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =]
[-, tLower, ,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, .]
[,, false, ), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =]
[), ;, }, final, double, safety, =, FastMath, ., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +]
[;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety]
[., ulp, (, halfSampleSpan, ), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =]
[), ;, this, ., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -]
[=, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int]
[., tMin, =, tLower, +, halfSampleSpan, +, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }]
[;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints]
[+, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {]
[+, halfSampleSpan, +, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (]
[+, safety, ;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {]
[;, this, ., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints]
[=, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }, public, double]
[., tMax, =, tUpper, -, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }]
[;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }, public, double, getStepSize, (, ), {, return, stepSize]
[-, safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }, public, double, getStepSize, (, ), {]
[-, halfSampleSpan, -, safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }, public, double, getStepSize, (]
[-, safety, ;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }, public, double, getStepSize, (, ), {]
[;, }, public, int, getNbPoints, (, ), {, return, nbPoints, ;, }, public, double, getStepSize, (, ), {, return, stepSize]
[;, }, public, double, getStepSize, (, ), {, return, stepSize, ;, }, private, DerivativeStructure, evaluate, (, final, DerivativeStructure, t, ,]
[;, }, private, DerivativeStructure, evaluate, (, final, DerivativeStructure, t, ,, final, double, t0, ,, final, double, [, ], y, )]
[;, final, double, [, ], bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;]
[], ;, final, double, [, ], bottom, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, bottom, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, bottom, [, i]
[;, i, <, nbPoints, ;, ++, i, ), {, bottom, [, i, ], =, y, [, i, ], ;, for]
[;, ++, i, ), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =]
[<, nbPoints, ;, ++, i, ), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int]
[;, ++, i, ), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =]
[), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;, j]
[), {, bottom, [, i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;, j]
[=, y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, )]
[[, i, ], =, y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;]
[], =, y, [, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j]
[;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -]
[[, i, ], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom]
[], ;, for, (, int, j, =, 1, ;, j, <=, i, ;, ++, j, ), {, bottom, [, i]
[;, j, <=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i]
[;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1]
[<=, i, ;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j]
[;, ++, j, ), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1]
[), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -, bottom]
[), {, bottom, [, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -, bottom]
[=, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (]
[[, i, -, j, ], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -]
[], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /]
[-, j, ], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ]]
[], =, (, bottom, [, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /]
[;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =, t, ., getOrder]
[/, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final]
[), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }]
[-, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ]]
[[, i, -, j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize]
[], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i]
[+, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top]
[-, j, +, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;]
[+, 1, ], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top]
[], -, bottom, [, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i]
[), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }]
[[, i, -, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom]
[], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;]
[-, j, ], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0]
[], ), /, (, j, *, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;]
[;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =, t, ., getOrder]
[), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =, t, .]
[*, stepSize, ), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =]
[), ;, }, top, [, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =, t, .]
[=, bottom, [, 0, ], ;, }, final, int, order, =, t, ., getOrder, (, ), ;, final, int, parameters]
[[, i, ], =, bottom, [, 0, ], ;, }, final, int, order, =, t, ., getOrder, (, ), ;]
[], =, bottom, [, 0, ], ;, }, final, int, order, =, t, ., getOrder, (, ), ;, final, int]
[;, }, final, int, order, =, t, ., getOrder, (, ), ;, final, int, parameters, =, t, ., getFreeParameters, (]
[[, 0, ], ;, }, final, int, order, =, t, ., getOrder, (, ), ;, final, int, parameters, =, t]
[], ;, }, final, int, order, =, t, ., getOrder, (, ), ;, final, int, parameters, =, t, ., getFreeParameters]
[;, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, t, ., getAllDerivatives]
[., getOrder, (, ), ;, final, int, parameters, =, t, ., getFreeParameters, (, ), ;, final, double, [, ], derivatives]
[;, final, double, [, ], derivatives, =, t, ., getAllDerivatives, (, ), ;, final, double, dt0, =, t, ., getValue]
[., getFreeParameters, (, ), ;, final, double, [, ], derivatives, =, t, ., getAllDerivatives, (, ), ;, final, double, dt0]
[;, final, double, dt0, =, t, ., getValue, (, ), -, t0, ;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters]
[., getAllDerivatives, (, ), ;, final, double, dt0, =, t, ., getValue, (, ), -, t0, ;, DerivativeStructure, interpolation, =]
[;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters, ,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for]
[-, t0, ;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters, ,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null]
[., getValue, (, ), -, t0, ;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters, ,, order, ,, 0.0, ), ;]
[;, DerivativeStructure, interpolation, =, new, DerivativeStructure, (, parameters, ,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for]
[;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, )]
[,, order, ,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;, i, <]
[,, 0.0, ), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;]
[), ;, DerivativeStructure, monomial, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, if, (, i, ==]
[;, i, <, nbPoints, ;, ++, i, ), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure]
[;, ++, i, ), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order]
[<, nbPoints, ;, ++, i, ), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters]
[;, ++, i, ), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order]
[), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, )]
[), {, if, (, i, ==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, )]
[), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0]
[==, 0, ), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives]
[), {, monomial, =, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0]
[=, new, DerivativeStructure, (, parameters, ,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0]
[;, }, else, {, derivatives, [, 0, ], =, dt0, -, (, i, -, 1, ), *, stepSize, ;, final]
[,, order, ,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -, (, i, -, 1]
[,, 1.0, ), ;, }, else, {, derivatives, [, 0, ], =, dt0, -, (, i, -, 1, ), *]
[), ;, }, else, {, derivatives, [, 0, ], =, dt0, -, (, i, -, 1, ), *, stepSize, ;]
[=, dt0, -, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,]
[[, 0, ], =, dt0, -, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure]
[], =, dt0, -, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters]
[;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply]
[-, (, i, -, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,]
[;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply]
[*, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial]
[), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =]
[-, 1, ), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;]
[), *, stepSize, ;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =]
[;, final, DerivativeStructure, deltaX, =, new, DerivativeStructure, (, parameters, ,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply]
[;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply]
[,, order, ,, derivatives, ), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, .]
[,, derivatives, ), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (]
[), ;, monomial, =, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (, monomial, .]
[=, monomial, ., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (, top]
[;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (, top, [, i, ], ), ), ;, }]
[., multiply, (, deltaX, ), ;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (, top, [, i]
[), ;, }, interpolation, =, interpolation, ., add, (, monomial, ., multiply, (, top, [, i, ], ), ), ;]
[=, interpolation, ., add, (, monomial, ., multiply, (, top, [, i, ], ), ), ;, }, return, interpolation, ;]
[;, }, return, interpolation, ;, }, public, UnivariateDifferentiableFunction, differentiate, (, final, UnivariateFunction, function, ), {, return, new, UnivariateDifferentiableFunction, (, )]
[., add, (, monomial, ., multiply, (, top, [, i, ], ), ), ;, }, return, interpolation, ;, }, public]
[), ;, }, return, interpolation, ;, }, public, UnivariateDifferentiableFunction, differentiate, (, final, UnivariateFunction, function, ), {, return, new, UnivariateDifferentiableFunction, (]
[., multiply, (, top, [, i, ], ), ), ;, }, return, interpolation, ;, }, public, UnivariateDifferentiableFunction, differentiate, (, final]
[), ), ;, }, return, interpolation, ;, }, public, UnivariateDifferentiableFunction, differentiate, (, final, UnivariateFunction, function, ), {, return, new, UnivariateDifferentiableFunction]
[[, i, ], ), ), ;, }, return, interpolation, ;, }, public, UnivariateDifferentiableFunction, differentiate, (, final, UnivariateFunction, function, ), {]
[], ), ), ;, }, return, interpolation, ;, }, public, UnivariateDifferentiableFunction, differentiate, (, final, UnivariateFunction, function, ), {, return, new]
[;, }, public, UnivariateDifferentiableFunction, differentiate, (, final, UnivariateFunction, function, ), {, return, new, UnivariateDifferentiableFunction, (, ), {, public, double, value]
[;, }, public, UnivariateDifferentiableVectorFunction, differentiate, (, final, UnivariateVectorFunction, function, ), {, return, new, UnivariateDifferentiableVectorFunction, (, ), {, public, double, []
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (, )]
[., value, (, x, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder, (]
[), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double]
[>=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }]
[., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,]
[), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double]
[;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,]
[,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t]
[., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath]
[,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue]
[), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, )]
[;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;]
[-, halfSampleSpan, ;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =]
[., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan]
[,, tMin, ), -, halfSampleSpan, ;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (]
[., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, final, double, []
[,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, final, double, [, ], y, =, new, double, [, nbPoints, ]]
[., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, final, double, [, ], y, =, new]
[), ,, tMin, ), -, halfSampleSpan, ;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for]
[), -, halfSampleSpan, ;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i]
[;, final, double, [, ], y, =, new, double, [, nbPoints, ], ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, y, [, i]
[;, i, <, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +]
[;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +, i, *, stepSize, )]
[<, nbPoints, ;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +, i, *]
[;, ++, i, ), {, y, [, i, ], =, function, ., value, (, t0, +, i, *, stepSize, )]
[), {, y, [, i, ], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return]
[), {, y, [, i, ], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return]
[=, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (, t, ,, t0, ,]
[[, i, ], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (, t]
[], =, function, ., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (, t, ,, t0]
[;, }, return, evaluate, (, t, ,, t0, ,, y, ), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate, (]
[., value, (, t0, +, i, *, stepSize, ), ;, }, return, evaluate, (, t, ,, t0, ,, y, )]
[), ;, }, return, evaluate, (, t, ,, t0, ,, y, ), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate]
[+, i, *, stepSize, ), ;, }, return, evaluate, (, t, ,, t0, ,, y, ), ;, }, }, ;]
[), ;, }, return, evaluate, (, t, ,, t0, ,, y, ), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate]
[*, stepSize, ), ;, }, return, evaluate, (, t, ,, t0, ,, y, ), ;, }, }, ;, }, public]
[), ;, }, return, evaluate, (, t, ,, t0, ,, y, ), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate]
[;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate, (, final, UnivariateVectorFunction, function, ), {, return, new, UnivariateDifferentiableVectorFunction, (, ), {]
[,, t0, ,, y, ), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate, (, final, UnivariateVectorFunction, function, ), {, return]
[,, y, ), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate, (, final, UnivariateVectorFunction, function, ), {, return, new, UnivariateDifferentiableVectorFunction]
[), ;, }, }, ;, }, public, UnivariateDifferentiableVectorFunction, differentiate, (, final, UnivariateVectorFunction, function, ), {, return, new, UnivariateDifferentiableVectorFunction, (, )]
[;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final, UnivariateMatrixFunction, function, ), {, return, new, UnivariateDifferentiableMatrixFunction, (, ), {, public, double, []
[;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, ., getOrder]
[., value, (, x, ), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {]
[), ;, }, public, DerivativeStructure, [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t, .]
[), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double]
[>=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }]
[., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,]
[), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double]
[;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,]
[,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t]
[., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath]
[,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue]
[), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, )]
[;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints]
[-, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i]
[., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan]
[,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =]
[., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ]]
[,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (]
[., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], y, =]
[), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i]
[), -, halfSampleSpan, ;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;]
[;, double, [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i, <, nbPoints]
[;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ]]
[;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0]
[;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize]
[<, nbPoints, ;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0, +, i]
[;, ++, i, ), {, final, double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize]
[), {, final, double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if]
[), {, final, double, [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, ), ;, if]
[;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, nbPoints, ]]
[., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new]
[), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, nbPoints]
[+, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, .]
[), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, nbPoints]
[*, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ]]
[), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, nbPoints]
[), {, y, =, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j]
[==, 0, ), {, y, =, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (]
[), {, y, =, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j]
[=, new, double, [, v, ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;]
[;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {, y]
[], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++]
[., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length]
[], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {]
[;, j, <, v, ., length, ;, ++, j, ), {, y, [, j, ], [, i, ], =, v]
[;, ++, j, ), {, y, [, j, ], [, i, ], =, v, [, j, ], ;, }, }]
[<, v, ., length, ;, ++, j, ), {, y, [, j, ], [, i, ], =, v, [, j]
[;, ++, j, ), {, y, [, j, ], [, i, ], =, v, [, j, ], ;, }, }]
[., length, ;, ++, j, ), {, y, [, j, ], [, i, ], =, v, [, j, ], ;]
[), {, y, [, j, ], [, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, []
[), {, y, [, j, ], [, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, []
[=, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length]
[[, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, []
[[, j, ], [, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =]
[], [, i, ], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure]
[], =, v, [, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, .]
[;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (, int]
[[, j, ], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length, ], ;]
[], ;, }, }, final, DerivativeStructure, [, ], value, =, new, DerivativeStructure, [, y, ., length, ], ;, for, (]
[;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, value, []
[], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, value]
[., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, )]
[;, j, <, value, ., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,]
[;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ]]
[<, value, ., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,]
[;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ]]
[., length, ;, ++, j, ), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, []
[), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], ), ;, }]
[), {, value, [, j, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], ), ;, }]
[=, evaluate, (, t, ,, t0, ,, y, [, j, ], ), ;, }, return, value, ;, }, }, ;]
[[, j, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], ), ;, }, return, value, ;]
[], =, evaluate, (, t, ,, t0, ,, y, [, j, ], ), ;, }, return, value, ;, }, }]
[;, }, return, value, ;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final, UnivariateMatrixFunction, function, ), {, return, new]
[,, t0, ,, y, [, j, ], ), ;, }, return, value, ;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate]
[,, y, [, j, ], ), ;, }, return, value, ;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final]
[), ;, }, return, value, ;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final, UnivariateMatrixFunction, function, ), {, return]
[[, j, ], ), ;, }, return, value, ;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final, UnivariateMatrixFunction, function]
[], ), ;, }, return, value, ;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final, UnivariateMatrixFunction, function, ), {]
[;, }, }, ;, }, public, UnivariateDifferentiableMatrixFunction, differentiate, (, final, UnivariateMatrixFunction, function, ), {, return, new, UnivariateDifferentiableMatrixFunction, (, ), {]
[;, }, }]
[;, }, public, DerivativeStructure, [, ], [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (, t]
[., value, (, x, ), ;, }, public, DerivativeStructure, [, ], [, ], value, (, final, DerivativeStructure, t, ), throws]
[), ;, }, public, DerivativeStructure, [, ], [, ], value, (, final, DerivativeStructure, t, ), throws, MathIllegalArgumentException, {, if, (]
[), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double]
[>=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }]
[., getOrder, (, ), >=, nbPoints, ), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,]
[), {, throw, new, NumberIsTooLargeException, (, t, ., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double]
[;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,]
[,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t]
[., getOrder, (, ), ,, nbPoints, ,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath]
[,, false, ), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue]
[), ;, }, final, double, t0, =, FastMath, ., max, (, FastMath, ., min, (, t, ., getValue, (, )]
[;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i]
[-, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0]
[., max, (, FastMath, ., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan]
[,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int]
[., min, (, t, ., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ]]
[,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;]
[., getValue, (, ), ,, tMax, ), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], [, ]]
[), ,, tMin, ), -, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (]
[), -, halfSampleSpan, ;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =]
[;, double, [, ], [, ], [, ], y, =, null, ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ]]
[;, i, <, nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value]
[;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +, i]
[<, nbPoints, ;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (, t0]
[;, ++, i, ), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +, i]
[), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, )]
[), {, final, double, [, ], [, ], v, =, function, ., value, (, t0, +, i, *, stepSize, )]
[;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, v, []
[., value, (, t0, +, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new]
[), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, v]
[+, i, *, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, .]
[), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, v]
[*, stepSize, ), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ]]
[), ;, if, (, i, ==, 0, ), {, y, =, new, double, [, v, ., length, ], [, v]
[), {, y, =, new, double, [, v, ., length, ], [, v, [, 0, ], ., length, ], []
[==, 0, ), {, y, =, new, double, [, v, ., length, ], [, v, [, 0, ], ., length]
[), {, y, =, new, double, [, v, ., length, ], [, v, [, 0, ], ., length, ], []
[=, new, double, [, v, ., length, ], [, v, [, 0, ], ., length, ], [, nbPoints, ], ;]
[;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {, for]
[], [, v, [, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0]
[., length, ], [, v, [, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j]
[], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++]
[., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length]
[[, 0, ], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <]
[], ., length, ], [, nbPoints, ], ;, }, for, (, int, j, =, 0, ;, j, <, v, .]
[], ;, }, for, (, int, j, =, 0, ;, j, <, v, ., length, ;, ++, j, ), {]
[;, j, <, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length]
[<, v, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, v, []
[;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length]
[., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ]]
[), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k]
[), {, for, (, int, k, =, 0, ;, k, <, v, [, j, ], ., length, ;, ++, k]
[;, k, <, v, [, j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k]
[;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =, v, [, j, ]]
[<, v, [, j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], []
[;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =, v, [, j, ]]
[., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =, v, []
[[, j, ], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ]]
[], ., length, ;, ++, k, ), {, y, [, j, ], [, k, ], [, i, ], =, v]
[), {, y, [, j, ], [, k, ], [, i, ], =, v, [, j, ], [, k, ]]
[), {, y, [, j, ], [, k, ], [, i, ], =, v, [, j, ], [, k, ]]
[=, v, [, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =]
[[, i, ], =, v, [, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], []
[[, k, ], [, i, ], =, v, [, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure]
[[, j, ], [, k, ], [, i, ], =, v, [, j, ], [, k, ], ;, }, }]
[], [, k, ], [, i, ], =, v, [, j, ], [, k, ], ;, }, }, }, final]
[], [, i, ], =, v, [, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ]]
[], =, v, [, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value]
[;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, ., length, ], []
[[, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, .]
[[, j, ], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure]
[], [, k, ], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y]
[], ;, }, }, }, final, DerivativeStructure, [, ], [, ], value, =, new, DerivativeStructure, [, y, ., length, ]]
[;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, for, (]
[], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value]
[., length, ], [, y, [, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j]
[], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, ), {, for]
[., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j, )]
[[, 0, ], ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;]
[], ., length, ], ;, for, (, int, j, =, 0, ;, j, <, value, ., length, ;, ++, j]
[;, j, <, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <]
[;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length]
[<, value, ., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, y, []
[;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length]
[., length, ;, ++, j, ), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ]]
[), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++, k]
[), {, for, (, int, k, =, 0, ;, k, <, y, [, j, ], ., length, ;, ++, k]
[;, k, <, y, [, j, ], ., length, ;, ++, k, ), {, value, [, j, ], [, k]
[;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y]
[<, y, [, j, ], ., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =]
[;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y]
[., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0]
[[, j, ], ., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (]
[], ., length, ;, ++, k, ), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,]
[), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ]]
[), {, value, [, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ]]
[=, evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ], ), ;, }, }, return, value]
[[, k, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ], ), ;, }]
[[, j, ], [, k, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ]]
[], [, k, ], =, evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ], ), ;]
[], =, evaluate, (, t, ,, t0, ,, y, [, j, ], [, k, ], ), ;, }, }, return]
[;, }, }, return, value, ;, }, }, ;, }, }]
[,, t0, ,, y, [, j, ], [, k, ], ), ;, }, }, return, value, ;, }, }, ;]
[,, y, [, j, ], [, k, ], ), ;, }, }, return, value, ;, }, }, ;, }, }]
[), ;, }, }, return, value, ;, }, }, ;, }, }]
[[, k, ], ), ;, }, }, return, value, ;, }, }, ;, }, }]
[[, j, ], [, k, ], ), ;, }, }, return, value, ;, }, }, ;, }, }]
[], [, k, ], ), ;, }, }, return, value, ;, }, }, ;, }, }]
[], ), ;, }, }, return, value, ;, }, }, ;, }, }]
[;, }, }, ;, }, }]
