[commons, ., math3, ., util, ., FastMath, ;, public, class, DormandPrince54Integrator, extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =]
[DormandPrince54Integrator, extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =]
[extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {]
[extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {]
[{, private, static, final, String, METHOD_NAME, =, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 1.0, /]
[static, final, String, METHOD_NAME, =, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,]
[static, final, String, METHOD_NAME, =, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,]
[String, METHOD_NAME, =, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /]
[=, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,]
[=, "Dormand-Prince 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,]
[;, private, static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,, 4.0, /]
[static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,, 4.0, /, 5.0, ,]
[static, final, double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,, 4.0, /, 5.0, ,]
[double, [, ], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,, 4.0, /, 5.0, ,, 8.0, /]
[], STATIC_C, =, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,, 4.0, /, 5.0, ,, 8.0, /, 9.0, ,]
[=, {, 1.0, /, 5.0, ,, 3.0, /, 10.0, ,, 4.0, /, 5.0, ,, 8.0, /, 9.0, ,, 1.0, ,]
[,, 8.0, /, 9.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =]
[8.0, /, 9.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {]
[/, 9.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {]
[/, 9.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {]
[,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 1.0, /]
[1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,]
[}, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {]
[}, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {]
[private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {, 3.0, /]
[final, double, [, ], [, ], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,]
[final, double, [, ], [, ], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,]
[[, ], [, ], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /]
[], STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,]
[STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {]
[STATIC_A, =, {, {, 1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {]
[{, {, 1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /]
[1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,]
[1.0, /, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,]
[/, 5.0, }, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,, -]
[}, ,, {, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,, -, 56.0, /]
[{, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,]
[{, 3.0, /, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,]
[/, 40.0, ,, 9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /]
[9.0, /, 40.0, }, ,, {, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,]
[/, 40.0, }, ,, {, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {]
[/, 40.0, }, ,, {, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {]
[}, ,, {, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /]
[{, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,]
[{, 44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,]
[44.0, /, 45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -]
[45.0, ,, -, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /]
[-, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,]
[-, 56.0, /, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,]
[/, 15.0, ,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /]
[,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,]
[,, 32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,]
[32.0, /, 9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -]
[9.0, }, ,, {, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /]
[{, 19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,]
[19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {]
[19372.0, /, 6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {]
[6561.0, ,, -, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /]
[-, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,]
[-, 25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,]
[25360.0, /, 2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -]
[2187.0, ,, 64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /]
[64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,]
[64448.0, /, 6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,]
[6561.0, ,, -, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /]
[-, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,]
[-, 212.0, /, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,]
[/, 729.0, }, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /]
[}, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,]
[}, ,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,]
[,, {, 9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,, -]
[9017.0, /, 3168.0, ,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /]
[,, -, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,]
[-, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {]
[-, 355.0, /, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {]
[/, 33.0, ,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /]
[,, 46732.0, /, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,]
[/, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,]
[/, 5247.0, ,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,]
[,, 49.0, /, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /]
[/, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,]
[/, 176.0, ,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,]
[,, -, 5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /]
[5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,]
[5103.0, /, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,]
[/, 18656.0, }, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -]
[}, ,, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /]
[{, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /, 6784.0, ,]
[{, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /, 6784.0, ,]
[/, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /, 6784.0, ,, 11.0, /]
[,, -, 2187.0, /, 6784.0, ,, 11.0, /, 84.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =]
[-, 2187.0, /, 6784.0, ,, 11.0, /, 84.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {]
[-, 2187.0, /, 6784.0, ,, 11.0, /, 84.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {]
[/, 6784.0, ,, 11.0, /, 84.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 35.0, /]
[,, 11.0, /, 84.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,]
[/, 84.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,]
[/, 84.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,]
[}, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /]
[;, private, static, final, double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,]
[;, private, static, final, double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,]
[static, final, double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /]
[double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,]
[double, [, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,]
[[, ], STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -]
[STATIC_B, =, {, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /]
[{, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /, 6784.0, ,]
[{, 35.0, /, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /, 6784.0, ,]
[/, 384.0, ,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /, 6784.0, ,, 11.0, /]
[,, 0.0, ,, 500.0, /, 1113.0, ,, 125.0, /, 192.0, ,, -, 2187.0, /, 6784.0, ,, 11.0, /, 84.0, ,]
[192.0, ,, -, 2187.0, /, 6784.0, ,, 11.0, /, 84.0, ,, 0.0, }, ;, private, static, final, double, E1, =]
[192.0, ,, -, 2187.0, /, 6784.0, ,, 11.0, /, 84.0, ,, 0.0, }, ;, private, static, final, double, E1, =]
[-, 2187.0, /, 6784.0, ,, 11.0, /, 84.0, ,, 0.0, }, ;, private, static, final, double, E1, =, 71.0, /]
[,, 0.0, }, ;, private, static, final, double, E1, =, 71.0, /, 57600.0, ;, private, static, final, double, E3, =]
[,, 0.0, }, ;, private, static, final, double, E1, =, 71.0, /, 57600.0, ;, private, static, final, double, E3, =]
[0.0, }, ;, private, static, final, double, E1, =, 71.0, /, 57600.0, ;, private, static, final, double, E3, =, -]
[;, private, static, final, double, E1, =, 71.0, /, 57600.0, ;, private, static, final, double, E3, =, -, 71.0, /]
[/, 57600.0, ;, private, static, final, double, E3, =, -, 71.0, /, 16695.0, ;, private, static, final, double, E4, =]
[/, 57600.0, ;, private, static, final, double, E3, =, -, 71.0, /, 16695.0, ;, private, static, final, double, E4, =]
[;, private, static, final, double, E3, =, -, 71.0, /, 16695.0, ;, private, static, final, double, E4, =, 71.0, /]
[71.0, /, 16695.0, ;, private, static, final, double, E4, =, 71.0, /, 1920.0, ;, private, static, final, double, E5, =]
[71.0, /, 16695.0, ;, private, static, final, double, E4, =, 71.0, /, 1920.0, ;, private, static, final, double, E5, =]
[/, 16695.0, ;, private, static, final, double, E4, =, 71.0, /, 1920.0, ;, private, static, final, double, E5, =, -]
[;, private, static, final, double, E4, =, 71.0, /, 1920.0, ;, private, static, final, double, E5, =, -, 17253.0, /]
[/, 1920.0, ;, private, static, final, double, E5, =, -, 17253.0, /, 339200.0, ;, private, static, final, double, E6, =]
[/, 1920.0, ;, private, static, final, double, E5, =, -, 17253.0, /, 339200.0, ;, private, static, final, double, E6, =]
[;, private, static, final, double, E5, =, -, 17253.0, /, 339200.0, ;, private, static, final, double, E6, =, 22.0, /]
[17253.0, /, 339200.0, ;, private, static, final, double, E6, =, 22.0, /, 525.0, ;, private, static, final, double, E7, =]
[17253.0, /, 339200.0, ;, private, static, final, double, E6, =, 22.0, /, 525.0, ;, private, static, final, double, E7, =]
[/, 339200.0, ;, private, static, final, double, E6, =, 22.0, /, 525.0, ;, private, static, final, double, E7, =, -]
[;, private, static, final, double, E6, =, 22.0, /, 525.0, ;, private, static, final, double, E7, =, -, 1.0, /]
[(, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (]
[double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,]
[,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,]
[double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,]
[,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,]
[double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,]
[scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,]
[{, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,, minStep, ,]
[(, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,]
[,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,]
[,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (]
[double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,]
[,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,]
[double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,]
[], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,]
[,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,]
[vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,]
[{, super, (, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,, minStep, ,]
[(, METHOD_NAME, ,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,]
[,, true, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, DormandPrince54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,]
[,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }, @, Override, public, int, getOrder, (, ), {, return]
[final, double, [, ], y0, ,, final, double, [, ], y1, ,, final, double, h, ), {, double, error, =]
[double, [, ], y1, ,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =]
[], y1, ,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;]
[], y1, ,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;]
[,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;]
[h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =]
[;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =]
[(, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =, E1, *]
[(, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =, E1, *]
[(, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =, E1, *]
[j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =, E1, *, yDotK, []
[;, j, <, mainSetDimension, ;, ++, j, ), {, final, double, errSum, =, E1, *, yDotK, [, 0, ], []
[mainSetDimension, ;, ++, j, ), {, final, double, errSum, =, E1, *, yDotK, [, 0, ], [, j, ], +]
[mainSetDimension, ;, ++, j, ), {, final, double, errSum, =, E1, *, yDotK, [, 0, ], [, j, ], +]
[++, j, ), {, final, double, errSum, =, E1, *, yDotK, [, 0, ], [, j, ], +, E3, *]
[++, j, ), {, final, double, errSum, =, E1, *, yDotK, [, 0, ], [, j, ], +, E3, *]
[++, j, ), {, final, double, errSum, =, E1, *, yDotK, [, 0, ], [, j, ], +, E3, *]
[), {, final, double, errSum, =, E1, *, yDotK, [, 0, ], [, j, ], +, E3, *, yDotK, []
[double, errSum, =, E1, *, yDotK, [, 0, ], [, j, ], +, E3, *, yDotK, [, 2, ], []
[E1, *, yDotK, [, 0, ], [, j, ], +, E3, *, yDotK, [, 2, ], [, j, ], +]
[E1, *, yDotK, [, 0, ], [, j, ], +, E3, *, yDotK, [, 2, ], [, j, ], +]
[yDotK, [, 0, ], [, j, ], +, E3, *, yDotK, [, 2, ], [, j, ], +, E4, *]
[yDotK, [, 0, ], [, j, ], +, E3, *, yDotK, [, 2, ], [, j, ], +, E4, *]
[yDotK, [, 0, ], [, j, ], +, E3, *, yDotK, [, 2, ], [, j, ], +, E4, *]
[0, ], [, j, ], +, E3, *, yDotK, [, 2, ], [, j, ], +, E4, *, yDotK, []
[j, ], +, E3, *, yDotK, [, 2, ], [, j, ], +, E4, *, yDotK, [, 3, ], []
[E3, *, yDotK, [, 2, ], [, j, ], +, E4, *, yDotK, [, 3, ], [, j, ], +]
[E3, *, yDotK, [, 2, ], [, j, ], +, E4, *, yDotK, [, 3, ], [, j, ], +]
[yDotK, [, 2, ], [, j, ], +, E4, *, yDotK, [, 3, ], [, j, ], +, E5, *]
[yDotK, [, 2, ], [, j, ], +, E4, *, yDotK, [, 3, ], [, j, ], +, E5, *]
[yDotK, [, 2, ], [, j, ], +, E4, *, yDotK, [, 3, ], [, j, ], +, E5, *]
[2, ], [, j, ], +, E4, *, yDotK, [, 3, ], [, j, ], +, E5, *, yDotK, []
[j, ], +, E4, *, yDotK, [, 3, ], [, j, ], +, E5, *, yDotK, [, 4, ], []
[E4, *, yDotK, [, 3, ], [, j, ], +, E5, *, yDotK, [, 4, ], [, j, ], +]
[E4, *, yDotK, [, 3, ], [, j, ], +, E5, *, yDotK, [, 4, ], [, j, ], +]
[yDotK, [, 3, ], [, j, ], +, E5, *, yDotK, [, 4, ], [, j, ], +, E6, *]
[yDotK, [, 3, ], [, j, ], +, E5, *, yDotK, [, 4, ], [, j, ], +, E6, *]
[yDotK, [, 3, ], [, j, ], +, E5, *, yDotK, [, 4, ], [, j, ], +, E6, *]
[3, ], [, j, ], +, E5, *, yDotK, [, 4, ], [, j, ], +, E6, *, yDotK, []
[j, ], +, E5, *, yDotK, [, 4, ], [, j, ], +, E6, *, yDotK, [, 5, ], []
[E5, *, yDotK, [, 4, ], [, j, ], +, E6, *, yDotK, [, 5, ], [, j, ], +]
[E5, *, yDotK, [, 4, ], [, j, ], +, E6, *, yDotK, [, 5, ], [, j, ], +]
[yDotK, [, 4, ], [, j, ], +, E6, *, yDotK, [, 5, ], [, j, ], +, E7, *]
[yDotK, [, 4, ], [, j, ], +, E6, *, yDotK, [, 5, ], [, j, ], +, E7, *]
[yDotK, [, 4, ], [, j, ], +, E6, *, yDotK, [, 5, ], [, j, ], +, E7, *]
[4, ], [, j, ], +, E6, *, yDotK, [, 5, ], [, j, ], +, E7, *, yDotK, []
[j, ], +, E6, *, yDotK, [, 5, ], [, j, ], +, E7, *, yDotK, [, 6, ], []
[5, ], [, j, ], +, E7, *, yDotK, [, 6, ], [, j, ], ;, final, double, yScale, =]
[5, ], [, j, ], +, E7, *, yDotK, [, 6, ], [, j, ], ;, final, double, yScale, =]
[], +, E7, *, yDotK, [, 6, ], [, j, ], ;, final, double, yScale, =, FastMath, ., max, (]
[], +, E7, *, yDotK, [, 6, ], [, j, ], ;, final, double, yScale, =, FastMath, ., max, (]
[yDotK, [, 6, ], [, j, ], ;, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (]
[yDotK, [, 6, ], [, j, ], ;, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (]
[6, ], [, j, ], ;, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, []
[], ;, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,]
[], ;, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,]
[yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (]
[yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (]
[FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (, y1, []
[[, j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =]
[[, j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =]
[j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (]
[j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (]
[), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==]
[., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?]
[abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (]
[abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (]
[y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +]
[y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +]
[j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *]
[), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :]
[;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (]
[;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (]
[;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (]
[double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, []
[(, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +]
[(, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +]
[(, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +]
[==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, []
[?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[(, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *]
[[, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /]
[], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;]
[vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=]
[vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=]
[j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *]
[), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return]
[), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return]
[ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (]
[ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (]
[h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /]
