[commons, ., math3, ., util, ., FastMath, ;, public, class, IterativeLegendreGaussIntegrator, extends, BaseAbstractUnivariateIntegrator, {, private, static, final, GaussIntegratorFactory, FACTORY, =]
[,, final, double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (]
[double, absoluteAccuracy, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,]
[maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (]
[throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, n, <=]
[{, super, (, relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, n, <=, 0, ), {, throw]
[relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[relativeAccuracy, ,, absoluteAccuracy, ,, minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[minimalIterationCount, ,, maximalIterationCount, ), ;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,]
[;, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,, n, ), ;, }]
[(, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_POINTS, ,, n, ), ;, }, numberOfPoints, =]
[public, IterativeLegendreGaussIntegrator, (, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[(, final, int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, n, ,]
[int, n, ,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, n, ,, relativeAccuracy, ,]
[,, final, double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, n, ,, relativeAccuracy, ,, absoluteAccuracy, ,]
[double, relativeAccuracy, ,, final, double, absoluteAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, n, ,, relativeAccuracy, ,, absoluteAccuracy, ,, DEFAULT_MIN_ITERATIONS_COUNT, ,]
[(, final, int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, this, (]
[int, n, ,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, this, (, n, ,]
[,, final, int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, this, (, n, ,, DEFAULT_RELATIVE_ACCURACY, ,]
[int, minimalIterationCount, ,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, this, (, n, ,, DEFAULT_RELATIVE_ACCURACY, ,, DEFAULT_ABSOLUTE_ACCURACY, ,]
[,, final, int, maximalIterationCount, ), throws, NotStrictlyPositiveException, ,, NumberIsTooSmallException, {, this, (, n, ,, DEFAULT_RELATIVE_ACCURACY, ,, DEFAULT_ABSOLUTE_ACCURACY, ,, minimalIterationCount, ,]
[), ;, }, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =]
[}, @, Override, protected, double, doIntegrate, (, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (]
[(, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (, 1, ), ;, int, n, =]
[,, TooManyEvaluationsException, ,, MaxCountExceededException, {, double, oldt, =, stage, (, 1, ), ;, int, n, =, 2, ;, while, (]
[=, stage, (, 1, ), ;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =]
[(, 1, ), ;, int, n, =, 2, ;, while, (, true, ), {, final, double, t, =, stage, (]
[2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =]
[2, ;, while, (, true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =]
[true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (]
[true, ), {, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (]
[{, final, double, t, =, stage, (, n, ), ;, final, double, delta, =, FastMath, ., abs, (, t, -]
[n, ), ;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =]
[n, ), ;, final, double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =]
[double, delta, =, FastMath, ., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[., abs, (, t, -, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,]
[-, oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *]
[oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (]
[oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (]
[oldt, ), ;, final, double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (]
[double, limit, =, FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (]
[FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[FastMath, ., max, (, getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +]
[getAbsoluteAccuracy, (, ), ,, getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (]
[getRelativeAccuracy, (, ), *, (, FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (]
[FastMath, ., abs, (, oldt, ), +, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (]
[+, FastMath, ., abs, (, t, ), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +]
[., abs, (, t, ), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=]
[), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&]
[), ), *, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&]
[*, 0.5, ), ;, if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=]
[if, (, iterations, ., getCount, (, ), +, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {, return]
[+, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =]
[+, 1, >=, getMinimalIterationCount, (, ), &&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =]
[(, ), &&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (]
[&&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,]
[&&, delta, <=, limit, ), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,]
[), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[), {, return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (]
[return, t, ;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /]
[;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,]
[;, }, final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,]
[final, double, ratio, =, FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /]
[FastMath, ., min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;]
[min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =]
[min, (, 4, ,, FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =]
[FastMath, ., pow, (, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (]
[(, delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, )]
[delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (]
[delta, /, limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (]
[limit, ,, 0.5, /, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *]
[/, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,]
[/, numberOfPoints, ), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,]
[), ), ;, n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +]
[n, =, FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;]
[FastMath, ., max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =]
[max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =, t, ;]
[max, (, (, int, ), (, ratio, *, n, ), ,, n, +, 1, ), ;, oldt, =, t, ;]
[(, ), ;, }, }, private, double, stage, (, final, int, n, ), throws, TooManyEvaluationsException, {, final, UnivariateFunction, f, =]
[f, =, new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, {, return]
[new, UnivariateFunction, (, ), {, public, double, value, (, double, x, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, {, return, computeObjectiveValue, (]
[x, ), throws, MathIllegalArgumentException, ,, TooManyEvaluationsException, {, return, computeObjectiveValue, (, x, ), ;, }, }, ;, final, double, min, =]
[computeObjectiveValue, (, x, ), ;, }, }, ;, final, double, min, =, getMin, (, ), ;, final, double, max, =]
[final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, step, =]
[final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, step, =]
[double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, step, =, (]
[double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, step, =, (]
[=, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, step, =, (, max, -]
[), ;, final, double, max, =, getMax, (, ), ;, final, double, step, =, (, max, -, min, ), /]
[=, getMax, (, ), ;, final, double, step, =, (, max, -, min, ), /, n, ;, double, sum, =]
[step, =, (, max, -, min, ), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =]
[(, max, -, min, ), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[(, max, -, min, ), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;]
[-, min, ), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[), /, n, ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, a, =]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, a, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, a, =, min, +]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, a, =, min, +]
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, a, =, min, +, i, *]
[n, ;, i, ++, ), {, final, double, a, =, min, +, i, *, step, ;, final, double, b, =]
[n, ;, i, ++, ), {, final, double, a, =, min, +, i, *, step, ;, final, double, b, =]
[i, ++, ), {, final, double, a, =, min, +, i, *, step, ;, final, double, b, =, a, +]
[a, =, min, +, i, *, step, ;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =]
[a, =, min, +, i, *, step, ;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =]
[i, *, step, ;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (]
[step, ;, final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,]
[final, double, b, =, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,]
[=, a, +, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;]
[+, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=]
[+, step, ;, final, GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=]
[GaussIntegrator, g, =, FACTORY, ., legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=, g, ., integrate, (]
[legendreHighPrecision, (, numberOfPoints, ,, a, ,, b, ), ;, sum, +=, g, ., integrate, (, f, ), ;, }, return]
