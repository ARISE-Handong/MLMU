[commons, ., math3, ., ode, ., EquationsMapper, ;, public, class, DummyStepInterpolator, extends, AbstractStepInterpolator, {, private, static, final, long, serialVersionUID, =]
[long, serialVersionUID, =, 1708010296707839488L, ;, private, double, [, ], currentDerivative, ;, public, DummyStepInterpolator, (, ), {, super, (, ), ;]
[=, 1708010296707839488L, ;, private, double, [, ], currentDerivative, ;, public, DummyStepInterpolator, (, ), {, super, (, ), ;, currentDerivative, =]
[(, final, double, [, ], y, ,, final, double, [, ], yDot, ,, final, boolean, forward, ), {, super, (]
[double, [, ], y, ,, final, double, [, ], yDot, ,, final, boolean, forward, ), {, super, (, y, ,]
[], y, ,, final, double, [, ], yDot, ,, final, boolean, forward, ), {, super, (, y, ,, forward, ,]
[final, double, [, ], yDot, ,, final, boolean, forward, ), {, super, (, y, ,, forward, ,, new, EquationsMapper, (]
[[, ], yDot, ,, final, boolean, forward, ), {, super, (, y, ,, forward, ,, new, EquationsMapper, (, 0, ,]
[[, ], yDot, ,, final, boolean, forward, ), {, super, (, y, ,, forward, ,, new, EquationsMapper, (, 0, ,]
[boolean, forward, ), {, super, (, y, ,, forward, ,, new, EquationsMapper, (, 0, ,, y, ., length, ), ,]
[{, super, (, y, ,, forward, ,, new, EquationsMapper, (, 0, ,, y, ., length, ), ,, new, EquationsMapper, []
[,, forward, ,, new, EquationsMapper, (, 0, ,, y, ., length, ), ,, new, EquationsMapper, [, 0, ], ), ;]
[,, new, EquationsMapper, (, 0, ,, y, ., length, ), ,, new, EquationsMapper, [, 0, ], ), ;, currentDerivative, =]
[[, 0, ], ), ;, currentDerivative, =, yDot, ;, }, public, DummyStepInterpolator, (, final, DummyStepInterpolator, interpolator, ), {, super, (]
[), ;, currentDerivative, =, yDot, ;, }, public, DummyStepInterpolator, (, final, DummyStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;]
[currentDerivative, =, yDot, ;, }, public, DummyStepInterpolator, (, final, DummyStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, currentDerivative, =]
[currentDerivative, =, yDot, ;, }, public, DummyStepInterpolator, (, final, DummyStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, currentDerivative, =]
[currentDerivative, =, yDot, ;, }, public, DummyStepInterpolator, (, final, DummyStepInterpolator, interpolator, ), {, super, (, interpolator, ), ;, currentDerivative, =]
[currentDerivative, =, interpolator, ., currentDerivative, ., clone, (, ), ;, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return]
[., currentDerivative, ., clone, (, ), ;, }, @, Override, protected, StepInterpolator, doCopy, (, ), {, return, new, DummyStepInterpolator, (]
[(, this, ), ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {]
[(, this, ), ;, }, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {]
[}, @, Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {, System, ., arraycopy, (]
[Override, protected, void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {, System, ., arraycopy, (, currentState, ,]
[void, computeInterpolatedStateAndDerivatives, (, final, double, theta, ,, final, double, oneMinusThetaH, ), {, System, ., arraycopy, (, currentState, ,, 0, ,]
[(, final, double, theta, ,, final, double, oneMinusThetaH, ), {, System, ., arraycopy, (, currentState, ,, 0, ,, interpolatedState, ,]
[double, theta, ,, final, double, oneMinusThetaH, ), {, System, ., arraycopy, (, currentState, ,, 0, ,, interpolatedState, ,, 0, ,]
[double, theta, ,, final, double, oneMinusThetaH, ), {, System, ., arraycopy, (, currentState, ,, 0, ,, interpolatedState, ,, 0, ,]
[oneMinusThetaH, ), {, System, ., arraycopy, (, currentState, ,, 0, ,, interpolatedState, ,, 0, ,, currentState, ., length, ), ;]
[oneMinusThetaH, ), {, System, ., arraycopy, (, currentState, ,, 0, ,, interpolatedState, ,, 0, ,, currentState, ., length, ), ;]
[., arraycopy, (, currentState, ,, 0, ,, interpolatedState, ,, 0, ,, currentState, ., length, ), ;, System, ., arraycopy, (]
[(, currentState, ,, 0, ,, interpolatedState, ,, 0, ,, currentState, ., length, ), ;, System, ., arraycopy, (, currentDerivative, ,]
[,, 0, ,, interpolatedState, ,, 0, ,, currentState, ., length, ), ;, System, ., arraycopy, (, currentDerivative, ,, 0, ,]
[,, interpolatedState, ,, 0, ,, currentState, ., length, ), ;, System, ., arraycopy, (, currentDerivative, ,, 0, ,, interpolatedDerivatives, ,]
[,, 0, ,, currentState, ., length, ), ;, System, ., arraycopy, (, currentDerivative, ,, 0, ,, interpolatedDerivatives, ,, 0, ,]
[,, 0, ,, currentState, ., length, ), ;, System, ., arraycopy, (, currentDerivative, ,, 0, ,, interpolatedDerivatives, ,, 0, ,]
[,, currentDerivative, ., length, ), ;, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {]
[., length, ), ;, }, @, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, writeBaseExternal, (]
[@, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, writeBaseExternal, (, out, ), ;, if, (]
[@, Override, public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, writeBaseExternal, (, out, ), ;, if, (]
[public, void, writeExternal, (, final, ObjectOutput, out, ), throws, IOException, {, writeBaseExternal, (, out, ), ;, if, (, currentDerivative, !=]
[throws, IOException, {, writeBaseExternal, (, out, ), ;, if, (, currentDerivative, !=, null, ), {, for, (, int, i, =]
[{, writeBaseExternal, (, out, ), ;, if, (, currentDerivative, !=, null, ), {, for, (, int, i, =, 0, ;]
[{, writeBaseExternal, (, out, ), ;, if, (, currentDerivative, !=, null, ), {, for, (, int, i, =, 0, ;]
[(, out, ), ;, if, (, currentDerivative, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[(, out, ), ;, if, (, currentDerivative, !=, null, ), {, for, (, int, i, =, 0, ;, i, <]
[if, (, currentDerivative, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;]
[(, currentDerivative, !=, null, ), {, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++]
[null, ), {, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {]
[null, ), {, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {]
[(, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {, out, ., writeDouble, (]
[(, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {, out, ., writeDouble, (]
[i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {, out, ., writeDouble, (, currentDerivative, []
[}, @, Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =]
[Override, public, void, readExternal, (, final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (]
[final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, if, (]
[final, ObjectInput, in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, if, (]
[in, ), throws, IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, if, (, currentState, ==]
[IOException, ,, ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, if, (, currentState, ==, null, ), {]
[ClassNotFoundException, {, final, double, t, =, readBaseExternal, (, in, ), ;, if, (, currentState, ==, null, ), {, currentDerivative, =]
[=, readBaseExternal, (, in, ), ;, if, (, currentState, ==, null, ), {, currentDerivative, =, null, ;, }, else, {]
[(, in, ), ;, if, (, currentState, ==, null, ), {, currentDerivative, =, null, ;, }, else, {, currentDerivative, =]
[;, if, (, currentState, ==, null, ), {, currentDerivative, =, null, ;, }, else, {, currentDerivative, =, new, double, []
[;, if, (, currentState, ==, null, ), {, currentDerivative, =, null, ;, }, else, {, currentDerivative, =, new, double, []
[null, ;, }, else, {, currentDerivative, =, new, double, [, currentState, ., length, ], ;, for, (, int, i, =]
[}, else, {, currentDerivative, =, new, double, [, currentState, ., length, ], ;, for, (, int, i, =, 0, ;]
[}, else, {, currentDerivative, =, new, double, [, currentState, ., length, ], ;, for, (, int, i, =, 0, ;]
[{, currentDerivative, =, new, double, [, currentState, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[{, currentDerivative, =, new, double, [, currentState, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, currentState, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;]
[[, currentState, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {, currentDerivative, []
[int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {, currentDerivative, [, i, ], =]
[int, i, =, 0, ;, i, <, currentDerivative, ., length, ;, ++, i, ), {, currentDerivative, [, i, ], =]
[., length, ;, ++, i, ), {, currentDerivative, [, i, ], =, in, ., readDouble, (, ), ;, }, }]
[;, ++, i, ), {, currentDerivative, [, i, ], =, in, ., readDouble, (, ), ;, }, }, setInterpolatedTime, (]
