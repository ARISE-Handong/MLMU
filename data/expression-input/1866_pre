[util, ., LinkedList, ;, import, java, ., util, ., List, ;, class, ExtractPrototypeMemberDeclarations, implements, CompilerPass, {, private, String, prototypeAlias, =]
[int, perExtractionOverhead, ;, private, final, int, perMemberOverhead, ;, Pattern, (, int, globalOverHead, ,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {]
[int, perExtractionOverhead, ;, private, final, int, perMemberOverhead, ;, Pattern, (, int, globalOverHead, ,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {]
[final, int, perMemberOverhead, ;, Pattern, (, int, globalOverHead, ,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {, this, ., globalOverhead, =]
[perMemberOverhead, ;, Pattern, (, int, globalOverHead, ,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {, this, ., globalOverhead, =, globalOverHead, ;]
[perMemberOverhead, ;, Pattern, (, int, globalOverHead, ,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {, this, ., globalOverhead, =, globalOverHead, ;]
[int, globalOverHead, ,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {, this, ., globalOverhead, =, globalOverHead, ;, this, ., perExtractionOverhead, =]
[,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {, this, ., globalOverhead, =, globalOverHead, ;, this, ., perExtractionOverhead, =, perExtractionOverhead, ;]
[,, int, perExtractionOverhead, ,, int, perMemberOverhead, ), {, this, ., globalOverhead, =, globalOverHead, ;, this, ., perExtractionOverhead, =, perExtractionOverhead, ;]
[int, perMemberOverhead, ), {, this, ., globalOverhead, =, globalOverHead, ;, this, ., perExtractionOverhead, =, perExtractionOverhead, ;, this, ., perMemberOverhead, =]
[String, prototypeAlias, =, "JSCompiler_prototypeAlias", ;, private, final, AbstractCompiler, compiler, ;, private, final, Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (]
[String, prototypeAlias, =, "JSCompiler_prototypeAlias", ;, private, final, AbstractCompiler, compiler, ;, private, final, Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (]
[final, AbstractCompiler, compiler, ;, private, final, Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (, "var t;", ., length, (, ), ,]
[final, AbstractCompiler, compiler, ;, private, final, Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (, "var t;", ., length, (, ), ,]
[Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (, "var t;", ., length, (, ), ,, "t=y.prototype;", ., length, (, ), ,]
[Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (, "var t;", ., length, (, ), ,, "t=y.prototype;", ., length, (, ), ,]
[Pattern, pattern, ;, enum, Pattern, {, USE_GLOBAL_TEMP, (, "var t;", ., length, (, ), ,, "t=y.prototype;", ., length, (, ), ,]
[USE_GLOBAL_TEMP, (, "var t;", ., length, (, ), ,, "t=y.prototype;", ., length, (, ), ,, "t.y=", ., length, (, ), -]
[USE_GLOBAL_TEMP, (, "var t;", ., length, (, ), ,, "t=y.prototype;", ., length, (, ), ,, "t.y=", ., length, (, ), -]
[., length, (, ), ,, "t.y=", ., length, (, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (]
[(, ), ,, "t.y=", ., length, (, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,]
[(, ), ,, "t.y=", ., length, (, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,]
[(, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,]
[(, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,]
[(, ), -, "x[p].y=", ., length, (, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,]
[(, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,, "t.y=", ., length, (, ), -]
[(, ), ), ,, USE_ANON_FUNCTION, (, 0, ,, "(function(t){})(y.prototype);", ., length, (, ), ,, "t.y=", ., length, (, ), -]
[=, perExtractionOverhead, ;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {]
[=, perExtractionOverhead, ;, this, ., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {]
[., perMemberOverhead, =, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, ., compiler, =]
[=, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, ., compiler, =, compiler, ;]
[=, perMemberOverhead, ;, }, }, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, ., compiler, =, compiler, ;]
[}, ExtractPrototypeMemberDeclarations, (, AbstractCompiler, compiler, ,, Pattern, pattern, ), {, this, ., compiler, =, compiler, ;, this, ., pattern, =]
[=, pattern, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GatherExtractionInfo, extractionInfo, =]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GatherExtractionInfo, extractionInfo, =, new, GatherExtractionInfo, (, ), ;]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GatherExtractionInfo, extractionInfo, =, new, GatherExtractionInfo, (, ), ;]
[(, Node, externs, ,, Node, root, ), {, GatherExtractionInfo, extractionInfo, =, new, GatherExtractionInfo, (, ), ;, NodeTraversal, ., traverse, (]
[externs, ,, Node, root, ), {, GatherExtractionInfo, extractionInfo, =, new, GatherExtractionInfo, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[Node, root, ), {, GatherExtractionInfo, extractionInfo, =, new, GatherExtractionInfo, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[extractionInfo, =, new, GatherExtractionInfo, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, extractionInfo, ), ;, if, (]
[extractionInfo, =, new, GatherExtractionInfo, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, extractionInfo, ), ;, if, (]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {]
[traverse, (, compiler, ,, root, ,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction, (]
[,, root, ,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction, (, extractionInfo, ), ;]
[,, root, ,, extractionInfo, ), ;, if, (, extractionInfo, ., shouldExtract, (, ), ), {, doExtraction, (, extractionInfo, ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (]
[compiler, ., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (, pattern, ==]
[compiler, ., reportCodeChange, (, ), ;, }, }, private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (, pattern, ==]
[private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =]
[private, void, doExtraction, (, GatherExtractionInfo, info, ), {, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =]
[GatherExtractionInfo, info, ), {, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (]
[pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =]
[pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =]
[pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =]
[USE_GLOBAL_TEMP, ), {, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (]
[{, Node, injectionPoint, =, compiler, ., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,]
[., getNodeForCodeInsertion, (, null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (]
[null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (, injectionPoint, ), ;]
[null, ), ;, Node, var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (, injectionPoint, ), ;]
[var, =, NodeUtil, ., newVarNode, (, prototypeAlias, ,, null, ), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, ., addChildrenToFront, (]
[), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :]
[), ., copyInformationFromForTree, (, injectionPoint, ), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :]
[), ;, injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :, info, ., instances, ), {]
[injectionPoint, ., addChildrenToFront, (, var, ), ;, }, for, (, ExtractionInstance, instance, :, info, ., instances, ), {, extractInstance, (]
[), {, extractInstance, (, instance, ), ;, }, }, private, void, extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =]
[), {, extractInstance, (, instance, ), ;, }, }, private, void, extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =]
[), {, extractInstance, (, instance, ), ;, }, }, private, void, extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =]
[extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =, instance, ., declarations, ., getFirst, (, ), ;, String, className, =]
[extractInstance, (, ExtractionInstance, instance, ), {, PrototypeMemberDeclaration, first, =, instance, ., declarations, ., getFirst, (, ), ;, String, className, =]
[PrototypeMemberDeclaration, first, =, instance, ., declarations, ., getFirst, (, ), ;, String, className, =, first, ., qualifiedClassName, ;, if, (]
[PrototypeMemberDeclaration, first, =, instance, ., declarations, ., getFirst, (, ), ;, String, className, =, first, ., qualifiedClassName, ;, if, (]
[=, instance, ., declarations, ., getFirst, (, ), ;, String, className, =, first, ., qualifiedClassName, ;, if, (, pattern, ==]
[=, instance, ., declarations, ., getFirst, (, ), ;, String, className, =, first, ., qualifiedClassName, ;, if, (, pattern, ==]
[;, String, className, =, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =]
[;, String, className, =, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =]
[=, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (]
[=, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (]
[=, first, ., qualifiedClassName, ;, if, (, pattern, ==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (]
[==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,]
[==, Pattern, ., USE_GLOBAL_TEMP, ), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,]
[), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, IR, ., assign, (]
[), {, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, IR, ., assign, (]
[=, new, Node, (, first, ., node, ., getType, (, ), ,, IR, ., assign, (, IR, ., name, (]
[(, first, ., node, ., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,]
[(, first, ., node, ., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,]
[., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (]
[., getType, (, ), ,, IR, ., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (]
[., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[., assign, (, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[(, IR, ., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +]
[., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,]
[., name, (, prototypeAlias, ), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,]
[), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,]
[), ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +]
[(, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (]
[(, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (]
[".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;]
[".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;]
[".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;]
[className, +, ".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (]
[".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,]
[".prototype", ), ), ), ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,]
[node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (]
[node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (]
[;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (, pattern, ==]
[;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, }, else, if, (, pattern, ==]
[,, first, ., node, ), ;, }, else, if, (, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =]
[,, first, ., node, ), ;, }, else, if, (, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =]
[(, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =]
[(, pattern, ==, Pattern, ., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =]
[., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =, IR, ., function, (]
[., USE_ANON_FUNCTION, ), {, Node, block, =, IR, ., block, (, ), ;, Node, func, =, IR, ., function, (]
[Node, block, =, IR, ., block, (, ), ;, Node, func, =, IR, ., function, (, IR, ., name, (]
[IR, ., block, (, ), ;, Node, func, =, IR, ., function, (, IR, ., name, (, "", ), ,]
[IR, ., block, (, ), ;, Node, func, =, IR, ., function, (, IR, ., name, (, "", ), ,]
[), ;, Node, func, =, IR, ., function, (, IR, ., name, (, "", ), ,, IR, ., paramList, (]
[), ;, Node, func, =, IR, ., function, (, IR, ., name, (, "", ), ,, IR, ., paramList, (]
[=, IR, ., function, (, IR, ., name, (, "", ), ,, IR, ., paramList, (, IR, ., name, (]
[(, IR, ., name, (, "", ), ,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,]
[), ,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =]
[), ,, IR, ., paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =]
[paramList, (, IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR, ., call, (]
[IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR, ., call, (, func, ,]
[IR, ., name, (, prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR, ., call, (, func, ,]
[prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (]
[prototypeAlias, ), ), ,, block, ), ;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (]
[;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[;, Node, call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[call, =, IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +]
[IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,]
[IR, ., call, (, func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,]
[func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,]
[func, ,, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,]
[NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +]
[compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;]
[compiler, ., getCodingConvention, (, ), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;]
[), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (]
[), ,, className, +, ".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (]
[".prototype", ,, instance, ., parent, ,, className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,]
[className, +, ".prototype", ), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =]
[), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (]
[), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (]
[), ), ;, call, ., putIntProp, (, Node, ., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (]
[., FREE_CALL, ,, 1, ), ;, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,]
[1, ), ;, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, call, ), ;]
[1, ), ;, Node, stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, call, ), ;]
[stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, call, ), ;, stmt, ., copyInformationFromForTree, (]
[stmt, =, new, Node, (, first, ., node, ., getType, (, ), ,, call, ), ;, stmt, ., copyInformationFromForTree, (]
[first, ., node, ., getType, (, ), ,, call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;]
[first, ., node, ., getType, (, ), ,, call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;]
[first, ., node, ., getType, (, ), ,, call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;]
[), ,, call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (]
[call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,]
[call, ), ;, stmt, ., copyInformationFromForTree, (, first, ., node, ), ;, instance, ., parent, ., addChildBefore, (, stmt, ,]
[), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :]
[), ;, instance, ., parent, ., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :]
[., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {]
[., addChildBefore, (, stmt, ,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {]
[,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, block, ., addChildToBack, (]
[,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, block, ., addChildToBack, (]
[,, first, ., node, ), ;, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, block, ., addChildToBack, (]
[block, ., addChildToBack, (, declar, ., node, ., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :]
[block, ., addChildToBack, (, declar, ., node, ., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :]
[., node, ., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {]
[., detachFromParent, (, ), ), ;, }, }, for, (, PrototypeMemberDeclaration, declar, :, instance, ., declarations, ), {, replacePrototypeMemberDeclaration, (]
[), {, replacePrototypeMemberDeclaration, (, declar, ), ;, }, }, private, void, replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =]
[), {, replacePrototypeMemberDeclaration, (, declar, ), ;, }, }, private, void, replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =]
[), {, replacePrototypeMemberDeclaration, (, declar, ), ;, }, }, private, void, replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =]
[replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =, declar, ., node, ., getFirstChild, (, ), ;, Node, lhs, =]
[replacePrototypeMemberDeclaration, (, PrototypeMemberDeclaration, declar, ), {, Node, assignment, =, declar, ., node, ., getFirstChild, (, ), ;, Node, lhs, =]
[declar, ., node, ., getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, name, =]
[declar, ., node, ., getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, name, =]
[getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (]
[getFirstChild, (, ), ;, Node, lhs, =, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (]
[=, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[=, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[=, assignment, ., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,]
[., getFirstChild, (, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +]
[(, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +]
[(, ), ;, Node, name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +]
[name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, ., memberName, ,]
[name, =, NodeUtil, ., newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, ., memberName, ,]
[newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,]
[newQualifiedNameNode, (, compiler, ., getCodingConvention, (, ), ,, prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,]
[prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =]
[prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =]
[prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =]
[prototypeAlias, +, ".", +, declar, ., memberName, ,, declar, ., node, ,, declar, ., memberName, ), ;, Node, accessNode, =]
[), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =]
[), ;, Node, accessNode, =, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =]
[=, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =, accessNode, ., getProp, (]
[=, declar, ., lhs, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, Object, originalName, =, accessNode, ., getProp, (]
[., getFirstChild, (, ), ;, Object, originalName, =, accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =]
[;, Object, originalName, =, accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (]
[;, Object, originalName, =, accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (]
[originalName, =, accessNode, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (, originalName, !=]
[., getProp, (, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (, originalName, !=, null, ), {]
[(, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (, originalName, !=, null, ), {, className, =]
[(, Node, ., ORIGINALNAME_PROP, ), ;, String, className, =, "?", ;, if, (, originalName, !=, null, ), {, className, =]
[className, =, "?", ;, if, (, originalName, !=, null, ), {, className, =, originalName, ., toString, (, ), ;, }]
[className, =, "?", ;, if, (, originalName, !=, null, ), {, className, =, originalName, ., toString, (, ), ;, }]
[if, (, originalName, !=, null, ), {, className, =, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (]
[if, (, originalName, !=, null, ), {, className, =, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (]
[{, className, =, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,]
[=, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,]
[=, originalName, ., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,]
[., toString, (, ), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +]
[), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", ), ;]
[), ;, }, NodeUtil, ., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", ), ;]
[., setDebugInformation, (, name, ., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", ), ;, assignment, ., replaceChild, (]
[(, name, ., getFirstChild, (, ), ,, lhs, ,, className, +, ".prototype", ), ;, assignment, ., replaceChild, (, lhs, ,]
[(, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >, instances, =]
[(, lhs, ,, name, ), ;, }, private, class, GatherExtractionInfo, extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >, instances, =]
[extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >, instances, =, Lists, ., newLinkedList, (, ), ;, private, int, totalDelta, =]
[extends, AbstractShallowCallback, {, private, List, <, ExtractionInstance, >, instances, =, Lists, ., newLinkedList, (, ), ;, private, int, totalDelta, =]
[globalOverhead, ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[globalOverhead, ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, n, ., isScript, (, ), &&]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, n, ., isScript, (, ), &&, !]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, n, ., isScript, (, ), &&, !]
[isScript, (, ), &&, !, n, ., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur, =]
[isScript, (, ), &&, !, n, ., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur, =]
[., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;]
[., isBlock, (, ), ), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;]
[(, ), ), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;, cur, !=]
[), {, return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;, cur, !=, null, ;]
[return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;, cur, !=, null, ;, cur, =]
[return, ;, }, for, (, Node, cur, =, n, ., getFirstChild, (, ), ;, cur, !=, null, ;, cur, =]
[getFirstChild, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =]
[getFirstChild, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =]
[cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (]
[=, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (]
[=, cur, ., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (]
[., getNext, (, ), ), {, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==]
[PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ), {, continue, ;, }, ExtractionInstance, instance, =]
[(, cur, ), ;, if, (, prototypeMember, ==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (]
[), ;, if, (, prototypeMember, ==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,]
[(, prototypeMember, ==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;]
[==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;, cur, =]
[==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;, cur, =]
[==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;, cur, =]
[==, null, ), {, continue, ;, }, ExtractionInstance, instance, =, new, ExtractionInstance, (, prototypeMember, ,, n, ), ;, cur, =]
[(, prototypeMember, ,, n, ), ;, cur, =, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (]
[(, prototypeMember, ,, n, ), ;, cur, =, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (]
[=, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (, ), ), {]
[=, instance, ., declarations, ., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (, ), ), {]
[., getLast, (, ), ., node, ;, if, (, instance, ., isFavorable, (, ), ), {, instances, ., add, (]
[), ., node, ;, if, (, instance, ., isFavorable, (, ), ), {, instances, ., add, (, instance, ), ;]
[node, ;, if, (, instance, ., isFavorable, (, ), ), {, instances, ., add, (, instance, ), ;, totalDelta, +=]
[node, ;, if, (, instance, ., isFavorable, (, ), ), {, instances, ., add, (, instance, ), ;, totalDelta, +=]
[(, instance, ), ;, totalDelta, +=, instance, ., delta, ;, }, }, }, private, boolean, shouldExtract, (, ), {, return]
[(, instance, ), ;, totalDelta, +=, instance, ., delta, ;, }, }, }, private, boolean, shouldExtract, (, ), {, return]
[), ;, totalDelta, +=, instance, ., delta, ;, }, }, }, private, boolean, shouldExtract, (, ), {, return, totalDelta, <]
[(, ), {, return, totalDelta, <, 0, ;, }, }, private, class, ExtractionInstance, {, LinkedList, <, PrototypeMemberDeclaration, >, declarations, =]
[(, ), {, return, totalDelta, <, 0, ;, }, }, private, class, ExtractionInstance, {, LinkedList, <, PrototypeMemberDeclaration, >, declarations, =]
[private, class, ExtractionInstance, {, LinkedList, <, PrototypeMemberDeclaration, >, declarations, =, Lists, ., newLinkedList, (, ), ;, private, int, delta, =]
[int, delta, =, 0, ;, private, final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent, ), {]
[int, delta, =, 0, ;, private, final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent, ), {]
[;, private, final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent, ), {, this, ., parent, =]
[final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent, ), {, this, ., parent, =, parent, ;]
[final, Node, parent, ;, private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent, ), {, this, ., parent, =, parent, ;]
[private, ExtractionInstance, (, PrototypeMemberDeclaration, head, ,, Node, parent, ), {, this, ., parent, =, parent, ;, declarations, ., add, (]
[PrototypeMemberDeclaration, head, ,, Node, parent, ), {, this, ., parent, =, parent, ;, declarations, ., add, (, head, ), ;]
[,, Node, parent, ), {, this, ., parent, =, parent, ;, declarations, ., add, (, head, ), ;, delta, =]
[,, Node, parent, ), {, this, ., parent, =, parent, ;, declarations, ., add, (, head, ), ;, delta, =]
[,, Node, parent, ), {, this, ., parent, =, parent, ;, declarations, ., add, (, head, ), ;, delta, =]
[{, this, ., parent, =, parent, ;, declarations, ., add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +]
[{, this, ., parent, =, parent, ;, declarations, ., add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +]
[add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =]
[add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =]
[add, (, head, ), ;, delta, =, pattern, ., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =]
[., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;]
[., perExtractionOverhead, +, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;]
[+, pattern, ., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=]
[., perMemberOverhead, ;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=, null, ;]
[;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=, null, ;, cur, =]
[;, for, (, Node, cur, =, head, ., node, ., getNext, (, ), ;, cur, !=, null, ;, cur, =]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[., getNext, (, ), ;, cur, !=, null, ;, cur, =, cur, ., getNext, (, ), ), {, if, (]
[getNext, (, ), ), {, if, (, cur, ., isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =]
[getNext, (, ), ), {, if, (, cur, ., isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =]
[{, if, (, cur, ., isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (]
[isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (]
[isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (]
[isFunction, (, ), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (]
[), ), {, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==]
[{, continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ||]
[continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ||, !]
[continue, ;, }, PrototypeMemberDeclaration, prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ||, !]
[prototypeMember, =, PrototypeMemberDeclaration, ., extractDeclaration, (, cur, ), ;, if, (, prototypeMember, ==, null, ||, !, head, ., isSameClass, (]
[), ;, if, (, prototypeMember, ==, null, ||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }]
[), ;, if, (, prototypeMember, ==, null, ||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }]
[prototypeMember, ==, null, ||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (]
[||, !, head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;]
[head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;, delta, +=]
[head, ., isSameClass, (, prototypeMember, ), ), {, break, ;, }, declarations, ., add, (, prototypeMember, ), ;, delta, +=]
[., add, (, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return]
[., add, (, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return]
[(, prototypeMember, ), ;, delta, +=, pattern, ., perMemberOverhead, ;, }, }, boolean, isFavorable, (, ), {, return, delta, <=]
[node, ;, final, String, qualifiedClassName, ;, final, Node, lhs, ;, private, PrototypeMemberDeclaration, (, Node, lhs, ,, Node, node, ), {]
[node, ;, final, String, qualifiedClassName, ;, final, Node, lhs, ;, private, PrototypeMemberDeclaration, (, Node, lhs, ,, Node, node, ), {]
[qualifiedClassName, ;, final, Node, lhs, ;, private, PrototypeMemberDeclaration, (, Node, lhs, ,, Node, node, ), {, this, ., lhs, =]
[final, Node, lhs, ;, private, PrototypeMemberDeclaration, (, Node, lhs, ,, Node, node, ), {, this, ., lhs, =, lhs, ;]
[final, Node, lhs, ;, private, PrototypeMemberDeclaration, (, Node, lhs, ,, Node, node, ), {, this, ., lhs, =, lhs, ;]
[private, PrototypeMemberDeclaration, (, Node, lhs, ,, Node, node, ), {, this, ., lhs, =, lhs, ;, this, ., memberName, =]
[private, PrototypeMemberDeclaration, (, Node, lhs, ,, Node, node, ), {, this, ., lhs, =, lhs, ;, this, ., memberName, =]
[lhs, ,, Node, node, ), {, this, ., lhs, =, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (]
[node, ), {, this, ., lhs, =, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;]
[node, ), {, this, ., lhs, =, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;]
[., lhs, =, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =]
[=, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;]
[=, lhs, ;, this, ., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;]
[., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =]
[., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =]
[., memberName, =, NodeUtil, ., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =]
[., getPrototypePropertyName, (, lhs, ), ;, this, ., node, =, node, ;, this, ., qualifiedClassName, =, NodeUtil, ., getPrototypeClassName, (]
[., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return]
[., getPrototypeClassName, (, lhs, ), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return]
[), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return, qualifiedClassName, ., equals, (]
[), ., getQualifiedName, (, ), ;, }, private, boolean, isSameClass, (, PrototypeMemberDeclaration, other, ), {, return, qualifiedClassName, ., equals, (]
[., equals, (, other, ., qualifiedClassName, ), ;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (]
[equals, (, other, ., qualifiedClassName, ), ;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (, !]
[equals, (, other, ., qualifiedClassName, ), ;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (, !]
[qualifiedClassName, ), ;, }, private, static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration, (]
[static, PrototypeMemberDeclaration, extractDeclaration, (, Node, n, ), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration, (, n, ), ), {, return]
[), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration, (, n, ), ), {, return, null, ;, }, Node, lhs, =]
[), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration, (, n, ), ), {, return, null, ;, }, Node, lhs, =]
[), {, if, (, !, NodeUtil, ., isPrototypePropertyDeclaration, (, n, ), ), {, return, null, ;, }, Node, lhs, =]
[), {, return, null, ;, }, Node, lhs, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, return]
[null, ;, }, Node, lhs, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, return, new, PrototypeMemberDeclaration, (]
[}, Node, lhs, =, n, ., getFirstChild, (, ), ., getFirstChild, (, ), ;, return, new, PrototypeMemberDeclaration, (, lhs, ,]
