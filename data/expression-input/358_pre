[;, import, java, ., util, ., regex, ., Pattern, ;, public, abstract, class, JsFileLineParser, {, static, final, DiagnosticType, PARSE_WARNING, =]
[;, import, java, ., util, ., regex, ., Pattern, ;, public, abstract, class, JsFileLineParser, {, static, final, DiagnosticType, PARSE_WARNING, =]
[util, ., regex, ., Pattern, ;, public, abstract, class, JsFileLineParser, {, static, final, DiagnosticType, PARSE_WARNING, =, DiagnosticType, ., warning, (]
[regex, ., Pattern, ;, public, abstract, class, JsFileLineParser, {, static, final, DiagnosticType, PARSE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_PARSE_WARNING", ,]
[{, static, final, DiagnosticType, PARSE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_PARSE_WARNING", ,, "{0}\n{1}", ), ;, static, final, DiagnosticType, PARSE_ERROR, =]
[{, static, final, DiagnosticType, PARSE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_PARSE_WARNING", ,, "{0}\n{1}", ), ;, static, final, DiagnosticType, PARSE_ERROR, =]
[PARSE_WARNING, =, DiagnosticType, ., warning, (, "DEPS_PARSE_WARNING", ,, "{0}\n{1}", ), ;, static, final, DiagnosticType, PARSE_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., warning, (, "DEPS_PARSE_WARNING", ,, "{0}\n{1}", ), ;, static, final, DiagnosticType, PARSE_ERROR, =, DiagnosticType, ., error, (, "DEPS_PARSE_ERROR", ,]
["{0}\n{1}", ), ;, static, final, DiagnosticType, PARSE_ERROR, =, DiagnosticType, ., error, (, "DEPS_PARSE_ERROR", ,, "{0}\n{1}", ), ;, boolean, shortcutMode, =]
["{0}\n{1}", ), ;, boolean, shortcutMode, =, false, ;, static, class, ParseException, extends, Exception, {, public, static, final, long, serialVersionUID, =]
[serialVersionUID, =, 1L, ;, private, boolean, fatal, ;, public, ParseException, (, String, message, ,, boolean, fatal, ), {, super, (]
[;, private, boolean, fatal, ;, public, ParseException, (, String, message, ,, boolean, fatal, ), {, super, (, message, ), ;]
[;, private, boolean, fatal, ;, public, ParseException, (, String, message, ,, boolean, fatal, ), {, super, (, message, ), ;]
[;, public, ParseException, (, String, message, ,, boolean, fatal, ), {, super, (, message, ), ;, this, ., fatal, =]
[{, super, (, message, ), ;, this, ., fatal, =, fatal, ;, }, public, boolean, isFatal, (, ), {, return]
[fatal, ;, }, public, boolean, isFatal, (, ), {, return, fatal, ;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN, =]
[fatal, ;, }, public, boolean, isFatal, (, ), {, return, fatal, ;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN, =]
[boolean, isFatal, (, ), {, return, fatal, ;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN, =, Pattern, ., compile, (]
[;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN, =, Pattern, ., compile, (, "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*", ), ;, private, Matcher, valueMatcher, =]
[;, }, }, private, static, final, Pattern, STRING_LITERAL_PATTERN, =, Pattern, ., compile, (, "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*", ), ;, private, Matcher, valueMatcher, =]
[static, final, Pattern, STRING_LITERAL_PATTERN, =, Pattern, ., compile, (, "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*", ), ;, private, Matcher, valueMatcher, =, STRING_LITERAL_PATTERN, ., matcher, (]
[;, String, filePath, ;, int, lineNum, ;, ErrorManager, errorManager, ;, boolean, parseSucceeded, ;, public, JsFileLineParser, (, ErrorManager, errorManager, ), {]
[;, String, filePath, ;, int, lineNum, ;, ErrorManager, errorManager, ;, boolean, parseSucceeded, ;, public, JsFileLineParser, (, ErrorManager, errorManager, ), {]
[int, lineNum, ;, ErrorManager, errorManager, ;, boolean, parseSucceeded, ;, public, JsFileLineParser, (, ErrorManager, errorManager, ), {, this, ., errorManager, =]
[(, ErrorManager, errorManager, ), {, this, ., errorManager, =, errorManager, ;, }, public, void, setShortcutMode, (, boolean, mode, ), {]
[(, ErrorManager, errorManager, ), {, this, ., errorManager, =, errorManager, ;, }, public, void, setShortcutMode, (, boolean, mode, ), {]
[{, this, ., errorManager, =, errorManager, ;, }, public, void, setShortcutMode, (, boolean, mode, ), {, this, ., shortcutMode, =]
[setShortcutMode, (, boolean, mode, ), {, this, ., shortcutMode, =, mode, ;, }, public, boolean, didParseSucceed, (, ), {, return]
[public, boolean, didParseSucceed, (, ), {, return, parseSucceeded, ;, }, void, doParse, (, String, filePath, ,, Reader, fileContents, ), {]
[public, boolean, didParseSucceed, (, ), {, return, parseSucceeded, ;, }, void, doParse, (, String, filePath, ,, Reader, fileContents, ), {]
[), {, return, parseSucceeded, ;, }, void, doParse, (, String, filePath, ,, Reader, fileContents, ), {, this, ., filePath, =]
[return, parseSucceeded, ;, }, void, doParse, (, String, filePath, ,, Reader, fileContents, ), {, this, ., filePath, =, filePath, ;]
[;, }, void, doParse, (, String, filePath, ,, Reader, fileContents, ), {, this, ., filePath, =, filePath, ;, parseSucceeded, =]
[String, filePath, ,, Reader, fileContents, ), {, this, ., filePath, =, filePath, ;, parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =]
[Reader, fileContents, ), {, this, ., filePath, =, filePath, ;, parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (]
[filePath, =, filePath, ;, parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =]
[filePath, ;, parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =, null, ;]
[parseSucceeded, =, true, ;, BufferedReader, lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =, null, ;, lineNum, =]
[lineBuffer, =, new, BufferedReader, (, fileContents, ), ;, String, line, =, null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =]
[), ;, String, line, =, null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (]
[), ;, String, line, =, null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (]
[String, line, =, null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null, !=]
[line, =, null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null, !=, (]
[null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null, !=, (, line, =]
[null, ;, lineNum, =, 0, ;, boolean, inMultilineComment, =, false, ;, try, {, while, (, null, !=, (, line, =]
[=, false, ;, try, {, while, (, null, !=, (, line, =, lineBuffer, ., readLine, (, ), ), ), {]
[false, ;, try, {, while, (, null, !=, (, line, =, lineBuffer, ., readLine, (, ), ), ), {, ++]
[!=, (, line, =, lineBuffer, ., readLine, (, ), ), ), {, ++, lineNum, ;, try, {, String, revisedLine, =]
[lineBuffer, ., readLine, (, ), ), ), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if, (]
[), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =]
[), {, ++, lineNum, ;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =]
[;, try, {, String, revisedLine, =, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (]
[=, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (]
[=, line, ;, if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (]
[;, if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (, endOfComment, !=]
[if, (, inMultilineComment, ), {, int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -]
[), {, int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {]
[int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =]
[int, endOfComment, =, revisedLine, ., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =]
[., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (]
[., indexOf, (, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (]
[(, "*/", ), ;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +]
[;, if, (, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;]
[(, endOfComment, !=, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =]
[), {, revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {]
[revisedLine, =, revisedLine, ., substring, (, endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =]
[endOfComment, +, 2, ), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (]
[+, 2, ), ;, inMultilineComment, =, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !]
[=, false, ;, }, else, {, revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, ), {, while, (]
[revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, ), {, while, (, true, ), {, int, startOfLineComment, =]
[revisedLine, =, "", ;, }, }, if, (, !, inMultilineComment, ), {, while, (, true, ), {, int, startOfLineComment, =]
[}, }, if, (, !, inMultilineComment, ), {, while, (, true, ), {, int, startOfLineComment, =, revisedLine, ., indexOf, (]
[), {, while, (, true, ), {, int, startOfLineComment, =, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =]
[), {, while, (, true, ), {, int, startOfLineComment, =, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =]
[true, ), {, int, startOfLineComment, =, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (]
[=, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (]
[=, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (]
[=, revisedLine, ., indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (]
[., indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=]
[indexOf, (, "//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -]
["//", ), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&]
[), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (]
[), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (]
[), ;, int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (]
[int, startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==]
[startOfMultilineComment, =, revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -]
[revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||]
[revisedLine, ., indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||]
[indexOf, (, "/*", ), ;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <]
[;, if, (, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {]
[(, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =]
[(, startOfLineComment, !=, -, 1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =]
[1, &&, (, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (]
[(, startOfMultilineComment, ==, -, 1, ||, startOfLineComment, <, startOfMultilineComment, ), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,]
[), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (]
[), ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (]
[{, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment, !=]
[revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment, !=, -]
[0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =]
[0, ,, startOfLineComment, ), ;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =]
[;, break, ;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (]
[;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,]
[;, }, else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,]
[else, if, (, startOfMultilineComment, !=, -, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +]
[-, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (]
[-, 1, ), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (]
[), {, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==]
[{, int, endOfMultilineComment, =, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==, -]
[=, revisedLine, ., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {]
[., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =]
[., indexOf, (, "*/", ,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =]
[,, startOfMultilineComment, +, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (]
[+, 2, ), ;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,]
[;, if, (, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;]
[(, endOfMultilineComment, ==, -, 1, ), {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =]
[revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {]
[revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =]
[revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =]
[revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =]
[0, ,, startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (]
[startOfMultilineComment, ), ;, inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,]
[inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +]
[inMultilineComment, =, true, ;, break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +]
[break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine, ., substring, (]
[break, ;, }, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine, ., substring, (]
[}, else, {, revisedLine, =, revisedLine, ., substring, (, 0, ,, startOfMultilineComment, ), +, revisedLine, ., substring, (, endOfMultilineComment, +]
[revisedLine, ., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else, {, break, ;, }, }, }, if, (]
[., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else, {, break, ;, }, }, }, if, (, !]
[., substring, (, endOfMultilineComment, +, 2, ), ;, }, }, else, {, break, ;, }, }, }, if, (, !]
[}, else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), ), {, if, (]
[}, else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), ), {, if, (]
[else, {, break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), ), {, if, (, !]
[break, ;, }, }, }, if, (, !, revisedLine, ., isEmpty, (, ), ), {, if, (, !, parseLine, (]
[}, }, if, (, !, revisedLine, ., isEmpty, (, ), ), {, if, (, !, parseLine, (, revisedLine, ), &&]
[!, parseLine, (, revisedLine, ), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {]
[!, parseLine, (, revisedLine, ), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {]
[), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (]
[), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (]
[), &&, shortcutMode, ), {, break, ;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (]
[;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (, e, ., isFatal, (, ), ?]
[;, }, }, }, catch, (, ParseException, e, ), {, errorManager, ., report, (, e, ., isFatal, (, ), ?]
[catch, (, ParseException, e, ), {, errorManager, ., report, (, e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :]
[catch, (, ParseException, e, ), {, errorManager, ., report, (, e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :]
[), {, errorManager, ., report, (, e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,]
[), {, errorManager, ., report, (, e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,]
[report, (, e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (]
[e, ., isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,]
[isFatal, (, ), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,]
[), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,]
[), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,]
[), ?, CheckLevel, ., ERROR, :, CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,]
[CheckLevel, ., WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?]
[WARNING, ,, JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :]
[JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,]
[JSError, ., make, (, filePath, ,, lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,]
[lineNum, ,, 0, ,, e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,]
[e, ., isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;]
[isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =]
[isFatal, (, ), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =]
[), ?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&]
[?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !]
[?, PARSE_ERROR, :, PARSE_WARNING, ,, e, ., getMessage, (, ), ,, line, ), ), ;, parseSucceeded, =, parseSucceeded, &&, !]
[parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, ), {]
[parseSucceeded, =, parseSucceeded, &&, !, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, ), {]
[!, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (]
[!, e, ., isFatal, (, ), ;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (]
[(, ), ;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,]
[(, ), ;, }, }, }, catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,]
[}, }, catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (]
[catch, (, IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,]
[IOException, e, ), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,]
[), {, errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,]
[errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,]
[errorManager, ., report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,]
[report, (, CheckLevel, ., ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +]
[ERROR, ,, JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), ), ;]
[JSError, ., make, (, filePath, ,, 0, ,, 0, ,, PARSE_ERROR, ,, "Error reading file: ", +, filePath, ), ), ;, parseSucceeded, =]
[}, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String, parseJsString, (, String, jsStringLiteral, ), throws, ParseException, {]
[}, abstract, boolean, parseLine, (, String, line, ), throws, ParseException, ;, String, parseJsString, (, String, jsStringLiteral, ), throws, ParseException, {]
[(, String, line, ), throws, ParseException, ;, String, parseJsString, (, String, jsStringLiteral, ), throws, ParseException, {, valueMatcher, ., reset, (]
[ParseException, ;, String, parseJsString, (, String, jsStringLiteral, ), throws, ParseException, {, valueMatcher, ., reset, (, jsStringLiteral, ), ;, if, (]
[;, String, parseJsString, (, String, jsStringLiteral, ), throws, ParseException, {, valueMatcher, ., reset, (, jsStringLiteral, ), ;, if, (, !]
[;, String, parseJsString, (, String, jsStringLiteral, ), throws, ParseException, {, valueMatcher, ., reset, (, jsStringLiteral, ), ;, if, (, !]
[ParseException, {, valueMatcher, ., reset, (, jsStringLiteral, ), ;, if, (, !, valueMatcher, ., matches, (, ), ), {, throw]
[., reset, (, jsStringLiteral, ), ;, if, (, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (]
[(, jsStringLiteral, ), ;, if, (, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,]
[(, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return]
[(, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return]
[(, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return]
[(, !, valueMatcher, ., matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return]
[matches, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group, (]
[), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group, (, 1, ), !=]
[throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?]
[throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?]
["Syntax error in JS String literal", ,, true, ), ;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (]
[), ;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :]
[), ;, }, return, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :]
[valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (]
[;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws, ParseException, {, List, <, String, >, results, =]
[;, }, List, <, String, >, parseJsStringArray, (, String, input, ), throws, ParseException, {, List, <, String, >, results, =]
[input, ), throws, ParseException, {, List, <, String, >, results, =, Lists, ., newArrayList, (, ), ;, int, indexStart, =]
[input, ), throws, ParseException, {, List, <, String, >, results, =, Lists, ., newArrayList, (, ), ;, int, indexStart, =]
[{, List, <, String, >, results, =, Lists, ., newArrayList, (, ), ;, int, indexStart, =, input, ., indexOf, (]
[=, Lists, ., newArrayList, (, ), ;, int, indexStart, =, input, ., indexOf, (, '[', ), ;, int, indexEnd, =]
[=, Lists, ., newArrayList, (, ), ;, int, indexStart, =, input, ., indexOf, (, '[', ), ;, int, indexEnd, =]
[(, ), ;, int, indexStart, =, input, ., indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (]
[=, input, ., indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (]
[=, input, ., indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (]
[input, ., indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (]
[input, ., indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (]
[indexOf, (, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==]
[(, '[', ), ;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -]
[;, int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, ), ||]
[int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, ), ||, (]
[int, indexEnd, =, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, ), ||, (]
[=, input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, ), ||, (, indexEnd, ==]
[input, ., lastIndexOf, (, ']', ), ;, if, (, (, indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -]
[), ;, if, (, (, indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -, 1, ), ), {, throw]
[(, (, indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (]
[indexStart, ==, -, 1, ), ||, (, indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,]
[indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =]
[indexEnd, ==, -, 1, ), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =]
[), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (]
[), ), {, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (]
[{, throw, new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +]
[new, ParseException, (, "Syntax error when parsing JS array", ,, true, ), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,]
[true, ), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if, (]
[), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if, (, !]
[), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if, (, !]
[), ;, }, String, innerValues, =, input, ., substring, (, indexStart, +, 1, ,, indexEnd, ), ;, if, (, !]
[+, 1, ,, indexEnd, ), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {]
[+, 1, ,, indexEnd, ), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {]
[), ;, if, (, !, innerValues, ., trim, (, ), ., isEmpty, (, ), ), {, valueMatcher, ., reset, (]
[isEmpty, (, ), ), {, valueMatcher, ., reset, (, innerValues, ), ;, for, (, ;, ;, ), {, if, (]
[(, ), ), {, valueMatcher, ., reset, (, innerValues, ), ;, for, (, ;, ;, ), {, if, (, !]
[(, ), ), {, valueMatcher, ., reset, (, innerValues, ), ;, for, (, ;, ;, ), {, if, (, !]
[innerValues, ), ;, for, (, ;, ;, ), {, if, (, !, valueMatcher, ., lookingAt, (, ), ), {, throw]
[for, (, ;, ;, ), {, if, (, !, valueMatcher, ., lookingAt, (, ), ), {, throw, new, ParseException, (]
[;, ;, ), {, if, (, !, valueMatcher, ., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,]
[if, (, !, valueMatcher, ., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }]
[if, (, !, valueMatcher, ., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }]
[., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (]
[., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (]
[., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (]
[., lookingAt, (, ), ), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (]
[), {, throw, new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (, valueMatcher, ., group, (]
[new, ParseException, (, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (, valueMatcher, ., group, (, 1, ), !=]
[(, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?]
[(, "Syntax error in JS String literal", ,, true, ), ;, }, results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?]
[), ;, }, results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (]
[results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :]
[results, ., add, (, valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :]
[valueMatcher, ., group, (, 1, ), !=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (]
[!=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ), ;, if, (]
[!=, null, ?, valueMatcher, ., group, (, 1, ), :, valueMatcher, ., group, (, 2, ), ), ;, if, (]
[group, (, 2, ), ), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (]
[group, (, 2, ), ), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (]
[group, (, 2, ), ), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (]
[), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (, innerValues, ., charAt, (]
[), ;, if, (, valueMatcher, ., hitEnd, (, ), ), {, break, ;, }, if, (, innerValues, ., charAt, (]
[(, ), ), {, break, ;, }, if, (, innerValues, ., charAt, (, valueMatcher, ., end, (, ), ), !=]
[break, ;, }, if, (, innerValues, ., charAt, (, valueMatcher, ., end, (, ), ), !=, ',', ), {, throw]
[if, (, innerValues, ., charAt, (, valueMatcher, ., end, (, ), ), !=, ',', ), {, throw, new, ParseException, (]
[innerValues, ., charAt, (, valueMatcher, ., end, (, ), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,]
[valueMatcher, ., end, (, ), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }]
[valueMatcher, ., end, (, ), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }]
[), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (]
[), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (]
[), ), !=, ',', ), {, throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (]
[throw, new, ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher, ., end, (, ), +]
[ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher, ., end, (, ), +, 1, ,]
[ParseException, (, "Missing comma in string array", ,, true, ), ;, }, valueMatcher, ., region, (, valueMatcher, ., end, (, ), +, 1, ,]
[region, (, valueMatcher, ., end, (, ), +, 1, ,, valueMatcher, ., regionEnd, (, ), ), ;, }, }, return]
