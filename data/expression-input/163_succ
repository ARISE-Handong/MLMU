[;, public, static, final, Fraction, ZERO, =, new, Fraction, (, 0, ,, 1, ), ;, public, static, final, Fraction, ONE]
[;, public, static, final, Fraction, ONE, =, new, Fraction, (, 1, ,, 1, ), ;, public, static, final, Fraction, ONE_HALF]
[,, 1, ), ;, public, static, final, Fraction, ONE, =, new, Fraction, (, 1, ,, 1, ), ;, public, static]
[), ;, public, static, final, Fraction, ONE, =, new, Fraction, (, 1, ,, 1, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, ONE_HALF, =, new, Fraction, (, 1, ,, 2, ), ;, public, static, final, Fraction, ONE_THIRD]
[,, 1, ), ;, public, static, final, Fraction, ONE_HALF, =, new, Fraction, (, 1, ,, 2, ), ;, public, static]
[), ;, public, static, final, Fraction, ONE_HALF, =, new, Fraction, (, 1, ,, 2, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, ONE_THIRD, =, new, Fraction, (, 1, ,, 3, ), ;, public, static, final, Fraction, TWO_THIRDS]
[,, 2, ), ;, public, static, final, Fraction, ONE_THIRD, =, new, Fraction, (, 1, ,, 3, ), ;, public, static]
[), ;, public, static, final, Fraction, ONE_THIRD, =, new, Fraction, (, 1, ,, 3, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, TWO_THIRDS, =, new, Fraction, (, 2, ,, 3, ), ;, public, static, final, Fraction, ONE_QUARTER]
[,, 3, ), ;, public, static, final, Fraction, TWO_THIRDS, =, new, Fraction, (, 2, ,, 3, ), ;, public, static]
[), ;, public, static, final, Fraction, TWO_THIRDS, =, new, Fraction, (, 2, ,, 3, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, ONE_QUARTER, =, new, Fraction, (, 1, ,, 4, ), ;, public, static, final, Fraction, TWO_QUARTERS]
[,, 3, ), ;, public, static, final, Fraction, ONE_QUARTER, =, new, Fraction, (, 1, ,, 4, ), ;, public, static]
[), ;, public, static, final, Fraction, ONE_QUARTER, =, new, Fraction, (, 1, ,, 4, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, TWO_QUARTERS, =, new, Fraction, (, 2, ,, 4, ), ;, public, static, final, Fraction, THREE_QUARTERS]
[,, 4, ), ;, public, static, final, Fraction, TWO_QUARTERS, =, new, Fraction, (, 2, ,, 4, ), ;, public, static]
[), ;, public, static, final, Fraction, TWO_QUARTERS, =, new, Fraction, (, 2, ,, 4, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, THREE_QUARTERS, =, new, Fraction, (, 3, ,, 4, ), ;, public, static, final, Fraction, ONE_FIFTH]
[,, 4, ), ;, public, static, final, Fraction, THREE_QUARTERS, =, new, Fraction, (, 3, ,, 4, ), ;, public, static]
[), ;, public, static, final, Fraction, THREE_QUARTERS, =, new, Fraction, (, 3, ,, 4, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, ONE_FIFTH, =, new, Fraction, (, 1, ,, 5, ), ;, public, static, final, Fraction, TWO_FIFTHS]
[,, 4, ), ;, public, static, final, Fraction, ONE_FIFTH, =, new, Fraction, (, 1, ,, 5, ), ;, public, static]
[), ;, public, static, final, Fraction, ONE_FIFTH, =, new, Fraction, (, 1, ,, 5, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, TWO_FIFTHS, =, new, Fraction, (, 2, ,, 5, ), ;, public, static, final, Fraction, THREE_FIFTHS]
[,, 5, ), ;, public, static, final, Fraction, TWO_FIFTHS, =, new, Fraction, (, 2, ,, 5, ), ;, public, static]
[), ;, public, static, final, Fraction, TWO_FIFTHS, =, new, Fraction, (, 2, ,, 5, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, THREE_FIFTHS, =, new, Fraction, (, 3, ,, 5, ), ;, public, static, final, Fraction, FOUR_FIFTHS]
[,, 5, ), ;, public, static, final, Fraction, THREE_FIFTHS, =, new, Fraction, (, 3, ,, 5, ), ;, public, static]
[), ;, public, static, final, Fraction, THREE_FIFTHS, =, new, Fraction, (, 3, ,, 5, ), ;, public, static, final, Fraction]
[;, public, static, final, Fraction, FOUR_FIFTHS, =, new, Fraction, (, 4, ,, 5, ), ;, private, final, int, numerator, ;]
[,, 5, ), ;, public, static, final, Fraction, FOUR_FIFTHS, =, new, Fraction, (, 4, ,, 5, ), ;, private, final]
[), ;, public, static, final, Fraction, FOUR_FIFTHS, =, new, Fraction, (, 4, ,, 5, ), ;, private, final, int, numerator]
[;, private, final, int, numerator, ;, private, final, int, denominator, ;, private, transient, int, hashCode, =, 0, ;, private, transient]
[,, 5, ), ;, private, final, int, numerator, ;, private, final, int, denominator, ;, private, transient, int, hashCode, =, 0]
[), ;, private, final, int, numerator, ;, private, final, int, denominator, ;, private, transient, int, hashCode, =, 0, ;, private]
[;, private, transient, String, toString, =, null, ;, private, transient, String, toProperString, =, null, ;, private, Fraction, (, final, int]
[;, private, transient, String, toProperString, =, null, ;, private, Fraction, (, final, int, numerator, ,, final, int, denominator, ), {]
[;, private, Fraction, (, final, int, numerator, ,, final, int, denominator, ), {, super, (, ), ;, this, ., numerator]
[=, numerator, ;, this, ., denominator, =, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator]
[., numerator, =, numerator, ;, this, ., denominator, =, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,]
[;, this, ., denominator, =, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {]
[=, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==]
[., denominator, =, denominator, ;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {, if, (]
[;, }, public, static, Fraction, getFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==, 0, )]
[), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator]
[==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if]
[), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator]
[;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer]
[), ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==]
[), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException]
[<, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw]
[), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;]
[||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator]
[==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }]
[||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator]
[., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;]
[==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -]
[;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, return, new, Fraction, (, numerator, ,, denominator]
[), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, return, new, Fraction, (, numerator, ,]
[=, -, numerator, ;, denominator, =, -, denominator, ;, }, return, new, Fraction, (, numerator, ,, denominator, ), ;, }]
[;, denominator, =, -, denominator, ;, }, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction]
[;, denominator, =, -, denominator, ;, }, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction]
[=, -, denominator, ;, }, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (]
[;, }, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (, final, int, whole]
[;, }, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (, final, int, whole]
[;, }, public, static, Fraction, getFraction, (, final, int, whole, ,, final, int, numerator, ,, final, int, denominator, ), {]
[,, denominator, ), ;, }, public, static, Fraction, getFraction, (, final, int, whole, ,, final, int, numerator, ,, final, int]
[), ;, }, public, static, Fraction, getFraction, (, final, int, whole, ,, final, int, numerator, ,, final, int, denominator, )]
[), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException]
[==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, throw]
[), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException]
[;, }, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (, numerator]
[), ;, }, if, (, denominator, <, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (]
[), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (, numerator, <, 0, ), {, throw, new, ArithmeticException]
[<, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (, numerator, <, 0, ), {, throw]
[), {, throw, new, ArithmeticException, (, "The denominator must not be negative", ), ;, }, if, (, numerator, <, 0, ), {, throw, new, ArithmeticException]
[;, }, if, (, numerator, <, 0, ), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;]
[), ;, }, if, (, numerator, <, 0, ), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue]
[), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {]
[<, 0, ), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0]
[), {, throw, new, ArithmeticException, (, "The numerator must not be negative", ), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {]
[;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =, whole, *, (, long, ), denominator]
[), ;, }, long, numeratorValue, ;, if, (, whole, <, 0, ), {, numeratorValue, =, whole, *, (, long, )]
[), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =, whole, *]
[<, 0, ), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =]
[), {, numeratorValue, =, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =, whole, *]
[=, whole, *, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, )]
[;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <]
[-, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (]
[*, (, long, ), denominator, -, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +]
[-, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (]
[-, numerator, ;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (]
[;, }, else, {, numeratorValue, =, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <]
[=, whole, *, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue]
[;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException]
[+, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw]
[*, (, long, ), denominator, +, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer]
[+, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw]
[+, numerator, ;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw]
[;, }, if, (, numeratorValue, <, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException]
[), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (, (, int, ), numeratorValue, ,, denominator]
[||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (]
[<, Integer, ., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }]
[||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (]
[., MIN_VALUE, ||, numeratorValue, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new]
[), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (, (, int, ), numeratorValue, ,, denominator]
[>, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (, (, int]
[), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (, (, int, ), numeratorValue, ,, denominator]
[., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "Numerator too large to represent as an Integer.", ), ;, }, return, new, Fraction, (, (, int, ), numeratorValue]
[;, }, return, new, Fraction, (, (, int, ), numeratorValue, ,, denominator, ), ;, }, public, static, Fraction, getReducedFraction, (]
[), ;, }, return, new, Fraction, (, (, int, ), numeratorValue, ,, denominator, ), ;, }, public, static, Fraction, getReducedFraction]
[;, }, public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==, 0, )]
[,, denominator, ), ;, }, public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator]
[,, denominator, ), ;, }, public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator]
[), ;, }, public, static, Fraction, getReducedFraction, (, int, numerator, ,, int, denominator, ), {, if, (, denominator, ==, 0]
[), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;]
[==, 0, ), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return]
[), {, throw, new, ArithmeticException, (, "The denominator must not be zero", ), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;]
[;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE]
[), ;, }, if, (, numerator, ==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, .]
[), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==]
[==, 0, ), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1]
[), {, return, ZERO, ;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==]
[;, }, if, (, denominator, ==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0, ), {, numerator]
[), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (]
[&&, (, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if]
[==, Integer, ., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=]
[&&, (, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if]
[., MIN_VALUE, &&, (, numerator, &, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;]
[), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (]
[==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {]
[), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, )]
[&, 1, ), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <]
[), ==, 0, ), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, )]
[), {, numerator, /=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (]
[/=, 2, ;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer]
[;, denominator, /=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE]
[/=, 2, ;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator]
[;, }, if, (, denominator, <, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer]
[), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException]
[<, 0, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw]
[), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;]
[||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator]
[==, Integer, ., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }]
[||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator]
[., MIN_VALUE, ||, denominator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;]
[==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate", ), ;, }, numerator, =, -, numerator, ;, denominator, =, -]
[;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator]
[), ;, }, numerator, =, -, numerator, ;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (]
[=, -, numerator, ;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, )]
[;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=]
[;, denominator, =, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=]
[=, -, denominator, ;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;]
[;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;, denominator, /=, gcd]
[;, }, final, int, gcd, =, greatestCommonDivisor, (, numerator, ,, denominator, ), ;, numerator, /=, gcd, ;, denominator, /=, gcd]
[;, numerator, /=, gcd, ;, denominator, /=, gcd, ;, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public]
[,, denominator, ), ;, numerator, /=, gcd, ;, denominator, /=, gcd, ;, return, new, Fraction, (, numerator, ,, denominator, )]
[), ;, numerator, /=, gcd, ;, denominator, /=, gcd, ;, return, new, Fraction, (, numerator, ,, denominator, ), ;, }]
[/=, gcd, ;, denominator, /=, gcd, ;, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction]
[;, denominator, /=, gcd, ;, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (]
[/=, gcd, ;, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (, double, value]
[;, return, new, Fraction, (, numerator, ,, denominator, ), ;, }, public, static, Fraction, getFraction, (, double, value, ), {]
[;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <, 0, ?, -]
[,, denominator, ), ;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <]
[), ;, }, public, static, Fraction, getFraction, (, double, value, ), {, final, int, sign, =, value, <, 0, ?]
[;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, .]
[?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer]
[<, 0, ?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value]
[?, -, 1, :, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer]
[:, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||]
[:, 1, ;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||]
[;, value, =, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, .]
[=, Math, ., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (]
[;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (, value, ), ), {, throw, new, ArithmeticException]
[., abs, (, value, ), ;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (, value, )]
[), ;, if, (, value, >, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (, value, ), ), {, throw, new]
[), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (, int, ), value, ;, value]
[||, Double, ., isNaN, (, value, ), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber]
[>, Integer, ., MAX_VALUE, ||, Double, ., isNaN, (, value, ), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;]
[||, Double, ., isNaN, (, value, ), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber]
[., MAX_VALUE, ||, Double, ., isNaN, (, value, ), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final]
[), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (, int, ), value, ;, value]
[., isNaN, (, value, ), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (]
[), ), {, throw, new, ArithmeticException, (, "The value must not be greater than Integer.MAX_VALUE or NaN", ), ;, }, final, int, wholeNumber, =, (, int, ), value, ;]
[;, }, final, int, wholeNumber, =, (, int, ), value, ;, value, -=, wholeNumber, ;, int, numer0, =, 0, ;]
[), ;, }, final, int, wholeNumber, =, (, int, ), value, ;, value, -=, wholeNumber, ;, int, numer0, =, 0]
[;, value, -=, wholeNumber, ;, int, numer0, =, 0, ;, int, denom0, =, 1, ;, int, numer1, =, 1, ;]
[;, value, -=, wholeNumber, ;, int, numer0, =, 0, ;, int, denom0, =, 1, ;, int, numer1, =, 1, ;]
[-=, wholeNumber, ;, int, numer0, =, 0, ;, int, denom0, =, 1, ;, int, numer1, =, 1, ;, int, denom1]
[;, int, numer0, =, 0, ;, int, denom0, =, 1, ;, int, numer1, =, 1, ;, int, denom1, =, 0]
[;, int, denom0, =, 1, ;, int, numer1, =, 1, ;, int, denom1, =, 0, ;, int, numer2, =, 0]
[;, int, numer1, =, 1, ;, int, denom1, =, 0, ;, int, numer2, =, 0, ;, int, denom2, =, 0]
[;, int, denom1, =, 0, ;, int, numer2, =, 0, ;, int, denom2, =, 0, ;, int, a1, =, (]
[;, int, numer2, =, 0, ;, int, denom2, =, 0, ;, int, a1, =, (, int, ), value, ;, int]
[;, int, denom2, =, 0, ;, int, a1, =, (, int, ), value, ;, int, a2, =, 0, ;, double]
[;, int, a1, =, (, int, ), value, ;, int, a2, =, 0, ;, double, x1, =, 1, ;, double]
[;, int, a2, =, 0, ;, double, x1, =, 1, ;, double, x2, =, 0, ;, double, y1, =, value]
[;, int, a2, =, 0, ;, double, x1, =, 1, ;, double, x2, =, 0, ;, double, y1, =, value]
[;, double, x1, =, 1, ;, double, x2, =, 0, ;, double, y1, =, value, -, a1, ;, double, y2]
[;, double, x2, =, 0, ;, double, y1, =, value, -, a1, ;, double, y2, =, 0, ;, double, delta1]
[;, double, y1, =, value, -, a1, ;, double, y2, =, 0, ;, double, delta1, ,, delta2, =, Double, .]
[;, double, y2, =, 0, ;, double, delta1, ,, delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;, int, i]
[-, a1, ;, double, y2, =, 0, ;, double, delta1, ,, delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;]
[;, double, y2, =, 0, ;, double, delta1, ,, delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;, int, i]
[;, double, delta1, ,, delta2, =, Double, ., MAX_VALUE, ;, double, fraction, ;, int, i, =, 1, ;, do, {]
[;, double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;, a2, =, (, int, )]
[., MAX_VALUE, ;, double, fraction, ;, int, i, =, 1, ;, do, {, delta1, =, delta2, ;, a2, =, (]
[;, do, {, delta1, =, delta2, ;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =]
[=, delta2, ;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =]
[;, a2, =, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -]
[=, (, int, ), (, x1, /, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *]
[;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0]
[;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0]
[), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +]
[/, y1, ), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *]
[), ;, x2, =, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +]
[=, y1, ;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2]
[;, y2, =, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1]
[=, x1, -, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1]
[;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (]
[-, a2, *, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0]
[;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (]
[*, y1, ;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction]
[;, numer2, =, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (]
[=, a1, *, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, )]
[;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2]
[+, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double]
[*, numer1, +, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /]
[+, numer0, ;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double]
[;, denom2, =, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2]
[=, a1, *, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2]
[;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value]
[+, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs]
[*, denom1, +, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math]
[+, denom0, ;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs]
[;, fraction, =, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value]
[=, (, double, ), numer2, /, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value, -, fraction]
[;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;]
[/, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2]
[/, (, double, ), denom2, ;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2]
[;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;]
[;, delta2, =, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;]
[=, Math, ., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =]
[;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1]
[., abs, (, value, -, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;]
[), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =]
[-, fraction, ), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;]
[), ;, a1, =, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =]
[=, a2, ;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1]
[;, x1, =, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2]
[=, x2, ;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1]
[;, y1, =, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2]
[=, y2, ;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i]
[;, numer0, =, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;]
[=, numer1, ;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while]
[;, denom0, =, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1]
[=, denom1, ;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2]
[;, numer1, =, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2]
[=, numer2, ;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000]
[;, denom1, =, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2]
[=, denom2, ;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0]
[;, i, ++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i]
[;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25, )]
[++, ;, }, while, (, delta1, >, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25]
[), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (]
[&&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;]
[&&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException]
[&&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, )]
[>, delta2, &&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==]
[&&, denom2, <=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, )]
[&&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException]
[<=, 10000, &&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw]
[&&, denom2, >, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException]
[&&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;]
[>, 0, &&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction"]
[&&, i, <, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;]
[), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (]
[<, 25, ), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return]
[), ;, if, (, i, ==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (]
[), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *, denom0, )]
[==, 25, ), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *]
[), {, throw, new, ArithmeticException, (, "Unable to convert double to fraction", ), ;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *, denom0, )]
[;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *, denom0, ), *, sign, ,, denom0, ), ;, }, public]
[), ;, }, return, getReducedFraction, (, (, numer0, +, wholeNumber, *, denom0, ), *, sign, ,, denom0, ), ;, }]
[;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==, null, ), {, throw, new]
[,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==, null, )]
[*, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==]
[), *, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str]
[+, wholeNumber, *, denom0, ), *, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, )]
[), *, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str]
[*, denom0, ), *, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if]
[), *, sign, ,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str]
[,, denom0, ), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==, null, )]
[), ;, }, public, static, Fraction, getFraction, (, String, str, ), {, if, (, str, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =, str, ., indexOf, (, '.', ), ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =, str, ., indexOf, (, '.']
[), {, throw, new, IllegalArgumentException, (, "The string must not be null", ), ;, }, int, pos, =, str, ., indexOf, (, '.', ), ;]
[;, }, int, pos, =, str, ., indexOf, (, '.', ), ;, if, (, pos, >=, 0, ), {, return]
[), ;, }, int, pos, =, str, ., indexOf, (, '.', ), ;, if, (, pos, >=, 0, ), {]
[;, if, (, pos, >=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }]
[., indexOf, (, '.', ), ;, if, (, pos, >=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (]
[), ;, if, (, pos, >=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;]
[), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }, pos, =, str, ., indexOf, (]
[>=, 0, ), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }, pos, =, str, .]
[), {, return, getFraction, (, Double, ., parseDouble, (, str, ), ), ;, }, pos, =, str, ., indexOf, (]
[;, }, pos, =, str, ., indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final, int]
[), ;, }, pos, =, str, ., indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final]
[., parseDouble, (, str, ), ), ;, }, pos, =, str, ., indexOf, (, ' ', ), ;, if, (, pos]
[), ), ;, }, pos, =, str, ., indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {]
[=, str, ., indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final, int, whole, =, Integer]
[;, if, (, pos, >, 0, ), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (]
[., indexOf, (, ' ', ), ;, if, (, pos, >, 0, ), {, final, int, whole, =, Integer, ., parseInt]
[), ;, if, (, pos, >, 0, ), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring]
[), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;]
[>, 0, ), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, )]
[), {, final, int, whole, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;]
[;, str, =, str, ., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (, '/', )]
[., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, str, =, str, ., substring, (, pos]
[), ;, str, =, str, ., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (, '/']
[., substring, (, 0, ,, pos, ), ), ;, str, =, str, ., substring, (, pos, +, 1, ), ;]
[,, pos, ), ), ;, str, =, str, ., substring, (, pos, +, 1, ), ;, pos, =, str, .]
[), ), ;, str, =, str, ., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (]
[=, str, ., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (, '/', ), ;, if]
[;, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, throw, new, NumberFormatException]
[., substring, (, pos, +, 1, ), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos]
[), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, throw, new]
[+, 1, ), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {]
[), ;, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, throw, new]
[=, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z"]
[;, if, (, pos, <, 0, ), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int]
[., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;]
[), ;, if, (, pos, <, 0, ), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final]
[), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (]
[<, 0, ), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =, Integer, .]
[), {, throw, new, NumberFormatException, (, "The fraction could not be parsed as the format X Y/Z", ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (]
[;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, )]
[), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos]
[;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return]
[., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt]
[), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;]
[., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring]
[,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1]
[), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), )]
[;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf, (, '/']
[., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return, getFraction, (, whole, ,, numer, ,]
[), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf, (]
[., substring, (, pos, +, 1, ), ), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }]
[), ), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf]
[+, 1, ), ), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str]
[), ), ;, return, getFraction, (, whole, ,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf]
[;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, return]
[,, numer, ,, denom, ), ;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos]
[,, denom, ), ;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0]
[), ;, }, }, pos, =, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {]
[=, str, ., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, return, getFraction, (, Integer, .]
[;, if, (, pos, <, 0, ), {, return, getFraction, (, Integer, ., parseInt, (, str, ), ,, 1, )]
[., indexOf, (, '/', ), ;, if, (, pos, <, 0, ), {, return, getFraction, (, Integer, ., parseInt, (]
[), ;, if, (, pos, <, 0, ), {, return, getFraction, (, Integer, ., parseInt, (, str, ), ,, 1]
[), {, return, getFraction, (, Integer, ., parseInt, (, str, ), ,, 1, ), ;, }, else, {, final, int]
[<, 0, ), {, return, getFraction, (, Integer, ., parseInt, (, str, ), ,, 1, ), ;, }, else, {]
[), {, return, getFraction, (, Integer, ., parseInt, (, str, ), ,, 1, ), ;, }, else, {, final, int]
[;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos, )]
[,, 1, ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (, 0]
[., parseInt, (, str, ), ,, 1, ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (]
[), ,, 1, ), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (]
[), ;, }, else, {, final, int, numer, =, Integer, ., parseInt, (, str, ., substring, (, 0, ,, pos]
[;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return]
[., parseInt, (, str, ., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt]
[), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;]
[., substring, (, 0, ,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring]
[,, pos, ), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1]
[), ), ;, final, int, denom, =, Integer, ., parseInt, (, str, ., substring, (, pos, +, 1, ), )]
[;, return, getFraction, (, numer, ,, denom, ), ;, }, }, public, int, getNumerator, (, ), {, return, numerator, ;]
[., parseInt, (, str, ., substring, (, pos, +, 1, ), ), ;, return, getFraction, (, numer, ,, denom, )]
[), ;, return, getFraction, (, numer, ,, denom, ), ;, }, }, public, int, getNumerator, (, ), {, return, numerator]
[., substring, (, pos, +, 1, ), ), ;, return, getFraction, (, numer, ,, denom, ), ;, }, }, public]
[), ), ;, return, getFraction, (, numer, ,, denom, ), ;, }, }, public, int, getNumerator, (, ), {, return]
[+, 1, ), ), ;, return, getFraction, (, numer, ,, denom, ), ;, }, }, public, int, getNumerator, (, )]
[), ), ;, return, getFraction, (, numer, ,, denom, ), ;, }, }, public, int, getNumerator, (, ), {, return]
[;, }, }, public, int, getNumerator, (, ), {, return, numerator, ;, }, public, int, getDenominator, (, ), {, return]
[,, denom, ), ;, }, }, public, int, getNumerator, (, ), {, return, numerator, ;, }, public, int, getDenominator, (]
[), ;, }, }, public, int, getNumerator, (, ), {, return, numerator, ;, }, public, int, getDenominator, (, ), {]
[;, }, public, int, getDenominator, (, ), {, return, denominator, ;, }, public, int, getProperNumerator, (, ), {, return, Math]
[;, }, public, int, getProperNumerator, (, ), {, return, Math, ., abs, (, numerator, %, denominator, ), ;, }, public]
[;, }, public, int, getProperWhole, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, int, intValue, (]
[., abs, (, numerator, %, denominator, ), ;, }, public, int, getProperWhole, (, ), {, return, numerator, /, denominator, ;]
[), ;, }, public, int, getProperWhole, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, int, intValue]
[%, denominator, ), ;, }, public, int, getProperWhole, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public]
[), ;, }, public, int, getProperWhole, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, int, intValue]
[;, }, @, Override, public, int, intValue, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, long]
[/, denominator, ;, }, @, Override, public, int, intValue, (, ), {, return, numerator, /, denominator, ;, }, @, Override]
[;, }, @, Override, public, int, intValue, (, ), {, return, numerator, /, denominator, ;, }, @, Override, public, long]
[;, }, @, Override, public, long, longValue, (, ), {, return, (, long, ), numerator, /, denominator, ;, }, @]
[/, denominator, ;, }, @, Override, public, long, longValue, (, ), {, return, (, long, ), numerator, /, denominator, ;]
[;, }, @, Override, public, long, longValue, (, ), {, return, (, long, ), numerator, /, denominator, ;, }, @]
[;, }, @, Override, public, float, floatValue, (, ), {, return, (, float, ), numerator, /, (, float, ), denominator]
[/, denominator, ;, }, @, Override, public, float, floatValue, (, ), {, return, (, float, ), numerator, /, (, float]
[/, denominator, ;, }, @, Override, public, float, floatValue, (, ), {, return, (, float, ), numerator, /, (, float]
[;, }, @, Override, public, float, floatValue, (, ), {, return, (, float, ), numerator, /, (, float, ), denominator]
[;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, ), numerator, /, (, double, ), denominator]
[/, (, float, ), denominator, ;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, ), numerator]
[/, (, float, ), denominator, ;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, ), numerator]
[;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, ), numerator, /, (, double, ), denominator]
[;, }, @, Override, public, double, doubleValue, (, ), {, return, (, double, ), numerator, /, (, double, ), denominator]
[;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return, equals, (, ZERO, )]
[/, (, double, ), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {]
[/, (, double, ), denominator, ;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {]
[;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return, equals, (, ZERO, )]
[;, }, public, Fraction, reduce, (, ), {, if, (, numerator, ==, 0, ), {, return, equals, (, ZERO, )]
[), {, return, equals, (, ZERO, ), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (, Math]
[==, 0, ), {, return, equals, (, ZERO, ), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor]
[), {, return, equals, (, ZERO, ), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (, Math]
[;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, ), ;, if, (]
[?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator]
[), ?, this, :, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,]
[:, ZERO, ;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, ), ;]
[;, }, final, int, gcd, =, greatestCommonDivisor, (, Math, ., abs, (, numerator, ), ,, denominator, ), ;, if, (]
[;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /, gcd]
[,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (]
[., abs, (, numerator, ), ,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }]
[), ,, denominator, ), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction]
[), ;, if, (, gcd, ==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /]
[), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /, gcd, ,, denominator, /, gcd, ), ;]
[==, 1, ), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /, gcd, ,, denominator, /, gcd]
[), {, return, this, ;, }, return, Fraction, ., getFraction, (, numerator, /, gcd, ,, denominator, /, gcd, ), ;]
[;, }, return, Fraction, ., getFraction, (, numerator, /, gcd, ,, denominator, /, gcd, ), ;, }, public, Fraction, invert]
[;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "Unable to invert zero."]
[., getFraction, (, numerator, /, gcd, ,, denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if]
[,, denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {]
[/, gcd, ,, denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0]
[,, denominator, /, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {]
[), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (]
[/, gcd, ), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {, throw, new]
[), ;, }, public, Fraction, invert, (, ), {, if, (, numerator, ==, 0, ), {, throw, new, ArithmeticException, (]
[), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw]
[==, 0, ), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (, numerator, ==, Integer, ., MIN_VALUE, )]
[), {, throw, new, ArithmeticException, (, "Unable to invert zero.", ), ;, }, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw]
[;, }, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if]
[), ;, }, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return, new, Fraction]
[==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, )]
[), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return, new, Fraction]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: can't negate numerator", ), ;, }, if, (, numerator, <, 0, ), {, return]
[;, }, if, (, numerator, <, 0, ), {, return, new, Fraction, (, -, denominator, ,, -, numerator, ), ;]
[), ;, }, if, (, numerator, <, 0, ), {, return, new, Fraction, (, -, denominator, ,, -, numerator, )]
[), {, return, new, Fraction, (, -, denominator, ,, -, numerator, ), ;, }, else, {, return, new, Fraction, (]
[<, 0, ), {, return, new, Fraction, (, -, denominator, ,, -, numerator, ), ;, }, else, {, return, new]
[), {, return, new, Fraction, (, -, denominator, ,, -, numerator, ), ;, }, else, {, return, new, Fraction, (]
[;, }, else, {, return, new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public, Fraction, negate, (, )]
[,, -, numerator, ), ;, }, else, {, return, new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public]
[,, -, numerator, ), ;, }, else, {, return, new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public]
[), ;, }, else, {, return, new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public, Fraction, negate, (]
[), ;, }, else, {, return, new, Fraction, (, denominator, ,, numerator, ), ;, }, }, public, Fraction, negate, (]
[;, }, }, public, Fraction, negate, (, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw, new]
[,, numerator, ), ;, }, }, public, Fraction, negate, (, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, )]
[), ;, }, }, public, Fraction, negate, (, ), {, if, (, numerator, ==, Integer, ., MIN_VALUE, ), {, throw]
[), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return, new, Fraction, (, -, numerator, ,, denominator, ), ;]
[==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return, new, Fraction, (, -, numerator]
[), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return, new, Fraction, (, -, numerator, ,, denominator, ), ;]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: too large to negate", ), ;, }, return, new, Fraction, (, -, numerator, ,, denominator]
[;, }, return, new, Fraction, (, -, numerator, ,, denominator, ), ;, }, public, Fraction, abs, (, ), {, if]
[), ;, }, return, new, Fraction, (, -, numerator, ,, denominator, ), ;, }, public, Fraction, abs, (, ), {]
[;, }, public, Fraction, abs, (, ), {, if, (, numerator, >=, 0, ), {, return, this, ;, }, return]
[,, denominator, ), ;, }, public, Fraction, abs, (, ), {, if, (, numerator, >=, 0, ), {, return, this]
[,, denominator, ), ;, }, public, Fraction, abs, (, ), {, if, (, numerator, >=, 0, ), {, return, this]
[), ;, }, public, Fraction, abs, (, ), {, if, (, numerator, >=, 0, ), {, return, this, ;, }]
[), {, return, this, ;, }, return, negate, (, ), ;, }, public, Fraction, pow, (, final, int, power, )]
[>=, 0, ), {, return, this, ;, }, return, negate, (, ), ;, }, public, Fraction, pow, (, final, int]
[), {, return, this, ;, }, return, negate, (, ), ;, }, public, Fraction, pow, (, final, int, power, )]
[;, }, return, negate, (, ), ;, }, public, Fraction, pow, (, final, int, power, ), {, if, (, power]
[;, }, public, Fraction, pow, (, final, int, power, ), {, if, (, power, ==, 1, ), {, return, this]
[), {, return, this, ;, }, else, if, (, power, ==, 0, ), {, return, ONE, ;, }, else, if]
[==, 1, ), {, return, this, ;, }, else, if, (, power, ==, 0, ), {, return, ONE, ;, }]
[), {, return, this, ;, }, else, if, (, power, ==, 0, ), {, return, ONE, ;, }, else, if]
[;, }, else, if, (, power, ==, 0, ), {, return, ONE, ;, }, else, if, (, power, <, 0]
[), {, return, ONE, ;, }, else, if, (, power, <, 0, ), {, if, (, power, ==, Integer, .]
[==, 0, ), {, return, ONE, ;, }, else, if, (, power, <, 0, ), {, if, (, power, ==]
[), {, return, ONE, ;, }, else, if, (, power, <, 0, ), {, if, (, power, ==, Integer, .]
[;, }, else, if, (, power, <, 0, ), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return]
[), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (]
[<, 0, ), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return, this, ., invert, (, ), .]
[), {, if, (, power, ==, Integer, ., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (]
[), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (, power, /]
[==, Integer, ., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (]
[), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (, power, /]
[., MIN_VALUE, ), {, return, this, ., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (]
[;, }, return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }, else, {, final, Fraction]
[., pow, (, -, (, power, /, 2, ), ), ;, }, return, this, ., invert, (, ), ., pow]
[., pow, (, 2, ), ., pow, (, -, (, power, /, 2, ), ), ;, }, return, this, .]
[., invert, (, ), ., pow, (, 2, ), ., pow, (, -, (, power, /, 2, ), ), ;]
[), ., pow, (, -, (, power, /, 2, ), ), ;, }, return, this, ., invert, (, ), .]
[), ;, }, return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }, else, {, final]
[), ;, }, return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }, else, {, final]
[), ), ;, }, return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }, else, {]
[/, 2, ), ), ;, }, return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }]
[), ), ;, }, return, this, ., invert, (, ), ., pow, (, -, power, ), ;, }, else, {]
[;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (, power, %, 2]
[., pow, (, -, power, ), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, )]
[., invert, (, ), ., pow, (, -, power, ), ;, }, else, {, final, Fraction, f, =, this, .]
[), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (, power, %]
[), ;, }, else, {, final, Fraction, f, =, this, ., multiplyBy, (, this, ), ;, if, (, power, %]
[;, if, (, power, %, 2, ==, 0, ), {, return, f, ., pow, (, power, /, 2, ), ;]
[., multiplyBy, (, this, ), ;, if, (, power, %, 2, ==, 0, ), {, return, f, ., pow, (]
[), ;, if, (, power, %, 2, ==, 0, ), {, return, f, ., pow, (, power, /, 2, )]
[), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return, f, ., pow, (]
[==, 0, ), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return, f, .]
[%, 2, ==, 0, ), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return]
[==, 0, ), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return, f, .]
[), {, return, f, ., pow, (, power, /, 2, ), ;, }, else, {, return, f, ., pow, (]
[;, }, else, {, return, f, ., pow, (, power, /, 2, ), ., multiplyBy, (, this, ), ;, }]
[., pow, (, power, /, 2, ), ;, }, else, {, return, f, ., pow, (, power, /, 2, )]
[), ;, }, else, {, return, f, ., pow, (, power, /, 2, ), ., multiplyBy, (, this, ), ;]
[/, 2, ), ;, }, else, {, return, f, ., pow, (, power, /, 2, ), ., multiplyBy, (, this]
[), ;, }, else, {, return, f, ., pow, (, power, /, 2, ), ., multiplyBy, (, this, ), ;]
[;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (, u, ==]
[., multiplyBy, (, this, ), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, )]
[., pow, (, power, /, 2, ), ., multiplyBy, (, this, ), ;, }, }, }, private, static, int, greatestCommonDivisor]
[), ., multiplyBy, (, this, ), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v]
[/, 2, ), ., multiplyBy, (, this, ), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,]
[), ., multiplyBy, (, this, ), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v]
[), ;, }, }, }, private, static, int, greatestCommonDivisor, (, int, u, ,, int, v, ), {, if, (, u]
[), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException]
[||, v, ==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, )]
[==, 0, ||, v, ==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, .]
[||, v, ==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, )]
[), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException]
[==, 0, ), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw]
[), {, if, (, u, ==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException]
[), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u, ), +, Math, .]
[||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs]
[==, Integer, ., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }]
[||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs]
[., MIN_VALUE, ||, v, ==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math]
[), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u, ), +, Math, .]
[==, Integer, ., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u]
[), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u, ), +, Math, .]
[., MIN_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, return, Math, ., abs, (, u, ), +]
[;, }, return, Math, ., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if, (]
[), ;, }, return, Math, ., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if]
[;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||, Math, ., abs, (, v, ), ==]
[+, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||]
[., abs, (, u, ), +, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (]
[), +, Math, ., abs, (, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==, 1]
[;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||, Math, ., abs, (, v, ), ==]
[., abs, (, v, ), ;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||, Math, .]
[), ;, }, if, (, Math, ., abs, (, u, ), ==, 1, ||, Math, ., abs, (, v, )]
[), {, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if]
[||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (, u, >, 0]
[==, 1, ||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (, u]
[., abs, (, u, ), ==, 1, ||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1]
[), ==, 1, ||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (]
[||, Math, ., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (, u, >, 0]
[), {, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if]
[==, 1, ), {, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;]
[., abs, (, v, ), ==, 1, ), {, return, 1, ;, }, if, (, u, >, 0, ), {]
[), ==, 1, ), {, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -, u]
[), {, return, 1, ;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if]
[;, }, if, (, u, >, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0]
[), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -, v, ;]
[>, 0, ), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -]
[), {, u, =, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -, v, ;]
[=, -, u, ;, }, if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k]
[;, }, if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;]
[;, }, if, (, v, >, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;]
[), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, )]
[>, 0, ), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &]
[), {, v, =, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, )]
[=, -, v, ;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&]
[;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &]
[;, }, int, k, =, 0, ;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &]
[;, while, (, (, u, &, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k]
[), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, )]
[&&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[&&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=]
[==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;]
[), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2]
[&, 1, ), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u]
[), ==, 0, &&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2]
[&&, (, v, &, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=]
[&&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }]
[), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;]
[&, 1, ), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k]
[), ==, 0, &&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;]
[&&, k, <, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (]
[), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, )]
[<, 31, ), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==]
[), {, u, /=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, )]
[/=, 2, ;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, ), {, throw, new]
[;, v, /=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (]
[/=, 2, ;, k, ++, ;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", )]
[;, k, ++, ;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }]
[;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =]
[++, ;, }, if, (, k, ==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t]
[), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==, 1]
[==, 31, ), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, )]
[), {, throw, new, ArithmeticException, (, "overflow: gcd is 2^31", ), ;, }, int, t, =, (, u, &, 1, ), ==, 1]
[;, }, int, t, =, (, u, &, 1, ), ==, 1, ?, v, :, -, (, u, /, 2]
[), ;, }, int, t, =, (, u, &, 1, ), ==, 1, ?, v, :, -, (, u, /]
[;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if]
[?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==]
[==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1]
[), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &]
[&, 1, ), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (]
[), ==, 1, ?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &]
[?, v, :, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==]
[:, -, (, u, /, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==, 0, )]
[;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if]
[;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if]
[), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }]
[/, 2, ), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2]
[), ;, do, {, while, (, (, t, &, 1, ), ==, 0, ), {, t, /=, 2, ;, }]
[), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }]
[==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t]
[), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -]
[&, 1, ), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u]
[), ==, 0, ), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -]
[), {, t, /=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }]
[/=, 2, ;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }, else, {, v]
[;, }, if, (, t, >, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t]
[), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -]
[>, 0, ), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (]
[), {, u, =, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -]
[=, -, t, ;, }, else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /]
[;, }, else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }]
[;, }, else, {, v, =, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }]
[=, t, ;, }, t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0]
[;, }, t, =, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;]
[=, (, v, -, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u]
[;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1, <<, k, ), ;, }]
[/, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1, <<, k, )]
[), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1, <<, k]
[-, u, ), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1]
[), /, 2, ;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1, <<, k]
[;, }, while, (, t, !=, 0, ), ;, return, -, u, *, (, 1, <<, k, ), ;, }]
[), ;, return, -, u, *, (, 1, <<, k, ), ;, }, private, static, int, mulAndCheck, (, final, int]
[!=, 0, ), ;, return, -, u, *, (, 1, <<, k, ), ;, }, private, static, int, mulAndCheck, (]
[), ;, return, -, u, *, (, 1, <<, k, ), ;, }, private, static, int, mulAndCheck, (, final, int]
[;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[*, (, 1, <<, k, ), ;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y]
[*, (, 1, <<, k, ), ;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y]
[;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[), ;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m]
[<<, k, ), ;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final]
[), ;, }, private, static, int, mulAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m]
[;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[*, (, long, ), y, ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, )]
[*, (, long, ), y, ;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, )]
[;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[;, if, (, m, <, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, ), m, ;, }, private, static, int]
[||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, )]
[<, Integer, ., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }]
[||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, )]
[., MIN_VALUE, ||, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (]
[), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, ), m, ;, }, private, static, int]
[>, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, ), m, ;]
[), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, ), m, ;, }, private, static, int]
[., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mul", ), ;, }, return, (, int, ), m, ;, }, private]
[;, }, return, (, int, ), m, ;, }, private, static, int, mulPosAndCheck, (, final, int, x, ,, final, int]
[), ;, }, return, (, int, ), m, ;, }, private, static, int, mulPosAndCheck, (, final, int, x, ,, final]
[;, }, private, static, int, mulPosAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[;, }, private, static, int, mulPosAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, m, =]
[;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (]
[*, (, long, ), y, ;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos"]
[*, (, long, ), y, ;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos"]
[;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (]
[;, if, (, m, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (]
[), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (, int, ), m, ;, }, private, static, int]
[>, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (, int, ), m, ;]
[), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (, int, ), m, ;, }, private, static, int]
[., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: mulPos", ), ;, }, return, (, int, ), m, ;, }, private]
[;, }, return, (, int, ), m, ;, }, private, static, int, addAndCheck, (, final, int, x, ,, final, int]
[), ;, }, return, (, int, ), m, ;, }, private, static, int, addAndCheck, (, final, int, x, ,, final]
[;, }, private, static, int, addAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[;, }, private, static, int, addAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[+, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[+, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, private, static, int]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, )]
[<, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, )]
[., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (]
[), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, private, static, int]
[>, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;]
[), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, private, static, int]
[., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, private]
[;, }, return, (, int, ), s, ;, }, private, static, int, subAndCheck, (, final, int, x, ,, final, int]
[), ;, }, return, (, int, ), s, ;, }, private, static, int, subAndCheck, (, final, int, x, ,, final]
[;, }, private, static, int, subAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[;, }, private, static, int, subAndCheck, (, final, int, x, ,, final, int, y, ), {, final, long, s, =]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[-, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[-, (, long, ), y, ;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, )]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[;, if, (, s, <, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (]
[), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, public, Fraction, add]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, )]
[<, Integer, ., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }]
[||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, )]
[., MIN_VALUE, ||, s, >, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (]
[), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, public, Fraction, add]
[>, Integer, ., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;]
[), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, public, Fraction, add]
[., MAX_VALUE, ), {, throw, new, ArithmeticException, (, "overflow: add", ), ;, }, return, (, int, ), s, ;, }, public]
[;, }, return, (, int, ), s, ;, }, public, Fraction, add, (, final, Fraction, fraction, ), {, return, addSub]
[), ;, }, return, (, int, ), s, ;, }, public, Fraction, add, (, final, Fraction, fraction, ), {, return]
[;, }, public, Fraction, add, (, final, Fraction, fraction, ), {, return, addSub, (, fraction, ,, true, ), ;, }]
[;, }, public, Fraction, add, (, final, Fraction, fraction, ), {, return, addSub, (, fraction, ,, true, ), ;, }]
[;, }, public, Fraction, subtract, (, final, Fraction, fraction, ), {, return, addSub, (, fraction, ,, false, ), ;, }]
[,, true, ), ;, }, public, Fraction, subtract, (, final, Fraction, fraction, ), {, return, addSub, (, fraction, ,, false]
[), ;, }, public, Fraction, subtract, (, final, Fraction, fraction, ), {, return, addSub, (, fraction, ,, false, ), ;]
[;, }, private, Fraction, addSub, (, final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (, fraction, ==, null]
[,, false, ), ;, }, private, Fraction, addSub, (, final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (]
[), ;, }, private, Fraction, addSub, (, final, Fraction, fraction, ,, final, boolean, isAdd, ), {, if, (, fraction, ==]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return, isAdd, ?]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ), {, return, isAdd, ?]
[;, }, if, (, numerator, ==, 0, ), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;]
[), ;, }, if, (, numerator, ==, 0, ), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, )]
[), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;, }, if, (, fraction, ., numerator, ==]
[==, 0, ), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;, }, if, (, fraction, .]
[), {, return, isAdd, ?, fraction, :, fraction, ., negate, (, ), ;, }, if, (, fraction, ., numerator, ==]
[;, }, if, (, fraction, ., numerator, ==, 0, ), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor]
[?, fraction, :, fraction, ., negate, (, ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, return]
[:, fraction, ., negate, (, ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, return, this, ;]
[;, }, if, (, fraction, ., numerator, ==, 0, ), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor]
[., negate, (, ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, return, this, ;, }, final]
[), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, ), ;, if]
[==, 0, ), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, )]
[., numerator, ==, 0, ), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, .]
[), {, return, this, ;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, ), ;, if]
[;, }, final, int, d1, =, greatestCommonDivisor, (, denominator, ,, fraction, ., denominator, ), ;, if, (, d1, ==, 1]
[;, if, (, d1, ==, 1, ), {, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator, )]
[,, fraction, ., denominator, ), ;, if, (, d1, ==, 1, ), {, final, int, uvp, =, mulAndCheck, (, numerator]
[), ;, if, (, d1, ==, 1, ), {, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator]
[., denominator, ), ;, if, (, d1, ==, 1, ), {, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction]
[), {, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator, ), ;, final, int, upv, =, mulAndCheck]
[==, 1, ), {, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator, ), ;, final, int, upv]
[), {, final, int, uvp, =, mulAndCheck, (, numerator, ,, fraction, ., denominator, ), ;, final, int, upv, =, mulAndCheck]
[;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd, ?]
[,, fraction, ., denominator, ), ;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return]
[), ;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd]
[., denominator, ), ;, final, int, upv, =, mulAndCheck, (, fraction, ., numerator, ,, denominator, ), ;, return, new, Fraction]
[;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, )]
[,, denominator, ), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp]
[., numerator, ,, denominator, ), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck]
[), ;, return, new, Fraction, (, isAdd, ?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv]
[;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (, fraction]
[,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (]
[?, addAndCheck, (, uvp, ,, upv, ), :, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction]
[:, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final]
[,, upv, ), :, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), )]
[), :, subAndCheck, (, uvp, ,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }]
[,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (]
[,, upv, ), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger]
[), ,, mulPosAndCheck, (, denominator, ,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf]
[), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (]
[,, fraction, ., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply]
[), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf]
[., denominator, ), ), ;, }, final, BigInteger, uvp, =, BigInteger, ., valueOf, (, numerator, ), ., multiply, (, BigInteger]
[;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, ., valueOf, (]
[., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =, BigInteger]
[., valueOf, (, numerator, ), ., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;]
[), ., multiply, (, BigInteger, ., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =]
[), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, ., valueOf]
[., valueOf, (, fraction, ., denominator, /, d1, ), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction]
[), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, .]
[/, d1, ), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (]
[., denominator, /, d1, ), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), .]
[), ), ;, final, BigInteger, upv, =, BigInteger, ., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, .]
[;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (, upv, )]
[., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?, uvp]
[., valueOf, (, fraction, ., numerator, ), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;]
[), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?]
[., numerator, ), ., multiply, (, BigInteger, ., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =]
[), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (, upv]
[., valueOf, (, denominator, /, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv]
[), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (]
[/, d1, ), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :, uvp, .]
[), ), ;, final, BigInteger, t, =, isAdd, ?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (]
[;, final, int, tmodd1, =, t, ., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, )]
[?, uvp, ., add, (, upv, ), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =, t]
[:, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =, t, ., mod, (, BigInteger, ., valueOf, (]
[., add, (, upv, ), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =, t, ., mod]
[), :, uvp, ., subtract, (, upv, ), ;, final, int, tmodd1, =, t, ., mod, (, BigInteger, ., valueOf]
[;, final, int, tmodd1, =, t, ., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, )]
[., subtract, (, upv, ), ;, final, int, tmodd1, =, t, ., mod, (, BigInteger, ., valueOf, (, d1, )]
[), ;, final, int, tmodd1, =, t, ., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (]
[;, final, int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger]
[., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1]
[., mod, (, BigInteger, ., valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =, tmodd1]
[), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,]
[., valueOf, (, d1, ), ), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?, d1]
[), ), ., intValue, (, ), ;, final, int, d2, =, tmodd1, ==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1]
[;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (, w]
[?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, .]
[==, 0, ?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (]
[?, d1, :, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, .]
[:, greatestCommonDivisor, (, tmodd1, ,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (]
[;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (, w]
[,, d1, ), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;]
[), ;, final, BigInteger, w, =, t, ., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (]
[;, if, (, w, ., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }]
[., divide, (, BigInteger, ., valueOf, (, d2, ), ), ;, if, (, w, ., bitLength, (, ), >, 31]
[), ;, if, (, w, ., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;]
[., valueOf, (, d2, ), ), ;, if, (, w, ., bitLength, (, ), >, 31, ), {, throw, new]
[), ), ;, if, (, w, ., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", )]
[), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,]
[>, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (]
[., bitLength, (, ), >, 31, ), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (]
[), {, throw, new, ArithmeticException, (, "overflow: numerator too large after multiply", ), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,]
[;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,, fraction, .]
[), ;, }, return, new, Fraction, (, w, ., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,, fraction]
[;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new]
[,, mulPosAndCheck, (, denominator, /, d1, ,, fraction, ., denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (]
[., intValue, (, ), ,, mulPosAndCheck, (, denominator, /, d1, ,, fraction, ., denominator, /, d2, ), ), ;, }]
[), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[,, fraction, ., denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if]
[/, d1, ,, fraction, ., denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, )]
[,, fraction, ., denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if]
[), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[/, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null]
[., denominator, /, d2, ), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction]
[), ), ;, }, public, Fraction, multiplyBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||, fraction, ., numerator, ==]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||, fraction, .]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, numerator, ==, 0, ||, fraction, ., numerator, ==]
[;, }, if, (, numerator, ==, 0, ||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final]
[), ;, }, if, (, numerator, ==, 0, ||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }]
[), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final]
[||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,]
[==, 0, ||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (]
[||, fraction, ., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,]
[), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final]
[==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, )]
[., numerator, ==, 0, ), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, .]
[), {, return, ZERO, ;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final]
[;, }, final, int, d1, =, greatestCommonDivisor, (, numerator, ,, fraction, ., denominator, ), ;, final, int, d2, =, greatestCommonDivisor]
[;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator]
[,, fraction, ., denominator, ), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return]
[), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (]
[., denominator, ), ;, final, int, d2, =, greatestCommonDivisor, (, fraction, ., numerator, ,, denominator, ), ;, return, getReducedFraction, (]
[;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator]
[,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,]
[., numerator, ,, denominator, ), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2]
[), ;, return, getReducedFraction, (, mulAndCheck, (, numerator, /, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (]
[;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw, new]
[,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (]
[,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, )]
[/, d1, ,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /]
[,, fraction, ., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, )]
[), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy]
[/, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, ), ), ;, }, public]
[., numerator, /, d2, ), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, ), ), ;]
[), ,, mulPosAndCheck, (, denominator, /, d2, ,, fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy]
[), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {, throw]
[,, fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if]
[/, d2, ,, fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, )]
[,, fraction, ., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if]
[), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[/, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null]
[., denominator, /, d1, ), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction]
[), ), ;, }, public, Fraction, divideBy, (, final, Fraction, fraction, ), {, if, (, fraction, ==, null, ), {]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, throw]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, fraction, ., numerator, ==, 0, )]
[), {, throw, new, IllegalArgumentException, (, "The fraction must not be null", ), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, throw]
[;, }, if, (, fraction, ., numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return]
[), ;, }, if, (, fraction, ., numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }]
[), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return, multiplyBy, (, fraction, ., invert, (, ), ), ;]
[==, 0, ), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return, multiplyBy, (, fraction, ., invert, (, )]
[., numerator, ==, 0, ), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return, multiplyBy, (, fraction, ., invert]
[), {, throw, new, ArithmeticException, (, "The fraction to divide by must not be zero", ), ;, }, return, multiplyBy, (, fraction, ., invert, (, ), ), ;]
[;, }, return, multiplyBy, (, fraction, ., invert, (, ), ), ;, }, @, Override, public, boolean, equals, (, final]
[), ;, }, return, multiplyBy, (, fraction, ., invert, (, ), ), ;, }, @, Override, public, boolean, equals, (]
[;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {]
[), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, )]
[., invert, (, ), ), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[), {, return, true, ;, }, if, (, obj, instanceof, Fraction, ==, false, ), {, return, false, ;, }, final]
[==, this, ), {, return, true, ;, }, if, (, obj, instanceof, Fraction, ==, false, ), {, return, false, ;]
[), {, return, true, ;, }, if, (, obj, instanceof, Fraction, ==, false, ), {, return, false, ;, }, final]
[;, }, if, (, obj, instanceof, Fraction, ==, false, ), {, return, false, ;, }, final, Fraction, other, =, (]
[), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (, ), ==]
[==, false, ), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (]
[instanceof, Fraction, ==, false, ), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return]
[), {, return, false, ;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (, ), ==]
[;, }, final, Fraction, other, =, (, Fraction, ), obj, ;, return, getNumerator, (, ), ==, other, ., getNumerator, (]
[;, return, getNumerator, (, ), ==, other, ., getNumerator, (, ), &&, getDenominator, (, ), ==, other, ., getDenominator, (]
[;, return, getNumerator, (, ), ==, other, ., getNumerator, (, ), &&, getDenominator, (, ), ==, other, ., getDenominator, (]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37]
[&&, getDenominator, (, ), ==, other, ., getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[==, other, ., getNumerator, (, ), &&, getDenominator, (, ), ==, other, ., getDenominator, (, ), ;, }, @, Override]
[&&, getDenominator, (, ), ==, other, ., getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {]
[., getNumerator, (, ), &&, getDenominator, (, ), ==, other, ., getDenominator, (, ), ;, }, @, Override, public, int]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37]
[==, other, ., getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, ), {, hashCode, =, 37]
[., getDenominator, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, if, (, hashCode, ==, 0, )]
[), {, hashCode, =, 37, *, (, 37, *, 17, +, getNumerator, (, ), ), +, getDenominator, (, ), ;]
[==, 0, ), {, hashCode, =, 37, *, (, 37, *, 17, +, getNumerator, (, ), ), +, getDenominator, (]
[), {, hashCode, =, 37, *, (, 37, *, 17, +, getNumerator, (, ), ), +, getDenominator, (, ), ;]
[=, 37, *, (, 37, *, 17, +, getNumerator, (, ), ), +, getDenominator, (, ), ;, }, return, hashCode]
[;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other, ), {, if, (, this]
[+, getDenominator, (, ), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other, )]
[*, (, 37, *, 17, +, getNumerator, (, ), ), +, getDenominator, (, ), ;, }, return, hashCode, ;, }]
[+, getDenominator, (, ), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other, )]
[), +, getDenominator, (, ), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other]
[+, getNumerator, (, ), ), +, getDenominator, (, ), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo]
[*, 17, +, getNumerator, (, ), ), +, getDenominator, (, ), ;, }, return, hashCode, ;, }, @, Override, public]
[+, getNumerator, (, ), ), +, getDenominator, (, ), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo]
[), +, getDenominator, (, ), ;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other]
[;, }, return, hashCode, ;, }, @, Override, public, int, compareTo, (, final, Fraction, other, ), {, if, (, this]
[;, }, @, Override, public, int, compareTo, (, final, Fraction, other, ), {, if, (, this, ==, other, ), {]
[), {, return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&, denominator, ==, other, ., denominator, )]
[==, other, ), {, return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&, denominator, ==, other, .]
[), {, return, 0, ;, }, if, (, numerator, ==, other, ., numerator, &&, denominator, ==, other, ., denominator, )]
[;, }, if, (, numerator, ==, other, ., numerator, &&, denominator, ==, other, ., denominator, ), {, return, 0, ;]
[), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *, (, long, ), other, .]
[&&, denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator]
[==, other, ., numerator, &&, denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =]
[&&, denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator]
[., numerator, &&, denominator, ==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long]
[), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *, (, long, ), other, .]
[==, other, ., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *, (]
[), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *, (, long, ), other, .]
[., denominator, ), {, return, 0, ;, }, final, long, first, =, (, long, ), numerator, *, (, long, )]
[;, }, final, long, first, =, (, long, ), numerator, *, (, long, ), other, ., denominator, ;, final, long]
[;, final, long, second, =, (, long, ), other, ., numerator, *, (, long, ), denominator, ;, if, (, first]
[*, (, long, ), other, ., denominator, ;, final, long, second, =, (, long, ), other, ., numerator, *, (]
[*, (, long, ), other, ., denominator, ;, final, long, second, =, (, long, ), other, ., numerator, *, (]
[;, final, long, second, =, (, long, ), other, ., numerator, *, (, long, ), denominator, ;, if, (, first]
[;, final, long, second, =, (, long, ), other, ., numerator, *, (, long, ), denominator, ;, if, (, first]
[., denominator, ;, final, long, second, =, (, long, ), other, ., numerator, *, (, long, ), denominator, ;, if]
[;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (, first, <, second, ), {]
[*, (, long, ), denominator, ;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (]
[*, (, long, ), denominator, ;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (]
[., numerator, *, (, long, ), denominator, ;, if, (, first, ==, second, ), {, return, 0, ;, }, else]
[;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (, first, <, second, ), {]
[;, if, (, first, ==, second, ), {, return, 0, ;, }, else, if, (, first, <, second, ), {]
[), {, return, 0, ;, }, else, if, (, first, <, second, ), {, return, -, 1, ;, }, else]
[==, second, ), {, return, 0, ;, }, else, if, (, first, <, second, ), {, return, -, 1, ;]
[), {, return, 0, ;, }, else, if, (, first, <, second, ), {, return, -, 1, ;, }, else]
[;, }, else, if, (, first, <, second, ), {, return, -, 1, ;, }, else, {, return, 1, ;]
[), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, @, Override, public, String, toString, (]
[<, second, ), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, @, Override, public, String]
[), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, @, Override, public, String, toString, (]
[;, }, else, {, return, 1, ;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString]
[;, }, else, {, return, 1, ;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString]
[;, }, }, @, Override, public, String, toString, (, ), {, if, (, toString, ==, null, ), {, toString, =]
[), {, toString, =, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/']
[==, null, ), {, toString, =, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append]
[), {, toString, =, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/']
[=, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append]
[;, }, return, toString, ;, }, public, String, toProperString, (, ), {, if, (, toProperString, ==, null, ), {, if]
[., toString, (, ), ;, }, return, toString, ;, }, public, String, toProperString, (, ), {, if, (, toProperString, ==]
[., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, return, toString, ;, }, public, String, toProperString]
[., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, return, toString]
[., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), .]
[), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), )]
[), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, return]
[), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, return, toString, ;, }, public, String]
[), ., toString, (, ), ;, }, return, toString, ;, }, public, String, toProperString, (, ), {, if, (, toProperString]
[;, }, public, String, toProperString, (, ), {, if, (, toProperString, ==, null, ), {, if, (, numerator, ==, 0]
[), {, if, (, numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==, denominator]
[==, null, ), {, if, (, numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (, numerator]
[), {, if, (, numerator, ==, 0, ), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==, denominator]
[), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }]
[==, 0, ), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1"]
[), {, toProperString, =, "0", ;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }]
[=, "0", ;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (]
[;, }, else, if, (, numerator, ==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==]
[), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =]
[==, denominator, ), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==, -, 1, *, denominator, ), {]
[), {, toProperString, =, "1", ;, }, else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =]
[=, "1", ;, }, else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }]
[;, }, else, if, (, numerator, ==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if]
[), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :, numerator, )]
[==, -, 1, *, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?]
[), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :, numerator, )]
[*, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :]
[*, denominator, ), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :]
[), {, toProperString, =, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :, numerator, )]
[=, "-1", ;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :, numerator, ), <, -, denominator]
[;, }, else, if, (, (, numerator, >, 0, ?, -, numerator, :, numerator, ), <, -, denominator, ), {]
[), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {, toProperString, =, Integer]
[<, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {]
[), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, )]
[?, -, numerator, :, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if]
[>, 0, ?, -, numerator, :, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, )]
[?, -, numerator, :, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if]
[:, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==]
[:, numerator, ), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==]
[), <, -, denominator, ), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, )]
[), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {, toProperString, =, Integer]
[), {, final, int, properNumerator, =, getProperNumerator, (, ), ;, if, (, properNumerator, ==, 0, ), {, toProperString, =, Integer]
[;, if, (, properNumerator, ==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }]
[), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =, new, StringBuilder]
[==, 0, ), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =]
[), {, toProperString, =, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =, new, StringBuilder]
[=, Integer, ., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =, new, StringBuilder, (, 32, )]
[;, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append]
[., toString, (, getProperWhole, (, ), ), ;, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append]
[), ;, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), .]
[=, new, StringBuilder, (, 32, ), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append]
[;, }, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), .]
[., toString, (, ), ;, }, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (, getNumerator]
[., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =, new, StringBuilder]
[., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else]
[., append, (, properNumerator, ), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (]
[., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (, '/', ), ., append, (, getDenominator, (]
[., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (]
[), ., append, (, getProperWhole, (, ), ), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append]
[), ., append, (, ' ', ), ., append, (, properNumerator, ), ., append, (, '/', ), ., append, (, getDenominator]
[), ., append, (, properNumerator, ), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString]
[), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }]
[), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, else, {, toProperString, =, new]
[), ., toString, (, ), ;, }, }, else, {, toProperString, =, new, StringBuilder, (, 32, ), ., append, (]
[=, new, StringBuilder, (, 32, ), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append]
[;, }, }, return, toProperString, ;, }, }]
[., toString, (, ), ;, }, }, return, toProperString, ;, }, }]
[., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, return, toProperString, ;, }, }]
[., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, return]
[., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), .]
[), ., append, (, getNumerator, (, ), ), ., append, (, '/', ), ., append, (, getDenominator, (, ), )]
[), ., append, (, '/', ), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }]
[), ., append, (, getDenominator, (, ), ), ., toString, (, ), ;, }, }, return, toProperString, ;, }, }]
[), ., toString, (, ), ;, }, }, return, toProperString, ;, }, }]
[;, }, }]
