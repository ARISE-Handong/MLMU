[;, private, final, Node, templateNode, ;, private, class, ErrorReporterParser, {, void, addParserWarning, (, String, messageId, ,, String, messageArg, ,, int]
[;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, ScriptRuntime]
[., warning, (, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,]
[,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addParserWarning, (, String, messageId, ,, int]
[., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }]
[,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addParserWarning, (, String]
[), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addParserWarning, (, String, messageId, ,]
[,, lineno, ,, null, ,, charno, ), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno]
[,, null, ,, charno, ), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {]
[,, charno, ), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, .]
[), ;, }, void, addParserWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[;, }, void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter, .]
[., warning, (, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, )]
[,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, String]
[., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning]
[), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,]
[,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno]
[,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int]
[,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, )]
[), ;, }, void, addTypeWarning, (, String, messageId, ,, String, messageArg, ,, int, lineno, ,, int, charno, ), {, errorReporter]
[;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (, "Bad type annotation. "]
[., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,]
[,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, int]
[+, ScriptRuntime, ., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, )]
[,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, int]
[., getMessage1, (, messageId, ,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }]
[,, messageArg, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String]
[), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,]
[,, lineno, ,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno]
[,, null, ,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {]
[,, charno, ), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, .]
[), ;, }, void, addTypeWarning, (, String, messageId, ,, int, lineno, ,, int, charno, ), {, errorReporter, ., warning, (]
[;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null, ;, private, State, state, ;, private, final, Map, <, String, ,, Annotation]
[., warning, (, "Bad type annotation. ", +, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,]
[,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null, ;]
[+, ScriptRuntime, ., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }]
[,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null, ;]
[., getMessage0, (, messageId, ), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, }, private]
[), ,, getSourceName, (, ), ,, lineno, ,, null, ,, charno, ), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null]
[,, lineno, ,, null, ,, charno, ), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null, ;, private, State, state, ;]
[,, null, ,, charno, ), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null, ;, private, State, state, ;, private, final]
[,, charno, ), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null, ;, private, State, state, ;, private, final, Map, <]
[), ;, }, }, private, JSDocInfo, fileOverviewJSDocInfo, =, null, ;, private, State, state, ;, private, final, Map, <, String, ,]
[;, private, State, state, ;, private, final, Map, <, String, ,, Annotation, >, annotationNames, ;, private, final, Set, <, String]
[;, private, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ;, void, setFileLevelJsDocBuilder, (, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {, this, ., fileLevelJsDocBuilder, =]
[., <, String, >, of, (, "this", ,, "arguments", ), ;, private, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ;, void, setFileLevelJsDocBuilder, (]
[,, "arguments", ), ;, private, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ;, void, setFileLevelJsDocBuilder, (, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {, this]
[), ;, private, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ;, void, setFileLevelJsDocBuilder, (, Node, ., FileLevelJsDocBuilder, fileLevelJsDocBuilder, ), {, this, ., fileLevelJsDocBuilder]
[=, fileLevelJsDocBuilder, ;, }, void, setFileOverviewJSDocInfo, (, JSDocInfo, fileOverviewJSDocInfo, ), {, this, ., fileOverviewJSDocInfo, =, fileOverviewJSDocInfo, ;, }, private, enum]
[., fileLevelJsDocBuilder, =, fileLevelJsDocBuilder, ;, }, void, setFileOverviewJSDocInfo, (, JSDocInfo, fileOverviewJSDocInfo, ), {, this, ., fileOverviewJSDocInfo, =, fileOverviewJSDocInfo, ;, }]
[;, }, void, setFileOverviewJSDocInfo, (, JSDocInfo, fileOverviewJSDocInfo, ), {, this, ., fileOverviewJSDocInfo, =, fileOverviewJSDocInfo, ;, }, private, enum, State, {]
[=, fileOverviewJSDocInfo, ;, }, private, enum, State, {, SEARCHING_ANNOTATION, ,, SEARCHING_NEWLINE, ,, NEXT_IS_ANNOTATION, }, JsDocInfoParser, (, JsDocTokenStream, stream, ,, Comment]
[., fileOverviewJSDocInfo, =, fileOverviewJSDocInfo, ;, }, private, enum, State, {, SEARCHING_ANNOTATION, ,, SEARCHING_NEWLINE, ,, NEXT_IS_ANNOTATION, }, JsDocInfoParser, (, JsDocTokenStream, stream]
[;, }, private, enum, State, {, SEARCHING_ANNOTATION, ,, SEARCHING_NEWLINE, ,, NEXT_IS_ANNOTATION, }, JsDocInfoParser, (, JsDocTokenStream, stream, ,, Comment, commentNode, ,]
[=, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode]
[., stream, =, stream, ;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null]
[;, this, ., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile]
[=, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this]
[., associatedNode, =, associatedNode, ;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, )]
[;, this, ., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder]
[=, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (]
[., sourceFile, =, associatedNode, ==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new]
[;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {]
[?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, )]
[==, null, ?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, .]
[?, null, :, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, )]
[:, associatedNode, ., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if]
[;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {]
[., getStaticSourceFile, (, ), ;, this, ., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode]
[=, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {, this, ., jsdocBuilder, .]
[., jsdocBuilder, =, new, JSDocInfoBuilder, (, config, ., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {, this, .]
[;, if, (, commentNode, !=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), )]
[), ;, if, (, commentNode, !=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, )]
[., parseJsDocDocumentation, ), ;, if, (, commentNode, !=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue]
[), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =]
[!=, null, ), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, .]
[), {, this, ., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =]
[;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, .]
[., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this]
[., jsdocBuilder, ., recordOriginalCommentString, (, commentNode, ., getValue, (, ), ), ;, }, this, ., annotationNames, =, config, ., annotationNames]
[), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this]
[., getValue, (, ), ), ;, }, this, ., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config]
[=, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this]
[., annotationNames, =, config, ., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter]
[;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode, =, this]
[., annotationNames, ;, this, ., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode]
[=, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, )]
[., suppressionNames, =, config, ., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode]
[;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String]
[., suppressionNames, ;, this, ., errorReporter, =, errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }]
[=, errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {]
[., errorReporter, =, errorReporter, ;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (]
[;, this, ., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile]
[=, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==, null, ?, null]
[., templateNode, =, this, ., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==, null]
[;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==, null, ?, null, :, sourceFile, ., getName, (, )]
[., createTemplateNode, (, ), ;, }, private, String, getSourceName, (, ), {, return, sourceFile, ==, null, ?, null, :, sourceFile]
[;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config, config, =, new, Config, (, Sets, ., <]
[?, null, :, sourceFile, ., getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config]
[==, null, ?, null, :, sourceFile, ., getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, )]
[?, null, :, sourceFile, ., getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config]
[:, sourceFile, ., getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config, config, =]
[;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config, config, =, new, Config, (, Sets, ., <]
[., getName, (, ), ;, }, public, static, Node, parseTypeString, (, String, typeString, ), {, Config, config, =, new, Config]
[;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,, config, ,, NullErrorReporter]
[,, Sets, ., <, String, >, newHashSet, (, ), ,, false, ,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser]
[., <, String, >, newHashSet, (, ), ,, Sets, ., <, String, >, newHashSet, (, ), ,, false, ,, LanguageMode]
[,, false, ,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString]
[., <, String, >, newHashSet, (, ), ,, false, ,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =]
[,, LanguageMode, ., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,]
[,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,]
[., ECMASCRIPT3, ,, false, ), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,]
[), ;, JsDocInfoParser, parser, =, new, JsDocInfoParser, (, new, JsDocTokenStream, (, typeString, ), ,, null, ,, null, ,, config, ,]
[;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next, (, ), ), ;, }, @, SuppressWarnings, (, "incomplete-switch", ), boolean]
[,, null, ,, null, ,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (, parser]
[), ,, null, ,, null, ,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (]
[,, null, ,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next]
[,, config, ,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next, (, )]
[,, NullErrorReporter, ., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next, (, ), ), ;]
[), ;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next, (, ), ), ;, }, @, SuppressWarnings, (, "incomplete-switch", )]
[., forNewRhino, (, ), ), ;, return, parser, ., parseTopLevelTypeExpression, (, parser, ., next, (, ), ), ;, }, @]
[;, }, @, SuppressWarnings, (, "incomplete-switch", ), boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression, type]
[., parseTopLevelTypeExpression, (, parser, ., next, (, ), ), ;, }, @, SuppressWarnings, (, "incomplete-switch", ), boolean, parse, (, )]
[), ;, }, @, SuppressWarnings, (, "incomplete-switch", ), boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression]
[., next, (, ), ), ;, }, @, SuppressWarnings, (, "incomplete-switch", ), boolean, parse, (, ), {, int, lineno, ;]
[boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression, type, ;, state, =, State, ., SEARCHING_ANNOTATION, ;]
[), boolean, parse, (, ), {, int, lineno, ;, int, charno, ;, JSTypeExpression, type, ;, state, =, State, ., SEARCHING_ANNOTATION]
[=, State, ., SEARCHING_ANNOTATION, ;, skipEOLs, (, ), ;, JsDocToken, token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >]
[;, skipEOLs, (, ), ;, JsDocToken, token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >, extendedTypes, =, Lists, .]
[., SEARCHING_ANNOTATION, ;, skipEOLs, (, ), ;, JsDocToken, token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >, extendedTypes, =]
[;, JsDocToken, token, =, next, (, ), ;, List, <, ExtendedTypeInfo, >, extendedTypes, =, Lists, ., newArrayList, (, ), ;]
[;, List, <, ExtendedTypeInfo, >, extendedTypes, =, Lists, ., newArrayList, (, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, )]
[;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =]
[., newArrayList, (, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token]
[), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =, blockInfo, ., token, ;, if, (, !, blockInfo]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, blockInfo, =, extractBlockComment, (, token, ), ;, token, =, blockInfo, ., token, ;]
[;, token, =, blockInfo, ., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {, jsdocBuilder]
[), ;, token, =, blockInfo, ., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {]
[=, blockInfo, ., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription]
[;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string]
[., token, ;, if, (, !, blockInfo, ., string, ., isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo]
[), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken]
[), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken]
[., isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if]
[., string, ., isEmpty, (, ), ), {, jsdocBuilder, ., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else]
[;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=, JsDocToken, ., EOC, ), {]
[., recordBlockDescription, (, blockInfo, ., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&]
[), ;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=, JsDocToken, ., EOC, )]
[., string, ), ;, }, }, else, {, if, (, token, !=, JsDocToken, ., ANNOTATION, &&, token, !=, JsDocToken, .]
[), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for, (, ;, ;, ), {, switch]
[&&, token, !=, JsDocToken, ., EOC, ), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for]
[!=, JsDocToken, ., ANNOTATION, &&, token, !=, JsDocToken, ., EOC, ), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }]
[&&, token, !=, JsDocToken, ., EOC, ), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for]
[., ANNOTATION, &&, token, !=, JsDocToken, ., EOC, ), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry]
[), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for, (, ;, ;, ), {, switch]
[!=, JsDocToken, ., EOC, ), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for, (, ;]
[), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for, (, ;, ;, ), {, switch]
[., EOC, ), {, jsdocBuilder, ., recordBlockDescription, (, "", ), ;, }, }, retry, :, for, (, ;, ;, )]
[;, }, }, retry, :, for, (, ;, ;, ), {, switch, (, token, ), {, case, ANNOTATION, :, if]
[., recordBlockDescription, (, "", ), ;, }, }, retry, :, for, (, ;, ;, ), {, switch, (, token, )]
[), ;, }, }, retry, :, for, (, ;, ;, ), {, switch, (, token, ), {, case, ANNOTATION, :]
[), {, case, ANNOTATION, :, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;]
[:, if, (, state, ==, State, ., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, .]
[), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, .]
[==, State, ., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;]
[), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, .]
[., SEARCHING_ANNOTATION, ), {, state, =, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[=, State, ., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, )]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =]
[., SEARCHING_NEWLINE, ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, String]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =, stream, .]
[;, charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, String, annotationName, =, stream, ., getString, (]
[=, stream, ., getCharno, (, ), ;, String, annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =, annotationNames]
[;, String, annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;]
[., getCharno, (, ), ;, String, annotationName, =, stream, ., getString, (, ), ;, Annotation, annotation, =, annotationNames, ., get]
[;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {, parser, .]
[., getString, (, ), ;, Annotation, annotation, =, annotationNames, ., get, (, annotationName, ), ;, if, (, annotation, ==, null]
[;, if, (, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (]
[., get, (, annotationName, ), ;, if, (, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName]
[), ;, if, (, annotation, ==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[==, null, ), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,, stream, .]
[), {, parser, ., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;, switch, (, annotation, ), {]
[., addParserWarning, (, "msg.bad.jsdoc.tag", ,, annotationName, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;]
[,, annotationName, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,, lineno, ,, charno]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName]
[), ;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;, switch, (, annotation, )]
[., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;]
[;, switch, (, annotation, ), {, case, AUTHOR, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, authorInfo]
[., markAnnotation, (, annotationName, ,, lineno, ,, charno, ), ;, switch, (, annotation, ), {, case, AUTHOR, :, if, (]
[,, lineno, ,, charno, ), ;, switch, (, annotation, ), {, case, AUTHOR, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (]
[,, charno, ), ;, switch, (, annotation, ), {, case, AUTHOR, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), )]
[), ;, switch, (, annotation, ), {, case, AUTHOR, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo]
[), {, case, AUTHOR, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, )]
[:, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =]
[), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =, authorInfo, ., string, ;, if, (, author, .]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, authorInfo, =, extractSingleLineBlock, (, ), ;, String, author, =, authorInfo, ., string, ;]
[;, String, author, =, authorInfo, ., string, ;, if, (, author, ., length, (, ), ==, 0, ), {, parser]
[;, if, (, author, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, .]
[., string, ;, if, (, author, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[;, }, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token, =, authorInfo, ., token, ;, }, else]
[., addParserWarning, (, "msg.jsdoc.authormissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor, (, author]
[), ;, }, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token, =, authorInfo, ., token, ;, }]
[., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addAuthor, (, author, ), ;, }, token, =, authorInfo]
[;, }, token, =, authorInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue]
[., addAuthor, (, author, ), ;, }, token, =, authorInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[), ;, }, token, =, authorInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }]
[=, authorInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (]
[., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :]
[=, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (]
[;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser, .]
[), ;, }, continue, retry, ;, case, CONSISTENTIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser]
[:, if, (, !, jsdocBuilder, ., recordConsistentIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordConsistentIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct]
[., addParserWarning, (, "msg.jsdoc.consistidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct, (, ), )]
[;, continue, retry, ;, case, STRUCT, :, if, (, !, jsdocBuilder, ., recordStruct, (, ), ), {, parser, ., addTypeWarning]
[:, if, (, !, jsdocBuilder, ., recordStruct, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordStruct, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict, (, ), )]
[;, continue, retry, ;, case, DICT, :, if, (, !, jsdocBuilder, ., recordDict, (, ), ), {, parser, ., addTypeWarning]
[:, if, (, !, jsdocBuilder, ., recordDict, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordDict, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !, jsdocBuilder, ., recordConstructor]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !, jsdocBuilder, ., recordConstructor, (, ), )]
[;, continue, retry, ;, case, CONSTRUCTOR, :, if, (, !, jsdocBuilder, ., recordConstructor, (, ), ), {, if, (, jsdocBuilder]
[:, if, (, !, jsdocBuilder, ., recordConstructor, (, ), ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {]
[), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno]
[), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno]
[., recordConstructor, (, ), ), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor"]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., isInterfaceRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type"]
[), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, )]
[;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (, !, jsdocBuilder, .]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (]
[,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;]
[), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (, !, jsdocBuilder]
[., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DEPRECATED, :, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), )]
[;, continue, retry, ;, case, DEPRECATED, :, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordDeprecated, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordDeprecated, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.deprecated", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =, reasonInfo, ., string, ;, if, (, reason]
[., addParserWarning, (, "msg.jsdoc.deprecated", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (]
[,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, )]
[), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =, reasonInfo, ., string, ;, if, (]
[., getCharno, (, ), ), ;, }, ExtractionInfo, reasonInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, reason, =, reasonInfo, .]
[;, String, reason, =, reasonInfo, ., string, ;, if, (, reason, ., length, (, ), >, 0, ), {, jsdocBuilder]
[), ;, String, reason, =, reasonInfo, ., string, ;, if, (, reason, ., length, (, ), >, 0, ), {]
[;, if, (, reason, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }]
[., string, ;, if, (, reason, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (, reason, )]
[), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case]
[>, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }, token, =, reasonInfo, .]
[), {, jsdocBuilder, ., recordDeprecationReason, (, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case]
[;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !, jsdocBuilder, ., recordInterface]
[., recordDeprecationReason, (, reason, ), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case, INTERFACE, :, if]
[), ;, }, token, =, reasonInfo, ., token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !, jsdocBuilder, .]
[=, reasonInfo, ., token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !, jsdocBuilder, ., recordInterface, (, ), )]
[;, continue, retry, ;, case, INTERFACE, :, if, (, !, jsdocBuilder, ., recordInterface, (, ), ), {, if, (, jsdocBuilder]
[., token, ;, continue, retry, ;, case, INTERFACE, :, if, (, !, jsdocBuilder, ., recordInterface, (, ), ), {, if]
[:, if, (, !, jsdocBuilder, ., recordInterface, (, ), ), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {]
[), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno]
[), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno]
[., recordInterface, (, ), ), {, if, (, jsdocBuilder, ., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor"]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., isConstructorRecorded, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., addTypeWarning, (, "msg.jsdoc.interface.constructor", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type"]
[), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[., getCharno, (, ), ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, )]
[;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (]
[,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;]
[), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :, if, (, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {]
[;, continue, retry, ;, case, DESC, :, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (]
[:, if, (, jsdocBuilder, ., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., isDescriptionRecorded, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, )]
[., addParserWarning, (, "msg.jsdoc.desc.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, token, =]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, token, =, eatTokensUntilEOL, (, ), ;]
[,, stream, ., getCharno, (, ), ), ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, else, {]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry]
[), ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token]
[., getCharno, (, ), ), ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String]
[;, continue, retry, ;, }, else, {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, .]
[;, String, description, =, descriptionInfo, ., string, ;, jsdocBuilder, ., recordDescription, (, description, ), ;, token, =, descriptionInfo, ., token]
[), ;, String, description, =, descriptionInfo, ., string, ;, jsdocBuilder, ., recordDescription, (, description, ), ;, token, =, descriptionInfo, .]
[;, jsdocBuilder, ., recordDescription, (, description, ), ;, token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW]
[., string, ;, jsdocBuilder, ., recordDescription, (, description, ), ;, token, =, descriptionInfo, ., token, ;, continue, retry, ;, }]
[;, token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;, if]
[., recordDescription, (, description, ), ;, token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String]
[), ;, token, =, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;]
[=, descriptionInfo, ., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;, if, (, jsdocBuilder]
[;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, )]
[., token, ;, continue, retry, ;, }, case, FILE_OVERVIEW, :, String, fileOverview, =, "", ;, if, (, jsdocBuilder, ., shouldParseDocumentation]
[:, String, fileOverview, =, "", ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (]
[;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM]
[), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, fileOverviewInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =]
[;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[,, WhitespaceOption, ., TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else]
[), ;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL]
[., TRIM, ), ;, fileOverview, =, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token]
[=, fileOverviewInfo, ., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, )]
[;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (]
[., string, ;, token, =, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }]
[=, fileOverviewInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !, jsdocBuilder]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview]
[., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview]
[=, eatTokensUntilEOL, (, token, ), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, .]
[;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream]
[), ;, }, if, (, !, jsdocBuilder, ., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordFileOverview, (, fileOverview, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,, stream]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, .]
[., addParserWarning, (, "msg.jsdoc.fileoverview.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, LICENSE]
[,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, LICENSE, :, case]
[), ;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption]
[., getCharno, (, ), ), ;, }, continue, retry, ;, case, LICENSE, :, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock]
[:, case, PRESERVE, :, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =, preserveInfo]
[:, ExtractionInfo, preserveInfo, =, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =, preserveInfo, ., string, ;]
[;, String, preserve, =, preserveInfo, ., string, ;, if, (, preserve, ., length, (, ), >, 0, ), {, if]
[,, WhitespaceOption, ., PRESERVE, ), ;, String, preserve, =, preserveInfo, ., string, ;, if, (, preserve, ., length, (, )]
[), ;, String, preserve, =, preserveInfo, ., string, ;, if, (, preserve, ., length, (, ), >, 0, ), {]
[., PRESERVE, ), ;, String, preserve, =, preserveInfo, ., string, ;, if, (, preserve, ., length, (, ), >, 0]
[;, if, (, preserve, ., length, (, ), >, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder]
[., string, ;, if, (, preserve, ., length, (, ), >, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, )]
[), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =]
[>, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }]
[., length, (, ), >, 0, ), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve]
[), {, if, (, fileLevelJsDocBuilder, !=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =]
[), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;]
[!=, null, ), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =, preserveInfo, ., token, ;, continue]
[), {, fileLevelJsDocBuilder, ., append, (, preserve, ), ;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;]
[;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :, token, =, next, (, )]
[., append, (, preserve, ), ;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :]
[), ;, }, }, token, =, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :, token, =, next, (]
[=, preserveInfo, ., token, ;, continue, retry, ;, case, ENUM, :, token, =, next, (, ), ;, lineno, =, stream]
[;, continue, retry, ;, case, ENUM, :, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, )]
[., token, ;, continue, retry, ;, case, ENUM, :, token, =, next, (, ), ;, lineno, =, stream, ., getLineno]
[:, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno]
[=, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, )]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if]
[;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token]
[=, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token]
[;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {]
[., getCharno, (, ), ;, type, =, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken]
[=, null, ;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {, type, =]
[;, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (]
[), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {]
[&&, token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if]
[!=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, )]
[&&, token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if]
[., EOL, &&, token, !=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;]
[), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {]
[!=, JsDocToken, ., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type]
[), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {]
[., EOC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null]
[=, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, }, if, (, type, ==, null, ), {, type, =, createJSTypeExpression]
[;, }, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }]
[), ;, }, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;]
[), ), ;, }, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), )]
[), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (]
[==, null, ), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !, jsdocBuilder, .]
[), {, type, =, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (]
[=, createJSTypeExpression, (, newStringNode, (, "number", ), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), )]
[;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno]
[), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[), ), ;, }, if, (, !, jsdocBuilder, ., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type"]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, )]
[., recordEnumParameterType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token]
[;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder, .]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry]
[,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :]
[,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (]
[), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder]
[=, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, )]
[;, continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {, parser, ., addParserWarning]
[), ;, continue, retry, ;, case, EXPORT, :, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {, parser, .]
[:, if, (, !, jsdocBuilder, ., recordExport, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordExport, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose]
[., addParserWarning, (, "msg.jsdoc.export", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose, (, ), )]
[;, continue, retry, ;, case, EXPOSE, :, if, (, !, jsdocBuilder, ., recordExpose, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordExpose, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordExpose, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns]
[., addParserWarning, (, "msg.jsdoc.expose", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns, (, ), )]
[;, continue, retry, ;, case, EXTERNS, :, if, (, !, jsdocBuilder, ., recordExterns, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordExterns, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordExterns, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch]
[., addParserWarning, (, "msg.jsdoc.externs", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), )]
[;, continue, retry, ;, case, JAVA_DISPATCH, :, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordJavaDispatch, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, )]
[., addParserWarning, (, "msg.jsdoc.javadispatch", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, ), ;, token, =]
[;, continue, retry, ;, case, EXTENDS, :, case, IMPLEMENTS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[:, case, IMPLEMENTS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (]
[:, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno]
[;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno]
[=, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, )]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;]
[;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (, token, ==, JsDocToken, .]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (]
[=, stream, ., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (, token, ==, JsDocToken, ., LC, )]
[;, boolean, matchingRc, =, false, ;, if, (, token, ==, JsDocToken, ., LC, ), {, token, =, next, (, )]
[., getCharno, (, ), ;, boolean, matchingRc, =, false, ;, if, (, token, ==, JsDocToken, ., LC, ), {, token]
[;, if, (, token, ==, JsDocToken, ., LC, ), {, token, =, next, (, ), ;, matchingRc, =, true, ;]
[), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, token, ==, JsDocToken, ., STRING]
[==, JsDocToken, ., LC, ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, token]
[), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, token, ==, JsDocToken, ., STRING]
[., LC, ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, token, ==, JsDocToken]
[=, next, (, ), ;, matchingRc, =, true, ;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node]
[;, matchingRc, =, true, ;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (]
[=, true, ;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,]
[;, }, if, (, token, ==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,]
[), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =, stream, .]
[==, JsDocToken, ., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;]
[), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =, stream, .]
[., STRING, ), {, Node, typeNode, =, parseAndRecordTypeNameNode, (, token, ,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode]
[,, lineno, ,, charno, ,, matchingRc, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, .]
[,, charno, ,, matchingRc, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (]
[,, matchingRc, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;]
[), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token]
[;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG]
[=, stream, ., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =]
[;, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if]
[., getCharno, (, ), ;, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (]
[=, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation]
[;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add]
[,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {]
[., BANG, ,, typeNode, ), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS]
[), ;, type, =, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, .]
[=, createJSTypeExpression, (, typeNode, ), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new]
[;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,, stream]
[), ;, if, (, annotation, ==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,]
[), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[==, Annotation, ., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,, stream, ., getLineno, (, )]
[), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[., EXTENDS, ), {, extendedTypes, ., add, (, new, ExtendedTypeInfo, (, type, ,, stream, ., getLineno, (, ), ,, stream]
[;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, .]
[., add, (, new, ExtendedTypeInfo, (, type, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {, Preconditions, .]
[,, stream, ., getCharno, (, ), ), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, .]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ), ;, }, else, {, Preconditions, ., checkState, (]
[), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !]
[., getCharno, (, ), ), ), ;, }, else, {, Preconditions, ., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, )]
[;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,]
[., checkState, (, annotation, ==, Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), )]
[), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno]
[==, Annotation, ., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning]
[), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno]
[., IMPLEMENTS, ), ;, if, (, !, jsdocBuilder, ., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate"]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }, token, =, next, (, )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }, token, =, next, (, )]
[., recordImplementedInterface, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }, token, =, next, (]
[;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, .]
[., addTypeWarning, (, "msg.jsdoc.implements.duplicate", ,, lineno, ,, charno, ), ;, }, }, token, =, next, (, ), ;, if, (]
[,, lineno, ,, charno, ), ;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if]
[,, charno, ), ;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (, token]
[), ;, }, }, token, =, next, (, ), ;, if, (, matchingRc, ), {, if, (, token, !=, JsDocToken]
[=, next, (, ), ;, if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, ., RC, ), {, parser]
[;, if, (, matchingRc, ), {, if, (, token, !=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc"]
[), {, if, (, token, !=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[!=, JsDocToken, ., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, .]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., RC, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=]
[., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token]
[,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, if, (, token, !=, JsDocToken]
[), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token]
[., getCharno, (, ), ), ;, }, }, else, if, (, token, !=, JsDocToken, ., EOL, &&, token, !=, JsDocToken]
[), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[&&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,]
[&&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,]
[!=, JsDocToken, ., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, .]
[&&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,]
[., EOL, &&, token, !=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (]
[&&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,]
[!=, JsDocToken, ., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, .]
[&&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,]
[., EOF, &&, token, !=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (]
[), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[!=, JsDocToken, ., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, .]
[), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., EOC, ), {, parser, ., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL]
[., addTypeWarning, (, "msg.end.annotation.expected", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, .]
[,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (]
[), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,, charno, ), ;, }, token, =]
[., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,, charno, )]
[;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder, .]
[., addTypeWarning, (, "msg.no.type.name", ,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry]
[,, lineno, ,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :]
[,, charno, ), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (]
[), ;, }, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder]
[=, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, )]
[;, continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, ., addParserWarning]
[), ;, continue, retry, ;, case, HIDDEN, :, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, .]
[:, if, (, !, jsdocBuilder, ., recordHiddenness, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordHiddenness, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc, =]
[., addParserWarning, (, "msg.jsdoc.hidden", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :, skipEOLs]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc, =, false, ;, if]
[;, continue, retry, ;, case, LENDS, :, skipEOLs, (, ), ;, matchingRc, =, false, ;, if, (, match, (, JsDocToken]
[:, skipEOLs, (, ), ;, matchingRc, =, false, ;, if, (, match, (, JsDocToken, ., LC, ), ), {, token]
[;, matchingRc, =, false, ;, if, (, match, (, JsDocToken, ., LC, ), ), {, token, =, next, (, )]
[=, false, ;, if, (, match, (, JsDocToken, ., LC, ), ), {, token, =, next, (, ), ;, matchingRc]
[;, if, (, match, (, JsDocToken, ., LC, ), ), {, token, =, next, (, ), ;, matchingRc, =, true]
[), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, match, (, JsDocToken, ., STRING]
[), ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, match, (, JsDocToken, .]
[., LC, ), ), {, token, =, next, (, ), ;, matchingRc, =, true, ;, }, if, (, match, (]
[=, next, (, ), ;, matchingRc, =, true, ;, }, if, (, match, (, JsDocToken, ., STRING, ), ), {]
[;, matchingRc, =, true, ;, }, if, (, match, (, JsDocToken, ., STRING, ), ), {, token, =, next, (]
[=, true, ;, }, if, (, match, (, JsDocToken, ., STRING, ), ), {, token, =, next, (, ), ;]
[;, }, if, (, match, (, JsDocToken, ., STRING, ), ), {, token, =, next, (, ), ;, if, (]
[), {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, )]
[), ), {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (]
[., STRING, ), ), {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (, stream, .]
[=, next, (, ), ;, if, (, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, ), ), ), {]
[;, if, (, !, jsdocBuilder, ., recordLends, (, stream, ., getString, (, ), ), ), {, parser, ., addTypeWarning, (]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordLends, (, stream, ., getString, (, ), ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[., getString, (, ), ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,, stream]
[;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[., addTypeWarning, (, "msg.jsdoc.lends.incompatible", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, .]
[,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, .]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (]
[), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,, stream, .]
[., getCharno, (, ), ), ;, }, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (]
[;, }, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc"]
[., addTypeWarning, (, "msg.jsdoc.lends.missing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !]
[,, stream, ., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, )]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !, match, (]
[), ;, }, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (]
[., getCharno, (, ), ), ;, }, if, (, matchingRc, &&, !, match, (, JsDocToken, ., RC, ), ), {]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[&&, !, match, (, JsDocToken, ., RC, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[., RC, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token]
[., addTypeWarning, (, "msg.jsdoc.missing.rc", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MEANING]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String]
[;, continue, retry, ;, case, MEANING, :, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, meaning, =, meaningInfo, .]
[:, ExtractionInfo, meaningInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, meaning, =, meaningInfo, ., string, ;, token, =, meaningInfo, .]
[;, String, meaning, =, meaningInfo, ., string, ;, token, =, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning]
[), ;, String, meaning, =, meaningInfo, ., string, ;, token, =, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, .]
[;, token, =, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, .]
[., string, ;, token, =, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {]
[=, meaningInfo, ., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (]
[;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, .]
[., token, ;, if, (, !, jsdocBuilder, ., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordMeaning, (, meaning, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,, stream]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser, .]
[., addParserWarning, (, "msg.jsdoc.meaning.extra", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, NO_ALIAS]
[,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, .]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if]
[), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser]
[., getCharno, (, ), ), ;, }, continue, retry, ;, case, NO_ALIAS, :, if, (, !, jsdocBuilder, ., recordNoAlias, (]
[:, if, (, !, jsdocBuilder, ., recordNoAlias, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordNoAlias, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile]
[., addParserWarning, (, "msg.jsdoc.noalias", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), )]
[;, continue, retry, ;, case, NO_COMPILE, :, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordNoCompile, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordNoCompile, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck]
[., addParserWarning, (, "msg.jsdoc.nocompile", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), )]
[;, continue, retry, ;, case, NO_TYPE_CHECK, :, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordNoTypeCheck, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;]
[., addParserWarning, (, "msg.jsdoc.nocheck", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, )]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;]
[;, continue, retry, ;, case, NOT_IMPLEMENTED, :, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, INHERIT_DOC, :, case]
[:, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !, jsdocBuilder]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride]
[;, continue, retry, ;, case, INHERIT_DOC, :, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {]
[:, case, OVERRIDE, :, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,]
[:, if, (, !, jsdocBuilder, ., recordOverride, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordOverride, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token, =]
[., addTypeWarning, (, "msg.jsdoc.override", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :, skipEOLs]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token, =, next, (, )]
[;, continue, retry, ;, case, THROWS, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream]
[:, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno]
[;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno]
[=, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, )]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if]
[;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token]
[=, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {]
[;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (]
[., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =]
[=, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, )]
[;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;]
[), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token]
[==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==]
[), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token]
[., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==, null, )]
[=, createJSTypeExpression, (, parseAndRecordTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (]
[;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token]
[), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }]
[), ), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }]
[), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, current, (, ), ;, jsdocBuilder]
[==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, current, (, )]
[), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, current, (, ), ;, jsdocBuilder]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, current, (, ), ;, jsdocBuilder, ., recordThrowType, (]
[;, continue, retry, ;, }, }, token, =, current, (, ), ;, jsdocBuilder, ., recordThrowType, (, type, ), ;, if]
[=, current, (, ), ;, jsdocBuilder, ., recordThrowType, (, type, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), )]
[;, jsdocBuilder, ., recordThrowType, (, type, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =]
[;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description]
[., recordThrowType, (, type, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (]
[), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String]
[), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string, ;, if, (, description]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, descriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, description, =, descriptionInfo, ., string]
[;, String, description, =, descriptionInfo, ., string, ;, if, (, description, ., length, (, ), >, 0, ), {, jsdocBuilder]
[), ;, String, description, =, descriptionInfo, ., string, ;, if, (, description, ., length, (, ), >, 0, ), {]
[;, if, (, description, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, )]
[., string, ;, if, (, description, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,]
[), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }, token, =, descriptionInfo, ., token, ;, }, else]
[>, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }, token, =, descriptionInfo, ., token, ;]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }, token, =]
[), {, jsdocBuilder, ., recordThrowDescription, (, type, ,, description, ), ;, }, token, =, descriptionInfo, ., token, ;, }, else]
[;, }, token, =, descriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue]
[., recordThrowDescription, (, type, ,, description, ), ;, }, token, =, descriptionInfo, ., token, ;, }, else, {, token, =]
[,, description, ), ;, }, token, =, descriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, )]
[), ;, }, token, =, descriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }]
[=, descriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (]
[., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PARAM, :]
[=, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;, token, =, next]
[;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =]
[), ;, }, continue, retry, ;, case, PARAM, :, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno]
[:, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno]
[;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno]
[=, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, )]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if]
[;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token]
[=, stream, ., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {]
[;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (]
[., getCharno, (, ), ;, type, =, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =]
[=, null, ;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, )]
[;, if, (, token, ==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;]
[), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token]
[==, JsDocToken, ., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==]
[), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token]
[., LC, ), {, type, =, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==, null, )]
[=, createJSTypeExpression, (, parseAndRecordParamTypeNode, (, token, ), ), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (]
[;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (]
[), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs]
[), ), ;, if, (, type, ==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }]
[), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =, next, (]
[==, null, ), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =]
[), {, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =, next, (]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno]
[;, continue, retry, ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno]
[;, token, =, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno]
[=, next, (, ), ;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, )]
[;, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, }, String, name]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, }, String, name, =, null]
[;, charno, =, stream, ., getCharno, (, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, .]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, }, String, name, =, null, ;, boolean]
[=, stream, ., getCharno, (, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==]
[;, }, String, name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==, token, ;, if, (, isBracketedParam, )]
[., getCharno, (, ), ;, }, String, name, =, null, ;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==, token, ;]
[;, boolean, isBracketedParam, =, JsDocToken, ., LB, ==, token, ;, if, (, isBracketedParam, ), {, token, =, next, (, )]
[;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token]
[==, token, ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING]
[., LB, ==, token, ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (, JsDocToken]
[;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token]
[), {, token, =, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token, ), {, parser, .]
[=, next, (, ), ;, }, if, (, JsDocToken, ., STRING, !=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name"]
[;, }, if, (, JsDocToken, ., STRING, !=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno]
[), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {, name, =, stream, .]
[!=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {, name, =]
[., STRING, !=, token, ), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {]
[), {, parser, ., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {, name, =, stream, .]
[;, }, else, {, name, =, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =, next]
[., addTypeWarning, (, "msg.missing.variable.name", ,, lineno, ,, charno, ), ;, }, else, {, name, =, stream, ., getString, (, )]
[,, lineno, ,, charno, ), ;, }, else, {, name, =, stream, ., getString, (, ), ;, if, (, isBracketedParam]
[,, charno, ), ;, }, else, {, name, =, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {]
[), ;, }, else, {, name, =, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =]
[=, stream, ., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (]
[;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, )]
[., getString, (, ), ;, if, (, isBracketedParam, ), {, token, =, next, (, ), ;, if, (, JsDocToken, .]
[), {, token, =, next, (, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, ), {, token, =, next]
[=, next, (, ), ;, if, (, JsDocToken, ., EQUALS, ==, token, ), {, token, =, next, (, ), ;]
[;, if, (, JsDocToken, ., EQUALS, ==, token, ), {, token, =, next, (, ), ;, if, (, JsDocToken, .]
[), {, token, =, next, (, ), ;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =, next]
[==, token, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., STRING, ==, token, ), {, token]
[., EQUALS, ==, token, ), {, token, =, next, (, ), ;, if, (, JsDocToken, ., STRING, ==, token, )]
[), {, token, =, next, (, ), ;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =, next]
[=, next, (, ), ;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =, next, (, ), ;]
[;, if, (, JsDocToken, ., STRING, ==, token, ), {, token, =, next, (, ), ;, }, }, if, (]
[), {, token, =, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning]
[==, token, ), {, token, =, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=, token, )]
[., STRING, ==, token, ), {, token, =, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=]
[), {, token, =, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning]
[=, next, (, ), ;, }, }, if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", )]
[;, }, }, if, (, JsDocToken, ., RB, !=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {, type, =, JSTypeExpression, .]
[!=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {, type, =]
[., RB, !=, token, ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, else, if, (, type, !=, null, ), {, type, =, JSTypeExpression, .]
[;, }, else, if, (, type, !=, null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }]
[), ;, }, else, if, (, type, !=, null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;]
[), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (, '.']
[!=, null, ), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf]
[), {, type, =, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (, '.']
[=, JSTypeExpression, ., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (, '.', ), >, -]
[;, }, }, if, (, name, ., indexOf, (, '.', ), >, -, 1, ), {, name, =, null, ;]
[., makeOptionalArg, (, type, ), ;, }, }, if, (, name, ., indexOf, (, '.', ), >, -, 1, )]
[), ;, }, }, if, (, name, ., indexOf, (, '.', ), >, -, 1, ), {, name, =, null]
[), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), )]
[>, -, 1, ), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,]
[., indexOf, (, '.', ), >, -, 1, ), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder]
[), >, -, 1, ), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name]
[), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), )]
[), {, name, =, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), )]
[=, null, ;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), ), {, if, (]
[;, }, else, if, (, !, jsdocBuilder, ., recordParameter, (, name, ,, type, ), ), {, if, (, jsdocBuilder, .]
[), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,]
[), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,]
[., recordParameter, (, name, ,, type, ), ), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser]
[,, type, ), ), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name"]
[), ), {, if, (, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name]
[), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {, parser, .]
[., hasParameter, (, name, ), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;]
[), ), {, parser, ., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {, parser]
[;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;, }, }, }]
[., addTypeWarning, (, "msg.dup.variable.name", ,, name, ,, lineno, ,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type"]
[,, name, ,, lineno, ,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno]
[,, lineno, ,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno]
[,, charno, ), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;]
[), ;, }, else, {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;, }, }]
[;, }, }, }, if, (, name, ==, null, ), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, name, ,, lineno, ,, charno, ), ;, }, }, }, if, (, name, ==, null]
[,, name, ,, lineno, ,, charno, ), ;, }, }, }, if, (, name, ==, null, ), {, token, =]
[,, lineno, ,, charno, ), ;, }, }, }, if, (, name, ==, null, ), {, token, =, eatTokensUntilEOL, (]
[,, charno, ), ;, }, }, }, if, (, name, ==, null, ), {, token, =, eatTokensUntilEOL, (, token, )]
[), ;, }, }, }, if, (, name, ==, null, ), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue]
[), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile]
[==, null, ), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name]
[), {, token, =, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile]
[=, eatTokensUntilEOL, (, token, ), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile, ,, lineno, ,]
[;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile, ,, lineno, ,, charno, ), ;, if, (]
[), ;, continue, retry, ;, }, jsdocBuilder, ., markName, (, name, ,, sourceFile, ,, lineno, ,, charno, ), ;, if]
[;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription]
[., markName, (, name, ,, sourceFile, ,, lineno, ,, charno, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), )]
[,, sourceFile, ,, lineno, ,, charno, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =]
[,, lineno, ,, charno, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (]
[,, charno, ), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, )]
[), ;, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String]
[), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (, paramDescription]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, paramDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, paramDescription, =, paramDescriptionInfo, ., string]
[;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (, paramDescription, ., length, (, ), >, 0, ), {, jsdocBuilder]
[), ;, String, paramDescription, =, paramDescriptionInfo, ., string, ;, if, (, paramDescription, ., length, (, ), >, 0, ), {]
[;, if, (, paramDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, )]
[., string, ;, if, (, paramDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,]
[), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else]
[>, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =]
[), {, jsdocBuilder, ., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else]
[;, }, token, =, paramDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue]
[., recordParameterDescription, (, name, ,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else, {, token, =]
[,, paramDescription, ), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, )]
[), ;, }, token, =, paramDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }]
[=, paramDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (]
[., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :]
[=, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (]
[;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser, .]
[), ;, }, continue, retry, ;, case, PRESERVE_TRY, :, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser]
[:, if, (, !, jsdocBuilder, ., recordPreserveTry, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordPreserveTry, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow]
[., addParserWarning, (, "msg.jsdoc.preservertry", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), )]
[;, continue, retry, ;, case, NO_SHADOW, :, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordNoShadow, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordNoShadow, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects]
[., addParserWarning, (, "msg.jsdoc.noshadow", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), )]
[;, continue, retry, ;, case, NO_SIDE_EFFECTS, :, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning]
[:, if, (, !, jsdocBuilder, ., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordNoSideEffects, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES, :, token, =, parseModifiesTag, (, next, (]
[., addParserWarning, (, "msg.jsdoc.nosideeffects", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES, :, token, =, parseModifiesTag, (, next]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES, :, token]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, MODIFIES, :, token, =, parseModifiesTag, (, next, (, ), ), ;]
[;, continue, retry, ;, case, MODIFIES, :, token, =, parseModifiesTag, (, next, (, ), ), ;, continue, retry, ;, case]
[:, token, =, parseModifiesTag, (, next, (, ), ), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder]
[=, parseModifiesTag, (, next, (, ), ), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast]
[;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning]
[), ;, continue, retry, ;, case, IMPLICIT_CAST, :, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, .]
[:, if, (, !, jsdocBuilder, ., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordImplicitCast, (, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SEE, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (]
[., addTypeWarning, (, "msg.jsdoc.implicitcast", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SEE]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SEE, :, if, (, jsdocBuilder, ., shouldParseDocumentation]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SEE, :, if]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SEE, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {]
[;, continue, retry, ;, case, SEE, :, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock]
[:, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =]
[), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =, referenceInfo, ., string, ;, if, (, reference, .]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, referenceInfo, =, extractSingleLineBlock, (, ), ;, String, reference, =, referenceInfo, ., string, ;]
[;, String, reference, =, referenceInfo, ., string, ;, if, (, reference, ., length, (, ), ==, 0, ), {, parser]
[;, if, (, reference, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, .]
[., string, ;, if, (, reference, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[;, }, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }, token, =, referenceInfo, ., token, ;, }, else]
[., addParserWarning, (, "msg.jsdoc.seemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }, token]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference, (, reference]
[), ;, }, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }, token, =, referenceInfo, ., token, ;, }]
[., getCharno, (, ), ), ;, }, else, {, jsdocBuilder, ., addReference, (, reference, ), ;, }, token, =, referenceInfo]
[;, }, token, =, referenceInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue]
[., addReference, (, reference, ), ;, }, token, =, referenceInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[), ;, }, token, =, referenceInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }]
[=, referenceInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (]
[., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :]
[=, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (]
[;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser, .]
[), ;, }, continue, retry, ;, case, STABLEIDGENERATOR, :, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser]
[:, if, (, !, jsdocBuilder, ., recordStableIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordStableIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS, :, token, =, parseSuppressTag, (, next, (]
[., addParserWarning, (, "msg.jsdoc.stableidgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS, :, token, =, parseSuppressTag, (, next]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS, :, token]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, SUPPRESS, :, token, =, parseSuppressTag, (, next, (, ), ), ;]
[;, continue, retry, ;, case, SUPPRESS, :, token, =, parseSuppressTag, (, next, (, ), ), ;, continue, retry, ;, case]
[:, token, =, parseSuppressTag, (, next, (, ), ), ;, continue, retry, ;, case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock]
[=, parseSuppressTag, (, next, (, ), ), ;, continue, retry, ;, case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, )]
[;, continue, retry, ;, case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =]
[), ;, continue, retry, ;, case, TEMPLATE, :, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names]
[:, ExtractionInfo, templateInfo, =, extractSingleLineBlock, (, ), ;, List, <, String, >, names, =, Lists, ., newArrayList, (, Splitter, .]
[;, List, <, String, >, names, =, Lists, ., newArrayList, (, Splitter, ., on, (, ',', ), ., trimResults, (]
[;, if, (, names, ., size, (, ), ==, 0, ||, names, ., get, (, 0, ), ., length, (]
[., newArrayList, (, Splitter, ., on, (, ',', ), ., trimResults, (, ), ., split, (, templateInfo, ., string, )]
[), ;, if, (, names, ., size, (, ), ==, 0, ||, names, ., get, (, 0, ), ., length]
[., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (, ), ==, 0, ||, names]
[., trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (, )]
[., on, (, ',', ), ., trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (]
[), ., trimResults, (, ), ., split, (, templateInfo, ., string, ), ), ;, if, (, names, ., size, (]
[), ), ;, if, (, names, ., size, (, ), ==, 0, ||, names, ., get, (, 0, ), .]
[., string, ), ), ;, if, (, names, ., size, (, ), ==, 0, ||, names, ., get, (, 0]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[||, names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing"]
[==, 0, ||, names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning]
[., size, (, ), ==, 0, ||, names, ., get, (, 0, ), ., length, (, ), ==, 0, )]
[||, names, ., get, (, 0, ), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing"]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,]
[., get, (, 0, ), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream]
[), ., length, (, ), ==, 0, ), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,]
[., addTypeWarning, (, "msg.jsdoc.templatemissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, if, (, !, jsdocBuilder]
[,, stream, ., getCharno, (, ), ), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), )]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames]
[), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once"]
[., getCharno, (, ), ), ;, }, else, if, (, !, jsdocBuilder, ., recordTemplateTypeNames, (, names, ), ), {, parser]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordTemplateTypeNames, (, names, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator]
[., addTypeWarning, (, "msg.jsdoc.template.at.most.once", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, templateInfo, ., token]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, templateInfo, ., token, ;, continue]
[), ;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, .]
[., getCharno, (, ), ), ;, }, token, =, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if]
[=, templateInfo, ., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), )]
[;, continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser, ., addParserWarning]
[., token, ;, continue, retry, ;, case, IDGENERATOR, :, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser]
[:, if, (, !, jsdocBuilder, ., recordIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordIdGenerator, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, )]
[., addParserWarning, (, "msg.jsdoc.idgen", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, )]
[,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue]
[), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (]
[., getCharno, (, ), ), ;, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION, :, ExtractionInfo]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version]
[;, continue, retry, ;, case, VERSION, :, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version, =, versionInfo, ., string]
[:, ExtractionInfo, versionInfo, =, extractSingleLineBlock, (, ), ;, String, version, =, versionInfo, ., string, ;, if, (, version, ., length]
[;, String, version, =, versionInfo, ., string, ;, if, (, version, ., length, (, ), ==, 0, ), {, parser]
[;, if, (, version, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, .]
[., string, ;, if, (, version, ., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., length, (, ), ==, 0, ), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion"]
[., addParserWarning, (, "msg.jsdoc.versionmissing", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, if, (, !]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, )]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, if, (, !, jsdocBuilder, .]
[), ;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (]
[., getCharno, (, ), ), ;, }, else, {, if, (, !, jsdocBuilder, ., recordVersion, (, version, ), ), {]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordVersion, (, version, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[;, }, }, token, =, versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case, RETURN]
[., addParserWarning, (, "msg.jsdoc.extraversion", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =, versionInfo, .]
[,, stream, ., getCharno, (, ), ), ;, }, }, token, =, versionInfo, ., token, ;, continue, retry, ;, case]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, token, =, versionInfo, ., token, ;]
[), ;, }, }, token, =, versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case]
[., getCharno, (, ), ), ;, }, }, token, =, versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :]
[=, versionInfo, ., token, ;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :]
[;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case]
[., token, ;, continue, retry, ;, case, CONSTANT, :, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :, case, PROTECTED]
[:, case, DEFINE, :, case, RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case]
[:, case, RETURN, :, case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case]
[:, case, PRIVATE, :, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno]
[:, case, PROTECTED, :, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =, stream, .]
[:, case, PUBLIC, :, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =, stream, ., getLineno, (, )]
[:, case, THIS, :, case, TYPE, :, case, TYPEDEF, :, lineno, =, stream, ., getLineno, (, ), ;, charno, =]
[:, case, TYPE, :, case, TYPEDEF, :, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno]
[:, case, TYPEDEF, :, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;]
[:, lineno, =, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =]
[=, stream, ., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, null, ;]
[;, charno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, )]
[., getLineno, (, ), ;, charno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType]
[=, stream, ., getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean]
[;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation]
[., getCharno, (, ), ;, Node, typeNode, =, null, ;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =]
[;, boolean, hasType, =, lookAheadForTypeAnnotation, (, ), ;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==]
[;, boolean, isAlternateTypeAnnotation, =, (, annotation, ==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation]
[;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (]
[), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if]
[||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, )]
[||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||]
[||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;]
[==, Annotation, ., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation]
[||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;]
[., PRIVATE, ||, annotation, ==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT]
[||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||]
[==, Annotation, ., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation]
[||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||]
[., PROTECTED, ||, annotation, ==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (]
[||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, )]
[==, Annotation, ., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==]
[||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, )]
[., PUBLIC, ||, annotation, ==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, .]
[), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if]
[==, Annotation, ., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type]
[), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if]
[., CONSTANT, ), ;, boolean, canSkipTypeAnnotation, =, (, isAlternateTypeAnnotation, ||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null]
[;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =, next]
[), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =]
[||, annotation, ==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {]
[), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =]
[==, Annotation, ., RETURN, ), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (]
[), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =]
[., RETURN, ), ;, type, =, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;]
[=, null, ;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =, next, (, )]
[;, if, (, hasType, ||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode]
[), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if]
[||, !, canSkipTypeAnnotation, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token]
[), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if]
[), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if]
[;, token, =, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, .]
[=, next, (, ), ;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, ., THIS, )]
[;, typeNode, =, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode]
[=, parseAndRecordTypeNode, (, token, ), ;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (, Token]
[;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, )]
[), ;, if, (, annotation, ==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode]
[), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, )]
[==, Annotation, ., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }, type, =]
[), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, )]
[., THIS, ), {, typeNode, =, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (]
[=, wrapNode, (, Token, ., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean]
[;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;]
[,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&]
[., BANG, ,, typeNode, ), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==]
[), ;, }, type, =, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation]
[=, createJSTypeExpression, (, typeNode, ), ;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !]
[;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (]
[), ;, }, boolean, hasError, =, type, ==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if]
[;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation]
[&&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||]
[==, null, &&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation]
[&&, !, canSkipTypeAnnotation, ;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||]
[;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation]
[;, if, (, !, hasError, ), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation]
[), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if]
[), {, if, (, (, type, !=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if]
[), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno]
[||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser]
[), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {]
[&&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, )]
[!=, null, &&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (]
[&&, isAlternateTypeAnnotation, ), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, )]
[), ||, annotation, ==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {]
[), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno]
[==, Annotation, ., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning]
[), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno]
[., TYPE, ), {, if, (, !, jsdocBuilder, ., recordType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type"]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {]
[., recordType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, )]
[;, }, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, ), )]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {, case, CONSTANT, :]
[,, lineno, ,, charno, ), ;, }, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !, jsdocBuilder]
[,, charno, ), ;, }, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy]
[), ;, }, }, switch, (, annotation, ), {, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, )]
[), {, case, CONSTANT, :, if, (, !, jsdocBuilder, ., recordConstancy, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.const"]
[:, if, (, !, jsdocBuilder, ., recordConstancy, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,, stream, ., getLineno]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordConstancy, (, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.const", ,, stream, ., getLineno, (, ), ,, stream, .]
[;, }, break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {, parser, .]
[., addParserWarning, (, "msg.jsdoc.const", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, break]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :]
[,, stream, ., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :, if, (]
[), ;, }, break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {, parser]
[., getCharno, (, ), ), ;, }, break, ;, case, DEFINE, :, if, (, !, jsdocBuilder, ., recordDefineType, (, type]
[:, if, (, !, jsdocBuilder, ., recordDefineType, (, type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if]
[., recordDefineType, (, type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :]
[;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), ), {]
[., addParserWarning, (, "msg.jsdoc.define", ,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder]
[,, lineno, ,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility]
[,, charno, ), ;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE]
[), ;, }, break, ;, case, PRIVATE, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), )]
[:, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PRIVATE, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if]
[., recordVisibility, (, Visibility, ., PRIVATE, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :]
[., PRIVATE, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), ), {]
[., addParserWarning, (, "msg.jsdoc.visibility.private", ,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder]
[,, lineno, ,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility]
[,, charno, ), ;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED]
[), ;, }, break, ;, case, PROTECTED, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), )]
[:, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PROTECTED, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if]
[., recordVisibility, (, Visibility, ., PROTECTED, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :]
[., PROTECTED, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), ), {]
[., addParserWarning, (, "msg.jsdoc.visibility.protected", ,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder]
[,, lineno, ,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility]
[,, charno, ), ;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC]
[), ;, }, break, ;, case, PUBLIC, :, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), )]
[:, if, (, !, jsdocBuilder, ., recordVisibility, (, Visibility, ., PUBLIC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if]
[., recordVisibility, (, Visibility, ., PUBLIC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :]
[., PUBLIC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case]
[;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newNode, (]
[., addParserWarning, (, "msg.jsdoc.visibility.public", ,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if, (, type, ==]
[,, lineno, ,, charno, ), ;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type]
[,, charno, ), ;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type, =, createJSTypeExpression]
[), ;, }, break, ;, case, RETURN, :, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newNode]
[:, if, (, type, ==, null, ), {, type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;]
[), {, type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !, jsdocBuilder, .]
[==, null, ), {, type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !]
[), {, type, =, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !, jsdocBuilder, .]
[=, createJSTypeExpression, (, newNode, (, Token, ., QMARK, ), ), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type]
[;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno]
[), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,]
[), ), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type"]
[., QMARK, ), ), ;, }, if, (, !, jsdocBuilder, ., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, break, ;, }, if, (, jsdocBuilder, .]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, break, ;, }, if, (, jsdocBuilder, .]
[., recordReturnType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, break, ;]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, break, ;, }, if, (, jsdocBuilder]
[;, break, ;, }, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, )]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, break, ;, }, if, (, jsdocBuilder, ., shouldParseDocumentation, (, )]
[,, lineno, ,, charno, ), ;, break, ;, }, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo]
[,, charno, ), ;, break, ;, }, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock]
[), ;, break, ;, }, if, (, jsdocBuilder, ., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token]
[), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (, returnDescription]
[., shouldParseDocumentation, (, ), ), {, ExtractionInfo, returnDescriptionInfo, =, extractMultilineTextualBlock, (, token, ), ;, String, returnDescription, =, returnDescriptionInfo, ., string]
[;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (, returnDescription, ., length, (, ), >, 0, ), {, jsdocBuilder]
[), ;, String, returnDescription, =, returnDescriptionInfo, ., string, ;, if, (, returnDescription, ., length, (, ), >, 0, ), {]
[;, if, (, returnDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }]
[., string, ;, if, (, returnDescription, ., length, (, ), >, 0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, )]
[), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {, token]
[>, 0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, .]
[), {, jsdocBuilder, ., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {, token]
[;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue]
[., recordReturnDescription, (, returnDescription, ), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (]
[), ;, }, token, =, returnDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }]
[=, returnDescriptionInfo, ., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case]
[;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, THIS, :, if, (]
[., token, ;, }, else, {, token, =, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, THIS, :]
[=, eatTokensUntilEOL, (, token, ), ;, }, continue, retry, ;, case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (]
[;, }, continue, retry, ;, case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {, parser]
[), ;, }, continue, retry, ;, case, THIS, :, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {]
[:, if, (, !, jsdocBuilder, ., recordThisType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if]
[., recordThisType, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :]
[;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {, parser, .]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder]
[,, lineno, ,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type]
[,, charno, ), ;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), )]
[), ;, }, break, ;, case, TYPEDEF, :, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {, parser]
[:, if, (, !, jsdocBuilder, ., recordTypedef, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, }, }, token, =]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, }, }, token, =]
[., recordTypedef, (, type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, }, }, token]
[;, }, break, ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, }, break, ;]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, lineno, ,, charno, ), ;, }, break, ;, }, }, token, =, eatTokensUntilEOL, (, )]
[,, lineno, ,, charno, ), ;, }, break, ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;]
[,, charno, ), ;, }, break, ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }]
[), ;, }, break, ;, }, }, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, }, break]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, }, break, ;, case, EOC, :, if, (, hasParsedFileOverviewDocInfo, (]
[;, continue, retry, ;, }, }, }, break, ;, case, EOC, :, if, (, hasParsedFileOverviewDocInfo, (, ), ), {, fileOverviewJSDocInfo]
[:, if, (, hasParsedFileOverviewDocInfo, (, ), ), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;]
[), {, fileOverviewJSDocInfo, =, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :]
[=, retrieveAndResetParsedJSDocInfo, (, ), ;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :, jsdocBuilder, ., build]
[;, }, checkExtendedTypes, (, extendedTypes, ), ;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;]
[;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,]
[), ;, return, true, ;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof"]
[;, case, EOF, :, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno]
[:, jsdocBuilder, ., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,]
[;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;]
[., build, (, null, ), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,, stream, .]
[), ;, parser, ., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, )]
[., addParserWarning, (, "msg.unexpected.eof", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return]
[,, stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;]
[), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE]
[., getCharno, (, ), ), ;, checkExtendedTypes, (, extendedTypes, ), ;, return, false, ;, case, EOL, :, if, (, state]
[;, return, false, ;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =, State, .]
[), ;, return, false, ;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =, State]
[;, case, EOL, :, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }]
[:, if, (, state, ==, State, ., SEARCHING_NEWLINE, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next]
[), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :]
[==, State, ., SEARCHING_NEWLINE, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue]
[), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :]
[., SEARCHING_NEWLINE, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;]
[=, State, ., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (, token]
[;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR]
[., SEARCHING_ANNOTATION, ;, }, token, =, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken]
[=, next, (, ), ;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&, state, ==]
[;, continue, retry, ;, default, :, if, (, token, ==, JsDocToken, ., STAR, &&, state, ==, State, ., SEARCHING_ANNOTATION, )]
[), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =, State, ., SEARCHING_NEWLINE, ;]
[&&, state, ==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {]
[==, JsDocToken, ., STAR, &&, state, ==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry]
[&&, state, ==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {]
[., STAR, &&, state, ==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }]
[), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =, State, ., SEARCHING_NEWLINE, ;]
[==, State, ., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =]
[), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =, State, ., SEARCHING_NEWLINE, ;]
[., SEARCHING_ANNOTATION, ), {, token, =, next, (, ), ;, continue, retry, ;, }, else, {, state, =, State, .]
[=, next, (, ), ;, continue, retry, ;, }, else, {, state, =, State, ., SEARCHING_NEWLINE, ;, token, =, eatTokensUntilEOL]
[;, continue, retry, ;, }, else, {, state, =, State, ., SEARCHING_NEWLINE, ;, token, =, eatTokensUntilEOL, (, ), ;, continue]
[=, State, ., SEARCHING_NEWLINE, ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, next, (]
[;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, next, (, ), ;, }, }]
[., SEARCHING_NEWLINE, ;, token, =, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, next, (, ), ;]
[=, eatTokensUntilEOL, (, ), ;, continue, retry, ;, }, }, token, =, next, (, ), ;, }, }, private, void]
[;, continue, retry, ;, }, }, token, =, next, (, ), ;, }, }, private, void, checkExtendedTypes, (, List, <]
[=, next, (, ), ;, }, }, private, void, checkExtendedTypes, (, List, <, ExtendedTypeInfo, >, extendedTypes, ), {, for, (]
[;, }, }, private, void, checkExtendedTypes, (, List, <, ExtendedTypeInfo, >, extendedTypes, ), {, for, (, ExtendedTypeInfo, typeInfo, :, extendedTypes]
[), {, if, (, jsdocBuilder, ., isInterfaceRecorded, (, ), ), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, .]
[), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate"]
[., isInterfaceRecorded, (, ), ), {, if, (, !, jsdocBuilder, ., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else]
[., recordExtendedInterface, (, typeInfo, ., type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }]
[., type, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;]
[;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {, parser, .]
[., addParserWarning, (, "msg.jsdoc.extends.duplicate", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (]
[,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType]
[,, typeInfo, ., charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type]
[., lineno, ,, typeInfo, ., charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo]
[), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), ), {, parser]
[., charno, ), ;, }, }, else, {, if, (, !, jsdocBuilder, ., recordBaseType, (, typeInfo, ., type, ), )]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, }]
[), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, }]
[., recordBaseType, (, typeInfo, ., type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,, typeInfo]
[), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }]
[., type, ), ), {, parser, ., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;]
[;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC]
[., addTypeWarning, (, "msg.jsdoc.incompat.type", ,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, }, }, private, JsDocToken]
[,, typeInfo, ., lineno, ,, typeInfo, ., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token]
[,, typeInfo, ., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (]
[., lineno, ,, typeInfo, ., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {]
[), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, .]
[., charno, ), ;, }, }, }, }, private, JsDocToken, parseSuppressTag, (, JsDocToken, token, ), {, if, (, token, ==]
[), {, Set, <, String, >, suppressions, =, new, HashSet, <, String, >, (, ), ;, while, (, true, )]
[==, JsDocToken, ., LC, ), {, Set, <, String, >, suppressions, =, new, HashSet, <, String, >, (, ), ;]
[), {, Set, <, String, >, suppressions, =, new, HashSet, <, String, >, (, ), ;, while, (, true, )]
[., LC, ), {, Set, <, String, >, suppressions, =, new, HashSet, <, String, >, (, ), ;, while, (]
[;, while, (, true, ), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream]
[), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, )]
[), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, suppressionNames, ., contains, (, name, )]
[), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, suppressionNames, ., contains, (, name]
[., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, suppressionNames, ., contains]
[;, if, (, !, suppressionNames, ., contains, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,]
[., getString, (, ), ;, if, (, !, suppressionNames, ., contains, (, name, ), ), {, parser, ., addParserWarning, (]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., contains, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, )]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[;, }, suppressions, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }]
[., addParserWarning, (, "msg.jsdoc.suppress.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;]
[,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, suppressions, ., add]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, suppressions, ., add, (, stream]
[,, stream, ., getCharno, (, ), ), ;, }, suppressions, ., add, (, stream, ., getString, (, ), ), ;]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, suppressions, ., add, (, stream, ., getString]
[), ;, }, suppressions, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;]
[., getCharno, (, ), ), ;, }, suppressions, ., add, (, stream, ., getString, (, ), ), ;, token, =]
[;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (]
[., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser]
[), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno]
[., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress"]
[=, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,]
[;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =, next, (, )]
[., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (]
[,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, )]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (]
[), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =, next, (]
[., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {]
[;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =, next, (, ), ;, }, else]
[), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (]
[), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match]
[., PIPE, ), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (]
[=, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC]
[;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), )]
[., addParserWarning, (, "msg.jsdoc.suppress", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, )]
[), ;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, )]
[., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, .]
[=, next, (, ), ;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (]
[;, if, (, !, jsdocBuilder, ., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, .]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordSuppressions, (, suppressions, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,, stream]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, ), {, if, (, token, ==]
[., addParserWarning, (, "msg.jsdoc.suppress.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, }, return, token, ;]
[,, stream, ., getCharno, (, ), ), ;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, }, return, token, ;, }, private]
[), ;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, ), {, if, (, token]
[., getCharno, (, ), ), ;, }, }, }, return, token, ;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, )]
[;, }, private, JsDocToken, parseModifiesTag, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {, Set]
[), {, Set, <, String, >, modifies, =, new, HashSet, <, String, >, (, ), ;, while, (, true, )]
[==, JsDocToken, ., LC, ), {, Set, <, String, >, modifies, =, new, HashSet, <, String, >, (, ), ;]
[), {, Set, <, String, >, modifies, =, new, HashSet, <, String, >, (, ), ;, while, (, true, )]
[., LC, ), {, Set, <, String, >, modifies, =, new, HashSet, <, String, >, (, ), ;, while, (]
[;, while, (, true, ), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream]
[), {, if, (, match, (, JsDocToken, ., STRING, ), ), {, String, name, =, stream, ., getString, (, )]
[), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, )]
[), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name]
[., STRING, ), ), {, String, name, =, stream, ., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains]
[;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {]
[., getString, (, ), ;, if, (, !, modifiesAnnotationKeywords, ., contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[&&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, .]
[&&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, .]
[., contains, (, name, ), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown"]
[), &&, !, jsdocBuilder, ., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[., hasParameter, (, name, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, )]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[;, }, modifies, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }]
[., addParserWarning, (, "msg.jsdoc.modifies.unknown", ,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;]
[,, name, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, modifies, ., add]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, modifies, ., add, (, stream]
[,, stream, ., getCharno, (, ), ), ;, }, modifies, ., add, (, stream, ., getString, (, ), ), ;]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, modifies, ., add, (, stream, ., getString]
[), ;, }, modifies, ., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;]
[., getCharno, (, ), ), ;, }, modifies, ., add, (, stream, ., getString, (, ), ), ;, token, =]
[;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (]
[., add, (, stream, ., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser]
[), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno]
[., getString, (, ), ), ;, token, =, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies"]
[=, next, (, ), ;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,]
[;, }, else, {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =, next, (, )]
[., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (]
[,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, )]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (]
[), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =, next, (]
[., getCharno, (, ), ), ;, return, token, ;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {]
[;, }, if, (, match, (, JsDocToken, ., PIPE, ), ), {, token, =, next, (, ), ;, }, else]
[), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (]
[), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match]
[., PIPE, ), ), {, token, =, next, (, ), ;, }, else, {, break, ;, }, }, if, (]
[=, next, (, ), ;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC]
[;, }, else, {, break, ;, }, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, parser]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[., RC, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno]
[;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), )]
[., addParserWarning, (, "msg.jsdoc.modifies", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next]
[,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, else, {, token, =, next, (, )]
[), ;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, )]
[., getCharno, (, ), ), ;, }, else, {, token, =, next, (, ), ;, if, (, !, jsdocBuilder, .]
[=, next, (, ), ;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (]
[;, if, (, !, jsdocBuilder, ., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, .]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[., recordModifies, (, modifies, ), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,, stream]
[), ), {, parser, ., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, )]
[;, }, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (, token]
[., addParserWarning, (, "msg.jsdoc.modifies.duplicate", ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, }, return, token, ;]
[,, stream, ., getCharno, (, ), ), ;, }, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, }, }, return, token, ;, }, private]
[), ;, }, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (]
[., getCharno, (, ), ), ;, }, }, }, return, token, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, )]
[;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ), {, return, parseAndRecordTypeNode, (, token, ,, token, ==, JsDocToken, ., LC]
[;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, stream, .]
[,, token, ==, JsDocToken, ., LC, ), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {]
[), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, stream]
[==, JsDocToken, ., LC, ), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode]
[), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token, ,, stream]
[., LC, ), ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, boolean, matchingLC, ), {, return, parseAndRecordTypeNode, (, token]
[;, }, private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {, return]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ,, matchingLC, ,, false, ), ;, }, private]
[,, stream, ., getCharno, (, ), ,, matchingLC, ,, false, ), ;, }, private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ,, matchingLC, ,, false, ), ;, }, private, Node, parseAndRecordTypeNameNode]
[,, matchingLC, ,, false, ), ;, }, private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,]
[., getCharno, (, ), ,, matchingLC, ,, false, ), ;, }, private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno]
[,, false, ), ;, }, private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC]
[), ;, }, private, Node, parseAndRecordTypeNameNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ), {]
[;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC, )]
[,, lineno, ,, startCharno, ,, matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions]
[,, startCharno, ,, matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument]
[,, matchingLC, ,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token]
[,, true, ), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken]
[), ;, }, private, Node, parseAndRecordParamTypeNode, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC]
[;, int, lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), ;, Node]
[., checkArgument, (, token, ==, JsDocToken, ., LC, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int]
[), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), ;]
[==, JsDocToken, ., LC, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, .]
[), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), ;]
[., LC, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (]
[;, int, startCharno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (]
[., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token]
[;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream]
[., getCharno, (, ), ;, Node, typeNode, =, parseParamTypeExpressionAnnotation, (, token, ), ;, if, (, typeNode, !=, null, ), {]
[;, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[), ;, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[!=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,]
[., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,]
[;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, true, ), ;, }, return]
[., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, true]
[;, }, return, typeNode, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean]
[., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, true, ), ;, }, return, typeNode, ;]
[,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, true, ), ;, }, return, typeNode, ;, }, private, Node, parseAndRecordTypeNode]
[,, startCharno, ,, endLineno, ,, endCharno, ,, true, ), ;, }, return, typeNode, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken]
[,, endLineno, ,, endCharno, ,, true, ), ;, }, return, typeNode, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,]
[,, endCharno, ,, true, ), ;, }, return, typeNode, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, int, lineno]
[,, true, ), ;, }, return, typeNode, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, int, lineno, ,, int]
[), ;, }, return, typeNode, ;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,]
[;, }, private, Node, parseAndRecordTypeNode, (, JsDocToken, token, ,, int, lineno, ,, int, startCharno, ,, boolean, matchingLC, ,, boolean, onlyParseSimpleNames]
[;, if, (, onlyParseSimpleNames, ), {, typeNode, =, parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (]
[), {, typeNode, =, parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }]
[=, parseTypeNameAnnotation, (, token, ), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (, typeNode]
[;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (, typeNode, !=, null, ), {, int]
[), ;, }, else, {, typeNode, =, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (, typeNode, !=, null, ), {]
[=, parseTypeExpressionAnnotation, (, token, ), ;, }, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno]
[;, }, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno]
[), ;, }, if, (, typeNode, !=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[!=, null, ), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (]
[), {, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,]
[., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,]
[;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, matchingLC, ), ;, }, return]
[., getCharno, (, ), ;, jsdocBuilder, ., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, matchingLC]
[;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {, case]
[., markTypeNode, (, typeNode, ,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, matchingLC, ), ;, }, return, typeNode, ;]
[,, lineno, ,, startCharno, ,, endLineno, ,, endCharno, ,, matchingLC, ), ;, }, return, typeNode, ;, }, private, String, toString]
[,, startCharno, ,, endLineno, ,, endCharno, ,, matchingLC, ), ;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken]
[,, endLineno, ,, endCharno, ,, matchingLC, ), ;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken, token, )]
[,, endCharno, ,, matchingLC, ), ;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch]
[,, matchingLC, ), ;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (, token]
[), ;, }, return, typeNode, ;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {]
[;, }, private, String, toString, (, JsDocToken, token, ), {, switch, (, token, ), {, case, ANNOTATION, :, return, "@"]
[), {, case, ANNOTATION, :, return, "@", +, stream, ., getString, (, ), ;, case, BANG, :, return, "!", ;]
[:, return, "@", +, stream, ., getString, (, ), ;, case, BANG, :, return, "!", ;, case, COMMA, :, return]
[;, case, BANG, :, return, "!", ;, case, COMMA, :, return, ",", ;, case, COLON, :, return, ":", ;, case]
[+, stream, ., getString, (, ), ;, case, BANG, :, return, "!", ;, case, COMMA, :, return, ",", ;, case]
[;, case, BANG, :, return, "!", ;, case, COMMA, :, return, ",", ;, case, COLON, :, return, ":", ;, case]
[., getString, (, ), ;, case, BANG, :, return, "!", ;, case, COMMA, :, return, ",", ;, case, COLON, :]
[:, return, "!", ;, case, COMMA, :, return, ",", ;, case, COLON, :, return, ":", ;, case, GT, :, return]
[;, case, COMMA, :, return, ",", ;, case, COLON, :, return, ":", ;, case, GT, :, return, ">", ;, case]
[:, return, ",", ;, case, COLON, :, return, ":", ;, case, GT, :, return, ">", ;, case, LB, :, return]
[;, case, COLON, :, return, ":", ;, case, GT, :, return, ">", ;, case, LB, :, return, "[", ;, case]
[:, return, ":", ;, case, GT, :, return, ">", ;, case, LB, :, return, "[", ;, case, LC, :, return]
[;, case, GT, :, return, ">", ;, case, LB, :, return, "[", ;, case, LC, :, return, "{", ;, case]
[:, return, ">", ;, case, LB, :, return, "[", ;, case, LC, :, return, "{", ;, case, LP, :, return]
[;, case, LB, :, return, "[", ;, case, LC, :, return, "{", ;, case, LP, :, return, "(", ;, case]
[:, return, "[", ;, case, LC, :, return, "{", ;, case, LP, :, return, "(", ;, case, LT, :, return]
[;, case, LC, :, return, "{", ;, case, LP, :, return, "(", ;, case, LT, :, return, ".<", ;, case]
[:, return, "{", ;, case, LP, :, return, "(", ;, case, LT, :, return, ".<", ;, case, QMARK, :, return]
[;, case, LP, :, return, "(", ;, case, LT, :, return, ".<", ;, case, QMARK, :, return, "?", ;, case]
[:, return, "(", ;, case, LT, :, return, ".<", ;, case, QMARK, :, return, "?", ;, case, PIPE, :, return]
[;, case, LT, :, return, ".<", ;, case, QMARK, :, return, "?", ;, case, PIPE, :, return, "|", ;, case]
[:, return, ".<", ;, case, QMARK, :, return, "?", ;, case, PIPE, :, return, "|", ;, case, RB, :, return]
[;, case, QMARK, :, return, "?", ;, case, PIPE, :, return, "|", ;, case, RB, :, return, "]", ;, case]
[:, return, "?", ;, case, PIPE, :, return, "|", ;, case, RB, :, return, "]", ;, case, RC, :, return]
[;, case, PIPE, :, return, "|", ;, case, RB, :, return, "]", ;, case, RC, :, return, "}", ;, case]
[:, return, "|", ;, case, RB, :, return, "]", ;, case, RC, :, return, "}", ;, case, RP, :, return]
[;, case, RB, :, return, "]", ;, case, RC, :, return, "}", ;, case, RP, :, return, ")", ;, case]
[:, return, "]", ;, case, RC, :, return, "}", ;, case, RP, :, return, ")", ;, case, STAR, :, return]
[;, case, RC, :, return, "}", ;, case, RP, :, return, ")", ;, case, STAR, :, return, "*", ;, case]
[:, return, "}", ;, case, RP, :, return, ")", ;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return]
[;, case, RP, :, return, ")", ;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case]
[:, return, ")", ;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return]
[;, case, STAR, :, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return, "=", ;, case]
[:, return, "*", ;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return, "=", ;, case, STRING, :, return]
[;, case, ELLIPSIS, :, return, "...", ;, case, EQUALS, :, return, "=", ;, case, STRING, :, return, stream, ., getString]
[:, return, "...", ;, case, EQUALS, :, return, "=", ;, case, STRING, :, return, stream, ., getString, (, ), ;]
[;, case, EQUALS, :, return, "=", ;, case, STRING, :, return, stream, ., getString, (, ), ;, default, :, throw]
[:, return, "=", ;, case, STRING, :, return, stream, ., getString, (, ), ;, default, :, throw, new, IllegalStateException, (]
[;, case, STRING, :, return, stream, ., getString, (, ), ;, default, :, throw, new, IllegalStateException, (, token, ., toString]
[:, return, stream, ., getString, (, ), ;, default, :, throw, new, IllegalStateException, (, token, ., toString, (, ), )]
[;, default, :, throw, new, IllegalStateException, (, token, ., toString, (, ), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (]
[., getString, (, ), ;, default, :, throw, new, IllegalStateException, (, token, ., toString, (, ), ), ;, }, }]
[;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==, null, ?, null, :, new, JSTypeExpression]
[), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==, null, ?, null, :, new]
[., toString, (, ), ), ;, }, }, private, JSTypeExpression, createJSTypeExpression, (, Node, n, ), {, return, n, ==, null]
[;, }, private, static, class, ExtractionInfo, {, private, final, String, string, ;, private, final, JsDocToken, token, ;, public, ExtractionInfo, (]
[?, null, :, new, JSTypeExpression, (, n, ,, getSourceName, (, ), ), ;, }, private, static, class, ExtractionInfo, {, private]
[==, null, ?, null, :, new, JSTypeExpression, (, n, ,, getSourceName, (, ), ), ;, }, private, static, class, ExtractionInfo]
[?, null, :, new, JSTypeExpression, (, n, ,, getSourceName, (, ), ), ;, }, private, static, class, ExtractionInfo, {, private]
[:, new, JSTypeExpression, (, n, ,, getSourceName, (, ), ), ;, }, private, static, class, ExtractionInfo, {, private, final, String]
[;, }, private, static, class, ExtractionInfo, {, private, final, String, string, ;, private, final, JsDocToken, token, ;, public, ExtractionInfo, (]
[,, getSourceName, (, ), ), ;, }, private, static, class, ExtractionInfo, {, private, final, String, string, ;, private, final, JsDocToken]
[), ;, }, private, static, class, ExtractionInfo, {, private, final, String, string, ;, private, final, JsDocToken, token, ;, public, ExtractionInfo]
[=, string, ;, this, ., token, =, token, ;, }, }, private, static, class, ExtendedTypeInfo, {, final, JSTypeExpression, type, ;]
[., string, =, string, ;, this, ., token, =, token, ;, }, }, private, static, class, ExtendedTypeInfo, {, final, JSTypeExpression]
[;, this, ., token, =, token, ;, }, }, private, static, class, ExtendedTypeInfo, {, final, JSTypeExpression, type, ;, final, int]
[=, token, ;, }, }, private, static, class, ExtendedTypeInfo, {, final, JSTypeExpression, type, ;, final, int, lineno, ;, final, int]
[., token, =, token, ;, }, }, private, static, class, ExtendedTypeInfo, {, final, JSTypeExpression, type, ;, final, int, lineno, ;]
[;, }, }, private, static, class, ExtendedTypeInfo, {, final, JSTypeExpression, type, ;, final, int, lineno, ;, final, int, charno, ;]
[=, type, ;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock]
[., type, =, type, ;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, }, private]
[;, this, ., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, )]
[=, lineno, ;, this, ., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream, ., update]
[., lineno, =, lineno, ;, this, ., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream]
[;, this, ., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream, ., update, (, )]
[=, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream, ., update, (, ), ;, int, lineno, =]
[., charno, =, charno, ;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream, ., update, (, ), ;, int]
[;, }, }, private, ExtractionInfo, extractSingleLineBlock, (, ), {, stream, ., update, (, ), ;, int, lineno, =, stream, .]
[;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), +, 1]
[., update, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno]
[;, int, charno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, )]
[., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =, stream]
[;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (, line, ., length, (]
[+, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (, line, .]
[., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;]
[;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (, line, ., length, (]
[;, if, (, line, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,]
[., trim, (, ), ;, if, (, line, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (]
[., getRemainingJSDocLine, (, ), ., trim, (, ), ;, if, (, line, ., length, (, ), >, 0, ), {]
[), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,, charno, +, line, ., length, (]
[>, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,, charno, +, line, .]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,]
[), {, jsdocBuilder, ., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,, charno, +, line, ., length, (]
[;, }, return, new, ExtractionInfo, (, line, ,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token]
[., markText, (, line, ,, lineno, ,, charno, ,, lineno, ,, charno, +, line, ., length, (, ), ), ;]
[,, lineno, ,, charno, ,, lineno, ,, charno, +, line, ., length, (, ), ), ;, }, return, new, ExtractionInfo]
[,, charno, ,, lineno, ,, charno, +, line, ., length, (, ), ), ;, }, return, new, ExtractionInfo, (, line]
[,, lineno, ,, charno, +, line, ., length, (, ), ), ;, }, return, new, ExtractionInfo, (, line, ,, next]
[,, charno, +, line, ., length, (, ), ), ;, }, return, new, ExtractionInfo, (, line, ,, next, (, )]
[), ;, }, return, new, ExtractionInfo, (, line, ,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken]
[+, line, ., length, (, ), ), ;, }, return, new, ExtractionInfo, (, line, ,, next, (, ), ), ;]
[), ;, }, return, new, ExtractionInfo, (, line, ,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken]
[., length, (, ), ), ;, }, return, new, ExtractionInfo, (, line, ,, next, (, ), ), ;, }, private]
[;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ), {, return, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., SINGLE_LINE, ), ;]
[,, next, (, ), ), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ), {, return, extractMultilineTextualBlock, (, token, ,]
[), ;, }, private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ), {, return, extractMultilineTextualBlock, (, token, ,, WhitespaceOption, ., SINGLE_LINE, )]
[;, }, private, enum, WhitespaceOption, {, PRESERVE, ,, TRIM, ,, SINGLE_LINE, }, @, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo, extractMultilineTextualBlock]
[,, WhitespaceOption, ., SINGLE_LINE, ), ;, }, private, enum, WhitespaceOption, {, PRESERVE, ,, TRIM, ,, SINGLE_LINE, }, @, SuppressWarnings, (]
[), ;, }, private, enum, WhitespaceOption, {, PRESERVE, ,, TRIM, ,, SINGLE_LINE, }, @, SuppressWarnings, (, "fallthrough", ), private, ExtractionInfo]
[., SINGLE_LINE, ), ;, }, private, enum, WhitespaceOption, {, PRESERVE, ,, TRIM, ,, SINGLE_LINE, }, @, SuppressWarnings, (, "fallthrough", )]
[private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||, token]
[), private, ExtractionInfo, extractMultilineTextualBlock, (, JsDocToken, token, ,, WhitespaceOption, option, ), {, if, (, token, ==, JsDocToken, ., EOC, ||]
[), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, ., update, (, ), ;, int, startLineno]
[||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, .]
[||, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,]
[==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new]
[||, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,]
[., EOC, ||, token, ==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (]
[||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, .]
[==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, )]
[||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, .]
[., EOL, ||, token, ==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }]
[), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, ., update, (, ), ;, int, startLineno]
[==, JsDocToken, ., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, ., update, (]
[), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, ., update, (, ), ;, int, startLineno]
[., EOF, ), {, return, new, ExtractionInfo, (, "", ,, token, ), ;, }, stream, ., update, (, ), ;]
[;, }, stream, ., update, (, ), ;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =]
[,, token, ), ;, }, stream, ., update, (, ), ;, int, startLineno, =, stream, ., getLineno, (, ), ;]
[), ;, }, stream, ., update, (, ), ;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno]
[;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), +, 1]
[., update, (, ), ;, int, startLineno, =, stream, ., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno]
[;, int, startCharno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, )]
[., getLineno, (, ), ;, int, startCharno, =, stream, ., getCharno, (, ), +, 1, ;, String, line, =, stream]
[;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line]
[+, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, )]
[., getCharno, (, ), +, 1, ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=]
[;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line]
[;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, line, ., trim, (, ), ;, }, StringBuilder]
[., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, line, ., trim, (]
[), {, line, =, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder]
[!=, WhitespaceOption, ., PRESERVE, ), {, line, =, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder]
[), {, line, =, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder]
[., PRESERVE, ), {, line, =, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, )]
[=, line, ., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder, ., append, (]
[;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder, ., append, (, line, ), ;, state, =, State]
[., trim, (, ), ;, }, StringBuilder, builder, =, new, StringBuilder, (, ), ;, builder, ., append, (, line, )]
[;, builder, ., append, (, line, ), ;, state, =, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;]
[;, state, =, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar]
[., append, (, line, ), ;, state, =, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar]
[), ;, state, =, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar, =, false, ;, int]
[=, State, ., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -]
[;, token, =, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -, 1, ;, do, {]
[., SEARCHING_ANNOTATION, ;, token, =, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -, 1, ;]
[=, next, (, ), ;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -, 1, ;, do, {, switch, (]
[;, boolean, ignoreStar, =, false, ;, int, lineStartChar, =, -, 1, ;, do, {, switch, (, token, ), {, case]
[;, int, lineStartChar, =, -, 1, ;, do, {, switch, (, token, ), {, case, STAR, :, if, (, ignoreStar]
[;, do, {, switch, (, token, ), {, case, STAR, :, if, (, ignoreStar, ), {, lineStartChar, =, stream, .]
[;, do, {, switch, (, token, ), {, case, STAR, :, if, (, ignoreStar, ), {, lineStartChar, =, stream, .]
[), {, case, STAR, :, if, (, ignoreStar, ), {, lineStartChar, =, stream, ., getCharno, (, ), +, 1, ;]
[:, if, (, ignoreStar, ), {, lineStartChar, =, stream, ., getCharno, (, ), +, 1, ;, }, else, {, if]
[), {, lineStartChar, =, stream, ., getCharno, (, ), +, 1, ;, }, else, {, if, (, builder, ., length]
[=, stream, ., getCharno, (, ), +, 1, ;, }, else, {, if, (, builder, ., length, (, ), >]
[;, }, else, {, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ']
[+, 1, ;, }, else, {, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append]
[., getCharno, (, ), +, 1, ;, }, else, {, if, (, builder, ., length, (, ), >, 0, )]
[;, }, else, {, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ']
[), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =]
[>, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (]
[), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =]
[;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL]
[., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, )]
[), ;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case]
[;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE]
[., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (]
[), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, if, (, option, !=, WhitespaceOption, .]
[=, next, (, ), ;, continue, ;, case, EOL, :, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {, builder]
[;, continue, ;, case, EOL, :, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (, "\n"]
[:, if, (, option, !=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =]
[), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =]
[!=, WhitespaceOption, ., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =]
[), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =]
[., SINGLE_LINE, ), {, builder, ., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;]
[;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :]
[., append, (, "\n", ), ;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =, next, (, )]
[), ;, }, ignoreStar, =, true, ;, lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default]
[=, true, ;, lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false]
[;, lineStartChar, =, 0, ;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state]
[=, 0, ;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State]
[;, token, =, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State, ., SEARCHING_ANNOTATION]
[=, next, (, ), ;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean]
[;, continue, ;, default, :, ignoreStar, =, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==]
[=, false, ;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (]
[;, state, =, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC]
[=, State, ., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {]
[;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=]
[., SEARCHING_ANNOTATION, ;, boolean, isEOC, =, token, ==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (]
[;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, )]
[==, JsDocToken, ., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==]
[;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, )]
[., EOC, ;, if, (, !, isEOC, ), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, .]
[), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream]
[), {, if, (, lineStartChar, !=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream]
[), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;]
[&&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for]
[!=, -, 1, &&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -]
[&&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for]
[&&, option, ==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for]
[), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;]
[==, WhitespaceOption, ., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int]
[), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;]
[., PRESERVE, ), {, int, numSpaces, =, stream, ., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;, i, ++, ), {, builder, ., append, (]
[-, lineStartChar, ;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;, i, ++, ), {, builder, .]
[., getCharno, (, ), -, lineStartChar, ;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, numSpaces, ;, i, ++, ), {, builder, ., append, (]
[;, i, <, numSpaces, ;, i, ++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -]
[;, i, ++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else]
[<, numSpaces, ;, i, ++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;]
[;, i, ++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else]
[), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (, builder]
[++, ), {, builder, ., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (]
[;, }, lineStartChar, =, -, 1, ;, }, else, if, (, builder, ., length, (, ), >, 0, ), {]
[., append, (, ' ', ), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (, builder, ., length, (]
[), ;, }, lineStartChar, =, -, 1, ;, }, else, if, (, builder, ., length, (, ), >, 0, )]
[=, -, 1, ;, }, else, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append]
[;, }, else, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', )]
[;, }, else, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', )]
[), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token]
[>, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token]
[), {, builder, ., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token]
[;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==]
[., append, (, ' ', ), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, .]
[), ;, }, }, if, (, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token]
[), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {]
[||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder]
[||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, )]
[==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=]
[||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, )]
[., EOC, ||, token, ==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, .]
[||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder]
[==, JsDocToken, ., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {]
[||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder]
[., EOF, ||, (, token, ==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText]
[), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {]
[), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, )]
[&&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (]
[==, JsDocToken, ., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (]
[&&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (]
[., ANNOTATION, &&, option, !=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;]
[), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, )]
[!=, WhitespaceOption, ., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=]
[), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, )]
[., PRESERVE, ), ), {, String, multilineText, =, builder, ., toString, (, ), ;, if, (, option, !=, WhitespaceOption, .]
[;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, multilineText, =, multilineText, ., trim, (, ), ;, }, int]
[., toString, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, multilineText, =, multilineText, ., trim, (]
[), {, multilineText, =, multilineText, ., trim, (, ), ;, }, int, endLineno, =, stream, ., getLineno, (, ), ;]
[!=, WhitespaceOption, ., PRESERVE, ), {, multilineText, =, multilineText, ., trim, (, ), ;, }, int, endLineno, =, stream, .]
[), {, multilineText, =, multilineText, ., trim, (, ), ;, }, int, endLineno, =, stream, ., getLineno, (, ), ;]
[., PRESERVE, ), {, multilineText, =, multilineText, ., trim, (, ), ;, }, int, endLineno, =, stream, ., getLineno, (]
[=, multilineText, ., trim, (, ), ;, }, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =]
[;, }, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;]
[., trim, (, ), ;, }, int, endLineno, =, stream, ., getLineno, (, ), ;, int, endCharno, =, stream, .]
[;, int, endCharno, =, stream, ., getCharno, (, ), ;, if, (, multilineText, ., length, (, ), >, 0, )]
[., getLineno, (, ), ;, int, endCharno, =, stream, ., getCharno, (, ), ;, if, (, multilineText, ., length, (]
[;, if, (, multilineText, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,]
[., getCharno, (, ), ;, if, (, multilineText, ., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (]
[), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new]
[>, 0, ), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }]
[., length, (, ), >, 0, ), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,]
[), {, jsdocBuilder, ., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new]
[;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (, toString, (, token, )]
[., markText, (, multilineText, ,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText]
[,, startLineno, ,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;]
[,, startCharno, ,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder]
[,, endLineno, ,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append]
[,, endCharno, ), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (, toString]
[), ;, }, return, new, ExtractionInfo, (, multilineText, ,, token, ), ;, }, builder, ., append, (, toString, (, token]
[;, }, builder, ., append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;]
[,, token, ), ;, }, builder, ., append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine]
[), ;, }, builder, ., append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine, (, )]
[;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =]
[., append, (, toString, (, token, ), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option]
[), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line]
[), ), ;, line, =, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {]
[=, stream, ., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (]
[;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }, builder, .]
[., getRemainingJSDocLine, (, ), ;, if, (, option, !=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (, line, )]
[), {, line, =, trimEnd, (, line, ), ;, }, builder, ., append, (, line, ), ;, token, =, next]
[!=, WhitespaceOption, ., PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }, builder, ., append, (, line, )]
[), {, line, =, trimEnd, (, line, ), ;, }, builder, ., append, (, line, ), ;, token, =, next]
[., PRESERVE, ), {, line, =, trimEnd, (, line, ), ;, }, builder, ., append, (, line, ), ;, token]
[=, trimEnd, (, line, ), ;, }, builder, ., append, (, line, ), ;, token, =, next, (, ), ;]
[;, }, builder, ., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (, true]
[), ;, }, builder, ., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (]
[;, token, =, next, (, ), ;, }, }, while, (, true, ), ;, }, private, ExtractionInfo, extractBlockComment, (, JsDocToken]
[., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (, true, ), ;, }]
[), ;, token, =, next, (, ), ;, }, }, while, (, true, ), ;, }, private, ExtractionInfo, extractBlockComment, (]
[=, next, (, ), ;, }, }, while, (, true, ), ;, }, private, ExtractionInfo, extractBlockComment, (, JsDocToken, token, )]
[;, }, }, while, (, true, ), ;, }, private, ExtractionInfo, extractBlockComment, (, JsDocToken, token, ), {, StringBuilder, builder, =]
[), ;, }, private, ExtractionInfo, extractBlockComment, (, JsDocToken, token, ), {, StringBuilder, builder, =, new, StringBuilder, (, ), ;, boolean]
[;, boolean, ignoreStar, =, true, ;, do, {, switch, (, token, ), {, case, ANNOTATION, :, case, EOC, :, case]
[;, do, {, switch, (, token, ), {, case, ANNOTATION, :, case, EOC, :, case, EOF, :, return, new, ExtractionInfo]
[), {, case, ANNOTATION, :, case, EOC, :, case, EOF, :, return, new, ExtractionInfo, (, builder, ., toString, (, )]
[:, case, EOC, :, case, EOF, :, return, new, ExtractionInfo, (, builder, ., toString, (, ), ., trim, (, )]
[:, case, EOF, :, return, new, ExtractionInfo, (, builder, ., toString, (, ), ., trim, (, ), ,, token, )]
[:, return, new, ExtractionInfo, (, builder, ., toString, (, ), ., trim, (, ), ,, token, ), ;, case, STAR]
[;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (, builder, ., length, (, ), >, 0, )]
[,, token, ), ;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (, builder, ., length, (, )]
[., trim, (, ), ,, token, ), ;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (, builder]
[., toString, (, ), ., trim, (, ), ,, token, ), ;, case, STAR, :, if, (, !, ignoreStar, )]
[), ;, case, STAR, :, if, (, !, ignoreStar, ), {, if, (, builder, ., length, (, ), >, 0]
[:, if, (, !, ignoreStar, ), {, if, (, builder, ., length, (, ), >, 0, ), {, builder, .]
[), {, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;]
[), {, if, (, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;]
[), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =]
[>, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (]
[), {, builder, ., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =]
[;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL]
[., append, (, ' ', ), ;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, )]
[), ;, }, builder, ., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case]
[;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;, builder, ., append]
[., append, (, '*', ), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =]
[), ;, }, token, =, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;, builder, .]
[=, next, (, ), ;, continue, ;, case, EOL, :, ignoreStar, =, true, ;, builder, ., append, (, '\n', )]
[;, continue, ;, case, EOL, :, ignoreStar, =, true, ;, builder, ., append, (, '\n', ), ;, token, =, next]
[:, ignoreStar, =, true, ;, builder, ., append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;]
[=, true, ;, builder, ., append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :]
[;, builder, ., append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (]
[;, token, =, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar, &&, builder, ., length, (]
[., append, (, '\n', ), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar]
[), ;, token, =, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar, &&, builder, ., length]
[=, next, (, ), ;, continue, ;, default, :, if, (, !, ignoreStar, &&, builder, ., length, (, ), >]
[;, continue, ;, default, :, if, (, !, ignoreStar, &&, builder, ., length, (, ), >, 0, ), {, builder]
[), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (]
[&&, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =]
[&&, builder, ., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =]
[), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (]
[>, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;, builder, ., append, (]
[., length, (, ), >, 0, ), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;]
[), {, builder, ., append, (, ' ', ), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (]
[;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (, token, ), ), ;, String, line, =, stream]
[., append, (, ' ', ), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (, token, ), )]
[), ;, }, ignoreStar, =, false, ;, builder, ., append, (, toString, (, token, ), ), ;, String, line, =]
[=, false, ;, builder, ., append, (, toString, (, token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (]
[;, builder, ., append, (, toString, (, token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;]
[;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;, builder, ., append]
[., append, (, toString, (, token, ), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =]
[), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;, builder, .]
[), ), ;, String, line, =, stream, ., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;, builder]
[;, line, =, trimEnd, (, line, ), ;, builder, ., append, (, line, ), ;, token, =, next, (, )]
[., getRemainingJSDocLine, (, ), ;, line, =, trimEnd, (, line, ), ;, builder, ., append, (, line, ), ;, token]
[=, trimEnd, (, line, ), ;, builder, ., append, (, line, ), ;, token, =, next, (, ), ;, }]
[;, builder, ., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (, true, )]
[), ;, builder, ., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (, true]
[;, token, =, next, (, ), ;, }, }, while, (, true, ), ;, }, private, static, String, trimEnd, (]
[., append, (, line, ), ;, token, =, next, (, ), ;, }, }, while, (, true, ), ;, }]
[), ;, token, =, next, (, ), ;, }, }, while, (, true, ), ;, }, private, static, String, trimEnd]
[=, next, (, ), ;, }, }, while, (, true, ), ;, }, private, static, String, trimEnd, (, String, s]
[;, }, }, while, (, true, ), ;, }, private, static, String, trimEnd, (, String, s, ), {, int, trimCount]
[), ;, }, private, static, String, trimEnd, (, String, s, ), {, int, trimCount, =, 0, ;, while, (, trimCount]
[;, while, (, trimCount, <, s, ., length, (, ), ), {, char, ch, =, s, ., charAt, (, s]
[), {, char, ch, =, s, ., charAt, (, s, ., length, (, ), -, trimCount, -, 1, ), ;]
[<, s, ., length, (, ), ), {, char, ch, =, s, ., charAt, (, s, ., length, (, )]
[), {, char, ch, =, s, ., charAt, (, s, ., length, (, ), -, trimCount, -, 1, ), ;]
[., length, (, ), ), {, char, ch, =, s, ., charAt, (, s, ., length, (, ), -, trimCount]
[;, if, (, Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {, break, ;, }]
[., charAt, (, s, ., length, (, ), -, trimCount, -, 1, ), ;, if, (, Character, ., isWhitespace, (]
[), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {, break, ;]
[-, 1, ), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {]
[-, trimCount, -, 1, ), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }]
[., length, (, ), -, trimCount, -, 1, ), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {]
[-, 1, ), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {]
[), ;, if, (, Character, ., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {, break, ;]
[), {, trimCount, ++, ;, }, else, {, break, ;, }, }, if, (, trimCount, ==, 0, ), {, return]
[., isWhitespace, (, ch, ), ), {, trimCount, ++, ;, }, else, {, break, ;, }, }, if, (, trimCount]
[), ), {, trimCount, ++, ;, }, else, {, break, ;, }, }, if, (, trimCount, ==, 0, ), {]
[;, }, else, {, break, ;, }, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }, return]
[++, ;, }, else, {, break, ;, }, }, if, (, trimCount, ==, 0, ), {, return, s, ;, }]
[), {, return, s, ;, }, return, s, ., substring, (, 0, ,, s, ., length, (, ), -, trimCount]
[==, 0, ), {, return, s, ;, }, return, s, ., substring, (, 0, ,, s, ., length, (, )]
[), {, return, s, ;, }, return, s, ., substring, (, 0, ,, s, ., length, (, ), -, trimCount]
[;, }, return, s, ., substring, (, 0, ,, s, ., length, (, ), -, trimCount, ), ;, }, private]
[;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs]
[., substring, (, 0, ,, s, ., length, (, ), -, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken]
[,, s, ., length, (, ), -, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if]
[), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {]
[-, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC]
[., length, (, ), -, trimCount, ), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token]
[), ;, }, private, Node, parseTypeExpressionAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {]
[), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeNode, !=]
[==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;]
[), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeNode, !=]
[., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (]
[;, Node, typeNode, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (]
[;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC]
[), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc"]
[!=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc"]
[;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }]
[), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;]
[., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return]
[;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return, parseTypeExpression, (, token]
[), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return, parseTypeExpression, (]
[;, }, }, return, typeNode, ;, }, else, {, return, parseTypeExpression, (, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation]
[;, }, else, {, return, parseTypeExpression, (, token, ), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {]
[;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, ., LC]
[), ;, }, }, private, Node, parseParamTypeExpressionAnnotation, (, JsDocToken, token, ), {, Preconditions, ., checkArgument, (, token, ==, JsDocToken, .]
[;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (, token, ==]
[., checkArgument, (, token, ==, JsDocToken, ., LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token]
[), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (, token]
[==, JsDocToken, ., LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, )]
[), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (, token]
[., LC, ), ;, skipEOLs, (, ), ;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if]
[;, boolean, restArg, =, false, ;, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., ELLIPSIS, )]
[;, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (]
[=, next, (, ), ;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (, ), ;]
[;, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (, token, ==]
[), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (]
[==, JsDocToken, ., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, )]
[), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (]
[., ELLIPSIS, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return]
[=, next, (, ), ;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS]
[;, if, (, token, ==, JsDocToken, ., RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS, ,, IR, ., empty]
[), {, return, wrapNode, (, Token, ., ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }, restArg, =, true]
[==, JsDocToken, ., RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS, ,, IR, ., empty, (, ), ), ;]
[), {, return, wrapNode, (, Token, ., ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }, restArg, =, true]
[., RC, ), {, return, wrapNode, (, Token, ., ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }, restArg]
[;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeNode, !=, null]
[,, IR, ., empty, (, ), ), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token]
[., ELLIPSIS, ,, IR, ., empty, (, ), ), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression]
[), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeNode, !=]
[., empty, (, ), ), ;, }, restArg, =, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;]
[=, true, ;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeNode, !=, null, ), {, skipEOLs]
[;, }, Node, typeNode, =, parseTopLevelTypeExpression, (, token, ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, )]
[;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =, wrapNode]
[), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =]
[), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode]
[!=, null, ), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS]
[), {, skipEOLs, (, ), ;, if, (, restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode]
[;, if, (, restArg, ), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode, ), ;, }, else, if]
[), {, typeNode, =, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode, ), ;, }, else, if, (, match, (, JsDocToken]
[=, wrapNode, (, Token, ., ELLIPSIS, ,, typeNode, ), ;, }, else, if, (, match, (, JsDocToken, ., EQUALS, )]
[;, }, else, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;, skipEOLs, (, )]
[,, typeNode, ), ;, }, else, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;]
[., ELLIPSIS, ,, typeNode, ), ;, }, else, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, next, (]
[), ;, }, else, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, next, (, ), ;, skipEOLs, (]
[), {, next, (, ), ;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode, )]
[), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode]
[., EQUALS, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS]
[;, skipEOLs, (, ), ;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (, !]
[;, typeNode, =, wrapNode, (, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (, !, match, (, JsDocToken, .]
[=, wrapNode, (, Token, ., EQUALS, ,, typeNode, ), ;, }, if, (, !, match, (, JsDocToken, ., RC, )]
[;, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else]
[,, typeNode, ), ;, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", )]
[., EQUALS, ,, typeNode, ), ;, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (]
[), ;, }, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }]
[), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;]
[., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return]
[;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token]
[), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken]
[;, }, }, return, typeNode, ;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken]
[;, }, private, Node, parseTypeNameAnnotation, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs]
[), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (, typeNode, !=]
[==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;]
[), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (, typeNode, !=]
[., LC, ), {, skipEOLs, (, ), ;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (]
[;, Node, typeNode, =, parseTypeName, (, next, (, ), ), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (]
[;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC]
[), ;, if, (, typeNode, !=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc"]
[!=, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc"]
[;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }]
[), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }]
[), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;]
[., RC, ), ), {, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, else, {, next, (, ), ;, }, }, return]
[;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return, parseTypeName, (, token]
[), ;, }, else, {, next, (, ), ;, }, }, return, typeNode, ;, }, else, {, return, parseTypeName, (]
[;, }, }, return, typeNode, ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, private, Node, parseTopLevelTypeExpression]
[;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {]
[;, }, }, private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTypeExpression, (, token, ), ;, if]
[), ;, }, }, private, Node, parseTopLevelTypeExpression, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTypeExpression, (, token, ), ;]
[;, if, (, typeExpr, !=, null, ), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (]
[), ;, if, (, typeExpr, !=, null, ), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next]
[), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, if, (, match, (]
[!=, null, ), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, if, (]
[), {, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, if, (, match, (]
[), {, next, (, ), ;, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;]
[), ), {, next, (, ), ;, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, )]
[., PIPE, ), ), {, next, (, ), ;, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next]
[;, if, (, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;]
[), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, return, parseUnionTypeWithAlternate, (]
[), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, return, parseUnionTypeWithAlternate]
[., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, return, parseUnionTypeWithAlternate, (, token, ,, typeExpr, ), ;]
[;, token, =, next, (, ), ;, return, parseUnionTypeWithAlternate, (, token, ,, typeExpr, ), ;, }, }, return, typeExpr, ;]
[=, next, (, ), ;, return, parseUnionTypeWithAlternate, (, token, ,, typeExpr, ), ;, }, }, return, typeExpr, ;, }, private]
[;, return, parseUnionTypeWithAlternate, (, token, ,, typeExpr, ), ;, }, }, return, typeExpr, ;, }, private, Node, parseTypeExpressionList, (, JsDocToken]
[;, }, }, return, typeExpr, ;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression, (]
[,, typeExpr, ), ;, }, }, return, typeExpr, ;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr]
[), ;, }, }, return, typeExpr, ;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression]
[;, }, private, Node, parseTypeExpressionList, (, JsDocToken, token, ), {, Node, typeExpr, =, parseTopLevelTypeExpression, (, token, ), ;, if, (]
[;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, Node, typeList, =, IR, ., block, (, )]
[), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, Node, typeList, =, IR, ., block, (]
[), {, return, null, ;, }, Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack, (, typeExpr]
[==, null, ), {, return, null, ;, }, Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack]
[), {, return, null, ;, }, Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack, (, typeExpr]
[;, }, Node, typeList, =, IR, ., block, (, ), ;, typeList, ., addChildToBack, (, typeExpr, ), ;, while, (]
[;, typeList, ., addChildToBack, (, typeExpr, ), ;, while, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (]
[., block, (, ), ;, typeList, ., addChildToBack, (, typeExpr, ), ;, while, (, match, (, JsDocToken, ., COMMA, )]
[;, while, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeExpr]
[., addChildToBack, (, typeExpr, ), ;, while, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;]
[), ;, while, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[), {, next, (, ), ;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if]
[), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;]
[., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, )]
[;, skipEOLs, (, ), ;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeExpr, ==, null, )]
[;, typeExpr, =, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeExpr, ==, null, ), {, return, null, ;]
[=, parseTopLevelTypeExpression, (, next, (, ), ), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, typeList]
[;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, typeList, ., addChildToBack, (, typeExpr, ), ;, }]
[), ;, if, (, typeExpr, ==, null, ), {, return, null, ;, }, typeList, ., addChildToBack, (, typeExpr, ), ;]
[), {, return, null, ;, }, typeList, ., addChildToBack, (, typeExpr, ), ;, }, return, typeList, ;, }, private, Node]
[==, null, ), {, return, null, ;, }, typeList, ., addChildToBack, (, typeExpr, ), ;, }, return, typeList, ;, }]
[), {, return, null, ;, }, typeList, ., addChildToBack, (, typeExpr, ), ;, }, return, typeList, ;, }, private, Node]
[;, }, typeList, ., addChildToBack, (, typeExpr, ), ;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token]
[;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, .]
[., addChildToBack, (, typeExpr, ), ;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if]
[), ;, }, return, typeList, ;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken]
[;, }, private, Node, parseTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., QMARK, ), {, token]
[), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, .]
[==, JsDocToken, ., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||]
[), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, .]
[., QMARK, ), {, token, =, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==]
[=, next, (, ), ;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token]
[;, if, (, token, ==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB]
[), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (, Token]
[||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, )]
[||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return]
[||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {]
[||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token]
[||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token]
[||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token]
[==, JsDocToken, ., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken]
[||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token]
[., COMMA, ||, token, ==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC]
[||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token]
[==, JsDocToken, ., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken]
[||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token]
[., EQUALS, ||, token, ==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP]
[||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token]
[==, JsDocToken, ., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken]
[||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token]
[., RB, ||, token, ==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE]
[||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {]
[==, JsDocToken, ., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken]
[||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {]
[., RC, ||, token, ==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT]
[||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return]
[==, JsDocToken, ., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (]
[||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return]
[., RP, ||, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, )]
[||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, )]
[==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (]
[||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, )]
[., PIPE, ||, token, ==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, .]
[), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (, Token]
[==, JsDocToken, ., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }]
[), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (, Token]
[., GT, ), {, restoreLookAhead, (, token, ), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode]
[;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token]
[), ;, return, newNode, (, Token, ., QMARK, ), ;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (]
[;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token]
[), ;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (]
[., QMARK, ), ;, }, return, wrapNode, (, Token, ., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else]
[;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode, (, Token, ., BANG, ,, parseBasicTypeExpression]
[,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode]
[., QMARK, ,, parseBasicTypeExpression, (, token, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {]
[), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode, (, Token, ., BANG, ,]
[), ), ;, }, else, if, (, token, ==, JsDocToken, ., BANG, ), {, return, wrapNode, (, Token, ., BANG]
[), {, return, wrapNode, (, Token, ., BANG, ,, parseBasicTypeExpression, (, next, (, ), ), ), ;, }, else, {]
[==, JsDocToken, ., BANG, ), {, return, wrapNode, (, Token, ., BANG, ,, parseBasicTypeExpression, (, next, (, ), ), )]
[), {, return, wrapNode, (, Token, ., BANG, ,, parseBasicTypeExpression, (, next, (, ), ), ), ;, }, else, {]
[., BANG, ), {, return, wrapNode, (, Token, ., BANG, ,, parseBasicTypeExpression, (, next, (, ), ), ), ;, }]
[;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (, basicTypeExpr, !=, null, ), {, if]
[,, parseBasicTypeExpression, (, next, (, ), ), ), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;]
[., BANG, ,, parseBasicTypeExpression, (, next, (, ), ), ), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token]
[), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (, basicTypeExpr, !=, null, ), {]
[), ), ;, }, else, {, Node, basicTypeExpr, =, parseBasicTypeExpression, (, token, ), ;, if, (, basicTypeExpr, !=, null, )]
[;, if, (, basicTypeExpr, !=, null, ), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next, (]
[), ;, if, (, basicTypeExpr, !=, null, ), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next]
[), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next, (, ), ;, return, wrapNode, (, Token]
[!=, null, ), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next, (, ), ;, return, wrapNode]
[), {, if, (, match, (, JsDocToken, ., QMARK, ), ), {, next, (, ), ;, return, wrapNode, (, Token]
[), {, next, (, ), ;, return, wrapNode, (, Token, ., QMARK, ,, basicTypeExpr, ), ;, }, else, if, (]
[), ), {, next, (, ), ;, return, wrapNode, (, Token, ., QMARK, ,, basicTypeExpr, ), ;, }, else, if]
[., QMARK, ), ), {, next, (, ), ;, return, wrapNode, (, Token, ., QMARK, ,, basicTypeExpr, ), ;, }]
[;, return, wrapNode, (, Token, ., QMARK, ,, basicTypeExpr, ), ;, }, else, if, (, match, (, JsDocToken, ., BANG]
[;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {, next, (, ), ;, return, wrapNode, (]
[,, basicTypeExpr, ), ;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {, next, (, ), ;]
[., QMARK, ,, basicTypeExpr, ), ;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {, next, (]
[), ;, }, else, if, (, match, (, JsDocToken, ., BANG, ), ), {, next, (, ), ;, return, wrapNode]
[), {, next, (, ), ;, return, wrapNode, (, Token, ., BANG, ,, basicTypeExpr, ), ;, }, }, return, basicTypeExpr]
[), ), {, next, (, ), ;, return, wrapNode, (, Token, ., BANG, ,, basicTypeExpr, ), ;, }, }, return]
[., BANG, ), ), {, next, (, ), ;, return, wrapNode, (, Token, ., BANG, ,, basicTypeExpr, ), ;, }]
[;, return, wrapNode, (, Token, ., BANG, ,, basicTypeExpr, ), ;, }, }, return, basicTypeExpr, ;, }, }, private, Node]
[;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==]
[,, basicTypeExpr, ), ;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if]
[., BANG, ,, basicTypeExpr, ), ;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, )]
[), ;, }, }, return, basicTypeExpr, ;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token]
[;, }, }, private, Node, parseBasicTypeExpression, (, JsDocToken, token, ), {, if, (, token, ==, JsDocToken, ., STAR, ), {]
[), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (, token, ==, JsDocToken, ., LB, )]
[==, JsDocToken, ., STAR, ), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (, token, ==]
[), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (, token, ==, JsDocToken, ., LB, )]
[., STAR, ), {, return, newNode, (, Token, ., STAR, ), ;, }, else, if, (, token, ==, JsDocToken, .]
[;, }, else, if, (, token, ==, JsDocToken, ., LB, ), {, skipEOLs, (, ), ;, return, parseArrayType, (, next]
[), ;, }, else, if, (, token, ==, JsDocToken, ., LB, ), {, skipEOLs, (, ), ;, return, parseArrayType, (]
[., STAR, ), ;, }, else, if, (, token, ==, JsDocToken, ., LB, ), {, skipEOLs, (, ), ;, return]
[), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[==, JsDocToken, ., LB, ), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else]
[), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[., LB, ), {, skipEOLs, (, ), ;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (]
[;, return, parseArrayType, (, next, (, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., LC, ), {]
[;, }, else, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, return, parseRecordType, (, next]
[), ;, }, else, if, (, token, ==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, return, parseRecordType, (]
[), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[==, JsDocToken, ., LC, ), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else]
[), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[., LC, ), {, skipEOLs, (, ), ;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (]
[;, return, parseRecordType, (, next, (, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., LP, ), {]
[;, }, else, if, (, token, ==, JsDocToken, ., LP, ), {, skipEOLs, (, ), ;, return, parseUnionType, (, next]
[), ;, }, else, if, (, token, ==, JsDocToken, ., LP, ), {, skipEOLs, (, ), ;, return, parseUnionType, (]
[), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[==, JsDocToken, ., LP, ), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else]
[), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (, token, ==]
[., LP, ), {, skipEOLs, (, ), ;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (]
[;, return, parseUnionType, (, next, (, ), ), ;, }, else, if, (, token, ==, JsDocToken, ., STRING, ), {]
[;, }, else, if, (, token, ==, JsDocToken, ., STRING, ), {, String, string, =, stream, ., getString, (, )]
[), ;, }, else, if, (, token, ==, JsDocToken, ., STRING, ), {, String, string, =, stream, ., getString, (]
[), {, String, string, =, stream, ., getString, (, ), ;, if, (, "function", ., equals, (, string, ), )]
[==, JsDocToken, ., STRING, ), {, String, string, =, stream, ., getString, (, ), ;, if, (, "function", ., equals]
[), {, String, string, =, stream, ., getString, (, ), ;, if, (, "function", ., equals, (, string, ), )]
[., STRING, ), {, String, string, =, stream, ., getString, (, ), ;, if, (, "function", ., equals, (, string]
[;, if, (, "function", ., equals, (, string, ), ), {, skipEOLs, (, ), ;, return, parseFunctionType, (, next, (]
[., getString, (, ), ;, if, (, "function", ., equals, (, string, ), ), {, skipEOLs, (, ), ;, return]
[), {, skipEOLs, (, ), ;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (, "null", .]
[., equals, (, string, ), ), {, skipEOLs, (, ), ;, return, parseFunctionType, (, next, (, ), ), ;, }]
[), ), {, skipEOLs, (, ), ;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (, "null"]
[;, return, parseFunctionType, (, next, (, ), ), ;, }, else, if, (, "null", ., equals, (, string, ), ||]
[;, }, else, if, (, "null", ., equals, (, string, ), ||, "undefined", ., equals, (, string, ), ), {]
[), ;, }, else, if, (, "null", ., equals, (, string, ), ||, "undefined", ., equals, (, string, ), )]
[), {, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, restoreLookAhead]
[||, "undefined", ., equals, (, string, ), ), {, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName]
[., equals, (, string, ), ||, "undefined", ., equals, (, string, ), ), {, return, newStringNode, (, string, ), ;]
[), ||, "undefined", ., equals, (, string, ), ), {, return, newStringNode, (, string, ), ;, }, else, {, return]
[), {, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, restoreLookAhead]
[., equals, (, string, ), ), {, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName, (, token]
[), ), {, return, newStringNode, (, string, ), ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }]
[;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, restoreLookAhead, (, token, ), ;, return, reportGenericTypeSyntaxWarning, (]
[), ;, }, else, {, return, parseTypeName, (, token, ), ;, }, }, restoreLookAhead, (, token, ), ;, return, reportGenericTypeSyntaxWarning]
[;, }, }, restoreLookAhead, (, token, ), ;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken, token]
[), ;, }, }, restoreLookAhead, (, token, ), ;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken]
[;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (, token, !=, JsDocToken]
[), ;, return, reportGenericTypeSyntaxWarning, (, ), ;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (, token, !=]
[;, }, private, Node, parseTypeName, (, JsDocToken, token, ), {, if, (, token, !=, JsDocToken, ., STRING, ), {, return]
[), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =, stream, ., getString, (, ), ;, int, lineno, =]
[!=, JsDocToken, ., STRING, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =, stream, ., getString, (, )]
[), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =, stream, ., getString, (, ), ;, int, lineno, =]
[., STRING, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, String, typeName, =, stream, ., getString, (, ), ;, int]
[;, }, String, typeName, =, stream, ., getString, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;]
[;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), ;, while]
[., getString, (, ), ;, int, lineno, =, stream, ., getLineno, (, ), ;, int, charno, =, stream, ., getCharno]
[;, int, charno, =, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&, typeName]
[., getLineno, (, ), ;, int, charno, =, stream, ., getCharno, (, ), ;, while, (, match, (, JsDocToken, .]
[;, while, (, match, (, JsDocToken, ., EOL, ), &&, typeName, ., charAt, (, typeName, ., length, (, ), -]
[., getCharno, (, ), ;, while, (, match, (, JsDocToken, ., EOL, ), &&, typeName, ., charAt, (, typeName, .]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (, ), ;]
[&&, typeName, ., charAt, (, typeName, ., length, (, ), -, 1, ), ==, '.', ), {, skipEOLs, (, )]
[), &&, typeName, ., charAt, (, typeName, ., length, (, ), -, 1, ), ==, '.', ), {, skipEOLs, (]
[., EOL, ), &&, typeName, ., charAt, (, typeName, ., length, (, ), -, 1, ), ==, '.', ), {]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (, ), ;]
[==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (]
[., charAt, (, typeName, ., length, (, ), -, 1, ), ==, '.', ), {, skipEOLs, (, ), ;, if]
[), ==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next]
[-, 1, ), ==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), )]
[., length, (, ), -, 1, ), ==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken]
[), ==, '.', ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (, ), ;]
[;, if, (, match, (, JsDocToken, ., STRING, ), ), {, next, (, ), ;, typeName, +=, stream, ., getString]
[), {, next, (, ), ;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode]
[), ), {, next, (, ), ;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =]
[., STRING, ), ), {, next, (, ), ;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node]
[;, typeName, +=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,]
[+=, stream, ., getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,, charno, )]
[;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,, charno, ), ;, if, (, match, (, JsDocToken]
[., getString, (, ), ;, }, }, Node, typeNameNode, =, newStringNode, (, typeName, ,, lineno, ,, charno, ), ;, if]
[;, if, (, match, (, JsDocToken, ., LT, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node]
[,, lineno, ,, charno, ), ;, if, (, match, (, JsDocToken, ., LT, ), ), {, next, (, ), ;]
[,, charno, ), ;, if, (, match, (, JsDocToken, ., LT, ), ), {, next, (, ), ;, skipEOLs, (]
[), ;, if, (, match, (, JsDocToken, ., LT, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[), {, next, (, ), ;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;]
[), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), )]
[., LT, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (]
[;, skipEOLs, (, ), ;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (, memberType, !=, null]
[;, Node, memberType, =, parseTypeExpressionList, (, next, (, ), ), ;, if, (, memberType, !=, null, ), {, typeNameNode, .]
[;, if, (, memberType, !=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if]
[), ;, if, (, memberType, !=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;]
[), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[!=, null, ), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[), {, typeNameNode, ., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., GT, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt"]
[., addChildToFront, (, memberType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., GT, ), )]
[), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., GT, ), ), {, return, reportTypeSyntaxWarning, (]
[;, if, (, !, match, (, JsDocToken, ., GT, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt", ), ;, }, next]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt", ), ;, }, next, (, ), ;, }, }, return, typeNameNode, ;, }, private]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt", ), ;, }, next, (, ), ;, }, }, return, typeNameNode, ;, }, private]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt", ), ;, }, next, (, ), ;, }, }, return, typeNameNode, ;, }]
[., GT, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.gt", ), ;, }, next, (, ), ;, }, }, return, typeNameNode]
[;, }, next, (, ), ;, }, }, return, typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {]
[), ;, }, next, (, ), ;, }, }, return, typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, )]
[;, }, }, return, typeNameNode, ;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (, token, !=, JsDocToken]
[;, }, private, Node, parseFunctionType, (, JsDocToken, token, ), {, if, (, token, !=, JsDocToken, ., LP, ), {, restoreLookAhead]
[), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (, Token]
[!=, JsDocToken, ., LP, ), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType]
[), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (, Token]
[., LP, ), {, restoreLookAhead, (, token, ), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode]
[;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (, Token, ., FUNCTION, ), ;, Node, parameters]
[), ;, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lp", ), ;, }, Node, functionType, =, newNode, (, Token, ., FUNCTION, ), ;, Node]
[;, }, Node, functionType, =, newNode, (, Token, ., FUNCTION, ), ;, Node, parameters, =, null, ;, skipEOLs, (, )]
[), ;, }, Node, functionType, =, newNode, (, Token, ., FUNCTION, ), ;, Node, parameters, =, null, ;, skipEOLs, (]
[;, Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), )]
[), ;, Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, )]
[., FUNCTION, ), ;, Node, parameters, =, null, ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, token, =, next, (]
[;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, token, =, next, (, ), ;, boolean, hasParams]
[), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==, JsDocToken, ., STRING]
[), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==, JsDocToken, ., STRING]
[), ), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==, JsDocToken, .]
[., RP, ), ), {, token, =, next, (, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==]
[=, next, (, ), ;, boolean, hasParams, =, true, ;, if, (, token, ==, JsDocToken, ., STRING, ), {, String]
[;, boolean, hasParams, =, true, ;, if, (, token, ==, JsDocToken, ., STRING, ), {, String, tokenStr, =, stream, .]
[;, if, (, token, ==, JsDocToken, ., STRING, ), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean]
[), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean, isThis, =, "this", ., equals, (, tokenStr, )]
[==, JsDocToken, ., STRING, ), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean, isThis, =, "this", .]
[), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean, isThis, =, "this", ., equals, (, tokenStr, )]
[., STRING, ), {, String, tokenStr, =, stream, ., getString, (, ), ;, boolean, isThis, =, "this", ., equals, (]
[;, boolean, isThis, =, "this", ., equals, (, tokenStr, ), ;, boolean, isNew, =, "new", ., equals, (, tokenStr, )]
[., getString, (, ), ;, boolean, isThis, =, "this", ., equals, (, tokenStr, ), ;, boolean, isNew, =, "new", .]
[;, boolean, isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (, isThis, ||, isNew, ), {, if, (]
[., equals, (, tokenStr, ), ;, boolean, isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (, isThis, ||]
[), ;, boolean, isNew, =, "new", ., equals, (, tokenStr, ), ;, if, (, isThis, ||, isNew, ), {, if]
[;, if, (, isThis, ||, isNew, ), {, if, (, match, (, JsDocToken, ., COLON, ), ), {, next, (]
[., equals, (, tokenStr, ), ;, if, (, isThis, ||, isNew, ), {, if, (, match, (, JsDocToken, ., COLON]
[), ;, if, (, isThis, ||, isNew, ), {, if, (, match, (, JsDocToken, ., COLON, ), ), {, next]
[), {, if, (, match, (, JsDocToken, ., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[||, isNew, ), {, if, (, match, (, JsDocToken, ., COLON, ), ), {, next, (, ), ;, skipEOLs, (]
[), {, if, (, match, (, JsDocToken, ., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?, Token, ., THIS]
[), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?, Token, .]
[., COLON, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?]
[;, skipEOLs, (, ), ;, Node, contextType, =, wrapNode, (, isThis, ?, Token, ., THIS, :, Token, ., NEW, ,]
[;, Node, contextType, =, wrapNode, (, isThis, ?, Token, ., THIS, :, Token, ., NEW, ,, parseTypeName, (, next, (]
[;, if, (, contextType, ==, null, ), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, ), ;, }]
[,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null, ), {, return, null, ;, }]
[?, Token, ., THIS, :, Token, ., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType]
[:, Token, ., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null, ), {]
[., THIS, :, Token, ., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null]
[,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null, ), {, return, null, ;, }]
[., NEW, ,, parseTypeName, (, next, (, ), ), ), ;, if, (, contextType, ==, null, ), {, return, null]
[), ;, if, (, contextType, ==, null, ), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, ), ;]
[), ), ;, if, (, contextType, ==, null, ), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, )]
[), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon"]
[==, null, ), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning]
[), {, return, null, ;, }, functionType, ., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon"]
[;, }, functionType, ., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if]
[;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (, match, (, JsDocToken, ., COMMA, ), )]
[., addChildToFront, (, contextType, ), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (, match, (]
[), ;, }, else, {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.colon", ), ;, }, if, (, match, (, JsDocToken, ., COMMA, )]
[;, }, if, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;]
[), ;, }, if, (, match, (, JsDocToken, ., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, )]
[), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, else, {, hasParams]
[), ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, else, {]
[., COMMA, ), ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }]
[;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, else, {, hasParams, =, false, ;, }, }]
[;, token, =, next, (, ), ;, }, else, {, hasParams, =, false, ;, }, }, }, if, (, hasParams]
[=, next, (, ), ;, }, else, {, hasParams, =, false, ;, }, }, }, if, (, hasParams, ), {]
[;, }, else, {, hasParams, =, false, ;, }, }, }, if, (, hasParams, ), {, parameters, =, parseParametersType, (]
[=, false, ;, }, }, }, if, (, hasParams, ), {, parameters, =, parseParametersType, (, token, ), ;, if, (]
[;, }, }, }, if, (, hasParams, ), {, parameters, =, parseParametersType, (, token, ), ;, if, (, parameters, ==]
[), {, parameters, =, parseParametersType, (, token, ), ;, if, (, parameters, ==, null, ), {, return, null, ;, }]
[=, parseParametersType, (, token, ), ;, if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if]
[;, if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if, (, parameters, !=, null, )]
[), ;, if, (, parameters, ==, null, ), {, return, null, ;, }, }, }, if, (, parameters, !=, null]
[), {, return, null, ;, }, }, }, if, (, parameters, !=, null, ), {, functionType, ., addChildToBack, (, parameters]
[==, null, ), {, return, null, ;, }, }, }, if, (, parameters, !=, null, ), {, functionType, ., addChildToBack]
[), {, return, null, ;, }, }, }, if, (, parameters, !=, null, ), {, functionType, ., addChildToBack, (, parameters]
[;, }, }, }, if, (, parameters, !=, null, ), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs]
[), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken]
[!=, null, ), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !, match]
[), {, functionType, ., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken]
[;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (]
[., addChildToBack, (, parameters, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, )]
[), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning]
[;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, skipEOLs]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next, (]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next, (]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next]
[., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType]
[;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next, (, ), ), ;, if, (, resultType, ==]
[), ;, }, skipEOLs, (, ), ;, Node, resultType, =, parseResultType, (, next, (, ), ), ;, if, (, resultType]
[;, Node, resultType, =, parseResultType, (, next, (, ), ), ;, if, (, resultType, ==, null, ), {, return, null]
[;, if, (, resultType, ==, null, ), {, return, null, ;, }, else, {, functionType, ., addChildToBack, (, resultType, )]
[), ;, if, (, resultType, ==, null, ), {, return, null, ;, }, else, {, functionType, ., addChildToBack, (, resultType]
[), {, return, null, ;, }, else, {, functionType, ., addChildToBack, (, resultType, ), ;, }, return, functionType, ;, }]
[==, null, ), {, return, null, ;, }, else, {, functionType, ., addChildToBack, (, resultType, ), ;, }, return, functionType]
[), {, return, null, ;, }, else, {, functionType, ., addChildToBack, (, resultType, ), ;, }, return, functionType, ;, }]
[;, }, else, {, functionType, ., addChildToBack, (, resultType, ), ;, }, return, functionType, ;, }, private, Node, parseParametersType, (]
[;, }, return, functionType, ;, }, private, Node, parseParametersType, (, JsDocToken, token, ), {, Node, paramsType, =, newNode, (, Token]
[., addChildToBack, (, resultType, ), ;, }, return, functionType, ;, }, private, Node, parseParametersType, (, JsDocToken, token, ), {, Node]
[), ;, }, return, functionType, ;, }, private, Node, parseParametersType, (, JsDocToken, token, ), {, Node, paramsType, =, newNode, (]
[;, }, private, Node, parseParametersType, (, JsDocToken, token, ), {, Node, paramsType, =, newNode, (, Token, ., PARAM_LIST, ), ;]
[;, boolean, isVarArgs, =, false, ;, Node, paramType, =, null, ;, if, (, token, !=, JsDocToken, ., RP, ), {]
[), ;, boolean, isVarArgs, =, false, ;, Node, paramType, =, null, ;, if, (, token, !=, JsDocToken, ., RP, )]
[., PARAM_LIST, ), ;, boolean, isVarArgs, =, false, ;, Node, paramType, =, null, ;, if, (, token, !=, JsDocToken, .]
[;, Node, paramType, =, null, ;, if, (, token, !=, JsDocToken, ., RP, ), {, do, {, if, (, paramType]
[;, if, (, token, !=, JsDocToken, ., RP, ), {, do, {, if, (, paramType, !=, null, ), {, next]
[), {, do, {, if, (, paramType, !=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token]
[!=, JsDocToken, ., RP, ), {, do, {, if, (, paramType, !=, null, ), {, next, (, ), ;, skipEOLs]
[), {, do, {, if, (, paramType, !=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token]
[., RP, ), {, do, {, if, (, paramType, !=, null, ), {, next, (, ), ;, skipEOLs, (, )]
[), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token]
[!=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if]
[), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token]
[;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, )]
[;, token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, )]
[=, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, ), ;, if]
[;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {, paramType, =, newNode, (]
[==, JsDocToken, ., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {]
[), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {, paramType, =, newNode, (]
[., ELLIPSIS, ), {, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., RP, ), ), {, paramType, =]
[;, if, (, match, (, JsDocToken, ., RP, ), ), {, paramType, =, newNode, (, Token, ., ELLIPSIS, ), ;]
[), {, paramType, =, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if, (]
[), ), {, paramType, =, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if]
[., RP, ), ), {, paramType, =, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, )]
[=, newNode, (, Token, ., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if, (, !, match, (]
[;, }, else, {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., LB, ), ), {, return]
[), ;, }, else, {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., LB, ), ), {]
[., ELLIPSIS, ), ;, }, else, {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., LB, )]
[;, if, (, !, match, (, JsDocToken, ., LB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =]
[., LB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.lb", ), ;, }, next, (, ), ;, skipEOLs, (, ), ;]
[;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (]
[), ;, }, next, (, ), ;, skipEOLs, (, ), ;, paramType, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression]
[;, skipEOLs, (, ), ;, paramType, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), )]
[;, paramType, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, )]
[=, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, ), ;, if]
[;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb"]
[,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, skipEOLs, (, ), ;, if, (, !, match, (]
[), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (]
[), ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning]
[;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs]
[., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, skipEOLs, (, ), ;, next, (, ), ;]
[;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =, true, ;, }, else, {, paramType, =]
[), ;, }, skipEOLs, (, ), ;, next, (, ), ;, }, isVarArgs, =, true, ;, }, else, {, paramType]
[;, next, (, ), ;, }, isVarArgs, =, true, ;, }, else, {, paramType, =, parseTypeExpression, (, token, ), ;]
[;, }, isVarArgs, =, true, ;, }, else, {, paramType, =, parseTypeExpression, (, token, ), ;, if, (, match, (]
[=, true, ;, }, else, {, paramType, =, parseTypeExpression, (, token, ), ;, if, (, match, (, JsDocToken, ., EQUALS]
[;, }, else, {, paramType, =, parseTypeExpression, (, token, ), ;, if, (, match, (, JsDocToken, ., EQUALS, ), )]
[=, parseTypeExpression, (, token, ), ;, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;]
[;, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;, paramType]
[), ;, if, (, match, (, JsDocToken, ., EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;]
[), {, skipEOLs, (, ), ;, next, (, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS, ,, paramType, )]
[), ), {, skipEOLs, (, ), ;, next, (, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS, ,, paramType]
[., EQUALS, ), ), {, skipEOLs, (, ), ;, next, (, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS]
[;, next, (, ), ;, paramType, =, wrapNode, (, Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (]
[;, paramType, =, wrapNode, (, Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (, paramType, ==, null, )]
[=, wrapNode, (, Token, ., EQUALS, ,, paramType, ), ;, }, }, if, (, paramType, ==, null, ), {, return]
[;, }, }, if, (, paramType, ==, null, ), {, return, null, ;, }, paramsType, ., addChildToBack, (, paramType, )]
[,, paramType, ), ;, }, }, if, (, paramType, ==, null, ), {, return, null, ;, }, paramsType, ., addChildToBack]
[., EQUALS, ,, paramType, ), ;, }, }, if, (, paramType, ==, null, ), {, return, null, ;, }, paramsType]
[), ;, }, }, if, (, paramType, ==, null, ), {, return, null, ;, }, paramsType, ., addChildToBack, (, paramType]
[), {, return, null, ;, }, paramsType, ., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {, break, ;]
[==, null, ), {, return, null, ;, }, paramsType, ., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {]
[), {, return, null, ;, }, paramsType, ., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {, break, ;]
[;, }, paramsType, ., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {, break, ;, }, }, while, (]
[;, if, (, isVarArgs, ), {, break, ;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;]
[., addChildToBack, (, paramType, ), ;, if, (, isVarArgs, ), {, break, ;, }, }, while, (, match, (, JsDocToken]
[), ;, if, (, isVarArgs, ), {, break, ;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), )]
[), {, break, ;, }, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, }, if, (, isVarArgs]
[), ;, }, if, (, isVarArgs, &&, match, (, JsDocToken, ., COMMA, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", )]
[), ), ;, }, if, (, isVarArgs, &&, match, (, JsDocToken, ., COMMA, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs"]
[., COMMA, ), ), ;, }, if, (, isVarArgs, &&, match, (, JsDocToken, ., COMMA, ), ), {, return, reportTypeSyntaxWarning]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", ), ;, }, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, )]
[&&, match, (, JsDocToken, ., COMMA, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", ), ;, }, return, paramsType, ;, }]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", ), ;, }, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, )]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", ), ;, }, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token]
[., COMMA, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.function.varargs", ), ;, }, return, paramsType, ;, }, private, Node, parseResultType, (]
[;, }, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, ), {, skipEOLs, (, ), ;, if, (]
[), ;, }, return, paramsType, ;, }, private, Node, parseResultType, (, JsDocToken, token, ), {, skipEOLs, (, ), ;, if]
[;, }, private, Node, parseResultType, (, JsDocToken, token, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken]
[;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, newNode, (, Token, ., EMPTY, ), ;]
[), {, return, newNode, (, Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (, )]
[), {, return, newNode, (, Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (, )]
[), ), {, return, newNode, (, Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (]
[., COLON, ), ), {, return, newNode, (, Token, ., EMPTY, ), ;, }, token, =, next, (, ), ;]
[;, }, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, )]
[), ;, }, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING]
[., EMPTY, ), ;, }, token, =, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken]
[=, next, (, ), ;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), &&, "void", .]
[;, skipEOLs, (, ), ;, if, (, match, (, JsDocToken, ., STRING, ), &&, "void", ., equals, (, stream, .]
[;, if, (, match, (, JsDocToken, ., STRING, ), &&, "void", ., equals, (, stream, ., getString, (, ), )]
[), {, next, (, ), ;, return, newNode, (, Token, ., VOID, ), ;, }, else, {, return, parseTypeExpression, (]
[&&, "void", ., equals, (, stream, ., getString, (, ), ), ), {, next, (, ), ;, return, newNode, (]
[), &&, "void", ., equals, (, stream, ., getString, (, ), ), ), {, next, (, ), ;, return, newNode]
[., STRING, ), &&, "void", ., equals, (, stream, ., getString, (, ), ), ), {, next, (, ), ;]
[), {, next, (, ), ;, return, newNode, (, Token, ., VOID, ), ;, }, else, {, return, parseTypeExpression, (]
[., equals, (, stream, ., getString, (, ), ), ), {, next, (, ), ;, return, newNode, (, Token, .]
[), ), {, next, (, ), ;, return, newNode, (, Token, ., VOID, ), ;, }, else, {, return, parseTypeExpression]
[., getString, (, ), ), ), {, next, (, ), ;, return, newNode, (, Token, ., VOID, ), ;, }]
[;, return, newNode, (, Token, ., VOID, ), ;, }, else, {, return, parseTypeExpression, (, next, (, ), ), ;]
[;, }, else, {, return, parseTypeExpression, (, next, (, ), ), ;, }, }, private, Node, parseUnionType, (, JsDocToken, token]
[), ;, }, else, {, return, parseTypeExpression, (, next, (, ), ), ;, }, }, private, Node, parseUnionType, (, JsDocToken]
[., VOID, ), ;, }, else, {, return, parseTypeExpression, (, next, (, ), ), ;, }, }, private, Node, parseUnionType]
[;, }, }, private, Node, parseUnionType, (, JsDocToken, token, ), {, return, parseUnionTypeWithAlternate, (, token, ,, null, ), ;, }]
[), ;, }, }, private, Node, parseUnionType, (, JsDocToken, token, ), {, return, parseUnionTypeWithAlternate, (, token, ,, null, ), ;]
[;, }, private, Node, parseUnionTypeWithAlternate, (, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =, newNode, (, Token, .]
[,, null, ), ;, }, private, Node, parseUnionTypeWithAlternate, (, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =, newNode]
[), ;, }, private, Node, parseUnionTypeWithAlternate, (, JsDocToken, token, ,, Node, alternate, ), {, Node, union, =, newNode, (, Token]
[;, if, (, alternate, !=, null, ), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null]
[), ;, if, (, alternate, !=, null, ), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =]
[., PIPE, ), ;, if, (, alternate, !=, null, ), {, union, ., addChildToBack, (, alternate, ), ;, }, Node]
[), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if, (, expr]
[!=, null, ), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if]
[), {, union, ., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if, (, expr]
[;, }, Node, expr, =, null, ;, do, {, if, (, expr, !=, null, ), {, skipEOLs, (, ), ;]
[., addChildToBack, (, alternate, ), ;, }, Node, expr, =, null, ;, do, {, if, (, expr, !=, null, )]
[), ;, }, Node, expr, =, null, ;, do, {, if, (, expr, !=, null, ), {, skipEOLs, (, )]
[;, do, {, if, (, expr, !=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, .]
[!=, null, ), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==]
[), {, skipEOLs, (, ), ;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, .]
[;, token, =, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken]
[=, next, (, ), ;, Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA]
[;, Preconditions, ., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe]
[;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE, )]
[., checkState, (, token, ==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token]
[), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE]
[||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe]
[==, JsDocToken, ., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE]
[||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe]
[., PIPE, ||, token, ==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if]
[), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE]
[==, JsDocToken, ., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match]
[), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE]
[., COMMA, ), ;, boolean, isPipe, =, token, ==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken]
[;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (]
[==, JsDocToken, ., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, )]
[;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (]
[., PIPE, ;, if, (, isPipe, &&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }]
[), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr, =]
[&&, match, (, JsDocToken, ., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =]
[), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr, =]
[), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr]
[., PIPE, ), ), {, next, (, ), ;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[;, }, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, expr, =, parseTypeExpression, (, token, ), ;]
[;, token, =, next, (, ), ;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (, expr, ==, null]
[=, next, (, ), ;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (, expr, ==, null, ), {]
[;, }, expr, =, parseTypeExpression, (, token, ), ;, if, (, expr, ==, null, ), {, return, null, ;, }]
[=, parseTypeExpression, (, token, ), ;, if, (, expr, ==, null, ), {, return, null, ;, }, union, ., addChildToBack]
[;, if, (, expr, ==, null, ), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }]
[), ;, if, (, expr, ==, null, ), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;]
[), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (, JsDocToken, .]
[==, null, ), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (]
[), {, return, null, ;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (, JsDocToken, .]
[;, }, union, ., addChildToBack, (, expr, ), ;, }, while, (, match, (, JsDocToken, ., PIPE, ,, JsDocToken, .]
[;, }, while, (, match, (, JsDocToken, ., PIPE, ,, JsDocToken, ., COMMA, ), ), ;, if, (, alternate, ==]
[., addChildToBack, (, expr, ), ;, }, while, (, match, (, JsDocToken, ., PIPE, ,, JsDocToken, ., COMMA, ), )]
[), ;, }, while, (, match, (, JsDocToken, ., PIPE, ,, JsDocToken, ., COMMA, ), ), ;, if, (, alternate]
[), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[,, JsDocToken, ., COMMA, ), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (]
[., PIPE, ,, JsDocToken, ., COMMA, ), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;]
[), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken]
[., COMMA, ), ), ;, if, (, alternate, ==, null, ), {, skipEOLs, (, ), ;, if, (, !, match]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (]
[==, null, ), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return]
[), {, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (]
[;, if, (, !, match, (, JsDocToken, ., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, next]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, next, (, ), ;, }, return, union, ;, }, private, Node]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, next, (, ), ;, }, return, union, ;, }, private, Node]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, next, (, ), ;, }, return, union, ;, }, private]
[., RP, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rp", ), ;, }, next, (, ), ;, }, return, union, ;]
[;, }, next, (, ), ;, }, return, union, ;, }, private, Node, parseArrayType, (, JsDocToken, token, ), {, Node]
[), ;, }, next, (, ), ;, }, return, union, ;, }, private, Node, parseArrayType, (, JsDocToken, token, ), {]
[;, }, return, union, ;, }, private, Node, parseArrayType, (, JsDocToken, token, ), {, Node, array, =, newNode, (, Token]
[;, }, private, Node, parseArrayType, (, JsDocToken, token, ), {, Node, array, =, newNode, (, Token, ., LB, ), ;]
[;, Node, arg, =, null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (, arg, !=, null, ), {]
[), ;, Node, arg, =, null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (, arg, !=, null, )]
[., LB, ), ;, Node, arg, =, null, ;, boolean, hasVarArgs, =, false, ;, do, {, if, (, arg, !=]
[;, boolean, hasVarArgs, =, false, ;, do, {, if, (, arg, !=, null, ), {, next, (, ), ;, skipEOLs]
[;, do, {, if, (, arg, !=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =]
[), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token]
[!=, null, ), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if]
[), {, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token]
[;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, )]
[;, token, =, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode]
[=, next, (, ), ;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode, (, Token]
[;, }, if, (, token, ==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression]
[), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =]
[==, JsDocToken, ., ELLIPSIS, ), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), )]
[), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =]
[., ELLIPSIS, ), {, arg, =, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;]
[=, wrapNode, (, Token, ., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =, true, ;, }]
[;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==]
[,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (]
[., ELLIPSIS, ,, parseTypeExpression, (, next, (, ), ), ), ;, hasVarArgs, =, true, ;, }, else, {, arg, =]
[), ;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg]
[), ), ;, hasVarArgs, =, true, ;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (]
[=, true, ;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==, null, )]
[;, }, else, {, arg, =, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==, null, ), {, return]
[=, parseTypeExpression, (, token, ), ;, }, if, (, arg, ==, null, ), {, return, null, ;, }, array, .]
[;, }, if, (, arg, ==, null, ), {, return, null, ;, }, array, ., addChildToBack, (, arg, ), ;]
[), ;, }, if, (, arg, ==, null, ), {, return, null, ;, }, array, ., addChildToBack, (, arg, )]
[), {, return, null, ;, }, array, ., addChildToBack, (, arg, ), ;, if, (, hasVarArgs, ), {, break, ;]
[==, null, ), {, return, null, ;, }, array, ., addChildToBack, (, arg, ), ;, if, (, hasVarArgs, ), {]
[), {, return, null, ;, }, array, ., addChildToBack, (, arg, ), ;, if, (, hasVarArgs, ), {, break, ;]
[;, }, array, ., addChildToBack, (, arg, ), ;, if, (, hasVarArgs, ), {, break, ;, }, skipEOLs, (, )]
[;, if, (, hasVarArgs, ), {, break, ;, }, skipEOLs, (, ), ;, }, while, (, match, (, JsDocToken, .]
[., addChildToBack, (, arg, ), ;, if, (, hasVarArgs, ), {, break, ;, }, skipEOLs, (, ), ;, }, while]
[), ;, if, (, hasVarArgs, ), {, break, ;, }, skipEOLs, (, ), ;, }, while, (, match, (, JsDocToken]
[), {, break, ;, }, skipEOLs, (, ), ;, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;]
[;, }, while, (, match, (, JsDocToken, ., COMMA, ), ), ;, if, (, !, match, (, JsDocToken, ., RB]
[), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }]
[), ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;]
[., COMMA, ), ), ;, if, (, !, match, (, JsDocToken, ., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb"]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, next, (, ), ;, return, array, ;, }, private, Node, parseRecordType]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, next, (, ), ;, return, array, ;, }, private, Node, parseRecordType]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, next, (, ), ;, return, array, ;, }, private, Node]
[., RB, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rb", ), ;, }, next, (, ), ;, return, array, ;, }]
[;, }, next, (, ), ;, return, array, ;, }, private, Node, parseRecordType, (, JsDocToken, token, ), {, Node, recordType]
[), ;, }, next, (, ), ;, return, array, ;, }, private, Node, parseRecordType, (, JsDocToken, token, ), {, Node]
[;, return, array, ;, }, private, Node, parseRecordType, (, JsDocToken, token, ), {, Node, recordType, =, newNode, (, Token, .]
[;, }, private, Node, parseRecordType, (, JsDocToken, token, ), {, Node, recordType, =, newNode, (, Token, ., LC, ), ;]
[;, Node, fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (, fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, )]
[), ;, Node, fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (, fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (]
[., LC, ), ;, Node, fieldTypeList, =, parseFieldTypeList, (, token, ), ;, if, (, fieldTypeList, ==, null, ), {, return]
[;, if, (, fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (]
[), ;, if, (, fieldTypeList, ==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if]
[), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC]
[==, null, ), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken]
[), {, return, reportGenericTypeSyntaxWarning, (, ), ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC]
[;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, return, reportTypeSyntaxWarning, (]
[;, if, (, !, match, (, JsDocToken, ., RC, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;, recordType, ., addChildToBack, (, fieldTypeList, ), ;]
[), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;, recordType, ., addChildToBack, (, fieldTypeList, ), ;]
[), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;, recordType, ., addChildToBack, (, fieldTypeList, )]
[., RC, ), ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.missing.rc", ), ;, }, next, (, ), ;, recordType, ., addChildToBack, (]
[;, }, next, (, ), ;, recordType, ., addChildToBack, (, fieldTypeList, ), ;, return, recordType, ;, }, private, Node, parseFieldTypeList]
[), ;, }, next, (, ), ;, recordType, ., addChildToBack, (, fieldTypeList, ), ;, return, recordType, ;, }, private, Node]
[;, recordType, ., addChildToBack, (, fieldTypeList, ), ;, return, recordType, ;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {]
[;, return, recordType, ;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {, Node, fieldTypeList, =, newNode, (, Token, .]
[., addChildToBack, (, fieldTypeList, ), ;, return, recordType, ;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {, Node, fieldTypeList]
[), ;, return, recordType, ;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {, Node, fieldTypeList, =, newNode, (, Token]
[;, }, private, Node, parseFieldTypeList, (, JsDocToken, token, ), {, Node, fieldTypeList, =, newNode, (, Token, ., LB, ), ;]
[;, do, {, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (, fieldType, ==, null, ), {, return, null]
[), ;, do, {, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (, fieldType, ==, null, ), {, return]
[., LB, ), ;, do, {, Node, fieldType, =, parseFieldType, (, token, ), ;, if, (, fieldType, ==, null, )]
[;, if, (, fieldType, ==, null, ), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs]
[), ;, if, (, fieldType, ==, null, ), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;]
[), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (, !]
[==, null, ), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if]
[), {, return, null, ;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (, !]
[;, }, fieldTypeList, ., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, .]
[;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COMMA, ), ), {, break, ;, }, next]
[., addChildToBack, (, fieldType, ), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COMMA, ), )]
[), ;, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COMMA, ), ), {, break, ;, }]
[;, if, (, !, match, (, JsDocToken, ., COMMA, ), ), {, break, ;, }, next, (, ), ;, skipEOLs]
[), {, break, ;, }, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }]
[), {, break, ;, }, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }]
[), ), {, break, ;, }, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (, ), ;]
[., COMMA, ), ), {, break, ;, }, next, (, ), ;, skipEOLs, (, ), ;, token, =, next, (]
[;, skipEOLs, (, ), ;, token, =, next, (, ), ;, }, while, (, true, ), ;, return, fieldTypeList, ;]
[;, token, =, next, (, ), ;, }, while, (, true, ), ;, return, fieldTypeList, ;, }, private, Node, parseFieldType]
[=, next, (, ), ;, }, while, (, true, ), ;, return, fieldTypeList, ;, }, private, Node, parseFieldType, (, JsDocToken]
[;, }, while, (, true, ), ;, return, fieldTypeList, ;, }, private, Node, parseFieldType, (, JsDocToken, token, ), {, Node]
[), ;, return, fieldTypeList, ;, }, private, Node, parseFieldType, (, JsDocToken, token, ), {, Node, fieldName, =, parseFieldName, (, token]
[;, }, private, Node, parseFieldType, (, JsDocToken, token, ), {, Node, fieldName, =, parseFieldName, (, token, ), ;, if, (]
[;, if, (, fieldName, ==, null, ), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !, match]
[), ;, if, (, fieldName, ==, null, ), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !]
[), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), )]
[==, null, ), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON]
[), {, return, null, ;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), )]
[;, }, skipEOLs, (, ), ;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, fieldName, ;]
[;, if, (, !, match, (, JsDocToken, ., COLON, ), ), {, return, fieldName, ;, }, next, (, ), ;]
[), {, return, fieldName, ;, }, next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (, next]
[), {, return, fieldName, ;, }, next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (, next]
[), ), {, return, fieldName, ;, }, next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (]
[., COLON, ), ), {, return, fieldName, ;, }, next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =]
[;, }, next, (, ), ;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (, next, (, ), ), ;]
[;, skipEOLs, (, ), ;, Node, typeExpression, =, parseTypeExpression, (, next, (, ), ), ;, if, (, typeExpression, ==, null]
[;, Node, typeExpression, =, parseTypeExpression, (, next, (, ), ), ;, if, (, typeExpression, ==, null, ), {, return, null]
[;, if, (, typeExpression, ==, null, ), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON]
[), ;, if, (, typeExpression, ==, null, ), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, .]
[), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, ., addChildToBack, (]
[==, null, ), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, .]
[), {, return, null, ;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, ., addChildToBack, (]
[;, }, Node, fieldType, =, newNode, (, Token, ., COLON, ), ;, fieldType, ., addChildToBack, (, fieldName, ), ;, fieldType]
[;, fieldType, ., addChildToBack, (, fieldName, ), ;, fieldType, ., addChildToBack, (, typeExpression, ), ;, return, fieldType, ;, }, private]
[), ;, fieldType, ., addChildToBack, (, fieldName, ), ;, fieldType, ., addChildToBack, (, typeExpression, ), ;, return, fieldType, ;, }]
[., COLON, ), ;, fieldType, ., addChildToBack, (, fieldName, ), ;, fieldType, ., addChildToBack, (, typeExpression, ), ;, return, fieldType]
[;, fieldType, ., addChildToBack, (, typeExpression, ), ;, return, fieldType, ;, }, private, Node, parseFieldName, (, JsDocToken, token, ), {]
[., addChildToBack, (, fieldName, ), ;, fieldType, ., addChildToBack, (, typeExpression, ), ;, return, fieldType, ;, }, private, Node, parseFieldName]
[), ;, fieldType, ., addChildToBack, (, typeExpression, ), ;, return, fieldType, ;, }, private, Node, parseFieldName, (, JsDocToken, token, )]
[;, return, fieldType, ;, }, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (, token, ), {, case, STRING]
[., addChildToBack, (, typeExpression, ), ;, return, fieldType, ;, }, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (]
[), ;, return, fieldType, ;, }, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (, token, ), {, case]
[;, }, private, Node, parseFieldName, (, JsDocToken, token, ), {, switch, (, token, ), {, case, STRING, :, String, string]
[), {, case, STRING, :, String, string, =, stream, ., getString, (, ), ;, return, newStringNode, (, string, ), ;]
[:, String, string, =, stream, ., getString, (, ), ;, return, newStringNode, (, string, ), ;, default, :, return, null]
[;, return, newStringNode, (, string, ), ;, default, :, return, null, ;, }, }, private, Node, wrapNode, (, int, type]
[., getString, (, ), ;, return, newStringNode, (, string, ), ;, default, :, return, null, ;, }, }, private, Node]
[;, default, :, return, null, ;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return]
[), ;, default, :, return, null, ;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {]
[;, }, }, private, Node, wrapNode, (, int, type, ,, Node, n, ), {, return, n, ==, null, ?, null]
[;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ,, stream, ., getLineno, (]
[?, null, :, new, Node, (, type, ,, n, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[==, null, ?, null, :, new, Node, (, type, ,, n, ,, stream, ., getLineno, (, ), ,, stream, .]
[?, null, :, new, Node, (, type, ,, n, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (]
[:, new, Node, (, type, ,, n, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), )]
[;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ,, stream, ., getLineno, (]
[., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (, type]
[,, n, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, )]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }]
[,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (]
[., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newNode, (, int, type, ), {]
[), ;, }, private, Node, newNode, (, int, type, ), {, return, new, Node, (, type, ,, stream, ., getLineno]
[;, }, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s, ,, stream, ., getLineno, (, )]
[., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s, ,]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }]
[,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node]
[), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s]
[., getCharno, (, ), ), ., clonePropsFrom, (, templateNode, ), ;, }, private, Node, newStringNode, (, String, s, ), {]
[), ;, }, private, Node, newStringNode, (, String, s, ), {, return, newStringNode, (, s, ,, stream, ., getLineno, (]
[;, }, private, Node, newStringNode, (, String, s, ,, int, lineno, ,, int, charno, ), {, Node, n, =, Node]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, private, Node, newStringNode, (, String]
[,, stream, ., getCharno, (, ), ), ;, }, private, Node, newStringNode, (, String, s, ,, int, lineno, ,, int]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, }, private, Node, newStringNode, (, String, s, ,]
[), ;, }, private, Node, newStringNode, (, String, s, ,, int, lineno, ,, int, charno, ), {, Node, n, =]
[., getCharno, (, ), ), ;, }, private, Node, newStringNode, (, String, s, ,, int, lineno, ,, int, charno, )]
[;, n, ., setLength, (, s, ., length, (, ), ), ;, return, n, ;, }, private, Node, createTemplateNode, (]
[., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (, s, ., length, (, ), ), ;, return, n, ;]
[., newString, (, s, ,, lineno, ,, charno, ), ., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (, s]
[,, lineno, ,, charno, ), ., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (, s, ., length, (, )]
[,, charno, ), ., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (, s, ., length, (, ), ), ;]
[), ., clonePropsFrom, (, templateNode, ), ;, n, ., setLength, (, s, ., length, (, ), ), ;, return, n]
[), ;, n, ., setLength, (, s, ., length, (, ), ), ;, return, n, ;, }, private, Node, createTemplateNode]
[;, return, n, ;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;]
[., setLength, (, s, ., length, (, ), ), ;, return, n, ;, }, private, Node, createTemplateNode, (, ), {]
[), ;, return, n, ;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, )]
[., length, (, ), ), ;, return, n, ;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR]
[;, }, private, Node, createTemplateNode, (, ), {, Node, templateNode, =, IR, ., script, (, ), ;, templateNode, ., setStaticSourceFile]
[;, templateNode, ., setStaticSourceFile, (, this, ., associatedNode, !=, null, ?, this, ., associatedNode, ., getStaticSourceFile, (, ), :, null]
[., script, (, ), ;, templateNode, ., setStaticSourceFile, (, this, ., associatedNode, !=, null, ?, this, ., associatedNode, ., getStaticSourceFile]
[;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,, stream]
[., setStaticSourceFile, (, this, ., associatedNode, !=, null, ?, this, ., associatedNode, ., getStaticSourceFile, (, ), :, null, ), ;]
[), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,]
[?, this, ., associatedNode, ., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (]
[!=, null, ?, this, ., associatedNode, ., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }, private, Node]
[., associatedNode, !=, null, ?, this, ., associatedNode, ., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }]
[?, this, ., associatedNode, ., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (]
[:, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (]
[., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {]
[., associatedNode, ., getStaticSourceFile, (, ), :, null, ), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning]
[), ;, return, templateNode, ;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,]
[;, }, private, Node, reportTypeSyntaxWarning, (, String, warning, ), {, parser, ., addTypeWarning, (, warning, ,, stream, ., getLineno, (]
[;, return, null, ;, }, private, Node, reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.type.syntax", ), ;, }, private, JsDocToken]
[., addTypeWarning, (, warning, ,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, null]
[,, stream, ., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, null, ;, }, private, Node]
[,, stream, ., getCharno, (, ), ), ;, return, null, ;, }, private, Node, reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning]
[., getLineno, (, ), ,, stream, ., getCharno, (, ), ), ;, return, null, ;, }, private, Node, reportGenericTypeSyntaxWarning, (]
[), ;, return, null, ;, }, private, Node, reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.type.syntax", ), ;, }, private]
[., getCharno, (, ), ), ;, return, null, ;, }, private, Node, reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.type.syntax"]
[;, }, private, Node, reportGenericTypeSyntaxWarning, (, ), {, return, reportTypeSyntaxWarning, (, "msg.jsdoc.type.syntax", ), ;, }, private, JsDocToken, eatTokensUntilEOL, (, )]
[;, }, private, JsDocToken, eatTokensUntilEOL, (, ), {, return, eatTokensUntilEOL, (, next, (, ), ), ;, }, private, JsDocToken, eatTokensUntilEOL]
[), ;, }, private, JsDocToken, eatTokensUntilEOL, (, ), {, return, eatTokensUntilEOL, (, next, (, ), ), ;, }, private, JsDocToken]
[;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL, ||]
[), ;, }, private, JsDocToken, eatTokensUntilEOL, (, JsDocToken, token, ), {, do, {, if, (, token, ==, JsDocToken, ., EOL]
[), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (, ), ;, }, while]
[||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =]
[||, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;]
[==, JsDocToken, ., EOL, ||, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =]
[||, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;]
[., EOL, ||, token, ==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, .]
[||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =]
[==, JsDocToken, ., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token]
[||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =]
[., EOC, ||, token, ==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }]
[), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (, ), ;, }, while]
[==, JsDocToken, ., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (]
[), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (, ), ;, }, while]
[., EOF, ), {, state, =, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (, ), ;]
[=, State, ., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (, ), ;, }, while, (, true, )]
[;, return, token, ;, }, token, =, next, (, ), ;, }, while, (, true, ), ;, }, private, static]
[., SEARCHING_ANNOTATION, ;, return, token, ;, }, token, =, next, (, ), ;, }, while, (, true, ), ;, }]
[;, }, token, =, next, (, ), ;, }, while, (, true, ), ;, }, private, static, final, JsDocToken, NO_UNREAD_TOKEN]
[=, next, (, ), ;, }, while, (, true, ), ;, }, private, static, final, JsDocToken, NO_UNREAD_TOKEN, =, null, ;]
[;, }, while, (, true, ), ;, }, private, static, final, JsDocToken, NO_UNREAD_TOKEN, =, null, ;, private, JsDocToken, unreadToken, =]
[), ;, }, private, static, final, JsDocToken, NO_UNREAD_TOKEN, =, null, ;, private, JsDocToken, unreadToken, =, NO_UNREAD_TOKEN, ;, private, void, restoreLookAhead]
[;, private, JsDocToken, unreadToken, =, NO_UNREAD_TOKEN, ;, private, void, restoreLookAhead, (, JsDocToken, token, ), {, unreadToken, =, token, ;, }]
[;, private, void, restoreLookAhead, (, JsDocToken, token, ), {, unreadToken, =, token, ;, }, private, boolean, match, (, JsDocToken, token]
[=, token, ;, }, private, boolean, match, (, JsDocToken, token, ), {, unreadToken, =, next, (, ), ;, return, unreadToken]
[;, }, private, boolean, match, (, JsDocToken, token, ), {, unreadToken, =, next, (, ), ;, return, unreadToken, ==, token]
[=, next, (, ), ;, return, unreadToken, ==, token, ;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2]
[;, return, unreadToken, ==, token, ;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =]
[;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return]
[==, token, ;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, )]
[;, }, private, boolean, match, (, JsDocToken, token1, ,, JsDocToken, token2, ), {, unreadToken, =, next, (, ), ;, return]
[=, next, (, ), ;, return, unreadToken, ==, token1, ||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, )]
[;, return, unreadToken, ==, token1, ||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken]
[;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return, stream, ., getJsDocToken, (]
[||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return]
[==, token1, ||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, )]
[||, unreadToken, ==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return]
[;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return, stream, ., getJsDocToken, (]
[==, token2, ;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return, stream, .]
[;, }, private, JsDocToken, next, (, ), {, if, (, unreadToken, ==, NO_UNREAD_TOKEN, ), {, return, stream, ., getJsDocToken, (]
[), {, return, stream, ., getJsDocToken, (, ), ;, }, else, {, return, current, (, ), ;, }, }, private]
[==, NO_UNREAD_TOKEN, ), {, return, stream, ., getJsDocToken, (, ), ;, }, else, {, return, current, (, ), ;, }]
[), {, return, stream, ., getJsDocToken, (, ), ;, }, else, {, return, current, (, ), ;, }, }, private]
[;, }, else, {, return, current, (, ), ;, }, }, private, JsDocToken, current, (, ), {, JsDocToken, t, =]
[., getJsDocToken, (, ), ;, }, else, {, return, current, (, ), ;, }, }, private, JsDocToken, current, (, )]
[;, }, }, private, JsDocToken, current, (, ), {, JsDocToken, t, =, unreadToken, ;, unreadToken, =, NO_UNREAD_TOKEN, ;, return, t]
[;, unreadToken, =, NO_UNREAD_TOKEN, ;, return, t, ;, }, private, void, skipEOLs, (, ), {, while, (, match, (, JsDocToken]
[=, NO_UNREAD_TOKEN, ;, return, t, ;, }, private, void, skipEOLs, (, ), {, while, (, match, (, JsDocToken, ., EOL]
[;, return, t, ;, }, private, void, skipEOLs, (, ), {, while, (, match, (, JsDocToken, ., EOL, ), )]
[;, }, private, void, skipEOLs, (, ), {, while, (, match, (, JsDocToken, ., EOL, ), ), {, next, (]
[), {, next, (, ), ;, if, (, match, (, JsDocToken, ., STAR, ), ), {, next, (, ), ;]
[), ), {, next, (, ), ;, if, (, match, (, JsDocToken, ., STAR, ), ), {, next, (, )]
[., EOL, ), ), {, next, (, ), ;, if, (, match, (, JsDocToken, ., STAR, ), ), {, next]
[;, if, (, match, (, JsDocToken, ., STAR, ), ), {, next, (, ), ;, }, }, }, private, boolean]
[), {, next, (, ), ;, }, }, }, private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return, jsdocBuilder, ., isPopulatedWithFileOverview, (]
[), ), {, next, (, ), ;, }, }, }, private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return, jsdocBuilder, ., isPopulatedWithFileOverview]
[., STAR, ), ), {, next, (, ), ;, }, }, }, private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return, jsdocBuilder]
[;, }, }, }, private, boolean, hasParsedFileOverviewDocInfo, (, ), {, return, jsdocBuilder, ., isPopulatedWithFileOverview, (, ), ;, }, boolean, hasParsedJSDocInfo]
[;, }, boolean, hasParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., isPopulated, (, ), ;, }, JSDocInfo, retrieveAndResetParsedJSDocInfo, (, ), {]
[., isPopulatedWithFileOverview, (, ), ;, }, boolean, hasParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., isPopulated, (, ), ;, }, JSDocInfo]
[;, }, JSDocInfo, retrieveAndResetParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., build, (, associatedNode, ), ;, }, JSDocInfo, getFileOverviewJSDocInfo, (, )]
[., isPopulated, (, ), ;, }, JSDocInfo, retrieveAndResetParsedJSDocInfo, (, ), {, return, jsdocBuilder, ., build, (, associatedNode, ), ;, }]
[;, }, JSDocInfo, getFileOverviewJSDocInfo, (, ), {, return, fileOverviewJSDocInfo, ;, }, private, boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc, =]
[., build, (, associatedNode, ), ;, }, JSDocInfo, getFileOverviewJSDocInfo, (, ), {, return, fileOverviewJSDocInfo, ;, }, private, boolean, lookAheadForTypeAnnotation, (]
[), ;, }, JSDocInfo, getFileOverviewJSDocInfo, (, ), {, return, fileOverviewJSDocInfo, ;, }, private, boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc]
[;, }, private, boolean, lookAheadForTypeAnnotation, (, ), {, boolean, matchedLc, =, false, ;, int, c, ;, while, (, true, )]
[;, int, c, ;, while, (, true, ), {, c, =, stream, ., getChar, (, ), ;, if, (, c]
[), {, c, =, stream, ., getChar, (, ), ;, if, (, c, ==, ' ', ), {, continue, ;, }]
[=, stream, ., getChar, (, ), ;, if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (]
[;, if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (, c, ==, '{', ), {, matchedLc]
[., getChar, (, ), ;, if, (, c, ==, ' ', ), {, continue, ;, }, else, if, (, c, ==]
[), {, continue, ;, }, else, if, (, c, ==, '{', ), {, matchedLc, =, true, ;, break, ;, }]
[==, ' ', ), {, continue, ;, }, else, if, (, c, ==, '{', ), {, matchedLc, =, true, ;, break]
[), {, continue, ;, }, else, if, (, c, ==, '{', ), {, matchedLc, =, true, ;, break, ;, }]
[), {, matchedLc, =, true, ;, break, ;, }, else, {, break, ;, }, }, stream, ., ungetChar, (, c]
[==, '{', ), {, matchedLc, =, true, ;, break, ;, }, else, {, break, ;, }, }, stream, ., ungetChar]
[), {, matchedLc, =, true, ;, break, ;, }, else, {, break, ;, }, }, stream, ., ungetChar, (, c]
[=, true, ;, break, ;, }, else, {, break, ;, }, }, stream, ., ungetChar, (, c, ), ;, return]
[;, break, ;, }, else, {, break, ;, }, }, stream, ., ungetChar, (, c, ), ;, return, matchedLc, ;]
[;, return, matchedLc, ;, }, }]
[., ungetChar, (, c, ), ;, return, matchedLc, ;, }, }]
[), ;, return, matchedLc, ;, }, }]
[;, }, }]
