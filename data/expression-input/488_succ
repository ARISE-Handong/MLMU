[), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }, this, ., type, =, type, ;, this, ., order, =]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }, this, ., type, =, type, ;, this, .]
[), {, throw, new, IllegalArgumentException, (, "Null 'order' argument.", ), ;, }, this, ., type, =, type, ;, this, ., order, =]
[;, }, this, ., type, =, type, ;, this, ., order, =, order, ;, }, public, KeyedObjectComparatorType, getType, (, )]
[), ;, }, this, ., type, =, type, ;, this, ., order, =, order, ;, }, public, KeyedObjectComparatorType, getType, (]
[=, type, ;, this, ., order, =, order, ;, }, public, KeyedObjectComparatorType, getType, (, ), {, return, this, ., type]
[., type, =, type, ;, this, ., order, =, order, ;, }, public, KeyedObjectComparatorType, getType, (, ), {, return, this]
[;, this, ., order, =, order, ;, }, public, KeyedObjectComparatorType, getType, (, ), {, return, this, ., type, ;, }]
[=, order, ;, }, public, KeyedObjectComparatorType, getType, (, ), {, return, this, ., type, ;, }, public, SortOrder, getOrder, (]
[., order, =, order, ;, }, public, KeyedObjectComparatorType, getType, (, ), {, return, this, ., type, ;, }, public, SortOrder]
[;, }, public, KeyedObjectComparatorType, getType, (, ), {, return, this, ., type, ;, }, public, SortOrder, getOrder, (, ), {]
[;, }, public, SortOrder, getOrder, (, ), {, return, this, ., order, ;, }, public, int, compare, (, Object, o1]
[., type, ;, }, public, SortOrder, getOrder, (, ), {, return, this, ., order, ;, }, public, int, compare, (]
[;, }, public, int, compare, (, Object, o1, ,, Object, o2, ), {, if, (, o2, ==, null, ), {]
[., order, ;, }, public, int, compare, (, Object, o1, ,, Object, o2, ), {, if, (, o2, ==, null]
[), {, return, -, 1, ;, }, if, (, o1, ==, null, ), {, return, 1, ;, }, KeyedObject, ko1]
[==, null, ), {, return, -, 1, ;, }, if, (, o1, ==, null, ), {, return, 1, ;, }]
[), {, return, -, 1, ;, }, if, (, o1, ==, null, ), {, return, 1, ;, }, KeyedObject, ko1]
[;, }, if, (, o1, ==, null, ), {, return, 1, ;, }, KeyedObject, ko1, =, (, KeyedObject, ), o1]
[;, }, if, (, o1, ==, null, ), {, return, 1, ;, }, KeyedObject, ko1, =, (, KeyedObject, ), o1]
[), {, return, 1, ;, }, KeyedObject, ko1, =, (, KeyedObject, ), o1, ;, KeyedObject, ko2, =, (, KeyedObject, )]
[==, null, ), {, return, 1, ;, }, KeyedObject, ko1, =, (, KeyedObject, ), o1, ;, KeyedObject, ko2, =, (]
[), {, return, 1, ;, }, KeyedObject, ko1, =, (, KeyedObject, ), o1, ;, KeyedObject, ko2, =, (, KeyedObject, )]
[;, }, KeyedObject, ko1, =, (, KeyedObject, ), o1, ;, KeyedObject, ko2, =, (, KeyedObject, ), o2, ;, if, (]
[;, KeyedObject, ko2, =, (, KeyedObject, ), o2, ;, if, (, this, ., type, ==, KeyedObjectComparatorType, ., BY_KEY, ), {]
[;, KeyedObject, ko2, =, (, KeyedObject, ), o2, ;, if, (, this, ., type, ==, KeyedObjectComparatorType, ., BY_KEY, ), {]
[;, if, (, this, ., type, ==, KeyedObjectComparatorType, ., BY_KEY, ), {, if, (, this, ., order, ., equals, (]
[;, if, (, this, ., type, ==, KeyedObjectComparatorType, ., BY_KEY, ), {, if, (, this, ., order, ., equals, (]
[), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, return, ko1, ., getKey]
[==, KeyedObjectComparatorType, ., BY_KEY, ), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {]
[., type, ==, KeyedObjectComparatorType, ., BY_KEY, ), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, )]
[), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, return, ko1, ., getKey]
[., BY_KEY, ), {, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, return, ko1]
[), {, return, ko1, ., getKey, (, ), ., compareTo, (, ko2, ., getKey, (, ), ), ;, }, else]
[., equals, (, SortOrder, ., ASCENDING, ), ), {, return, ko1, ., getKey, (, ), ., compareTo, (, ko2, .]
[., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, return, ko1, ., getKey, (, ), ., compareTo, (]
[), ), {, return, ko1, ., getKey, (, ), ., compareTo, (, ko2, ., getKey, (, ), ), ;, }]
[., ASCENDING, ), ), {, return, ko1, ., getKey, (, ), ., compareTo, (, ko2, ., getKey, (, ), )]
[;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, return, ko2, .]
[., compareTo, (, ko2, ., getKey, (, ), ), ;, }, else, if, (, this, ., order, ., equals, (]
[., getKey, (, ), ., compareTo, (, ko2, ., getKey, (, ), ), ;, }, else, if, (, this, .]
[), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, return, ko2]
[., getKey, (, ), ), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, )]
[), {, return, ko2, ., getKey, (, ), ., compareTo, (, ko1, ., getKey, (, ), ), ;, }, else]
[., equals, (, SortOrder, ., DESCENDING, ), ), {, return, ko2, ., getKey, (, ), ., compareTo, (, ko1, .]
[., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, return, ko2, ., getKey, (, ), ., compareTo, (]
[), ), {, return, ko2, ., getKey, (, ), ., compareTo, (, ko1, ., getKey, (, ), ), ;, }]
[., DESCENDING, ), ), {, return, ko2, ., getKey, (, ), ., compareTo, (, ko1, ., getKey, (, ), )]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if, (, this, ., type, ==]
[., compareTo, (, ko1, ., getKey, (, ), ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;]
[., getKey, (, ), ., compareTo, (, ko1, ., getKey, (, ), ), ;, }, else, {, throw, new, IllegalArgumentException]
[), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if, (, this, ., type]
[., getKey, (, ), ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, if]
[;, }, }, else, if, (, this, ., type, ==, KeyedObjectComparatorType, ., BY_VALUE, ), {, Object, n1, =, ko1, .]
[), ;, }, }, else, if, (, this, ., type, ==, KeyedObjectComparatorType, ., BY_VALUE, ), {, Object, n1, =, ko1]
[), {, Object, n1, =, ko1, ., getObject, (, ), ;, Object, n2, =, ko2, ., getObject, (, ), ;]
[==, KeyedObjectComparatorType, ., BY_VALUE, ), {, Object, n1, =, ko1, ., getObject, (, ), ;, Object, n2, =, ko2, .]
[., type, ==, KeyedObjectComparatorType, ., BY_VALUE, ), {, Object, n1, =, ko1, ., getObject, (, ), ;, Object, n2, =]
[), {, Object, n1, =, ko1, ., getObject, (, ), ;, Object, n2, =, ko2, ., getObject, (, ), ;]
[., BY_VALUE, ), {, Object, n1, =, ko1, ., getObject, (, ), ;, Object, n2, =, ko2, ., getObject, (]
[;, Object, n2, =, ko2, ., getObject, (, ), ;, Comparable, c1, =, "FALLBACK", ;, if, (, n1, instanceof, Comparable]
[., getObject, (, ), ;, Object, n2, =, ko2, ., getObject, (, ), ;, Comparable, c1, =, "FALLBACK", ;, if]
[;, Comparable, c1, =, "FALLBACK", ;, if, (, n1, instanceof, Comparable, ), {, c1, =, (, Comparable, ), n1, ;]
[., getObject, (, ), ;, Comparable, c1, =, "FALLBACK", ;, if, (, n1, instanceof, Comparable, ), {, c1, =, (]
[;, if, (, n1, instanceof, Comparable, ), {, c1, =, (, Comparable, ), n1, ;, }, Comparable, c2, =, "FALLBACK"]
[), {, c1, =, (, Comparable, ), n1, ;, }, Comparable, c2, =, "FALLBACK", ;, if, (, n2, instanceof, Comparable]
[instanceof, Comparable, ), {, c1, =, (, Comparable, ), n1, ;, }, Comparable, c2, =, "FALLBACK", ;, if, (, n2]
[=, (, Comparable, ), n1, ;, }, Comparable, c2, =, "FALLBACK", ;, if, (, n2, instanceof, Comparable, ), {, c2]
[;, }, Comparable, c2, =, "FALLBACK", ;, if, (, n2, instanceof, Comparable, ), {, c2, =, (, Comparable, ), n2]
[;, }, Comparable, c2, =, "FALLBACK", ;, if, (, n2, instanceof, Comparable, ), {, c2, =, (, Comparable, ), n2]
[;, if, (, n2, instanceof, Comparable, ), {, c2, =, (, Comparable, ), n2, ;, }, if, (, n2, ==]
[), {, c2, =, (, Comparable, ), n2, ;, }, if, (, n2, ==, null, ), {, return, -, 1]
[instanceof, Comparable, ), {, c2, =, (, Comparable, ), n2, ;, }, if, (, n2, ==, null, ), {, return]
[=, (, Comparable, ), n2, ;, }, if, (, n2, ==, null, ), {, return, -, 1, ;, }, if]
[;, }, if, (, n2, ==, null, ), {, return, -, 1, ;, }, if, (, n1, ==, null, )]
[;, }, if, (, n2, ==, null, ), {, return, -, 1, ;, }, if, (, n1, ==, null, )]
[), {, return, -, 1, ;, }, if, (, n1, ==, null, ), {, return, 1, ;, }, if, (]
[==, null, ), {, return, -, 1, ;, }, if, (, n1, ==, null, ), {, return, 1, ;, }]
[), {, return, -, 1, ;, }, if, (, n1, ==, null, ), {, return, 1, ;, }, if, (]
[;, }, if, (, n1, ==, null, ), {, return, 1, ;, }, if, (, this, ., order, ., equals]
[;, }, if, (, n1, ==, null, ), {, return, 1, ;, }, if, (, this, ., order, ., equals]
[), {, return, 1, ;, }, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {]
[==, null, ), {, return, 1, ;, }, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, )]
[), {, return, 1, ;, }, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {]
[;, }, if, (, this, ., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, return, c1, ., compareTo]
[), {, return, c1, ., compareTo, (, c2, ), ;, }, else, if, (, this, ., order, ., equals, (]
[., equals, (, SortOrder, ., ASCENDING, ), ), {, return, c1, ., compareTo, (, c2, ), ;, }, else, if]
[., order, ., equals, (, SortOrder, ., ASCENDING, ), ), {, return, c1, ., compareTo, (, c2, ), ;, }]
[), ), {, return, c1, ., compareTo, (, c2, ), ;, }, else, if, (, this, ., order, ., equals]
[., ASCENDING, ), ), {, return, c1, ., compareTo, (, c2, ), ;, }, else, if, (, this, ., order]
[;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, return, c2, .]
[., compareTo, (, c2, ), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, )]
[), ;, }, else, if, (, this, ., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, return, c2]
[), {, return, c2, ., compareTo, (, c1, ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;]
[., equals, (, SortOrder, ., DESCENDING, ), ), {, return, c2, ., compareTo, (, c1, ), ;, }, else, {]
[., order, ., equals, (, SortOrder, ., DESCENDING, ), ), {, return, c2, ., compareTo, (, c1, ), ;, }]
[), ), {, return, c2, ., compareTo, (, c1, ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", )]
[., DESCENDING, ), ), {, return, c2, ., compareTo, (, c1, ), ;, }, else, {, throw, new, IllegalArgumentException, (]
[;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised type."]
[., compareTo, (, c1, ), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, {]
[), ;, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised sort order.", ), ;, }, }, else, {, throw, new, IllegalArgumentException, (]
[;, }, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised type.", ), ;, }, }, }]
[), ;, }, }, else, {, throw, new, IllegalArgumentException, (, "Unrecognised type.", ), ;, }, }, }]
[;, }, }, }]
[), ;, }, }, }]
