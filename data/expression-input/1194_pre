[Map, <, Node, ,, Function, >, functionsByNode, ;, private, boolean, computeBackwardGraph, ;, private, boolean, computeForwardGraph, ;, private, boolean, useNameReferenceGraph, =]
[functionsByNode, ;, private, boolean, computeBackwardGraph, ;, private, boolean, computeForwardGraph, ;, private, boolean, useNameReferenceGraph, =, false, ;, private, boolean, alreadyRun, =]
[private, boolean, useNameReferenceGraph, =, false, ;, private, boolean, alreadyRun, =, false, ;, @, VisibleForTesting, public, static, final, String, MAIN_FUNCTION_NAME, =]
[=, "{main}", ;, private, Function, mainFunction, ;, public, CallGraph, (, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {]
[=, "{main}", ;, private, Function, mainFunction, ;, public, CallGraph, (, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {]
[Function, mainFunction, ;, public, CallGraph, (, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (]
[Function, mainFunction, ;, public, CallGraph, (, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (]
[;, public, CallGraph, (, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (, computeForwardGraph, ||]
[(, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;]
[(, AbstractCompiler, compiler, ,, boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;]
[boolean, computeForwardGraph, ,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;, this, ., compiler, =]
[,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;]
[,, boolean, computeBackwardGraph, ), {, Preconditions, ., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;]
[{, Preconditions, ., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =]
[., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;]
[., checkArgument, (, computeForwardGraph, ||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;]
[||, computeBackwardGraph, ), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =]
[), ;, this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;]
[this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =]
[this, ., compiler, =, compiler, ;, this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =]
[this, ., computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;]
[computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =]
[computeForwardGraph, =, computeForwardGraph, ;, this, ., computeBackwardGraph, =, computeBackwardGraph, ;, callsitesByNode, =, Maps, ., newLinkedHashMap, (, ), ;, functionsByNode, =]
[), ;, functionsByNode, =, Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler, compiler, ), {, this, (]
[functionsByNode, =, Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[Maps, ., newLinkedHashMap, (, ), ;, }, public, CallGraph, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,, true, ,]
[,, true, ,, true, ), ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[,, true, ,, true, ), ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (]
[), ;, }, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (]
[}, @, Override, public, void, process, (, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, alreadyRun, ==]
[(, Node, externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, alreadyRun, ==, false, ), ;, DefinitionProvider, definitionProvider, =]
[externsRoot, ,, Node, jsRoot, ), {, Preconditions, ., checkState, (, alreadyRun, ==, false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (]
[Node, jsRoot, ), {, Preconditions, ., checkState, (, alreadyRun, ==, false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,]
[{, Preconditions, ., checkState, (, alreadyRun, ==, false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;]
[., checkState, (, alreadyRun, ==, false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (]
[(, alreadyRun, ==, false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,]
[false, ), ;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;]
[;, DefinitionProvider, definitionProvider, =, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation, (]
[=, constructDefinitionProvider, (, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation, (, definitionProvider, ), ;]
[(, externsRoot, ,, jsRoot, ), ;, createFunctionsAndCallsites, (, jsRoot, ,, definitionProvider, ), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =]
[), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {]
[), ;, fillInFunctionInformation, (, definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {]
[definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (]
[definitionProvider, ), ;, alreadyRun, =, true, ;, }, public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (]
[public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, return]
[public, Function, getFunctionForAstNode, (, Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, return]
[Node, functionNode, ), {, Preconditions, ., checkArgument, (, functionNode, ., isFunction, (, ), ), ;, return, functionsByNode, ., get, (]
[(, ), ), ;, return, functionsByNode, ., get, (, functionNode, ), ;, }, public, Function, getMainFunction, (, ), {, return]
[public, Function, getMainFunction, (, ), {, return, mainFunction, ;, }, public, Collection, <, Function, >, getAllFunctions, (, ), {, return]
[public, Function, getMainFunction, (, ), {, return, mainFunction, ;, }, public, Collection, <, Function, >, getAllFunctions, (, ), {, return]
[), ;, }, @, VisibleForTesting, public, Function, getUniqueFunctionWithName, (, final, String, desiredName, ), {, Collection, <, Function, >, functions, =]
[), ;, }, @, VisibleForTesting, public, Function, getUniqueFunctionWithName, (, final, String, desiredName, ), {, Collection, <, Function, >, functions, =]
[getUniqueFunctionWithName, (, final, String, desiredName, ), {, Collection, <, Function, >, functions, =, Collections2, ., <, Function, >, filter, (]
[desiredName, ), {, Collection, <, Function, >, functions, =, Collections2, ., <, Function, >, filter, (, getAllFunctions, (, ), ,]
[Predicate, <, Function, >, (, ), {, @, Override, public, boolean, apply, (, Function, function, ), {, String, functionName, =]
[Predicate, <, Function, >, (, ), {, @, Override, public, boolean, apply, (, Function, function, ), {, String, functionName, =]
[Override, public, boolean, apply, (, Function, function, ), {, String, functionName, =, function, ., getName, (, ), ;, if, (]
[Override, public, boolean, apply, (, Function, function, ), {, String, functionName, =, function, ., getName, (, ), ;, if, (]
[Override, public, boolean, apply, (, Function, function, ), {, String, functionName, =, function, ., getName, (, ), ;, if, (]
[boolean, apply, (, Function, function, ), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=]
[(, Function, function, ), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, &&]
[(, Function, function, ), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, &&]
[function, ), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, &&, desiredName, !=]
[functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, &&, desiredName, !=, null, ), {, return]
[functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, &&, desiredName, !=, null, ), {, return]
[getName, (, ), ;, if, (, functionName, !=, null, &&, desiredName, !=, null, ), {, return, desiredName, ., equals, (]
[!=, null, &&, desiredName, !=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return]
[!=, null, &&, desiredName, !=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return]
[&&, desiredName, !=, null, ), {, return, desiredName, ., equals, (, functionName, ), ;, }, else, {, return, desiredName, ==]
[equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }, }, ), ;, if, (]
[equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }, }, ), ;, if, (]
[equals, (, functionName, ), ;, }, else, {, return, desiredName, ==, functionName, ;, }, }, }, ), ;, if, (]
[else, {, return, desiredName, ==, functionName, ;, }, }, }, ), ;, if, (, functions, ., size, (, ), ==]
[==, functionName, ;, }, }, }, ), ;, if, (, functions, ., size, (, ), ==, 1, ), {, return]
[==, functionName, ;, }, }, }, ), ;, if, (, functions, ., size, (, ), ==, 1, ), {, return]
[==, functionName, ;, }, }, }, ), ;, if, (, functions, ., size, (, ), ==, 1, ), {, return]
[), ==, 1, ), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw]
[), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[), {, return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (]
[return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Found ", +]
[return, functions, ., iterator, (, ), ., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Found ", +]
[., next, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Found ", +, functions, ., size, (, ), +]
[(, ), ;, }, else, {, throw, new, IllegalStateException, (, "Found ", +, functions, ., size, (, ), +, " functions with name ", +]
[., size, (, ), +, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {]
[., size, (, ), +, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {]
[+, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (]
[+, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (]
[+, " functions with name ", +, desiredName, ), ;, }, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (]
[}, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (, callsiteNode, ., isCall, (, ), ||]
[}, }, public, Callsite, getCallsiteForAstNode, (, Node, callsiteNode, ), {, Preconditions, ., checkArgument, (, callsiteNode, ., isCall, (, ), ||]
[), {, Preconditions, ., checkArgument, (, callsiteNode, ., isCall, (, ), ||, callsiteNode, ., isNew, (, ), ), ;, return]
[), {, Preconditions, ., checkArgument, (, callsiteNode, ., isCall, (, ), ||, callsiteNode, ., isNew, (, ), ), ;, return]
[checkArgument, (, callsiteNode, ., isCall, (, ), ||, callsiteNode, ., isNew, (, ), ), ;, return, callsitesByNode, ., get, (]
[;, return, callsitesByNode, ., get, (, callsiteNode, ), ;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {, return]
[;, return, callsitesByNode, ., get, (, callsiteNode, ), ;, }, public, Collection, <, Callsite, >, getAllCallsites, (, ), {, return]
[return, callsitesByNode, ., values, (, ), ;, }, private, void, createFunctionsAndCallsites, (, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {]
[., values, (, ), ;, }, private, void, createFunctionsAndCallsites, (, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =]
[(, ), ;, }, private, void, createFunctionsAndCallsites, (, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =, createFunction, (]
[}, private, void, createFunctionsAndCallsites, (, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =, createFunction, (, jsRoot, ), ;]
[}, private, void, createFunctionsAndCallsites, (, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =, createFunction, (, jsRoot, ), ;]
[(, Node, jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =, createFunction, (, jsRoot, ), ;, NodeTraversal, ., traverse, (]
[jsRoot, ,, final, DefinitionProvider, provider, ), {, mainFunction, =, createFunction, (, jsRoot, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[final, DefinitionProvider, provider, ), {, mainFunction, =, createFunction, (, jsRoot, ), ;, NodeTraversal, ., traverse, (, compiler, ,, jsRoot, ,]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, int, nodeType, =]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, int, nodeType, =]
[t, ,, Node, n, ,, Node, parent, ), {, int, nodeType, =, n, ., getType, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, int, nodeType, =, n, ., getType, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, int, nodeType, =, n, ., getType, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, int, nodeType, =, n, ., getType, (, ), ;, if, (, nodeType, ==]
[Node, n, ,, Node, parent, ), {, int, nodeType, =, n, ., getType, (, ), ;, if, (, nodeType, ==]
[parent, ), {, int, nodeType, =, n, ., getType, (, ), ;, if, (, nodeType, ==, Token, ., CALL, ||]
[parent, ), {, int, nodeType, =, n, ., getType, (, ), ;, if, (, nodeType, ==, Token, ., CALL, ||]
[{, int, nodeType, =, n, ., getType, (, ), ;, if, (, nodeType, ==, Token, ., CALL, ||, nodeType, ==]
[{, int, nodeType, =, n, ., getType, (, ), ;, if, (, nodeType, ==, Token, ., CALL, ||, nodeType, ==]
[), ;, if, (, nodeType, ==, Token, ., CALL, ||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =]
[if, (, nodeType, ==, Token, ., CALL, ||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (]
[CALL, ||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =]
[CALL, ||, nodeType, ==, Token, ., NEW, ), {, Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =]
[Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function, containingFunction, =]
[Callsite, callsite, =, createCallsite, (, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function, containingFunction, =]
[(, n, ), ;, Node, containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function, containingFunction, =, functionsByNode, ., get, (]
[containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (]
[containingFunctionNode, =, t, ., getScopeRoot, (, ), ;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (]
[t, ., getScopeRoot, (, ), ;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==]
[(, ), ;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null, ), {]
[;, Function, containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null, ), {, containingFunction, =]
[containingFunction, =, functionsByNode, ., get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (]
[get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }]
[get, (, containingFunctionNode, ), ;, if, (, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }]
[;, if, (, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =]
[(, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;]
[(, containingFunction, ==, null, ), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;]
[), {, containingFunction, =, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (]
[=, createFunction, (, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;]
[(, containingFunctionNode, ), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (]
[), ;, }, callsite, ., containingFunction, =, containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,]
[containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if, (]
[containingFunction, ;, containingFunction, ., addCallsiteInFunction, (, callsite, ), ;, connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if, (]
[connectCallsiteToTargets, (, callsite, ,, provider, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, if, (]
[(, callsite, ,, provider, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, if, (, !]
[(, callsite, ,, provider, ), ;, }, else, if, (, n, ., isFunction, (, ), ), {, if, (, !]
[), ;, }, else, if, (, n, ., isFunction, (, ), ), {, if, (, !, functionsByNode, ., containsKey, (]
[if, (, n, ., isFunction, (, ), ), {, if, (, !, functionsByNode, ., containsKey, (, n, ), ), {]
[n, ., isFunction, (, ), ), {, if, (, !, functionsByNode, ., containsKey, (, n, ), ), {, createFunction, (]
[), ;, }, }, }, }, ), ;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =]
[}, }, }, ), ;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =, new, Function, (]
[), ;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =, new, Function, (, functionNode, ), ;]
[), ;, }, private, Function, createFunction, (, Node, functionNode, ), {, Function, function, =, new, Function, (, functionNode, ), ;]
[Function, createFunction, (, Node, functionNode, ), {, Function, function, =, new, Function, (, functionNode, ), ;, functionsByNode, ., put, (]
[(, Node, functionNode, ), {, Function, function, =, new, Function, (, functionNode, ), ;, functionsByNode, ., put, (, functionNode, ,]
[{, Function, function, =, new, Function, (, functionNode, ), ;, functionsByNode, ., put, (, functionNode, ,, function, ), ;, return]
[functionNode, ,, function, ), ;, return, function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =]
[), ;, return, function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (]
[function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (, callsiteNode, ), ;]
[function, ;, }, private, Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (, callsiteNode, ), ;]
[Callsite, createCallsite, (, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (, callsiteNode, ), ;, callsitesByNode, ., put, (]
[(, Node, callsiteNode, ), {, Callsite, callsite, =, new, Callsite, (, callsiteNode, ), ;, callsitesByNode, ., put, (, callsiteNode, ,]
[{, Callsite, callsite, =, new, Callsite, (, callsiteNode, ), ;, callsitesByNode, ., put, (, callsiteNode, ,, callsite, ), ;, return]
[callsite, ;, }, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection, <, Definition, >, definitions, =]
[}, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection, <, Definition, >, definitions, =, lookupDefinitionsForTargetsOfCall, (]
[}, private, void, connectCallsiteToTargets, (, Callsite, callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection, <, Definition, >, definitions, =, lookupDefinitionsForTargetsOfCall, (]
[callsite, ,, DefinitionProvider, definitionProvider, ), {, Collection, <, Definition, >, definitions, =, lookupDefinitionsForTargetsOfCall, (, callsite, ., getAstNode, (, ), ,]
[{, Collection, <, Definition, >, definitions, =, lookupDefinitionsForTargetsOfCall, (, callsite, ., getAstNode, (, ), ,, definitionProvider, ), ;, if, (]
[{, Collection, <, Definition, >, definitions, =, lookupDefinitionsForTargetsOfCall, (, callsite, ., getAstNode, (, ), ,, definitionProvider, ), ;, if, (]
[<, Definition, >, definitions, =, lookupDefinitionsForTargetsOfCall, (, callsite, ., getAstNode, (, ), ,, definitionProvider, ), ;, if, (, definitions, ==]
[definitions, =, lookupDefinitionsForTargetsOfCall, (, callsite, ., getAstNode, (, ), ,, definitionProvider, ), ;, if, (, definitions, ==, null, ), {]
[definitions, =, lookupDefinitionsForTargetsOfCall, (, callsite, ., getAstNode, (, ), ,, definitionProvider, ), ;, if, (, definitions, ==, null, ), {]
[callsite, ., getAstNode, (, ), ,, definitionProvider, ), ;, if, (, definitions, ==, null, ), {, callsite, ., hasUnknownTarget, =]
[(, definitions, ==, null, ), {, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition, definition, :]
[{, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition, definition, :, definitions, ), {, if, (]
[{, callsite, ., hasUnknownTarget, =, true, ;, }, else, {, for, (, Definition, definition, :, definitions, ), {, if, (]
[}, else, {, for, (, Definition, definition, :, definitions, ), {, if, (, definition, ., isExtern, (, ), ), {]
[}, else, {, for, (, Definition, definition, :, definitions, ), {, if, (, definition, ., isExtern, (, ), ), {]
[(, Definition, definition, :, definitions, ), {, if, (, definition, ., isExtern, (, ), ), {, callsite, ., hasExternTarget, =]
[(, definition, ., isExtern, (, ), ), {, callsite, ., hasExternTarget, =, true, ;, }, else, {, Node, target, =]
[(, definition, ., isExtern, (, ), ), {, callsite, ., hasExternTarget, =, true, ;, }, else, {, Node, target, =]
[callsite, ., hasExternTarget, =, true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (]
[callsite, ., hasExternTarget, =, true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (]
[callsite, ., hasExternTarget, =, true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (]
[hasExternTarget, =, true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (, target, !=]
[true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (, target, !=, null, &&]
[true, ;, }, else, {, Node, target, =, definition, ., getRValue, (, ), ;, if, (, target, !=, null, &&]
[getRValue, (, ), ;, if, (, target, !=, null, &&, target, ., isFunction, (, ), ), {, Function, targetFunction, =]
[getRValue, (, ), ;, if, (, target, !=, null, &&, target, ., isFunction, (, ), ), {, Function, targetFunction, =]
[if, (, target, !=, null, &&, target, ., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (]
[&&, target, ., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (]
[&&, target, ., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (]
[., isFunction, (, ), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (, targetFunction, ==]
[), ), {, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (, targetFunction, ==, null, ), {]
[{, Function, targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (, targetFunction, ==, null, ), {, targetFunction, =]
[targetFunction, =, functionsByNode, ., get, (, target, ), ;, if, (, targetFunction, ==, null, ), {, targetFunction, =, createFunction, (]
[target, ), ;, if, (, targetFunction, ==, null, ), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (]
[if, (, targetFunction, ==, null, ), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, ), {]
[if, (, targetFunction, ==, null, ), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, ), {]
[null, ), {, targetFunction, =, createFunction, (, target, ), ;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (]
[(, target, ), ;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }, if, (]
[;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {]
[;, }, if, (, computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {]
[computeForwardGraph, ), {, callsite, ., addPossibleTarget, (, targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (]
[targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }, }, else, {]
[targetFunction, ), ;, }, if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }, }, else, {]
[if, (, computeBackwardGraph, ), {, targetFunction, ., addCallsitePossiblyTargetingFunction, (, callsite, ), ;, }, }, else, {, callsite, ., hasUnknownTarget, =]
[., hasUnknownTarget, =, true, ;, }, }, }, }, }, private, void, fillInFunctionInformation, (, DefinitionProvider, provider, ), {, if, (]
[}, }, }, }, private, void, fillInFunctionInformation, (, DefinitionProvider, provider, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraph, referenceGraph, =]
[}, private, void, fillInFunctionInformation, (, DefinitionProvider, provider, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraph, referenceGraph, =, (, NameReferenceGraph, )]
[), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraph, referenceGraph, =, (, NameReferenceGraph, ), provider, ;, for, (, Function, function, :]
[NameReferenceGraph, referenceGraph, =, (, NameReferenceGraph, ), provider, ;, for, (, Function, function, :, getAllFunctions, (, ), ), {, if, (]
[referenceGraph, =, (, NameReferenceGraph, ), provider, ;, for, (, Function, function, :, getAllFunctions, (, ), ), {, if, (, !]
[referenceGraph, =, (, NameReferenceGraph, ), provider, ;, for, (, Function, function, :, getAllFunctions, (, ), ), {, if, (, !]
[function, :, getAllFunctions, (, ), ), {, if, (, !, function, ., isMain, (, ), ), {, String, functionName, =]
[function, :, getAllFunctions, (, ), ), {, if, (, !, function, ., isMain, (, ), ), {, String, functionName, =]
[(, !, function, ., isMain, (, ), ), {, String, functionName, =, function, ., getName, (, ), ;, if, (]
[(, !, function, ., isMain, (, ), ), {, String, functionName, =, function, ., getName, (, ), ;, if, (]
[function, ., isMain, (, ), ), {, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=]
[{, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, ), {, Name, symbol, =]
[{, String, functionName, =, function, ., getName, (, ), ;, if, (, functionName, !=, null, ), {, Name, symbol, =]
[function, ., getName, (, ), ;, if, (, functionName, !=, null, ), {, Name, symbol, =, referenceGraph, ., getSymbol, (]
[(, ), ;, if, (, functionName, !=, null, ), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName, ), ;]
[;, if, (, functionName, !=, null, ), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName, ), ;, updateFunctionForName, (]
[(, functionName, !=, null, ), {, Name, symbol, =, referenceGraph, ., getSymbol, (, functionName, ), ;, updateFunctionForName, (, function, ,]
[(, functionName, ), ;, updateFunctionForName, (, function, ,, symbol, ), ;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =]
[;, updateFunctionForName, (, function, ,, symbol, ), ;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder, )]
[;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder, ), provider, ;, for, (, DefinitionSite, definitionSite, :]
[;, }, }, }, }, else, {, SimpleDefinitionFinder, finder, =, (, SimpleDefinitionFinder, ), provider, ;, for, (, DefinitionSite, definitionSite, :]
[(, SimpleDefinitionFinder, ), provider, ;, for, (, DefinitionSite, definitionSite, :, finder, ., getDefinitionSites, (, ), ), {, Definition, definition, =]
[(, SimpleDefinitionFinder, ), provider, ;, for, (, DefinitionSite, definitionSite, :, finder, ., getDefinitionSites, (, ), ), {, Definition, definition, =]
[DefinitionSite, definitionSite, :, finder, ., getDefinitionSites, (, ), ), {, Definition, definition, =, definitionSite, ., definition, ;, Function, function, =]
[:, finder, ., getDefinitionSites, (, ), ), {, Definition, definition, =, definitionSite, ., definition, ;, Function, function, =, lookupFunctionForDefinition, (]
[), ), {, Definition, definition, =, definitionSite, ., definition, ;, Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (]
[), ), {, Definition, definition, =, definitionSite, ., definition, ;, Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (]
[{, Definition, definition, =, definitionSite, ., definition, ;, Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (, function, !=]
[Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (, function, !=, null, ), {, for, (, UseSite, useSite, :]
[Function, function, =, lookupFunctionForDefinition, (, definition, ), ;, if, (, function, !=, null, ), {, for, (, UseSite, useSite, :]
[(, definition, ), ;, if, (, function, !=, null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (]
[if, (, function, !=, null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), ), {]
[function, !=, null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), ), {, updateFunctionForUse, (]
[null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), ), {, updateFunctionForUse, (, function, ,]
[null, ), {, for, (, UseSite, useSite, :, finder, ., getUseSites, (, definition, ), ), {, updateFunctionForUse, (, function, ,]
[), ;, }, }, }, }, }, private, void, updateFunctionForName, (, Function, function, ,, Name, name, ), {, if, (]
[), ;, }, }, }, }, }, private, void, updateFunctionForName, (, Function, function, ,, Name, name, ), {, if, (]
[private, void, updateFunctionForName, (, Function, function, ,, Name, name, ), {, if, (, name, ., isAliased, (, ), ), {]
[private, void, updateFunctionForName, (, Function, function, ,, Name, name, ), {, if, (, name, ., isAliased, (, ), ), {]
[Function, function, ,, Name, name, ), {, if, (, name, ., isAliased, (, ), ), {, function, ., isAliased, =]
[), {, if, (, name, ., isAliased, (, ), ), {, function, ., isAliased, =, true, ;, }, if, (]
[), {, if, (, name, ., isAliased, (, ), ), {, function, ., isAliased, =, true, ;, }, if, (]
[(, ), ), {, function, ., isAliased, =, true, ;, }, if, (, name, ., exposedToCallOrApply, (, ), ), {]
[(, ), ), {, function, ., isAliased, =, true, ;, }, if, (, name, ., exposedToCallOrApply, (, ), ), {]
[function, ., isAliased, =, true, ;, }, if, (, name, ., exposedToCallOrApply, (, ), ), {, function, ., isExposedToCallOrApply, =]
[isExposedToCallOrApply, =, true, ;, }, }, private, void, updateFunctionForUse, (, Function, function, ,, Node, useNode, ), {, Node, useParent, =]
[isExposedToCallOrApply, =, true, ;, }, }, private, void, updateFunctionForUse, (, Function, function, ,, Node, useNode, ), {, Node, useParent, =]
[(, Function, function, ,, Node, useNode, ), {, Node, useParent, =, useNode, ., getParent, (, ), ;, int, parentType, =]
[(, Function, function, ,, Node, useNode, ), {, Node, useParent, =, useNode, ., getParent, (, ), ;, int, parentType, =]
[Node, useParent, =, useNode, ., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (]
[Node, useParent, =, useNode, ., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (]
[useParent, =, useNode, ., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (]
[useParent, =, useNode, ., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (]
[useParent, =, useNode, ., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (]
[useNode, ., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==]
[useNode, ., getParent, (, ), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==]
[), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||]
[), ;, int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||]
[int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType, ==]
[int, parentType, =, useParent, ., getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType, ==]
[getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType, ==, Token, ., NEW, ), &&]
[getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType, ==, Token, ., NEW, ), &&]
[getType, (, ), ;, if, (, (, parentType, ==, Token, ., CALL, ||, parentType, ==, Token, ., NEW, ), &&]
[(, parentType, ==, Token, ., CALL, ||, parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==]
[parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (]
[parentType, ==, Token, ., NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (]
[NEW, ), &&, useParent, ., getFirstChild, (, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (]
[(, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, ), ), {, if, (]
[(, ), ==, useNode, ), {, }, else, if, (, NodeUtil, ., isGet, (, useParent, ), ), {, if, (]
[NodeUtil, ., isGet, (, useParent, ), ), {, if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =]
[NodeUtil, ., isGet, (, useParent, ), ), {, if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =]
[if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (]
[if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (]
[if, (, useParent, ., isGetProp, (, ), ), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (]
[isGetProp, (, ), ), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (]
[), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||]
[), {, Node, gramps, =, useParent, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||]
[=, useParent, ., getParent, (, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||, NodeUtil, ., isFunctionObjectCall, (]
[(, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {]
[(, ), ;, if, (, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {]
[(, NodeUtil, ., isFunctionObjectApply, (, gramps, ), ||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {, function, ., isExposedToCallOrApply, =]
[||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {]
[||, NodeUtil, ., isFunctionObjectCall, (, gramps, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {]
[(, gramps, ), ), {, function, ., isExposedToCallOrApply, =, true, ;, }, }, }, else, {, function, ., isAliased, =]
[else, {, function, ., isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (]
[else, {, function, ., isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (]
[else, {, function, ., isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (]
[function, ., isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (, definition, !=]
[isAliased, =, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (, definition, !=, null, &&]
[=, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (, definition, !=, null, &&, !]
[=, true, ;, }, }, private, Function, lookupFunctionForDefinition, (, Definition, definition, ), {, if, (, definition, !=, null, &&, !]
[definition, ), {, if, (, definition, !=, null, &&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =]
[definition, ), {, if, (, definition, !=, null, &&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =]
[&&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[&&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[&&, !, definition, ., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (]
[definition, ., isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, !=]
[isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, !=, null, &&]
[isExtern, (, ), ), {, Node, rValue, =, definition, ., getRValue, (, ), ;, if, (, rValue, !=, null, &&]
[getRValue, (, ), ;, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function, =]
[getRValue, (, ), ;, if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function, =]
[if, (, rValue, !=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (]
[!=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;]
[!=, null, &&, rValue, ., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;]
[., isFunction, (, ), ), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;, Preconditions, ., checkNotNull, (]
[), {, Function, function, =, functionsByNode, ., get, (, rValue, ), ;, Preconditions, ., checkNotNull, (, function, ), ;, return]
[functionsByNode, ., get, (, rValue, ), ;, Preconditions, ., checkNotNull, (, function, ), ;, return, function, ;, }, }, return]
[function, ;, }, }, return, null, ;, }, public, DiGraph, <, Function, ,, Callsite, >, getForwardDirectedGraph, (, ), {, return]
[}, }, return, null, ;, }, public, DiGraph, <, Function, ,, Callsite, >, getForwardDirectedGraph, (, ), {, return, constructDirectedGraph, (]
[{, return, constructDirectedGraph, (, true, ), ;, }, public, DiGraph, <, Function, ,, Callsite, >, getBackwardDirectedGraph, (, ), {, return]
[constructDirectedGraph, (, true, ), ;, }, public, DiGraph, <, Function, ,, Callsite, >, getBackwardDirectedGraph, (, ), {, return, constructDirectedGraph, (]
[caller, ,, Callsite, callsite, ,, Function, callee, ,, boolean, forward, ), {, Function, source, ;, Function, destination, ;, if, (]
[callsite, ,, Function, callee, ,, boolean, forward, ), {, Function, source, ;, Function, destination, ;, if, (, forward, ), {]
[Function, callee, ,, boolean, forward, ), {, Function, source, ;, Function, destination, ;, if, (, forward, ), {, source, =]
[,, boolean, forward, ), {, Function, source, ;, Function, destination, ;, if, (, forward, ), {, source, =, caller, ;]
[forward, ), {, Function, source, ;, Function, destination, ;, if, (, forward, ), {, source, =, caller, ;, destination, =]
[;, Function, destination, ;, if, (, forward, ), {, source, =, caller, ;, destination, =, callee, ;, }, else, {]
[destination, ;, if, (, forward, ), {, source, =, caller, ;, destination, =, callee, ;, }, else, {, source, =]
[if, (, forward, ), {, source, =, caller, ;, destination, =, callee, ;, }, else, {, source, =, callee, ;]
[forward, ), {, source, =, caller, ;, destination, =, callee, ;, }, else, {, source, =, callee, ;, destination, =]
[source, =, caller, ;, destination, =, callee, ;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }]
[source, =, caller, ;, destination, =, callee, ;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }]
[destination, =, callee, ;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }, digraph, ., connect, (]
[callee, ;, }, else, {, source, =, callee, ;, destination, =, caller, ;, }, digraph, ., connect, (, source, ,]
[}, else, {, source, =, callee, ;, destination, =, caller, ;, }, digraph, ., connect, (, source, ,, callsite, ,]
[DiGraph, <, Function, ,, Callsite, >, constructDirectedGraph, (, boolean, forward, ), {, DiGraph, <, Function, ,, Callsite, >, digraph, =]
[DiGraph, <, Function, ,, Callsite, >, constructDirectedGraph, (, boolean, forward, ), {, DiGraph, <, Function, ,, Callsite, >, digraph, =]
[{, DiGraph, <, Function, ,, Callsite, >, digraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, Function, function, :]
[Callsite, >, digraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, Function, function, :, getAllFunctions, (, ), ), {]
[Callsite, >, digraph, =, LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, Function, function, :, getAllFunctions, (, ), ), {]
[LinkedDirectedGraph, ., createWithoutAnnotations, (, ), ;, for, (, Function, function, :, getAllFunctions, (, ), ), {, digraph, ., createNode, (]
[for, (, Function, function, :, getAllFunctions, (, ), ), {, digraph, ., createNode, (, function, ), ;, }, if, (]
[), {, digraph, ., createNode, (, function, ), ;, }, if, (, computeForwardGraph, ), {, for, (, Function, caller, :]
[if, (, computeForwardGraph, ), {, for, (, Function, caller, :, getAllFunctions, (, ), ), {, for, (, Callsite, callsite, :]
[if, (, computeForwardGraph, ), {, for, (, Function, caller, :, getAllFunctions, (, ), ), {, for, (, Callsite, callsite, :]
[), ), {, for, (, Callsite, callsite, :, caller, ., getCallsitesInFunction, (, ), ), {, for, (, Function, callee, :]
[), ), {, for, (, Callsite, callsite, :, caller, ., getCallsitesInFunction, (, ), ), {, for, (, Function, callee, :]
[:, caller, ., getCallsitesInFunction, (, ), ), {, for, (, Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {]
[., getCallsitesInFunction, (, ), ), {, for, (, Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {, digraphConnect, (]
[(, ), ), {, for, (, Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {, digraphConnect, (, digraph, ,]
[), {, for, (, Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {, digraphConnect, (, digraph, ,, caller, ,]
[for, (, Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {, digraphConnect, (, digraph, ,, caller, ,, callsite, ,]
[Function, callee, :, callsite, ., getPossibleTargets, (, ), ), {, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee, ,]
[caller, ,, callsite, ,, callee, ,, forward, ), ;, }, }, }, }, else, {, for, (, Function, callee, :]
[}, }, }, else, {, for, (, Function, callee, :, getAllFunctions, (, ), ), {, for, (, Callsite, callsite, :]
[}, }, }, else, {, for, (, Function, callee, :, getAllFunctions, (, ), ), {, for, (, Callsite, callsite, :]
[getAllFunctions, (, ), ), {, for, (, Callsite, callsite, :, callee, ., getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =]
[getAllFunctions, (, ), ), {, for, (, Callsite, callsite, :, callee, ., getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =]
[(, Callsite, callsite, :, callee, ., getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =, callsite, ., getContainingFunction, (, ), ;]
[callsite, :, callee, ., getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =, callsite, ., getContainingFunction, (, ), ;, digraphConnect, (]
[callee, ., getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =, callsite, ., getContainingFunction, (, ), ;, digraphConnect, (, digraph, ,]
[getCallsitesPossiblyTargetingFunction, (, ), ), {, Function, caller, =, callsite, ., getContainingFunction, (, ), ;, digraphConnect, (, digraph, ,, caller, ,]
[), ), {, Function, caller, =, callsite, ., getContainingFunction, (, ), ;, digraphConnect, (, digraph, ,, caller, ,, callsite, ,]
[{, Function, caller, =, callsite, ., getContainingFunction, (, ), ;, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee, ,]
[(, ), ;, digraphConnect, (, digraph, ,, caller, ,, callsite, ,, callee, ,, forward, ), ;, }, }, }, return]
[}, }, }, return, digraph, ;, }, private, DefinitionProvider, constructDefinitionProvider, (, Node, externsRoot, ,, Node, jsRoot, ), {, if, (]
[}, private, DefinitionProvider, constructDefinitionProvider, (, Node, externsRoot, ,, Node, jsRoot, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphConstruction, =]
[constructDefinitionProvider, (, Node, externsRoot, ,, Node, jsRoot, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (]
[externsRoot, ,, Node, jsRoot, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[externsRoot, ,, Node, jsRoot, ), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[), {, if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphConstruction, ., process, (]
[if, (, useNameReferenceGraph, ), {, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphConstruction, ., process, (, externsRoot, ,]
[{, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphConstruction, ., process, (, externsRoot, ,, jsRoot, ), ;, return]
[{, NameReferenceGraphConstruction, graphConstruction, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, graphConstruction, ., process, (, externsRoot, ,, jsRoot, ), ;, return]
[process, (, externsRoot, ,, jsRoot, ), ;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =]
[,, jsRoot, ), ;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (]
[;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[;, return, graphConstruction, ., getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;]
[getNameReferenceGraph, (, ), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (]
[), ;, }, else, {, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externsRoot, ,]
[{, SimpleDefinitionFinder, defFinder, =, new, SimpleDefinitionFinder, (, compiler, ), ;, defFinder, ., process, (, externsRoot, ,, jsRoot, ), ;, return]
[;, return, defFinder, ;, }, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {]
[;, return, defFinder, ;, }, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {]
[}, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {, Preconditions, ., checkArgument, (]
[}, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {, Preconditions, ., checkArgument, (]
[}, }, private, Collection, <, Definition, >, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {, Preconditions, ., checkArgument, (]
[>, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {, Preconditions, ., checkArgument, (, callsite, ., isCall, (, ), ||]
[>, lookupDefinitionsForTargetsOfCall, (, Node, callsite, ,, DefinitionProvider, definitionProvider, ), {, Preconditions, ., checkArgument, (, callsite, ., isCall, (, ), ||]
[Preconditions, ., checkArgument, (, callsite, ., isCall, (, ), ||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =]
[Preconditions, ., checkArgument, (, callsite, ., isCall, (, ), ||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =]
[), ||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (]
[), ||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (]
[||, callsite, ., isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !]
[., isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||]
[isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (]
[isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (]
[isNew, (, ), ), ;, Node, targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (]
[targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (, targetExpression, ., isGetProp, (, ), ||]
[targetExpression, =, callsite, ., getFirstChild, (, ), ;, if, (, !, useNameReferenceGraph, ||, (, targetExpression, ., isGetProp, (, ), ||]
[targetExpression, ., isGetProp, (, ), ||, targetExpression, ., isName, (, ), ), ), {, Collection, <, Definition, >, definitions, =]
[targetExpression, ., isGetProp, (, ), ||, targetExpression, ., isName, (, ), ), ), {, Collection, <, Definition, >, definitions, =]
[), ||, targetExpression, ., isName, (, ), ), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (]
[(, ), ), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (]
[(, ), ), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (]
[(, ), ), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (]
[), ), {, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=]
[{, Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=, null, &&]
[Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=, null, &&, !]
[Collection, <, Definition, >, definitions, =, definitionProvider, ., getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=, null, &&, !]
[getDefinitionsReferencedAt, (, targetExpression, ), ;, if, (, definitions, !=, null, &&, !, definitions, ., isEmpty, (, ), ), {, return]
[if, (, definitions, !=, null, &&, !, definitions, ., isEmpty, (, ), ), {, return, definitions, ;, }, }, return]
[definitions, ;, }, }, return, null, ;, }, public, class, Function, {, private, Node, astNode, ;, private, boolean, isAliased, =]
[;, }, public, class, Function, {, private, Node, astNode, ;, private, boolean, isAliased, =, false, ;, private, boolean, isExposedToCallOrApply, =]
[Collection, <, Callsite, >, callsitesInFunction, ;, private, Collection, <, Callsite, >, callsitesPossiblyTargetingFunction, ;, private, Function, (, Node, functionAstNode, ), {]
[Callsite, >, callsitesInFunction, ;, private, Collection, <, Callsite, >, callsitesPossiblyTargetingFunction, ;, private, Function, (, Node, functionAstNode, ), {, astNode, =]
[;, private, Function, (, Node, functionAstNode, ), {, astNode, =, functionAstNode, ;, }, public, boolean, isMain, (, ), {, return]
[private, Function, (, Node, functionAstNode, ), {, astNode, =, functionAstNode, ;, }, public, boolean, isMain, (, ), {, return, (]
[private, Function, (, Node, functionAstNode, ), {, astNode, =, functionAstNode, ;, }, public, boolean, isMain, (, ), {, return, (]
[(, Node, functionAstNode, ), {, astNode, =, functionAstNode, ;, }, public, boolean, isMain, (, ), {, return, (, this, ==]
[(, Node, functionAstNode, ), {, astNode, =, functionAstNode, ;, }, public, boolean, isMain, (, ), {, return, (, this, ==]
[{, return, (, this, ==, CallGraph, ., this, ., mainFunction, ), ;, }, public, Node, getAstNode, (, ), {, return]
[;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Node, getBodyNode, (, ), {, if, (]
[), {, return, astNode, ;, }, public, Node, getBodyNode, (, ), {, if, (, isMain, (, ), ), {, return]
[public, Node, getBodyNode, (, ), {, if, (, isMain, (, ), ), {, return, astNode, ;, }, else, {, return]
[public, Node, getBodyNode, (, ), {, if, (, isMain, (, ), ), {, return, astNode, ;, }, else, {, return]
[), {, if, (, isMain, (, ), ), {, return, astNode, ;, }, else, {, return, NodeUtil, ., getFunctionBody, (]
[else, {, return, NodeUtil, ., getFunctionBody, (, astNode, ), ;, }, }, public, String, getName, (, ), {, if, (]
[(, astNode, ), ;, }, }, public, String, getName, (, ), {, if, (, isMain, (, ), ), {, return]
[public, String, getName, (, ), {, if, (, isMain, (, ), ), {, return, MAIN_FUNCTION_NAME, ;, }, else, {, return]
[public, String, getName, (, ), {, if, (, isMain, (, ), ), {, return, MAIN_FUNCTION_NAME, ;, }, else, {, return]
[), {, if, (, isMain, (, ), ), {, return, MAIN_FUNCTION_NAME, ;, }, else, {, return, NodeUtil, ., getFunctionName, (]
[NodeUtil, ., getFunctionName, (, astNode, ), ;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction, (, ), {, if, (]
[NodeUtil, ., getFunctionName, (, astNode, ), ;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction, (, ), {, if, (]
[getFunctionName, (, astNode, ), ;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction, (, ), {, if, (, callsitesInFunction, !=]
[;, }, }, public, Collection, <, Callsite, >, getCallsitesInFunction, (, ), {, if, (, callsitesInFunction, !=, null, ), {, return]
[Callsite, >, getCallsitesInFunction, (, ), {, if, (, callsitesInFunction, !=, null, ), {, return, callsitesInFunction, ;, }, else, {, return]
[Callsite, >, getCallsitesInFunction, (, ), {, if, (, callsitesInFunction, !=, null, ), {, return, callsitesInFunction, ;, }, else, {, return]
[{, return, ImmutableList, ., of, (, ), ;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, ), {, if, (]
[{, return, ImmutableList, ., of, (, ), ;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, ), {, if, (]
[ImmutableList, ., of, (, ), ;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, ), {, if, (, callsitesInFunction, ==]
[(, ), ;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, ), {, if, (, callsitesInFunction, ==, null, ), {]
[;, }, }, private, void, addCallsiteInFunction, (, Callsite, callsite, ), {, if, (, callsitesInFunction, ==, null, ), {, callsitesInFunction, =]
[), {, if, (, callsitesInFunction, ==, null, ), {, callsitesInFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }]
[), {, if, (, callsitesInFunction, ==, null, ), {, callsitesInFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }]
[callsitesInFunction, ==, null, ), {, callsitesInFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesInFunction, ., add, (]
[}, callsitesInFunction, ., add, (, callsite, ), ;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (]
[callsite, ), ;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (, computeBackwardGraph, ), {, if, (]
[callsite, ), ;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (, computeBackwardGraph, ), {, if, (]
[;, }, public, Collection, <, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (, computeBackwardGraph, ), {, if, (, callsitesPossiblyTargetingFunction, !=]
[<, Callsite, >, getCallsitesPossiblyTargetingFunction, (, ), {, if, (, computeBackwardGraph, ), {, if, (, callsitesPossiblyTargetingFunction, !=, null, ), {, return]
[{, if, (, computeBackwardGraph, ), {, if, (, callsitesPossiblyTargetingFunction, !=, null, ), {, return, callsitesPossiblyTargetingFunction, ;, }, else, {, return]
[{, if, (, computeBackwardGraph, ), {, if, (, callsitesPossiblyTargetingFunction, !=, null, ), {, return, callsitesPossiblyTargetingFunction, ;, }, else, {, return]
[), {, return, callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw]
[callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (]
[callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (]
[callsitesPossiblyTargetingFunction, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (]
[}, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +]
[{, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +, "getCallsitesPossiblyTargetingFunction() on a Function ", +]
[new, UnsupportedOperationException, (, "Cannot call ", +, "getCallsitesPossiblyTargetingFunction() on a Function ", +, "from a non-backward CallGraph", ), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {]
[new, UnsupportedOperationException, (, "Cannot call ", +, "getCallsitesPossiblyTargetingFunction() on a Function ", +, "from a non-backward CallGraph", ), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {]
[+, "getCallsitesPossiblyTargetingFunction() on a Function ", +, "from a non-backward CallGraph", ), ;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (]
[;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if, (]
[;, }, }, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if, (]
[}, private, void, addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if, (, callsitesPossiblyTargetingFunction, ==]
[addCallsitePossiblyTargetingFunction, (, Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if, (, callsitesPossiblyTargetingFunction, ==, null, ), {]
[Callsite, callsite, ), {, Preconditions, ., checkState, (, computeBackwardGraph, ), ;, if, (, callsitesPossiblyTargetingFunction, ==, null, ), {, callsitesPossiblyTargetingFunction, =]
[), ;, if, (, callsitesPossiblyTargetingFunction, ==, null, ), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }]
[), ;, if, (, callsitesPossiblyTargetingFunction, ==, null, ), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }]
[callsitesPossiblyTargetingFunction, ==, null, ), {, callsitesPossiblyTargetingFunction, =, new, LinkedList, <, Callsite, >, (, ), ;, }, callsitesPossiblyTargetingFunction, ., add, (]
[>, (, ), ;, }, callsitesPossiblyTargetingFunction, ., add, (, callsite, ), ;, }, public, boolean, isAliased, (, ), {, return]
[), ;, }, public, boolean, isAliased, (, ), {, return, isAliased, ;, }, public, boolean, isExposedToCallOrApply, (, ), {, return]
[(, ), {, return, isExposedToCallOrApply, ;, }, }, public, class, Callsite, {, private, Node, astNode, ;, private, boolean, hasUnknownTarget, =]
[}, }, public, class, Callsite, {, private, Node, astNode, ;, private, boolean, hasUnknownTarget, =, false, ;, private, boolean, hasExternTarget, =]
[private, Node, astNode, ;, private, boolean, hasUnknownTarget, =, false, ;, private, boolean, hasExternTarget, =, false, ;, private, Function, containingFunction, =]
[private, Function, containingFunction, =, null, ;, private, Collection, <, Function, >, possibleTargets, ;, private, Callsite, (, Node, callsiteAstNode, ), {]
[containingFunction, =, null, ;, private, Collection, <, Function, >, possibleTargets, ;, private, Callsite, (, Node, callsiteAstNode, ), {, astNode, =]
[;, private, Callsite, (, Node, callsiteAstNode, ), {, astNode, =, callsiteAstNode, ;, }, public, Node, getAstNode, (, ), {, return]
[callsiteAstNode, ;, }, public, Node, getAstNode, (, ), {, return, astNode, ;, }, public, Function, getContainingFunction, (, ), {, return]
[Function, getContainingFunction, (, ), {, return, containingFunction, ;, }, public, Collection, <, Function, >, getPossibleTargets, (, ), {, if, (]
[return, containingFunction, ;, }, public, Collection, <, Function, >, getPossibleTargets, (, ), {, if, (, computeForwardGraph, ), {, if, (]
[return, containingFunction, ;, }, public, Collection, <, Function, >, getPossibleTargets, (, ), {, if, (, computeForwardGraph, ), {, if, (]
[;, }, public, Collection, <, Function, >, getPossibleTargets, (, ), {, if, (, computeForwardGraph, ), {, if, (, possibleTargets, !=]
[<, Function, >, getPossibleTargets, (, ), {, if, (, computeForwardGraph, ), {, if, (, possibleTargets, !=, null, ), {, return]
[{, if, (, computeForwardGraph, ), {, if, (, possibleTargets, !=, null, ), {, return, possibleTargets, ;, }, else, {, return]
[{, if, (, computeForwardGraph, ), {, if, (, possibleTargets, !=, null, ), {, return, possibleTargets, ;, }, else, {, return]
[), {, return, possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw]
[possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (]
[possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (]
[possibleTargets, ;, }, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (]
[}, else, {, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +]
[{, return, ImmutableList, ., of, (, ), ;, }, }, else, {, throw, new, UnsupportedOperationException, (, "Cannot call ", +, "getPossibleTargets() on a Callsite from a non-forward ", +]
[new, UnsupportedOperationException, (, "Cannot call ", +, "getPossibleTargets() on a Callsite from a non-forward ", +, "CallGraph", ), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {]
[new, UnsupportedOperationException, (, "Cannot call ", +, "getPossibleTargets() on a Callsite from a non-forward ", +, "CallGraph", ), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {]
[+, "getPossibleTargets() on a Callsite from a non-forward ", +, "CallGraph", ), ;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (]
[;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if, (]
[;, }, }, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if, (]
[}, private, void, addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if, (, possibleTargets, ==]
[addPossibleTarget, (, Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if, (, possibleTargets, ==, null, ), {]
[Function, target, ), {, Preconditions, ., checkState, (, computeForwardGraph, ), ;, if, (, possibleTargets, ==, null, ), {, possibleTargets, =]
[), ;, if, (, possibleTargets, ==, null, ), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }]
[), ;, if, (, possibleTargets, ==, null, ), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }]
[possibleTargets, ==, null, ), {, possibleTargets, =, new, LinkedList, <, Function, >, (, ), ;, }, possibleTargets, ., add, (]
[>, (, ), ;, }, possibleTargets, ., add, (, target, ), ;, }, public, boolean, hasUnknownTarget, (, ), {, return]
[), ;, }, public, boolean, hasUnknownTarget, (, ), {, return, hasUnknownTarget, ;, }, public, boolean, hasExternTarget, (, ), {, return]
