[., stat, ., descriptive, ., summary, ., SumOfSquares, ;, public, final, class, StatUtils, {, private, static, final, UnivariateStatistic, SUM, =]
[class, StatUtils, {, private, static, final, UnivariateStatistic, SUM, =, new, Sum, (, ), ;, private, static, final, UnivariateStatistic, SUM_OF_SQUARES, =]
[(, ), ;, private, static, final, UnivariateStatistic, SUM_OF_SQUARES, =, new, SumOfSquares, (, ), ;, private, static, final, UnivariateStatistic, PRODUCT, =]
[(, ), ;, private, static, final, UnivariateStatistic, PRODUCT, =, new, Product, (, ), ;, private, static, final, UnivariateStatistic, SUM_OF_LOGS, =]
[(, ), ;, private, static, final, UnivariateStatistic, SUM_OF_LOGS, =, new, SumOfLogs, (, ), ;, private, static, final, UnivariateStatistic, MIN, =]
[(, ), ;, private, static, final, UnivariateStatistic, MIN, =, new, Min, (, ), ;, private, static, final, UnivariateStatistic, MAX, =]
[(, ), ;, private, static, final, UnivariateStatistic, MAX, =, new, Max, (, ), ;, private, static, final, UnivariateStatistic, MEAN, =]
[(, ), ;, private, static, final, UnivariateStatistic, MEAN, =, new, Mean, (, ), ;, private, static, final, Variance, VARIANCE, =]
[(, ), ;, private, static, final, Variance, VARIANCE, =, new, Variance, (, ), ;, private, static, final, Percentile, PERCENTILE, =]
[(, ), ;, private, static, final, Percentile, PERCENTILE, =, new, Percentile, (, ), ;, private, static, final, GeometricMean, GEOMETRIC_MEAN, =]
[StatUtils, (, ), {, }, public, static, double, sum, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[StatUtils, (, ), {, }, public, static, double, sum, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, sum, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, SUM, ., evaluate, (]
[sum, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[sum, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM, ., evaluate, (, values, ,, begin, ,]
[,, length, ), ;, }, public, static, double, sumSq, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, length, ), ;, }, public, static, double, sumSq, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, sumSq, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, SUM_OF_SQUARES, ., evaluate, (]
[sumSq, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[sumSq, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM_OF_SQUARES, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM_OF_SQUARES, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM_OF_SQUARES, ., evaluate, (, values, ,, begin, ,]
[,, length, ), ;, }, public, static, double, product, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, length, ), ;, }, public, static, double, product, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, product, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, PRODUCT, ., evaluate, (]
[product, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[product, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, PRODUCT, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, PRODUCT, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, PRODUCT, ., evaluate, (, values, ,, begin, ,]
[,, length, ), ;, }, public, static, double, sumLog, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, length, ), ;, }, public, static, double, sumLog, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, sumLog, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, SUM_OF_LOGS, ., evaluate, (]
[sumLog, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[sumLog, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM_OF_LOGS, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM_OF_LOGS, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, SUM_OF_LOGS, ., evaluate, (, values, ,, begin, ,]
[,, length, ), ;, }, public, static, double, mean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, length, ), ;, }, public, static, double, mean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, mean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MEAN, ., evaluate, (]
[mean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[mean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MEAN, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MEAN, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MEAN, ., evaluate, (, values, ,, begin, ,]
[,, length, ), ;, }, public, static, double, geometricMean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, length, ), ;, }, public, static, double, geometricMean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, geometricMean, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, GEOMETRIC_MEAN, ., evaluate, (]
[geometricMean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[geometricMean, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, GEOMETRIC_MEAN, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, GEOMETRIC_MEAN, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, GEOMETRIC_MEAN, ., evaluate, (, values, ,, begin, ,]
[,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, length, ), ;, }, public, static, double, variance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, variance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (]
[variance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[variance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (, values, ,, begin, ,]
[[, ], values, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (]
[mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (, values, ,, mean, ,]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (, values, ,, mean, ,, begin, ,]
[}, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, variance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return]
[variance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (]
[final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, VARIANCE, ., evaluate, (, values, ,]
[,, mean, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, mean, ), ;, }, public, static, double, populationVariance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[;, }, public, static, double, populationVariance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, new, Variance, (]
[populationVariance, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (]
[populationVariance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[populationVariance, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (, values, ,]
[final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (, values, ,, begin, ,]
[[, ], values, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[,, final, double, mean, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (]
[begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (, values, ,]
[final, int, length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (, values, ,, mean, ,]
[length, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (, values, ,, mean, ,, begin, ,]
[}, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return]
[double, populationVariance, (, final, double, [, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, new, Variance, (]
[[, ], values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (]
[values, ,, final, double, mean, ), throws, MathIllegalArgumentException, {, return, new, Variance, (, false, ), ., evaluate, (, values, ,]
[,, mean, ), ;, }, public, static, double, max, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, mean, ), ;, }, public, static, double, max, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, max, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MAX, ., evaluate, (]
[max, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[max, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MAX, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MAX, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MAX, ., evaluate, (, values, ,, begin, ,]
[,, length, ), ;, }, public, static, double, min, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[,, length, ), ;, }, public, static, double, min, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, min, (, final, double, [, ], values, ), throws, MathIllegalArgumentException, {, return, MIN, ., evaluate, (]
[min, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[min, (, final, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MIN, ., evaluate, (]
[values, ,, final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MIN, ., evaluate, (, values, ,]
[final, int, begin, ,, final, int, length, ), throws, MathIllegalArgumentException, {, return, MIN, ., evaluate, (, values, ,, begin, ,]
[}, public, static, double, percentile, (, final, double, [, ], values, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return]
[}, public, static, double, percentile, (, final, double, [, ], values, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return]
[percentile, (, final, double, [, ], values, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return, PERCENTILE, ., evaluate, (]
[final, double, [, ], values, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return, PERCENTILE, ., evaluate, (, values, ,]
[[, ], values, ,, final, int, begin, ,, final, int, length, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return]
[[, ], values, ,, final, int, begin, ,, final, int, length, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return]
[final, int, begin, ,, final, int, length, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return, PERCENTILE, ., evaluate, (]
[begin, ,, final, int, length, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return, PERCENTILE, ., evaluate, (, values, ,]
[final, int, length, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return, PERCENTILE, ., evaluate, (, values, ,, begin, ,]
[length, ,, final, double, p, ), throws, MathIllegalArgumentException, {, return, PERCENTILE, ., evaluate, (, values, ,, begin, ,, length, ,]
[final, double, [, ], sample1, ,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, int, n, =]
[final, double, [, ], sample1, ,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, int, n, =]
[final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, int, n, =, sample1, ., length, ;, if, (]
[final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, int, n, =, sample1, ., length, ;, if, (]
[[, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, int, n, =, sample1, ., length, ;, if, (, n, !=]
[[, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, int, n, =, sample1, ., length, ;, if, (, n, !=]
[,, NoDataException, {, int, n, =, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw]
[int, n, =, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (]
[=, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,]
[=, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,]
[!=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (]
[!=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <=]
[throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <=, 0, ), {, throw]
[(, n, ,, sample2, ., length, ), ;, }, if, (, n, <=, 0, ), {, throw, new, NoDataException, (]
[(, n, ,, sample2, ., length, ), ;, }, if, (, n, <=, 0, ), {, throw, new, NoDataException, (]
[if, (, n, <=, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =]
[throw, new, NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int, i, =]
[NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;]
[NoDataException, (, LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;]
[LocalizedFormats, ., INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[INSUFFICIENT_DIMENSION, ), ;, }, double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, result, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, result, +=]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, result, +=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, result, +=, sample1, []
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, result, +=, sample1, [, i, ], -]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, result, +=, sample1, [, i, ], -]
[=, 0, ;, i, <, n, ;, i, ++, ), {, result, +=, sample1, [, i, ], -, sample2, []
[n, ;, i, ++, ), {, result, +=, sample1, [, i, ], -, sample2, [, i, ], ;, }, return]
[meanDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, return]
[meanDifference, (, final, double, [, ], sample1, ,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, return]
[final, double, [, ], sample1, ,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, return, sumDifference, (]
[[, ], sample1, ,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, return, sumDifference, (, sample1, ,]
[,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, return, sumDifference, (, sample1, ,, sample2, ), /]
[,, final, double, [, ], sample2, ), throws, DimensionMismatchException, ,, NoDataException, {, return, sumDifference, (, sample1, ,, sample2, ), /]
[], sample1, ,, final, double, [, ], sample2, ,, double, meanDifference, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, double, sum1, =]
[[, ], sample2, ,, double, meanDifference, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, double, sum1, =, 0d, ;, double, sum2, =]
[meanDifference, ), throws, DimensionMismatchException, ,, NumberIsTooSmallException, {, double, sum1, =, 0d, ;, double, sum2, =, 0d, ;, double, diff, =]
[NumberIsTooSmallException, {, double, sum1, =, 0d, ;, double, sum2, =, 0d, ;, double, diff, =, 0d, ;, int, n, =]
[NumberIsTooSmallException, {, double, sum1, =, 0d, ;, double, sum2, =, 0d, ;, double, diff, =, 0d, ;, int, n, =]
[;, double, sum2, =, 0d, ;, double, diff, =, 0d, ;, int, n, =, sample1, ., length, ;, if, (]
[;, double, sum2, =, 0d, ;, double, diff, =, 0d, ;, int, n, =, sample1, ., length, ;, if, (]
[sum2, =, 0d, ;, double, diff, =, 0d, ;, int, n, =, sample1, ., length, ;, if, (, n, !=]
[sum2, =, 0d, ;, double, diff, =, 0d, ;, int, n, =, sample1, ., length, ;, if, (, n, !=]
[=, 0d, ;, int, n, =, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw]
[int, n, =, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (]
[=, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,]
[=, sample1, ., length, ;, if, (, n, !=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,]
[!=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (]
[!=, sample2, ., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (]
[., length, ), {, throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <]
[throw, new, DimensionMismatchException, (, n, ,, sample2, ., length, ), ;, }, if, (, n, <, 2, ), {, throw]
[(, n, ,, sample2, ., length, ), ;, }, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException, (]
[,, sample2, ., length, ), ;, }, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException, (, n, ,]
[., length, ), ;, }, if, (, n, <, 2, ), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,]
[2, ), {, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =]
[{, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =, 0, ;]
[{, throw, new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =, 0, ;]
[new, NumberIsTooSmallException, (, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, n, ,, 2, ,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[,, true, ), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =]
[), ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =]
[}, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =, sample1, []
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -]
[=, 0, ;, i, <, n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, []
[i, <, n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;]
[n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=]
[n, ;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=]
[;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (]
[;, i, ++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (]
[++, ), {, diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -]
[diff, =, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *]
[=, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (]
[=, sample1, [, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (]
[[, i, ], -, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -]
[-, sample2, [, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;]
[[, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=]
[[, i, ], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=]
[], ;, sum1, +=, (, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -]
[(, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return]
[(, diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return]
[diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (]
[diff, -, meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (]
[meanDifference, ), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -]
[), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (]
[), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (]
[), *, (, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (]
[(, diff, -, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *]
[-, meanDifference, ), ;, sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /]
[sum2, +=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /]
[+=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /, (]
[+=, diff, -, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /, (]
[-, meanDifference, ;, }, return, (, sum1, -, (, sum2, *, sum2, /, n, ), ), /, (, n, -]
[), ;, }, public, static, double, [, ], normalize, (, final, double, [, ], sample, ), {, DescriptiveStatistics, stats, =]
[final, double, [, ], sample, ), {, DescriptiveStatistics, stats, =, new, DescriptiveStatistics, (, ), ;, for, (, int, i, =]
[[, ], sample, ), {, DescriptiveStatistics, stats, =, new, DescriptiveStatistics, (, ), ;, for, (, int, i, =, 0, ;]
[[, ], sample, ), {, DescriptiveStatistics, stats, =, new, DescriptiveStatistics, (, ), ;, for, (, int, i, =, 0, ;]
[sample, ), {, DescriptiveStatistics, stats, =, new, DescriptiveStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[sample, ), {, DescriptiveStatistics, stats, =, new, DescriptiveStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[stats, =, new, DescriptiveStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;]
[stats, =, new, DescriptiveStatistics, (, ), ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, stats, ., addValue, (]
[(, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, stats, ., addValue, (]
[i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, stats, ., addValue, (, sample, []
[length, ;, i, ++, ), {, stats, ., addValue, (, sample, [, i, ], ), ;, }, double, mean, =]
[length, ;, i, ++, ), {, stats, ., addValue, (, sample, [, i, ], ), ;, }, double, mean, =]
[(, sample, [, i, ], ), ;, }, double, mean, =, stats, ., getMean, (, ), ;, double, standardDeviation, =]
[(, sample, [, i, ], ), ;, }, double, mean, =, stats, ., getMean, (, ), ;, double, standardDeviation, =]
[stats, ., getMean, (, ), ;, double, standardDeviation, =, stats, ., getStandardDeviation, (, ), ;, double, [, ], standardizedSample, =]
[(, ), ;, double, standardDeviation, =, stats, ., getStandardDeviation, (, ), ;, double, [, ], standardizedSample, =, new, double, []
[(, ), ;, double, standardDeviation, =, stats, ., getStandardDeviation, (, ), ;, double, [, ], standardizedSample, =, new, double, []
[), ;, double, [, ], standardizedSample, =, new, double, [, sample, ., length, ], ;, for, (, int, i, =]
[double, [, ], standardizedSample, =, new, double, [, sample, ., length, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], standardizedSample, =, new, double, [, sample, ., length, ], ;, for, (, int, i, =, 0, ;]
[], standardizedSample, =, new, double, [, sample, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], standardizedSample, =, new, double, [, sample, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, sample, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;]
[double, [, sample, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, []
[int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =]
[int, i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =]
[i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (]
[i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (]
[i, =, 0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (]
[0, ;, i, <, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, []
[<, sample, ., length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -]
[length, ;, i, ++, ), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -, mean, ), /]
[), {, standardizedSample, [, i, ], =, (, sample, [, i, ], -, mean, ), /, standardDeviation, ;, }, return]
[standardizedSample, ;, }, public, static, double, [, ], mode, (, double, [, ], sample, ), throws, MathIllegalArgumentException, {, if, (]
[standardizedSample, ;, }, public, static, double, [, ], mode, (, double, [, ], sample, ), throws, MathIllegalArgumentException, {, if, (]
[}, public, static, double, [, ], mode, (, double, [, ], sample, ), throws, MathIllegalArgumentException, {, if, (, sample, ==]
[[, ], mode, (, double, [, ], sample, ), throws, MathIllegalArgumentException, {, if, (, sample, ==, null, ), {, throw]
[(, double, [, ], sample, ), throws, MathIllegalArgumentException, {, if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (]
[(, double, [, ], sample, ), throws, MathIllegalArgumentException, {, if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (]
[MathIllegalArgumentException, {, if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return]
[if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, getMode, (]
[sample, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, getMode, (, sample, ,]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, getMode, (, sample, ,, 0, ,]
[null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, return, getMode, (, sample, ,, 0, ,]
[[, ], mode, (, double, [, ], sample, ,, final, int, begin, ,, final, int, length, ), {, if, (]
[[, ], mode, (, double, [, ], sample, ,, final, int, begin, ,, final, int, length, ), {, if, (]
[mode, (, double, [, ], sample, ,, final, int, begin, ,, final, int, length, ), {, if, (, sample, ==]
[], sample, ,, final, int, begin, ,, final, int, length, ), {, if, (, sample, ==, null, ), {, throw]
[final, int, begin, ,, final, int, length, ), {, if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (]
[final, int, begin, ,, final, int, length, ), {, if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (]
[{, if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (]
[{, if, (, sample, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (]
[(, sample, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw]
[new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (]
[new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (]
[., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,]
[., INPUT_ARRAY, ), ;, }, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,]
[}, if, (, begin, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf, (]
[{, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;, }, if, (]
[{, throw, new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;, }, if, (]
[new, NotPositiveException, (, LocalizedFormats, ., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;, }, if, (, length, <]
[., START_POSITION, ,, Integer, ., valueOf, (, begin, ), ), ;, }, if, (, length, <, 0, ), {, throw]
[Integer, ., valueOf, (, begin, ), ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (]
[Integer, ., valueOf, (, begin, ), ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (]
[begin, ), ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,]
[begin, ), ), ;, }, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,]
[}, if, (, length, <, 0, ), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (]
[), {, throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;, }, return]
[throw, new, NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;, }, return, getMode, (]
[NotPositiveException, (, LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;, }, return, getMode, (, sample, ,]
[LocalizedFormats, ., LENGTH, ,, Integer, ., valueOf, (, length, ), ), ;, }, return, getMode, (, sample, ,, begin, ,]
[], getMode, (, double, [, ], values, ,, final, int, begin, ,, final, int, length, ), {, Frequency, freq, =]
[begin, ,, final, int, length, ), {, Frequency, freq, =, new, Frequency, (, ), ;, for, (, int, i, =]
[final, int, length, ), {, Frequency, freq, =, new, Frequency, (, ), ;, for, (, int, i, =, begin, ;]
[final, int, length, ), {, Frequency, freq, =, new, Frequency, (, ), ;, for, (, int, i, =, begin, ;]
[length, ), {, Frequency, freq, =, new, Frequency, (, ), ;, for, (, int, i, =, begin, ;, i, <]
[length, ), {, Frequency, freq, =, new, Frequency, (, ), ;, for, (, int, i, =, begin, ;, i, <]
[{, Frequency, freq, =, new, Frequency, (, ), ;, for, (, int, i, =, begin, ;, i, <, begin, +]
[freq, =, new, Frequency, (, ), ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[freq, =, new, Frequency, (, ), ;, for, (, int, i, =, begin, ;, i, <, begin, +, length, ;]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, final, double, value, =]
[(, int, i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, final, double, value, =]
[i, =, begin, ;, i, <, begin, +, length, ;, i, ++, ), {, final, double, value, =, values, []
[<, begin, +, length, ;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (]
[begin, +, length, ;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !]
[begin, +, length, ;, i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !]
[i, ++, ), {, final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN, (]
[final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN, (, value, ), ), {]
[final, double, value, =, values, [, i, ], ;, if, (, !, Double, ., isNaN, (, value, ), ), {]
[values, [, i, ], ;, if, (, !, Double, ., isNaN, (, value, ), ), {, freq, ., addValue, (]
[values, [, i, ], ;, if, (, !, Double, ., isNaN, (, value, ), ), {, freq, ., addValue, (]
[;, if, (, !, Double, ., isNaN, (, value, ), ), {, freq, ., addValue, (, Double, ., valueOf, (]
[(, Double, ., valueOf, (, value, ), ), ;, }, }, List, <, Comparable, <, ?, >, >, list, =]
[(, Double, ., valueOf, (, value, ), ), ;, }, }, List, <, Comparable, <, ?, >, >, list, =]
[List, <, Comparable, <, ?, >, >, list, =, freq, ., getMode, (, ), ;, double, [, ], modes, =]
[<, ?, >, >, list, =, freq, ., getMode, (, ), ;, double, [, ], modes, =, new, double, []
[<, ?, >, >, list, =, freq, ., getMode, (, ), ;, double, [, ], modes, =, new, double, []
[), ;, double, [, ], modes, =, new, double, [, list, ., size, (, ), ], ;, int, i, =]
[list, ., size, (, ), ], ;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :]
[(, ), ], ;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {]
[(, ), ], ;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {]
[], ;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, []
[], ;, int, i, =, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, []
[=, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, [, i, ++, ], =]
[=, 0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, [, i, ++, ], =]
[0, ;, for, (, Comparable, <, ?, >, c, :, list, ), {, modes, [, i, ++, ], =, (]
[(, Comparable, <, ?, >, c, :, list, ), {, modes, [, i, ++, ], =, (, (, Double, )]
[{, modes, [, i, ++, ], =, (, (, Double, ), c, ), ., doubleValue, (, ), ;, }, return]
