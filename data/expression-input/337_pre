[category, ., CategoryDataset, ;, public, class, CategoryAxis, extends, Axis, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[Axis, implements, Cloneable, ,, Serializable, {, private, static, final, long, serialVersionUID, =, 5886554608114265863L, ;, public, static, final, double, DEFAULT_AXIS_MARGIN, =]
[final, long, serialVersionUID, =, 5886554608114265863L, ;, public, static, final, double, DEFAULT_AXIS_MARGIN, =, 0.05, ;, public, static, final, double, DEFAULT_CATEGORY_MARGIN, =]
[private, Map, tickLabelFontMap, ;, private, transient, Map, tickLabelPaintMap, ;, private, Map, categoryLabelToolTips, ;, public, CategoryAxis, (, ), {, this, (]
[public, CategoryAxis, (, ), {, this, (, null, ), ;, }, public, CategoryAxis, (, String, label, ), {, super, (]
[), {, this, (, null, ), ;, }, public, CategoryAxis, (, String, label, ), {, super, (, label, ), ;]
[), {, this, (, null, ), ;, }, public, CategoryAxis, (, String, label, ), {, super, (, label, ), ;]
[null, ), ;, }, public, CategoryAxis, (, String, label, ), {, super, (, label, ), ;, this, ., lowerMargin, =]
[;, }, public, CategoryAxis, (, String, label, ), {, super, (, label, ), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;]
[;, }, public, CategoryAxis, (, String, label, ), {, super, (, label, ), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;]
[(, String, label, ), {, super, (, label, ), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =]
[label, ), {, super, (, label, ), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;]
[label, ), {, super, (, label, ), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;]
[(, label, ), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =]
[), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;]
[), ;, this, ., lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;]
[lowerMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =]
[DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;]
[DEFAULT_AXIS_MARGIN, ;, this, ., upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;]
[upperMargin, =, DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =]
[DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;]
[DEFAULT_AXIS_MARGIN, ;, this, ., categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;]
[categoryMargin, =, DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =]
[DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;]
[DEFAULT_CATEGORY_MARGIN, ;, this, ., maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;]
[maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =]
[maximumCategoryLabelLines, =, 1, ;, this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =]
[this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;]
[this, ., maximumCategoryLabelWidthRatio, =, 0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;]
[0.0f, ;, this, ., categoryLabelPositionOffset, =, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =]
[=, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;]
[=, 4, ;, this, ., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;]
[., categoryLabelPositions, =, CategoryLabelPositions, ., STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =]
[STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap, (, ), ;]
[STANDARD, ;, this, ., tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap, (, ), ;]
[tickLabelFontMap, =, new, HashMap, (, ), ;, this, ., tickLabelPaintMap, =, new, HashMap, (, ), ;, this, ., categoryLabelToolTips, =]
[(, ), ;, this, ., categoryLabelToolTips, =, new, HashMap, (, ), ;, }, public, double, getLowerMargin, (, ), {, return]
[(, ), ;, this, ., categoryLabelToolTips, =, new, HashMap, (, ), ;, }, public, double, getLowerMargin, (, ), {, return]
[public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {]
[public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {]
[), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =]
[return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;]
[., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, notifyListeners, (]
[}, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, ), {, return]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, ), {, return]
[public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {]
[public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {]
[), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =]
[return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;]
[., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, notifyListeners, (]
[}, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryMargin, (, ), {, return]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getCategoryMargin, (, ), {, return]
[public, double, getCategoryMargin, (, ), {, return, this, ., categoryMargin, ;, }, public, void, setCategoryMargin, (, double, margin, ), {]
[public, double, getCategoryMargin, (, ), {, return, this, ., categoryMargin, ;, }, public, void, setCategoryMargin, (, double, margin, ), {]
[), {, return, this, ., categoryMargin, ;, }, public, void, setCategoryMargin, (, double, margin, ), {, this, ., categoryMargin, =]
[return, this, ., categoryMargin, ;, }, public, void, setCategoryMargin, (, double, margin, ), {, this, ., categoryMargin, =, margin, ;]
[., categoryMargin, ;, }, public, void, setCategoryMargin, (, double, margin, ), {, this, ., categoryMargin, =, margin, ;, notifyListeners, (]
[}, public, void, setCategoryMargin, (, double, margin, ), {, this, ., categoryMargin, =, margin, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMaximumCategoryLabelLines, (, ), {, return]
[=, margin, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMaximumCategoryLabelLines, (, ), {, return]
[public, int, getMaximumCategoryLabelLines, (, ), {, return, this, ., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {]
[public, int, getMaximumCategoryLabelLines, (, ), {, return, this, ., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {]
[), {, return, this, ., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {, this, ., maximumCategoryLabelLines, =]
[return, this, ., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {, this, ., maximumCategoryLabelLines, =, lines, ;]
[., maximumCategoryLabelLines, ;, }, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {, this, ., maximumCategoryLabelLines, =, lines, ;, notifyListeners, (]
[}, public, void, setMaximumCategoryLabelLines, (, int, lines, ), {, this, ., maximumCategoryLabelLines, =, lines, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, lines, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return]
[=, lines, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return]
[public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return, this, ., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {]
[public, float, getMaximumCategoryLabelWidthRatio, (, ), {, return, this, ., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {]
[), {, return, this, ., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {, this, ., maximumCategoryLabelWidthRatio, =]
[return, this, ., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {, this, ., maximumCategoryLabelWidthRatio, =, ratio, ;]
[., maximumCategoryLabelWidthRatio, ;, }, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {, this, ., maximumCategoryLabelWidthRatio, =, ratio, ;, notifyListeners, (]
[}, public, void, setMaximumCategoryLabelWidthRatio, (, float, ratio, ), {, this, ., maximumCategoryLabelWidthRatio, =, ratio, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, ratio, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getCategoryLabelPositionOffset, (, ), {, return]
[=, ratio, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getCategoryLabelPositionOffset, (, ), {, return]
[public, int, getCategoryLabelPositionOffset, (, ), {, return, this, ., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {]
[public, int, getCategoryLabelPositionOffset, (, ), {, return, this, ., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {]
[), {, return, this, ., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {, this, ., categoryLabelPositionOffset, =]
[return, this, ., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {, this, ., categoryLabelPositionOffset, =, offset, ;]
[., categoryLabelPositionOffset, ;, }, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {, this, ., categoryLabelPositionOffset, =, offset, ;, notifyListeners, (]
[}, public, void, setCategoryLabelPositionOffset, (, int, offset, ), {, this, ., categoryLabelPositionOffset, =, offset, ;, notifyListeners, (, new, AxisChangeEvent, (]
[=, offset, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, ), {, return]
[=, offset, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, CategoryLabelPositions, getCategoryLabelPositions, (, ), {, return]
[getCategoryLabelPositions, (, ), {, return, this, ., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions, ), {, if, (]
[getCategoryLabelPositions, (, ), {, return, this, ., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions, ), {, if, (]
[), {, return, this, ., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions, ), {, if, (, positions, ==]
[., categoryLabelPositions, ;, }, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions, ), {, if, (, positions, ==, null, ), {, throw]
[}, public, void, setCategoryLabelPositions, (, CategoryLabelPositions, positions, ), {, if, (, positions, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, CategoryLabelPositions, positions, ), {, if, (, positions, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }]
[(, CategoryLabelPositions, positions, ), {, if, (, positions, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }]
[{, if, (, positions, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }, this, ., categoryLabelPositions, =]
[(, positions, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }, this, ., categoryLabelPositions, =, positions, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }, this, ., categoryLabelPositions, =, positions, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'positions' argument.", ), ;, }, this, ., categoryLabelPositions, =, positions, ;, notifyListeners, (, new, AxisChangeEvent, (]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (]
[new, AxisChangeEvent, (, this, ), ), ;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (, category, ==]
[), ), ;, }, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw]
[}, public, Font, getTickLabelFont, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =, (, Font, )]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =, (, Font, )]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =, (, Font, )]
[throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Font, result, =, (, Font, ), this, ., tickLabelFontMap, ., get, (]
[), ;, }, Font, result, =, (, Font, ), this, ., tickLabelFontMap, ., get, (, category, ), ;, if, (]
[), ;, }, Font, result, =, (, Font, ), this, ., tickLabelFontMap, ., get, (, category, ), ;, if, (]
[}, Font, result, =, (, Font, ), this, ., tickLabelFontMap, ., get, (, category, ), ;, if, (, result, ==]
[=, (, Font, ), this, ., tickLabelFontMap, ., get, (, category, ), ;, if, (, result, ==, null, ), {]
[Font, ), this, ., tickLabelFontMap, ., get, (, category, ), ;, if, (, result, ==, null, ), {, result, =]
[get, (, category, ), ;, if, (, result, ==, null, ), {, result, =, getTickLabelFont, (, ), ;, }, return]
[), ;, }, return, result, ;, }, public, void, setTickLabelFont, (, Comparable, category, ,, Font, font, ), {, if, (]
[), ;, }, return, result, ;, }, public, void, setTickLabelFont, (, Comparable, category, ,, Font, font, ), {, if, (]
[}, return, result, ;, }, public, void, setTickLabelFont, (, Comparable, category, ,, Font, font, ), {, if, (, category, ==]
[}, public, void, setTickLabelFont, (, Comparable, category, ,, Font, font, ), {, if, (, category, ==, null, ), {, throw]
[setTickLabelFont, (, Comparable, category, ,, Font, font, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (]
[font, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (]
[font, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (]
[{, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==]
[category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==, null, ), {]
[category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==, null, ), {]
[category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==, null, ), {]
[new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, font, ==, null, ), {, this, ., tickLabelFontMap, ., remove, (]
[}, if, (, font, ==, null, ), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {]
[}, if, (, font, ==, null, ), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {]
[}, if, (, font, ==, null, ), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {]
[), {, this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (]
[this, ., tickLabelFontMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (, category, ,]
[remove, (, category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (, category, ,, font, ), ;, }]
[category, ), ;, }, else, {, this, ., tickLabelFontMap, ., put, (, category, ,, font, ), ;, }, notifyListeners, (]
[}, else, {, this, ., tickLabelFontMap, ., put, (, category, ,, font, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (]
[new, AxisChangeEvent, (, this, ), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (, category, ==]
[), ), ;, }, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw]
[}, public, Paint, getTickLabelPaint, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =, (, Paint, )]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =, (, Paint, )]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =, (, Paint, )]
[throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, ., get, (]
[), ;, }, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, ., get, (, category, ), ;, if, (]
[), ;, }, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, ., get, (, category, ), ;, if, (]
[}, Paint, result, =, (, Paint, ), this, ., tickLabelPaintMap, ., get, (, category, ), ;, if, (, result, ==]
[=, (, Paint, ), this, ., tickLabelPaintMap, ., get, (, category, ), ;, if, (, result, ==, null, ), {]
[Paint, ), this, ., tickLabelPaintMap, ., get, (, category, ), ;, if, (, result, ==, null, ), {, result, =]
[get, (, category, ), ;, if, (, result, ==, null, ), {, result, =, getTickLabelPaint, (, ), ;, }, return]
[), ;, }, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable, category, ,, Paint, paint, ), {, if, (]
[), ;, }, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable, category, ,, Paint, paint, ), {, if, (]
[}, return, result, ;, }, public, void, setTickLabelPaint, (, Comparable, category, ,, Paint, paint, ), {, if, (, category, ==]
[}, public, void, setTickLabelPaint, (, Comparable, category, ,, Paint, paint, ), {, if, (, category, ==, null, ), {, throw]
[setTickLabelPaint, (, Comparable, category, ,, Paint, paint, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (]
[paint, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (]
[paint, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (]
[{, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==]
[category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==, null, ), {]
[category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==, null, ), {]
[category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==, null, ), {]
[new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap, ., remove, (]
[}, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {]
[}, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {]
[}, if, (, paint, ==, null, ), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {]
[), {, this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (]
[this, ., tickLabelPaintMap, ., remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,]
[remove, (, category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,, paint, ), ;, }]
[category, ), ;, }, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,, paint, ), ;, }, notifyListeners, (]
[}, else, {, this, ., tickLabelPaintMap, ., put, (, category, ,, paint, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[AxisChangeEvent, (, this, ), ), ;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (]
[AxisChangeEvent, (, this, ), ), ;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (]
[this, ), ), ;, }, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (, category, ==]
[}, public, void, addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (, category, ==, null, ), {, throw]
[addCategoryLabelToolTip, (, Comparable, category, ,, String, tooltip, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (]
[,, String, tooltip, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }]
[,, String, tooltip, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }]
[,, String, tooltip, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,]
[{, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, ), ;]
[new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, ), ;, notifyListeners, (]
["Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., put, (, category, ,, tooltip, ), ;, notifyListeners, (, new, AxisChangeEvent, (]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (]
[notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (]
[new, AxisChangeEvent, (, this, ), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==]
[), ), ;, }, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw]
[}, public, String, getCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (]
[Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return]
[{, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return, (, String, )]
[{, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return, (, String, )]
[{, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return, (, String, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, return, (, String, ), this, ., categoryLabelToolTips, ., get, (]
[this, ., categoryLabelToolTips, ., get, (, category, ), ;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (]
[this, ., categoryLabelToolTips, ., get, (, category, ), ;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (]
[categoryLabelToolTips, ., get, (, category, ), ;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==]
[category, ), ;, }, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw]
[}, public, void, removeCategoryLabelToolTip, (, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }]
[(, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }]
[(, Comparable, category, ), {, if, (, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }]
[(, category, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., remove, (]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., remove, (, category, ), ;]
[{, throw, new, IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., remove, (, category, ), ;, notifyListeners, (]
[IllegalArgumentException, (, "Null 'category' argument.", ), ;, }, this, ., categoryLabelToolTips, ., remove, (, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (]
[(, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {]
[(, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {]
[(, category, ), ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {]
[(, this, ), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {, this, ., categoryLabelToolTips, ., clear, (, ), ;]
[), ), ;, }, public, void, clearCategoryLabelToolTips, (, ), {, this, ., categoryLabelToolTips, ., clear, (, ), ;, notifyListeners, (]
[}, public, void, clearCategoryLabelToolTips, (, ), {, this, ., categoryLabelToolTips, ., clear, (, ), ;, notifyListeners, (, new, AxisChangeEvent, (]
[(, CategoryAnchor, anchor, ,, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (]
[int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (]
[,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, anchor, ==]
[,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, anchor, ==]
[area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, anchor, ==, CategoryAnchor, ., START, ), {]
[RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, anchor, ==, CategoryAnchor, ., START, ), {, result, =]
[), {, double, result, =, 0.0, ;, if, (, anchor, ==, CategoryAnchor, ., START, ), {, result, =, getCategoryStart, (]
[double, result, =, 0.0, ;, if, (, anchor, ==, CategoryAnchor, ., START, ), {, result, =, getCategoryStart, (, category, ,]
[=, 0.0, ;, if, (, anchor, ==, CategoryAnchor, ., START, ), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,]
[;, if, (, anchor, ==, CategoryAnchor, ., START, ), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,]
[START, ), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (]
[START, ), {, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (]
[{, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==]
[{, result, =, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==]
[category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {]
[categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =]
[area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (]
[edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,]
[;, }, else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,]
[else, if, (, anchor, ==, CategoryAnchor, ., MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,]
[MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (]
[MIDDLE, ), {, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (]
[{, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==]
[{, result, =, getCategoryMiddle, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==]
[category, ,, categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {]
[categoryCount, ,, area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =]
[area, ,, edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (]
[edge, ), ;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category, ,]
[;, }, else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,]
[else, if, (, anchor, ==, CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,, area, ,]
[CategoryAnchor, ., END, ), {, result, =, getCategoryEnd, (, category, ,, categoryCount, ,, area, ,, edge, ), ;, }, return]
[public, double, getCategoryStart, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (]
[int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (]
[category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, (]
[category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, (]
[int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, (, edge, ==]
[int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, (, edge, ==]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||]
[RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (]
[RectangleEdge, edge, ), {, double, result, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (]
[), {, double, result, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==]
[), {, double, result, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==]
[;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {]
[(, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =]
[(, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =]
[(, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =]
[TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +]
[TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +]
[TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +]
[RectangleEdge, ., BOTTOM, ), ), {, result, =, area, ., getX, (, ), +, area, ., getWidth, (, ), *]
[area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (]
[area, ., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (]
[., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (]
[., getX, (, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (]
[(, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==]
[(, ), +, area, ., getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==]
[getWidth, (, ), *, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||]
[(, ), *, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[(, ), *, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[*, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[*, getLowerMargin, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {]
[(, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =]
[(, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =]
[(, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =]
[LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +]
[LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +]
[LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +]
[RectangleEdge, ., RIGHT, ), ), {, result, =, area, ., getMinY, (, ), +, area, ., getHeight, (, ), *]
[area, ., getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize, =]
[getMinY, (, ), +, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize, (]
[), +, area, ., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,]
[area, ., getHeight, (, ), *, getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,]
[getLowerMargin, (, ), ;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =]
[), ;, }, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (]
[}, double, categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,]
[categorySize, =, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,]
[(, categoryCount, ,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;]
[,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =]
[,, area, ,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =]
[,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +]
[,, edge, ), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +]
[), ;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +, category, *]
[;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +, category, *, (]
[;, double, categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +, category, *, (]
[categoryGapWidth, =, calculateCategoryGapSize, (, categoryCount, ,, area, ,, edge, ), ;, result, =, result, +, category, *, (, categorySize, +]
[categoryCount, ,, area, ,, edge, ), ;, result, =, result, +, category, *, (, categorySize, +, categoryGapWidth, ), ;, return]
[}, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (]
[}, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (]
[}, public, double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (]
[double, getCategoryMiddle, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, category, <]
[(, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, category, <, 0, ||]
[(, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, category, <, 0, ||]
[category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, category, <, 0, ||, category, >=]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, category, <, 0, ||, category, >=, categoryCount, ), {, throw]
[,, RectangleEdge, edge, ), {, if, (, category, <, 0, ||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (]
[,, RectangleEdge, edge, ), {, if, (, category, <, 0, ||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (]
[edge, ), {, if, (, category, <, 0, ||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +]
[category, <, 0, ||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return]
[category, <, 0, ||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return]
[0, ||, category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (]
[category, >=, categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,]
[categoryCount, ), {, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,]
[{, throw, new, IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,]
[IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +]
[IllegalArgumentException, (, "Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +]
["Invalid category index: ", +, category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (]
[category, ), ;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,]
[;, }, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,]
[getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,, edge, ), /]
[;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return]
[;, }, public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return]
[public, double, getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, getCategoryStart, (]
[getCategoryEnd, (, int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, getCategoryStart, (, category, ,]
[int, category, ,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, getCategoryStart, (, category, ,, categoryCount, ,]
[,, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +]
[area, ,, RectangleEdge, edge, ), {, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (]
[RectangleEdge, edge, ), {, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,]
[), {, return, getCategoryStart, (, category, ,, categoryCount, ,, area, ,, edge, ), +, calculateCategorySize, (, categoryCount, ,, area, ,]
[}, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (]
[}, public, double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (]
[double, getCategoryMiddle, (, Comparable, category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, categories, ==]
[category, ,, List, categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, categories, ==, null, ), {, throw]
[categories, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, if, (, categories, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), {, if, (, categories, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =]
[), {, if, (, categories, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =]
[categories, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =, categories, ., indexOf, (]
[new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =, categories, ., indexOf, (, category, ), ;, int, categoryCount, =]
[new, IllegalArgumentException, (, "Null 'categories' argument.", ), ;, }, int, categoryIndex, =, categories, ., indexOf, (, category, ), ;, int, categoryCount, =]
[int, categoryIndex, =, categories, ., indexOf, (, category, ), ;, int, categoryCount, =, categories, ., size, (, ), ;, return]
[=, categories, ., indexOf, (, category, ), ;, int, categoryCount, =, categories, ., size, (, ), ;, return, getCategoryMiddle, (]
[., indexOf, (, category, ), ;, int, categoryCount, =, categories, ., size, (, ), ;, return, getCategoryMiddle, (, categoryIndex, ,]
[(, category, ), ;, int, categoryCount, =, categories, ., size, (, ), ;, return, getCategoryMiddle, (, categoryIndex, ,, categoryCount, ,]
[), ;, int, categoryCount, =, categories, ., size, (, ), ;, return, getCategoryMiddle, (, categoryIndex, ,, categoryCount, ,, area, ,]
[,, Comparable, seriesKey, ,, CategoryDataset, dataset, ,, double, itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, int, categoryIndex, =]
[,, Comparable, seriesKey, ,, CategoryDataset, dataset, ,, double, itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, int, categoryIndex, =]
[CategoryDataset, dataset, ,, double, itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, int, categoryIndex, =, dataset, ., getColumnIndex, (]
[Rectangle2D, area, ,, RectangleEdge, edge, ), {, int, categoryIndex, =, dataset, ., getColumnIndex, (, category, ), ;, int, categoryCount, =]
[Rectangle2D, area, ,, RectangleEdge, edge, ), {, int, categoryIndex, =, dataset, ., getColumnIndex, (, category, ), ;, int, categoryCount, =]
[=, dataset, ., getColumnIndex, (, category, ), ;, int, categoryCount, =, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =]
[=, dataset, ., getColumnIndex, (, category, ), ;, int, categoryCount, =, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =]
[(, category, ), ;, int, categoryCount, =, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =, dataset, ., getRowIndex, (]
[=, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =, dataset, ., getRowIndex, (, seriesKey, ), ;, int, seriesCount, =]
[=, dataset, ., getColumnCount, (, ), ;, int, seriesIndex, =, dataset, ., getRowIndex, (, seriesKey, ), ;, int, seriesCount, =]
[=, dataset, ., getRowIndex, (, seriesKey, ), ;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =]
[., getRowIndex, (, seriesKey, ), ;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =, getCategoryStart, (]
[(, seriesKey, ), ;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =, getCategoryStart, (, categoryIndex, ,]
[), ;, int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[int, seriesCount, =, dataset, ., getRowCount, (, ), ;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,]
[(, ), ;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =]
[;, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (]
[start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,]
[getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,]
[edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =]
[edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =]
[;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -]
[getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (]
[getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (]
[categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==]
[area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return]
[area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return]
[edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +]
[edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +]
[;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /]
[if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =]
[if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =]
[(, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (]
[(, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (]
[==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *]
[{, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /]
[return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (]
[return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (]
[+, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -]
[else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =]
[else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =]
[{, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (]
[{, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (]
[gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *]
[=, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (]
[=, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (]
[width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -]
[/, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *]
[=, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (]
[=, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (]
[width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +]
[-, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +]
[-, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +]
[), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /]
[,, int, seriesIndex, ,, int, seriesCount, ,, double, itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, start, =]
[seriesIndex, ,, int, seriesCount, ,, double, itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, start, =, getCategoryStart, (]
[int, seriesCount, ,, double, itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, start, =, getCategoryStart, (, categoryIndex, ,]
[,, double, itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,]
[itemMargin, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,]
[edge, ), {, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =]
[{, double, start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (]
[start, =, getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,]
[getCategoryStart, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,]
[categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,]
[edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =]
[edge, ), ;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =]
[;, double, end, =, getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -]
[getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (]
[getCategoryEnd, (, categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (]
[categoryIndex, ,, categoryCount, ,, area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==]
[area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return]
[area, ,, edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return]
[edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +]
[edge, ), ;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +]
[;, double, width, =, end, -, start, ;, if, (, seriesCount, ==, 1, ), {, return, start, +, width, /]
[if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =]
[if, (, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =]
[(, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (]
[(, seriesCount, ==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (]
[==, 1, ), {, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *]
[{, return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /]
[return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (]
[return, start, +, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (]
[+, width, /, 2.0, ;, }, else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -]
[else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =]
[else, {, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =]
[{, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (]
[{, double, gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (]
[gap, =, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *]
[=, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (]
[=, (, width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (]
[width, *, itemMargin, ), /, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -]
[/, (, seriesCount, -, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[-, 1, ), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return]
[), ;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[;, double, ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (]
[ww, =, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *]
[=, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (]
[=, (, width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (]
[width, *, (, 1, -, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +]
[-, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +]
[-, itemMargin, ), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +]
[), ), /, seriesCount, ;, return, start, +, (, seriesIndex, *, (, ww, +, gap, ), ), +, ww, /]
[;, }, }, protected, double, calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[calculateCategorySize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (]
[Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (]
[Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==]
[double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||]
[result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (]
[result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (]
[0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==]
[0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==]
[;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {]
[(, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =]
[(, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =]
[edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (]
[edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (]
[==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (]
[==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (]
[., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==]
[., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==]
[available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||]
[=, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[=, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {]
[(, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =]
[(, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =]
[(, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (]
[(, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (]
[==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >]
[RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *]
[=, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (]
[=, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (]
[=, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (]
[=, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (]
[., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (, 1, -]
[;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -]
[categoryCount, >, 1, ), {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -]
[result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;]
[available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =]
[available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =]
[(, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result, /]
[), -, getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {]
[getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =]
[getUpperMargin, (, ), -, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =]
[), -, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *]
[-, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (]
[-, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (]
[-, getCategoryMargin, (, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (]
[(, ), ), ;, result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -]
[result, =, result, /, categoryCount, ;, }, else, {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -]
[else, {, result, =, available, *, (, 1, -, getLowerMargin, (, ), -, getUpperMargin, (, ), ), ;, }, return]
[result, ;, }, protected, double, calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =]
[calculateCategoryGapSize, (, int, categoryCount, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (]
[,, Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (]
[Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (]
[Rectangle2D, area, ,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==]
[,, RectangleEdge, edge, ), {, double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==]
[double, result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||]
[result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (]
[result, =, 0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (]
[0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==]
[0.0, ;, double, available, =, 0.0, ;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==]
[;, if, (, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {]
[(, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =]
[(, (, edge, ==, RectangleEdge, ., TOP, ), ||, (, edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =]
[edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (]
[edge, ==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (]
[==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (]
[==, RectangleEdge, ., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (]
[., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==]
[., BOTTOM, ), ), {, available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==]
[available, =, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||]
[=, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[=, area, ., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (]
[., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[., getWidth, (, ), ;, }, else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==]
[else, if, (, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {]
[(, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =]
[(, (, edge, ==, RectangleEdge, ., LEFT, ), ||, (, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =]
[(, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (]
[(, edge, ==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (]
[==, RectangleEdge, ., RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >]
[RIGHT, ), ), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[), {, available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =]
[available, =, area, ., getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *]
[getHeight, (, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, getCategoryMargin, (, ), /]
[(, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, getCategoryMargin, (, ), /, (]
[(, ), ;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, getCategoryMargin, (, ), /, (]
[;, }, if, (, categoryCount, >, 1, ), {, result, =, available, *, getCategoryMargin, (, ), /, (, categoryCount, -]
[>, 1, ), {, result, =, available, *, getCategoryMargin, (, ), /, (, categoryCount, -, 1, ), ;, }, return]
[reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (]
[reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (]
[Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==]
[Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==, null, ), {]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, if, (, space, ==, null, ), {, space, =]
[space, ), {, if, (, space, ==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (]
[), {, if, (, space, ==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !]
[null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return]
[AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, double, tickLabelHeight, =]
[if, (, !, isVisible, (, ), ), {, return, space, ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =]
[(, ), ), {, return, space, ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (]
[space, ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {]
[space, ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {]
[tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (]
[;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, AxisState, state, =]
[), ), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, AxisState, state, =, new, AxisState, (, ), ;]
[{, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks, (]
[., setFont, (, getTickLabelFont, (, ), ), ;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,]
[(, getTickLabelFont, (, ), ), ;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,]
[(, ), ), ;, AxisState, state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,, plotArea, ,]
[state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (]
[state, =, new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (]
[new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (, edge, ==]
[new, AxisState, (, ), ;, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (, edge, ==]
[refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =]
[g2, ,, state, ,, plotArea, ,, edge, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =]
[(, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (]
[(, edge, ==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (]
[==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[==, RectangleEdge, ., TOP, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[{, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =]
[(, edge, ==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (]
[(, edge, ==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (]
[==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[==, RectangleEdge, ., BOTTOM, ), {, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[{, tickLabelHeight, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =]
[(, edge, ==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (]
[(, edge, ==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (]
[==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[==, RectangleEdge, ., LEFT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[{, tickLabelWidth, =, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =]
[=, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =]
[edge, ==, RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =]
[RectangleEdge, ., RIGHT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (]
[RIGHT, ), {, tickLabelWidth, =, state, ., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,]
[., getMax, (, ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =]
[}, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =]
[=, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (]
[=, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (]
[,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =]
[=, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;]
[RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (]
[RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (]
[RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (]
[isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +]
[edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, +]
[edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, +]
[labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,]
[;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (]
[;, space, ., add, (, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (]
[(, labelHeight, +, tickLabelHeight, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[+, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =]
[., categoryLabelPositionOffset, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;]
[RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (]
[RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (]
[RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (]
[isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +]
[edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +]
[edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +]
[labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,]
[(, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, +, this, ., categoryLabelPositionOffset, ,, edge, ), ;, }, return]
[g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (]
[,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (, !]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (, !, isVisible, (, ), ), {, return]
[,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, if, (, !, isVisible, (, ), ), {, return, new, AxisState, (]
[), {, if, (, !, isVisible, (, ), ), {, return, new, AxisState, (, cursor, ), ;, }, if, (]
[isVisible, (, ), ), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {]
[), ), {, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (]
[{, return, new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,]
[new, AxisState, (, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,]
[(, cursor, ), ;, }, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,]
[isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =]
[), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (]
[,, cursor, ,, dataArea, ,, edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (]
[edge, ), ;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {]
[;, }, AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (]
[AxisState, state, =, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (, g2, ,]
[=, new, AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (, g2, ,, cursor, ,]
[AxisState, (, cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,]
[cursor, ), ;, if, (, isTickMarksVisible, (, ), ), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,]
[(, isTickMarksVisible, (, ), ), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state, ), ;, }]
[(, ), ), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (]
[), {, drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,]
[drawTickMarks, (, g2, ,, cursor, ,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,]
[g2, ,, cursor, ,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,]
[cursor, ,, dataArea, ,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,]
[,, edge, ,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;]
[,, state, ), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =]
[), ;, }, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (]
[}, createAndAddEntity, (, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,]
[(, cursor, ,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,]
[,, state, ,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,]
[,, dataArea, ,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[,, edge, ,, plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[plotState, ), ;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;]
[;, state, =, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =]
[=, drawCategoryLabels, (, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (]
[,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,]
[,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,]
[,, edge, ,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,]
[,, state, ,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,]
[,, plotState, ), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,]
[), ;, state, =, drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,]
[drawLabel, (, getLabel, (, ), ,, g2, ,, plotArea, ,, dataArea, ,, edge, ,, state, ,, plotState, ), ;, return]
[g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (]
[g2, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (]
[Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (, state, ==]
[dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (, state, ==, null, ), {, throw]
[edge, ,, AxisState, state, ,, PlotRenderingInfo, plotState, ), {, if, (, state, ==, null, ), {, throw, new, IllegalArgumentException, (]
[plotState, ), {, if, (, state, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =]
[throw, new, IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (]
[IllegalArgumentException, (, "Null 'state' argument.", ), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (, g2, ,]
["Null 'state' argument.", ), ;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,]
[;, }, if, (, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,, plotArea, ,]
[(, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;]
[(, isTickLabelsVisible, (, ), ), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;]
[), {, List, ticks, =, refreshTicks, (, g2, ,, state, ,, plotArea, ,, edge, ), ;, state, ., setTicks, (]
[(, g2, ,, state, ,, plotArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =]
[plotArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =]
[plotArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =]
[(, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[(, ticks, ), ;, int, categoryIndex, =, 0, ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (]
[iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryTick, tick, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryTick, tick, =, (, CategoryTick, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, CategoryTick, tick, =, (, CategoryTick, )]
[(, iterator, ., hasNext, (, ), ), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (, ), ;]
[(, iterator, ., hasNext, (, ), ), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (, ), ;]
[(, ), ), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (, ), ;, g2, ., setFont, (]
[), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (]
[), {, CategoryTick, tick, =, (, CategoryTick, ), iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (]
[iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;]
[iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;]
[), ;, g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;, g2, ., setPaint, (]
[g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;, g2, ., setPaint, (, getTickLabelPaint, (]
[g2, ., setFont, (, getTickLabelFont, (, tick, ., getCategory, (, ), ), ), ;, g2, ., setPaint, (, getTickLabelPaint, (]
[), ), ;, g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =]
[), ), ;, g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =]
[), ), ;, g2, ., setPaint, (, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =]
[(, getTickLabelPaint, (, tick, ., getCategory, (, ), ), ), ;, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (]
[(, ), ), ), ;, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double, x0, =]
[CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double, x0, =, 0.0, ;, double, x1, =]
[categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =]
[), ;, double, x0, =, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =]
[=, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (]
[=, 0.0, ;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (]
[;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==]
[;, double, x1, =, 0.0, ;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==]
[;, double, y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[y0, =, 0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =]
[0.0, ;, double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (]
[double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,]
[double, y1, =, 0.0, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,]
[(, edge, ==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[==, RectangleEdge, ., TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[TOP, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[{, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,]
[(, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -]
[(, ), ,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;]
[,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =]
[,, dataArea, ,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =]
[,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -]
[,, edge, ), ;, y1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -]
[), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (]
[), -, this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (]
[this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[this, ., categoryLabelPositionOffset, ;, y0, =, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[=, y1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[-, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (]
[(, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,]
[(, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,]
[(, edge, ==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[==, RectangleEdge, ., BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[BOTTOM, ), {, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[{, x0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,]
[(, ), ,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[,, dataArea, ,, edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[edge, ), ;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =]
[;, x1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +]
[(, ), ,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;]
[,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =]
[,, dataArea, ,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =]
[,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +]
[,, edge, ), ;, y0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +]
[), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (]
[), +, this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (]
[this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[this, ., categoryLabelPositionOffset, ;, y1, =, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[=, y0, +, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[+, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (]
[(, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[(, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[(, edge, ==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[==, RectangleEdge, ., LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[LEFT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[{, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,]
[(, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -]
[(, ), ,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;]
[,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =]
[,, dataArea, ,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =]
[,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -]
[,, edge, ), ;, x1, =, state, ., getCursor, (, ), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -]
[), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (]
[), -, this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (]
[this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[this, ., categoryLabelPositionOffset, ;, x0, =, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==]
[=, x1, -, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[-, state, ., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =]
[., getMax, (, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (]
[(, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[(, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,]
[(, edge, ==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[==, RectangleEdge, ., RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[RIGHT, ), {, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[{, y0, =, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =]
[=, getCategoryStart, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,]
[(, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,]
[(, ), ,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,]
[,, dataArea, ,, edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,]
[edge, ), ;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =]
[;, y1, =, getCategoryEnd, (, categoryIndex, ,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +]
[,, ticks, ., size, (, ), ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +]
[(, ), ,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;]
[,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =]
[,, dataArea, ,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =]
[,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -]
[,, edge, ), ;, x0, =, state, ., getCursor, (, ), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -]
[), +, this, ., categoryLabelPositionOffset, ;, x1, =, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =]
[;, x1, =, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (]
[=, x0, -, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,]
[-, state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,]
[state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (]
[state, ., getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (]
[getMax, (, ), ;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -]
[;, }, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,]
[}, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,, (]
[}, Rectangle2D, area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,, (]
[area, =, new, Rectangle2D, ., Double, (, x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -]
[x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =]
[x0, ,, y0, ,, (, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =]
[(, x1, -, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (]
[-, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,]
[-, x0, ), ,, (, y1, -, y0, ), ), ;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,]
[;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =]
[;, Point2D, anchorPoint, =, RectangleAnchor, ., coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =]
[coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;]
[coordinates, (, area, ,, position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;]
[position, ., getCategoryAnchor, (, ), ), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw, (]
[getCategoryAnchor, (, ), ), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw, (, g2, ,]
[), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw, (, g2, ,, (, float, )]
[), ;, TextBlock, block, =, tick, ., getLabel, (, ), ;, block, ., draw, (, g2, ,, (, float, )]
[., getLabel, (, ), ;, block, ., draw, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[), ;, block, ., draw, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[), ;, block, ., draw, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,]
[), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, )]
[), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, )]
[., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, Shape, bounds, =]
[,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, Shape, bounds, =]
[anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (]
[getY, (, ), ,, position, ., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,]
[,, position, ., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, )]
[,, position, ., getAngle, (, ), ), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, )]
[), ;, Shape, bounds, =, block, ., calculateBounds, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[bounds, =, block, ., calculateBounds, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[bounds, =, block, ., calculateBounds, (, g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[g2, ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,]
[), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, )]
[), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, )]
[., getY, (, ), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,]
[), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[), ,, position, ., getLabelAnchor, (, ), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, )]
[), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[), ,, (, float, ), anchorPoint, ., getX, (, ), ,, (, float, ), anchorPoint, ., getY, (, ), ,]
[), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (]
[), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (]
[), ,, (, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (]
[(, float, ), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=]
[), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&]
[), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&]
[), anchorPoint, ., getY, (, ), ,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&]
[,, position, ., getAngle, (, ), ), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=]
[), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =]
[), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =]
[), ;, if, (, plotState, !=, null, &&, plotState, ., getOwner, (, ), !=, null, ), {, EntityCollection, entities, =]
[), !=, null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (]
[), !=, null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (]
[null, ), {, EntityCollection, entities, =, plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=]
[plotState, ., getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, String, tooltip, =]
[getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (]
[getOwner, (, ), ., getEntityCollection, (, ), ;, if, (, entities, !=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (]
[;, if, (, entities, !=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;]
[;, if, (, entities, !=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;]
[!=, null, ), {, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;, entities, ., add, (]
[{, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;, entities, ., add, (, new, CategoryLabelEntity, (]
[{, String, tooltip, =, getCategoryLabelToolTip, (, tick, ., getCategory, (, ), ), ;, entities, ., add, (, new, CategoryLabelEntity, (]
[tick, ., getCategory, (, ), ), ;, entities, ., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,]
[getCategory, (, ), ), ;, entities, ., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,]
[), ), ;, entities, ., add, (, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,]
[(, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,, null, ), ), ;, }, }]
[(, new, CategoryLabelEntity, (, tick, ., getCategory, (, ), ,, bounds, ,, tooltip, ,, null, ), ), ;, }, }]
[getCategory, (, ), ,, bounds, ,, tooltip, ,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if, (]
[getCategory, (, ), ,, bounds, ,, tooltip, ,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if, (]
[bounds, ,, tooltip, ,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals, (]
[bounds, ,, tooltip, ,, null, ), ), ;, }, }, categoryIndex, ++, ;, }, if, (, edge, ., equals, (]
[}, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =]
[}, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =]
[}, categoryIndex, ++, ;, }, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =]
[(, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, state, ., getMax, (, ), +]
[(, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, double, h, =, state, ., getMax, (, ), +]
[(, RectangleEdge, ., TOP, ), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[(, RectangleEdge, ., TOP, ), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (]
[+, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (]
[+, this, ., categoryLabelPositionOffset, ;, state, ., cursorUp, (, h, ), ;, }, else, if, (, edge, ., equals, (]
[h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =]
[h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =]
[h, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =]
[(, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, state, ., getMax, (, ), +]
[(, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, state, ., getMax, (, ), +]
[(, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[(, RectangleEdge, ., BOTTOM, ), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[), ), {, double, h, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (]
[(, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==]
[(, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorDown, (, h, ), ;, }, else, if, (, edge, ==]
[., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =]
[., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =]
[., cursorDown, (, h, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, state, ., getMax, (, ), +]
[}, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, state, ., getMax, (, ), +]
[edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[edge, ==, RectangleEdge, ., LEFT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[LEFT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (]
[., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (]
[(, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==]
[(, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==]
[., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =]
[., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =]
[., cursorLeft, (, w, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, state, ., getMax, (, ), +]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, state, ., getMax, (, ), +]
[edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[edge, ==, RectangleEdge, ., RIGHT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;]
[RIGHT, ), {, double, w, =, state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorRight, (]
[state, ., getMax, (, ), +, this, ., categoryLabelPositionOffset, ;, state, ., cursorRight, (, w, ), ;, }, }, return]
[public, List, refreshTicks, (, Graphics2D, g2, ,, AxisState, state, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =]
[dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, if, (, dataArea, ., getHeight, (, ), <=]
[=, new, java, ., util, ., ArrayList, (, ), ;, if, (, dataArea, ., getHeight, (, ), <=, 0.0, ||]
[=, new, java, ., util, ., ArrayList, (, ), ;, if, (, dataArea, ., getHeight, (, ), <=, 0.0, ||]
[=, new, java, ., util, ., ArrayList, (, ), ;, if, (, dataArea, ., getHeight, (, ), <=, 0.0, ||]
[ArrayList, (, ), ;, if, (, dataArea, ., getHeight, (, ), <=, 0.0, ||, dataArea, ., getWidth, (, ), <]
[if, (, dataArea, ., getHeight, (, ), <=, 0.0, ||, dataArea, ., getWidth, (, ), <, 0.0, ), {, return]
[), <=, 0.0, ||, dataArea, ., getWidth, (, ), <, 0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =]
[||, dataArea, ., getWidth, (, ), <, 0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, )]
[0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories, =]
[0.0, ), {, return, ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories, =]
[ticks, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), getPlot, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (]
[(, CategoryPlot, ), getPlot, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, double, max, =]
[(, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (]
[(, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (]
[;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (, categories, !=]
[getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position, =]
[getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position, =]
[getCategoriesForAxis, (, this, ), ;, double, max, =, 0.0, ;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position, =]
[max, =, 0.0, ;, if, (, categories, !=, null, ), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (]
[categories, !=, null, ), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =]
[categories, !=, null, ), {, CategoryLabelPosition, position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =]
[position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (]
[position, =, this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (]
[this, ., categoryLabelPositions, ., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=]
[., getLabelPosition, (, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0, ), {]
[(, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0, ), {, r, =]
[(, edge, ), ;, float, r, =, this, ., maximumCategoryLabelWidthRatio, ;, if, (, r, <=, 0.0, ), {, r, =]
[;, if, (, r, <=, 0.0, ), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =]
[<=, 0.0, ), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (]
[<=, 0.0, ), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (]
[<=, 0.0, ), {, r, =, position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (]
[position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (, position, ., getWidthType, (, ), ==]
[position, ., getWidthRatio, (, ), ;, }, float, l, =, 0.0f, ;, if, (, position, ., getWidthType, (, ), ==]
[;, }, float, l, =, 0.0f, ;, if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {]
[float, l, =, 0.0f, ;, if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =]
[0.0f, ;, if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, )]
[if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize, (]
[if, (, position, ., getWidthType, (, ), ==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize, (]
[), ==, CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize, (, categories, ., size, (, ), ,]
[CategoryLabelWidthType, ., CATEGORY, ), {, l, =, (, float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,]
[float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge, ), ;, }, else, {, if, (]
[float, ), calculateCategorySize, (, categories, ., size, (, ), ,, dataArea, ,, edge, ), ;, }, else, {, if, (]
[categories, ., size, (, ), ,, dataArea, ,, edge, ), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (]
[), ,, dataArea, ,, edge, ), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[dataArea, ,, edge, ), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l, =]
[), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l, =, (, float, )]
[), ;, }, else, {, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, l, =, (, float, )]
[isLeftOrRight, (, edge, ), ), {, l, =, (, float, ), dataArea, ., getWidth, (, ), ;, }, else, {]
[edge, ), ), {, l, =, (, float, ), dataArea, ., getWidth, (, ), ;, }, else, {, l, =]
[{, l, =, (, float, ), dataArea, ., getWidth, (, ), ;, }, else, {, l, =, (, float, )]
[{, l, =, (, float, ), dataArea, ., getWidth, (, ), ;, }, else, {, l, =, (, float, )]
[;, }, else, {, l, =, (, float, ), dataArea, ., getHeight, (, ), ;, }, }, int, categoryIndex, =]
[=, (, float, ), dataArea, ., getHeight, (, ), ;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =]
[=, (, float, ), dataArea, ., getHeight, (, ), ;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =]
[), ;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[), ;, }, }, int, categoryIndex, =, 0, ;, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, category, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, )]
[(, iterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, ), iterator, ., next, (, ), ;]
[(, iterator, ., hasNext, (, ), ), {, Comparable, category, =, (, Comparable, ), iterator, ., next, (, ), ;]
[(, ), ), {, Comparable, category, =, (, Comparable, ), iterator, ., next, (, ), ;, g2, ., setFont, (]
[), {, Comparable, category, =, (, Comparable, ), iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (]
[), iterator, ., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =]
[., next, (, ), ;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (]
[(, ), ;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,]
[(, ), ;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,]
[;, g2, ., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,, l, *]
[., setFont, (, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,]
[(, getTickLabelFont, (, category, ), ), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,]
[), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (]
[), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (]
[), ;, TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (]
[TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge, ==]
[TextBlock, label, =, createLabel, (, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge, ==]
[(, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||]
[(, category, ,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||]
[,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==]
[,, l, *, r, ,, edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==]
[edge, ,, g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =]
[g2, ), ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =]
[(, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (]
[==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,]
[., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,]
[==, RectangleEdge, ., BOTTOM, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,]
[Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (]
[Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (]
[Math, ., max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (]
[max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==]
[max, (, max, ,, calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==]
[calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||]
[calculateTextBlockHeight, (, label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||]
[label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==]
[label, ,, position, ,, g2, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==]
[), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =]
[(, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (]
[==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,]
[., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,]
[==, RectangleEdge, ., RIGHT, ), {, max, =, Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,]
[Math, ., max, (, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;, }, Tick, tick, =]
[(, max, ,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;, }, Tick, tick, =, new, CategoryTick, (]
[,, calculateTextBlockWidth, (, label, ,, position, ,, g2, ), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,]
[(, label, ,, position, ,, g2, ), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,]
[(, label, ,, position, ,, g2, ), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,]
[), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,]
[), ), ;, }, Tick, tick, =, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,]
[=, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,]
[=, new, CategoryTick, (, category, ,, label, ,, position, ., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,]
[,, position, ., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;]
[,, position, ., getLabelAnchor, (, ), ,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;]
[(, ), ,, position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;, ticks, ., add, (]
[position, ., getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;]
[getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =]
[getRotationAnchor, (, ), ,, position, ., getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =]
[), ,, position, ., getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +]
[getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }]
[getAngle, (, ), ), ;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }]
[;, ticks, ., add, (, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }, state, ., setMax, (]
[(, tick, ), ;, categoryIndex, =, categoryIndex, +, 1, ;, }, }, state, ., setMax, (, max, ), ;, return]
[(, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ), {, Plot, p, =]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ), {, Plot, p, =, getPlot, (, ), ;, if, (]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ), {, Plot, p, =, getPlot, (, ), ;, if, (]
[dataArea, ,, RectangleEdge, edge, ,, AxisState, state, ), {, Plot, p, =, getPlot, (, ), ;, if, (, p, ==]
[Plot, p, =, getPlot, (, ), ;, if, (, p, ==, null, ), {, return, ;, }, CategoryPlot, plot, =]
[getPlot, (, ), ;, if, (, p, ==, null, ), {, return, ;, }, CategoryPlot, plot, =, (, CategoryPlot, )]
[(, p, ==, null, ), {, return, ;, }, CategoryPlot, plot, =, (, CategoryPlot, ), p, ;, double, il, =]
[;, }, CategoryPlot, plot, =, (, CategoryPlot, ), p, ;, double, il, =, getTickMarkInsideLength, (, ), ;, double, ol, =]
[), p, ;, double, il, =, getTickMarkInsideLength, (, ), ;, double, ol, =, getTickMarkOutsideLength, (, ), ;, Line2D, line, =]
[double, ol, =, getTickMarkOutsideLength, (, ), ;, Line2D, line, =, new, Line2D, ., Double, (, ), ;, List, categories, =]
[double, ol, =, getTickMarkOutsideLength, (, ), ;, Line2D, line, =, new, Line2D, ., Double, (, ), ;, List, categories, =]
[(, ), ;, Line2D, line, =, new, Line2D, ., Double, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (]
[Line2D, line, =, new, Line2D, ., Double, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;]
[Line2D, line, =, new, Line2D, ., Double, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;]
[Line2D, ., Double, (, ), ;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, g2, ., setPaint, (]
[;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;]
[;, List, categories, =, plot, ., getCategoriesForAxis, (, this, ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;]
[plot, ., getCategoriesForAxis, (, this, ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (]
[g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (]
[g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (]
[getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (, edge, ., equals, (]
[getTickMarkPaint, (, ), ), ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, if, (, edge, ., equals, (]
[getTickMarkStroke, (, ), ), ;, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, Iterator, iterator, =]
[getTickMarkStroke, (, ), ), ;, if, (, edge, ., equals, (, RectangleEdge, ., TOP, ), ), {, Iterator, iterator, =]
[., equals, (, RectangleEdge, ., TOP, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[., equals, (, RectangleEdge, ., TOP, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =]
[), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (]
[{, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,]
[key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,]
[(, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,]
[iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (]
[double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,]
[=, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,]
[(, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[(, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +]
[dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;]
[dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw, (]
[setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw, (, line, ), ;]
[setLine, (, x, ,, cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw, (, line, ), ;]
[cursor, ,, x, ,, cursor, +, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (]
[x, ,, cursor, +, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,]
[cursor, +, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,]
[il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -]
[draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;]
[draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (]
[(, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (, line, ), ;, }]
[(, x, ,, cursor, ,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (, line, ), ;, }]
[,, x, ,, cursor, -, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (]
[(, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (, edge, ., equals, (]
[(, line, ), ;, }, state, ., cursorUp, (, ol, ), ;, }, else, if, (, edge, ., equals, (]
[ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, Iterator, iterator, =]
[ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., BOTTOM, ), ), {, Iterator, iterator, =]
[., equals, (, RectangleEdge, ., BOTTOM, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[., equals, (, RectangleEdge, ., BOTTOM, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =]
[), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (]
[{, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,]
[key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,]
[(, Comparable, ), iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,]
[iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[iterator, ., next, (, ), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[), ;, double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (]
[double, x, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,]
[=, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,]
[(, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[(, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -]
[dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;]
[dataArea, ,, edge, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw, (]
[setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw, (, line, ), ;]
[setLine, (, x, ,, cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw, (, line, ), ;]
[cursor, ,, x, ,, cursor, -, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (]
[x, ,, cursor, -, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,]
[cursor, -, il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,]
[il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[il, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +]
[draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;]
[draw, (, line, ), ;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;]
[;, line, ., setLine, (, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (]
[(, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (, line, ), ;, }]
[(, x, ,, cursor, ,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (, line, ), ;, }]
[,, x, ,, cursor, +, ol, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (]
[(, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (, edge, ., equals, (]
[(, line, ), ;, }, state, ., cursorDown, (, ol, ), ;, }, else, if, (, edge, ., equals, (]
[ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., LEFT, ), ), {, Iterator, iterator, =]
[ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., LEFT, ), ), {, Iterator, iterator, =]
[., equals, (, RectangleEdge, ., LEFT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[., equals, (, RectangleEdge, ., LEFT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =]
[), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (]
[{, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,]
[key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,]
[(, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,]
[iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (]
[double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,]
[=, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[=, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[(, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,]
[dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;]
[dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw, (]
[setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw, (, line, ), ;]
[setLine, (, cursor, ,, y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw, (, line, ), ;]
[y, ,, cursor, +, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (]
[cursor, +, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,]
[il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,]
[draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;]
[draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (]
[(, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }]
[(, cursor, ,, y, ,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }]
[,, cursor, -, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (]
[;, g2, ., draw, (, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (]
[(, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (, edge, ., equals, (]
[(, line, ), ;, }, state, ., cursorLeft, (, ol, ), ;, }, else, if, (, edge, ., equals, (]
[ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., RIGHT, ), ), {, Iterator, iterator, =]
[ol, ), ;, }, else, if, (, edge, ., equals, (, RectangleEdge, ., RIGHT, ), ), {, Iterator, iterator, =]
[., equals, (, RectangleEdge, ., RIGHT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[., equals, (, RectangleEdge, ., RIGHT, ), ), {, Iterator, iterator, =, categories, ., iterator, (, ), ;, while, (]
[iterator, =, categories, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =]
[), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (]
[{, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,]
[key, =, (, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,]
[(, Comparable, ), iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,]
[iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[iterator, ., next, (, ), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;]
[), ;, double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (]
[double, y, =, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,]
[=, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[=, getCategoryMiddle, (, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[(, key, ,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -]
[,, categories, ,, dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,]
[dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;]
[dataArea, ,, edge, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw, (]
[setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw, (, line, ), ;]
[setLine, (, cursor, ,, y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw, (, line, ), ;]
[y, ,, cursor, -, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (]
[cursor, -, il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,]
[il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[il, ,, y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,]
[y, ), ;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +]
[;, g2, ., draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,]
[draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;]
[draw, (, line, ), ;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;]
[;, line, ., setLine, (, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (]
[(, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }]
[(, cursor, ,, y, ,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }]
[,, cursor, +, ol, ,, y, ), ;, g2, ., draw, (, line, ), ;, }, state, ., cursorRight, (]
[protected, TextBlock, createLabel, (, Comparable, category, ,, float, width, ,, RectangleEdge, edge, ,, Graphics2D, g2, ), {, TextBlock, label, =]
[protected, TextBlock, createLabel, (, Comparable, category, ,, float, width, ,, RectangleEdge, edge, ,, Graphics2D, g2, ), {, TextBlock, label, =]
[Comparable, category, ,, float, width, ,, RectangleEdge, edge, ,, Graphics2D, g2, ), {, TextBlock, label, =, TextUtilities, ., createTextBlock, (]
[Comparable, category, ,, float, width, ,, RectangleEdge, edge, ,, Graphics2D, g2, ), {, TextBlock, label, =, TextUtilities, ., createTextBlock, (]
[RectangleEdge, edge, ,, Graphics2D, g2, ), {, TextBlock, label, =, TextUtilities, ., createTextBlock, (, category, ., toString, (, ), ,]
[,, Graphics2D, g2, ), {, TextBlock, label, =, TextUtilities, ., createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (]
[), {, TextBlock, label, =, TextUtilities, ., createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (, category, ), ,]
[TextBlock, label, =, TextUtilities, ., createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (]
[TextUtilities, ., createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,]
[createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width, ,]
[createTextBlock, (, category, ., toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width, ,]
[toString, (, ), ,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines, ,]
[,, getTickLabelFont, (, category, ), ,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (]
[,, getTickLabelPaint, (, category, ), ,, width, ,, this, ., maximumCategoryLabelLines, ,, new, G2TextMeasurer, (, g2, ), ), ;, return]
[label, ;, }, protected, double, calculateTextBlockWidth, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =]
[TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =]
[TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =]
[position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =, block, ., calculateDimensions, (]
[RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =]
[), ;, Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (]
[Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,]
[=, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[=, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,]
[), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,]
[0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =]
[0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =]
[size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (]
[getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,]
[getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,]
[getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,]
[), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, w, =]
[), ,, 0.0f, ,, 0.0f, ), ;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +]
[), ,, 0.0f, ,, 0.0f, ), ;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +]
[;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[;, double, w, =, rotatedBox, ., getBounds2D, (, ), ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[(, ), ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, return]
[w, ;, }, protected, double, calculateTextBlockHeight, (, TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =]
[TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =]
[TextBlock, block, ,, CategoryLabelPosition, position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =]
[position, ,, Graphics2D, g2, ), {, RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =, block, ., calculateDimensions, (]
[RectangleInsets, insets, =, getTickLabelInsets, (, ), ;, Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =]
[), ;, Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (]
[Size2D, size, =, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,]
[=, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[=, block, ., calculateDimensions, (, g2, ), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,]
[), ;, Rectangle2D, box, =, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,]
[0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =]
[0.0, ,, 0.0, ,, size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =]
[size, ., getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (]
[getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,]
[getWidth, (, ), ,, size, ., getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,]
[getHeight, (, ), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,]
[), ), ;, Shape, rotatedBox, =, ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =]
[ShapeUtilities, ., rotateShape, (, box, ,, position, ., getAngle, (, ), ,, 0.0f, ,, 0.0f, ), ;, double, h, =]
[), ,, 0.0f, ,, 0.0f, ), ;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +]
[), ,, 0.0f, ,, 0.0f, ), ;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +]
[;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[;, double, h, =, rotatedBox, ., getBounds2D, (, ), ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[(, ), ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, return]
[., getBottom, (, ), ;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =]
[), ;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, )]
[), ;, return, h, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, )]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, ), super, ., clone, (, ), ;]
[public, Object, clone, (, ), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, ), super, ., clone, (, ), ;]
[), throws, CloneNotSupportedException, {, CategoryAxis, clone, =, (, CategoryAxis, ), super, ., clone, (, ), ;, clone, ., tickLabelFontMap, =]
[{, CategoryAxis, clone, =, (, CategoryAxis, ), super, ., clone, (, ), ;, clone, ., tickLabelFontMap, =, new, HashMap, (]
[{, CategoryAxis, clone, =, (, CategoryAxis, ), super, ., clone, (, ), ;, clone, ., tickLabelFontMap, =, new, HashMap, (]
[CategoryAxis, ), super, ., clone, (, ), ;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;]
[CategoryAxis, ), super, ., clone, (, ), ;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;]
[clone, (, ), ;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =]
[;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (]
[;, clone, ., tickLabelFontMap, =, new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (]
[new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;]
[new, HashMap, (, this, ., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;]
[., tickLabelFontMap, ), ;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =]
[;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (]
[;, clone, ., tickLabelPaintMap, =, new, HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (]
[HashMap, (, this, ., tickLabelPaintMap, ), ;, clone, ., categoryLabelToolTips, =, new, HashMap, (, this, ., categoryLabelToolTips, ), ;, return]
[(, this, ., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[(, this, ., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[., categoryLabelToolTips, ), ;, return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[return, clone, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return]
[return, true, ;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false, ;, }, if, (, !]
[true, ;, }, if, (, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false, ;, }, if, (, !]
[(, !, (, obj, instanceof, CategoryAxis, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[CategoryAxis, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, CategoryAxis, that, =]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, )]
[equals, (, obj, ), ), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (]
[equals, (, obj, ), ), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (]
[equals, (, obj, ), ), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (]
[), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (, that, ., lowerMargin, !=]
[), {, return, false, ;, }, CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (, that, ., lowerMargin, !=]
[CategoryAxis, that, =, (, CategoryAxis, ), obj, ;, if, (, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return]
[), obj, ;, if, (, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (]
[(, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (, that, ., upperMargin, !=]
[(, that, ., lowerMargin, !=, this, ., lowerMargin, ), {, return, false, ;, }, if, (, that, ., upperMargin, !=]
[., lowerMargin, ), {, return, false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return]
[false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;, }, if, (]
[(, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;, }, if, (, that, ., categoryMargin, !=]
[(, that, ., upperMargin, !=, this, ., upperMargin, ), {, return, false, ;, }, if, (, that, ., categoryMargin, !=]
[., upperMargin, ), {, return, false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return]
[false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;, }, if, (]
[(, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=]
[(, that, ., categoryMargin, !=, this, ., categoryMargin, ), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=]
[., categoryMargin, ), {, return, false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return]
[false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (]
[(, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=]
[(, that, ., maximumCategoryLabelWidthRatio, !=, this, ., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=]
[., maximumCategoryLabelWidthRatio, ), {, return, false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return]
[false, ;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (]
[;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !]
[that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[that, ., categoryLabelPositionOffset, !=, this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,]
[this, ., categoryLabelPositionOffset, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return]
[ObjectUtilities, ., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (]
[., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, that, ., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !]
[., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., categoryLabelPositions, ,, this, ., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,]
[., categoryLabelPositions, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return]
[ObjectUtilities, ., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (]
[., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, that, ., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !]
[., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., categoryLabelToolTips, ,, this, ., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,]
[., categoryLabelToolTips, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !]
[(, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (]
[(, this, ., tickLabelFontMap, ,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (]
[,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,]
[,, that, ., tickLabelFontMap, ), ), {, return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,]
[return, false, ;, }, if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, ), ), {, return]
[if, (, !, equalPaintMaps, (, this, ., tickLabelPaintMap, ,, that, ., tickLabelPaintMap, ), ), {, return, false, ;, }, return]
[tickLabelPaintMap, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, if, (]
[tickLabelPaintMap, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, if, (]
[return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, if, (, getLabel, (, ), !=]
[return, true, ;, }, public, int, hashCode, (, ), {, if, (, getLabel, (, ), !=, null, ), {, return]
[return, true, ;, }, public, int, hashCode, (, ), {, if, (, getLabel, (, ), !=, null, ), {, return]
[getLabel, (, ), !=, null, ), {, return, getLabel, (, ), ., hashCode, (, ), ;, }, else, {, return]
[), ;, }, else, {, return, 0, ;, }, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[), ;, }, else, {, return, 0, ;, }, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[0, ;, }, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[}, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, writePaintMap, (]
[}, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, writePaintMap, (]
[writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, writePaintMap, (, this, ., tickLabelPaintMap, ,]
[this, ., tickLabelPaintMap, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., tickLabelPaintMap, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., tickLabelPaintMap, =]
[ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., tickLabelPaintMap, =, readPaintMap, (]
[(, stream, ), ;, }, private, Map, readPaintMap, (, ObjectInputStream, in, ), throws, IOException, ,, ClassNotFoundException, {, boolean, isNull, =]
[(, stream, ), ;, }, private, Map, readPaintMap, (, ObjectInputStream, in, ), throws, IOException, ,, ClassNotFoundException, {, boolean, isNull, =]
[(, ObjectInputStream, in, ), throws, IOException, ,, ClassNotFoundException, {, boolean, isNull, =, in, ., readBoolean, (, ), ;, if, (]
[throws, IOException, ,, ClassNotFoundException, {, boolean, isNull, =, in, ., readBoolean, (, ), ;, if, (, isNull, ), {, return]
[isNull, =, in, ., readBoolean, (, ), ;, if, (, isNull, ), {, return, null, ;, }, Map, result, =]
[if, (, isNull, ), {, return, null, ;, }, Map, result, =, new, HashMap, (, ), ;, int, count, =]
[if, (, isNull, ), {, return, null, ;, }, Map, result, =, new, HashMap, (, ), ;, int, count, =]
[=, new, HashMap, (, ), ;, int, count, =, in, ., readInt, (, ), ;, for, (, int, i, =]
[HashMap, (, ), ;, int, count, =, in, ., readInt, (, ), ;, for, (, int, i, =, 0, ;]
[HashMap, (, ), ;, int, count, =, in, ., readInt, (, ), ;, for, (, int, i, =, 0, ;]
[), ;, int, count, =, in, ., readInt, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[int, count, =, in, ., readInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, count, ;]
[int, count, =, in, ., readInt, (, ), ;, for, (, int, i, =, 0, ;, i, <, count, ;]
[), ;, for, (, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, Comparable, category, =]
[(, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, Comparable, category, =, (, Comparable, )]
[(, int, i, =, 0, ;, i, <, count, ;, i, ++, ), {, Comparable, category, =, (, Comparable, )]
[;, i, ++, ), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =]
[;, i, ++, ), {, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =]
[{, Comparable, category, =, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =, SerialUtilities, ., readPaint, (]
[=, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =, SerialUtilities, ., readPaint, (, in, ), ;]
[=, (, Comparable, ), in, ., readObject, (, ), ;, Paint, paint, =, SerialUtilities, ., readPaint, (, in, ), ;]
[in, ., readObject, (, ), ;, Paint, paint, =, SerialUtilities, ., readPaint, (, in, ), ;, result, ., put, (]
[readObject, (, ), ;, Paint, paint, =, SerialUtilities, ., readPaint, (, in, ), ;, result, ., put, (, category, ,]
[paint, =, SerialUtilities, ., readPaint, (, in, ), ;, result, ., put, (, category, ,, paint, ), ;, }, return]
[}, return, result, ;, }, private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if, (]
[}, return, result, ;, }, private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if, (]
[result, ;, }, private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if, (, map, ==]
[private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if, (, map, ==, null, ), {]
[private, void, writePaintMap, (, Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if, (, map, ==, null, ), {]
[Map, map, ,, ObjectOutputStream, out, ), throws, IOException, {, if, (, map, ==, null, ), {, out, ., writeBoolean, (]
[throws, IOException, {, if, (, map, ==, null, ), {, out, ., writeBoolean, (, true, ), ;, }, else, {]
[throws, IOException, {, if, (, map, ==, null, ), {, out, ., writeBoolean, (, true, ), ;, }, else, {]
[(, map, ==, null, ), {, out, ., writeBoolean, (, true, ), ;, }, else, {, out, ., writeBoolean, (]
[out, ., writeBoolean, (, true, ), ;, }, else, {, out, ., writeBoolean, (, false, ), ;, Set, keys, =]
[out, ., writeBoolean, (, true, ), ;, }, else, {, out, ., writeBoolean, (, false, ), ;, Set, keys, =]
[{, out, ., writeBoolean, (, false, ), ;, Set, keys, =, map, ., keySet, (, ), ;, int, count, =]
[{, out, ., writeBoolean, (, false, ), ;, Set, keys, =, map, ., keySet, (, ), ;, int, count, =]
[), ;, Set, keys, =, map, ., keySet, (, ), ;, int, count, =, keys, ., size, (, ), ;]
[), ;, Set, keys, =, map, ., keySet, (, ), ;, int, count, =, keys, ., size, (, ), ;]
[=, map, ., keySet, (, ), ;, int, count, =, keys, ., size, (, ), ;, out, ., writeInt, (]
[;, int, count, =, keys, ., size, (, ), ;, out, ., writeInt, (, count, ), ;, Iterator, iterator, =]
[;, int, count, =, keys, ., size, (, ), ;, out, ., writeInt, (, count, ), ;, Iterator, iterator, =]
[), ;, out, ., writeInt, (, count, ), ;, Iterator, iterator, =, keys, ., iterator, (, ), ;, while, (]
[), ;, out, ., writeInt, (, count, ), ;, Iterator, iterator, =, keys, ., iterator, (, ), ;, while, (]
[iterator, =, keys, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, )]
[(, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;]
[(, iterator, ., hasNext, (, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;]
[(, ), ), {, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, out, ., writeObject, (]
[{, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, out, ., writeObject, (, key, ), ;]
[{, Comparable, key, =, (, Comparable, ), iterator, ., next, (, ), ;, out, ., writeObject, (, key, ), ;]
[(, Comparable, ), iterator, ., next, (, ), ;, out, ., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (]
[iterator, ., next, (, ), ;, out, ., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, )]
[iterator, ., next, (, ), ;, out, ., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, )]
[), ;, out, ., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (]
[., writeObject, (, key, ), ;, SerialUtilities, ., writePaint, (, (, Paint, ), map, ., get, (, key, ), ,]
[,, out, ), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (]
[,, out, ), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (]
[,, out, ), ;, }, }, }, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (]
[}, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (, map1, ., size, (, ), !=]
[}, private, boolean, equalPaintMaps, (, Map, map1, ,, Map, map2, ), {, if, (, map1, ., size, (, ), !=]
[Map, map2, ), {, if, (, map1, ., size, (, ), !=, map2, ., size, (, ), ), {, return]
[map1, ., size, (, ), !=, map2, ., size, (, ), ), {, return, false, ;, }, Set, entries, =]
[map1, ., size, (, ), !=, map2, ., size, (, ), ), {, return, false, ;, }, Set, entries, =]
[(, ), ), {, return, false, ;, }, Set, entries, =, map1, ., entrySet, (, ), ;, Iterator, iterator, =]
[(, ), ), {, return, false, ;, }, Set, entries, =, map1, ., entrySet, (, ), ;, Iterator, iterator, =]
[Set, entries, =, map1, ., entrySet, (, ), ;, Iterator, iterator, =, entries, ., iterator, (, ), ;, while, (]
[Set, entries, =, map1, ., entrySet, (, ), ;, Iterator, iterator, =, entries, ., iterator, (, ), ;, while, (]
[entries, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Map, ., Entry, entry, =]
[;, while, (, iterator, ., hasNext, (, ), ), {, Map, ., Entry, entry, =, (, Map, ., Entry, )]
[;, while, (, iterator, ., hasNext, (, ), ), {, Map, ., Entry, entry, =, (, Map, ., Entry, )]
[{, Map, ., Entry, entry, =, (, Map, ., Entry, ), iterator, ., next, (, ), ;, Paint, p1, =]
[Entry, entry, =, (, Map, ., Entry, ), iterator, ., next, (, ), ;, Paint, p1, =, (, Paint, )]
[Entry, entry, =, (, Map, ., Entry, ), iterator, ., next, (, ), ;, Paint, p1, =, (, Paint, )]
[., next, (, ), ;, Paint, p1, =, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =]
[), ;, Paint, p1, =, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =, (, Paint, )]
[), ;, Paint, p1, =, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =, (, Paint, )]
[=, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =, (, Paint, ), map2, ., get, (]
[=, (, Paint, ), entry, ., getValue, (, ), ;, Paint, p2, =, (, Paint, ), map2, ., get, (]
[;, Paint, p2, =, (, Paint, ), map2, ., get, (, entry, ., getKey, (, ), ), ;, if, (]
[Paint, p2, =, (, Paint, ), map2, ., get, (, entry, ., getKey, (, ), ), ;, if, (, !]
[Paint, p2, =, (, Paint, ), map2, ., get, (, entry, ., getKey, (, ), ), ;, if, (, !]
[Paint, ), map2, ., get, (, entry, ., getKey, (, ), ), ;, if, (, !, PaintUtilities, ., equal, (]
[map2, ., get, (, entry, ., getKey, (, ), ), ;, if, (, !, PaintUtilities, ., equal, (, p1, ,]
[., getKey, (, ), ), ;, if, (, !, PaintUtilities, ., equal, (, p1, ,, p2, ), ), {, return]
[;, if, (, !, PaintUtilities, ., equal, (, p1, ,, p2, ), ), {, return, false, ;, }, }, return]
