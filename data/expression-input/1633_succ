[;, boolean, statementStarted, =, false, ;, boolean, sawFunction, =, false, ;, void, startSourceMapping, (, Node, node, ), {, }, void]
[;, boolean, sawFunction, =, false, ;, void, startSourceMapping, (, Node, node, ), {, }, void, endSourceMapping, (, Node, node, )]
[;, void, startSourceMapping, (, Node, node, ), {, }, void, endSourceMapping, (, Node, node, ), {, }, boolean, continueProcessing, (]
[;, }, abstract, char, getLastChar, (, ), ;, void, addIdentifier, (, String, identifier, ), {, add, (, identifier, ), ;]
[;, }, abstract, void, append, (, String, str, ), ;, void, appendBlockStart, (, ), {, append, (, "{", ), ;]
[), ;, }, abstract, void, append, (, String, str, ), ;, void, appendBlockStart, (, ), {, append, (, "{", )]
[;, }, void, appendBlockEnd, (, ), {, append, (, "}", ), ;, }, void, startNewLine, (, ), {, }, void]
[), ;, }, void, appendBlockEnd, (, ), {, append, (, "}", ), ;, }, void, startNewLine, (, ), {, }]
[;, }, void, startNewLine, (, ), {, }, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, void, maybeCutLine]
[), ;, }, void, startNewLine, (, ), {, }, void, maybeLineBreak, (, ), {, maybeCutLine, (, ), ;, }, void]
[;, }, void, maybeCutLine, (, ), {, }, void, endLine, (, ), {, }, void, notePreferredLineBreak, (, ), {, }]
[), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, }, appendBlockStart, (, ), ;, endLine, (, ), ;]
[;, maybeLineBreak, (, ), ;, }, appendBlockStart, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, void]
[), ;, maybeLineBreak, (, ), ;, }, appendBlockStart, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }]
[;, }, appendBlockStart, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, void, endBlock, (, ), {]
[;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, void, endBlock, (, ), {, endBlock, (, false, ), ;]
[;, statementNeedsEnded, =, false, ;, }, void, endBlock, (, ), {, endBlock, (, false, ), ;, }, void, endBlock, (]
[=, false, ;, }, void, endBlock, (, ), {, endBlock, (, false, ), ;, }, void, endBlock, (, boolean, shouldEndLine]
[;, }, void, endBlock, (, ), {, endBlock, (, false, ), ;, }, void, endBlock, (, boolean, shouldEndLine, ), {]
[;, }, void, endBlock, (, boolean, shouldEndLine, ), {, appendBlockEnd, (, ), ;, if, (, shouldEndLine, ), {, endLine, (]
[), ;, }, void, endBlock, (, boolean, shouldEndLine, ), {, appendBlockEnd, (, ), ;, if, (, shouldEndLine, ), {, endLine]
[;, if, (, shouldEndLine, ), {, endLine, (, ), ;, }, statementNeedsEnded, =, false, ;, }, void, listSeparator, (, )]
[), {, endLine, (, ), ;, }, statementNeedsEnded, =, false, ;, }, void, listSeparator, (, ), {, add, (, ","]
[;, }, statementNeedsEnded, =, false, ;, }, void, listSeparator, (, ), {, add, (, ",", ), ;, maybeLineBreak, (, )]
[=, false, ;, }, void, listSeparator, (, ), {, add, (, ",", ), ;, maybeLineBreak, (, ), ;, }, void]
[;, }, void, listSeparator, (, ), {, add, (, ",", ), ;, maybeLineBreak, (, ), ;, }, void, endStatement, (]
[;, maybeLineBreak, (, ), ;, }, void, endStatement, (, ), {, endStatement, (, false, ), ;, }, void, endStatement, (]
[), ;, maybeLineBreak, (, ), ;, }, void, endStatement, (, ), {, endStatement, (, false, ), ;, }, void, endStatement]
[;, }, void, endStatement, (, ), {, endStatement, (, false, ), ;, }, void, endStatement, (, boolean, needSemiColon, ), {]
[;, }, void, endStatement, (, boolean, needSemiColon, ), {, if, (, needSemiColon, ), {, append, (, ";", ), ;, maybeLineBreak]
[), ;, }, void, endStatement, (, boolean, needSemiColon, ), {, if, (, needSemiColon, ), {, append, (, ";", ), ;]
[), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, statementNeedsEnded, =, false, ;, }, else, if, (, statementStarted]
[;, maybeLineBreak, (, ), ;, statementNeedsEnded, =, false, ;, }, else, if, (, statementStarted, ), {, statementNeedsEnded, =, true, ;]
[), ;, maybeLineBreak, (, ), ;, statementNeedsEnded, =, false, ;, }, else, if, (, statementStarted, ), {, statementNeedsEnded, =, true]
[;, statementNeedsEnded, =, false, ;, }, else, if, (, statementStarted, ), {, statementNeedsEnded, =, true, ;, }, }, void, maybeEndStatement]
[=, false, ;, }, else, if, (, statementStarted, ), {, statementNeedsEnded, =, true, ;, }, }, void, maybeEndStatement, (, )]
[;, }, else, if, (, statementStarted, ), {, statementNeedsEnded, =, true, ;, }, }, void, maybeEndStatement, (, ), {, if]
[), {, statementNeedsEnded, =, true, ;, }, }, void, maybeEndStatement, (, ), {, if, (, statementNeedsEnded, ), {, append, (]
[=, true, ;, }, }, void, maybeEndStatement, (, ), {, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;]
[;, }, }, void, maybeEndStatement, (, ), {, if, (, statementNeedsEnded, ), {, append, (, ";", ), ;, maybeLineBreak, (]
[), {, append, (, ";", ), ;, maybeLineBreak, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }]
[;, maybeLineBreak, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, statementStarted, =, true, ;, }, void]
[), ;, maybeLineBreak, (, ), ;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, statementStarted, =, true, ;, }]
[;, endLine, (, ), ;, statementNeedsEnded, =, false, ;, }, statementStarted, =, true, ;, }, void, endFunction, (, ), {]
[;, statementNeedsEnded, =, false, ;, }, statementStarted, =, true, ;, }, void, endFunction, (, ), {, endFunction, (, false, )]
[=, false, ;, }, statementStarted, =, true, ;, }, void, endFunction, (, ), {, endFunction, (, false, ), ;, }]
[;, }, statementStarted, =, true, ;, }, void, endFunction, (, ), {, endFunction, (, false, ), ;, }, void, endFunction]
[=, true, ;, }, void, endFunction, (, ), {, endFunction, (, false, ), ;, }, void, endFunction, (, boolean, statementContext]
[;, }, void, endFunction, (, ), {, endFunction, (, false, ), ;, }, void, endFunction, (, boolean, statementContext, ), {]
[;, }, void, endFunction, (, boolean, statementContext, ), {, sawFunction, =, true, ;, if, (, statementContext, ), {, endLine, (]
[), ;, }, void, endFunction, (, boolean, statementContext, ), {, sawFunction, =, true, ;, if, (, statementContext, ), {, endLine]
[=, true, ;, if, (, statementContext, ), {, endLine, (, ), ;, }, }, void, beginCaseBody, (, ), {, append]
[;, if, (, statementContext, ), {, endLine, (, ), ;, }, }, void, beginCaseBody, (, ), {, append, (, ":"]
[), {, endLine, (, ), ;, }, }, void, beginCaseBody, (, ), {, append, (, ":", ), ;, }, void]
[;, }, }, void, beginCaseBody, (, ), {, append, (, ":", ), ;, }, void, endCaseBody, (, ), {, }]
[;, }, void, endCaseBody, (, ), {, }, void, add, (, String, newcode, ), {, maybeEndStatement, (, ), ;, if]
[), ;, }, void, endCaseBody, (, ), {, }, void, add, (, String, newcode, ), {, maybeEndStatement, (, ), ;]
[;, if, (, newcode, ., length, (, ), ==, 0, ), {, return, ;, }, char, c, =, newcode, .]
[), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (, isWordChar, (]
[==, 0, ), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (]
[., length, (, ), ==, 0, ), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, )]
[), {, return, ;, }, char, c, =, newcode, ., charAt, (, 0, ), ;, if, (, (, isWordChar, (]
[;, if, (, (, isWordChar, (, c, ), ||, c, ==, '\\', ), &&, isWordChar, (, getLastChar, (, ), )]
[., charAt, (, 0, ), ;, if, (, (, isWordChar, (, c, ), ||, c, ==, '\\', ), &&, isWordChar]
[), ;, if, (, (, isWordChar, (, c, ), ||, c, ==, '\\', ), &&, isWordChar, (, getLastChar, (, )]
[), {, append, (, " ", ), ;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==, '/']
[&&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (, c, ==]
[), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (, c]
[||, c, ==, '\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }]
[), ||, c, ==, '\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;]
[), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (, c]
[==, '\\', ), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if]
[), &&, isWordChar, (, getLastChar, (, ), ), ), {, append, (, " ", ), ;, }, else, if, (, c]
[), {, append, (, " ", ), ;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==, '/']
[), ), {, append, (, " ", ), ;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==]
[;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==, '/', ), {, append, (, " ", )]
[), ;, }, else, if, (, c, ==, '/', &&, getLastChar, (, ), ==, '/', ), {, append, (, " "]
[), {, append, (, " ", ), ;, }, append, (, newcode, ), ;, }, void, appendOp, (, String, op, ,]
[&&, getLastChar, (, ), ==, '/', ), {, append, (, " ", ), ;, }, append, (, newcode, ), ;, }]
[==, '/', &&, getLastChar, (, ), ==, '/', ), {, append, (, " ", ), ;, }, append, (, newcode, )]
[&&, getLastChar, (, ), ==, '/', ), {, append, (, " ", ), ;, }, append, (, newcode, ), ;, }]
[), {, append, (, " ", ), ;, }, append, (, newcode, ), ;, }, void, appendOp, (, String, op, ,]
[==, '/', ), {, append, (, " ", ), ;, }, append, (, newcode, ), ;, }, void, appendOp, (, String]
[), {, append, (, " ", ), ;, }, append, (, newcode, ), ;, }, void, appendOp, (, String, op, ,]
[;, }, append, (, newcode, ), ;, }, void, appendOp, (, String, op, ,, boolean, binOp, ), {, append, (]
[), ;, }, append, (, newcode, ), ;, }, void, appendOp, (, String, op, ,, boolean, binOp, ), {, append]
[;, }, void, appendOp, (, String, op, ,, boolean, binOp, ), {, append, (, op, ), ;, }, void, addOp]
[), ;, }, void, appendOp, (, String, op, ,, boolean, binOp, ), {, append, (, op, ), ;, }, void]
[;, }, void, addOp, (, String, op, ,, boolean, binOp, ), {, maybeEndStatement, (, ), ;, char, first, =, op]
[), ;, }, void, addOp, (, String, op, ,, boolean, binOp, ), {, maybeEndStatement, (, ), ;, char, first, =]
[;, char, first, =, op, ., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (]
[;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||, first, ==, '-', ), &&]
[., charAt, (, 0, ), ;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||]
[), ;, char, prev, =, getLastChar, (, ), ;, if, (, (, first, ==, '+', ||, first, ==, '-', )]
[;, if, (, (, first, ==, '+', ||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (]
[), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (]
[&&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (, first]
[), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (]
[||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (]
[==, '+', ||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else]
[||, first, ==, '-', ), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (]
[), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (]
[==, '-', ), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, .]
[), &&, prev, ==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (]
[), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (]
[==, first, ), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&]
[), {, append, (, " ", ), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (]
[;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {, append, (]
[), ;, }, else, if, (, Character, ., isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {, append]
[), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', ), {]
[&&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&]
[., isLetter, (, first, ), &&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if]
[), &&, isWordChar, (, prev, ), ), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-']
[), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', ), {]
[), ), {, append, (, " ", ), ;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', )]
[;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', ), {, append, (, " ", ), ;, }]
[), ;, }, else, if, (, prev, ==, '-', &&, first, ==, '>', ), {, append, (, " ", ), ;]
[), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if, (, binOp, ), {]
[&&, first, ==, '>', ), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if]
[==, '-', &&, first, ==, '>', ), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, )]
[&&, first, ==, '>', ), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if]
[), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if, (, binOp, ), {]
[==, '>', ), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if, (, binOp]
[), {, append, (, " ", ), ;, }, appendOp, (, op, ,, binOp, ), ;, if, (, binOp, ), {]
[;, }, appendOp, (, op, ,, binOp, ), ;, if, (, binOp, ), {, maybeCutLine, (, ), ;, }, }]
[), ;, }, appendOp, (, op, ,, binOp, ), ;, if, (, binOp, ), {, maybeCutLine, (, ), ;, }]
[;, if, (, binOp, ), {, maybeCutLine, (, ), ;, }, }, void, addNumber, (, double, x, ), {, char]
[,, binOp, ), ;, if, (, binOp, ), {, maybeCutLine, (, ), ;, }, }, void, addNumber, (, double, x]
[), ;, if, (, binOp, ), {, maybeCutLine, (, ), ;, }, }, void, addNumber, (, double, x, ), {]
[), {, maybeCutLine, (, ), ;, }, }, void, addNumber, (, double, x, ), {, char, prev, =, getLastChar, (]
[;, }, }, void, addNumber, (, double, x, ), {, char, prev, =, getLastChar, (, ), ;, boolean, negativeZero, =]
[;, boolean, negativeZero, =, isNegativeZero, (, x, ), ;, if, (, (, x, <, 0, ||, negativeZero, ), &&, prev]
[;, if, (, (, x, <, 0, ||, negativeZero, ), &&, prev, ==, '-', ), {, add, (, " ", )]
[), ;, if, (, (, x, <, 0, ||, negativeZero, ), &&, prev, ==, '-', ), {, add, (, " "]
[), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else]
[&&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0"]
[), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (]
[||, negativeZero, ), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {]
[<, 0, ||, negativeZero, ), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero]
[||, negativeZero, ), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {]
[), &&, prev, ==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (]
[), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else]
[==, '-', ), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;]
[), {, add, (, " ", ), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else]
[;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else, if, (, (, long, ), x]
[), ;, }, if, (, negativeZero, ), {, addConstant, (, "-0", ), ;, }, else, if, (, (, long, )]
[), {, addConstant, (, "-0", ), ;, }, else, if, (, (, long, ), x, ==, x, ), {, long]
[;, }, else, if, (, (, long, ), x, ==, x, ), {, long, value, =, (, long, ), x]
[), ;, }, else, if, (, (, long, ), x, ==, x, ), {, long, value, =, (, long, )]
[), {, long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =, 0, ;]
[==, x, ), {, long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =]
[==, x, ), {, long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =]
[), {, long, value, =, (, long, ), x, ;, long, mantissa, =, value, ;, int, exp, =, 0, ;]
[;, long, mantissa, =, value, ;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=]
[;, long, mantissa, =, value, ;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=]
[;, int, exp, =, 0, ;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (]
[;, if, (, Math, ., abs, (, x, ), >=, 100, ), {, while, (, mantissa, /, 10, *, Math]
[), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value]
[>=, 100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, )]
[., abs, (, x, ), >=, 100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10]
[), >=, 100, ), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1]
[), {, while, (, mantissa, /, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value]
[), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (]
[==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {]
[*, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp]
[/, 10, *, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10]
[*, Math, ., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp]
[==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {]
[., pow, (, 10, ,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;]
[,, exp, +, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (]
[), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, )]
[+, 1, ), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >]
[), ==, value, ), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, )]
[), {, mantissa, /=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (]
[/=, 10, ;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString]
[;, exp, ++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString, (, mantissa]
[;, }, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString, (, mantissa, ), +, "E"]
[++, ;, }, }, if, (, exp, >, 2, ), {, addConstant, (, Long, ., toString, (, mantissa, ), +]
[), {, addConstant, (, Long, ., toString, (, mantissa, ), +, "E", +, Integer, ., toString, (, exp, ), )]
[>, 2, ), {, addConstant, (, Long, ., toString, (, mantissa, ), +, "E", +, Integer, ., toString, (, exp]
[), {, addConstant, (, Long, ., toString, (, mantissa, ), +, "E", +, Integer, ., toString, (, exp, ), )]
[;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (, Long, ., toHexString, (]
[), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (, Long, ., toHexString]
[+, Integer, ., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value]
[+, "E", +, Integer, ., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs]
[., toString, (, mantissa, ), +, "E", +, Integer, ., toString, (, exp, ), ), ;, }, else, {, long]
[), +, "E", +, Integer, ., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, .]
[+, Integer, ., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value]
[), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (, Long, ., toHexString]
[., toString, (, exp, ), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;]
[), ), ;, }, else, {, long, valueAbs, =, Math, ., abs, (, value, ), ;, if, (, Long, .]
[;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <, Long, ., toString, (]
[., abs, (, value, ), ;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2]
[), ;, if, (, Long, ., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <, Long, ., toString]
[), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (]
[<, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <, 0, ?]
[+, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <]
[., length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant]
[., toHexString, (, valueAbs, ), ., length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length]
[), ., length, (, ), +, 2, <, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {]
[<, Long, ., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <, 0, ?]
[), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (]
[., length, (, ), ), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x", +]
[., toString, (, valueAbs, ), ., length, (, ), ), {, addConstant, (, (, value, <, 0, ?, "-", :]
[), ., length, (, ), ), {, addConstant, (, (, value, <, 0, ?, "-", :, "", ), +, "0x"]
[;, }, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else, {, addConstant]
[), ;, }, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else, {]
[+, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long, ., toString, (, value, )]
[+, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long, ., toString, (]
[), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long, ., toString]
[?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant]
[<, 0, ?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else]
[?, "-", :, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant]
[:, "", ), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long]
[), +, "0x", +, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long, ., toString]
[+, Long, ., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long, ., toString, (, value, )]
[), ;, }, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else, {]
[., toHexString, (, valueAbs, ), ), ;, }, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;]
[), ), ;, }, else, {, addConstant, (, Long, ., toString, (, value, ), ), ;, }, }, }, else]
[;, }, }, }, else, {, addConstant, (, String, ., valueOf, (, x, ), ., replace, (, ".0E", ,, "E"]
[), ;, }, }, }, else, {, addConstant, (, String, ., valueOf, (, x, ), ., replace, (, ".0E", ,]
[., toString, (, value, ), ), ;, }, }, }, else, {, addConstant, (, String, ., valueOf, (, x, )]
[), ), ;, }, }, }, else, {, addConstant, (, String, ., valueOf, (, x, ), ., replace, (, ".0E"]
[;, }, }, void, addConstant, (, String, newcode, ), {, add, (, newcode, ), ;, }, static, boolean, isNegativeZero, (]
[), ;, }, }, void, addConstant, (, String, newcode, ), {, add, (, newcode, ), ;, }, static, boolean, isNegativeZero]
[., replace, (, ".0E", ,, "E", ), ), ;, }, }, void, addConstant, (, String, newcode, ), {, add, (]
[., valueOf, (, x, ), ., replace, (, ".0E", ,, "E", ), ), ;, }, }, void, addConstant, (, String]
[), ., replace, (, ".0E", ,, "E", ), ), ;, }, }, void, addConstant, (, String, newcode, ), {, add]
[,, "E", ), ), ;, }, }, void, addConstant, (, String, newcode, ), {, add, (, newcode, ), ;, }]
[), ), ;, }, }, void, addConstant, (, String, newcode, ), {, add, (, newcode, ), ;, }, static, boolean]
[;, }, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&, Math, ., copySign, (, 1]
[), ;, }, static, boolean, isNegativeZero, (, double, x, ), {, return, x, ==, 0.0, &&, Math, ., copySign, (]
[;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==, '$', ||]
[&&, Math, ., copySign, (, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch]
[==, 0.0, &&, Math, ., copySign, (, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (]
[&&, Math, ., copySign, (, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch]
[;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==, '$', ||]
[==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch]
[., copySign, (, 1, ,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {]
[,, x, ), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==]
[), ==, -, 1.0, ;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||]
[;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==, '$', ||]
[;, }, static, boolean, isWordChar, (, char, ch, ), {, return, (, ch, ==, '_', ||, ch, ==, '$', ||]
[;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, statementContext, )]
[), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, statementContext]
[||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean]
[||, ch, ==, '$', ||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return]
[==, '_', ||, ch, ==, '$', ||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, )]
[||, ch, ==, '$', ||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return]
[||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean]
[==, '$', ||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;]
[||, Character, ., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean]
[), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, statementContext]
[., isLetterOrDigit, (, ch, ), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean, breakAfterBlockFor, (]
[), ), ;, }, boolean, shouldPreserveExtraBlocks, (, ), {, return, false, ;, }, boolean, breakAfterBlockFor, (, Node, n, ,, boolean]
[;, }, boolean, breakAfterBlockFor, (, Node, n, ,, boolean, statementContext, ), {, return, statementContext, ;, }, void, endFile, (, )]
[;, }, void, endFile, (, ), {, }, }]
