[;, public, static, MutableInterval, parse, (, String, str, ), {, return, new, MutableInterval, (, str, ), ;, }, public, MutableInterval]
[;, public, static, MutableInterval, parse, (, String, str, ), {, return, new, MutableInterval, (, str, ), ;, }, public, MutableInterval]
[;, }, public, MutableInterval, (, ), {, super, (, 0L, ,, 0L, ,, null, ), ;, }, public, MutableInterval, (]
[), ;, }, public, MutableInterval, (, ), {, super, (, 0L, ,, 0L, ,, null, ), ;, }, public, MutableInterval]
[,, 0L, ,, null, ), ;, }, public, MutableInterval, (, long, startInstant, ,, long, endInstant, ), {, super, (, startInstant]
[,, null, ), ;, }, public, MutableInterval, (, long, startInstant, ,, long, endInstant, ), {, super, (, startInstant, ,, endInstant]
[), ;, }, public, MutableInterval, (, long, startInstant, ,, long, endInstant, ), {, super, (, startInstant, ,, endInstant, ,, null]
[,, endInstant, ,, null, ), ;, }, public, MutableInterval, (, long, startInstant, ,, long, endInstant, ,, Chronology, chronology, ), {]
[,, null, ), ;, }, public, MutableInterval, (, long, startInstant, ,, long, endInstant, ,, Chronology, chronology, ), {, super, (]
[), ;, }, public, MutableInterval, (, long, startInstant, ,, long, endInstant, ,, Chronology, chronology, ), {, super, (, startInstant, ,]
[,, endInstant, ,, chronology, ), ;, }, public, MutableInterval, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, super, (, start]
[,, chronology, ), ;, }, public, MutableInterval, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, super, (, start, ,, end]
[), ;, }, public, MutableInterval, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, super, (, start, ,, end, ), ;]
[,, end, ), ;, }, public, MutableInterval, (, ReadableInstant, start, ,, ReadableDuration, duration, ), {, super, (, start, ,, duration]
[), ;, }, public, MutableInterval, (, ReadableInstant, start, ,, ReadableDuration, duration, ), {, super, (, start, ,, duration, ), ;]
[,, duration, ), ;, }, public, MutableInterval, (, ReadableDuration, duration, ,, ReadableInstant, end, ), {, super, (, duration, ,, end]
[), ;, }, public, MutableInterval, (, ReadableDuration, duration, ,, ReadableInstant, end, ), {, super, (, duration, ,, end, ), ;]
[,, end, ), ;, }, public, MutableInterval, (, ReadableInstant, start, ,, ReadablePeriod, period, ), {, super, (, start, ,, period]
[), ;, }, public, MutableInterval, (, ReadableInstant, start, ,, ReadablePeriod, period, ), {, super, (, start, ,, period, ), ;]
[,, period, ), ;, }, public, MutableInterval, (, ReadablePeriod, period, ,, ReadableInstant, end, ), {, super, (, period, ,, end]
[), ;, }, public, MutableInterval, (, ReadablePeriod, period, ,, ReadableInstant, end, ), {, super, (, period, ,, end, ), ;]
[,, end, ), ;, }, public, MutableInterval, (, Object, interval, ), {, super, (, interval, ,, null, ), ;, }]
[), ;, }, public, MutableInterval, (, Object, interval, ), {, super, (, interval, ,, null, ), ;, }, public, MutableInterval]
[,, null, ), ;, }, public, MutableInterval, (, Object, interval, ,, Chronology, chronology, ), {, super, (, interval, ,, chronology]
[), ;, }, public, MutableInterval, (, Object, interval, ,, Chronology, chronology, ), {, super, (, interval, ,, chronology, ), ;]
[,, chronology, ), ;, }, public, void, setInterval, (, long, startInstant, ,, long, endInstant, ), {, super, ., setInterval, (]
[), ;, }, public, void, setInterval, (, long, startInstant, ,, long, endInstant, ), {, super, ., setInterval, (, startInstant, ,]
[;, }, public, void, setInterval, (, ReadableInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new, IllegalArgumentException]
[., setInterval, (, startInstant, ,, endInstant, ,, getChronology, (, ), ), ;, }, public, void, setInterval, (, ReadableInterval, interval, )]
[,, endInstant, ,, getChronology, (, ), ), ;, }, public, void, setInterval, (, ReadableInterval, interval, ), {, if, (, interval]
[,, getChronology, (, ), ), ;, }, public, void, setInterval, (, ReadableInterval, interval, ), {, if, (, interval, ==, null]
[), ;, }, public, void, setInterval, (, ReadableInterval, interval, ), {, if, (, interval, ==, null, ), {, throw, new]
[), {, throw, new, IllegalArgumentException, (, "Interval must not be null", ), ;, }, long, startMillis, =, interval, ., getStartMillis, (, ), ;, long]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Interval must not be null", ), ;, }, long, startMillis, =, interval, ., getStartMillis, (, )]
[), {, throw, new, IllegalArgumentException, (, "Interval must not be null", ), ;, }, long, startMillis, =, interval, ., getStartMillis, (, ), ;, long]
[;, }, long, startMillis, =, interval, ., getStartMillis, (, ), ;, long, endMillis, =, interval, ., getEndMillis, (, ), ;]
[), ;, }, long, startMillis, =, interval, ., getStartMillis, (, ), ;, long, endMillis, =, interval, ., getEndMillis, (, )]
[;, long, endMillis, =, interval, ., getEndMillis, (, ), ;, Chronology, chrono, =, interval, ., getChronology, (, ), ;, super]
[., getStartMillis, (, ), ;, long, endMillis, =, interval, ., getEndMillis, (, ), ;, Chronology, chrono, =, interval, ., getChronology]
[;, Chronology, chrono, =, interval, ., getChronology, (, ), ;, super, ., setInterval, (, startMillis, ,, endMillis, ,, chrono, )]
[., getEndMillis, (, ), ;, Chronology, chrono, =, interval, ., getChronology, (, ), ;, super, ., setInterval, (, startMillis, ,]
[;, super, ., setInterval, (, startMillis, ,, endMillis, ,, chrono, ), ;, }, public, void, setInterval, (, ReadableInstant, start, ,]
[., getChronology, (, ), ;, super, ., setInterval, (, startMillis, ,, endMillis, ,, chrono, ), ;, }, public, void, setInterval]
[;, }, public, void, setInterval, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, if, (, start, ==, null, &&, end]
[., setInterval, (, startMillis, ,, endMillis, ,, chrono, ), ;, }, public, void, setInterval, (, ReadableInstant, start, ,, ReadableInstant, end]
[,, endMillis, ,, chrono, ), ;, }, public, void, setInterval, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, if, (]
[,, chrono, ), ;, }, public, void, setInterval, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, if, (, start, ==]
[), ;, }, public, void, setInterval, (, ReadableInstant, start, ,, ReadableInstant, end, ), {, if, (, start, ==, null, &&]
[), {, long, now, =, DateTimeUtils, ., currentTimeMillis, (, ), ;, setInterval, (, now, ,, now, ), ;, }, else]
[&&, end, ==, null, ), {, long, now, =, DateTimeUtils, ., currentTimeMillis, (, ), ;, setInterval, (, now, ,, now]
[==, null, &&, end, ==, null, ), {, long, now, =, DateTimeUtils, ., currentTimeMillis, (, ), ;, setInterval, (, now]
[&&, end, ==, null, ), {, long, now, =, DateTimeUtils, ., currentTimeMillis, (, ), ;, setInterval, (, now, ,, now]
[), {, long, now, =, DateTimeUtils, ., currentTimeMillis, (, ), ;, setInterval, (, now, ,, now, ), ;, }, else]
[==, null, ), {, long, now, =, DateTimeUtils, ., currentTimeMillis, (, ), ;, setInterval, (, now, ,, now, ), ;]
[), {, long, now, =, DateTimeUtils, ., currentTimeMillis, (, ), ;, setInterval, (, now, ,, now, ), ;, }, else]
[;, setInterval, (, now, ,, now, ), ;, }, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, start, )]
[., currentTimeMillis, (, ), ;, setInterval, (, now, ,, now, ), ;, }, else, {, long, startMillis, =, DateTimeUtils, .]
[;, }, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, start, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis]
[,, now, ), ;, }, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, start, ), ;, long, endMillis, =]
[), ;, }, else, {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, start, ), ;, long, endMillis, =, DateTimeUtils, .]
[;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, end, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, )]
[., getInstantMillis, (, start, ), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, end, ), ;, Chronology, chrono, =, DateTimeUtils]
[), ;, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, end, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start]
[;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, super, ., setInterval, (, startMillis, ,, endMillis, ,, chrono]
[., getInstantMillis, (, end, ), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, super, ., setInterval, (]
[), ;, Chronology, chrono, =, DateTimeUtils, ., getInstantChronology, (, start, ), ;, super, ., setInterval, (, startMillis, ,, endMillis, ,]
[;, super, ., setInterval, (, startMillis, ,, endMillis, ,, chrono, ), ;, }, }, public, void, setChronology, (, Chronology, chrono]
[., getInstantChronology, (, start, ), ;, super, ., setInterval, (, startMillis, ,, endMillis, ,, chrono, ), ;, }, }, public]
[), ;, super, ., setInterval, (, startMillis, ,, endMillis, ,, chrono, ), ;, }, }, public, void, setChronology, (, Chronology]
[;, }, }, public, void, setChronology, (, Chronology, chrono, ), {, super, ., setInterval, (, getStartMillis, (, ), ,, getEndMillis]
[., setInterval, (, startMillis, ,, endMillis, ,, chrono, ), ;, }, }, public, void, setChronology, (, Chronology, chrono, ), {]
[,, endMillis, ,, chrono, ), ;, }, }, public, void, setChronology, (, Chronology, chrono, ), {, super, ., setInterval, (]
[,, chrono, ), ;, }, }, public, void, setChronology, (, Chronology, chrono, ), {, super, ., setInterval, (, getStartMillis, (]
[), ;, }, }, public, void, setChronology, (, Chronology, chrono, ), {, super, ., setInterval, (, getStartMillis, (, ), ,]
[;, }, public, void, setStartMillis, (, long, startInstant, ), {, super, ., setInterval, (, startInstant, ,, getEndMillis, (, ), ,]
[., setInterval, (, getStartMillis, (, ), ,, getEndMillis, (, ), ,, chrono, ), ;, }, public, void, setStartMillis, (, long]
[,, getEndMillis, (, ), ,, chrono, ), ;, }, public, void, setStartMillis, (, long, startInstant, ), {, super, ., setInterval]
[,, chrono, ), ;, }, public, void, setStartMillis, (, long, startInstant, ), {, super, ., setInterval, (, startInstant, ,, getEndMillis]
[), ;, }, public, void, setStartMillis, (, long, startInstant, ), {, super, ., setInterval, (, startInstant, ,, getEndMillis, (, )]
[;, }, public, void, setStart, (, ReadableInstant, start, ), {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, start, ), ;]
[., setInterval, (, startInstant, ,, getEndMillis, (, ), ,, getChronology, (, ), ), ;, }, public, void, setStart, (, ReadableInstant]
[,, getEndMillis, (, ), ,, getChronology, (, ), ), ;, }, public, void, setStart, (, ReadableInstant, start, ), {, long]
[,, getChronology, (, ), ), ;, }, public, void, setStart, (, ReadableInstant, start, ), {, long, startMillis, =, DateTimeUtils, .]
[), ;, }, public, void, setStart, (, ReadableInstant, start, ), {, long, startMillis, =, DateTimeUtils, ., getInstantMillis, (, start, )]
[;, super, ., setInterval, (, startMillis, ,, getEndMillis, (, ), ,, getChronology, (, ), ), ;, }, public, void, setEndMillis]
[., getInstantMillis, (, start, ), ;, super, ., setInterval, (, startMillis, ,, getEndMillis, (, ), ,, getChronology, (, ), )]
[), ;, super, ., setInterval, (, startMillis, ,, getEndMillis, (, ), ,, getChronology, (, ), ), ;, }, public, void]
[;, }, public, void, setEndMillis, (, long, endInstant, ), {, super, ., setInterval, (, getStartMillis, (, ), ,, endInstant, ,]
[., setInterval, (, startMillis, ,, getEndMillis, (, ), ,, getChronology, (, ), ), ;, }, public, void, setEndMillis, (, long]
[,, getEndMillis, (, ), ,, getChronology, (, ), ), ;, }, public, void, setEndMillis, (, long, endInstant, ), {, super]
[,, getChronology, (, ), ), ;, }, public, void, setEndMillis, (, long, endInstant, ), {, super, ., setInterval, (, getStartMillis]
[), ;, }, public, void, setEndMillis, (, long, endInstant, ), {, super, ., setInterval, (, getStartMillis, (, ), ,, endInstant]
[;, }, public, void, setEnd, (, ReadableInstant, end, ), {, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, end, ), ;]
[., setInterval, (, getStartMillis, (, ), ,, endInstant, ,, getChronology, (, ), ), ;, }, public, void, setEnd, (, ReadableInstant]
[,, endInstant, ,, getChronology, (, ), ), ;, }, public, void, setEnd, (, ReadableInstant, end, ), {, long, endMillis, =]
[,, getChronology, (, ), ), ;, }, public, void, setEnd, (, ReadableInstant, end, ), {, long, endMillis, =, DateTimeUtils, .]
[), ;, }, public, void, setEnd, (, ReadableInstant, end, ), {, long, endMillis, =, DateTimeUtils, ., getInstantMillis, (, end, )]
[;, super, ., setInterval, (, getStartMillis, (, ), ,, endMillis, ,, getChronology, (, ), ), ;, }, public, void, setDurationAfterStart]
[., getInstantMillis, (, end, ), ;, super, ., setInterval, (, getStartMillis, (, ), ,, endMillis, ,, getChronology, (, ), )]
[), ;, super, ., setInterval, (, getStartMillis, (, ), ,, endMillis, ,, getChronology, (, ), ), ;, }, public, void]
[;, }, public, void, setDurationAfterStart, (, long, duration, ), {, setEndMillis, (, FieldUtils, ., safeAdd, (, getStartMillis, (, ), ,]
[., setInterval, (, getStartMillis, (, ), ,, endMillis, ,, getChronology, (, ), ), ;, }, public, void, setDurationAfterStart, (, long]
[,, endMillis, ,, getChronology, (, ), ), ;, }, public, void, setDurationAfterStart, (, long, duration, ), {, setEndMillis, (, FieldUtils]
[,, getChronology, (, ), ), ;, }, public, void, setDurationAfterStart, (, long, duration, ), {, setEndMillis, (, FieldUtils, ., safeAdd]
[), ;, }, public, void, setDurationAfterStart, (, long, duration, ), {, setEndMillis, (, FieldUtils, ., safeAdd, (, getStartMillis, (, )]
[;, }, public, void, setDurationBeforeEnd, (, long, duration, ), {, setStartMillis, (, FieldUtils, ., safeAdd, (, getEndMillis, (, ), ,]
[), ;, }, public, void, setDurationBeforeEnd, (, long, duration, ), {, setStartMillis, (, FieldUtils, ., safeAdd, (, getEndMillis, (, )]
[., safeAdd, (, getStartMillis, (, ), ,, duration, ), ), ;, }, public, void, setDurationBeforeEnd, (, long, duration, ), {]
[,, duration, ), ), ;, }, public, void, setDurationBeforeEnd, (, long, duration, ), {, setStartMillis, (, FieldUtils, ., safeAdd, (]
[), ), ;, }, public, void, setDurationBeforeEnd, (, long, duration, ), {, setStartMillis, (, FieldUtils, ., safeAdd, (, getEndMillis, (]
[;, }, public, void, setDurationAfterStart, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;]
[), ;, }, public, void, setDurationAfterStart, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, )]
[., safeAdd, (, getEndMillis, (, ), ,, -, duration, ), ), ;, }, public, void, setDurationAfterStart, (, ReadableDuration, duration, )]
[,, -, duration, ), ), ;, }, public, void, setDurationAfterStart, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, .]
[), ), ;, }, public, void, setDurationAfterStart, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration]
[), ), ;, }, public, void, setDurationAfterStart, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration]
[;, setEndMillis, (, FieldUtils, ., safeAdd, (, getStartMillis, (, ), ,, durationMillis, ), ), ;, }, public, void, setDurationBeforeEnd, (]
[., getDurationMillis, (, duration, ), ;, setEndMillis, (, FieldUtils, ., safeAdd, (, getStartMillis, (, ), ,, durationMillis, ), ), ;]
[), ;, setEndMillis, (, FieldUtils, ., safeAdd, (, getStartMillis, (, ), ,, durationMillis, ), ), ;, }, public, void, setDurationBeforeEnd]
[;, }, public, void, setDurationBeforeEnd, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, ), ;]
[), ;, }, public, void, setDurationBeforeEnd, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration, )]
[., safeAdd, (, getStartMillis, (, ), ,, durationMillis, ), ), ;, }, public, void, setDurationBeforeEnd, (, ReadableDuration, duration, ), {]
[,, durationMillis, ), ), ;, }, public, void, setDurationBeforeEnd, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis]
[), ), ;, }, public, void, setDurationBeforeEnd, (, ReadableDuration, duration, ), {, long, durationMillis, =, DateTimeUtils, ., getDurationMillis, (, duration]
[;, setStartMillis, (, FieldUtils, ., safeAdd, (, getEndMillis, (, ), ,, -, durationMillis, ), ), ;, }, public, void, setPeriodAfterStart]
[., getDurationMillis, (, duration, ), ;, setStartMillis, (, FieldUtils, ., safeAdd, (, getEndMillis, (, ), ,, -, durationMillis, ), )]
[), ;, setStartMillis, (, FieldUtils, ., safeAdd, (, getEndMillis, (, ), ,, -, durationMillis, ), ), ;, }, public, void]
[;, }, public, void, setPeriodAfterStart, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setEndMillis, (, getStartMillis]
[), ;, }, public, void, setPeriodAfterStart, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setEndMillis, (]
[., safeAdd, (, getEndMillis, (, ), ,, -, durationMillis, ), ), ;, }, public, void, setPeriodAfterStart, (, ReadablePeriod, period, )]
[,, -, durationMillis, ), ), ;, }, public, void, setPeriodAfterStart, (, ReadablePeriod, period, ), {, if, (, period, ==, null]
[), ), ;, }, public, void, setPeriodAfterStart, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setEndMillis]
[), ), ;, }, public, void, setPeriodAfterStart, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setEndMillis]
[), {, setEndMillis, (, getStartMillis, (, ), ), ;, }, else, {, setEndMillis, (, getChronology, (, ), ., add, (]
[==, null, ), {, setEndMillis, (, getStartMillis, (, ), ), ;, }, else, {, setEndMillis, (, getChronology, (, ), .]
[), {, setEndMillis, (, getStartMillis, (, ), ), ;, }, else, {, setEndMillis, (, getChronology, (, ), ., add, (]
[;, }, else, {, setEndMillis, (, getChronology, (, ), ., add, (, period, ,, getStartMillis, (, ), ,, 1, )]
[), ;, }, else, {, setEndMillis, (, getChronology, (, ), ., add, (, period, ,, getStartMillis, (, ), ,, 1]
[;, }, }, public, void, setPeriodBeforeEnd, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setStartMillis, (]
[), ;, }, }, public, void, setPeriodBeforeEnd, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {, setStartMillis]
[., add, (, period, ,, getStartMillis, (, ), ,, 1, ), ), ;, }, }, public, void, setPeriodBeforeEnd, (, ReadablePeriod]
[,, getStartMillis, (, ), ,, 1, ), ), ;, }, }, public, void, setPeriodBeforeEnd, (, ReadablePeriod, period, ), {, if]
[,, 1, ), ), ;, }, }, public, void, setPeriodBeforeEnd, (, ReadablePeriod, period, ), {, if, (, period, ==, null]
[), ), ;, }, }, public, void, setPeriodBeforeEnd, (, ReadablePeriod, period, ), {, if, (, period, ==, null, ), {]
[), {, setStartMillis, (, getEndMillis, (, ), ), ;, }, else, {, setStartMillis, (, getChronology, (, ), ., add, (]
[==, null, ), {, setStartMillis, (, getEndMillis, (, ), ), ;, }, else, {, setStartMillis, (, getChronology, (, ), .]
[), {, setStartMillis, (, getEndMillis, (, ), ), ;, }, else, {, setStartMillis, (, getChronology, (, ), ., add, (]
[;, }, else, {, setStartMillis, (, getChronology, (, ), ., add, (, period, ,, getEndMillis, (, ), ,, -, 1]
[), ;, }, else, {, setStartMillis, (, getChronology, (, ), ., add, (, period, ,, getEndMillis, (, ), ,, -]
[;, }, }, public, MutableInterval, copy, (, ), {, return, (, MutableInterval, ), clone, (, ), ;, }, public, Object]
[), ;, }, }, public, MutableInterval, copy, (, ), {, return, (, MutableInterval, ), clone, (, ), ;, }, public]
[., add, (, period, ,, getEndMillis, (, ), ,, -, 1, ), ), ;, }, }, public, MutableInterval, copy, (]
[,, getEndMillis, (, ), ,, -, 1, ), ), ;, }, }, public, MutableInterval, copy, (, ), {, return, (]
[,, -, 1, ), ), ;, }, }, public, MutableInterval, copy, (, ), {, return, (, MutableInterval, ), clone, (]
[), ), ;, }, }, public, MutableInterval, copy, (, ), {, return, (, MutableInterval, ), clone, (, ), ;, }]
[), ), ;, }, }, public, MutableInterval, copy, (, ), {, return, (, MutableInterval, ), clone, (, ), ;, }]
[;, }, public, Object, clone, (, ), {, try, {, return, super, ., clone, (, ), ;, }, catch, (]
[;, }, public, Object, clone, (, ), {, try, {, return, super, ., clone, (, ), ;, }, catch, (]
[;, }, catch, (, CloneNotSupportedException, ex, ), {, throw, new, InternalError, (, "Clone error", ), ;, }, }, }]
[., clone, (, ), ;, }, catch, (, CloneNotSupportedException, ex, ), {, throw, new, InternalError, (, "Clone error", ), ;, }]
[;, }, }, }]
[), ;, }, }, }]
