[commons, ., math3, ., util, ., FastMath, ;, public, class, LaguerreSolver, extends, AbstractPolynomialSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[;, public, class, LaguerreSolver, extends, AbstractPolynomialSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, private, final, ComplexSolver, complexSolver, =]
[=, 1e-6, ;, private, final, ComplexSolver, complexSolver, =, new, ComplexSolver, (, ), ;, public, LaguerreSolver, (, ), {, this, (]
[public, LaguerreSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, LaguerreSolver, (, double, absoluteAccuracy, ), {, super, (]
[), {, super, (, absoluteAccuracy, ), ;, }, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (]
[super, (, absoluteAccuracy, ), ;, }, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,]
[,, absoluteAccuracy, ), ;, }, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (]
[), ;, }, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (, relativeAccuracy, ,]
[}, public, LaguerreSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ,, double, functionValueAccuracy, ), {, super, (, relativeAccuracy, ,, absoluteAccuracy, ,]
[;, }, @, Override, public, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min, =]
[), throws, TooManyEvaluationsException, ,, NumberIsTooLargeException, ,, NoBracketingException, {, final, double, min, =, getMin, (, ), ;, final, double, max, =]
[final, double, min, =, getMin, (, ), ;, final, double, max, =, getMax, (, ), ;, final, double, initial, =]
[final, double, max, =, getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =]
[getMax, (, ), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;]
[), ;, final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (]
[final, double, initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,]
[initial, =, getStartValue, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,]
[double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, yInitial, =]
[=, getFunctionValueAccuracy, (, ), ;, verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (]
[verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[verifySequence, (, min, ,, initial, ,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (]
[initial, ,, max, ), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (]
[), ;, final, double, yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=]
[yInitial, =, computeObjectiveValue, (, initial, ), ;, if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return]
[if, (, FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =]
[FastMath, ., abs, (, yInitial, ), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (]
[), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[), <=, functionValueAccuracy, ), {, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (]
[{, return, initial, ;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (]
[;, }, final, double, yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, yMin, ), <=]
[yMin, =, computeObjectiveValue, (, min, ), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (]
[if, (, FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *]
[FastMath, ., abs, (, yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <]
[yMin, ), <=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return]
[<=, functionValueAccuracy, ), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (]
[), {, return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (, min, ,]
[return, min, ;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (, min, ,, initial, ,]
[;, }, if, (, yInitial, *, yMin, <, 0, ), {, return, laguerre, (, min, ,, initial, ,, yMin, ,]
[0, ), {, return, laguerre, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =]
[{, return, laguerre, (, min, ,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (]
[,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[,, initial, ,, yMin, ,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (]
[,, yInitial, ), ;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (]
[;, }, final, double, yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, ), <=]
[yMax, =, computeObjectiveValue, (, max, ), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[), ;, if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (]
[if, (, FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *]
[FastMath, ., abs, (, yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <]
[yMax, ), <=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return]
[<=, functionValueAccuracy, ), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (]
[), {, return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (, initial, ,]
[return, max, ;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (, initial, ,, max, ,]
[;, }, if, (, yInitial, *, yMax, <, 0, ), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,]
[*, yMax, <, 0, ), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw]
[0, ), {, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (]
[{, return, laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,]
[laguerre, (, initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,]
[initial, ,, max, ,, yInitial, ,, yMax, ), ;, }, throw, new, NoBracketingException, (, min, ,, max, ,, yMin, ,]
[(, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi, ), {, final, Complex, c, [, ], =]
[(, double, lo, ,, double, hi, ,, double, fLo, ,, double, fHi, ), {, final, Complex, c, [, ], =]
[double, hi, ,, double, fLo, ,, double, fHi, ), {, final, Complex, c, [, ], =, ComplexUtils, ., convertToComplex, (]
[{, final, Complex, c, [, ], =, ComplexUtils, ., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =]
[c, [, ], =, ComplexUtils, ., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (]
[c, [, ], =, ComplexUtils, ., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (]
[], =, ComplexUtils, ., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (, 0.5, *]
[=, ComplexUtils, ., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (, 0.5, *, (]
[=, ComplexUtils, ., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (, 0.5, *, (]
[., convertToComplex, (, getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (, 0.5, *, (, lo, +]
[getCoefficients, (, ), ), ;, final, Complex, initial, =, new, Complex, (, 0.5, *, (, lo, +, hi, ), ,]
[initial, =, new, Complex, (, 0.5, *, (, lo, +, hi, ), ,, 0, ), ;, final, Complex, z, =]
[initial, =, new, Complex, (, 0.5, *, (, lo, +, hi, ), ,, 0, ), ;, final, Complex, z, =]
[(, 0.5, *, (, lo, +, hi, ), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (]
[*, (, lo, +, hi, ), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,]
[), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (]
[), ,, 0, ), ;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (]
[;, final, Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (, complexSolver, ., isRoot, (]
[Complex, z, =, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (, complexSolver, ., isRoot, (, lo, ,]
[=, complexSolver, ., solve, (, c, ,, initial, ), ;, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,]
[c, ,, initial, ), ;, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, z, ), ), {, return]
[c, ,, initial, ), ;, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, z, ), ), {, return]
[,, hi, ,, z, ), ), {, return, z, ., getReal, (, ), ;, }, else, {, double, r, =]
[,, hi, ,, z, ), ), {, return, z, ., getReal, (, ), ;, }, else, {, double, r, =]
[., getReal, (, ), ;, }, else, {, double, r, =, Double, ., NaN, ;, Complex, [, ], root, =]
[., getReal, (, ), ;, }, else, {, double, r, =, Double, ., NaN, ;, Complex, [, ], root, =]
[;, }, else, {, double, r, =, Double, ., NaN, ;, Complex, [, ], root, =, complexSolver, ., solveAll, (]
[else, {, double, r, =, Double, ., NaN, ;, Complex, [, ], root, =, complexSolver, ., solveAll, (, c, ,]
[;, Complex, [, ], root, =, complexSolver, ., solveAll, (, c, ,, initial, ), ;, for, (, int, i, =]
[[, ], root, =, complexSolver, ., solveAll, (, c, ,, initial, ), ;, for, (, int, i, =, 0, ;]
[[, ], root, =, complexSolver, ., solveAll, (, c, ,, initial, ), ;, for, (, int, i, =, 0, ;]
[root, =, complexSolver, ., solveAll, (, c, ,, initial, ), ;, for, (, int, i, =, 0, ;, i, <]
[root, =, complexSolver, ., solveAll, (, c, ,, initial, ), ;, for, (, int, i, =, 0, ;, i, <]
[solveAll, (, c, ,, initial, ), ;, for, (, int, i, =, 0, ;, i, <, root, ., length, ;]
[solveAll, (, c, ,, initial, ), ;, for, (, int, i, =, 0, ;, i, <, root, ., length, ;]
[;, for, (, int, i, =, 0, ;, i, <, root, ., length, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, root, ., length, ;, i, ++, ), {, if, (]
[i, =, 0, ;, i, <, root, ., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (]
[0, ;, i, <, root, ., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,]
[i, <, root, ., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,]
[i, <, root, ., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,]
[root, ., length, ;, i, ++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, []
[++, ), {, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {]
[{, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {, r, =]
[{, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {, r, =]
[{, if, (, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {, r, =]
[(, complexSolver, ., isRoot, (, lo, ,, hi, ,, root, [, i, ], ), ), {, r, =, root, []
[], ), ), {, r, =, root, [, i, ], ., getReal, (, ), ;, break, ;, }, }, return]
[Complex, [, ], solveAllComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {]
[], solveAllComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (]
[], solveAllComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (]
[[, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,]
[,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (]
[), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,]
[), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,]
[NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,]
[NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,]
[setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,]
[MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return]
[MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return]
[(, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (]
[(, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (]
[Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (]
[,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,]
[POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (]
[initial, ), ;, return, complexSolver, ., solveAll, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,]
[}, public, Complex, solveComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {]
[Complex, solveComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (]
[Complex, solveComplex, (, double, [, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (]
[[, ], coefficients, ,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,]
[,, double, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (]
[), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,]
[), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,]
[NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,]
[NoDataException, ,, TooManyEvaluationsException, {, setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,]
[setup, (, Integer, ., MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,]
[MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return]
[MAX_VALUE, ,, new, PolynomialFunction, (, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return]
[(, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (]
[(, coefficients, ), ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (]
[Double, ., NEGATIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (]
[,, Double, ., POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,]
[POSITIVE_INFINITY, ,, initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (]
[initial, ), ;, return, complexSolver, ., solve, (, ComplexUtils, ., convertToComplex, (, coefficients, ), ,, new, Complex, (, initial, ,]
[private, class, ComplexSolver, {, public, boolean, isRoot, (, double, min, ,, double, max, ,, Complex, z, ), {, if, (]
[ComplexSolver, {, public, boolean, isRoot, (, double, min, ,, double, max, ,, Complex, z, ), {, if, (, isSequence, (]
[public, boolean, isRoot, (, double, min, ,, double, max, ,, Complex, z, ), {, if, (, isSequence, (, min, ,]
[public, boolean, isRoot, (, double, min, ,, double, max, ,, Complex, z, ), {, if, (, isSequence, (, min, ,]
[,, double, max, ,, Complex, z, ), {, if, (, isSequence, (, min, ,, z, ., getReal, (, ), ,]
[{, if, (, isSequence, (, min, ,, z, ., getReal, (, ), ,, max, ), ), {, double, tolerance, =]
[{, if, (, isSequence, (, min, ,, z, ., getReal, (, ), ,, max, ), ), {, double, tolerance, =]
[(, min, ,, z, ., getReal, (, ), ,, max, ), ), {, double, tolerance, =, FastMath, ., max, (]
[(, min, ,, z, ., getReal, (, ), ,, max, ), ), {, double, tolerance, =, FastMath, ., max, (]
[., getReal, (, ), ,, max, ), ), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (, ), *]
[., getReal, (, ), ,, max, ), ), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (, ), *]
[), ), {, double, tolerance, =, FastMath, ., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,]
[FastMath, ., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return]
[FastMath, ., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return]
[., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (]
[., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (]
[., max, (, getRelativeAccuracy, (, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (]
[(, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (, FastMath, ., abs, (]
[(, ), *, z, ., abs, (, ), ,, getAbsoluteAccuracy, (, ), ), ;, return, (, FastMath, ., abs, (]
[), ,, getAbsoluteAccuracy, (, ), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=]
[(, ), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||]
[), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||, (]
[), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||, (]
[), ), ;, return, (, FastMath, ., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||, (]
[., abs, (, z, ., getImaginary, (, ), ), <=, tolerance, ), ||, (, z, ., abs, (, ), <=]
[), ), <=, tolerance, ), ||, (, z, ., abs, (, ), <=, getFunctionValueAccuracy, (, ), ), ;, }, return]
[], solveAll, (, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (]
[], solveAll, (, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (]
[(, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (, coefficients, ==]
[], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw]
[TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =]
[TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =]
[TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =]
[coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (]
[new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==]
[;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw]
[int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =]
[{, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =, new, Complex, []
[{, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =, new, Complex, []
[new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, Complex, c, [, ], =, new, Complex, [, n, +]
[}, final, Complex, c, [, ], =, new, Complex, [, n, +, 1, ], ;, for, (, int, i, =]
[Complex, c, [, ], =, new, Complex, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;]
[Complex, c, [, ], =, new, Complex, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;]
[[, ], =, new, Complex, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=]
[=, new, Complex, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;]
[=, new, Complex, [, n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;]
[n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {]
[n, +, 1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {]
[1, ], ;, for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c, []
[for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c, [, i, ], =]
[int, i, =, 0, ;, i, <=, n, ;, i, ++, ), {, c, [, i, ], =, coefficients, []
[++, ), {, c, [, i, ], =, coefficients, [, i, ], ;, }, final, Complex, root, [, ], =]
[c, [, i, ], =, coefficients, [, i, ], ;, }, final, Complex, root, [, ], =, new, Complex, []
[], ;, }, final, Complex, root, [, ], =, new, Complex, [, n, ], ;, for, (, int, i, =]
[}, final, Complex, root, [, ], =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;]
[}, final, Complex, root, [, ], =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;]
[Complex, root, [, ], =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[[, ], =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[[, ], =, new, Complex, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =]
[=, 0, ;, i, <, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, []
[=, 0, ;, i, <, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, []
[=, 0, ;, i, <, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, []
[;, i, <, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -]
[<, n, ;, i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +]
[i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ], ;]
[i, ++, ), {, final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ], ;]
[final, Complex, subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ], ;, System, ., arraycopy, (]
[subarray, [, ], =, new, Complex, [, n, -, i, +, 1, ], ;, System, ., arraycopy, (, c, ,]
[], =, new, Complex, [, n, -, i, +, 1, ], ;, System, ., arraycopy, (, c, ,, 0, ,]
[new, Complex, [, n, -, i, +, 1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,]
[[, n, -, i, +, 1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,]
[[, n, -, i, +, 1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,]
[1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;]
[1, ], ;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;]
[;, System, ., arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, []
[arraycopy, (, c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, [, i, ], =]
[c, ,, 0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, [, i, ], =, solve, (]
[0, ,, subarray, ,, 0, ,, subarray, ., length, ), ;, root, [, i, ], =, solve, (, subarray, ,]
[subarray, ., length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =]
[subarray, ., length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =]
[length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, []
[length, ), ;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, []
[;, root, [, i, ], =, solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, [, n, -]
[solve, (, subarray, ,, initial, ), ;, Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc, =]
[Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =]
[Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =]
[Complex, newc, =, c, [, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =]
[=, c, [, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -]
[[, n, -, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -]
[-, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;]
[-, i, ], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;]
[], ;, Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=]
[Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=, 0, ;]
[Complex, oldc, =, null, ;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=, 0, ;]
[;, for, (, int, j, =, n, -, i, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[(, int, j, =, n, -, i, -, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =]
[(, int, j, =, n, -, i, -, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =]
[j, =, n, -, i, -, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =, c, []
[-, i, -, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;]
[-, i, -, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;]
[-, 1, ;, j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, []
[j, >=, 0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =]
[0, ;, j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;]
[j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc, =]
[j, --, ), {, oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc, =]
[oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (]
[oldc, =, c, [, j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (]
[j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (]
[j, ], ;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (]
[;, c, [, j, ], =, newc, ;, newc, =, oldc, ., add, (, newc, ., multiply, (, root, []
[newc, =, oldc, ., add, (, newc, ., multiply, (, root, [, i, ], ), ), ;, }, }, return]
[Complex, solve, (, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (]
[Complex, solve, (, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (]
[(, Complex, coefficients, [, ], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (, coefficients, ==]
[], ,, Complex, initial, ), throws, NullArgumentException, ,, NoDataException, ,, TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw]
[TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =]
[TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =]
[TooManyEvaluationsException, {, if, (, coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =]
[coefficients, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (]
[{, throw, new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (]
[new, NullArgumentException, (, ), ;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==]
[;, }, final, int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw]
[int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[int, n, =, coefficients, ., length, -, 1, ;, if, (, n, ==, 0, ), {, throw, new, NoDataException, (]
[(, n, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, double, absoluteAccuracy, =]
[NoDataException, (, LocalizedFormats, ., POLYNOMIAL, ), ;, }, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, relativeAccuracy, =]
[final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, functionValueAccuracy, =]
[final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, Complex, nC, =]
[=, getRelativeAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, Complex, nC, =, new, Complex, (]
[(, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, Complex, nC, =, new, Complex, (, n, ,]
[getFunctionValueAccuracy, (, ), ;, final, Complex, nC, =, new, Complex, (, n, ,, 0, ), ;, final, Complex, n1C, =]
[;, final, Complex, nC, =, new, Complex, (, n, ,, 0, ), ;, final, Complex, n1C, =, new, Complex, (]
[;, final, Complex, nC, =, new, Complex, (, n, ,, 0, ), ;, final, Complex, n1C, =, new, Complex, (]
[Complex, nC, =, new, Complex, (, n, ,, 0, ), ;, final, Complex, n1C, =, new, Complex, (, n, -]
[=, new, Complex, (, n, ,, 0, ), ;, final, Complex, n1C, =, new, Complex, (, n, -, 1, ,]
[0, ), ;, final, Complex, n1C, =, new, Complex, (, n, -, 1, ,, 0, ), ;, Complex, z, =]
[n1C, =, new, Complex, (, n, -, 1, ,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =]
[Complex, (, n, -, 1, ,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (]
[Complex, (, n, -, 1, ,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (]
[1, ,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,]
[1, ,, 0, ), ;, Complex, z, =, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,]
[=, initial, ;, Complex, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, while, (]
[new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =]
[new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =]
[(, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =, coefficients, []
[., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =]
[., POSITIVE_INFINITY, ), ;, while, (, true, ), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =]
[), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =]
[), {, Complex, pv, =, coefficients, [, n, ], ;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =]
[;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =]
[;, Complex, dv, =, Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =]
[dv, =, Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -]
[Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -, 1, ;]
[Complex, ., ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -, 1, ;]
[ZERO, ;, Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -, 1, ;, j, >=]
[Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -, 1, ;, j, >=, 0, ;]
[Complex, d2v, =, Complex, ., ZERO, ;, for, (, int, j, =, n, -, 1, ;, j, >=, 0, ;]
[., ZERO, ;, for, (, int, j, =, n, -, 1, ;, j, >=, 0, ;, j, --, ), {]
[;, for, (, int, j, =, n, -, 1, ;, j, >=, 0, ;, j, --, ), {, d2v, =]
[;, for, (, int, j, =, n, -, 1, ;, j, >=, 0, ;, j, --, ), {, d2v, =]
[j, =, n, -, 1, ;, j, >=, 0, ;, j, --, ), {, d2v, =, dv, ., add, (]
[j, =, n, -, 1, ;, j, >=, 0, ;, j, --, ), {, d2v, =, dv, ., add, (]
[1, ;, j, >=, 0, ;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (]
[0, ;, j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;]
[j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =]
[j, --, ), {, d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =]
[d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =, pv, ., add, (]
[d2v, =, dv, ., add, (, z, ., multiply, (, d2v, ), ), ;, dv, =, pv, ., add, (]
[add, (, z, ., multiply, (, d2v, ), ), ;, dv, =, pv, ., add, (, z, ., multiply, (]
[multiply, (, d2v, ), ), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;]
[d2v, ), ), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =]
[d2v, ), ), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =]
[d2v, ), ), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =]
[), ;, dv, =, pv, ., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients, []
[., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients, [, j, ], ., add, (]
[., add, (, z, ., multiply, (, dv, ), ), ;, pv, =, coefficients, [, j, ], ., add, (]
[., multiply, (, dv, ), ), ;, pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (]
[), ;, pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }]
[pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =]
[pv, =, coefficients, [, j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =]
[j, ], ., add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =, d2v, ., multiply, (]
[add, (, z, ., multiply, (, pv, ), ), ;, }, d2v, =, d2v, ., multiply, (, new, Complex, (]
[z, ., multiply, (, pv, ), ), ;, }, d2v, =, d2v, ., multiply, (, new, Complex, (, 2.0, ,]
[}, d2v, =, d2v, ., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =]
[}, d2v, =, d2v, ., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =]
[., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =, FastMath, ., max, (]
[., multiply, (, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =, FastMath, ., max, (]
[(, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[(, new, Complex, (, 2.0, ,, 0.0, ), ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[0.0, ), ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,]
[double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (]
[double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (]
[double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (, (]
[max, (, relativeAccuracy, *, z, ., abs, (, ), ,, absoluteAccuracy, ), ;, if, (, (, z, ., subtract, (]
[), ,, absoluteAccuracy, ), ;, if, (, (, z, ., subtract, (, oldz, ), ), ., abs, (, ), <=]
[;, if, (, (, z, ., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance, ), {, return]
[., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (]
[., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (]
[., subtract, (, oldz, ), ), ., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (]
[., abs, (, ), <=, tolerance, ), {, return, z, ;, }, if, (, pv, ., abs, (, ), <=]
[<=, tolerance, ), {, return, z, ;, }, if, (, pv, ., abs, (, ), <=, functionValueAccuracy, ), {, return]
[}, if, (, pv, ., abs, (, ), <=, functionValueAccuracy, ), {, return, z, ;, }, final, Complex, G, =]
[}, if, (, pv, ., abs, (, ), <=, functionValueAccuracy, ), {, return, z, ;, }, final, Complex, G, =]
[., abs, (, ), <=, functionValueAccuracy, ), {, return, z, ;, }, final, Complex, G, =, dv, ., divide, (]
[{, return, z, ;, }, final, Complex, G, =, dv, ., divide, (, pv, ), ;, final, Complex, G2, =]
[{, return, z, ;, }, final, Complex, G, =, dv, ., divide, (, pv, ), ;, final, Complex, G2, =]
[}, final, Complex, G, =, dv, ., divide, (, pv, ), ;, final, Complex, G2, =, G, ., multiply, (]
[divide, (, pv, ), ;, final, Complex, G2, =, G, ., multiply, (, G, ), ;, final, Complex, H, =]
[divide, (, pv, ), ;, final, Complex, G2, =, G, ., multiply, (, G, ), ;, final, Complex, H, =]
[;, final, Complex, G2, =, G, ., multiply, (, G, ), ;, final, Complex, H, =, G2, ., subtract, (]
[;, final, Complex, G2, =, G, ., multiply, (, G, ), ;, final, Complex, H, =, G2, ., subtract, (]
[=, G, ., multiply, (, G, ), ;, final, Complex, H, =, G2, ., subtract, (, d2v, ., divide, (]
[final, Complex, H, =, G2, ., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta, =]
[final, Complex, H, =, G2, ., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta, =]
[G2, ., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta, =, n1C, ., multiply, (]
[G2, ., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta, =, n1C, ., multiply, (]
[., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta, =, n1C, ., multiply, (, (]
[., subtract, (, d2v, ., divide, (, pv, ), ), ;, final, Complex, delta, =, n1C, ., multiply, (, (]
[., divide, (, pv, ), ), ;, final, Complex, delta, =, n1C, ., multiply, (, (, nC, ., multiply, (]
[;, final, Complex, delta, =, n1C, ., multiply, (, (, nC, ., multiply, (, H, ), ), ., subtract, (]
[(, (, nC, ., multiply, (, H, ), ), ., subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =]
[(, (, nC, ., multiply, (, H, ), ), ., subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =]
[subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex, dplus, =]
[subtract, (, G2, ), ), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex, dplus, =]
[), ;, final, Complex, deltaSqrt, =, delta, ., sqrt, (, ), ;, final, Complex, dplus, =, G, ., add, (]
[., sqrt, (, ), ;, final, Complex, dplus, =, G, ., add, (, deltaSqrt, ), ;, final, Complex, dminus, =]
[., sqrt, (, ), ;, final, Complex, dplus, =, G, ., add, (, deltaSqrt, ), ;, final, Complex, dminus, =]
[;, final, Complex, dplus, =, G, ., add, (, deltaSqrt, ), ;, final, Complex, dminus, =, G, ., subtract, (]
[add, (, deltaSqrt, ), ;, final, Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =]
[add, (, deltaSqrt, ), ;, final, Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =]
[add, (, deltaSqrt, ), ;, final, Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =]
[add, (, deltaSqrt, ), ;, final, Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =]
[Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =, dplus, ., abs, (, ), >]
[Complex, dminus, =, G, ., subtract, (, deltaSqrt, ), ;, final, Complex, denominator, =, dplus, ., abs, (, ), >]
[(, deltaSqrt, ), ;, final, Complex, denominator, =, dplus, ., abs, (, ), >, dminus, ., abs, (, ), ?]
[), ;, final, Complex, denominator, =, dplus, ., abs, (, ), >, dminus, ., abs, (, ), ?, dplus, :]
[denominator, =, dplus, ., abs, (, ), >, dminus, ., abs, (, ), ?, dplus, :, dminus, ;, if, (]
[denominator, =, dplus, ., abs, (, ), >, dminus, ., abs, (, ), ?, dplus, :, dminus, ;, if, (]
[abs, (, ), >, dminus, ., abs, (, ), ?, dplus, :, dminus, ;, if, (, denominator, ., equals, (]
[>, dminus, ., abs, (, ), ?, dplus, :, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (]
[., abs, (, ), ?, dplus, :, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,]
[dplus, :, dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {]
[dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =]
[dminus, ;, if, (, denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =]
[denominator, ., equals, (, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =, z, ., add, (]
[(, new, Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =, z, ., add, (, new, Complex, (]
[Complex, (, 0.0, ,, 0.0, ), ), ), {, z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,]
[0.0, ), ), ), {, z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;]
[), ), {, z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =]
[z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =, new, Complex, (]
[z, =, z, ., add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =, new, Complex, (]
[add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,]
[add, (, new, Complex, (, absoluteAccuracy, ,, absoluteAccuracy, ), ), ;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,]
[), ), ;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {]
[;, oldz, =, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =]
[=, new, Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;]
[Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =]
[Complex, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract, (]
[POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract, (]
[POSITIVE_INFINITY, ), ;, }, else, {, oldz, =, z, ;, z, =, z, ., subtract, (, nC, ., divide, (]
[{, oldz, =, z, ;, z, =, z, ., subtract, (, nC, ., divide, (, denominator, ), ), ;, }]
