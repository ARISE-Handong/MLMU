[util, ., logging, ., Logger, ;, class, DisambiguateProperties, <, T, >, implements, CompilerPass, {, private, static, final, int, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, =]
[<, T, >, implements, CompilerPass, {, private, static, final, int, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, =, 10, ;, private, static, final, Logger, logger, =]
[<, T, >, implements, CompilerPass, {, private, static, final, int, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, =, 10, ;, private, static, final, Logger, logger, =]
[CompilerPass, {, private, static, final, int, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, =, 10, ;, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[CompilerPass, {, private, static, final, int, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, =, 10, ;, private, static, final, Logger, logger, =, Logger, ., getLogger, (]
[getLogger, (, DisambiguateProperties, ., class, ., getName, (, ), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =]
[getLogger, (, DisambiguateProperties, ., class, ., getName, (, ), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =]
[class, ., getName, (, ), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =, DiagnosticType, ., disabled, (]
[getName, (, ), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =, DiagnosticType, ., disabled, (, "JSC_INVALIDATION", ,]
[getName, (, ), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =, DiagnosticType, ., disabled, (, "JSC_INVALIDATION", ,]
[), ), ;, static, class, Warnings, {, static, final, DiagnosticType, INVALIDATION, =, DiagnosticType, ., disabled, (, "JSC_INVALIDATION", ,, "Property disambiguator skipping all instances of property {0} ", +]
[class, Property, {, final, String, name, ;, private, UnionFind, <, T, >, types, ;, Set, <, T, >, typesToSkip, =]
[class, Property, {, final, String, name, ;, private, UnionFind, <, T, >, types, ;, Set, <, T, >, typesToSkip, =]
[<, T, >, typesToSkip, =, Sets, ., newHashSet, (, ), ;, boolean, skipRenaming, ;, Set, <, Node, >, renameNodes, =]
[<, T, >, typesToSkip, =, Sets, ., newHashSet, (, ), ;, boolean, skipRenaming, ;, Set, <, Node, >, renameNodes, =]
[<, Node, >, renameNodes, =, Sets, ., newHashSet, (, ), ;, final, Map, <, Node, ,, T, >, rootTypes, =]
[<, Node, >, renameNodes, =, Sets, ., newHashSet, (, ), ;, final, Map, <, Node, ,, T, >, rootTypes, =]
[Map, <, Node, ,, T, >, rootTypes, =, Maps, ., newHashMap, (, ), ;, Property, (, String, name, ), {]
[Map, <, Node, ,, T, >, rootTypes, =, Maps, ., newHashMap, (, ), ;, Property, (, String, name, ), {]
[T, >, rootTypes, =, Maps, ., newHashMap, (, ), ;, Property, (, String, name, ), {, this, ., name, =]
[name, ), {, this, ., name, =, name, ;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (]
[name, ), {, this, ., name, =, name, ;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (]
[{, this, ., name, =, name, ;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (, types, ==]
[name, =, name, ;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (, types, ==, null, ), {]
[name, ;, }, UnionFind, <, T, >, getTypes, (, ), {, if, (, types, ==, null, ), {, types, =]
[{, if, (, types, ==, null, ), {, types, =, new, StandardUnionFind, <, T, >, (, ), ;, }, return]
[), ;, }, return, types, ;, }, boolean, addType, (, T, type, ,, T, top, ,, T, relatedType, ), {]
[}, return, types, ;, }, boolean, addType, (, T, type, ,, T, top, ,, T, relatedType, ), {, checkState, (]
[return, types, ;, }, boolean, addType, (, T, type, ,, T, top, ,, T, relatedType, ), {, checkState, (, !]
[;, }, boolean, addType, (, T, type, ,, T, top, ,, T, relatedType, ), {, checkState, (, !, skipRenaming, ,]
[boolean, addType, (, T, type, ,, T, top, ,, T, relatedType, ), {, checkState, (, !, skipRenaming, ,, "Attempt to record skipped property: %s", ,]
[,, T, top, ,, T, relatedType, ), {, checkState, (, !, skipRenaming, ,, "Attempt to record skipped property: %s", ,, name, ), ;, if, (]
[,, T, top, ,, T, relatedType, ), {, checkState, (, !, skipRenaming, ,, "Attempt to record skipped property: %s", ,, name, ), ;, if, (]
[T, relatedType, ), {, checkState, (, !, skipRenaming, ,, "Attempt to record skipped property: %s", ,, name, ), ;, if, (, typeSystem, ., isInvalidatingType, (]
[checkState, (, !, skipRenaming, ,, "Attempt to record skipped property: %s", ,, name, ), ;, if, (, typeSystem, ., isInvalidatingType, (, top, ), ), {]
["Attempt to record skipped property: %s", ,, name, ), ;, if, (, typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;, return]
[typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;, return, false, ;, }, else, {, if, (]
[typeSystem, ., isInvalidatingType, (, top, ), ), {, invalidate, (, ), ;, return, false, ;, }, else, {, if, (]
[top, ), ), {, invalidate, (, ), ;, return, false, ;, }, else, {, if, (, typeSystem, ., isTypeToSkip, (]
[invalidate, (, ), ;, return, false, ;, }, else, {, if, (, typeSystem, ., isTypeToSkip, (, top, ), ), {]
[), ;, return, false, ;, }, else, {, if, (, typeSystem, ., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (]
[else, {, if, (, typeSystem, ., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top, ), ;, }, if, (]
[else, {, if, (, typeSystem, ., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top, ), ;, }, if, (]
[if, (, typeSystem, ., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top, ), ;, }, if, (, relatedType, ==]
[., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top, ), ;, }, if, (, relatedType, ==, null, ), {]
[., isTypeToSkip, (, top, ), ), {, addTypeToSkip, (, top, ), ;, }, if, (, relatedType, ==, null, ), {]
[{, addTypeToSkip, (, top, ), ;, }, if, (, relatedType, ==, null, ), {, getTypes, (, ), ., add, (]
[}, if, (, relatedType, ==, null, ), {, getTypes, (, ), ., add, (, top, ), ;, }, else, {]
[}, if, (, relatedType, ==, null, ), {, getTypes, (, ), ., add, (, top, ), ;, }, else, {]
[), {, getTypes, (, ), ., add, (, top, ), ;, }, else, {, getTypes, (, ), ., union, (]
[getTypes, (, ), ., add, (, top, ), ;, }, else, {, getTypes, (, ), ., union, (, top, ,]
[add, (, top, ), ;, }, else, {, getTypes, (, ), ., union, (, top, ,, relatedType, ), ;, }]
[add, (, top, ), ;, }, else, {, getTypes, (, ), ., union, (, top, ,, relatedType, ), ;, }]
[;, }, else, {, getTypes, (, ), ., union, (, top, ,, relatedType, ), ;, }, typeSystem, ., recordInterfaces, (]
[else, {, getTypes, (, ), ., union, (, top, ,, relatedType, ), ;, }, typeSystem, ., recordInterfaces, (, type, ,]
[getTypes, (, ), ., union, (, top, ,, relatedType, ), ;, }, typeSystem, ., recordInterfaces, (, type, ,, top, ,]
[union, (, top, ,, relatedType, ), ;, }, typeSystem, ., recordInterfaces, (, type, ,, top, ,, this, ), ;, return]
[this, ), ;, return, true, ;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :]
[this, ), ;, return, true, ;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :]
[true, ;, }, }, void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :, typeSystem, ., getTypesToSkipForType, (]
[void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :, typeSystem, ., getTypesToSkipForType, (, type, ), ), {]
[void, addTypeToSkip, (, T, type, ), {, for, (, T, skipType, :, typeSystem, ., getTypesToSkipForType, (, type, ), ), {]
[type, ), {, for, (, T, skipType, :, typeSystem, ., getTypesToSkipForType, (, type, ), ), {, typesToSkip, ., add, (]
[for, (, T, skipType, :, typeSystem, ., getTypesToSkipForType, (, type, ), ), {, typesToSkip, ., add, (, skipType, ), ;]
[for, (, T, skipType, :, typeSystem, ., getTypesToSkipForType, (, type, ), ), {, typesToSkip, ., add, (, skipType, ), ;]
[., getTypesToSkipForType, (, type, ), ), {, typesToSkip, ., add, (, skipType, ), ;, getTypes, (, ), ., union, (]
[(, type, ), ), {, typesToSkip, ., add, (, skipType, ), ;, getTypes, (, ), ., union, (, skipType, ,]
[getTypes, (, ), ., union, (, skipType, ,, type, ), ;, }, }, void, expandTypesToSkip, (, ), {, if, (]
[type, ), ;, }, }, void, expandTypesToSkip, (, ), {, if, (, shouldRename, (, ), ), {, int, count, =]
[}, void, expandTypesToSkip, (, ), {, if, (, shouldRename, (, ), ), {, int, count, =, 0, ;, while, (]
[(, ), {, if, (, shouldRename, (, ), ), {, int, count, =, 0, ;, while, (, true, ), {]
[{, if, (, shouldRename, (, ), ), {, int, count, =, 0, ;, while, (, true, ), {, checkState, (]
[{, if, (, shouldRename, (, ), ), {, int, count, =, 0, ;, while, (, true, ), {, checkState, (]
[if, (, shouldRename, (, ), ), {, int, count, =, 0, ;, while, (, true, ), {, checkState, (, ++]
[shouldRename, (, ), ), {, int, count, =, 0, ;, while, (, true, ), {, checkState, (, ++, count, <]
[), ), {, int, count, =, 0, ;, while, (, true, ), {, checkState, (, ++, count, <, 10, ,]
[(, true, ), {, checkState, (, ++, count, <, 10, ,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =]
[(, true, ), {, checkState, (, ++, count, <, 10, ,, "Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =]
["Stuck in loop expanding types to skip.", ), ;, Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType, :]
[Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip, ), {]
[Set, <, T, >, rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip, ), {]
[rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip, ), {, rootTypesToSkip, ., add, (]
[rootTypesToSkip, =, Sets, ., newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip, ), {, rootTypesToSkip, ., add, (]
[newHashSet, (, ), ;, for, (, T, subType, :, typesToSkip, ), {, rootTypesToSkip, ., add, (, types, ., find, (]
[(, T, subType, :, typesToSkip, ), {, rootTypesToSkip, ., add, (, types, ., find, (, subType, ), ), ;, }]
[(, T, subType, :, typesToSkip, ), {, rootTypesToSkip, ., add, (, types, ., find, (, subType, ), ), ;, }]
[typesToSkip, ), {, rootTypesToSkip, ., add, (, types, ., find, (, subType, ), ), ;, }, typesToSkip, ., addAll, (]
[find, (, subType, ), ), ;, }, typesToSkip, ., addAll, (, rootTypesToSkip, ), ;, Set, <, T, >, newTypesToSkip, =]
[find, (, subType, ), ), ;, }, typesToSkip, ., addAll, (, rootTypesToSkip, ), ;, Set, <, T, >, newTypesToSkip, =]
[), ;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet, (, ), ;, Set, <, T, >, allTypes, =]
[), ;, Set, <, T, >, newTypesToSkip, =, Sets, ., newHashSet, (, ), ;, Set, <, T, >, allTypes, =]
[., newHashSet, (, ), ;, Set, <, T, >, allTypes, =, types, ., elements, (, ), ;, int, originalTypesSize, =]
[., newHashSet, (, ), ;, Set, <, T, >, allTypes, =, types, ., elements, (, ), ;, int, originalTypesSize, =]
[types, ., elements, (, ), ;, int, originalTypesSize, =, allTypes, ., size, (, ), ;, for, (, T, subType, :]
[;, int, originalTypesSize, =, allTypes, ., size, (, ), ;, for, (, T, subType, :, allTypes, ), {, if, (]
[;, int, originalTypesSize, =, allTypes, ., size, (, ), ;, for, (, T, subType, :, allTypes, ), {, if, (]
[int, originalTypesSize, =, allTypes, ., size, (, ), ;, for, (, T, subType, :, allTypes, ), {, if, (, !]
[int, originalTypesSize, =, allTypes, ., size, (, ), ;, for, (, T, subType, :, allTypes, ), {, if, (, !]
[., size, (, ), ;, for, (, T, subType, :, allTypes, ), {, if, (, !, typesToSkip, ., contains, (]
[), ;, for, (, T, subType, :, allTypes, ), {, if, (, !, typesToSkip, ., contains, (, subType, ), &&]
[), ;, for, (, T, subType, :, allTypes, ), {, if, (, !, typesToSkip, ., contains, (, subType, ), &&]
[T, subType, :, allTypes, ), {, if, (, !, typesToSkip, ., contains, (, subType, ), &&, typesToSkip, ., contains, (]
[T, subType, :, allTypes, ), {, if, (, !, typesToSkip, ., contains, (, subType, ), &&, typesToSkip, ., contains, (]
[), {, if, (, !, typesToSkip, ., contains, (, subType, ), &&, typesToSkip, ., contains, (, types, ., find, (]
[typesToSkip, ., contains, (, subType, ), &&, typesToSkip, ., contains, (, types, ., find, (, subType, ), ), ), {]
[typesToSkip, ., contains, (, subType, ), &&, typesToSkip, ., contains, (, types, ., find, (, subType, ), ), ), {]
[subType, ), &&, typesToSkip, ., contains, (, types, ., find, (, subType, ), ), ), {, newTypesToSkip, ., add, (]
[(, subType, ), ), ), {, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T, newType, :]
[), ), {, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {]
[{, newTypesToSkip, ., add, (, subType, ), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (]
[), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (, newType, ), ;, }, if, (]
[), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (, newType, ), ;, }, if, (]
[), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (, newType, ), ;, }, if, (]
[), ;, }, }, for, (, T, newType, :, newTypesToSkip, ), {, addTypeToSkip, (, newType, ), ;, }, if, (]
[), {, addTypeToSkip, (, newType, ), ;, }, if, (, types, ., elements, (, ), ., size, (, ), ==]
[., size, (, ), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return]
[., size, (, ), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return]
[., size, (, ), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return]
[size, (, ), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !]
[), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&]
[), ==, originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&]
[originalTypesSize, ), {, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types, !=]
[{, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types, !=, null, &&]
[{, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types, !=, null, &&]
[{, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types, !=, null, &&]
[{, break, ;, }, }, }, }, boolean, shouldRename, (, ), {, return, !, skipRenaming, &&, types, !=, null, &&]
[), {, return, !, skipRenaming, &&, types, !=, null, &&, types, ., allEquivalenceClasses, (, ), ., size, (, ), >]
[., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return]
[., allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return]
[allEquivalenceClasses, (, ), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return, !]
[), ., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&]
[., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !]
[., size, (, ), >, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !]
[>, 1, ;, }, boolean, shouldRename, (, T, type, ), {, return, !, skipRenaming, &&, !, typesToSkip, ., contains, (]
[!, skipRenaming, &&, !, typesToSkip, ., contains, (, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =]
[skipRenaming, &&, !, typesToSkip, ., contains, (, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !]
[!, typesToSkip, ., contains, (, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;]
[., contains, (, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =]
[(, type, ), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =, true, ;]
[), ;, }, boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =, true, ;, types, =]
[boolean, invalidate, (, ), {, boolean, changed, =, !, skipRenaming, ;, skipRenaming, =, true, ;, types, =, null, ;, return]
[types, =, null, ;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if, (]
[=, null, ;, return, changed, ;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if, (, !]
[;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if, (, !, skipRenaming, ), {, if, (]
[;, }, boolean, scheduleRenaming, (, Node, node, ,, T, type, ), {, if, (, !, skipRenaming, ), {, if, (]
[(, Node, node, ,, T, type, ), {, if, (, !, skipRenaming, ), {, if, (, typeSystem, ., isInvalidatingType, (]
[T, type, ), {, if, (, !, skipRenaming, ), {, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {]
[(, !, skipRenaming, ), {, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, invalidate, (, ), ;, return]
[), {, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, invalidate, (, ), ;, return, false, ;, }]
[), {, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, invalidate, (, ), ;, return, false, ;, }]
[typeSystem, ., isInvalidatingType, (, type, ), ), {, invalidate, (, ), ;, return, false, ;, }, renameNodes, ., add, (]
[(, type, ), ), {, invalidate, (, ), ;, return, false, ;, }, renameNodes, ., add, (, node, ), ;]
[(, type, ), ), {, invalidate, (, ), ;, return, false, ;, }, renameNodes, ., add, (, node, ), ;]
[{, invalidate, (, ), ;, return, false, ;, }, renameNodes, ., add, (, node, ), ;, rootTypes, ., put, (]
[(, ), ;, return, false, ;, }, renameNodes, ., add, (, node, ), ;, rootTypes, ., put, (, node, ,]
[;, }, renameNodes, ., add, (, node, ), ;, rootTypes, ., put, (, node, ,, type, ), ;, }, return]
[node, ,, type, ), ;, }, return, true, ;, }, }, private, Map, <, String, ,, Property, >, properties, =]
[node, ,, type, ), ;, }, return, true, ;, }, }, private, Map, <, String, ,, Property, >, properties, =]
[static, DisambiguateProperties, <, JSType, >, forJSTypeSystem, (, AbstractCompiler, compiler, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return]
[(, AbstractCompiler, compiler, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, JSType, >, (]
[compiler, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, JSType, >, (, compiler, ,]
[<, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, JSType, >, (, compiler, ,, new, JSTypeSystem, (]
[CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, JSType, >, (, compiler, ,, new, JSTypeSystem, (, compiler, ), ,]
[ConcreteType, >, forConcreteTypeSystem, (, AbstractCompiler, compiler, ,, TightenTypes, tt, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return]
[,, TightenTypes, tt, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, ConcreteType, >, (]
[tt, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, ConcreteType, >, (, compiler, ,]
[<, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, ConcreteType, >, (, compiler, ,, new, ConcreteTypeSystem, (]
[,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, ConcreteType, >, (, compiler, ,, new, ConcreteTypeSystem, (, tt, ,]
[,, CheckLevel, >, propertiesToErrorFor, ), {, return, new, DisambiguateProperties, <, ConcreteType, >, (, compiler, ,, new, ConcreteTypeSystem, (, tt, ,]
[new, DisambiguateProperties, <, ConcreteType, >, (, compiler, ,, new, ConcreteTypeSystem, (, tt, ,, compiler, ., getCodingConvention, (, ), ), ,]
[DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <, T, >, typeSystem, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {]
[DisambiguateProperties, (, AbstractCompiler, compiler, ,, TypeSystem, <, T, >, typeSystem, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {]
[,, TypeSystem, <, T, >, typeSystem, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, this, ., compiler, =]
[<, T, >, typeSystem, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, this, ., compiler, =, compiler, ;]
[<, T, >, typeSystem, ,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, this, ., compiler, =, compiler, ;]
[,, Map, <, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, this, ., compiler, =, compiler, ;, this, ., typeSystem, =]
[<, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, this, ., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;]
[<, String, ,, CheckLevel, >, propertiesToErrorFor, ), {, this, ., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;]
[>, propertiesToErrorFor, ), {, this, ., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =]
[this, ., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (]
[., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !]
[., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !]
[., compiler, =, compiler, ;, this, ., typeSystem, =, typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !]
[typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {]
[typeSystem, ;, this, ., propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {]
[propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap, =]
[propertiesToErrorFor, =, propertiesToErrorFor, ;, if, (, !, this, ., propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap, =]
[propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else, {]
[propertiesToErrorFor, ., isEmpty, (, ), ), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else, {]
[), ), {, this, ., invalidationMap, =, LinkedHashMultimap, ., create, (, ), ;, }, else, {, this, ., invalidationMap, =]
[., invalidationMap, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., invalidationMap, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==]
[void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :]
[Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ==, LifeCycleStage, ., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :]
[., NORMALIZED, ), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {]
[), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (]
[), ;, for, (, TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (]
[TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ,]
[TypeMismatch, mis, :, compiler, ., getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ,]
[getTypeValidator, (, ), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, ), ;]
[), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, ), ;, addInvalidatingType, (]
[), ., getMismatches, (, ), ), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, ), ;, addInvalidatingType, (]
[), ), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, ), ;, addInvalidatingType, (, mis, ., typeB, ,]
[), ), {, addInvalidatingType, (, mis, ., typeA, ,, mis, ., src, ), ;, addInvalidatingType, (, mis, ., typeB, ,]
[), ;, addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =]
[), ;, addInvalidatingType, (, mis, ., typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =]
[typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;]
[typeB, ,, mis, ., src, ), ;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;]
[src, ), ;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse, (]
[;, }, StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[StaticScope, <, T, >, scope, =, typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;]
[typeSystem, ., getRootScope, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, externs, ,, new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[new, FindExternProperties, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindRenameableProperties, (, ), ), ;]
[), ;, renameProperties, (, ), ;, }, private, void, recordInvalidationError, (, JSType, t, ,, JSError, error, ), {, if, (]
[;, renameProperties, (, ), ;, }, private, void, recordInvalidationError, (, JSType, t, ,, JSError, error, ), {, if, (, !]
[;, renameProperties, (, ), ;, }, private, void, recordInvalidationError, (, JSType, t, ,, JSError, error, ), {, if, (, !]
[,, JSError, error, ), {, if, (, !, t, ., isObject, (, ), ), {, return, ;, }, if, (]
[,, JSError, error, ), {, if, (, !, t, ., isObject, (, ), ), {, return, ;, }, if, (]
[error, ), {, if, (, !, t, ., isObject, (, ), ), {, return, ;, }, if, (, invalidationMap, !=]
[if, (, !, t, ., isObject, (, ), ), {, return, ;, }, if, (, invalidationMap, !=, null, ), {]
[if, (, !, t, ., isObject, (, ), ), {, return, ;, }, if, (, invalidationMap, !=, null, ), {]
[., isObject, (, ), ), {, return, ;, }, if, (, invalidationMap, !=, null, ), {, invalidationMap, ., put, (]
[(, ), ), {, return, ;, }, if, (, invalidationMap, !=, null, ), {, invalidationMap, ., put, (, t, ,]
[put, (, t, ,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {]
[t, ,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {, type, =]
[t, ,, error, ), ;, }, }, private, void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {, type, =]
[void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[void, addInvalidatingType, (, JSType, type, ,, JSError, error, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[type, ., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[(, ), ), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[), {, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (]
[for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ,]
[(, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ,, error, ), ;, }, }, else, if, (]
[(, ), ., getAlternates, (, ), ), {, addInvalidatingType, (, alt, ,, error, ), ;, }, }, else, if, (]
[{, addInvalidatingType, (, alt, ,, error, ), ;, }, }, else, if, (, type, ., isEnumElementType, (, ), ), {]
[(, alt, ,, error, ), ;, }, }, else, if, (, type, ., isEnumElementType, (, ), ), {, addInvalidatingType, (]
[(, alt, ,, error, ), ;, }, }, else, if, (, type, ., isEnumElementType, (, ), ), {, addInvalidatingType, (]
[(, alt, ,, error, ), ;, }, }, else, if, (, type, ., isEnumElementType, (, ), ), {, addInvalidatingType, (]
[(, type, ., isEnumElementType, (, ), ), {, addInvalidatingType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,]
[), {, addInvalidatingType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, error, ), ;, }, else, {]
[), {, addInvalidatingType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, error, ), ;, }, else, {]
[type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, error, ), ;, }, else, {, typeSystem, ., addInvalidatingType, (]
[(, ), ., getPrimitiveType, (, ), ,, error, ), ;, }, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;]
[., getPrimitiveType, (, ), ,, error, ), ;, }, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (]
[(, ), ,, error, ), ;, }, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,]
[}, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =]
[}, else, {, typeSystem, ., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =]
[., addInvalidatingType, (, type, ), ;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (]
[;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[;, recordInvalidationError, (, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[(, type, ,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=]
[,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[,, error, ), ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[=, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=]
[cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, ), {]
[cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, ), {]
[;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (]
[;, if, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (]
[objType, ., getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;]
[getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (]
[getImplicitPrototype, (, ), !=, null, ), {, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (]
[{, typeSystem, ., addInvalidatingType, (, objType, ., getImplicitPrototype, (, ), ), ;, recordInvalidationError, (, objType, ., getImplicitPrototype, (, ), ,]
[getImplicitPrototype, (, ), ,, error, ), ;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if, (]
[(, ), ,, error, ), ;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if, (, !]
[(, ), ,, error, ), ;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if, (, !]
[), ;, }, }, }, protected, Property, getProperty, (, String, name, ), {, if, (, !, properties, ., containsKey, (]
[}, protected, Property, getProperty, (, String, name, ), {, if, (, !, properties, ., containsKey, (, name, ), ), {]
[}, protected, Property, getProperty, (, String, name, ), {, if, (, !, properties, ., containsKey, (, name, ), ), {]
[(, String, name, ), {, if, (, !, properties, ., containsKey, (, name, ), ), {, properties, ., put, (]
[name, ), {, if, (, !, properties, ., containsKey, (, name, ), ), {, properties, ., put, (, name, ,]
[if, (, !, properties, ., containsKey, (, name, ), ), {, properties, ., put, (, name, ,, new, Property, (]
[(, name, ), ), {, properties, ., put, (, name, ,, new, Property, (, name, ), ), ;, }, return]
[(, name, ), ), {, properties, ., put, (, name, ,, new, Property, (, name, ), ), ;, }, return]
[{, properties, ., put, (, name, ,, new, Property, (, name, ), ), ;, }, return, properties, ., get, (]
[return, properties, ., get, (, name, ), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type, ), {, return]
[return, properties, ., get, (, name, ), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type, ), {, return]
[(, name, ), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type, ), {, return, typeSystem, ., getTypeWithProperty, (]
[), ;, }, T, getTypeWithProperty, (, String, field, ,, T, type, ), {, return, typeSystem, ., getTypeWithProperty, (, field, ,]
[;, }, private, abstract, class, AbstractScopingCallback, implements, ScopedCallback, {, protected, final, Stack, <, StaticScope, <, T, >, >, scopes, =]
[(, ), ;, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, return]
[Node, parent, ), {, return, true, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[Node, parent, ), {, return, true, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {]
[void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, scopes, ., push, (]
[void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), ), {, scopes, ., push, (]
[., inGlobalScope, (, ), ), {, scopes, ., push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {]
[., inGlobalScope, (, ), ), {, scopes, ., push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {]
[), {, scopes, ., push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {, scopes, ., push, (]
[), {, scopes, ., push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {, scopes, ., push, (]
[push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {, scopes, ., push, (, typeSystem, ., getFunctionScope, (]
[push, (, typeSystem, ., getRootScope, (, ), ), ;, }, else, {, scopes, ., push, (, typeSystem, ., getFunctionScope, (]
[t, ., getScopeRoot, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[t, ., getScopeRoot, (, ), ), ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {]
[t, ), {, scopes, ., pop, (, ), ;, }, protected, StaticScope, <, T, >, getScope, (, ), {, return]
[t, ), {, scopes, ., pop, (, ), ;, }, protected, StaticScope, <, T, >, getScope, (, ), {, return]
[AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, field, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, field, =]
[,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, String, field, =]
[(, ), ), {, String, field, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T, type, =]
[(, ), ), {, String, field, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T, type, =]
[String, field, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (]
[., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,]
[., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,]
[(, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,]
[typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, field, ), ;, Property, prop, =]
[getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, field, ), ;, Property, prop, =, getProperty, (]
[,, n, ., getFirstChild, (, ), ,, field, ), ;, Property, prop, =, getProperty, (, field, ), ;, if, (]
[,, n, ., getFirstChild, (, ), ,, field, ), ;, Property, prop, =, getProperty, (, field, ), ;, if, (]
[(, ), ,, field, ), ;, Property, prop, =, getProperty, (, field, ), ;, if, (, typeSystem, ., isInvalidatingType, (]
[), ;, Property, prop, =, getProperty, (, field, ), ;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {]
[), ;, Property, prop, =, getProperty, (, field, ), ;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {]
[;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, prop, ., invalidate, (, ), ;, }, else, {]
[;, if, (, typeSystem, ., isInvalidatingType, (, type, ), ), {, prop, ., invalidate, (, ), ;, }, else, {]
[., isInvalidatingType, (, type, ), ), {, prop, ., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (]
[), {, prop, ., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (]
[), {, prop, ., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (]
[{, prop, ., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (, (]
[., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (, (, type, =]
[., invalidate, (, ), ;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (, (, type, =]
[;, }, else, {, prop, ., addTypeToSkip, (, type, ), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (]
[prop, ., addTypeToSkip, (, type, ), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=]
[(, type, ), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null, ), {]
[(, type, ), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null, ), {]
[(, type, ), ;, if, (, (, type, =, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null, ), {]
[=, typeSystem, ., getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, ., getTypes, (, ), ., add, (]
[getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, ., getTypes, (, ), ., add, (, type, ), ;]
[getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, ., getTypes, (, ), ., add, (, type, ), ;]
[getInstanceFromPrototype, (, type, ), ), !=, null, ), {, prop, ., getTypes, (, ), ., add, (, type, ), ;]
[null, ), {, prop, ., getTypes, (, ), ., add, (, type, ), ;, prop, ., typesToSkip, ., add, (]
[AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractScopingCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, handleGetProp, (]
[Node, n, ,, Node, parent, ), {, if, (, n, ., isGetProp, (, ), ), {, handleGetProp, (, t, ,]
[if, (, n, ., isGetProp, (, ), ), {, handleGetProp, (, t, ,, n, ), ;, }, else, if, (]
[if, (, n, ., isGetProp, (, ), ), {, handleGetProp, (, t, ,, n, ), ;, }, else, if, (]
[), {, handleGetProp, (, t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {]
[handleGetProp, (, t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, handleObjectLit, (]
[t, ,, n, ), ;, }, else, if, (, n, ., isObjectLit, (, ), ), {, handleObjectLit, (, t, ,]
[,, n, ), ;, }, }, private, void, handleGetProp, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[,, n, ), ;, }, }, private, void, handleGetProp, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[,, n, ), ;, }, }, private, void, handleGetProp, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[Node, n, ), {, String, name, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T, type, =]
[Node, n, ), {, String, name, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T, type, =]
[String, name, =, n, ., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (]
[., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,]
[., getLastChild, (, ), ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,]
[(, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,]
[typeSystem, ., getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, name, ), ;, Property, prop, =]
[getType, (, getScope, (, ), ,, n, ., getFirstChild, (, ), ,, name, ), ;, Property, prop, =, getProperty, (]
[,, n, ., getFirstChild, (, ), ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (]
[n, ., getFirstChild, (, ), ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !]
[n, ., getFirstChild, (, ), ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !]
[), ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (]
[), ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (]
[prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,]
[getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (]
[name, ), ;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,]
[;, if, (, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,]
[(, !, prop, ., scheduleRenaming, (, n, ., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,, type, ,]
[., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (]
[., getLastChild, (, ), ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (]
[,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (]
[type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =]
[), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =, "", ;, if, (]
[), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, String, suggestion, =, "", ;, if, (]
[(, name, ), ), {, String, suggestion, =, "", ;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =]
[), {, String, suggestion, =, "", ;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =, (, JSType, )]
[=, "", ;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =, (, JSType, ), type, ;, if, (]
[=, "", ;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =, (, JSType, ), type, ;, if, (]
[=, "", ;, if, (, type, instanceof, JSType, ), {, JSType, jsType, =, (, JSType, ), type, ;, if, (]
[instanceof, JSType, ), {, JSType, jsType, =, (, JSType, ), type, ;, if, (, jsType, ., isAllType, (, ), ||]
[instanceof, JSType, ), {, JSType, jsType, =, (, JSType, ), type, ;, if, (, jsType, ., isAllType, (, ), ||]
[), type, ;, if, (, jsType, ., isAllType, (, ), ||, jsType, ., isUnknownType, (, ), ), {, if, (]
[), type, ;, if, (, jsType, ., isAllType, (, ), ||, jsType, ., isUnknownType, (, ), ), {, if, (]
[), type, ;, if, (, jsType, ., isAllType, (, ), ||, jsType, ., isUnknownType, (, ), ), {, if, (]
[jsType, ., isUnknownType, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {]
[isUnknownType, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, suggestion, =]
[isUnknownType, (, ), ), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, suggestion, =]
[), ), {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +]
[(, ), ., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String, qName, =]
[(, ), ., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String, qName, =]
[(, ), ., isThis, (, ), ), {, suggestion, =, "The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String, qName, =]
["The \"this\" object is unknown in the function,", +, "consider using @this", ;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;]
["consider using @this", ;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =]
["consider using @this", ;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =]
["consider using @this", ;, }, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =]
[}, else, {, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =, "Consider casting ", +]
[{, String, qName, =, n, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, suggestion, =, "Consider casting ", +, qName, +]
[), ;, suggestion, =, "Consider casting ", +, qName, +, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =]
[), ;, suggestion, =, "Consider casting ", +, qName, +, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =]
[qName, +, " if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;]
[" if you know it's type.", ;, }, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations, (]
[}, }, else, {, List, <, String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations, (, errors, ,]
[<, String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations, (, errors, ,, jsType, ), ;, if, (]
[String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations, (, errors, ,, jsType, ), ;, if, (, !]
[String, >, errors, =, Lists, ., newArrayList, (, ), ;, printErrorLocations, (, errors, ,, jsType, ), ;, if, (, !]
[(, ), ;, printErrorLocations, (, errors, ,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {]
[;, printErrorLocations, (, errors, ,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =]
[(, errors, ,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;]
[,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=]
[,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=]
[,, jsType, ), ;, if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=]
[if, (, !, errors, ., isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (]
[isEmpty, (, ), ), {, suggestion, =, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join, (]
[=, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }]
[=, "Consider fixing errors for the following types:\n", ;, suggestion, +=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }]
[+=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }, compiler, ., report, (]
[+=, Joiner, ., on, (, "\n", ), ., join, (, errors, ), ;, }, }, }, compiler, ., report, (]
[(, "\n", ), ., join, (, errors, ), ;, }, }, }, compiler, ., report, (, JSError, ., make, (]
[(, "\n", ), ., join, (, errors, ), ;, }, }, }, compiler, ., report, (, JSError, ., make, (]
[errors, ), ;, }, }, }, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[;, }, }, }, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[;, }, }, }, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,]
[compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (]
[(, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,]
[(, JSError, ., make, (, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,]
[(, t, ., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,]
[., getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,]
[getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (]
[getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (]
[getSourceName, (, ), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (]
[), ,, n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==]
[n, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?]
[propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :]
[propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :]
[Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,]
[Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,]
[(, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,]
[), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =]
[), ), ;, }, }, }, private, void, handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =]
[handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n, ., getFirstChild, (, ), ;, while, (]
[handleObjectLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n, ., getFirstChild, (, ), ;, while, (]
[NodeTraversal, t, ,, Node, n, ), {, Node, child, =, n, ., getFirstChild, (, ), ;, while, (, child, !=]
[{, Node, child, =, n, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, String, name, =]
[{, Node, child, =, n, ., getFirstChild, (, ), ;, while, (, child, !=, null, ), {, String, name, =]
[;, while, (, child, !=, null, ), {, String, name, =, child, ., getString, (, ), ;, T, type, =]
[;, while, (, child, !=, null, ), {, String, name, =, child, ., getString, (, ), ;, T, type, =]
[!=, null, ), {, String, name, =, child, ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (]
[String, name, =, child, ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,]
[=, child, ., getString, (, ), ;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ,]
[;, T, type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ,, name, ), ;, Property, prop, =]
[type, =, typeSystem, ., getType, (, getScope, (, ), ,, n, ,, name, ), ;, Property, prop, =, getProperty, (]
[(, getScope, (, ), ,, n, ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (]
[getScope, (, ), ,, n, ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !]
[getScope, (, ), ,, n, ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !]
[n, ,, name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (]
[name, ), ;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,]
[;, Property, prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty, (]
[prop, =, getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty, (, t, ,]
[getProperty, (, name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,]
[name, ), ;, if, (, !, prop, ., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,]
[., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (]
[., scheduleRenaming, (, child, ,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (]
[,, processProperty, (, t, ,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (]
[,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {]
[,, prop, ,, type, ,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {]
[,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (]
[,, null, ), ), ), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (]
[), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (, JSError, ., make, (]
[), {, if, (, propertiesToErrorFor, ., containsKey, (, name, ), ), {, compiler, ., report, (, JSError, ., make, (]
[containsKey, (, name, ), ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,]
[name, ), ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,]
[name, ), ), {, compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,]
[compiler, ., report, (, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (]
[(, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,]
[(, JSError, ., make, (, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,]
[(, t, ., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,]
[., getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,]
[getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (]
[getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (]
[getSourceName, (, ), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (]
[), ,, child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==]
[child, ,, propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?]
[propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :]
[propertiesToErrorFor, ., get, (, name, ), ,, Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :]
[Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,]
[Warnings, ., INVALIDATION, ,, name, ,, (, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,]
[(, type, ==, null, ?, "null", :, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,]
[:, type, ., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), ), ;, }, }]
[., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), ), ;, }, }, child, =]
[., toString, (, ), ), ,, n, ., toString, (, ), ,, "", ), ), ;, }, }, child, =]
[), ;, }, }, private, void, printErrorLocations, (, List, <, String, >, errors, ,, JSType, t, ), {, if, (]
[), ;, }, }, private, void, printErrorLocations, (, List, <, String, >, errors, ,, JSType, t, ), {, if, (]
[;, }, }, private, void, printErrorLocations, (, List, <, String, >, errors, ,, JSType, t, ), {, if, (, !]
[;, }, }, private, void, printErrorLocations, (, List, <, String, >, errors, ,, JSType, t, ), {, if, (, !]
[(, List, <, String, >, errors, ,, JSType, t, ), {, if, (, !, t, ., isObject, (, ), ||]
[(, List, <, String, >, errors, ,, JSType, t, ), {, if, (, !, t, ., isObject, (, ), ||]
[(, !, t, ., isObject, (, ), ||, t, ., isAllType, (, ), ), {, return, ;, }, if, (]
[(, !, t, ., isObject, (, ), ||, t, ., isAllType, (, ), ), {, return, ;, }, if, (]
[), ), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[), ), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[), ), {, return, ;, }, if, (, t, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[(, ), ), {, for, (, JSType, alt, :, t, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[), {, for, (, JSType, alt, :, t, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, printErrorLocations, (]
[for, (, JSType, alt, :, t, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, printErrorLocations, (, errors, ,]
[(, ), ), {, printErrorLocations, (, errors, ,, alt, ), ;, }, return, ;, }, for, (, JSError, error, :]
[(, ), ), {, printErrorLocations, (, errors, ,, alt, ), ;, }, return, ;, }, for, (, JSError, error, :]
[printErrorLocations, (, errors, ,, alt, ), ;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, ., get, (]
[;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, ., get, (, t, ), ), {, if, (]
[;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, ., get, (, t, ), ), {, if, (]
[;, }, return, ;, }, for, (, JSError, error, :, invalidationMap, ., get, (, t, ), ), {, if, (]
[(, JSError, error, :, invalidationMap, ., get, (, t, ), ), {, if, (, errors, ., size, (, ), >]
[get, (, t, ), ), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }]
[get, (, t, ), ), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }]
[), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (]
[), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (]
[), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (]
[), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (]
[), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (]
[), {, if, (, errors, ., size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (]
[size, (, ), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (, t, ., toString, (, ), +]
[), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +]
[), >, MAX_INVALDIATION_WARNINGS_PER_PROPERTY, ), {, return, ;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +]
[{, return, ;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +, error, ., sourceName, +]
[;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +, error, ., sourceName, +, ":", +]
[;, }, errors, ., add, (, t, ., toString, (, ), +, " at ", +, error, ., sourceName, +, ":", +]
[;, }, }, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T, relatedType, ), {]
[}, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T, relatedType, ), {, type, =]
[}, private, T, processProperty, (, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T, relatedType, ), {, type, =]
[(, NodeTraversal, t, ,, Property, prop, ,, T, type, ,, T, relatedType, ), {, type, =, typeSystem, ., restrictByNotNullOrUndefined, (]
[prop, ,, T, type, ,, T, relatedType, ), {, type, =, typeSystem, ., restrictByNotNullOrUndefined, (, type, ), ;, if, (]
[prop, ,, T, type, ,, T, relatedType, ), {, type, =, typeSystem, ., restrictByNotNullOrUndefined, (, type, ), ;, if, (]
[prop, ,, T, type, ,, T, relatedType, ), {, type, =, typeSystem, ., restrictByNotNullOrUndefined, (, type, ), ;, if, (]
[,, T, relatedType, ), {, type, =, typeSystem, ., restrictByNotNullOrUndefined, (, type, ), ;, if, (, prop, ., skipRenaming, ||]
[,, T, relatedType, ), {, type, =, typeSystem, ., restrictByNotNullOrUndefined, (, type, ), ;, if, (, prop, ., skipRenaming, ||]
[{, type, =, typeSystem, ., restrictByNotNullOrUndefined, (, type, ), ;, if, (, prop, ., skipRenaming, ||, typeSystem, ., isInvalidatingType, (]
[restrictByNotNullOrUndefined, (, type, ), ;, if, (, prop, ., skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, ), ), {, return]
[skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, ), ), {, return, null, ;, }, Iterable, <, T, >, alternatives, =]
[skipRenaming, ||, typeSystem, ., isInvalidatingType, (, type, ), ), {, return, null, ;, }, Iterable, <, T, >, alternatives, =]
[isInvalidatingType, (, type, ), ), {, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (]
[{, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;, if, (]
[{, return, null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;, if, (]
[null, ;, }, Iterable, <, T, >, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;, if, (, alternatives, !=]
[>, alternatives, =, typeSystem, ., getTypeAlternatives, (, type, ), ;, if, (, alternatives, !=, null, ), {, T, firstType, =]
[type, ), ;, if, (, alternatives, !=, null, ), {, T, firstType, =, relatedType, ;, for, (, T, subType, :]
[!=, null, ), {, T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives, ), {, T, lastType, =]
[), {, T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives, ), {, T, lastType, =, processProperty, (]
[T, firstType, =, relatedType, ;, for, (, T, subType, :, alternatives, ), {, T, lastType, =, processProperty, (, t, ,]
[=, relatedType, ;, for, (, T, subType, :, alternatives, ), {, T, lastType, =, processProperty, (, t, ,, prop, ,]
[;, for, (, T, subType, :, alternatives, ), {, T, lastType, =, processProperty, (, t, ,, prop, ,, subType, ,]
[:, alternatives, ), {, T, lastType, =, processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (]
[:, alternatives, ), {, T, lastType, =, processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (]
[), {, T, lastType, =, processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=]
[lastType, =, processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {]
[processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =]
[processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =]
[processProperty, (, t, ,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =]
[t, ,, prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==]
[prop, ,, subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null, ?]
[subType, ,, firstType, ), ;, if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null, ?, lastType, :]
[if, (, lastType, !=, null, ), {, firstType, =, firstType, ==, null, ?, lastType, :, firstType, ;, }, }, return]
[=, firstType, ==, null, ?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =]
[=, firstType, ==, null, ?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =]
[?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (]
[?, lastType, :, firstType, ;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (]
[;, }, }, return, firstType, ;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, ., name, ,]
[;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, ., name, ,, type, ), ;, if, (]
[;, }, else, {, T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, ., name, ,, type, ), ;, if, (]
[T, topType, =, typeSystem, ., getTypeWithProperty, (, prop, ., name, ,, type, ), ;, if, (, typeSystem, ., isInvalidatingType, (]
[getTypeWithProperty, (, prop, ., name, ,, type, ), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return]
[., name, ,, type, ), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }]
[., name, ,, type, ), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }]
[), ;, if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }, prop, ., addType, (]
[if, (, typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }, prop, ., addType, (, type, ,]
[typeSystem, ., isInvalidatingType, (, topType, ), ), {, return, null, ;, }, prop, ., addType, (, type, ,, topType, ,]
[topType, ), ), {, return, null, ;, }, prop, ., addType, (, type, ,, topType, ,, relatedType, ), ;, return]
[,, topType, ,, relatedType, ), ;, return, topType, ;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =]
[), ;, return, topType, ;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =, 0, ,, propsSkipped, =]
[;, }, }, }, void, renameProperties, (, ), {, int, propsRenamed, =, 0, ,, propsSkipped, =, 0, ,, instancesRenamed, =]
[void, renameProperties, (, ), {, int, propsRenamed, =, 0, ,, propsSkipped, =, 0, ,, instancesRenamed, =, 0, ,, instancesSkipped, =]
[{, int, propsRenamed, =, 0, ,, propsSkipped, =, 0, ,, instancesRenamed, =, 0, ,, instancesSkipped, =, 0, ,, singleTypeProps, =]
[=, 0, ,, instancesRenamed, =, 0, ,, instancesSkipped, =, 0, ,, singleTypeProps, =, 0, ;, for, (, Property, prop, :]
[=, 0, ,, instancesRenamed, =, 0, ,, instancesSkipped, =, 0, ,, singleTypeProps, =, 0, ;, for, (, Property, prop, :]
[0, ,, singleTypeProps, =, 0, ;, for, (, Property, prop, :, properties, ., values, (, ), ), {, if, (]
[0, ,, singleTypeProps, =, 0, ;, for, (, Property, prop, :, properties, ., values, (, ), ), {, if, (]
[), ), {, if, (, prop, ., shouldRename, (, ), ), {, Map, <, T, ,, String, >, propNames, =]
[{, if, (, prop, ., shouldRename, (, ), ), {, Map, <, T, ,, String, >, propNames, =, buildPropNames, (]
[{, if, (, prop, ., shouldRename, (, ), ), {, Map, <, T, ,, String, >, propNames, =, buildPropNames, (]
[(, ), ), {, Map, <, T, ,, String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (, ), ,]
[(, ), ), {, Map, <, T, ,, String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (, ), ,]
[<, T, ,, String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (, ), ,, prop, ., name, ), ;]
[T, ,, String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (, ), ,, prop, ., name, ), ;, ++]
[String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (, ), ,, prop, ., name, ), ;, ++, propsRenamed, ;]
[String, >, propNames, =, buildPropNames, (, prop, ., getTypes, (, ), ,, prop, ., name, ), ;, ++, propsRenamed, ;]
[prop, ., name, ), ;, ++, propsRenamed, ;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =]
[prop, ., name, ), ;, ++, propsRenamed, ;, prop, ., expandTypesToSkip, (, ), ;, UnionFind, <, T, >, types, =]
[(, ), ;, UnionFind, <, T, >, types, =, prop, ., getTypes, (, ), ;, for, (, Node, node, :]
[(, ), ;, UnionFind, <, T, >, types, =, prop, ., getTypes, (, ), ;, for, (, Node, node, :]
[=, prop, ., getTypes, (, ), ;, for, (, Node, node, :, prop, ., renameNodes, ), {, T, rootType, =]
[=, prop, ., getTypes, (, ), ;, for, (, Node, node, :, prop, ., renameNodes, ), {, T, rootType, =]
[=, prop, ., getTypes, (, ), ;, for, (, Node, node, :, prop, ., renameNodes, ), {, T, rootType, =]
[;, for, (, Node, node, :, prop, ., renameNodes, ), {, T, rootType, =, prop, ., rootTypes, ., get, (]
[:, prop, ., renameNodes, ), {, T, rootType, =, prop, ., rootTypes, ., get, (, node, ), ;, if, (]
[:, prop, ., renameNodes, ), {, T, rootType, =, prop, ., rootTypes, ., get, (, node, ), ;, if, (]
[), {, T, rootType, =, prop, ., rootTypes, ., get, (, node, ), ;, if, (, prop, ., shouldRename, (]
[rootTypes, ., get, (, node, ), ;, if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =]
[rootTypes, ., get, (, node, ), ;, if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =]
[node, ), ;, if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =, propNames, ., get, (]
[if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =, propNames, ., get, (, rootType, ), ;]
[if, (, prop, ., shouldRename, (, rootType, ), ), {, String, newName, =, propNames, ., get, (, rootType, ), ;]
[shouldRename, (, rootType, ), ), {, String, newName, =, propNames, ., get, (, rootType, ), ;, node, ., setString, (]
[), ), {, String, newName, =, propNames, ., get, (, rootType, ), ;, node, ., setString, (, newName, ), ;]
[), ), {, String, newName, =, propNames, ., get, (, rootType, ), ;, node, ., setString, (, newName, ), ;]
[propNames, ., get, (, rootType, ), ;, node, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;]
[., get, (, rootType, ), ;, node, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, ++]
[;, node, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {]
[node, ., setString, (, newName, ), ;, compiler, ., reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {, ++]
[reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if, (]
[reportCodeChange, (, ), ;, ++, instancesRenamed, ;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if, (]
[instancesRenamed, ;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {]
[;, }, else, {, ++, instancesSkipped, ;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {, ++]
[instancesSkipped, ;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {]
[;, }, }, }, else, {, if, (, prop, ., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++]
[{, if, (, prop, ., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }]
[{, if, (, prop, ., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }]
[., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (]
[., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (]
[., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (]
[., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (]
[., skipRenaming, ), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (]
[), {, ++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +]
[++, propsSkipped, ;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +]
[;, }, else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +]
[else, {, ++, singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +]
[singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;]
[singleTypeProps, ;, }, }, }, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[}, logger, ., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (]
[., fine, (, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +]
[(, "Renamed ", +, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +]
[+, instancesRenamed, +, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +]
[+, " instances of ", +, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +]
[+, propsRenamed, +, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +]
[+, " properties.", ), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +]
[), ;, logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +]
[logger, ., fine, (, "Skipped renaming ", +, instancesSkipped, +, " invalidated ", +, "properties, ", +, propsSkipped, +, " instances of properties ", +, "that were skipped for specific types and ", +, singleTypeProps, +]
[buildPropNames, (, UnionFind, <, T, >, types, ,, String, name, ), {, Map, <, T, ,, String, >, names, =]
[buildPropNames, (, UnionFind, <, T, >, types, ,, String, name, ), {, Map, <, T, ,, String, >, names, =]
[T, ,, String, >, names, =, Maps, ., newHashMap, (, ), ;, for, (, Set, <, T, >, set, :]
[T, ,, String, >, names, =, Maps, ., newHashMap, (, ), ;, for, (, Set, <, T, >, set, :]
[., newHashMap, (, ), ;, for, (, Set, <, T, >, set, :, types, ., allEquivalenceClasses, (, ), ), {]
[(, ), ;, for, (, Set, <, T, >, set, :, types, ., allEquivalenceClasses, (, ), ), {, checkState, (]
[), ;, for, (, Set, <, T, >, set, :, types, ., allEquivalenceClasses, (, ), ), {, checkState, (, !]
[), ;, for, (, Set, <, T, >, set, :, types, ., allEquivalenceClasses, (, ), ), {, checkState, (, !]
[types, ., allEquivalenceClasses, (, ), ), {, checkState, (, !, set, ., isEmpty, (, ), ), ;, String, typeName, =]
[checkState, (, !, set, ., isEmpty, (, ), ), ;, String, typeName, =, null, ;, for, (, T, type, :]
[isEmpty, (, ), ), ;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (]
[isEmpty, (, ), ), ;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (]
[isEmpty, (, ), ), ;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (]
[), ), ;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==]
[;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null, ||]
[;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null, ||]
[;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null, ||]
[;, String, typeName, =, null, ;, for, (, T, type, :, set, ), {, if, (, typeName, ==, null, ||]
[T, type, :, set, ), {, if, (, typeName, ==, null, ||, type, ., toString, (, ), ., compareTo, (]
[set, ), {, if, (, typeName, ==, null, ||, type, ., toString, (, ), ., compareTo, (, typeName, ), <]
[if, (, typeName, ==, null, ||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0, ), {]
[typeName, ==, null, ||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0, ), {, typeName, =]
[typeName, ==, null, ||, type, ., toString, (, ), ., compareTo, (, typeName, ), <, 0, ), {, typeName, =]
[), <, 0, ), {, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (]
[), <, 0, ), {, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (]
[{, typeName, =, type, ., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals, (]
[., toString, (, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals, (, typeName, ), ), {]
[(, ), ;, }, }, String, newName, ;, if, (, "{...}", ., equals, (, typeName, ), ), {, newName, =]
[String, newName, ;, if, (, "{...}", ., equals, (, typeName, ), ), {, newName, =, name, ;, }, else, {]
[;, if, (, "{...}", ., equals, (, typeName, ), ), {, newName, =, name, ;, }, else, {, newName, =]
[;, if, (, "{...}", ., equals, (, typeName, ), ), {, newName, =, name, ;, }, else, {, newName, =]
[;, if, (, "{...}", ., equals, (, typeName, ), ), {, newName, =, name, ;, }, else, {, newName, =]
[;, if, (, "{...}", ., equals, (, typeName, ), ), {, newName, =, name, ;, }, else, {, newName, =]
[., equals, (, typeName, ), ), {, newName, =, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (]
[(, typeName, ), ), {, newName, =, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (, "[^\\w$]", ,]
[), {, newName, =, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +]
[newName, =, name, ;, }, else, {, newName, =, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +]
[=, typeName, ., replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name, ;, }, for, (, T, type, :]
[replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name, ;, }, for, (, T, type, :, set, ), {]
[replaceAll, (, "[^\\w$]", ,, "_", ), +, "$", +, name, ;, }, for, (, T, type, :, set, ), {]
["_", ), +, "$", +, name, ;, }, for, (, T, type, :, set, ), {, names, ., put, (]
[+, "$", +, name, ;, }, for, (, T, type, :, set, ), {, names, ., put, (, type, ,]
[for, (, T, type, :, set, ), {, names, ., put, (, type, ,, newName, ), ;, }, }, return]
[Collection, <, T, >, >, getRenamedTypesForTesting, (, ), {, Multimap, <, String, ,, Collection, <, T, >, >, ret, =]
[Collection, <, T, >, >, getRenamedTypesForTesting, (, ), {, Multimap, <, String, ,, Collection, <, T, >, >, ret, =]
[ret, =, HashMultimap, ., create, (, ), ;, for, (, Map, ., Entry, <, String, ,, Property, >, entry, :]
[ret, =, HashMultimap, ., create, (, ), ;, for, (, Map, ., Entry, <, String, ,, Property, >, entry, :]
[Map, ., Entry, <, String, ,, Property, >, entry, :, properties, ., entrySet, (, ), ), {, Property, prop, =]
[Map, ., Entry, <, String, ,, Property, >, entry, :, properties, ., entrySet, (, ), ), {, Property, prop, =]
[entry, :, properties, ., entrySet, (, ), ), {, Property, prop, =, entry, ., getValue, (, ), ;, if, (]
[:, properties, ., entrySet, (, ), ), {, Property, prop, =, entry, ., getValue, (, ), ;, if, (, !]
[:, properties, ., entrySet, (, ), ), {, Property, prop, =, entry, ., getValue, (, ), ;, if, (, !]
[getValue, (, ), ;, if, (, !, prop, ., skipRenaming, ), {, for, (, Collection, <, T, >, c, :]
[getValue, (, ), ;, if, (, !, prop, ., skipRenaming, ), {, for, (, Collection, <, T, >, c, :]
[getValue, (, ), ;, if, (, !, prop, ., skipRenaming, ), {, for, (, Collection, <, T, >, c, :]
[(, Collection, <, T, >, c, :, prop, ., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (]
[(, Collection, <, T, >, c, :, prop, ., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (]
[Collection, <, T, >, c, :, prop, ., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (, !]
[Collection, <, T, >, c, :, prop, ., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (, !]
[prop, ., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (, !, c, ., isEmpty, (, ), &&]
[., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !]
[., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !]
[., getTypes, (, ), ., allEquivalenceClasses, (, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !]
[(, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !, prop, ., typesToSkip, ., contains, (]
[(, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !, prop, ., typesToSkip, ., contains, (]
[(, ), ), {, if, (, !, c, ., isEmpty, (, ), &&, !, prop, ., typesToSkip, ., contains, (]
[&&, !, prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {]
[&&, !, prop, ., typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {]
[typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {, ret, ., put, (]
[typesToSkip, ., contains, (, c, ., iterator, (, ), ., next, (, ), ), ), {, ret, ., put, (]
[iterator, (, ), ., next, (, ), ), ), {, ret, ., put, (, entry, ., getKey, (, ), ,]
[), {, ret, ., put, (, entry, ., getKey, (, ), ,, c, ), ;, }, }, }, }, return]
[{, private, final, Set, <, JSType, >, invalidatingTypes, ;, private, JSTypeRegistry, registry, ;, public, JSTypeSystem, (, AbstractCompiler, compiler, ), {]
[final, Set, <, JSType, >, invalidatingTypes, ;, private, JSTypeRegistry, registry, ;, public, JSTypeSystem, (, AbstractCompiler, compiler, ), {, registry, =]
[final, Set, <, JSType, >, invalidatingTypes, ;, private, JSTypeRegistry, registry, ;, public, JSTypeSystem, (, AbstractCompiler, compiler, ), {, registry, =]
[;, private, JSTypeRegistry, registry, ;, public, JSTypeSystem, (, AbstractCompiler, compiler, ), {, registry, =, compiler, ., getTypeRegistry, (, ), ;]
[JSTypeRegistry, registry, ;, public, JSTypeSystem, (, AbstractCompiler, compiler, ), {, registry, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =]
[JSTypeRegistry, registry, ;, public, JSTypeSystem, (, AbstractCompiler, compiler, ), {, registry, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =]
[JSTypeSystem, (, AbstractCompiler, compiler, ), {, registry, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (]
[JSTypeSystem, (, AbstractCompiler, compiler, ), {, registry, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (]
[), {, registry, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (]
[), {, registry, =, compiler, ., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (]
[., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,]
[., getTypeRegistry, (, ), ;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,]
[;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (]
[;, invalidatingTypes, =, Sets, ., newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (]
[newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,]
[newHashSet, (, registry, ., getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., ALL_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., NO_OBJECT_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,]
[getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., NO_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,]
[getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., FUNCTION_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,]
[getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., FUNCTION_INSTANCE_TYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,]
[), ,, registry, ., getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,]
[getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (]
[getNativeType, (, JSTypeNative, ., OBJECT_PROTOTYPE, ), ,, registry, ., getNativeType, (, JSTypeNative, ., TOP_LEVEL_PROTOTYPE, ), ,, registry, ., getNativeType, (]
[., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {]
[(, JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (]
[JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !]
[JSTypeNative, ., UNKNOWN_TYPE, ), ), ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !]
[@, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, ), ), ;]
[@, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, ), ), ;]
[addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, ), ), ;, invalidatingTypes, ., add, (]
[invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getRootScope, (, ), {, return]
[), {, return, null, ;, }, @, Override, public, StaticScope, <, JSType, >, getFunctionScope, (, Node, node, ), {, return]
[Override, public, JSType, getType, (, StaticScope, <, JSType, >, scope, ,, Node, node, ,, String, prop, ), {, if, (]
[Override, public, JSType, getType, (, StaticScope, <, JSType, >, scope, ,, Node, node, ,, String, prop, ), {, if, (]
[Override, public, JSType, getType, (, StaticScope, <, JSType, >, scope, ,, Node, node, ,, String, prop, ), {, if, (]
[<, JSType, >, scope, ,, Node, node, ,, String, prop, ), {, if, (, node, ., getJSType, (, ), ==]
[,, Node, node, ,, String, prop, ), {, if, (, node, ., getJSType, (, ), ==, null, ), {, return]
[,, Node, node, ,, String, prop, ), {, if, (, node, ., getJSType, (, ), ==, null, ), {, return]
[String, prop, ), {, if, (, node, ., getJSType, (, ), ==, null, ), {, return, registry, ., getNativeType, (]
[String, prop, ), {, if, (, node, ., getJSType, (, ), ==, null, ), {, return, registry, ., getNativeType, (]
[., getJSType, (, ), ==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return]
[., getJSType, (, ), ==, null, ), {, return, registry, ., getNativeType, (, JSTypeNative, ., UNKNOWN_TYPE, ), ;, }, return]
[return, node, ., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (]
[return, node, ., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (]
[return, node, ., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (]
[return, node, ., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (]
[., getJSType, (, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==]
[(, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==, null, ||]
[(, ), ;, }, @, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==, null, ||]
[@, Override, public, boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==, null, ||, invalidatingTypes, ., contains, (]
[boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==, null, ||, invalidatingTypes, ., contains, (, type, ), ||]
[boolean, isInvalidatingType, (, JSType, type, ), {, if, (, type, ==, null, ||, invalidatingTypes, ., contains, (, type, ), ||]
[(, type, ==, null, ||, invalidatingTypes, ., contains, (, type, ), ||, type, ., isUnknownType, (, ), ), {, return]
[., contains, (, type, ), ||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =]
[., contains, (, type, ), ||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =]
[), ||, type, ., isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (]
[isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[isUnknownType, (, ), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return]
[), ), {, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, !=]
[{, return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, !=, null, &&]
[return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, !=, null, &&, !]
[return, true, ;, }, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, return, objType, !=, null, &&, !]
[objType, ., hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {]
[hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type, =]
[hasReferenceName, (, ), ;, }, @, Override, public, ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type, =]
[ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[ImmutableSet, <, JSType, >, getTypesToSkipForType, (, JSType, type, ), {, type, =, type, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, Set, <, JSType, >, types, =]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, type, ., isUnionType, (, ), ), {, Set, <, JSType, >, types, =]
[;, if, (, type, ., isUnionType, (, ), ), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (]
[), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, type, ), ;, for, (, JSType, alt, :]
[), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, type, ), ;, for, (, JSType, alt, :]
[), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, type, ), ;, for, (, JSType, alt, :]
[(, type, ), ;, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[(, type, ), ;, for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[for, (, JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, types, ., addAll, (]
[JSType, alt, :, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, types, ., addAll, (, getTypesToSkipForTypeNonUnion, (]
[(, ), ., getAlternates, (, ), ), {, types, ., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return]
[(, ), ., getAlternates, (, ), ), {, types, ., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return]
[(, ), ), {, types, ., addAll, (, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return, ImmutableSet, ., copyOf, (]
[(, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return, ImmutableSet, ., copyOf, (, types, ), ;, }, else, if, (]
[(, getTypesToSkipForTypeNonUnion, (, type, ), ), ;, }, return, ImmutableSet, ., copyOf, (, types, ), ;, }, else, if, (]
[return, ImmutableSet, ., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (, ), ), {, return]
[., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypesToSkipForType, (]
[., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypesToSkipForType, (]
[., copyOf, (, types, ), ;, }, else, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypesToSkipForType, (]
[(, ), ), {, return, getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, return]
[(, ), ), {, return, getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, return]
[return, getTypesToSkipForType, (, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, return, ImmutableSet, ., copyOf, (]
[(, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, return, ImmutableSet, ., copyOf, (, getTypesToSkipForTypeNonUnion, (]
[), ;, }, private, Set, <, JSType, >, getTypesToSkipForTypeNonUnion, (, JSType, type, ), {, Set, <, JSType, >, types, =]
[), ;, }, private, Set, <, JSType, >, getTypesToSkipForTypeNonUnion, (, JSType, type, ), {, Set, <, JSType, >, types, =]
[(, JSType, type, ), {, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, ), ;, JSType, skipType, =]
[{, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, ), ;, JSType, skipType, =, type, ;, while, (]
[{, Set, <, JSType, >, types, =, Sets, ., newHashSet, (, ), ;, JSType, skipType, =, type, ;, while, (]
[<, JSType, >, types, =, Sets, ., newHashSet, (, ), ;, JSType, skipType, =, type, ;, while, (, skipType, !=]
[types, =, Sets, ., newHashSet, (, ), ;, JSType, skipType, =, type, ;, while, (, skipType, !=, null, ), {]
[types, =, Sets, ., newHashSet, (, ), ;, JSType, skipType, =, type, ;, while, (, skipType, !=, null, ), {]
[newHashSet, (, ), ;, JSType, skipType, =, type, ;, while, (, skipType, !=, null, ), {, types, ., add, (]
[=, type, ;, while, (, skipType, !=, null, ), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =]
[=, type, ;, while, (, skipType, !=, null, ), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =]
[), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (]
[), {, types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (]
[types, ., add, (, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (, objSkipType, !=]
[(, skipType, ), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (, objSkipType, !=, null, ), {]
[), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (, objSkipType, !=, null, ), {, skipType, =]
[), ;, ObjectType, objSkipType, =, skipType, ., toObjectType, (, ), ;, if, (, objSkipType, !=, null, ), {, skipType, =]
[!=, null, ), {, skipType, =, objSkipType, ., getImplicitPrototype, (, ), ;, }, else, {, break, ;, }, }, return]
[{, break, ;, }, }, return, types, ;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return]
[{, break, ;, }, }, return, types, ;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return]
[{, break, ;, }, }, return, types, ;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return]
[types, ;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return, type, ., isEnumType, (, ), ||]
[;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return, type, ., isEnumType, (, ), ||, (]
[;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return, type, ., isEnumType, (, ), ||, (]
[;, }, @, Override, public, boolean, isTypeToSkip, (, JSType, type, ), {, return, type, ., isEnumType, (, ), ||, (]
[isTypeToSkip, (, JSType, type, ), {, return, type, ., isEnumType, (, ), ||, (, type, ., autoboxesTo, (, ), !=]
[., autoboxesTo, (, ), !=, null, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return]
[., autoboxesTo, (, ), !=, null, ), ;, }, @, Override, public, JSType, restrictByNotNullOrUndefined, (, JSType, type, ), {, return]
[restrictByNotNullOrUndefined, (, ), ;, }, @, Override, public, Iterable, <, JSType, >, getTypeAlternatives, (, JSType, type, ), {, if, (]
[restrictByNotNullOrUndefined, (, ), ;, }, @, Override, public, Iterable, <, JSType, >, getTypeAlternatives, (, JSType, type, ), {, if, (]
[Iterable, <, JSType, >, getTypeAlternatives, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, return]
[Iterable, <, JSType, >, getTypeAlternatives, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, return]
[Iterable, <, JSType, >, getTypeAlternatives, (, JSType, type, ), {, if, (, type, ., isUnionType, (, ), ), {, return]
[), ), {, return, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =]
[), ), {, return, type, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =]
[), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (]
[), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (]
[), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (]
[), ., getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (]
[getAlternates, (, ), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=]
[), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&]
[), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&]
[), ;, }, else, {, ObjectType, objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&]
[objType, =, type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=]
[type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&]
[type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&]
[type, ., toObjectType, (, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&]
[!=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, List, <, JSType, >, list, =]
[!=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, List, <, JSType, >, list, =]
[), ), {, List, <, JSType, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, FunctionType, impl, :]
[), ), {, List, <, JSType, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, FunctionType, impl, :]
[<, JSType, >, list, =, Lists, ., newArrayList, (, ), ;, for, (, FunctionType, impl, :, registry, ., getDirectImplementors, (]
[=, Lists, ., newArrayList, (, ), ;, for, (, FunctionType, impl, :, registry, ., getDirectImplementors, (, objType, ), ), {]
[=, Lists, ., newArrayList, (, ), ;, for, (, FunctionType, impl, :, registry, ., getDirectImplementors, (, objType, ), ), {]
[(, ), ;, for, (, FunctionType, impl, :, registry, ., getDirectImplementors, (, objType, ), ), {, list, ., add, (]
[(, ), ;, for, (, FunctionType, impl, :, registry, ., getDirectImplementors, (, objType, ), ), {, list, ., add, (]
[., getDirectImplementors, (, objType, ), ), {, list, ., add, (, impl, ., getInstanceType, (, ), ), ;, }, return]
[{, list, ., add, (, impl, ., getInstanceType, (, ), ), ;, }, return, list, ;, }, else, {, return]
[null, ;, }, }, }, @, Override, public, ObjectType, getTypeWithProperty, (, String, field, ,, JSType, type, ), {, if, (]
[null, ;, }, }, }, @, Override, public, ObjectType, getTypeWithProperty, (, String, field, ,, JSType, type, ), {, if, (]
[}, }, }, @, Override, public, ObjectType, getTypeWithProperty, (, String, field, ,, JSType, type, ), {, if, (, type, ==]
[Override, public, ObjectType, getTypeWithProperty, (, String, field, ,, JSType, type, ), {, if, (, type, ==, null, ), {, return]
[String, field, ,, JSType, type, ), {, if, (, type, ==, null, ), {, return, null, ;, }, if, (]
[String, field, ,, JSType, type, ), {, if, (, type, ==, null, ), {, return, null, ;, }, if, (]
[(, type, ==, null, ), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return]
[==, null, ), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (]
[), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (, field, ,]
[), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (, field, ,]
[), {, return, null, ;, }, if, (, type, ., isEnumElementType, (, ), ), {, return, getTypeWithProperty, (, field, ,]
[{, return, getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, if, (]
[return, getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, if, (, !]
[getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, if, (, !, (]
[getTypeWithProperty, (, field, ,, type, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ), ;, }, if, (, !, (]
[), ., getPrimitiveType, (, ), ), ;, }, if, (, !, (, type, instanceof, ObjectType, ), ), {, if, (]
[), ., getPrimitiveType, (, ), ), ;, }, if, (, !, (, type, instanceof, ObjectType, ), ), {, if, (]
[), ., getPrimitiveType, (, ), ), ;, }, if, (, !, (, type, instanceof, ObjectType, ), ), {, if, (]
[;, }, if, (, !, (, type, instanceof, ObjectType, ), ), {, if, (, type, ., autoboxesTo, (, ), !=]
[(, !, (, type, instanceof, ObjectType, ), ), {, if, (, type, ., autoboxesTo, (, ), !=, null, ), {]
[(, type, instanceof, ObjectType, ), ), {, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, type, =]
[(, type, instanceof, ObjectType, ), ), {, if, (, type, ., autoboxesTo, (, ), !=, null, ), {, type, =]
[., autoboxesTo, (, ), !=, null, ), {, type, =, type, ., autoboxesTo, (, ), ;, }, else, {, return]
[), {, type, =, type, ., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }, if, (]
[), {, type, =, type, ., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }, if, (]
[type, ., autoboxesTo, (, ), ;, }, else, {, return, null, ;, }, }, if, (, "prototype", ., equals, (]
[;, }, else, {, return, null, ;, }, }, if, (, "prototype", ., equals, (, field, ), ), {, return]
[;, }, }, if, (, "prototype", ., equals, (, field, ), ), {, return, null, ;, }, ObjectType, foundType, =]
["prototype", ., equals, (, field, ), ), {, return, null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =]
["prototype", ., equals, (, field, ), ), {, return, null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =]
[field, ), ), {, return, null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (]
[null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[null, ;, }, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[}, ObjectType, foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=]
[foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[foundType, =, null, ;, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&]
[=, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=]
[., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&]
[., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&]
[., cast, (, type, ), ;, if, (, objType, !=, null, &&, objType, ., getConstructor, (, ), !=, null, &&]
[getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =]
[getConstructor, (, ), !=, null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =]
[null, &&, objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (]
[objType, ., getConstructor, (, ), ., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,]
[., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (]
[., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (]
[., isInterface, (, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (]
[(, ), ), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=]
[), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=, null, &&]
[), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=, null, &&]
[), {, ObjectType, topInterface, =, FunctionType, ., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=, null, &&]
[., getTopDefiningInterface, (, objType, ,, field, ), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=]
[objType, ,, field, ), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {]
[field, ), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =]
[field, ), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =]
[field, ), ;, if, (, topInterface, !=, null, &&, topInterface, ., getConstructor, (, ), !=, null, ), {, foundType, =]
[), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (]
[), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (]
[), {, foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (]
[foundType, =, topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=]
[topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=, null, &&]
[topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=, null, &&]
[topInterface, ., getConstructor, (, ), ., getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=, null, &&]
[getPrototype, (, ), ;, }, }, else, {, while, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=]
[}, else, {, while, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {, if, (]
[}, else, {, while, (, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {, if, (]
[(, objType, !=, null, &&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (]
[&&, objType, ., getImplicitPrototype, (, ), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {]
[., getImplicitPrototype, (, ), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =]
[), !=, objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }]
[objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }, objType, =]
[objType, ), {, if, (, objType, ., hasOwnProperty, (, field, ), ), {, foundType, =, objType, ;, }, objType, =]
[), ), {, foundType, =, objType, ;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (]
[), ), {, foundType, =, objType, ;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (]
[{, foundType, =, objType, ;, }, objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==]
[objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =]
[objType, =, objType, ., getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =]
[getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =, ObjectType, ., cast, (]
[getImplicitPrototype, (, ), ;, }, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =, ObjectType, ., cast, (]
[}, }, if, (, foundType, ==, null, ), {, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (]
[if, (, foundType, ==, null, ), {, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,]
[{, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (]
[{, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (]
[{, ObjectType, maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (]
[maybeType, =, ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (, maybeType, !=]
[ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (, maybeType, !=, null, &&]
[ObjectType, ., cast, (, registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (, maybeType, !=, null, &&]
[registry, ., getGreatestSubtypeWithProperty, (, type, ,, field, ), ), ;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (]
[type, ,, field, ), ), ;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {]
[field, ), ), ;, if, (, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =]
[(, maybeType, !=, null, &&, maybeType, ., hasOwnProperty, (, field, ), ), {, foundType, =, maybeType, ;, }, }, return]
[maybeType, ;, }, }, return, foundType, ;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType, type, ), {, if, (]
[maybeType, ;, }, }, return, foundType, ;, }, @, Override, public, JSType, getInstanceFromPrototype, (, JSType, type, ), {, if, (]
[public, JSType, getInstanceFromPrototype, (, JSType, type, ), {, if, (, type, ., isFunctionPrototypeType, (, ), ), {, ObjectType, prototype, =]
[(, JSType, type, ), {, if, (, type, ., isFunctionPrototypeType, (, ), ), {, ObjectType, prototype, =, (, ObjectType, )]
[if, (, type, ., isFunctionPrototypeType, (, ), ), {, ObjectType, prototype, =, (, ObjectType, ), type, ;, FunctionType, owner, =]
[if, (, type, ., isFunctionPrototypeType, (, ), ), {, ObjectType, prototype, =, (, ObjectType, ), type, ;, FunctionType, owner, =]
[{, ObjectType, prototype, =, (, ObjectType, ), type, ;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if, (]
[{, ObjectType, prototype, =, (, ObjectType, ), type, ;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if, (]
[{, ObjectType, prototype, =, (, ObjectType, ), type, ;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if, (]
[), type, ;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||]
[), type, ;, FunctionType, owner, =, prototype, ., getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||]
[getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||, owner, ., isInterface, (, ), ), {, return]
[getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||, owner, ., isInterface, (, ), ), {, return]
[getOwnerFunction, (, ), ;, if, (, owner, ., isConstructor, (, ), ||, owner, ., isInterface, (, ), ), {, return]
[., isInterface, (, ), ), {, return, prototype, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, }, return]
[recordInterfaces, (, JSType, type, ,, JSType, relatedType, ,, DisambiguateProperties, <, JSType, >, ., Property, p, ), {, ObjectType, objType, =]
[recordInterfaces, (, JSType, type, ,, JSType, relatedType, ,, DisambiguateProperties, <, JSType, >, ., Property, p, ), {, ObjectType, objType, =]
[,, JSType, relatedType, ,, DisambiguateProperties, <, JSType, >, ., Property, p, ), {, ObjectType, objType, =, ObjectType, ., cast, (]
[<, JSType, >, ., Property, p, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[<, JSType, >, ., Property, p, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (]
[>, ., Property, p, ), {, ObjectType, objType, =, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=]
[=, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, ), {, FunctionType, constructor, ;, if, (]
[=, ObjectType, ., cast, (, type, ), ;, if, (, objType, !=, null, ), {, FunctionType, constructor, ;, if, (]
[;, if, (, objType, !=, null, ), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), ), {]
[(, objType, !=, null, ), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), ), {, constructor, =]
[(, objType, !=, null, ), {, FunctionType, constructor, ;, if, (, objType, ., isFunctionType, (, ), ), {, constructor, =]
[(, objType, ., isFunctionType, (, ), ), {, constructor, =, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (]
[(, objType, ., isFunctionType, (, ), ), {, constructor, =, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (]
[{, constructor, =, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (, objType, ., isFunctionPrototypeType, (, ), ), {]
[=, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (, objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =]
[=, objType, ., toMaybeFunctionType, (, ), ;, }, else, if, (, objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =]
[if, (, objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =, objType, ., getOwnerFunction, (, ), ;, }, else, {]
[objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =, objType, ., getOwnerFunction, (, ), ;, }, else, {, constructor, =]
[objType, ., isFunctionPrototypeType, (, ), ), {, constructor, =, objType, ., getOwnerFunction, (, ), ;, }, else, {, constructor, =]
[objType, ., getOwnerFunction, (, ), ;, }, else, {, constructor, =, objType, ., getConstructor, (, ), ;, }, while, (]
[objType, ., getOwnerFunction, (, ), ;, }, else, {, constructor, =, objType, ., getConstructor, (, ), ;, }, while, (]
[getOwnerFunction, (, ), ;, }, else, {, constructor, =, objType, ., getConstructor, (, ), ;, }, while, (, constructor, !=]
[=, objType, ., getConstructor, (, ), ;, }, while, (, constructor, !=, null, ), {, for, (, ObjectType, itype, :]
[=, objType, ., getConstructor, (, ), ;, }, while, (, constructor, !=, null, ), {, for, (, ObjectType, itype, :]
[constructor, !=, null, ), {, for, (, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), ), {, JSType, top, =]
[null, ), {, for, (, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (]
[null, ), {, for, (, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (]
[(, ObjectType, itype, :, constructor, ., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (, p, ., name, ,]
[., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (]
[., getImplementedInterfaces, (, ), ), {, JSType, top, =, getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (]
[(, ), ), {, JSType, top, =, getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (, top, !=]
[{, JSType, top, =, getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (, top, !=, null, ), {]
[{, JSType, top, =, getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (, top, !=, null, ), {]
[getTypeWithProperty, (, p, ., name, ,, itype, ), ;, if, (, top, !=, null, ), {, p, ., addType, (]
[p, ., name, ,, itype, ), ;, if, (, top, !=, null, ), {, p, ., addType, (, itype, ,]
[name, ,, itype, ), ;, if, (, top, !=, null, ), {, p, ., addType, (, itype, ,, top, ,]
[(, top, !=, null, ), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {]
[!=, null, ), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (]
[), {, p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,]
[p, ., addType, (, itype, ,, top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,]
[top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,, p, ), ;, }, if, (]
[top, ,, relatedType, ), ;, }, else, {, recordInterfaces, (, itype, ,, relatedType, ,, p, ), ;, }, if, (]
[(, itype, ,, relatedType, ,, p, ), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (]
[(, itype, ,, relatedType, ,, p, ), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (]
[(, itype, ,, relatedType, ,, p, ), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (]
[), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (, constructor, ., isInterface, (, ), ||]
[), ;, }, if, (, p, ., skipRenaming, ), return, ;, }, if, (, constructor, ., isInterface, (, ), ||]
[skipRenaming, ), return, ;, }, if, (, constructor, ., isInterface, (, ), ||, constructor, ., isConstructor, (, ), ), {]
[return, ;, }, if, (, constructor, ., isInterface, (, ), ||, constructor, ., isConstructor, (, ), ), {, constructor, =]
[return, ;, }, if, (, constructor, ., isInterface, (, ), ||, constructor, ., isConstructor, (, ), ), {, constructor, =]
[), ||, constructor, ., isConstructor, (, ), ), {, constructor, =, constructor, ., getSuperClassConstructor, (, ), ;, }, else, {]
[constructor, ., isConstructor, (, ), ), {, constructor, =, constructor, ., getSuperClassConstructor, (, ), ;, }, else, {, constructor, =]
[final, TightenTypes, tt, ;, private, int, nextUniqueId, ;, private, CodingConvention, codingConvention, ;, private, final, Set, <, JSType, >, invalidatingTypes, =]
[final, TightenTypes, tt, ;, private, int, nextUniqueId, ;, private, CodingConvention, codingConvention, ;, private, final, Set, <, JSType, >, invalidatingTypes, =]
[Set, <, JSType, >, invalidatingTypes, =, Sets, ., newHashSet, (, ), ;, private, static, final, JSTypeNative, [, ], nativeTypes, =]
[invalidatingTypes, =, Sets, ., newHashSet, (, ), ;, private, static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ]]
[=, Sets, ., newHashSet, (, ), ;, private, static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {]
[=, Sets, ., newHashSet, (, ), ;, private, static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {]
[(, ), ;, private, static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {, JSTypeNative, ., BOOLEAN_OBJECT_TYPE, ,]
[(, ), ;, private, static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {, JSTypeNative, ., BOOLEAN_OBJECT_TYPE, ,]
[static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {, JSTypeNative, ., BOOLEAN_OBJECT_TYPE, ,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,]
[static, final, JSTypeNative, [, ], nativeTypes, =, new, JSTypeNative, [, ], {, JSTypeNative, ., BOOLEAN_OBJECT_TYPE, ,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,]
[,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,, JSTypeNative, ., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {]
[,, JSTypeNative, ., NUMBER_OBJECT_TYPE, ,, JSTypeNative, ., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {]
[,, JSTypeNative, ., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =]
[., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =, tt, ;]
[., STRING_OBJECT_TYPE, }, ;, public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =, tt, ;]
[public, ConcreteTypeSystem, (, TightenTypes, tt, ,, CodingConvention, convention, ), {, this, ., tt, =, tt, ;, this, ., codingConvention, =]
[=, tt, ;, this, ., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {]
[;, this, ., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (]
[this, ., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !]
[this, ., codingConvention, =, convention, ;, }, @, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !]
[@, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, ), ), ;]
[@, Override, public, void, addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, ), ), ;]
[addInvalidatingType, (, JSType, type, ), {, checkState, (, !, type, ., isUnionType, (, ), ), ;, invalidatingTypes, ., add, (]
[invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, ), {, return]
[invalidatingTypes, ., add, (, type, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getRootScope, (, ), {, return]
[(, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =]
[(, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =]
[@, Override, public, StaticScope, <, ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (]
[<, ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (, decl, ), ;, return]
[<, ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (, decl, ), ;, return]
[ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (, decl, ), ;, return, (]
[ConcreteType, >, getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (, decl, ), ;, return, (]
[getFunctionScope, (, Node, decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (, decl, ), ;, return, (, func, !=]
[decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (, decl, ), ;, return, (, func, !=, null, ), ?]
[decl, ), {, ConcreteFunctionType, func, =, tt, ., getConcreteFunction, (, decl, ), ;, return, (, func, !=, null, ), ?]
[tt, ., getConcreteFunction, (, decl, ), ;, return, (, func, !=, null, ), ?, func, ., getScope, (, ), :]
[;, return, (, func, !=, null, ), ?, func, ., getScope, (, ), :, (, StaticScope, <, ConcreteType, >, )]
[Override, public, ConcreteType, getType, (, StaticScope, <, ConcreteType, >, scope, ,, Node, node, ,, String, prop, ), {, if, (]
[Override, public, ConcreteType, getType, (, StaticScope, <, ConcreteType, >, scope, ,, Node, node, ,, String, prop, ), {, if, (]
[ConcreteType, getType, (, StaticScope, <, ConcreteType, >, scope, ,, Node, node, ,, String, prop, ), {, if, (, scope, !=]
[>, scope, ,, Node, node, ,, String, prop, ), {, if, (, scope, !=, null, ), {, ConcreteType, c, =]
[>, scope, ,, Node, node, ,, String, prop, ), {, if, (, scope, !=, null, ), {, ConcreteType, c, =]
[node, ,, String, prop, ), {, if, (, scope, !=, null, ), {, ConcreteType, c, =, tt, ., inferConcreteType, (]
[{, if, (, scope, !=, null, ), {, ConcreteType, c, =, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, )]
[(, scope, !=, null, ), {, ConcreteType, c, =, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,]
[), {, ConcreteType, c, =, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, ), ;, return]
[ConcreteType, c, =, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, ), ;, return, maybeAddAutoboxes, (]
[=, tt, ., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, ), ;, return, maybeAddAutoboxes, (, c, ,]
[., inferConcreteType, (, (, TightenTypes, ., ConcreteScope, ), scope, ,, node, ), ;, return, maybeAddAutoboxes, (, c, ,, node, ,]
[), scope, ,, node, ), ;, return, maybeAddAutoboxes, (, c, ,, node, ,, prop, ), ;, }, else, {, return]
[;, }, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, Node, node, ,, String, prop, ), {, JSType, jsType, =]
[;, }, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, Node, node, ,, String, prop, ), {, JSType, jsType, =]
[cType, ,, Node, node, ,, String, prop, ), {, JSType, jsType, =, node, ., getJSType, (, ), ;, if, (]
[cType, ,, Node, node, ,, String, prop, ), {, JSType, jsType, =, node, ., getJSType, (, ), ;, if, (]
[Node, node, ,, String, prop, ), {, JSType, jsType, =, node, ., getJSType, (, ), ;, if, (, jsType, ==]
[prop, ), {, JSType, jsType, =, node, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return]
[node, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, cType, ;, }, else, if, (]
[node, ., getJSType, (, ), ;, if, (, jsType, ==, null, ), {, return, cType, ;, }, else, if, (]
[{, return, cType, ;, }, else, if, (, jsType, ., isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :]
[if, (, jsType, ., isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =]
[if, (, jsType, ., isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =]
[isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =, tt, ., getConcreteInstance, (]
[isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =, tt, ., getConcreteInstance, (]
[isUnknownType, (, ), ), {, for, (, JSTypeNative, nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =, tt, ., getConcreteInstance, (]
[nativeType, :, nativeTypes, ), {, ConcreteType, concrete, =, tt, ., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (]
[concrete, =, tt, ., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (]
[concrete, =, tt, ., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (]
[concrete, =, tt, ., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (]
[tt, ., getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=]
[getConcreteInstance, (, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null, &&]
[(, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null, &&, !]
[(, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null, &&, !]
[(, tt, ., getTypeRegistry, (, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null, &&, !]
[(, ), ., getNativeObjectType, (, nativeType, ), ), ;, if, (, concrete, !=, null, &&, !, concrete, ., getPropertyType, (]
[;, if, (, concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {]
[(, concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {, cType, =]
[(, concrete, !=, null, &&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {, cType, =]
[&&, !, concrete, ., getPropertyType, (, prop, ), ., isNone, (, ), ), {, cType, =, cType, ., unionWith, (]
[prop, ), ., isNone, (, ), ), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return]
[(, ), ), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return]
[), {, cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (]
[cType, =, cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (, cType, ,]
[cType, ., unionWith, (, concrete, ), ;, }, }, return, cType, ;, }, return, maybeAddAutoboxes, (, cType, ,, jsType, ,]
[jsType, ,, prop, ), ;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {]
[prop, ), ;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {, jsType, =]
[prop, ), ;, }, private, ConcreteType, maybeAddAutoboxes, (, ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {, jsType, =]
[ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {, jsType, =, jsType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[ConcreteType, cType, ,, JSType, jsType, ,, String, prop, ), {, jsType, =, jsType, ., restrictByNotNullOrUndefined, (, ), ;, if, (]
[jsType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[jsType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[jsType, ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :]
[(, ), ), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {]
[), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, cType, =]
[for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, cType, =, maybeAddAutoboxes, (]
[JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, cType, =, maybeAddAutoboxes, (, cType, ,]
[:, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, cType, =, maybeAddAutoboxes, (, cType, ,, alt, ,]
[), ., getAlternates, (, ), ), {, cType, =, maybeAddAutoboxes, (, cType, ,, alt, ,, prop, ), ;, }, return]
[{, cType, =, maybeAddAutoboxes, (, cType, ,, alt, ,, prop, ), ;, }, return, cType, ;, }, else, if, (]
[{, cType, =, maybeAddAutoboxes, (, cType, ,, alt, ,, prop, ), ;, }, return, cType, ;, }, else, if, (]
[,, prop, ), ;, }, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return]
[), ;, }, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (]
[}, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (, cType, ,]
[}, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (, cType, ,]
[}, return, cType, ;, }, else, if, (, jsType, ., isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (, cType, ,]
[isEnumElementType, (, ), ), {, return, maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,]
[maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, ), ;, }, if, (]
[maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, ), ;, }, if, (]
[maybeAddAutoboxes, (, cType, ,, jsType, ., toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, ), ;, }, if, (]
[toMaybeEnumElementType, (, ), ., getPrimitiveType, (, ), ,, prop, ), ;, }, if, (, jsType, ., autoboxesTo, (, ), !=]
[), ,, prop, ), ;, }, if, (, jsType, ., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =]
[), ,, prop, ), ;, }, if, (, jsType, ., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =]
[(, jsType, ., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return]
[(, jsType, ., autoboxesTo, (, ), !=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return]
[(, ), !=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, ., unionWith, (]
[(, ), !=, null, ), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, ., unionWith, (]
[), {, JSType, autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (]
[autoboxed, =, jsType, ., autoboxesTo, (, ), ;, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, )]
[return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), ), ;, }, else, if, (]
[return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), ), ;, }, else, if, (]
[return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), ), ;, }, else, if, (]
[., getConcreteInstance, (, (, ObjectType, ), autoboxed, ), ), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=]
[ObjectType, ), autoboxed, ), ), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return]
[ObjectType, ), autoboxed, ), ), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return]
[), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith, (]
[), ;, }, else, if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith, (]
[if, (, jsType, ., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (]
[., unboxesTo, (, ), !=, null, ), {, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, )]
[), {, return, cType, ., unionWith, (, tt, ., getConcreteInstance, (, (, ObjectType, ), jsType, ), ), ;, }, return]
[jsType, ), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return]
[jsType, ), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return]
[jsType, ), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return]
[jsType, ), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return]
[), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (]
[), ), ;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (]
[;, }, return, cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type, ==]
[cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type, ==, null, ), ||]
[cType, ;, }, @, Override, public, boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type, ==, null, ), ||]
[boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type, ==, null, ), ||, type, ., isAll, (, ), ||]
[boolean, isInvalidatingType, (, ConcreteType, type, ), {, return, (, type, ==, null, ), ||, type, ., isAll, (, ), ||]
[{, return, (, type, ==, null, ), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||]
[return, (, type, ==, null, ), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (]
[return, (, type, ==, null, ), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (]
[return, (, type, ==, null, ), ||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (]
[||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&]
[||, type, ., isAll, (, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&]
[(, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (]
[(, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (]
[(, ), ||, type, ., isFunction, (, ), ||, (, type, ., isInstance, (, ), &&, invalidatingTypes, ., contains, (]
[., instanceType, ), ), ;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return]
[., instanceType, ), ), ;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return]
[;, }, @, Override, public, ImmutableSet, <, ConcreteType, >, getTypesToSkipForType, (, ConcreteType, type, ), {, return, ImmutableSet, ., of, (]
[return, ImmutableSet, ., of, (, type, ), ;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return]
[return, ImmutableSet, ., of, (, type, ), ;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return]
[return, ImmutableSet, ., of, (, type, ), ;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return]
[), ;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&]
[;, }, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&, !]
[}, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&, !, (]
[}, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&, !, (]
[}, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&, !, (]
[}, @, Override, public, boolean, isTypeToSkip, (, ConcreteType, type, ), {, return, type, ., isInstance, (, ), &&, !, (]
[{, return, type, ., isInstance, (, ), &&, !, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||]
[{, return, type, ., isInstance, (, ), &&, !, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||]
[{, return, type, ., isInstance, (, ), &&, !, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||]
[{, return, type, ., isInstance, (, ), &&, !, (, type, ., toInstance, (, ), ., isFunctionPrototype, (, ), ||]
[., instanceType, ., isInstanceType, (, ), ), ;, }, @, Override, public, ConcreteType, restrictByNotNullOrUndefined, (, ConcreteType, type, ), {, return]
[{, return, type, ;, }, @, Override, public, Iterable, <, ConcreteType, >, getTypeAlternatives, (, ConcreteType, type, ), {, if, (]
[{, return, type, ;, }, @, Override, public, Iterable, <, ConcreteType, >, getTypeAlternatives, (, ConcreteType, type, ), {, if, (]
[Iterable, <, ConcreteType, >, getTypeAlternatives, (, ConcreteType, type, ), {, if, (, type, ., isUnion, (, ), ), {, return]
[Iterable, <, ConcreteType, >, getTypeAlternatives, (, ConcreteType, type, ), {, if, (, type, ., isUnion, (, ), ), {, return]
[<, ConcreteType, >, getTypeAlternatives, (, ConcreteType, type, ), {, if, (, type, ., isUnion, (, ), ), {, return, (]
[getTypeAlternatives, (, ConcreteType, type, ), {, if, (, type, ., isUnion, (, ), ), {, return, (, (, ConcreteUnionType, )]
[(, ), ), {, return, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, ), ;, }, else, {, return]
[return, null, ;, }, }, @, Override, public, ConcreteType, getTypeWithProperty, (, String, field, ,, ConcreteType, type, ), {, if, (]
[return, null, ;, }, }, @, Override, public, ConcreteType, getTypeWithProperty, (, String, field, ,, ConcreteType, type, ), {, if, (]
[(, String, field, ,, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =]
[,, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, )]
[), {, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, return]
[), {, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, return]
[type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, return, instanceType, ., getInstanceTypeWithProperty, (]
[ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, return, instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (]
[ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, return, instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (]
[instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (, type, ., isFunction, (, ), ), {, if, (]
[instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (, type, ., isFunction, (, ), ), {, if, (]
[instanceType, ., getInstanceTypeWithProperty, (, field, ), ;, }, else, if, (, type, ., isFunction, (, ), ), {, if, (]
[field, ), ;, }, else, if, (, type, ., isFunction, (, ), ), {, if, (, "prototype", ., equals, (]
[}, else, if, (, type, ., isFunction, (, ), ), {, if, (, "prototype", ., equals, (, field, ), ||]
[}, else, if, (, type, ., isFunction, (, ), ), {, if, (, "prototype", ., equals, (, field, ), ||]
[type, ., isFunction, (, ), ), {, if, (, "prototype", ., equals, (, field, ), ||, codingConvention, ., isSuperClassReference, (]
[), {, if, (, "prototype", ., equals, (, field, ), ||, codingConvention, ., isSuperClassReference, (, field, ), ), {, return]
[(, field, ), ||, codingConvention, ., isSuperClassReference, (, field, ), ), {, return, type, ;, }, }, else, if, (]
[(, field, ), ||, codingConvention, ., isSuperClassReference, (, field, ), ), {, return, type, ;, }, }, else, if, (]
[field, ), ), {, return, type, ;, }, }, else, if, (, type, ., isNone, (, ), ), {, return]
[{, return, type, ;, }, }, else, if, (, type, ., isNone, (, ), ), {, return, new, ConcreteUniqueType, (]
[return, type, ;, }, }, else, if, (, type, ., isNone, (, ), ), {, return, new, ConcreteUniqueType, (, ++]
[(, type, ., isNone, (, ), ), {, return, new, ConcreteUniqueType, (, ++, nextUniqueId, ), ;, }, else, if, (]
[(, type, ., isNone, (, ), ), {, return, new, ConcreteUniqueType, (, ++, nextUniqueId, ), ;, }, else, if, (]
[++, nextUniqueId, ), ;, }, else, if, (, type, ., isUnion, (, ), ), {, for, (, ConcreteType, t, :]
[++, nextUniqueId, ), ;, }, else, if, (, type, ., isUnion, (, ), ), {, for, (, ConcreteType, t, :]
[nextUniqueId, ), ;, }, else, if, (, type, ., isUnion, (, ), ), {, for, (, ConcreteType, t, :, (]
[}, else, if, (, type, ., isUnion, (, ), ), {, for, (, ConcreteType, t, :, (, (, ConcreteUnionType, )]
[for, (, ConcreteType, t, :, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, ), ), {, ConcreteType, ret, =]
[ConcreteType, t, :, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (]
[:, (, (, ConcreteUnionType, ), type, ), ., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,]
[type, ), ., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (]
[type, ), ., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (]
[., getAlternatives, (, ), ), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (, ret, !=]
[), {, ConcreteType, ret, =, getTypeWithProperty, (, field, ,, t, ), ;, if, (, ret, !=, null, ), {, return]
[(, field, ,, t, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, }, }, return]
[;, }, }, }, return, null, ;, }, @, Override, public, ConcreteType, getInstanceFromPrototype, (, ConcreteType, type, ), {, if, (]
[;, }, }, }, return, null, ;, }, @, Override, public, ConcreteType, getInstanceFromPrototype, (, ConcreteType, type, ), {, if, (]
[public, ConcreteType, getInstanceFromPrototype, (, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =]
[(, ConcreteType, type, ), {, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, )]
[{, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, if, (]
[{, if, (, type, ., isInstance, (, ), ), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, if, (]
[), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, if, (, instanceType, ., isFunctionPrototype, (, ), ), {, return]
[), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, if, (, instanceType, ., isFunctionPrototype, (, ), ), {, return]
[), {, ConcreteInstanceType, instanceType, =, (, ConcreteInstanceType, ), type, ;, if, (, instanceType, ., isFunctionPrototype, (, ), ), {, return]
[., isFunctionPrototype, (, ), ), {, return, instanceType, ., getConstructorType, (, ), ., getInstanceType, (, ), ;, }, }, return]
