[), {, case, ArrayExpr, :, case, AssignExpr, :, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :]
[., getType, (, ), ), {, case, ArrayExpr, :, case, AssignExpr, :, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr]
[:, case, AssignExpr, :, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case]
[:, case, BinaryExpr, :, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case]
[:, case, CallExpr, :, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case]
[:, case, ConditionalExpr, :, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case]
[:, case, CountExpr, :, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case]
[:, case, DeleteExpr, :, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case]
[:, case, EvalExpr, :, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case]
[:, case, FunctionExpr, :, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case]
[:, case, IdExpr, :, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case]
[:, case, InvokeExpr, :, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case]
[:, case, LiteralExpr, :, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case]
[:, case, LogicalAndExpr, :, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case]
[:, case, LogicalOrExpr, :, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case]
[:, case, MemberExpr, :, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case, TypeofExpr, :, case]
[:, case, NewExpr, :, case, ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case, TypeofExpr, :, case, UnaryExpr, :, return]
[:, case, ObjectExpr, :, case, RegExpExpr, :, case, ThisExpr, :, case, TypeofExpr, :, case, UnaryExpr, :, return, true, ;, default]
[:, case, RegExpExpr, :, case, ThisExpr, :, case, TypeofExpr, :, case, UnaryExpr, :, return, true, ;, default, :, return, false]
[:, case, ThisExpr, :, case, TypeofExpr, :, case, UnaryExpr, :, return, true, ;, default, :, return, false, ;, }, }]
[:, case, TypeofExpr, :, case, UnaryExpr, :, return, true, ;, default, :, return, false, ;, }, }, public, static, JsonML]
[:, case, UnaryExpr, :, return, true, ;, default, :, return, false, ;, }, }, public, static, JsonML, parseString, (, String]
[:, return, true, ;, default, :, return, false, ;, }, }, public, static, JsonML, parseString, (, String, jsonml, ), throws]
[;, default, :, return, false, ;, }, }, public, static, JsonML, parseString, (, String, jsonml, ), throws, Exception, {, return]
[;, }, }, public, static, JsonML, parseString, (, String, jsonml, ), throws, Exception, {, return, parseElement, (, new, JSONArray, (]
[;, }, private, static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML, (, TagType]
[), ;, }, private, static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML, (]
[), ), ;, }, private, static, JsonML, parseElement, (, JSONArray, element, ), throws, Exception, {, JsonML, jsonMLElement, =, new, JsonML]
[;, JSONObject, attrs, =, element, ., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =, attrs, ., keys]
[), ;, JSONObject, attrs, =, element, ., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =, attrs, .]
[., valueOf, (, element, ., getString, (, 0, ), ), ), ;, JSONObject, attrs, =, element, ., getJSONObject, (, 1]
[), ), ;, JSONObject, attrs, =, element, ., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =, attrs]
[., getString, (, 0, ), ), ), ;, JSONObject, attrs, =, element, ., getJSONObject, (, 1, ), ;, Iterator, <]
[), ), ), ;, JSONObject, attrs, =, element, ., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =]
[;, Iterator, <, ?, >, it, =, attrs, ., keys, (, ), ;, while, (, it, ., hasNext, (, )]
[., getJSONObject, (, 1, ), ;, Iterator, <, ?, >, it, =, attrs, ., keys, (, ), ;, while, (]
[), ;, Iterator, <, ?, >, it, =, attrs, ., keys, (, ), ;, while, (, it, ., hasNext, (]
[;, while, (, it, ., hasNext, (, ), ), {, String, key, =, (, String, ), it, ., next, (]
[., keys, (, ), ;, while, (, it, ., hasNext, (, ), ), {, String, key, =, (, String, )]
[), {, String, key, =, (, String, ), it, ., next, (, ), ;, Object, value, =, attrs, ., get]
[., hasNext, (, ), ), {, String, key, =, (, String, ), it, ., next, (, ), ;, Object, value]
[;, Object, value, =, attrs, ., get, (, key, ), ;, TagAttr, tag, =, TagAttr, ., get, (, key, )]
[;, Object, value, =, attrs, ., get, (, key, ), ;, TagAttr, tag, =, TagAttr, ., get, (, key, )]
[., next, (, ), ;, Object, value, =, attrs, ., get, (, key, ), ;, TagAttr, tag, =, TagAttr, .]
[;, TagAttr, tag, =, TagAttr, ., get, (, key, ), ;, if, (, tag, ==, null, ), {, continue, ;]
[., get, (, key, ), ;, TagAttr, tag, =, TagAttr, ., get, (, key, ), ;, if, (, tag, ==]
[), ;, TagAttr, tag, =, TagAttr, ., get, (, key, ), ;, if, (, tag, ==, null, ), {, continue]
[;, if, (, tag, ==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =]
[., get, (, key, ), ;, if, (, tag, ==, null, ), {, continue, ;, }, if, (, value, instanceof]
[), ;, if, (, tag, ==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value]
[), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =, (, (, Number, ), value, )]
[==, null, ), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =, (, (, Number, )]
[), {, continue, ;, }, if, (, value, instanceof, Number, ), {, value, =, (, (, Number, ), value, )]
[), {, value, =, (, (, Number, ), value, ), ., doubleValue, (, ), ;, }, switch, (, tag, )]
[instanceof, Number, ), {, value, =, (, (, Number, ), value, ), ., doubleValue, (, ), ;, }, switch, (]
[=, (, (, Number, ), value, ), ., doubleValue, (, ), ;, }, switch, (, tag, ), {, case, NAME]
[;, }, switch, (, tag, ), {, case, NAME, :, case, BODY, :, case, FLAGS, :, case, OP, :, case]
[., doubleValue, (, ), ;, }, switch, (, tag, ), {, case, NAME, :, case, BODY, :, case, FLAGS, :]
[), ., doubleValue, (, ), ;, }, switch, (, tag, ), {, case, NAME, :, case, BODY, :, case, FLAGS]
[), ., doubleValue, (, ), ;, }, switch, (, tag, ), {, case, NAME, :, case, BODY, :, case, FLAGS]
[), {, case, NAME, :, case, BODY, :, case, FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :]
[:, case, BODY, :, case, FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement]
[:, case, FLAGS, :, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement, ., setAttribute, (]
[:, case, OP, :, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value]
[:, case, TYPE, :, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break]
[:, case, IS_PREFIX, :, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE]
[:, case, LABEL, :, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (]
[:, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (, value, !=, null]
[;, break, ;, case, VALUE, :, if, (, value, !=, null, &&, value, ., equals, (, null, ), ), {]
[., setAttribute, (, tag, ,, value, ), ;, break, ;, case, VALUE, :, if, (, value, !=, null, &&, value]
[,, value, ), ;, break, ;, case, VALUE, :, if, (, value, !=, null, &&, value, ., equals, (, null]
[), ;, break, ;, case, VALUE, :, if, (, value, !=, null, &&, value, ., equals, (, null, ), )]
[:, if, (, value, !=, null, &&, value, ., equals, (, null, ), ), {, value, =, null, ;, }]
[), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,]
[&&, value, ., equals, (, null, ), ), {, value, =, null, ;, }, if, (, value, instanceof, Number, )]
[!=, null, &&, value, ., equals, (, null, ), ), {, value, =, null, ;, }, if, (, value, instanceof]
[&&, value, ., equals, (, null, ), ), {, value, =, null, ;, }, if, (, value, instanceof, Number, )]
[), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,]
[., equals, (, null, ), ), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement]
[), ), {, value, =, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag]
[=, null, ;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,, (, (, Number]
[;, }, if, (, value, instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,, (, (, Number, ), value]
[), {, jsonMLElement, ., setAttribute, (, tag, ,, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;]
[instanceof, Number, ), {, jsonMLElement, ., setAttribute, (, tag, ,, (, (, Number, ), value, ), ., doubleValue, (, )]
[;, }, else, {, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, }, break, ;, default, :, }, }]
[., setAttribute, (, tag, ,, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, else, {]
[,, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, else, {, jsonMLElement, ., setAttribute, (]
[), ;, }, else, {, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, }, break, ;, default, :, }]
[., doubleValue, (, ), ), ;, }, else, {, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, }, break]
[), ., doubleValue, (, ), ), ;, }, else, {, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, }]
[), ., doubleValue, (, ), ), ;, }, else, {, jsonMLElement, ., setAttribute, (, tag, ,, value, ), ;, }]
[;, }, break, ;, default, :, }, }, for, (, int, i, =, 2, ;, i, <, element, ., length]
[., setAttribute, (, tag, ,, value, ), ;, }, break, ;, default, :, }, }, for, (, int, i, =]
[,, value, ), ;, }, break, ;, default, :, }, }, for, (, int, i, =, 2, ;, i, <]
[), ;, }, break, ;, default, :, }, }, for, (, int, i, =, 2, ;, i, <, element, .]
[;, i, <, element, ., length, (, ), ;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (, element]
[;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (, i, ), ), ), ;]
[<, element, ., length, (, ), ;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray]
[;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (, i, ), ), ), ;]
[., length, (, ), ;, ++, i, ), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (, i]
[), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (, i, ), ), ), ;, }, return, jsonMLElement]
[), {, jsonMLElement, ., appendChild, (, parseElement, (, element, ., getJSONArray, (, i, ), ), ), ;, }, return, jsonMLElement]
[;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (]
[., appendChild, (, parseElement, (, element, ., getJSONArray, (, i, ), ), ), ;, }, return, jsonMLElement, ;, }, public]
[), ;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return]
[), ), ;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {]
[., getJSONArray, (, i, ), ), ), ;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1]
[), ), ), ;, }, return, jsonMLElement, ;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, )]
[;, }, public, static, String, compare, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (, new, JsonMLComparator, (, tree1]
[;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (, new, JsonMLComparator, (, tree1, ,]
[., compare, (, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (, new]
[), ., compare, (, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return, (]
[,, tree2, ), ), ., compare, (, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, )]
[), ), ., compare, (, ), ;, }, static, boolean, compareSilent, (, JsonML, tree1, ,, JsonML, tree2, ), {, return]
[;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {, TagAttr, ., BODY, ,]
[., compareSilent, (, ), ;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =, {]
[), ., compareSilent, (, ), ;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE, =]
[,, tree2, ), ), ., compareSilent, (, ), ;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, []
[), ), ., compareSilent, (, ), ;, }, private, static, class, JsonMLComparator, {, private, static, final, TagAttr, [, ], ATTRS_TO_COMPARE]
[;, private, JsonML, treeA, ;, private, JsonML, treeB, ;, private, JsonML, mismatchA, ;, private, JsonML, mismatchB, ;, JsonMLComparator, (, JsonML]
[,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP]
[., BODY, ,, TagAttr, ., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr]
[,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE]
[., FLAGS, ,, TagAttr, ., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr]
[,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE]
[., IS_PREFIX, ,, TagAttr, ., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,, TagAttr]
[,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE, }, ;, private, JsonML]
[., LABEL, ,, TagAttr, ., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE, }, ;]
[,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE, }, ;, private, JsonML, treeA, ;, private, JsonML]
[., NAME, ,, TagAttr, ., OP, ,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE, }, ;, private, JsonML, treeA, ;]
[,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE, }, ;, private, JsonML, treeA, ;, private, JsonML, treeB, ;, private, JsonML]
[., OP, ,, TagAttr, ., TYPE, ,, TagAttr, ., VALUE, }, ;, private, JsonML, treeA, ;, private, JsonML, treeB, ;]
[,, TagAttr, ., VALUE, }, ;, private, JsonML, treeA, ;, private, JsonML, treeB, ;, private, JsonML, mismatchA, ;, private, JsonML]
[., TYPE, ,, TagAttr, ., VALUE, }, ;, private, JsonML, treeA, ;, private, JsonML, treeB, ;, private, JsonML, mismatchA, ;]
[}, ;, private, JsonML, treeA, ;, private, JsonML, treeB, ;, private, JsonML, mismatchA, ;, private, JsonML, mismatchB, ;, JsonMLComparator, (]
[., VALUE, }, ;, private, JsonML, treeA, ;, private, JsonML, treeB, ;, private, JsonML, mismatchA, ;, private, JsonML, mismatchB, ;]
[=, treeA, ;, this, ., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA]
[., treeA, =, treeA, ;, this, ., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), )]
[;, this, ., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA, =, null]
[=, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA, =, null, ;, mismatchB, =, null]
[., treeB, =, treeB, ;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA, =, null, ;, mismatchB]
[;, if, (, compareElements, (, treeA, ,, treeB, ), ), {, mismatchA, =, null, ;, mismatchB, =, null, ;, }]
[), {, mismatchA, =, null, ;, mismatchB, =, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML]
[,, treeB, ), ), {, mismatchA, =, null, ;, mismatchB, =, null, ;, }, }, private, boolean, setMismatch, (, JsonML]
[), ), {, mismatchA, =, null, ;, mismatchB, =, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,]
[=, null, ;, mismatchB, =, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {]
[;, mismatchB, =, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {, mismatchA, =]
[=, null, ;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {, mismatchA, =, a, ;]
[;, }, }, private, boolean, setMismatch, (, JsonML, a, ,, JsonML, b, ), {, mismatchA, =, a, ;, mismatchB, =]
[=, a, ;, mismatchB, =, b, ;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b]
[;, mismatchB, =, b, ;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {]
[=, b, ;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[;, return, false, ;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ==]
[;, }, private, boolean, compareElements, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ==, null, ||, b]
[), {, if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;, }, else, {, return]
[||, b, ==, null, ), {, if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;]
[==, null, ||, b, ==, null, ), {, if, (, a, ==, null, &&, b, ==, null, ), {, return]
[||, b, ==, null, ), {, if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;]
[), {, if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;, }, else, {, return]
[==, null, ), {, if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;, }, else]
[), {, if, (, a, ==, null, &&, b, ==, null, ), {, return, true, ;, }, else, {, return]
[), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (]
[&&, b, ==, null, ), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;]
[==, null, &&, b, ==, null, ), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b]
[&&, b, ==, null, ), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;]
[), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (]
[==, null, ), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }]
[), {, return, true, ;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (]
[;, }, else, {, return, setMismatch, (, a, ,, b, ), ;, }, }, if, (, !, areEquivalent, (, a]
[;, }, }, if, (, !, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (, a, ,, b]
[,, b, ), ;, }, }, if, (, !, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (]
[), ;, }, }, if, (, !, areEquivalent, (, a, ,, b, ), ), {, return, setMismatch, (, a, ,]
[), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (, a, ., childrenSize, (, ), !=, b]
[), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (, a, ., childrenSize, (, ), !=, b]
[,, b, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (, a, ., childrenSize, (]
[), ), {, return, setMismatch, (, a, ,, b, ), ;, }, if, (, a, ., childrenSize, (, ), !=]
[;, }, if, (, a, ., childrenSize, (, ), !=, b, ., childrenSize, (, ), ), {, return, setMismatch, (]
[,, b, ), ;, }, if, (, a, ., childrenSize, (, ), !=, b, ., childrenSize, (, ), ), {]
[), ;, }, if, (, a, ., childrenSize, (, ), !=, b, ., childrenSize, (, ), ), {, return, setMismatch]
[), {, return, setMismatch, (, a, ,, b, ), ;, }, Iterator, <, JsonML, >, itA, =, a, ., getChildren]
[!=, b, ., childrenSize, (, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, Iterator, <, JsonML]
[., childrenSize, (, ), !=, b, ., childrenSize, (, ), ), {, return, setMismatch, (, a, ,, b, ), ;]
[), {, return, setMismatch, (, a, ,, b, ), ;, }, Iterator, <, JsonML, >, itA, =, a, ., getChildren]
[., childrenSize, (, ), ), {, return, setMismatch, (, a, ,, b, ), ;, }, Iterator, <, JsonML, >, itA]
[;, }, Iterator, <, JsonML, >, itA, =, a, ., getChildren, (, ), ., listIterator, (, ), ;, Iterator, <]
[,, b, ), ;, }, Iterator, <, JsonML, >, itA, =, a, ., getChildren, (, ), ., listIterator, (, )]
[), ;, }, Iterator, <, JsonML, >, itA, =, a, ., getChildren, (, ), ., listIterator, (, ), ;, Iterator]
[;, Iterator, <, JsonML, >, itB, =, b, ., getChildren, (, ), ., listIterator, (, ), ;, while, (, itA]
[., listIterator, (, ), ;, Iterator, <, JsonML, >, itB, =, b, ., getChildren, (, ), ., listIterator, (, )]
[., getChildren, (, ), ., listIterator, (, ), ;, Iterator, <, JsonML, >, itB, =, b, ., getChildren, (, )]
[;, while, (, itA, ., hasNext, (, ), ), {, if, (, !, compareElements, (, itA, ., next, (, )]
[., listIterator, (, ), ;, while, (, itA, ., hasNext, (, ), ), {, if, (, !, compareElements, (, itA]
[., getChildren, (, ), ., listIterator, (, ), ;, while, (, itA, ., hasNext, (, ), ), {, if, (]
[), {, if, (, !, compareElements, (, itA, ., next, (, ), ,, itB, ., next, (, ), ), )]
[., hasNext, (, ), ), {, if, (, !, compareElements, (, itA, ., next, (, ), ,, itB, ., next]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b]
[,, itB, ., next, (, ), ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean]
[., next, (, ), ,, itB, ., next, (, ), ), ), {, return, false, ;, }, }, return, true]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML]
[., next, (, ), ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, areEquivalent, (]
[;, }, }, return, true, ;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b, ), {, if, (]
[;, }, private, boolean, areEquivalent, (, JsonML, a, ,, JsonML, b, ), {, if, (, a, ., getType, (, )]
[), {, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !, compareAttribute, (, attr]
[!=, b, ., getType, (, ), ), {, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {]
[., getType, (, ), !=, b, ., getType, (, ), ), {, return, false, ;, }, for, (, TagAttr, attr]
[), {, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !, compareAttribute, (, attr]
[., getType, (, ), ), {, return, false, ;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (]
[;, }, for, (, TagAttr, attr, :, ATTRS_TO_COMPARE, ), {, if, (, !, compareAttribute, (, attr, ,, a, ,, b]
[), {, if, (, !, compareAttribute, (, attr, ,, a, ,, b, ), ), {, return, false, ;, }, }]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML, a]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML, a]
[,, a, ,, b, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareAttribute, (]
[,, b, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML]
[;, }, }, return, true, ;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML, a, ,, JsonML, b, )]
[;, }, private, boolean, compareAttribute, (, TagAttr, attr, ,, JsonML, a, ,, JsonML, b, ), {, Object, valueA, =, a]
[;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (, valueA, ==, null]
[., get, (, attr, ), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;]
[., getAttributes, (, ), ., get, (, attr, ), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get]
[), ;, Object, valueB, =, b, ., getAttributes, (, ), ., get, (, attr, ), ;, if, (, valueA, ==]
[;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==]
[., get, (, attr, ), ;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;]
[., getAttributes, (, ), ., get, (, attr, ), ;, if, (, valueA, ==, null, &&, valueB, ==, null, )]
[), ;, if, (, valueA, ==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA]
[), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;]
[&&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, )]
[==, null, &&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==]
[&&, valueB, ==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, )]
[), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;]
[==, null, ), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return]
[), {, return, true, ;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;]
[;, }, if, (, valueA, ==, null, ||, valueB, ==, null, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (, valueB, ), ), ), {, Double]
[||, valueB, ==, null, ), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (, valueB, )]
[==, null, ||, valueB, ==, null, ), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (]
[||, valueB, ==, null, ), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (, valueB, )]
[), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (, valueB, ), ), ), {, Double]
[==, null, ), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (, valueB, ), ), )]
[), {, return, false, ;, }, if, (, !, (, valueA, ., equals, (, valueB, ), ), ), {, Double]
[;, }, if, (, !, (, valueA, ., equals, (, valueB, ), ), ), {, Double, doubleA, =, null, ,]
[), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA, =]
[), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA, =]
[), ), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA]
[., equals, (, valueB, ), ), ), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA]
[), ), ), {, Double, doubleA, =, null, ,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {]
[,, doubleB, =, null, ;, if, (, valueA, instanceof, Number, ), {, doubleA, =, (, (, Number, ), valueA, )]
[;, if, (, valueA, instanceof, Number, ), {, doubleA, =, (, (, Number, ), valueA, ), ., doubleValue, (, )]
[), {, doubleA, =, (, (, Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if, (, valueA]
[instanceof, Number, ), {, doubleA, =, (, (, Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if]
[=, (, (, Number, ), valueA, ), ., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, )]
[;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =, Double, ., valueOf, (, (, String, ), valueA]
[., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =, Double, ., valueOf, (]
[), ., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =, Double, ., valueOf]
[), ., doubleValue, (, ), ;, }, else, if, (, valueA, instanceof, String, ), {, doubleA, =, Double, ., valueOf]
[), {, doubleA, =, Double, ., valueOf, (, (, String, ), valueA, ), ;, }, else, {, return, false, ;]
[instanceof, String, ), {, doubleA, =, Double, ., valueOf, (, (, String, ), valueA, ), ;, }, else, {, return]
[=, Double, ., valueOf, (, (, String, ), valueA, ), ;, }, else, {, return, false, ;, }, if, (]
[;, }, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =, (, (, Number]
[., valueOf, (, (, String, ), valueA, ), ;, }, else, {, return, false, ;, }, if, (, valueB, instanceof]
[), ;, }, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =, (, (]
[), ;, }, else, {, return, false, ;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =, (, (]
[;, }, if, (, valueB, instanceof, Number, ), {, doubleB, =, (, (, Number, ), valueB, ), ., doubleValue, (]
[), {, doubleB, =, (, (, Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if, (, valueB]
[instanceof, Number, ), {, doubleB, =, (, (, Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if]
[=, (, (, Number, ), valueB, ), ., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, )]
[;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =, Double, ., valueOf, (, (, String, ), valueB]
[., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =, Double, ., valueOf, (]
[), ., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =, Double, ., valueOf]
[), ., doubleValue, (, ), ;, }, else, if, (, valueB, instanceof, String, ), {, doubleB, =, Double, ., valueOf]
[), {, doubleB, =, Double, ., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return, false, ;]
[instanceof, String, ), {, doubleB, =, Double, ., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return]
[=, Double, ., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return, false, ;, }, if, (]
[;, }, else, {, return, false, ;, }, if, (, !, doubleA, ., equals, (, doubleB, ), ), {, return]
[., valueOf, (, (, String, ), valueB, ), ;, }, else, {, return, false, ;, }, if, (, !, doubleA]
[), ;, }, else, {, return, false, ;, }, if, (, !, doubleA, ., equals, (, doubleB, ), ), {]
[), ;, }, else, {, return, false, ;, }, if, (, !, doubleA, ., equals, (, doubleB, ), ), {]
[;, }, if, (, !, doubleA, ., equals, (, doubleB, ), ), {, return, false, ;, }, }, return, true]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==]
[), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==]
[., equals, (, doubleB, ), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA]
[;, }, }, return, true, ;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==, null, &&, mismatchB, ==]
[;, }, private, boolean, compareSilent, (, ), {, return, mismatchA, ==, null, &&, mismatchB, ==, null, ;, }, private, String]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[&&, mismatchB, ==, null, ;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return]
[==, null, &&, mismatchB, ==, null, ;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), )]
[&&, mismatchB, ==, null, ;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[==, null, ;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;]
[;, }, private, String, compare, (, ), {, if, (, compareSilent, (, ), ), {, return, null, ;, }, return]
[), {, return, null, ;, }, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB]
[;, }, return, "The trees are not equal: ", +, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, )]
[;, }, }, }]
[+, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[+, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[+, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[+, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[+, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree]
[+, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB]
[+, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree]
[+, "\n\nTree1:\n ", +, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA]
[+, treeA, ., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree]
[+, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB]
[., toStringTree, (, ), +, "\n\nTree2:\n ", +, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, )]
[+, treeB, ., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree]
[+, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[., toStringTree, (, ), +, "\n\nSubtree1:\n ", +, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, )]
[+, mismatchA, ., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[+, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[., toStringTree, (, ), +, "\n\nSubtree2:\n ", +, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[+, mismatchB, ., toStringTree, (, ), ;, }, }, }]
[;, }, }, }]
[., toStringTree, (, ), ;, }, }, }]
