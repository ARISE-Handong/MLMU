[., util, ., Comparator, ;, import, java, ., util, ., List, ;, final, class, NameReferenceGraphReport, {, private, NameReferenceGraph, graph, =]
[util, ., List, ;, final, class, NameReferenceGraphReport, {, private, NameReferenceGraph, graph, =, null, ;, NameReferenceGraphReport, (, NameReferenceGraph, g, ), {]
[util, ., List, ;, final, class, NameReferenceGraphReport, {, private, NameReferenceGraph, graph, =, null, ;, NameReferenceGraphReport, (, NameReferenceGraph, g, ), {]
[final, class, NameReferenceGraphReport, {, private, NameReferenceGraph, graph, =, null, ;, NameReferenceGraphReport, (, NameReferenceGraph, g, ), {, this, ., graph, =]
[NameReferenceGraph, g, ), {, this, ., graph, =, g, ;, }, public, String, getHtmlReport, (, ), {, StringBuilder, builder, =]
[{, StringBuilder, builder, =, new, StringBuilder, (, ), ;, List, <, DiGraphNode, <, Name, ,, Reference, >, >, nodes, =]
[{, StringBuilder, builder, =, new, StringBuilder, (, ), ;, List, <, DiGraphNode, <, Name, ,, Reference, >, >, nodes, =]
[new, StringBuilder, (, ), ;, List, <, DiGraphNode, <, Name, ,, Reference, >, >, nodes, =, Lists, ., newArrayList, (]
[new, StringBuilder, (, ), ;, List, <, DiGraphNode, <, Name, ,, Reference, >, >, nodes, =, Lists, ., newArrayList, (]
[DiGraphNode, <, Name, ,, Reference, >, >, nodes, =, Lists, ., newArrayList, (, graph, ., getDirectedGraphNodes, (, ), ), ;]
[Name, ,, Reference, >, >, nodes, =, Lists, ., newArrayList, (, graph, ., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (]
[>, >, nodes, =, Lists, ., newArrayList, (, graph, ., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (, builder, ), ;]
[>, >, nodes, =, Lists, ., newArrayList, (, graph, ., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (, builder, ), ;]
[Lists, ., newArrayList, (, graph, ., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (]
[(, graph, ., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;]
[(, graph, ., getDirectedGraphNodes, (, ), ), ;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;]
[(, ), ), ;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (]
[;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;]
[;, generateHtmlReportHeader, (, builder, ), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;]
[), ;, builder, ., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (]
[., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;]
[., append, (, "<h1>Name Reference Graph Dump</h1>\n", ), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;]
[), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (]
[), ;, builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (]
[builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +]
[builder, ., append, (, "OVERALL STATS\n", ), ;, builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +]
[builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;]
[builder, ., append, (, "<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;]
["<ul>\n", ), ;, builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder, ., append, (]
[builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;]
[builder, ., append, (, "<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;]
["<li>Total names: ", +, nodes, ., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (]
[., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;]
[., size, (, ), ), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;]
[), ;, builder, ., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (]
[., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;]
[., append, (, "</ul>\n", ), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;]
[), ;, builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;, Collections, ., sort, (]
[builder, ., append, (, "ALL NAMES\n", ), ;, builder, ., append, (, "<UL>\n", ), ;, Collections, ., sort, (, nodes, ,]
[sort, (, nodes, ,, new, DiGraphNodeComparator, (, ), ), ;, for, (, DiGraphNode, <, Name, ,, Reference, >, n, :]
[,, new, DiGraphNodeComparator, (, ), ), ;, for, (, DiGraphNode, <, Name, ,, Reference, >, n, :, nodes, ), {]
[DiGraphNodeComparator, (, ), ), ;, for, (, DiGraphNode, <, Name, ,, Reference, >, n, :, nodes, ), {, generateDeclarationReport, (]
[), ), ;, for, (, DiGraphNode, <, Name, ,, Reference, >, n, :, nodes, ), {, generateDeclarationReport, (, builder, ,]
[), {, generateDeclarationReport, (, builder, ,, n, ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =]
[), {, generateDeclarationReport, (, builder, ,, n, ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =]
[builder, ,, n, ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =, graph, ., getOutEdges, (]
[builder, ,, n, ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, outEdges, =, graph, ., getOutEdges, (]
[getOutEdges, (, n, ., getValue, (, ), ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges, =]
[getOutEdges, (, n, ., getValue, (, ), ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges, =]
[getValue, (, ), ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges, =, graph, ., getInEdges, (]
[getValue, (, ), ), ;, List, <, DiGraphEdge, <, Name, ,, Reference, >, >, inEdges, =, graph, ., getInEdges, (]
[Name, ,, Reference, >, >, inEdges, =, graph, ., getInEdges, (, n, ., getValue, (, ), ), ;, if, (]
[Name, ,, Reference, >, >, inEdges, =, graph, ., getInEdges, (, n, ., getValue, (, ), ), ;, if, (]
[,, Reference, >, >, inEdges, =, graph, ., getInEdges, (, n, ., getValue, (, ), ), ;, if, (, !]
[,, Reference, >, >, inEdges, =, graph, ., getInEdges, (, n, ., getValue, (, ), ), ;, if, (, !]
[graph, ., getInEdges, (, n, ., getValue, (, ), ), ;, if, (, !, outEdges, ., isEmpty, (, ), ||]
[., getInEdges, (, n, ., getValue, (, ), ), ;, if, (, !, outEdges, ., isEmpty, (, ), ||, !]
[., getInEdges, (, n, ., getValue, (, ), ), ;, if, (, !, outEdges, ., isEmpty, (, ), ||, !]
[), ), ;, if, (, !, outEdges, ., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (, ), ), {]
[), ), ;, if, (, !, outEdges, ., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (, ), ), {]
[(, !, outEdges, ., isEmpty, (, ), ||, !, inEdges, ., isEmpty, (, ), ), {, builder, ., append, (]
[(, ), ||, !, inEdges, ., isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;, if, (]
[(, ), ||, !, inEdges, ., isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;, if, (]
[(, ), ||, !, inEdges, ., isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;, if, (]
[isEmpty, (, ), ), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >]
[), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >, 0, ), {]
[), {, builder, ., append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >, 0, ), {]
[append, (, "<ul>", ), ;, if, (, outEdges, ., size, (, ), >, 0, ), {, builder, ., append, (]
[), ;, if, (, outEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;]
[), ;, if, (, outEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;]
[outEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERS TO:<br>\n", ), ;, builder, ., append, (]
["<li>REFERS TO:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :]
[builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {]
[append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {, generateEdgeReport, (]
["<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {, generateEdgeReport, (, builder, ,]
["<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {, generateEdgeReport, (, builder, ,]
["<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, outEdges, ), {, generateEdgeReport, (, builder, ,]
[>, edge, :, outEdges, ), {, generateEdgeReport, (, builder, ,, edge, ., getDestination, (, ), ., getValue, (, ), ,]
[), {, generateEdgeReport, (, builder, ,, edge, ., getDestination, (, ), ., getValue, (, ), ,, edge, ), ;, }]
[), {, generateEdgeReport, (, builder, ,, edge, ., getDestination, (, ), ., getValue, (, ), ,, edge, ), ;, }]
[builder, ,, edge, ., getDestination, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (]
[), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (]
[), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (]
[), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (]
[edge, ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, ), >]
[}, builder, ., append, (, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, ), >, 0, ), {]
[}, builder, ., append, (, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, ), >, 0, ), {]
[(, "</ul>\n", ), ;, }, if, (, inEdges, ., size, (, ), >, 0, ), {, builder, ., append, (]
[;, }, if, (, inEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;]
[;, }, if, (, inEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;]
[inEdges, ., size, (, ), >, 0, ), {, builder, ., append, (, "<li>REFERENCED BY:<br>\n", ), ;, builder, ., append, (]
["<li>REFERENCED BY:<br>\n", ), ;, builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :]
[builder, ., append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {]
[append, (, "<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {, generateEdgeReport, (]
["<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {, generateEdgeReport, (, builder, ,]
["<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {, generateEdgeReport, (, builder, ,]
["<ul>", ), ;, for, (, DiGraphEdge, <, Name, ,, Reference, >, edge, :, inEdges, ), {, generateEdgeReport, (, builder, ,]
[>, edge, :, inEdges, ), {, generateEdgeReport, (, builder, ,, edge, ., getSource, (, ), ., getValue, (, ), ,]
[), {, generateEdgeReport, (, builder, ,, edge, ., getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }]
[), {, generateEdgeReport, (, builder, ,, edge, ., getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }]
[builder, ,, edge, ., getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (]
[getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>", ), ;, }]
[getSource, (, ), ., getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>", ), ;, }]
[getValue, (, ), ,, edge, ), ;, }, builder, ., append, (, "</ul>", ), ;, }, builder, ., append, (]
[), ;, }, builder, ., append, (, "</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }]
[), ;, }, builder, ., append, (, "</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }]
[., append, (, "</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }, builder, ., append, (]
["</ul>", ), ;, }, builder, ., append, (, "</ul>\n", ), ;, }, }, builder, ., append, (, "</ul>\n", ), ;]
[;, }, builder, ., append, (, "</ul>\n", ), ;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (]
[append, (, "</ul>\n", ), ;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (, builder, ), ;, return]
[append, (, "</ul>\n", ), ;, }, }, builder, ., append, (, "</ul>\n", ), ;, generateHtmlReportFooter, (, builder, ), ;, return]
[;, return, builder, ., toString, (, ), ;, }, private, String, getSourceFile, (, Node, node, ), {, String, filename, =]
[;, return, builder, ., toString, (, ), ;, }, private, String, getSourceFile, (, Node, node, ), {, String, filename, =]
[}, private, String, getSourceFile, (, Node, node, ), {, String, filename, =, node, ., getSourceFileName, (, ), ;, if, (]
[}, private, String, getSourceFile, (, Node, node, ), {, String, filename, =, node, ., getSourceFileName, (, ), ;, if, (]
[String, getSourceFile, (, Node, node, ), {, String, filename, =, node, ., getSourceFileName, (, ), ;, if, (, filename, ==]
[node, ), {, String, filename, =, node, ., getSourceFileName, (, ), ;, if, (, filename, ==, null, ), {, return]
[filename, =, node, ., getSourceFileName, (, ), ;, if, (, filename, ==, null, ), {, return, "", ;, }, return]
[}, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode, <, Name, ,, Reference, >, declarationNode, ), {, String, declName, =]
[}, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode, <, Name, ,, Reference, >, declarationNode, ), {, String, declName, =]
[}, private, void, generateDeclarationReport, (, StringBuilder, builder, ,, DiGraphNode, <, Name, ,, Reference, >, declarationNode, ), {, String, declName, =]
[>, declarationNode, ), {, String, declName, =, declarationNode, ., getValue, (, ), ., getQualifiedName, (, ), ;, JSType, declType, =]
[>, declarationNode, ), {, String, declName, =, declarationNode, ., getValue, (, ), ., getQualifiedName, (, ), ;, JSType, declType, =]
[>, declarationNode, ), {, String, declName, =, declarationNode, ., getValue, (, ), ., getQualifiedName, (, ), ;, JSType, declType, =]
[(, ), ., getQualifiedName, (, ), ;, JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (, ), ;]
[(, ), ., getQualifiedName, (, ), ;, JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (, ), ;]
[(, ), ;, JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (, ), ;, builder, ., append, (]
[JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;]
[JSType, declType, =, declarationNode, ., getValue, (, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;]
[., getValue, (, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (]
[., getValue, (, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (]
[., getValue, (, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (]
[(, ), ., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +]
[., getType, (, ), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +, declName, +]
[), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;]
[), ;, builder, ., append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;]
[append, (, "<LI> ", ), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append, (]
[), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;]
[), ;, builder, ., append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;]
[append, (, "<A NAME=\"", +, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;, builder, ., append, (]
[+, declName, +, "\">", ), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;]
[+, "\">", ), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (]
[), ;, builder, ., append, (, declName, ), ;, builder, ., append, (, "\n", ), ;, generateType, (, builder, ,]
[append, (, "\n", ), ;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, ., Definition, >, defs, =]
[append, (, "\n", ), ;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, ., Definition, >, defs, =]
[append, (, "\n", ), ;, generateType, (, builder, ,, declType, ), ;, List, <, DefinitionsRemover, ., Definition, >, defs, =]
[List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue, (, ), ., getDeclarations, (, ), ;, if, (]
[List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue, (, ), ., getDeclarations, (, ), ;, if, (]
[List, <, DefinitionsRemover, ., Definition, >, defs, =, declarationNode, ., getValue, (, ), ., getDeclarations, (, ), ;, if, (]
[defs, =, declarationNode, ., getValue, (, ), ., getDeclarations, (, ), ;, if, (, defs, ., size, (, ), ==]
[., getValue, (, ), ., getDeclarations, (, ), ;, if, (, defs, ., size, (, ), ==, 0, ), {]
[., getValue, (, ), ., getDeclarations, (, ), ;, if, (, defs, ., size, (, ), ==, 0, ), {]
[., getDeclarations, (, ), ;, if, (, defs, ., size, (, ), ==, 0, ), {, builder, ., append, (]
[(, defs, ., size, (, ), ==, 0, ), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }, else, {]
[(, defs, ., size, (, ), ==, 0, ), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }, else, {]
[(, ), ==, 0, ), {, builder, ., append, (, "<br>No definitions found<br>", ), ;, }, else, {, builder, ., append, (]
["<br>No definitions found<br>", ), ;, }, else, {, builder, ., append, (, "<ul>", ), ;, for, (, DefinitionsRemover, ., Definition, def, :]
[builder, ., append, (, "<ul>", ), ;, for, (, DefinitionsRemover, ., Definition, def, :, defs, ), {, Node, fnDef, =]
[builder, ., append, (, "<ul>", ), ;, for, (, DefinitionsRemover, ., Definition, def, :, defs, ), {, Node, fnDef, =]
[DefinitionsRemover, ., Definition, def, :, defs, ), {, Node, fnDef, =, def, ., getRValue, (, ), ;, String, sourceFileName, =]
[Definition, def, :, defs, ), {, Node, fnDef, =, def, ., getRValue, (, ), ;, String, sourceFileName, =, getSourceFile, (]
[defs, ), {, Node, fnDef, =, def, ., getRValue, (, ), ;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;]
[defs, ), {, Node, fnDef, =, def, ., getRValue, (, ), ;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;]
[fnDef, =, def, ., getRValue, (, ), ;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (]
[., getRValue, (, ), ;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (, "<li> Defined: ", ), ;]
[(, ), ;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (]
[;, String, sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,]
[sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,]
[sourceFileName, =, getSourceFile, (, fnDef, ), ;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,]
[;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,]
[;, builder, ., append, (, "<li> Defined: ", ), ;, generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,]
[generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), ), ;, }]
[generateSourceReferenceLink, (, builder, ,, sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), ), ;, }]
[sourceFileName, ,, fnDef, ., getLineno, (, ), ,, fnDef, ., getCharno, (, ), ), ;, }, builder, ., append, (]
[), ;, }, builder, ., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {]
[), ;, }, builder, ., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[., append, (, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (]
[(, "</ul>", ), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +]
[), ;, }, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +]
[}, }, private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +]
[private, void, generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +]
[generateHtmlReportHeader, (, StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +]
[StringBuilder, builder, ), {, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +]
[{, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;]
[{, builder, ., append, (, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;]
[(, "<!DOCTYPE html>\n", +, "<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (]
["<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;]
["<html>", +, "<head>", +, "<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;]
["<meta http-equiv=\"Content-Type\" ", +, "content=\"text/html;charset=utf-8\" >", +, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (]
[+, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;]
[+, "<title>Name Reference Graph Dump</title>", +, "<style type=\"text/css\">body, td, ", ), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;]
[), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (]
[), ;, builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (]
[builder, ., append, (, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +]
[(, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;]
[(, "p {font-family: Arial; font-size: 83%} ", ), ;, builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;]
[builder, ., append, (, "ul {margin-top:2px; margin-left:0px; padding-left:1em;}", ), ;, builder, ., append, (, "li {margin-top:3px; margin-left:24px;", +, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (]
[+, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {]
[+, "padding-left:0px;padding-bottom: 4px}", ), ;, builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {]
[builder, ., append, (, "</style></head><body>\n", ), ;, }, private, void, generateHtmlReportFooter, (, StringBuilder, builder, ), {, builder, ., append, (]
[generateEdgeReport, (, StringBuilder, builder, ,, Name, referencedDecl, ,, DiGraphEdge, <, Name, ,, Reference, >, edge, ), {, String, srcDeclName, =]
[generateEdgeReport, (, StringBuilder, builder, ,, Name, referencedDecl, ,, DiGraphEdge, <, Name, ,, Reference, >, edge, ), {, String, srcDeclName, =]
[referencedDecl, ,, DiGraphEdge, <, Name, ,, Reference, >, edge, ), {, String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;]
[referencedDecl, ,, DiGraphEdge, <, Name, ,, Reference, >, edge, ), {, String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;]
[Name, ,, Reference, >, edge, ), {, String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;, builder, ., append, (]
[Name, ,, Reference, >, edge, ), {, String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;, builder, ., append, (]
[Name, ,, Reference, >, edge, ), {, String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;, builder, ., append, (]
[Reference, >, edge, ), {, String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;, builder, ., append, (, "<li><A HREF=\"#", +]
[edge, ), {, String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +]
[String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;]
[String, srcDeclName, =, referencedDecl, ., getQualifiedName, (, ), ;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;]
[., getQualifiedName, (, ), ;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;, builder, ., append, (]
[), ;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;]
[), ;, builder, ., append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;]
[append, (, "<li><A HREF=\"#", +, srcDeclName, +, "\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (]
["\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =]
["\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =]
["\">", ), ;, builder, ., append, (, srcDeclName, ), ;, builder, ., append, (, "</a> ", ), ;, Node, def, =]
[(, "</a> ", ), ;, Node, def, =, edge, ., getValue, (, ), ., getSite, (, ), ;, int, lineNumber, =]
[(, "</a> ", ), ;, Node, def, =, edge, ., getValue, (, ), ., getSite, (, ), ;, int, lineNumber, =]
[getValue, (, ), ., getSite, (, ), ;, int, lineNumber, =, def, ., getLineno, (, ), ;, int, columnNumber, =]
[getValue, (, ), ., getSite, (, ), ;, int, lineNumber, =, def, ., getLineno, (, ), ;, int, columnNumber, =]
[lineNumber, =, def, ., getLineno, (, ), ;, int, columnNumber, =, def, ., getCharno, (, ), ;, String, sourceFile, =]
[def, ., getLineno, (, ), ;, int, columnNumber, =, def, ., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (]
[(, ), ;, int, columnNumber, =, def, ., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def, ), ;]
[;, int, columnNumber, =, def, ., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (]
[columnNumber, =, def, ., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,]
[def, ., getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,]
[getCharno, (, ), ;, String, sourceFile, =, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,]
[=, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =]
[=, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =]
[=, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =]
[=, getSourceFile, (, def, ), ;, generateSourceReferenceLink, (, builder, ,, sourceFile, ,, lineNumber, ,, columnNumber, ), ;, JSType, defType, =]
[columnNumber, ), ;, JSType, defType, =, edge, ., getValue, (, ), ., getSite, (, ), ., getJSType, (, ), ;]
[;, JSType, defType, =, edge, ., getValue, (, ), ., getSite, (, ), ., getJSType, (, ), ;, generateType, (]
[defType, =, edge, ., getValue, (, ), ., getSite, (, ), ., getJSType, (, ), ;, generateType, (, builder, ,]
[;, }, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert]
[}, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert, (]
[}, private, void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert, (]
[void, generateSourceReferenceLink, (, StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert, (, sourceFile, !=]
[StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert, (, sourceFile, !=, null, ), ;]
[StringBuilder, builder, ,, String, sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert, (, sourceFile, !=, null, ), ;]
[sourceFile, ,, int, lineNumber, ,, int, columnNumber, ), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (]
[lineNumber, ,, int, columnNumber, ), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;]
[lineNumber, ,, int, columnNumber, ), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;]
[), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (]
[), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (]
[), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (]
[), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (]
[), {, assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (]
[assert, (, sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +]
[sourceFile, !=, null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +]
[null, ), ;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +]
[;, builder, ., append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +]
[append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, ), ;]
[append, (, "(", ), ;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, ), ;]
[;, builder, ., append, (, sourceFile, +, ":", +, lineNumber, +, ",", +, columnNumber, ), ;, builder, ., append, (]
[., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (]
[., append, (, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (]
[(, ")", ), ;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (, defType, ==]
[;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (, defType, ==, null, ), {]
[;, }, private, void, generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (, defType, ==, null, ), {]
[generateType, (, StringBuilder, builder, ,, JSType, defType, ), {, if, (, defType, ==, null, ), {, builder, ., append, (]
[), {, if, (, defType, ==, null, ), {, builder, ., append, (, " (type: null) ", ), ;, }, else, if, (]
[), {, if, (, defType, ==, null, ), {, builder, ., append, (, " (type: null) ", ), ;, }, else, if, (]
[), {, builder, ., append, (, " (type: null) ", ), ;, }, else, if, (, defType, ., isUnknownType, (, ), ), {]
[), {, builder, ., append, (, " (type: null) ", ), ;, }, else, if, (, defType, ., isUnknownType, (, ), ), {]
[append, (, " (type: null) ", ), ;, }, else, if, (, defType, ., isUnknownType, (, ), ), {, builder, ., append, (]
[else, if, (, defType, ., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {]
[else, if, (, defType, ., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {]
[., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (]
[., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (]
[., isUnknownType, (, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (]
[(, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (, " (type: ", +]
[(, ), ), {, builder, ., append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (, " (type: ", +]
[append, (, " (type: unknown) ", ), ;, }, else, {, builder, ., append, (, " (type: ", +, defType, ., toString, (, ), +]
[int, compare, (, DiGraphNode, <, Name, ,, Reference, >, node1, ,, DiGraphNode, <, Name, ,, Reference, >, node2, ), {]
[int, compare, (, DiGraphNode, <, Name, ,, Reference, >, node1, ,, DiGraphNode, <, Name, ,, Reference, >, node2, ), {]
[<, Name, ,, Reference, >, node1, ,, DiGraphNode, <, Name, ,, Reference, >, node2, ), {, Preconditions, ., checkNotNull, (]
[<, Name, ,, Reference, >, node1, ,, DiGraphNode, <, Name, ,, Reference, >, node2, ), {, Preconditions, ., checkNotNull, (]
[DiGraphNode, <, Name, ,, Reference, >, node2, ), {, Preconditions, ., checkNotNull, (, node1, ., getValue, (, ), ), ;]
[DiGraphNode, <, Name, ,, Reference, >, node2, ), {, Preconditions, ., checkNotNull, (, node1, ., getValue, (, ), ), ;]
[Reference, >, node2, ), {, Preconditions, ., checkNotNull, (, node1, ., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (]
[Reference, >, node2, ), {, Preconditions, ., checkNotNull, (, node1, ., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (]
[node1, ., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (]
[node1, ., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (]
[., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (]
[., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (]
[., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (]
[., getValue, (, ), ), ;, Preconditions, ., checkNotNull, (, node2, ., getValue, (, ), ), ;, if, (, (]
[node2, ., getValue, (, ), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==]
[(, ), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&]
[), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (]
[), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (]
[), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (]
[), ), ;, if, (, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), &&, (]
[), ., getQualifiedName, (, ), ==, null, ), &&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==]
[==, null, ), &&, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return]
[node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;, }, if, (]
[node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;, }, if, (]
[node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;, }, if, (]
[node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), ), {, return, 0, ;, }, if, (]
[null, ), ), {, return, 0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==]
[return, 0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return]
[0, ;, }, if, (, node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, -]
[node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, -, 1, ;, }, if, (]
[node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, -, 1, ;, }, if, (]
[node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, -, 1, ;, }, if, (]
[node1, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, -, 1, ;, }, if, (]
[null, ), {, return, -, 1, ;, }, if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==]
[-, 1, ;, }, if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return]
[if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, 1, ;, }, return]
[if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, 1, ;, }, return]
[if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, 1, ;, }, return]
[if, (, node2, ., getValue, (, ), ., getQualifiedName, (, ), ==, null, ), {, return, 1, ;, }, return]
[null, ), {, return, 1, ;, }, return, node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (]
[null, ), {, return, 1, ;, }, return, node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (]
[null, ), {, return, 1, ;, }, return, node1, ., getValue, (, ), ., getQualifiedName, (, ), ., compareTo, (]
