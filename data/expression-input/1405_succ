[;, private, final, Deque, <, Scope, >, scopes, =, new, ArrayDeque, <, Scope, >, (, ), ;, private, final, Deque]
[., error, (, "JSC_NODE_TRAVERSAL_ERROR", ,, "{0}", ), ;, private, final, Deque, <, Scope, >, scopes, =, new, ArrayDeque, <, Scope]
[,, "{0}", ), ;, private, final, Deque, <, Scope, >, scopes, =, new, ArrayDeque, <, Scope, >, (, ), ;]
[), ;, private, final, Deque, <, Scope, >, scopes, =, new, ArrayDeque, <, Scope, >, (, ), ;, private, final]
[;, private, final, Deque, <, Node, >, scopeRoots, =, new, ArrayDeque, <, Node, >, (, ), ;, Deque, <, ControlFlowGraph]
[;, Deque, <, ControlFlowGraph, <, Node, >, >, cfgs, =, new, LinkedList, <, ControlFlowGraph, <, Node, >, >, (, )]
[;, private, String, sourceName, ;, private, InputId, inputId, ;, private, ScopeCreator, scopeCreator, ;, private, ScopedCallback, scopeCallback, ;, public, interface, Callback]
[;, }, }, public, abstract, static, class, AbstractScopedCallback, implements, ScopedCallback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, exitScope, (, NodeTraversal]
[;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal]
[||, n, ==, parent, ., getFirstChild, (, ), ;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @]
[||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ;, }, }, public, abstract]
[==, null, ||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ;, }, }]
[||, !, parent, ., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ;, }, }, public, abstract]
[||, n, ==, parent, ., getFirstChild, (, ), ;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @]
[||, n, ==, parent, ., getFirstChild, (, ), ;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @]
[., isFunction, (, ), ||, n, ==, parent, ., getFirstChild, (, ), ;, }, }, public, abstract, static, class, AbstractShallowStatementCallback]
[;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal]
[==, parent, ., getFirstChild, (, ), ;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @, Override, public]
[;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @, Override, public, final, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal]
[., getFirstChild, (, ), ;, }, }, public, abstract, static, class, AbstractShallowStatementCallback, implements, Callback, {, @, Override, public, final, boolean]
[;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback, implements, Callback, {, private, final, Set, <, Integer, >, nodeTypes, ;, private]
[||, NodeUtil, ., isStatementBlock, (, parent, ), ;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback, implements, Callback, {, private, final]
[||, NodeUtil, ., isControlStructure, (, parent, ), ||, NodeUtil, ., isStatementBlock, (, parent, ), ;, }, }, public, abstract, static]
[==, null, ||, NodeUtil, ., isControlStructure, (, parent, ), ||, NodeUtil, ., isStatementBlock, (, parent, ), ;, }, }, public]
[||, NodeUtil, ., isControlStructure, (, parent, ), ||, NodeUtil, ., isStatementBlock, (, parent, ), ;, }, }, public, abstract, static]
[||, NodeUtil, ., isStatementBlock, (, parent, ), ;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback, implements, Callback, {, private, final]
[., isControlStructure, (, parent, ), ||, NodeUtil, ., isStatementBlock, (, parent, ), ;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback]
[), ||, NodeUtil, ., isStatementBlock, (, parent, ), ;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback, implements, Callback, {, private]
[;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback, implements, Callback, {, private, final, Set, <, Integer, >, nodeTypes, ;, private]
[., isStatementBlock, (, parent, ), ;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback, implements, Callback, {, private, final, Set, <]
[), ;, }, }, public, abstract, static, class, AbstractNodeTypePruningCallback, implements, Callback, {, private, final, Set, <, Integer, >, nodeTypes, ;]
[,, true, ), ;, }, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {, this, .]
[), ;, }, public, AbstractNodeTypePruningCallback, (, Set, <, Integer, >, nodeTypes, ,, boolean, include, ), {, this, ., nodeTypes, =]
[=, nodeTypes, ;, this, ., include, =, include, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node]
[., nodeTypes, =, nodeTypes, ;, this, ., include, =, include, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal]
[;, this, ., include, =, include, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,]
[=, include, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {]
[., include, =, include, ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, nodeTraversal, ,, Node, n, ,, Node, parent, ), {, return, include]
[;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (, compiler, ,, cb, ,, new]
[==, nodeTypes, ., contains, (, n, ., getType, (, ), ), ;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,]
[;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (, compiler, ,, cb, ,, new]
[., contains, (, n, ., getType, (, ), ), ;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb]
[), ;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (, compiler, ,, cb, ,]
[., getType, (, ), ), ;, }, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ), {, this, (]
[,, cb, ,, new, SyntacticScopeCreator, (, compiler, ), ), ;, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,]
[,, new, SyntacticScopeCreator, (, compiler, ), ), ;, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator]
[), ;, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator, ), {, this, ., callback, =]
[), ), ;, }, public, NodeTraversal, (, AbstractCompiler, compiler, ,, Callback, cb, ,, ScopeCreator, scopeCreator, ), {, this, ., callback]
[=, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }]
[., callback, =, cb, ;, if, (, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb]
[;, if, (, cb, instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, .]
[), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;, this, .]
[instanceof, ScopedCallback, ), {, this, ., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;]
[=, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;, this]
[., scopeCallback, =, (, ScopedCallback, ), cb, ;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null]
[;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;]
[;, }, this, ., compiler, =, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;]
[=, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;, this, ., scopeCreator, =, scopeCreator]
[., compiler, =, compiler, ;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;, this, ., scopeCreator]
[;, this, ., inputId, =, null, ;, this, ., sourceName, =, "", ;, this, ., scopeCreator, =, scopeCreator, ;, }]
[=, null, ;, this, ., sourceName, =, "", ;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (]
[., inputId, =, null, ;, this, ., sourceName, =, "", ;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void]
[;, this, ., sourceName, =, "", ;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException]
[=, "", ;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message]
[., sourceName, =, "", ;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {]
[;, this, ., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =, unexpectedException]
[=, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =, unexpectedException, ., getMessage, (, )]
[., scopeCreator, =, scopeCreator, ;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =, unexpectedException, ., getMessage]
[;, }, private, void, throwUnexpectedException, (, Exception, unexpectedException, ), {, String, message, =, unexpectedException, ., getMessage, (, ), ;, if]
[;, if, (, inputId, !=, null, ), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (]
[., getMessage, (, ), ;, if, (, inputId, !=, null, ), {, message, =, unexpectedException, ., getMessage, (, ), +]
[), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (]
[!=, null, ), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, )]
[), {, message, =, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (]
[=, unexpectedException, ., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null]
[;, }, compiler, ., throwInternalError, (, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,, Node]
[+, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;]
[+, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode]
[+, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent"]
[., getMessage, (, ), +, "\n", +, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, ""]
[+, formatNodeContext, (, "Node", ,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode]
[+, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;]
[,, curNode, ), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, )]
[), +, (, curNode, ==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), )]
[;, }, compiler, ., throwInternalError, (, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,, Node]
[), ;, }, compiler, ., throwInternalError, (, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,]
[?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }, compiler, ., throwInternalError, (]
[==, null, ?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }, compiler, .]
[?, "", :, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }, compiler, ., throwInternalError, (]
[:, formatNodeContext, (, "Parent", ,, curNode, ., getParent, (, ), ), ), ;, }, compiler, ., throwInternalError, (, message, ,]
[), ;, }, compiler, ., throwInternalError, (, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,]
[,, curNode, ., getParent, (, ), ), ), ;, }, compiler, ., throwInternalError, (, message, ,, unexpectedException, ), ;, }]
[), ), ;, }, compiler, ., throwInternalError, (, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label]
[., getParent, (, ), ), ), ;, }, compiler, ., throwInternalError, (, message, ,, unexpectedException, ), ;, }, private, String]
[;, }, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==, null, ), {]
[., throwInternalError, (, message, ,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {]
[,, unexpectedException, ), ;, }, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==]
[), ;, }, private, String, formatNodeContext, (, String, label, ,, Node, n, ), {, if, (, n, ==, null, )]
[), {, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString]
[==, null, ), {, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n]
[), {, return, "  ", +, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString]
[;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +]
[+, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false]
[+, label, +, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false]
[+, ": NULL", ;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false]
[;, }, return, "  ", +, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +]
[;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (, root, )]
[+, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil]
[+, "): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId]
[+, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (, n, ), ;, }]
[+, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (, n, )]
[+, label, +, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (]
[+, "(", +, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (, n, )]
[+, n, ., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (, n, ), ;, }]
[+, "): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId]
[., toString, (, false, ,, false, ,, false, ), +, "): ", +, formatNodePosition, (, n, ), ;, }, public, void]
[,, false, ,, false, ), +, "): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root]
[,, false, ), +, "): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {]
[), +, "): ", +, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {]
[+, formatNodePosition, (, n, ), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil]
[;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (, root, )]
[), ;, }, public, void, traverse, (, Node, root, ), {, try, {, inputId, =, NodeUtil, ., getInputId, (, root]
[=, NodeUtil, ., getInputId, (, root, ), ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, )]
[;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch, (, root, ,, null, )]
[., getInputId, (, root, ), ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch]
[), ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch, (, root, ,, null]
[=, "", ;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope]
[;, curNode, =, root, ;, pushScope, (, root, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, )]
[=, root, ;, pushScope, (, root, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }]
[;, pushScope, (, root, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, catch, (]
[;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException]
[), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {]
[;, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }, public]
[,, null, ), ;, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;]
[), ;, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }]
[;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }, public, void, traverseRoots, (, Node]
[;, }, }, public, void, traverseRoots, (, Node, ..., roots, ), {, traverseRoots, (, Lists, ., newArrayList, (, roots, )]
[), ;, }, }, public, void, traverseRoots, (, Node, ..., roots, ), {, traverseRoots, (, Lists, ., newArrayList, (, roots]
[;, }, public, void, traverseRoots, (, List, <, Node, >, roots, ), {, if, (, roots, ., isEmpty, (, )]
[), ;, }, public, void, traverseRoots, (, List, <, Node, >, roots, ), {, if, (, roots, ., isEmpty, (]
[., newArrayList, (, roots, ), ), ;, }, public, void, traverseRoots, (, List, <, Node, >, roots, ), {, if]
[), ), ;, }, public, void, traverseRoots, (, List, <, Node, >, roots, ), {, if, (, roots, ., isEmpty]
[), {, return, ;, }, try, {, Node, scopeRoot, =, roots, ., get, (, 0, ), ., getParent, (, )]
[., isEmpty, (, ), ), {, return, ;, }, try, {, Node, scopeRoot, =, roots, ., get, (, 0, )]
[;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName]
[., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (]
[., get, (, 0, ), ., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId]
[), ., getParent, (, ), ;, Preconditions, ., checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId]
[;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope, (]
[., checkState, (, scopeRoot, !=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, ""]
[), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope]
[!=, null, ), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot]
[), ;, inputId, =, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope]
[=, NodeUtil, ., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, )]
[;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots]
[., getInputId, (, scopeRoot, ), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for]
[), ;, sourceName, =, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :]
[=, "", ;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {]
[;, curNode, =, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {, Preconditions, .]
[=, scopeRoot, ;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (]
[;, pushScope, (, scopeRoot, ), ;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (, root, .]
[;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (, root, ., getParent, (, ), ==, scopeRoot]
[), ;, for, (, Node, root, :, roots, ), {, Preconditions, ., checkState, (, root, ., getParent, (, ), ==]
[), {, Preconditions, ., checkState, (, root, ., getParent, (, ), ==, scopeRoot, ), ;, traverseBranch, (, root, ,, scopeRoot]
[;, traverseBranch, (, root, ,, scopeRoot, ), ;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {]
[., checkState, (, root, ., getParent, (, ), ==, scopeRoot, ), ;, traverseBranch, (, root, ,, scopeRoot, ), ;, }]
[), ;, traverseBranch, (, root, ,, scopeRoot, ), ;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, )]
[==, scopeRoot, ), ;, traverseBranch, (, root, ,, scopeRoot, ), ;, }, popScope, (, ), ;, }, catch, (, Exception]
[., getParent, (, ), ==, scopeRoot, ), ;, traverseBranch, (, root, ,, scopeRoot, ), ;, }, popScope, (, ), ;]
[), ;, traverseBranch, (, root, ,, scopeRoot, ), ;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, )]
[;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }]
[,, scopeRoot, ), ;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, )]
[), ;, }, popScope, (, ), ;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }]
[;, }, catch, (, Exception, unexpectedException, ), {, throwUnexpectedException, (, unexpectedException, ), ;, }, }, private, static, final, String, MISSING_SOURCE]
[;, }, }, private, static, final, String, MISSING_SOURCE, =, "[source unknown]", ;, private, String, formatNodePosition, (, Node, n, ), {, String]
[), ;, }, }, private, static, final, String, MISSING_SOURCE, =, "[source unknown]", ;, private, String, formatNodePosition, (, Node, n, ), {]
[;, private, String, formatNodePosition, (, Node, n, ), {, String, sourceFileName, =, getBestSourceFileName, (, n, ), ;, if, (, sourceFileName]
[;, if, (, sourceFileName, ==, null, ), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =, n, ., getLineno]
[), ;, if, (, sourceFileName, ==, null, ), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =, n, .]
[), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =]
[==, null, ), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int]
[), {, return, MISSING_SOURCE, +, "\n", ;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =]
[;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =, n, ., getCharno, (, ), ;]
[+, "\n", ;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =, n, ., getCharno, (]
[;, }, int, lineNumber, =, n, ., getLineno, (, ), ;, int, columnNumber, =, n, ., getCharno, (, ), ;]
[;, int, columnNumber, =, n, ., getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber]
[., getLineno, (, ), ;, int, columnNumber, =, n, ., getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine]
[;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {]
[., getCharno, (, ), ;, String, src, =, compiler, ., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src]
[;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +]
[., getSourceLine, (, sourceFileName, ,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }]
[,, lineNumber, ), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":"]
[), ;, if, (, src, ==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber]
[), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +]
[==, null, ), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +]
[), {, src, =, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +]
[=, MISSING_SOURCE, ;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +, src, +, "\n"]
[;, }, return, sourceFileName, +, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +, src, +, "\n", ;, }]
[;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (, s, ., isGlobal, (]
[+, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (, s, .]
[+, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (]
[+, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, .]
[+, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {]
[+, ":", +, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s]
[+, lineNumber, +, ":", +, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,]
[+, ":", +, lineNumber, +, ":", +, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node]
[+, lineNumber, +, ":", +, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,]
[+, ":", +, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s]
[+, columnNumber, +, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {]
[+, "\n", +, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, .]
[+, src, +, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (]
[+, "\n", ;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (, s, .]
[;, }, void, traverseWithScope, (, Node, root, ,, Scope, s, ), {, Preconditions, ., checkState, (, s, ., isGlobal, (]
[;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (]
[., checkState, (, s, ., isGlobal, (, ), ), ;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =]
[), ;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch]
[., isGlobal, (, ), ), ;, inputId, =, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (]
[=, null, ;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (, root, ,]
[;, sourceName, =, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (, root, ,, null, )]
[=, "", ;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope]
[;, curNode, =, root, ;, pushScope, (, s, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, )]
[=, root, ;, pushScope, (, s, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }]
[;, pushScope, (, s, ), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, void, traverseAtScope]
[;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, void, traverseAtScope, (, Scope, s, ), {]
[), ;, traverseBranch, (, root, ,, null, ), ;, popScope, (, ), ;, }, void, traverseAtScope, (, Scope, s, )]
[;, popScope, (, ), ;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =, s, ., getRootNode, (]
[,, null, ), ;, popScope, (, ), ;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =, s]
[), ;, popScope, (, ), ;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =, s, ., getRootNode]
[;, }, void, traverseAtScope, (, Scope, s, ), {, Node, n, =, s, ., getRootNode, (, ), ;, if, (]
[;, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil]
[., getRootNode, (, ), ;, if, (, n, ., isFunction, (, ), ), {, if, (, inputId, ==, null, )]
[), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName]
[., isFunction, (, ), ), {, if, (, inputId, ==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n]
[), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode]
[==, null, ), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, )]
[), {, inputId, =, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode]
[=, NodeUtil, ., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;]
[;, }, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (, s, ), ;, Node, args]
[., getInputId, (, n, ), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (]
[), ;, }, sourceName, =, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (, s, ), ;, Node]
[=, getSourceName, (, n, ), ;, curNode, =, n, ;, pushScope, (, s, ), ;, Node, args, =, n, .]
[;, curNode, =, n, ;, pushScope, (, s, ), ;, Node, args, =, n, ., getFirstChild, (, ), ., getNext]
[), ;, curNode, =, n, ;, pushScope, (, s, ), ;, Node, args, =, n, ., getFirstChild, (, ), .]
[=, n, ;, pushScope, (, s, ), ;, Node, args, =, n, ., getFirstChild, (, ), ., getNext, (, )]
[;, pushScope, (, s, ), ;, Node, args, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node]
[;, Node, args, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, body, =, args, ., getNext]
[), ;, Node, args, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Node, body, =, args, .]
[;, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, traverseBranch, (, body]
[., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, )]
[., getFirstChild, (, ), ., getNext, (, ), ;, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (]
[;, traverseBranch, (, args, ,, n, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }]
[., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope]
[;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, else, {, traverseWithScope, (, n, ,, s]
[,, n, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, else, {, traverseWithScope, (]
[), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, else, {, traverseWithScope, (, n, ,]
[;, popScope, (, ), ;, }, else, {, traverseWithScope, (, n, ,, s, ), ;, }, }, protected, void, traverseInnerNode]
[,, n, ), ;, popScope, (, ), ;, }, else, {, traverseWithScope, (, n, ,, s, ), ;, }, }]
[), ;, popScope, (, ), ;, }, else, {, traverseWithScope, (, n, ,, s, ), ;, }, }, protected, void]
[;, }, else, {, traverseWithScope, (, n, ,, s, ), ;, }, }, protected, void, traverseInnerNode, (, Node, node, ,]
[;, }, }, protected, void, traverseInnerNode, (, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {, Preconditions, ., checkNotNull]
[,, s, ), ;, }, }, protected, void, traverseInnerNode, (, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {]
[), ;, }, }, protected, void, traverseInnerNode, (, Node, node, ,, Node, parent, ,, Scope, refinedScope, ), {, Preconditions, .]
[;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (]
[., checkNotNull, (, parent, ), ;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode]
[), ;, if, (, refinedScope, !=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope]
[), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (]
[&&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node]
[!=, null, &&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch]
[&&, getScope, (, ), !=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node]
[), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (]
[!=, refinedScope, ), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;]
[), {, curNode, =, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (]
[=, node, ;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (, ), ;, }]
[;, pushScope, (, refinedScope, ), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (, ), ;, }, else, {]
[;, traverseBranch, (, node, ,, parent, ), ;, popScope, (, ), ;, }, else, {, traverseBranch, (, node, ,, parent]
[), ;, traverseBranch, (, node, ,, parent, ), ;, popScope, (, ), ;, }, else, {, traverseBranch, (, node, ,]
[;, popScope, (, ), ;, }, else, {, traverseBranch, (, node, ,, parent, ), ;, }, }, public, Compiler, getCompiler]
[,, parent, ), ;, popScope, (, ), ;, }, else, {, traverseBranch, (, node, ,, parent, ), ;, }, }]
[), ;, popScope, (, ), ;, }, else, {, traverseBranch, (, node, ,, parent, ), ;, }, }, public, Compiler]
[;, }, else, {, traverseBranch, (, node, ,, parent, ), ;, }, }, public, Compiler, getCompiler, (, ), {, return]
[;, }, }, public, Compiler, getCompiler, (, ), {, return, (, Compiler, ), compiler, ;, }, public, int, getLineNumber, (]
[,, parent, ), ;, }, }, public, Compiler, getCompiler, (, ), {, return, (, Compiler, ), compiler, ;, }, public]
[), ;, }, }, public, Compiler, getCompiler, (, ), {, return, (, Compiler, ), compiler, ;, }, public, int, getLineNumber]
[;, }, public, int, getLineNumber, (, ), {, Node, cur, =, curNode, ;, while, (, cur, !=, null, ), {]
[;, }, public, int, getLineNumber, (, ), {, Node, cur, =, curNode, ;, while, (, cur, !=, null, ), {]
[;, while, (, cur, !=, null, ), {, int, line, =, cur, ., getLineno, (, ), ;, if, (, line]
[), {, int, line, =, cur, ., getLineno, (, ), ;, if, (, line, >=, 0, ), {, return, line]
[!=, null, ), {, int, line, =, cur, ., getLineno, (, ), ;, if, (, line, >=, 0, ), {]
[), {, int, line, =, cur, ., getLineno, (, ), ;, if, (, line, >=, 0, ), {, return, line]
[;, if, (, line, >=, 0, ), {, return, line, ;, }, cur, =, cur, ., getParent, (, ), ;]
[., getLineno, (, ), ;, if, (, line, >=, 0, ), {, return, line, ;, }, cur, =, cur, .]
[), {, return, line, ;, }, cur, =, cur, ., getParent, (, ), ;, }, return, 0, ;, }, public]
[>=, 0, ), {, return, line, ;, }, cur, =, cur, ., getParent, (, ), ;, }, return, 0, ;]
[), {, return, line, ;, }, cur, =, cur, ., getParent, (, ), ;, }, return, 0, ;, }, public]
[;, }, cur, =, cur, ., getParent, (, ), ;, }, return, 0, ;, }, public, String, getSourceName, (, )]
[=, cur, ., getParent, (, ), ;, }, return, 0, ;, }, public, String, getSourceName, (, ), {, return, sourceName]
[;, }, return, 0, ;, }, public, String, getSourceName, (, ), {, return, sourceName, ;, }, public, CompilerInput, getInput, (]
[., getParent, (, ), ;, }, return, 0, ;, }, public, String, getSourceName, (, ), {, return, sourceName, ;, }]
[;, }, public, String, getSourceName, (, ), {, return, sourceName, ;, }, public, CompilerInput, getInput, (, ), {, return, compiler]
[;, }, public, CompilerInput, getInput, (, ), {, return, compiler, ., getInput, (, inputId, ), ;, }, public, JSModule, getModule]
[;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return, input, ==, null, ?]
[., getInput, (, inputId, ), ;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;]
[), ;, }, public, JSModule, getModule, (, ), {, CompilerInput, input, =, getInput, (, ), ;, return, input, ==, null]
[;, return, input, ==, null, ?, null, :, input, ., getModule, (, ), ;, }, public, Node, getCurrentNode, (, )]
[;, }, public, Node, getCurrentNode, (, ), {, return, curNode, ;, }, public, static, void, traverse, (, AbstractCompiler, compiler, ,]
[?, null, :, input, ., getModule, (, ), ;, }, public, Node, getCurrentNode, (, ), {, return, curNode, ;, }]
[==, null, ?, null, :, input, ., getModule, (, ), ;, }, public, Node, getCurrentNode, (, ), {, return, curNode]
[?, null, :, input, ., getModule, (, ), ;, }, public, Node, getCurrentNode, (, ), {, return, curNode, ;, }]
[:, input, ., getModule, (, ), ;, }, public, Node, getCurrentNode, (, ), {, return, curNode, ;, }, public, static]
[;, }, public, Node, getCurrentNode, (, ), {, return, curNode, ;, }, public, static, void, traverse, (, AbstractCompiler, compiler, ,]
[., getModule, (, ), ;, }, public, Node, getCurrentNode, (, ), {, return, curNode, ;, }, public, static, void, traverse]
[;, }, public, static, void, traverse, (, AbstractCompiler, compiler, ,, Node, root, ,, Callback, cb, ), {, NodeTraversal, t, =]
[;, t, ., traverse, (, root, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, List, <, Node]
[,, cb, ), ;, t, ., traverse, (, root, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,]
[), ;, t, ., traverse, (, root, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, List, <]
[;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, List, <, Node, >, roots, ,, Callback, cb, ), {]
[., traverse, (, root, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, List, <, Node, >, roots]
[), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, List, <, Node, >, roots, ,, Callback, cb, )]
[;, t, ., traverseRoots, (, roots, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, Callback, cb, ,]
[,, cb, ), ;, t, ., traverseRoots, (, roots, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,]
[), ;, t, ., traverseRoots, (, roots, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, Callback, cb]
[;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, Callback, cb, ,, Node, ..., roots, ), {, NodeTraversal, t]
[., traverseRoots, (, roots, ), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, Callback, cb, ,, Node, ...]
[), ;, }, public, static, void, traverseRoots, (, AbstractCompiler, compiler, ,, Callback, cb, ,, Node, ..., roots, ), {, NodeTraversal]
[;, t, ., traverseRoots, (, roots, ), ;, }, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch, (, Node, n]
[,, cb, ), ;, t, ., traverseRoots, (, roots, ), ;, }, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch]
[), ;, t, ., traverseRoots, (, roots, ), ;, }, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch, (, Node]
[;, }, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch, (, Node, n, ,, Node, parent, ), {, int, type]
[., traverseRoots, (, roots, ), ;, }, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch, (, Node, n, ,, Node]
[), ;, }, @, SuppressWarnings, (, "fallthrough", ), private, void, traverseBranch, (, Node, n, ,, Node, parent, ), {, int]
[private, void, traverseBranch, (, Node, n, ,, Node, parent, ), {, int, type, =, n, ., getType, (, ), ;]
[), private, void, traverseBranch, (, Node, n, ,, Node, parent, ), {, int, type, =, n, ., getType, (, )]
[;, if, (, type, ==, Token, ., SCRIPT, ), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =]
[., getType, (, ), ;, if, (, type, ==, Token, ., SCRIPT, ), {, inputId, =, n, ., getInputId, (]
[), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =]
[==, Token, ., SCRIPT, ), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, )]
[), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =]
[., SCRIPT, ), {, inputId, =, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }]
[=, n, ., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if]
[;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (, !, callback, ., shouldTraverse, (]
[., getInputId, (, ), ;, sourceName, =, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (, !]
[=, getSourceName, (, n, ), ;, }, curNode, =, n, ;, if, (, !, callback, ., shouldTraverse, (, this, ,]
[;, }, curNode, =, n, ;, if, (, !, callback, ., shouldTraverse, (, this, ,, n, ,, parent, ), )]
[), ;, }, curNode, =, n, ;, if, (, !, callback, ., shouldTraverse, (, this, ,, n, ,, parent, )]
[=, n, ;, if, (, !, callback, ., shouldTraverse, (, this, ,, n, ,, parent, ), ), return, ;, switch]
[;, if, (, !, callback, ., shouldTraverse, (, this, ,, n, ,, parent, ), ), return, ;, switch, (, type]
[), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, traverseFunction, (, n, ,, parent, ), ;]
[), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, traverseFunction, (, n, ,, parent, ), ;]
[., shouldTraverse, (, this, ,, n, ,, parent, ), ), return, ;, switch, (, type, ), {, case, Token, .]
[,, n, ,, parent, ), ), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, traverseFunction, (]
[,, parent, ), ), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, traverseFunction, (, n, ,]
[), ), return, ;, switch, (, type, ), {, case, Token, ., FUNCTION, :, traverseFunction, (, n, ,, parent, )]
[), {, case, Token, ., FUNCTION, :, traverseFunction, (, n, ,, parent, ), ;, break, ;, default, :, for, (]
[:, traverseFunction, (, n, ,, parent, ), ;, break, ;, default, :, for, (, Node, child, =, n, ., getFirstChild]
[., FUNCTION, :, traverseFunction, (, n, ,, parent, ), ;, break, ;, default, :, for, (, Node, child, =, n]
[;, break, ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[,, parent, ), ;, break, ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child]
[), ;, break, ;, default, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null]
[;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (, child, ,]
[., getFirstChild, (, ), ;, child, !=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (, child, ,, n, ), ;, child]
[!=, null, ;, ), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (, child, ,, n, )]
[;, ), {, Node, next, =, child, ., getNext, (, ), ;, traverseBranch, (, child, ,, n, ), ;, child]
[;, traverseBranch, (, child, ,, n, ), ;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;]
[., getNext, (, ), ;, traverseBranch, (, child, ,, n, ), ;, child, =, next, ;, }, break, ;, }]
[;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (, this, ,, n]
[,, n, ), ;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (]
[), ;, child, =, next, ;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (, this, ,]
[=, next, ;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (, this, ,, n, ,, parent]
[;, }, break, ;, }, curNode, =, n, ;, callback, ., visit, (, this, ,, n, ,, parent, ), ;]
[=, n, ;, callback, ., visit, (, this, ,, n, ,, parent, ), ;, }, private, void, traverseFunction, (, Node]
[;, callback, ., visit, (, this, ,, n, ,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,]
[;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., getChildCount]
[., visit, (, this, ,, n, ,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent]
[,, n, ,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, .]
[,, parent, ), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[), ;, }, private, void, traverseFunction, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, .]
[;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (]
[., checkState, (, n, ., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (]
[), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild]
[==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, fnName, =, n]
[., getChildCount, (, ), ==, 3, ), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final]
[), ;, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild]
[;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&]
[., checkState, (, n, ., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;]
[), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (, parent, !=, null, )]
[., isFunction, (, ), ), ;, final, Node, fnName, =, n, ., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (]
[;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !]
[., getFirstChild, (, ), ;, boolean, isFunctionExpression, =, (, parent, !=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, )]
[;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;, pushScope]
[&&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, )]
[), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n]
[!=, null, ), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName]
[), &&, NodeUtil, ., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n]
[;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;, pushScope]
[., isFunctionExpression, (, n, ), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }]
[), ;, if, (, !, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;]
[), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if]
[), {, traverseBranch, (, fnName, ,, n, ), ;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if]
[;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,]
[,, n, ), ;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch]
[), ;, }, curNode, =, n, ;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName]
[=, n, ;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;]
[;, pushScope, (, n, ), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, final]
[;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, final, Node, args, =, fnName, .]
[), ;, if, (, isFunctionExpression, ), {, traverseBranch, (, fnName, ,, n, ), ;, }, final, Node, args, =, fnName]
[), {, traverseBranch, (, fnName, ,, n, ), ;, }, final, Node, args, =, fnName, ., getNext, (, ), ;]
[;, }, final, Node, args, =, fnName, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (]
[,, n, ), ;, }, final, Node, args, =, fnName, ., getNext, (, ), ;, final, Node, body, =, args]
[), ;, }, final, Node, args, =, fnName, ., getNext, (, ), ;, final, Node, body, =, args, ., getNext]
[;, final, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, Preconditions, .]
[., getNext, (, ), ;, final, Node, body, =, args, ., getNext, (, ), ;, traverseBranch, (, args, ,, n]
[;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&]
[., getNext, (, ), ;, traverseBranch, (, args, ,, n, ), ;, Preconditions, ., checkState, (, body, ., getNext, (]
[;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,, body]
[,, n, ), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (]
[), ;, Preconditions, ., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,]
[;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node]
[., checkState, (, body, ., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,, body, ), ;]
[,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked"]
[&&, body, ., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, )]
[==, null, &&, body, ., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope]
[., getNext, (, ), ==, null, &&, body, ., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,]
[&&, body, ., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, )]
[,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked"]
[., isBlock, (, ), ,, body, ), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }]
[), ;, traverseBranch, (, body, ,, n, ), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public]
[;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (, scopes]
[,, n, ), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {]
[), ;, popScope, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (]
[;, }, @, SuppressWarnings, (, "unchecked", ), public, Node, getEnclosingFunction, (, ), {, if, (, scopes, ., size, (, )]
[public, Node, getEnclosingFunction, (, ), {, if, (, scopes, ., size, (, ), +, scopeRoots, ., size, (, ), <]
[), public, Node, getEnclosingFunction, (, ), {, if, (, scopes, ., size, (, ), +, scopeRoots, ., size, (, )]
[), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scopes, .]
[<, 2, ), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[+, scopeRoots, ., size, (, ), <, 2, ), {, return, null, ;, }, else, {, if, (, scopeRoots, .]
[., size, (, ), +, scopeRoots, ., size, (, ), <, 2, ), {, return, null, ;, }, else, {]
[<, 2, ), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return]
[., size, (, ), <, 2, ), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (]
[), {, return, null, ;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scopes, .]
[;, }, else, {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scopes, ., peek, (, ), .]
[), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return, scopeRoots, ., peek]
[., isEmpty, (, ), ), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {]
[;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }, }, }, private, void, pushScope, (, Node, node]
[., getRootNode, (, ), ;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }, }, }, private, void]
[., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }]
[;, }, }, }, private, void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (, curNode, !=, null, )]
[., peek, (, ), ;, }, }, }, private, void, pushScope, (, Node, node, ), {, Preconditions, ., checkState, (]
[;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null]
[., checkState, (, curNode, !=, null, ), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null]
[), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=]
[!=, null, ), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (]
[), ;, scopeRoots, ., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=]
[;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this]
[., push, (, node, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {]
[), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (]
[;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, pushScope]
[., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;]
[), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void]
[), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions]
[!=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, )]
[), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions]
[;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=, null, ), ;]
[., enterScope, (, this, ), ;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (]
[), ;, }, }, private, void, pushScope, (, Scope, s, ), {, Preconditions, ., checkState, (, curNode, !=, null, )]
[;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null]
[., checkState, (, curNode, !=, null, ), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null]
[), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=]
[!=, null, ), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (]
[), ;, scopes, ., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=]
[;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this]
[., push, (, s, ), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {]
[), ;, cfgs, ., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (]
[;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, popScope]
[., push, (, null, ), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;]
[), ;, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void]
[), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback]
[!=, null, ), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if]
[), {, scopeCallback, ., enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback]
[;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., exitScope, (]
[., enterScope, (, this, ), ;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback, !=, null, )]
[), ;, }, }, private, void, popScope, (, ), {, if, (, scopeCallback, !=, null, ), {, scopeCallback, ., exitScope]
[), {, scopeCallback, ., exitScope, (, this, ), ;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {, scopes]
[!=, null, ), {, scopeCallback, ., exitScope, (, this, ), ;, }, if, (, scopeRoots, ., isEmpty, (, ), )]
[), {, scopeCallback, ., exitScope, (, this, ), ;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {, scopes]
[;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {, scopes, ., pop, (, ), ;, }, else, {]
[., exitScope, (, this, ), ;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {, scopes, ., pop, (]
[), ;, }, if, (, scopeRoots, ., isEmpty, (, ), ), {, scopes, ., pop, (, ), ;, }, else]
[), {, scopes, ., pop, (, ), ;, }, else, {, scopeRoots, ., pop, (, ), ;, }, cfgs, .]
[., isEmpty, (, ), ), {, scopes, ., pop, (, ), ;, }, else, {, scopeRoots, ., pop, (, )]
[;, }, else, {, scopeRoots, ., pop, (, ), ;, }, cfgs, ., pop, (, ), ;, }, public, Scope]
[., pop, (, ), ;, }, else, {, scopeRoots, ., pop, (, ), ;, }, cfgs, ., pop, (, )]
[;, }, cfgs, ., pop, (, ), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =, scopes, .]
[., pop, (, ), ;, }, cfgs, ., pop, (, ), ;, }, public, Scope, getScope, (, ), {, Scope]
[;, }, public, Scope, getScope, (, ), {, Scope, scope, =, scopes, ., isEmpty, (, ), ?, null, :, scopes]
[., pop, (, ), ;, }, public, Scope, getScope, (, ), {, Scope, scope, =, scopes, ., isEmpty, (, )]
[;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scope, ;, }, Iterator, <, Node, >, it, =]
[?, null, :, scopes, ., peek, (, ), ;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scope]
[., isEmpty, (, ), ?, null, :, scopes, ., peek, (, ), ;, if, (, scopeRoots, ., isEmpty, (, )]
[:, scopes, ., peek, (, ), ;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scope, ;, }]
[;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scope, ;, }, Iterator, <, Node, >, it, =]
[., peek, (, ), ;, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scope, ;, }, Iterator, <]
[), {, return, scope, ;, }, Iterator, <, Node, >, it, =, scopeRoots, ., descendingIterator, (, ), ;, while, (]
[., isEmpty, (, ), ), {, return, scope, ;, }, Iterator, <, Node, >, it, =, scopeRoots, ., descendingIterator, (]
[;, }, Iterator, <, Node, >, it, =, scopeRoots, ., descendingIterator, (, ), ;, while, (, it, ., hasNext, (]
[;, while, (, it, ., hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (, it, ., next, (]
[., descendingIterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (]
[), {, scope, =, scopeCreator, ., createScope, (, it, ., next, (, ), ,, scope, ), ;, scopes, ., push]
[., hasNext, (, ), ), {, scope, =, scopeCreator, ., createScope, (, it, ., next, (, ), ,, scope, )]
[=, scopeCreator, ., createScope, (, it, ., next, (, ), ,, scope, ), ;, scopes, ., push, (, scope, )]
[;, scopes, ., push, (, scope, ), ;, }, scopeRoots, ., clear, (, ), ;, return, scope, ;, }, public]
[., createScope, (, it, ., next, (, ), ,, scope, ), ;, scopes, ., push, (, scope, ), ;, }]
[,, scope, ), ;, scopes, ., push, (, scope, ), ;, }, scopeRoots, ., clear, (, ), ;, return, scope]
[., next, (, ), ,, scope, ), ;, scopes, ., push, (, scope, ), ;, }, scopeRoots, ., clear, (]
[), ;, scopes, ., push, (, scope, ), ;, }, scopeRoots, ., clear, (, ), ;, return, scope, ;, }]
[;, }, scopeRoots, ., clear, (, ), ;, return, scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, )]
[., push, (, scope, ), ;, }, scopeRoots, ., clear, (, ), ;, return, scope, ;, }, public, ControlFlowGraph, <]
[), ;, }, scopeRoots, ., clear, (, ), ;, return, scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (]
[;, return, scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, ), {, if, (, cfgs, ., peek, (]
[., clear, (, ), ;, return, scope, ;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, ), {, if, (]
[;, }, public, ControlFlowGraph, <, Node, >, getControlFlowGraph, (, ), {, if, (, cfgs, ., peek, (, ), ==, null]
[), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, cfa, ., process, (, null]
[==, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, cfa, ., process]
[., peek, (, ), ==, null, ), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, )]
[), {, ControlFlowAnalysis, cfa, =, new, ControlFlowAnalysis, (, compiler, ,, false, ,, true, ), ;, cfa, ., process, (, null]
[;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;, cfgs, .]
[,, false, ,, true, ), ;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop]
[,, true, ), ;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, )]
[), ;, cfa, ., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;, cfgs]
[;, cfgs, ., pop, (, ), ;, cfgs, ., push, (, cfa, ., getCfg, (, ), ), ;, }, return]
[., process, (, null, ,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;, cfgs, ., push, (]
[,, getScopeRoot, (, ), ), ;, cfgs, ., pop, (, ), ;, cfgs, ., push, (, cfa, ., getCfg, (]
[), ;, cfgs, ., pop, (, ), ;, cfgs, ., push, (, cfa, ., getCfg, (, ), ), ;, }]
[;, cfgs, ., push, (, cfa, ., getCfg, (, ), ), ;, }, return, cfgs, ., peek, (, ), ;]
[., pop, (, ), ;, cfgs, ., push, (, cfa, ., getCfg, (, ), ), ;, }, return, cfgs, .]
[;, }, return, cfgs, ., peek, (, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (, scopeRoots, .]
[., push, (, cfa, ., getCfg, (, ), ), ;, }, return, cfgs, ., peek, (, ), ;, }, public]
[), ;, }, return, cfgs, ., peek, (, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (, scopeRoots]
[., getCfg, (, ), ), ;, }, return, cfgs, ., peek, (, ), ;, }, public, Node, getScopeRoot, (, )]
[;, }, public, Node, getScopeRoot, (, ), {, if, (, scopeRoots, ., isEmpty, (, ), ), {, return, scopes, .]
[., peek, (, ), ;, }, public, Node, getScopeRoot, (, ), {, if, (, scopeRoots, ., isEmpty, (, ), )]
[), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return, scopeRoots, ., peek]
[., isEmpty, (, ), ), {, return, scopes, ., peek, (, ), ., getRootNode, (, ), ;, }, else, {]
[;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }, }, boolean, inGlobalScope, (, ), {, return, getScopeDepth]
[., getRootNode, (, ), ;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }, }, boolean, inGlobalScope, (]
[., peek, (, ), ., getRootNode, (, ), ;, }, else, {, return, scopeRoots, ., peek, (, ), ;, }]
[;, }, }, boolean, inGlobalScope, (, ), {, return, getScopeDepth, (, ), <=, 1, ;, }, int, getScopeDepth, (, )]
[., peek, (, ), ;, }, }, boolean, inGlobalScope, (, ), {, return, getScopeDepth, (, ), <=, 1, ;, }]
[;, }, int, getScopeDepth, (, ), {, return, scopes, ., size, (, ), +, scopeRoots, ., size, (, ), ;]
[<=, 1, ;, }, int, getScopeDepth, (, ), {, return, scopes, ., size, (, ), +, scopeRoots, ., size, (]
[;, }, int, getScopeDepth, (, ), {, return, scopes, ., size, (, ), +, scopeRoots, ., size, (, ), ;]
[;, }, public, boolean, hasScope, (, ), {, return, !, (, scopes, ., isEmpty, (, ), &&, scopeRoots, ., isEmpty]
[+, scopeRoots, ., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !, (, scopes, ., isEmpty]
[., size, (, ), +, scopeRoots, ., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !]
[;, }, public, boolean, hasScope, (, ), {, return, !, (, scopes, ., isEmpty, (, ), &&, scopeRoots, ., isEmpty]
[., size, (, ), ;, }, public, boolean, hasScope, (, ), {, return, !, (, scopes, ., isEmpty, (, )]
[;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error, =]
[;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error, =]
[), ;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error]
[&&, scopeRoots, ., isEmpty, (, ), ), ;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String]
[., isEmpty, (, ), &&, scopeRoots, ., isEmpty, (, ), ), ;, }, public, void, report, (, Node, n, ,]
[), ;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments, ), {, JSError, error]
[., isEmpty, (, ), ), ;, }, public, void, report, (, Node, n, ,, DiagnosticType, diagnosticType, ,, String, ..., arguments]
[;, compiler, ., report, (, error, ), ;, }, private, static, String, getSourceName, (, Node, n, ), {, String, name]
[., make, (, getBestSourceFileName, (, n, ), ,, n, ,, diagnosticType, ,, arguments, ), ;, compiler, ., report, (, error]
[,, n, ,, diagnosticType, ,, arguments, ), ;, compiler, ., report, (, error, ), ;, }, private, static, String, getSourceName]
[), ,, n, ,, diagnosticType, ,, arguments, ), ;, compiler, ., report, (, error, ), ;, }, private, static, String]
[,, diagnosticType, ,, arguments, ), ;, compiler, ., report, (, error, ), ;, }, private, static, String, getSourceName, (, Node]
[,, arguments, ), ;, compiler, ., report, (, error, ), ;, }, private, static, String, getSourceName, (, Node, n, )]
[), ;, compiler, ., report, (, error, ), ;, }, private, static, String, getSourceName, (, Node, n, ), {, String]
[;, }, private, static, String, getSourceName, (, Node, n, ), {, String, name, =, n, ., getSourceFileName, (, ), ;]
[., report, (, error, ), ;, }, private, static, String, getSourceName, (, Node, n, ), {, String, name, =, n]
[), ;, }, private, static, String, getSourceName, (, Node, n, ), {, String, name, =, n, ., getSourceFileName, (, )]
[;, return, name, ==, null, ?, "", :, name, ;, }, InputId, getInputId, (, ), {, return, inputId, ;, }]
[., getSourceFileName, (, ), ;, return, name, ==, null, ?, "", :, name, ;, }, InputId, getInputId, (, ), {]
[;, }, InputId, getInputId, (, ), {, return, inputId, ;, }, public, JSError, makeError, (, Node, n, ,, CheckLevel, level]
[?, "", :, name, ;, }, InputId, getInputId, (, ), {, return, inputId, ;, }, public, JSError, makeError, (, Node]
[==, null, ?, "", :, name, ;, }, InputId, getInputId, (, ), {, return, inputId, ;, }, public, JSError, makeError]
[?, "", :, name, ;, }, InputId, getInputId, (, ), {, return, inputId, ;, }, public, JSError, makeError, (, Node]
[:, name, ;, }, InputId, getInputId, (, ), {, return, inputId, ;, }, public, JSError, makeError, (, Node, n, ,]
[;, }, InputId, getInputId, (, ), {, return, inputId, ;, }, public, JSError, makeError, (, Node, n, ,, CheckLevel, level]
[;, }, public, JSError, makeError, (, Node, n, ,, CheckLevel, level, ,, DiagnosticType, type, ,, String, ..., arguments, ), {]
[;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError, .]
[., make, (, getBestSourceFileName, (, n, ), ,, n, ,, level, ,, type, ,, arguments, ), ;, }, public, JSError]
[,, n, ,, level, ,, type, ,, arguments, ), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type]
[), ,, n, ,, level, ,, type, ,, arguments, ), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType]
[,, level, ,, type, ,, arguments, ), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String]
[,, type, ,, arguments, ), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments]
[,, arguments, ), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {]
[), ;, }, public, JSError, makeError, (, Node, n, ,, DiagnosticType, type, ,, String, ..., arguments, ), {, return, JSError]
[;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==, null, ?, sourceName, :, n, ., getSourceFileName]
[., make, (, getBestSourceFileName, (, n, ), ,, n, ,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (]
[,, n, ,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==]
[), ,, n, ,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n]
[,, type, ,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==, null, ?]
[,, arguments, ), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==, null, ?, sourceName, :]
[), ;, }, private, String, getBestSourceFileName, (, Node, n, ), {, return, n, ==, null, ?, sourceName, :, n, .]
[;, }, }]
[?, sourceName, :, n, ., getSourceFileName, (, ), ;, }, }]
[==, null, ?, sourceName, :, n, ., getSourceFileName, (, ), ;, }, }]
[?, sourceName, :, n, ., getSourceFileName, (, ), ;, }, }]
[:, n, ., getSourceFileName, (, ), ;, }, }]
[;, }, }]
[., getSourceFileName, (, ), ;, }, }]
