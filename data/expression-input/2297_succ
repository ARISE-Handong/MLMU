[;, public, MultiStartMultivariateVectorOptimizer, (, final, MultivariateVectorOptimizer, optimizer, ,, final, int, starts, ,, final, RandomVectorGenerator, generator, ), throws, NullArgumentException, ,, NotStrictlyPositiveException]
[,, starts, ,, generator, ), ;, this, ., optimizer, =, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima]
[,, generator, ), ;, this, ., optimizer, =, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, )]
[), ;, this, ., optimizer, =, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections]
[=, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections, ., sort, (, optima, ,]
[., optimizer, =, optimizer, ;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections, ., sort, (]
[;, }, @, Override, public, PointVectorValuePair, [, ], getOptima, (, ), {, Collections, ., sort, (, optima, ,, getPairComparator, (]
[;, return, optima, ., toArray, (, new, PointVectorValuePair, [, 0, ], ), ;, }, @, Override, protected, void, store, (]
[., sort, (, optima, ,, getPairComparator, (, ), ), ;, return, optima, ., toArray, (, new, PointVectorValuePair, [, 0, ]]
[,, getPairComparator, (, ), ), ;, return, optima, ., toArray, (, new, PointVectorValuePair, [, 0, ], ), ;, }, @]
[), ;, return, optima, ., toArray, (, new, PointVectorValuePair, [, 0, ], ), ;, }, @, Override, protected, void, store]
[;, }, @, Override, protected, void, store, (, PointVectorValuePair, optimum, ), {, optima, ., add, (, optimum, ), ;, }]
[., toArray, (, new, PointVectorValuePair, [, 0, ], ), ;, }, @, Override, protected, void, store, (, PointVectorValuePair, optimum, )]
[), ;, }, @, Override, protected, void, store, (, PointVectorValuePair, optimum, ), {, optima, ., add, (, optimum, ), ;]
[], ), ;, }, @, Override, protected, void, store, (, PointVectorValuePair, optimum, ), {, optima, ., add, (, optimum, )]
[;, }, @, Override, protected, void, clear, (, ), {, optima, ., clear, (, ), ;, }, private, Comparator, <]
[., add, (, optimum, ), ;, }, @, Override, protected, void, clear, (, ), {, optima, ., clear, (, )]
[), ;, }, @, Override, protected, void, clear, (, ), {, optima, ., clear, (, ), ;, }, private, Comparator]
[;, }, private, Comparator, <, PointVectorValuePair, >, getPairComparator, (, ), {, return, new, Comparator, <, PointVectorValuePair, >, (, ), {]
[., clear, (, ), ;, }, private, Comparator, <, PointVectorValuePair, >, getPairComparator, (, ), {, return, new, Comparator, <, PointVectorValuePair]
[;, }, }]
[;, private, final, RealMatrix, weight, =, optimizer, ., getWeight, (, ), ;, public, int, compare, (, final, PointVectorValuePair, o1, ,]
[,, false, ), ;, private, final, RealMatrix, weight, =, optimizer, ., getWeight, (, ), ;, public, int, compare, (, final]
[., getTarget, (, ), ,, false, ), ;, private, final, RealMatrix, weight, =, optimizer, ., getWeight, (, ), ;, public]
[), ;, private, final, RealMatrix, weight, =, optimizer, ., getWeight, (, ), ;, public, int, compare, (, final, PointVectorValuePair, o1]
[;, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (, o1, ==, null, )]
[., getWeight, (, ), ;, public, int, compare, (, final, PointVectorValuePair, o1, ,, final, PointVectorValuePair, o2, ), {, if, (]
[), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null]
[==, null, ), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2]
[), {, return, (, o2, ==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (]
[?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return]
[), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }]
[==, null, ), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1]
[), ?, 0, :, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }]
[:, 1, ;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, .]
[;, }, else, if, (, o2, ==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (]
[), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2]
[==, null, ), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual]
[), {, return, -, 1, ;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2]
[;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2, ), ), ;, }, private]
[;, }, return, Double, ., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2, ), ), ;, }, private]
[;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v, =, new, ArrayRealVector, (, pv, .]
[., compare, (, weightedResidual, (, o1, ), ,, weightedResidual, (, o2, ), ), ;, }, private, double, weightedResidual, (, final]
[,, weightedResidual, (, o2, ), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v]
[), ,, weightedResidual, (, o2, ), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector]
[), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v, =, new, ArrayRealVector, (, pv]
[), ), ;, }, private, double, weightedResidual, (, final, PointVectorValuePair, pv, ), {, final, RealVector, v, =, new, ArrayRealVector, (]
[;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return, r, ., dotProduct, (, weight, ., operate]
[,, false, ), ;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return, r, ., dotProduct, (]
[., getValueRef, (, ), ,, false, ), ;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return]
[), ;, final, RealVector, r, =, target, ., subtract, (, v, ), ;, return, r, ., dotProduct, (, weight, .]
[;, return, r, ., dotProduct, (, weight, ., operate, (, r, ), ), ;, }, }, ;, }, }]
[., subtract, (, v, ), ;, return, r, ., dotProduct, (, weight, ., operate, (, r, ), ), ;, }]
[), ;, return, r, ., dotProduct, (, weight, ., operate, (, r, ), ), ;, }, }, ;, }, }]
[;, }, }, ;, }, }]
[., dotProduct, (, weight, ., operate, (, r, ), ), ;, }, }, ;, }, }]
[), ;, }, }, ;, }, }]
[., operate, (, r, ), ), ;, }, }, ;, }, }]
[), ), ;, }, }, ;, }, }]
