[;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, ), {, this, .]
[., error, (, "JSC_MISSING_LINE_INFO", ,, "No source location information associated with {0}.\n", +, "Most likely a Node has been created with settings the source file ", +, "and line/column location.  Usually this is done using ", +, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private]
[,, "No source location information associated with {0}.\n", +, "Most likely a Node has been created with settings the source file ", +, "and line/column location.  Usually this is done using ", +, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false]
[), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, ), {, this]
[+, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, )]
[+, "and line/column location.  Usually this is done using ", +, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler]
[+, "Most likely a Node has been created with settings the source file ", +, "and line/column location.  Usually this is done using ", +, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck]
[+, "and line/column location.  Usually this is done using ", +, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler]
[+, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, )]
[), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, ), {, this]
[;, LineNumberCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, public, void, setCheckSubTree, (, Node, root]
[=, compiler, ;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;, NodeTraversal, ., traverse, (]
[., compiler, =, compiler, ;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;, NodeTraversal, .]
[;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,]
[=, true, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, process]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, process, (, Node]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =, false, ;, NodeTraversal]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, void, process, (, Node, externs, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[,, this, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =, false, ;]
[=, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[., traverse, (, compiler, ,, root, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,]
[,, root, ,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, this, ), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, )]
[), ;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[), {, requiresLineNumbers, =, true, ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,]
[., isScript, (, ), ), {, requiresLineNumbers, =, true, ;, }, return, true, ;, }, @, Override, public, void, visit]
[=, true, ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, requiresLineNumbers, =, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, )]
[., isScript, (, ), ), {, requiresLineNumbers, =, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (, n]
[=, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==, -, 1]
[;, }, else, if, (, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==, -, 1, ), {]
[), {, if, (, n, ., getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (, t, .]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO, ,, n, ., toStringTree, (, ), )]
[==, -, 1, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO, ,, n, ., toStringTree]
[., getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO, ,, n, ., toStringTree, (, ), )]
[), {, compiler, ., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO, ,, n, ., toStringTree, (, ), )]
[;, }, }, }, }]
[., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO, ,, n, ., toStringTree, (, ), ), ), ;, }]
[), ;, }, }, }, }]
[., makeError, (, n, ,, MISSING_LINE_INFO, ,, n, ., toStringTree, (, ), ), ), ;, }, }, }, }]
[,, MISSING_LINE_INFO, ,, n, ., toStringTree, (, ), ), ), ;, }, }, }, }]
[,, n, ., toStringTree, (, ), ), ), ;, }, }, }, }]
[), ), ;, }, }, }, }]
[., toStringTree, (, ), ), ), ;, }, }, }, }]
