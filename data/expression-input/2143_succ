[;, }, public, static, long, convertToLong, (, int, [, ], seed, ), {, final, long, prime, =, 4294967291l, ;, long]
[;, }, public, void, setSeed, (, int, [, ], seed, ), {, rng, ., setSeed, (, convertToLong, (, seed, )]
[., setSeed, (, (, long, ), seed, ), ;, }, public, void, setSeed, (, int, [, ], seed, ), {]
[), ;, }, public, void, setSeed, (, int, [, ], seed, ), {, rng, ., setSeed, (, convertToLong, (, seed]
[), ;, }, public, void, setSeed, (, int, [, ], seed, ), {, rng, ., setSeed, (, convertToLong, (, seed]
[;, }, public, void, setSeed, (, long, seed, ), {, rng, ., setSeed, (, seed, ), ;, }, public, void]
[., setSeed, (, convertToLong, (, seed, ), ), ;, }, public, void, setSeed, (, long, seed, ), {, rng, .]
[), ;, }, public, void, setSeed, (, long, seed, ), {, rng, ., setSeed, (, seed, ), ;, }, public]
[), ), ;, }, public, void, setSeed, (, long, seed, ), {, rng, ., setSeed, (, seed, ), ;, }]
[;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, rng, ., nextBytes, (, bytes, ), ;, }]
[., setSeed, (, seed, ), ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, rng, ., nextBytes]
[), ;, }, public, void, nextBytes, (, byte, [, ], bytes, ), {, rng, ., nextBytes, (, bytes, ), ;]
[;, }, public, int, nextInt, (, ), {, return, rng, ., nextInt, (, ), ;, }, public, int, nextInt, (]
[., nextBytes, (, bytes, ), ;, }, public, int, nextInt, (, ), {, return, rng, ., nextInt, (, ), ;]
[), ;, }, public, int, nextInt, (, ), {, return, rng, ., nextInt, (, ), ;, }, public, int, nextInt]
[;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[., nextInt, (, ), ;, }, public, int, nextInt, (, int, n, ), {, if, (, n, <=, 0, )]
[), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, return, rng, ., nextInt, (, n, ), ;, }, public]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, return, rng, ., nextInt, (, n, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, n, ), ;, }, return, rng, ., nextInt, (, n, ), ;, }, public]
[;, }, return, rng, ., nextInt, (, n, ), ;, }, public, long, nextLong, (, ), {, return, rng, .]
[), ;, }, return, rng, ., nextInt, (, n, ), ;, }, public, long, nextLong, (, ), {, return, rng]
[;, }, public, long, nextLong, (, ), {, return, rng, ., nextLong, (, ), ;, }, public, boolean, nextBoolean, (]
[., nextInt, (, n, ), ;, }, public, long, nextLong, (, ), {, return, rng, ., nextLong, (, ), ;]
[), ;, }, public, long, nextLong, (, ), {, return, rng, ., nextLong, (, ), ;, }, public, boolean, nextBoolean]
[;, }, public, boolean, nextBoolean, (, ), {, return, rng, ., nextBoolean, (, ), ;, }, public, float, nextFloat, (]
[., nextLong, (, ), ;, }, public, boolean, nextBoolean, (, ), {, return, rng, ., nextBoolean, (, ), ;, }]
[;, }, public, float, nextFloat, (, ), {, return, rng, ., nextFloat, (, ), ;, }, public, double, nextDouble, (]
[., nextBoolean, (, ), ;, }, public, float, nextFloat, (, ), {, return, rng, ., nextFloat, (, ), ;, }]
[;, }, public, double, nextDouble, (, ), {, return, rng, ., nextDouble, (, ), ;, }, public, double, nextGaussian, (]
[., nextFloat, (, ), ;, }, public, double, nextDouble, (, ), {, return, rng, ., nextDouble, (, ), ;, }]
[;, }, public, double, nextGaussian, (, ), {, return, rng, ., nextGaussian, (, ), ;, }, }, ;, }, public]
[., nextDouble, (, ), ;, }, public, double, nextGaussian, (, ), {, return, rng, ., nextGaussian, (, ), ;, }]
[;, }, }, ;, }, public, static, long, convertToLong, (, int, [, ], seed, ), {, final, long, prime, =]
[., nextGaussian, (, ), ;, }, }, ;, }, public, static, long, convertToLong, (, int, [, ], seed, ), {]
[;, long, combined, =, 0l, ;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +]
[;, for, (, int, s, :, seed, ), {, combined, =, combined, *, prime, +, s, ;, }, return, combined]
[), {, combined, =, combined, *, prime, +, s, ;, }, return, combined, ;, }, }]
[=, combined, *, prime, +, s, ;, }, return, combined, ;, }, }]
[;, }, return, combined, ;, }, }]
[+, s, ;, }, return, combined, ;, }, }]
[*, prime, +, s, ;, }, return, combined, ;, }, }]
[+, s, ;, }, return, combined, ;, }, }]
[;, }, return, combined, ;, }, }]
[;, }, }]
