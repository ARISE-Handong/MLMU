[;, private, final, double, probabilityOfSuccess, ;, public, GeometricDistribution, (, double, p, ), {, this, (, new, Well19937c, (, ), ,]
[,, p, ), ;, }, public, GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;]
[), ;, }, public, GeometricDistribution, (, RandomGenerator, rng, ,, double, p, ), {, super, (, rng, ), ;, if, (]
[), ;, if, (, p, <=, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, )]
[<=, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, )]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =]
[>, 1, ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, ), ;, }]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =]
[;, }, probabilityOfSuccess, =, p, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess, ;, }, public, double, probability]
[,, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =, p, ;, }, public, double, getProbabilityOfSuccess, (, ), {]
[., OUT_OF_RANGE_LEFT, ,, p, ,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =, p, ;, }, public, double, getProbabilityOfSuccess, (]
[,, 0, ,, 1, ), ;, }, probabilityOfSuccess, =, p, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess]
[,, 1, ), ;, }, probabilityOfSuccess, =, p, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess, ;, }]
[), ;, }, probabilityOfSuccess, =, p, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess, ;, }, public, double]
[=, p, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x]
[;, }, public, double, getProbabilityOfSuccess, (, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {]
[;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow]
[<, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath]
[), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow]
[=, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (, 1, -]
[;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, FastMath, ., pow, (, 1, -, p, ,]
[;, ret, =, FastMath, ., pow, (, 1, -, p, ,, x, ), *, p, ;, }, return, ret, ;]
[=, FastMath, ., pow, (, 1, -, p, ,, x, ), *, p, ;, }, return, ret, ;, }, public]
[;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x]
[*, p, ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if]
[., pow, (, 1, -, p, ,, x, ), *, p, ;, }, return, ret, ;, }, public, double, cumulativeProbability]
[,, x, ), *, p, ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double]
[-, p, ,, x, ), *, p, ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, )]
[,, x, ), *, p, ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double]
[), *, p, ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;]
[;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath]
[<, 0, ), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0]
[), {, ret, =, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath]
[=, 0.0, ;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (]
[;, }, else, {, final, double, p, =, probabilityOfSuccess, ;, ret, =, 1.0, -, FastMath, ., pow, (, 1, -]
[;, ret, =, 1.0, -, FastMath, ., pow, (, 1, -, p, ,, x, +, 1, ), ;, }, return]
[=, 1.0, -, FastMath, ., pow, (, 1, -, p, ,, x, +, 1, ), ;, }, return, ret, ;]
[;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (]
[-, FastMath, ., pow, (, 1, -, p, ,, x, +, 1, ), ;, }, return, ret, ;, }, public]
[;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (]
[., pow, (, 1, -, p, ,, x, +, 1, ), ;, }, return, ret, ;, }, public, double, getNumericalMean]
[,, x, +, 1, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p]
[-, p, ,, x, +, 1, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final]
[,, x, +, 1, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p]
[), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[+, 1, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess]
[), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, )]
[;, return, (, 1, -, p, ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, )]
[/, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -]
[), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1]
[-, p, ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return]
[), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, probabilityOfSuccess, ;, return, (, 1, -, p, )]
[;, return, (, 1, -, p, ), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, )]
[;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return, Integer]
[/, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int]
[), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public]
[-, p, ), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;]
[), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public]
[;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return, Integer]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[*, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, )]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[;, }, public, int, getSupportUpperBound, (, ), {, return, Integer, ., MAX_VALUE, ;, }, public, boolean, isSupportConnected, (, ), {]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[., MAX_VALUE, ;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
