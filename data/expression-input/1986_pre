[Map, ;, import, java, ., util, ., Set, ;, class, InlineObjectLiterals, implements, CompilerPass, {, public, static, final, String, VAR_PREFIX, =]
[private, final, Supplier, <, String, >, safeNameIdSupplier, ;, InlineObjectLiterals, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {]
[private, final, Supplier, <, String, >, safeNameIdSupplier, ;, InlineObjectLiterals, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {]
[String, >, safeNameIdSupplier, ;, InlineObjectLiterals, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =]
[safeNameIdSupplier, ;, InlineObjectLiterals, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =, compiler, ;]
[safeNameIdSupplier, ;, InlineObjectLiterals, (, AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, Supplier, <, String, >, safeNameIdSupplier, ), {, this, ., compiler, =, compiler, ;, this, ., safeNameIdSupplier, =]
[=, safeNameIdSupplier, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,]
[externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ), ;]
[externs, ,, Node, root, ), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ), ;]
[), {, ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ), ;, callback, ., process, (]
[ReferenceCollectingCallback, callback, =, new, ReferenceCollectingCallback, (, compiler, ,, new, InliningBehavior, (, ), ), ;, callback, ., process, (, externs, ,]
[externs, ,, root, ), ;, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =]
[externs, ,, root, ), ;, }, private, class, InliningBehavior, implements, Behavior, {, private, final, Set, <, Var, >, staleVars, =]
[Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (, Iterator, <, Var, >, it, =]
[Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (, Iterator, <, Var, >, it, =]
[Override, public, void, afterExitScope, (, NodeTraversal, t, ,, ReferenceMap, referenceMap, ), {, for, (, Iterator, <, Var, >, it, =]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[), {, for, (, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[., getScope, (, ), ., getVars, (, ), ;, it, ., hasNext, (, ), ;, ), {, Var, v, =]
[;, it, ., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, if, (]
[., hasNext, (, ), ;, ), {, Var, v, =, it, ., next, (, ), ;, if, (, isVarInlineForbidden, (]
[it, ., next, (, ), ;, if, (, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =]
[it, ., next, (, ), ;, if, (, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =]
[), ;, if, (, isVarInlineForbidden, (, v, ), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (]
[(, v, ), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (]
[), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, isInlinableObject, (]
[), ), {, continue, ;, }, ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, isInlinableObject, (]
[ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {]
[ReferenceCollection, referenceInfo, =, referenceMap, ., getReferences, (, v, ), ;, if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {]
[., getReferences, (, v, ), ;, if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {, staleVars, ., add, (]
[if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {, staleVars, ., add, (, v, ), ;, Reference, declaration, =]
[if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {, staleVars, ., add, (, v, ), ;, Reference, declaration, =]
[if, (, isInlinableObject, (, referenceInfo, ., references, ), ), {, staleVars, ., add, (, v, ), ;, Reference, declaration, =]
[references, ), ), {, staleVars, ., add, (, v, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (]
[add, (, v, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =]
[add, (, v, ), ;, Reference, declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =]
[declaration, =, referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;]
[referenceInfo, ., references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (]
[references, ., get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (, v, ,]
[get, (, 0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (, v, ,, declaration, ,]
[0, ), ;, Reference, init, =, referenceInfo, ., getInitializingReference, (, ), ;, splitObject, (, v, ,, declaration, ,, init, ,]
[init, ,, referenceInfo, ), ;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, ), {]
[init, ,, referenceInfo, ), ;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, ), {]
[;, }, }, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, ), {, NodeUtil, ., visitPreOrder, (]
[}, }, private, void, blacklistVarReferencesInTree, (, Node, root, ,, final, Scope, scope, ), {, NodeUtil, ., visitPreOrder, (, root, ,]
[,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (]
[,, new, NodeUtil, ., Visitor, (, ), {, @, Override, public, void, visit, (, Node, node, ), {, if, (]
[{, @, Override, public, void, visit, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {]
[{, @, Override, public, void, visit, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {]
[void, visit, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {, staleVars, ., add, (]
[void, visit, (, Node, node, ), {, if, (, node, ., isName, (, ), ), {, staleVars, ., add, (]
[node, ), {, if, (, node, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (]
[node, ), {, if, (, node, ., isName, (, ), ), {, staleVars, ., add, (, scope, ., getVar, (]
[staleVars, ., add, (, scope, ., getVar, (, node, ., getString, (, ), ), ), ;, }, }, }, ,]
[staleVars, ., add, (, scope, ., getVar, (, node, ., getString, (, ), ), ), ;, }, }, }, ,]
[;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[;, }, }, }, ,, NodeUtil, ., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return]
[., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||]
[., MATCH_NOT_FUNCTION, ), ;, }, private, boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||]
[boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||]
[boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||]
[boolean, isVarInlineForbidden, (, Var, var, ), {, return, var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||]
[var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (]
[var, ., isGlobal, (, ), ||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (]
[||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||]
[||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||]
[||, var, ., isExtern, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||]
[), ., isExported, (, var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||]
[var, ., name, ), ||, RenameProperties, ., RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, var, ., name, ), ||, staleVars, ., contains, (]
[contains, (, var, ), ;, }, private, boolean, isInlinableObject, (, List, <, Reference, >, refs, ), {, boolean, ret, =]
[isInlinableObject, (, List, <, Reference, >, refs, ), {, boolean, ret, =, false, ;, Set, <, String, >, validProperties, =]
[isInlinableObject, (, List, <, Reference, >, refs, ), {, boolean, ret, =, false, ;, Set, <, String, >, validProperties, =]
[=, false, ;, Set, <, String, >, validProperties, =, Sets, ., newHashSet, (, ), ;, for, (, Reference, ref, :]
[>, validProperties, =, Sets, ., newHashSet, (, ), ;, for, (, Reference, ref, :, refs, ), {, Node, name, =]
[>, validProperties, =, Sets, ., newHashSet, (, ), ;, for, (, Reference, ref, :, refs, ), {, Node, name, =]
[for, (, Reference, ref, :, refs, ), {, Node, name, =, ref, ., getNode, (, ), ;, Node, parent, =]
[for, (, Reference, ref, :, refs, ), {, Node, name, =, ref, ., getNode, (, ), ;, Node, parent, =]
[name, =, ref, ., getNode, (, ), ;, Node, parent, =, ref, ., getParent, (, ), ;, Node, gramps, =]
[name, =, ref, ., getNode, (, ), ;, Node, parent, =, ref, ., getParent, (, ), ;, Node, gramps, =]
[Node, parent, =, ref, ., getParent, (, ), ;, Node, gramps, =, ref, ., getGrandparent, (, ), ;, if, (]
[Node, parent, =, ref, ., getParent, (, ), ;, Node, gramps, =, ref, ., getGrandparent, (, ), ;, if, (]
[), ;, Node, gramps, =, ref, ., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (, ), ), {]
[), ;, Node, gramps, =, ref, ., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (, ), ), {]
[=, ref, ., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (, ), ), {, Preconditions, ., checkState, (]
[=, ref, ., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (, ), ), {, Preconditions, ., checkState, (]
[=, ref, ., getGrandparent, (, ), ;, if, (, parent, ., isGetProp, (, ), ), {, Preconditions, ., checkState, (]
[;, if, (, parent, ., isGetProp, (, ), ), {, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==]
[isGetProp, (, ), ), {, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (]
[isGetProp, (, ), ), {, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (]
[isGetProp, (, ), ), {, Preconditions, ., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (]
[., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (, gramps, ., isCall, (, ), &&]
[., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (, gramps, ., isCall, (, ), &&]
[., checkState, (, parent, ., getFirstChild, (, ), ==, name, ), ;, if, (, gramps, ., isCall, (, ), &&]
[(, ), ==, name, ), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==]
[), ;, if, (, gramps, ., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return]
[., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, false, ;, }, if, (]
[., isCall, (, ), &&, gramps, ., getFirstChild, (, ), ==, parent, ), {, return, false, ;, }, if, (]
[(, ), ==, parent, ), {, return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return]
[return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;, }, String, propName, =]
[return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;, }, String, propName, =]
[return, false, ;, }, if, (, gramps, ., isDelProp, (, ), ), {, return, false, ;, }, String, propName, =]
[{, return, false, ;, }, String, propName, =, parent, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[return, false, ;, }, String, propName, =, parent, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !]
[return, false, ;, }, String, propName, =, parent, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !]
[String, propName, =, parent, ., getLastChild, (, ), ., getString, (, ), ;, if, (, !, validProperties, ., contains, (]
[(, ), ., getString, (, ), ;, if, (, !, validProperties, ., contains, (, propName, ), ), {, if, (]
[(, ), ., getString, (, ), ;, if, (, !, validProperties, ., contains, (, propName, ), ), {, if, (]
[(, ), ;, if, (, !, validProperties, ., contains, (, propName, ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (]
[;, if, (, !, validProperties, ., contains, (, propName, ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,]
[validProperties, ., contains, (, propName, ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {]
[validProperties, ., contains, (, propName, ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {]
[propName, ), ), {, if, (, NodeUtil, ., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {, validProperties, ., add, (]
[., isVarOrSimpleAssignLhs, (, parent, ,, gramps, ), ), {, validProperties, ., add, (, propName, ), ;, }, else, {, return]
[validProperties, ., add, (, propName, ), ;, }, else, {, return, false, ;, }, }, continue, ;, }, if, (]
[., add, (, propName, ), ;, }, else, {, return, false, ;, }, }, continue, ;, }, if, (, !]
[(, propName, ), ;, }, else, {, return, false, ;, }, }, continue, ;, }, if, (, !, isVarOrAssignExprLhs, (]
[else, {, return, false, ;, }, }, continue, ;, }, if, (, !, isVarOrAssignExprLhs, (, name, ), ), {, return]
[}, continue, ;, }, if, (, !, isVarOrAssignExprLhs, (, name, ), ), {, return, false, ;, }, Node, val, =]
[}, continue, ;, }, if, (, !, isVarOrAssignExprLhs, (, name, ), ), {, return, false, ;, }, Node, val, =]
[(, name, ), ), {, return, false, ;, }, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (]
[(, name, ), ), {, return, false, ;, }, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (]
[), ), {, return, false, ;, }, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, ==]
[val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, ==, null, ), {, continue, ;, }, if, (]
[=, ref, ., getAssignedValue, (, ), ;, if, (, val, ==, null, ), {, continue, ;, }, if, (, !]
[=, ref, ., getAssignedValue, (, ), ;, if, (, val, ==, null, ), {, continue, ;, }, if, (, !]
[(, val, ==, null, ), {, continue, ;, }, if, (, !, val, ., isObjectLit, (, ), ), {, return]
[}, if, (, !, val, ., isObjectLit, (, ), ), {, return, false, ;, }, for, (, Node, child, =]
[}, if, (, !, val, ., isObjectLit, (, ), ), {, return, false, ;, }, for, (, Node, child, =]
[isObjectLit, (, ), ), {, return, false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;]
[isObjectLit, (, ), ), {, return, false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;]
[), ), {, return, false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=]
[{, return, false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;]
[false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[false, ;, }, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isGetterDef, (, ), ||]
[!=, null, ;, child, =, child, ., getNext, (, ), ), {, if, (, child, ., isGetterDef, (, ), ||]
[(, ), ), {, if, (, child, ., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), ), {, return]
[{, if, (, child, ., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), ), {, return, false, ;, }]
[{, if, (, child, ., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), ), {, return, false, ;, }]
[., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), ), {, return, false, ;, }, validProperties, ., add, (]
[., isGetterDef, (, ), ||, child, ., isSetterDef, (, ), ), {, return, false, ;, }, validProperties, ., add, (]
[), {, return, false, ;, }, validProperties, ., add, (, child, ., getString, (, ), ), ;, Node, childVal, =]
[), {, return, false, ;, }, validProperties, ., add, (, child, ., getString, (, ), ), ;, Node, childVal, =]
[., getString, (, ), ), ;, Node, childVal, =, child, ., getFirstChild, (, ), ;, for, (, Reference, t, :]
[Node, childVal, =, child, ., getFirstChild, (, ), ;, for, (, Reference, t, :, refs, ), {, Node, refNode, =]
[Node, childVal, =, child, ., getFirstChild, (, ), ;, for, (, Reference, t, :, refs, ), {, Node, refNode, =]
[;, for, (, Reference, t, :, refs, ), {, Node, refNode, =, t, ., getParent, (, ), ;, while, (]
[for, (, Reference, t, :, refs, ), {, Node, refNode, =, t, ., getParent, (, ), ;, while, (, !]
[for, (, Reference, t, :, refs, ), {, Node, refNode, =, t, ., getParent, (, ), ;, while, (, !]
[:, refs, ), {, Node, refNode, =, t, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatementBlock, (]
[=, t, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatementBlock, (, refNode, ), ), {, if, (]
[=, t, ., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatementBlock, (, refNode, ), ), {, if, (]
[., getParent, (, ), ;, while, (, !, NodeUtil, ., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==]
[;, while, (, !, NodeUtil, ., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==, childVal, ), {, return]
[!, NodeUtil, ., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==, childVal, ), {, return, false, ;, }]
[., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==, childVal, ), {, return, false, ;, }, refNode, =]
[., isStatementBlock, (, refNode, ), ), {, if, (, refNode, ==, childVal, ), {, return, false, ;, }, refNode, =]
[refNode, ==, childVal, ), {, return, false, ;, }, refNode, =, refNode, ., getParent, (, ), ;, }, }, }]
[childVal, ), {, return, false, ;, }, refNode, =, refNode, ., getParent, (, ), ;, }, }, }, ret, =]
[false, ;, }, refNode, =, refNode, ., getParent, (, ), ;, }, }, }, ret, =, true, ;, }, return]
[ret, =, true, ;, }, return, ret, ;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =]
[ret, =, true, ;, }, return, ret, ;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =]
[;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return]
[;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return]
[;, }, private, boolean, isVarOrAssignExprLhs, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return]
[Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (]
[n, ), {, Node, parent, =, n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (]
[n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&]
[n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&]
[n, ., getParent, (, ), ;, return, parent, ., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&]
[return, parent, ., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==]
[., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&]
[., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&]
[., isVar, (, ), ||, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, &&]
[,, String, >, computeVarList, (, Var, v, ,, ReferenceCollection, referenceInfo, ), {, Map, <, String, ,, String, >, varmap, =]
[,, String, >, computeVarList, (, Var, v, ,, ReferenceCollection, referenceInfo, ), {, Map, <, String, ,, String, >, varmap, =]
[{, Map, <, String, ,, String, >, varmap, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, Reference, ref, :]
[{, Map, <, String, ,, String, >, varmap, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, Reference, ref, :]
[varmap, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (]
[varmap, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (]
[varmap, =, Maps, ., newLinkedHashMap, (, ), ;, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (]
[), ;, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, ref, ., isLvalue, (, ), ||]
[), ;, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, ref, ., isLvalue, (, ), ||]
[), {, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =]
[), {, if, (, ref, ., isLvalue, (, ), ||, ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =]
[), ||, ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (]
[), ||, ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (]
[ref, ., isInitializingDeclaration, (, ), ), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=]
[(, ), ), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=, null, ), {]
[(, ), ), {, Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=, null, ), {]
[Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=, null, ), {, Preconditions, ., checkState, (]
[Node, val, =, ref, ., getAssignedValue, (, ), ;, if, (, val, !=, null, ), {, Preconditions, ., checkState, (]
[!=, null, ), {, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =]
[!=, null, ), {, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =]
[checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;]
[checkState, (, val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;]
[val, ., isObjectLit, (, ), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=]
[isObjectLit, (, ), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;]
[), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[), ), ;, for, (, Node, child, =, val, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, String, varname, =]
[getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, String, varname, =]
[child, =, child, ., getNext, (, ), ), {, String, varname, =, child, ., getString, (, ), ;, if, (]
[child, =, child, ., getNext, (, ), ), {, String, varname, =, child, ., getString, (, ), ;, if, (]
[getNext, (, ), ), {, String, varname, =, child, ., getString, (, ), ;, if, (, varmap, ., containsKey, (]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +]
[if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +]
[varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +]
[varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +]
[), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;]
[), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;]
[}, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (]
[var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,]
[., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else, if, (]
[., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else, if, (]
[., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, }, else, if, (]
[else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {, }, else, {, Node, getprop, =]
[else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {, }, else, {, Node, getprop, =]
[(, ), ., isVar, (, ), ), {, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;]
[(, ), ., isVar, (, ), ), {, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;]
[(, ), ), {, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[(, ), ), {, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, varname, =]
[ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, varname, =]
[ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, varname, =]
[isGetProp, (, ), ), ;, String, varname, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[isGetProp, (, ), ), ;, String, varname, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, if, (]
[;, String, varname, =, getprop, ., getLastChild, (, ), ., getString, (, ), ;, if, (, varmap, ., containsKey, (]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[getString, (, ), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =]
[), ;, if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +]
[if, (, varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +]
[varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +]
[varmap, ., containsKey, (, varname, ), ), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +]
[), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;]
[), {, continue, ;, }, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;]
[}, String, var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (]
[var, =, VAR_PREFIX, +, varname, +, "_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,]
["_", +, safeNameIdSupplier, ., get, (, ), ;, varmap, ., put, (, varname, ,, var, ), ;, }, }, return]
[}, private, void, fillInitialValues, (, Reference, init, ,, Map, <, String, ,, Node, >, initvals, ), {, Node, object, =]
[}, private, void, fillInitialValues, (, Reference, init, ,, Map, <, String, ,, Node, >, initvals, ), {, Node, object, =]
[init, ,, Map, <, String, ,, Node, >, initvals, ), {, Node, object, =, init, ., getAssignedValue, (, ), ;]
[init, ,, Map, <, String, ,, Node, >, initvals, ), {, Node, object, =, init, ., getAssignedValue, (, ), ;]
[String, ,, Node, >, initvals, ), {, Node, object, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (]
[String, ,, Node, >, initvals, ), {, Node, object, =, init, ., getAssignedValue, (, ), ;, Preconditions, ., checkState, (]
[getAssignedValue, (, ), ;, Preconditions, ., checkState, (, object, ., isObjectLit, (, ), ), ;, for, (, Node, key, =]
[getAssignedValue, (, ), ;, Preconditions, ., checkState, (, object, ., isObjectLit, (, ), ), ;, for, (, Node, key, =]
[checkState, (, object, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;]
[checkState, (, object, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;]
[object, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;, key, !=]
[isObjectLit, (, ), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;, key, !=, null, ;]
[), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[), ), ;, for, (, Node, key, =, object, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[=, object, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {]
[=, object, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {]
[(, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (]
[(, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (]
[;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (, key, ., getString, (, ), ,]
[;, key, =, key, ., getNext, (, ), ), {, initvals, ., put, (, key, ., getString, (, ), ,]
[v, ,, Reference, ref, ,, Map, <, String, ,, String, >, varmap, ), {, List, <, Node, >, nodes, =]
[v, ,, Reference, ref, ,, Map, <, String, ,, String, >, varmap, ), {, List, <, Node, >, nodes, =]
[String, >, varmap, ), {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;, Node, val, =]
[String, >, varmap, ), {, List, <, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;, Node, val, =]
[<, Node, >, nodes, =, Lists, ., newArrayList, (, ), ;, Node, val, =, ref, ., getAssignedValue, (, ), ;]
[>, nodes, =, Lists, ., newArrayList, (, ), ;, Node, val, =, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (]
[=, Lists, ., newArrayList, (, ), ;, Node, val, =, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,]
[=, Lists, ., newArrayList, (, ), ;, Node, val, =, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,]
[), ;, Node, val, =, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;]
[), ;, Node, val, =, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;]
[=, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, Preconditions, ., checkState, (]
[=, ref, ., getAssignedValue, (, ), ;, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, Preconditions, ., checkState, (]
[scope, ), ;, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all, =]
[scope, ), ;, Preconditions, ., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all, =]
[., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all, =, Sets, ., newLinkedHashSet, (]
[., checkState, (, val, ., isObjectLit, (, ), ), ;, Set, <, String, >, all, =, Sets, ., newLinkedHashSet, (]
[String, >, all, =, Sets, ., newLinkedHashSet, (, varmap, ., keySet, (, ), ), ;, for, (, Node, key, =]
[String, >, all, =, Sets, ., newLinkedHashSet, (, varmap, ., keySet, (, ), ), ;, for, (, Node, key, =]
[newLinkedHashSet, (, varmap, ., keySet, (, ), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;]
[newLinkedHashSet, (, varmap, ., keySet, (, ), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;]
[varmap, ., keySet, (, ), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;, key, !=]
[keySet, (, ), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;, key, !=, null, ;]
[), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[), ), ;, for, (, Node, key, =, val, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, var, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, String, var, =]
[=, key, ., getNext, (, ), ), {, String, var, =, key, ., getString, (, ), ;, Node, value, =]
[=, key, ., getNext, (, ), ), {, String, var, =, key, ., getString, (, ), ;, Node, value, =]
[), {, String, var, =, key, ., getString, (, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;]
[), {, String, var, =, key, ., getString, (, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;]
[=, key, ., getString, (, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (]
[=, key, ., getString, (, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (]
[(, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (, IR, ., assign, (]
[(, ), ;, Node, value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (, IR, ., assign, (]
[value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (, IR, ., assign, (, IR, ., name, (]
[value, =, key, ., removeFirstChild, (, ), ;, nodes, ., add, (, IR, ., assign, (, IR, ., name, (]
[removeFirstChild, (, ), ;, nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (]
[nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,]
[IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, value, ), ), ;]
[IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, value, ), ), ;]
[IR, ., name, (, varmap, ., get, (, var, ), ), ,, value, ), ), ;, all, ., remove, (]
[), ), ,, value, ), ), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :]
[value, ), ), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {]
[value, ), ), ;, all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {]
[all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {, nodes, ., add, (]
[all, ., remove, (, var, ), ;, }, for, (, String, var, :, all, ), {, nodes, ., add, (]
[var, ), ;, }, for, (, String, var, :, all, ), {, nodes, ., add, (, IR, ., assign, (]
[var, ), ;, }, for, (, String, var, :, all, ), {, nodes, ., add, (, IR, ., assign, (]
[for, (, String, var, :, all, ), {, nodes, ., add, (, IR, ., assign, (, IR, ., name, (]
[for, (, String, var, :, all, ), {, nodes, ., add, (, IR, ., assign, (, IR, ., name, (]
[:, all, ), {, nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (]
[nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,]
[nodes, ., add, (, IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,]
[IR, ., assign, (, IR, ., name, (, varmap, ., get, (, var, ), ), ,, NodeUtil, ., newUndefinedNode, (]
[(, var, ), ), ,, NodeUtil, ., newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;, if, (]
[(, var, ), ), ,, NodeUtil, ., newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;, if, (]
[newUndefinedNode, (, null, ), ), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), ), {]
[null, ), ), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), ), {, replacement, =]
[null, ), ), ), ;, }, Node, replacement, ;, if, (, nodes, ., isEmpty, (, ), ), {, replacement, =]
[if, (, nodes, ., isEmpty, (, ), ), {, replacement, =, IR, ., trueNode, (, ), ;, }, else, {]
[if, (, nodes, ., isEmpty, (, ), ), {, replacement, =, IR, ., trueNode, (, ), ;, }, else, {]
[isEmpty, (, ), ), {, replacement, =, IR, ., trueNode, (, ), ;, }, else, {, nodes, ., add, (]
[isEmpty, (, ), ), {, replacement, =, IR, ., trueNode, (, ), ;, }, else, {, nodes, ., add, (]
[IR, ., trueNode, (, ), ;, }, else, {, nodes, ., add, (, IR, ., trueNode, (, ), ), ;]
[trueNode, (, ), ;, }, else, {, nodes, ., add, (, IR, ., trueNode, (, ), ), ;, nodes, =]
[trueNode, (, ), ;, }, else, {, nodes, ., add, (, IR, ., trueNode, (, ), ), ;, nodes, =]
[}, else, {, nodes, ., add, (, IR, ., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse, (]
[nodes, ., add, (, IR, ., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse, (, nodes, ), ;]
[add, (, IR, ., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse, (, nodes, ), ;, replacement, =]
[., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse, (, nodes, ), ;, replacement, =, new, Node, (]
[., trueNode, (, ), ), ;, nodes, =, Lists, ., reverse, (, nodes, ), ;, replacement, =, new, Node, (]
[Lists, ., reverse, (, nodes, ), ;, replacement, =, new, Node, (, Token, ., COMMA, ), ;, Node, cur, =]
[replacement, =, new, Node, (, Token, ., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (]
[new, Node, (, Token, ., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =]
[(, Token, ., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;]
[(, Token, ., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;]
[., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;, i, <]
[., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;, i, <]
[., COMMA, ), ;, Node, cur, =, replacement, ;, int, i, ;, for, (, i, =, 0, ;, i, <]
[=, replacement, ;, int, i, ;, for, (, i, =, 0, ;, i, <, nodes, ., size, (, ), -]
[;, int, i, ;, for, (, i, =, 0, ;, i, <, nodes, ., size, (, ), -, 2, ;]
[;, int, i, ;, for, (, i, =, 0, ;, i, <, nodes, ., size, (, ), -, 2, ;]
[for, (, i, =, 0, ;, i, <, nodes, ., size, (, ), -, 2, ;, i, ++, ), {]
[for, (, i, =, 0, ;, i, <, nodes, ., size, (, ), -, 2, ;, i, ++, ), {]
[0, ;, i, <, nodes, ., size, (, ), -, 2, ;, i, ++, ), {, cur, ., addChildToFront, (]
[0, ;, i, <, nodes, ., size, (, ), -, 2, ;, i, ++, ), {, cur, ., addChildToFront, (]
[nodes, ., size, (, ), -, 2, ;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get, (]
[;, i, ++, ), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =]
[), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =, new, Node, (]
[), {, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, Node, t, =, new, Node, (]
[(, nodes, ., get, (, i, ), ), ;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;]
[(, nodes, ., get, (, i, ), ), ;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;]
[(, i, ), ), ;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (]
[), ;, Node, t, =, new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;]
[Node, t, =, new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;, cur, =]
[new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }]
[new, Node, (, Token, ., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }]
[., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (]
[., COMMA, ), ;, cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (]
[cur, ., addChildToFront, (, t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (]
[t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;]
[t, ), ;, cur, =, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;]
[=, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (]
[=, t, ;, }, cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (]
[cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (, nodes, ., get, (]
[cur, ., addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (, nodes, ., get, (]
[addChildToFront, (, nodes, ., get, (, i, ), ), ;, cur, ., addChildToFront, (, nodes, ., get, (, i, +]
[), ;, cur, ., addChildToFront, (, nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace, =]
[), ;, cur, ., addChildToFront, (, nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace, =]
[nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace, =, ref, ., getParent, (, ), ;]
[nodes, ., get, (, i, +, 1, ), ), ;, }, Node, replace, =, ref, ., getParent, (, ), ;]
[i, +, 1, ), ), ;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (]
[;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (]
[;, }, Node, replace, =, ref, ., getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (]
[getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (, replace, ., isVar, (, ), ), {]
[getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (, replace, ., isVar, (, ), ), {]
[getParent, (, ), ;, replacement, ., copyInformationFromForTree, (, replace, ), ;, if, (, replace, ., isVar, (, ), ), {]
[replace, ), ;, if, (, replace, ., isVar, (, ), ), {, replace, ., getParent, (, ), ., replaceChild, (]
[;, if, (, replace, ., isVar, (, ), ), {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,]
[;, if, (, replace, ., isVar, (, ), ), {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,]
[., isVar, (, ), ), {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (]
[., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {]
[., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {]
[., getParent, (, ), ., replaceChild, (, replace, ,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {]
[,, NodeUtil, ., newExpr, (, replacement, ), ), ;, }, else, {, replace, ., getParent, (, ), ., replaceChild, (]
[., newExpr, (, replacement, ), ), ;, }, else, {, replace, ., getParent, (, ), ., replaceChild, (, replace, ,]
[v, ,, Reference, declaration, ,, Reference, init, ,, ReferenceCollection, referenceInfo, ), {, Map, <, String, ,, String, >, varmap, =]
[Reference, declaration, ,, Reference, init, ,, ReferenceCollection, referenceInfo, ), {, Map, <, String, ,, String, >, varmap, =, computeVarList, (]
[,, Reference, init, ,, ReferenceCollection, referenceInfo, ), {, Map, <, String, ,, String, >, varmap, =, computeVarList, (, v, ,]
[,, String, >, varmap, =, computeVarList, (, v, ,, referenceInfo, ), ;, Map, <, String, ,, Node, >, initvals, =]
[,, String, >, varmap, =, computeVarList, (, v, ,, referenceInfo, ), ;, Map, <, String, ,, Node, >, initvals, =]
[Map, <, String, ,, Node, >, initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined, =]
[Map, <, String, ,, Node, >, initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined, =]
[Map, <, String, ,, Node, >, initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined, =]
[initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined, =, referenceInfo, ., isWellDefined, (, ), &&]
[initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined, =, referenceInfo, ., isWellDefined, (, ), &&]
[initvals, =, Maps, ., newHashMap, (, ), ;, Node, vnode, ;, boolean, defined, =, referenceInfo, ., isWellDefined, (, ), &&]
[defined, =, referenceInfo, ., isWellDefined, (, ), &&, init, ., getParent, (, ), ., isVar, (, ), ;, if, (]
[., isWellDefined, (, ), &&, init, ., getParent, (, ), ., isVar, (, ), ;, if, (, defined, ), {]
[(, ), &&, init, ., getParent, (, ), ., isVar, (, ), ;, if, (, defined, ), {, vnode, =]
[(, ), &&, init, ., getParent, (, ), ., isVar, (, ), ;, if, (, defined, ), {, vnode, =]
[(, ), ., isVar, (, ), ;, if, (, defined, ), {, vnode, =, init, ., getParent, (, ), ;]
[., isVar, (, ), ;, if, (, defined, ), {, vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (]
[(, ), ;, if, (, defined, ), {, vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,]
[), {, vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {]
[vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =]
[vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =]
[vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =]
[vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =]
[vnode, =, init, ., getParent, (, ), ;, fillInitialValues, (, init, ,, initvals, ), ;, }, else, {, vnode, =]
[(, ), ., getFirstChild, (, ), ;, }, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[(, ), ., getFirstChild, (, ), ;, }, for, (, Map, ., Entry, <, String, ,, String, >, entry, :]
[Map, ., Entry, <, String, ,, String, >, entry, :, varmap, ., entrySet, (, ), ), {, Node, val, =]
[Map, ., Entry, <, String, ,, String, >, entry, :, varmap, ., entrySet, (, ), ), {, Node, val, =]
[String, ,, String, >, entry, :, varmap, ., entrySet, (, ), ), {, Node, val, =, initvals, ., get, (]
[String, ,, String, >, entry, :, varmap, ., entrySet, (, ), ), {, Node, val, =, initvals, ., get, (]
[), ), {, Node, val, =, initvals, ., get, (, entry, ., getKey, (, ), ), ;, Node, varnode, =]
[), ), {, Node, val, =, initvals, ., get, (, entry, ., getKey, (, ), ), ;, Node, varnode, =]
[val, =, initvals, ., get, (, entry, ., getKey, (, ), ), ;, Node, varnode, =, NodeUtil, ., newVarNode, (]
[val, =, initvals, ., get, (, entry, ., getKey, (, ), ), ;, Node, varnode, =, NodeUtil, ., newVarNode, (]
[entry, ., getKey, (, ), ), ;, Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,]
[), ;, Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (]
[), ;, Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (]
[Node, varnode, =, NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (, val, ==]
[NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (, val, ==, null, ), {]
[NodeUtil, ., newVarNode, (, entry, ., getValue, (, ), ,, val, ), ;, if, (, val, ==, null, ), {]
[entry, ., getValue, (, ), ,, val, ), ;, if, (, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (]
[val, ), ;, if, (, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {]
[;, if, (, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (]
[(, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,]
[(, val, ==, null, ), {, varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,]
[varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }]
[varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }]
[varnode, ., copyInformationFromForTree, (, vnode, ), ;, }, else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }]
[else, {, blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }, vnode, ., getParent, (, ), ., addChildBefore, (]
[blacklistVarReferencesInTree, (, val, ,, v, ., scope, ), ;, }, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,]
[scope, ), ;, }, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (]
[}, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (, defined, ), {]
[}, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (, defined, ), {]
[}, vnode, ., getParent, (, ), ., addChildBefore, (, varnode, ,, vnode, ), ;, }, if, (, defined, ), {]
[(, varnode, ,, vnode, ), ;, }, if, (, defined, ), {, vnode, ., getParent, (, ), ., removeChild, (]
[defined, ), {, vnode, ., getParent, (, ), ., removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :]
[defined, ), {, vnode, ., getParent, (, ), ., removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :]
[), ., removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (]
[), ., removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (]
[removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined, &&]
[removeChild, (, vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined, &&]
[vnode, ), ;, }, for, (, Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined, &&, ref, ==]
[Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined, &&, ref, ==, init, ), continue, ;, if, (]
[Reference, ref, :, referenceInfo, ., references, ), {, if, (, defined, &&, ref, ==, init, ), continue, ;, if, (]
[{, if, (, defined, &&, ref, ==, init, ), continue, ;, if, (, ref, ., isLvalue, (, ), ), {]
[(, defined, &&, ref, ==, init, ), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (]
[&&, ref, ==, init, ), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,]
[==, init, ), continue, ;, if, (, ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,]
[ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, ), ;, }, else, if, (]
[ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, ), ;, }, else, if, (]
[ref, ., isLvalue, (, ), ), {, replaceAssignmentExpression, (, v, ,, ref, ,, varmap, ), ;, }, else, if, (]
[ref, ,, varmap, ), ;, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {]
[ref, ,, varmap, ), ;, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {]
[ref, ,, varmap, ), ;, }, else, if, (, ref, ., getParent, (, ), ., isVar, (, ), ), {]
[(, ref, ., getParent, (, ), ., isVar, (, ), ), {, ref, ., getGrandparent, (, ), ., removeChild, (]
[(, ref, ., getParent, (, ), ., isVar, (, ), ), {, ref, ., getGrandparent, (, ), ., removeChild, (]
[., getGrandparent, (, ), ., removeChild, (, ref, ., getParent, (, ), ), ;, }, else, {, Node, getprop, =]
[., getGrandparent, (, ), ., removeChild, (, ref, ., getParent, (, ), ), ;, }, else, {, Node, getprop, =]
[(, ref, ., getParent, (, ), ), ;, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;]
[(, ref, ., getParent, (, ), ), ;, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;]
[(, ), ), ;, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[(, ), ), ;, }, else, {, Node, getprop, =, ref, ., getParent, (, ), ;, Preconditions, ., checkState, (]
[ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, var, =]
[ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, var, =]
[ref, ., getParent, (, ), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, var, =]
[), ;, Preconditions, ., checkState, (, getprop, ., isGetProp, (, ), ), ;, String, var, =, getprop, ., getChildAtIndex, (]
[., isGetProp, (, ), ), ;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;]
[., isGetProp, (, ), ), ;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;]
[), ;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;, Preconditions, ., checkState, (]
[), ;, String, var, =, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;, Preconditions, ., checkState, (]
[=, getprop, ., getChildAtIndex, (, 1, ), ., getString, (, ), ;, Preconditions, ., checkState, (, varmap, ., containsKey, (]
[., getString, (, ), ;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =]
[., getString, (, ), ;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =]
[;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =, IR, ., name, (]
[;, Preconditions, ., checkState, (, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =, IR, ., name, (]
[(, varmap, ., containsKey, (, var, ), ), ;, Node, replacement, =, IR, ., name, (, varmap, ., get, (]
[(, var, ), ), ;, Node, replacement, =, IR, ., name, (, varmap, ., get, (, var, ), ), ;]
[(, var, ), ), ;, Node, replacement, =, IR, ., name, (, varmap, ., get, (, var, ), ), ;]
[;, Node, replacement, =, IR, ., name, (, varmap, ., get, (, var, ), ), ;, replacement, ., copyInformationFrom, (]
[=, IR, ., name, (, varmap, ., get, (, var, ), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;]
[=, IR, ., name, (, varmap, ., get, (, var, ), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;]
[=, IR, ., name, (, varmap, ., get, (, var, ), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;]
[(, var, ), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), ., replaceChild, (]
[(, var, ), ), ;, replacement, ., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), ., replaceChild, (]
[., copyInformationFrom, (, getprop, ), ;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,]
[;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, replacement, ), ;, }, }]
[;, ref, ., getGrandparent, (, ), ., replaceChild, (, ref, ., getParent, (, ), ,, replacement, ), ;, }, }]
