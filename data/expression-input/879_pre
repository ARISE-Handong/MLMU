[final, FirstOrderDifferentialEquations, fode, ,, final, double, [, ], hY, ,, final, String, ..., parameters, ), throws, DimensionMismatchException, {, this, (]
[,, final, double, [, ], hY, ,, final, String, ..., parameters, ), throws, DimensionMismatchException, {, this, (, new, MainStateJacobianWrapper, (]
[double, [, ], hY, ,, final, String, ..., parameters, ), throws, DimensionMismatchException, {, this, (, new, MainStateJacobianWrapper, (, fode, ,]
[hY, ,, final, String, ..., parameters, ), throws, DimensionMismatchException, {, this, (, new, MainStateJacobianWrapper, (, fode, ,, hY, ), ,]
[hY, ), ,, parameters, ), ;, }, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {]
[hY, ), ,, parameters, ), ;, }, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {]
[), ;, }, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this, ., efode, =]
[}, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this, ., efode, =, null, ;]
[}, public, JacobianMatrices, (, final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this, ., efode, =, null, ;]
[final, MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this, ., efode, =, null, ;, this, ., index, =]
[MainStateJacobianProvider, jode, ,, final, String, ..., parameters, ), {, this, ., efode, =, null, ;, this, ., index, =, -]
[,, final, String, ..., parameters, ), {, this, ., efode, =, null, ;, this, ., index, =, -, 1, ;]
[,, final, String, ..., parameters, ), {, this, ., efode, =, null, ;, this, ., index, =, -, 1, ;]
[parameters, ), {, this, ., efode, =, null, ;, this, ., index, =, -, 1, ;, this, ., jode, =]
[{, this, ., efode, =, null, ;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;]
[{, this, ., efode, =, null, ;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;]
[=, null, ;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =]
[;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;]
[;, this, ., index, =, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;]
[=, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =]
[=, -, 1, ;, this, ., jode, =, jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =]
[jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (]
[jode, ;, this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (]
[this, ., pode, =, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==]
[=, null, ;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {]
[;, this, ., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {, selectedParameters, =]
[., stateDim, =, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;]
[=, jode, ., getDimension, (, ), ;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;, paramDim, =]
[), ;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {]
[), ;, if, (, parameters, ==, null, ), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {]
[parameters, ==, null, ), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =]
[), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, []
[), {, selectedParameters, =, null, ;, paramDim, =, 0, ;, }, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, []
[}, else, {, this, ., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =]
[{, this, ., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =, 0, ;]
[{, this, ., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =, 0, ;]
[., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[., selectedParameters, =, new, ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[ParameterConfiguration, [, parameters, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;]
[[, parameters, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters, []
[int, i, =, 0, ;, i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters, [, i, ], =]
[0, ;, i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (]
[0, ;, i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (]
[i, <, parameters, ., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, []
[., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,]
[., length, ;, ++, i, ), {, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,]
[{, selectedParameters, [, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }]
[[, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =]
[[, i, ], =, new, ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =]
[ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }]
[ParameterConfiguration, (, parameters, [, i, ], ,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }]
[i, ], ,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =]
[,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;]
[,, Double, ., NaN, ), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;]
[), ;, }, paramDim, =, parameters, ., length, ;, }, this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =]
[;, }, this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;]
[this, ., dirtyParameter, =, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =]
[=, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, []
[=, false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, []
[false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, [, (]
[false, ;, this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, [, (]
[this, ., jacobianProviders, =, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, [, (, stateDim, +]
[=, new, ArrayList, <, ParameterJacobianProvider, >, (, ), ;, matricesData, =, new, double, [, (, stateDim, +, paramDim, ), *]
[;, matricesData, =, new, double, [, (, stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =]
[=, new, double, [, (, stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =, 0, ;]
[=, new, double, [, (, stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =, 0, ;]
[double, [, (, stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <]
[(, stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;]
[stateDim, +, paramDim, ), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++]
[), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {]
[), *, stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {]
[stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, []
[stateDim, ], ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, []
[;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i, *]
[for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i, *, (]
[for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i, *, (]
[int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i, *, (, stateDim, +]
[;, i, <, stateDim, ;, ++, i, ), {, matricesData, [, i, *, (, stateDim, +, 1, ), ], =]
[;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =]
[;, }, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =]
[}, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =, (]
[}, }, public, void, registerVariationalEquations, (, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =, (]
[(, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =, (, jode, instanceof, MainStateJacobianWrapper, ), ?]
[(, final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =, (, jode, instanceof, MainStateJacobianWrapper, ), ?]
[final, ExpandableStatefulODE, expandable, ), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =, (, jode, instanceof, MainStateJacobianWrapper, ), ?, (]
[), throws, DimensionMismatchException, ,, MismatchedEquations, {, final, FirstOrderDifferentialEquations, ode, =, (, jode, instanceof, MainStateJacobianWrapper, ), ?, (, (, MainStateJacobianWrapper, )]
[{, final, FirstOrderDifferentialEquations, ode, =, (, jode, instanceof, MainStateJacobianWrapper, ), ?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :]
[=, (, jode, instanceof, MainStateJacobianWrapper, ), ?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :, jode, ;, if, (]
[=, (, jode, instanceof, MainStateJacobianWrapper, ), ?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :, jode, ;, if, (]
[=, (, jode, instanceof, MainStateJacobianWrapper, ), ?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :, jode, ;, if, (]
[?, (, (, MainStateJacobianWrapper, ), jode, ), ., ode, :, jode, ;, if, (, expandable, ., getPrimary, (, ), !=]
[), jode, ), ., ode, :, jode, ;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw]
[jode, ;, if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }]
[if, (, expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =]
[expandable, ., getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;]
[getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;, index, =]
[getPrimary, (, ), !=, ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;, index, =]
[ode, ), {, throw, new, MismatchedEquations, (, ), ;, }, efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations, (]
[(, ), ;, }, efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;]
[(, ), ;, }, efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;]
[efode, =, expandable, ;, index, =, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;, efode, ., setSecondaryState, (]
[expandable, ;, index, =, efode, ., addSecondaryEquations, (, new, JacobiansSecondaryEquations, (, ), ), ;, efode, ., setSecondaryState, (, index, ,]
[;, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {]
[;, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {]
[(, index, ,, matricesData, ), ;, }, public, void, addParameterJacobianProvider, (, final, ParameterJacobianProvider, provider, ), {, jacobianProviders, ., add, (]
[provider, ), {, jacobianProviders, ., add, (, provider, ), ;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {]
[provider, ), {, jacobianProviders, ., add, (, provider, ), ;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {]
[., add, (, provider, ), ;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {, this, ., pode, =]
[(, provider, ), ;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {, this, ., pode, =, parameterizedOde, ;]
[), ;, }, public, void, setParameterizedODE, (, final, ParameterizedODE, parameterizedOde, ), {, this, ., pode, =, parameterizedOde, ;, dirtyParameter, =]
[public, void, setParameterStep, (, final, String, parameter, ,, final, double, hP, ), throws, UnknownParameterException, {, for, (, ParameterConfiguration, param, :]
[String, parameter, ,, final, double, hP, ), throws, UnknownParameterException, {, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (]
[String, parameter, ,, final, double, hP, ), throws, UnknownParameterException, {, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (]
[double, hP, ), throws, UnknownParameterException, {, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, parameter, ., equals, (]
[double, hP, ), throws, UnknownParameterException, {, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, parameter, ., equals, (]
[ParameterConfiguration, param, :, selectedParameters, ), {, if, (, parameter, ., equals, (, param, ., getParameterName, (, ), ), ), {]
[ParameterConfiguration, param, :, selectedParameters, ), {, if, (, parameter, ., equals, (, param, ., getParameterName, (, ), ), ), {]
[), {, if, (, parameter, ., equals, (, param, ., getParameterName, (, ), ), ), {, param, ., setHP, (]
[(, parameter, ., equals, (, param, ., getParameterName, (, ), ), ), {, param, ., setHP, (, hP, ), ;]
[., equals, (, param, ., getParameterName, (, ), ), ), {, param, ., setHP, (, hP, ), ;, dirtyParameter, =]
[), ), ), {, param, ., setHP, (, hP, ), ;, dirtyParameter, =, true, ;, return, ;, }, }, throw]
[{, param, ., setHP, (, hP, ), ;, dirtyParameter, =, true, ;, return, ;, }, }, throw, new, UnknownParameterException, (]
[(, parameter, ), ;, }, public, void, setInitialMainStateJacobian, (, final, double, [, ], [, ], dYdY0, ), throws, DimensionMismatchException, {]
[), ;, }, public, void, setInitialMainStateJacobian, (, final, double, [, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (]
[}, public, void, setInitialMainStateJacobian, (, final, double, [, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (, stateDim, ,]
[setInitialMainStateJacobian, (, final, double, [, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdY0, ), ;]
[final, double, [, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdY0, ), ;, checkDimension, (]
[[, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdY0, ), ;, checkDimension, (, stateDim, ,]
[[, ], [, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdY0, ), ;, checkDimension, (, stateDim, ,]
[[, ], dYdY0, ), throws, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdY0, ), ;, checkDimension, (, stateDim, ,, dYdY0, []
[checkDimension, (, stateDim, ,, dYdY0, ), ;, checkDimension, (, stateDim, ,, dYdY0, [, 0, ], ), ;, int, i, =]
[,, dYdY0, [, 0, ], ), ;, int, i, =, 0, ;, for, (, final, double, [, ], row, :]
[0, ], ), ;, int, i, =, 0, ;, for, (, final, double, [, ], row, :, dYdY0, ), {]
[0, ], ), ;, int, i, =, 0, ;, for, (, final, double, [, ], row, :, dYdY0, ), {]
[int, i, =, 0, ;, for, (, final, double, [, ], row, :, dYdY0, ), {, System, ., arraycopy, (]
[=, 0, ;, for, (, final, double, [, ], row, :, dYdY0, ), {, System, ., arraycopy, (, row, ,]
[;, for, (, final, double, [, ], row, :, dYdY0, ), {, System, ., arraycopy, (, row, ,, 0, ,]
[(, final, double, [, ], row, :, dYdY0, ), {, System, ., arraycopy, (, row, ,, 0, ,, matricesData, ,]
[double, [, ], row, :, dYdY0, ), {, System, ., arraycopy, (, row, ,, 0, ,, matricesData, ,, i, ,]
[row, :, dYdY0, ), {, System, ., arraycopy, (, row, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;]
[dYdY0, ), {, System, ., arraycopy, (, row, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, i, +=]
[arraycopy, (, row, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (]
[arraycopy, (, row, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (]
[row, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=]
[,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {]
[,, matricesData, ,, i, ,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {]
[,, stateDim, ), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (]
[), ;, i, +=, stateDim, ;, }, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,]
[}, public, void, setInitialParameterJacobian, (, final, String, pName, ,, final, double, [, ], dYdP, ), throws, UnknownParameterException, ,, DimensionMismatchException, {]
[void, setInitialParameterJacobian, (, final, String, pName, ,, final, double, [, ], dYdP, ), throws, UnknownParameterException, ,, DimensionMismatchException, {, checkDimension, (]
[(, final, String, pName, ,, final, double, [, ], dYdP, ), throws, UnknownParameterException, ,, DimensionMismatchException, {, checkDimension, (, stateDim, ,]
[double, [, ], dYdP, ), throws, UnknownParameterException, ,, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdP, ), ;, int, i, =]
[double, [, ], dYdP, ), throws, UnknownParameterException, ,, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdP, ), ;, int, i, =]
[], dYdP, ), throws, UnknownParameterException, ,, DimensionMismatchException, {, checkDimension, (, stateDim, ,, dYdP, ), ;, int, i, =, stateDim, *]
[{, checkDimension, (, stateDim, ,, dYdP, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :]
[dYdP, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (]
[dYdP, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (]
[i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, ., equals, (]
[i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, ., equals, (]
[ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, ., equals, (, param, ., getParameterName, (, ), ), ), {]
[ParameterConfiguration, param, :, selectedParameters, ), {, if, (, pName, ., equals, (, param, ., getParameterName, (, ), ), ), {]
[), {, if, (, pName, ., equals, (, param, ., getParameterName, (, ), ), ), {, System, ., arraycopy, (]
[if, (, pName, ., equals, (, param, ., getParameterName, (, ), ), ), {, System, ., arraycopy, (, dYdP, ,]
[pName, ., equals, (, param, ., getParameterName, (, ), ), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,]
[equals, (, param, ., getParameterName, (, ), ), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,]
[param, ., getParameterName, (, ), ), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,]
[), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (]
[), ), {, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (]
[{, System, ., arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=]
[arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=, null, ), {]
[arraycopy, (, dYdP, ,, 0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=, null, ), {]
[0, ,, matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (]
[matricesData, ,, i, ,, stateDim, ), ;, if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,]
[if, (, efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }]
[efode, !=, null, ), {, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }, i, +=]
[{, efode, ., setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }, i, +=, stateDim, ;, }, throw]
[setSecondaryState, (, index, ,, matricesData, ), ;, }, return, ;, }, i, +=, stateDim, ;, }, throw, new, UnknownParameterException, (]
[;, }, public, void, getCurrentMainSetJacobian, (, final, double, [, ], [, ], dYdY0, ), {, double, [, ], p, =]
[;, }, public, void, getCurrentMainSetJacobian, (, final, double, [, ], [, ], dYdY0, ), {, double, [, ], p, =]
[getCurrentMainSetJacobian, (, final, double, [, ], [, ], dYdY0, ), {, double, [, ], p, =, efode, ., getSecondaryState, (]
[[, ], dYdY0, ), {, double, [, ], p, =, efode, ., getSecondaryState, (, index, ), ;, int, j, =]
[], p, =, efode, ., getSecondaryState, (, index, ), ;, int, j, =, 0, ;, for, (, int, i, =]
[=, efode, ., getSecondaryState, (, index, ), ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;]
[=, efode, ., getSecondaryState, (, index, ), ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;]
[., getSecondaryState, (, index, ), ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, index, ), ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;]
[(, index, ), ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;]
[int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, i, ++, ), {]
[int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, i, ++, ), {, System, ., arraycopy, (]
[(, int, i, =, 0, ;, i, <, stateDim, ;, i, ++, ), {, System, ., arraycopy, (, p, ,]
[i, =, 0, ;, i, <, stateDim, ;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,]
[i, =, 0, ;, i, <, stateDim, ;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,]
[0, ;, i, <, stateDim, ;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, []
[<, stateDim, ;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,]
[;, i, ++, ), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,]
[), {, System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,, stateDim, ), ;]
[System, ., arraycopy, (, p, ,, j, ,, dYdY0, [, i, ], ,, 0, ,, stateDim, ), ;, j, +=]
[}, public, void, getCurrentParameterJacobian, (, String, pName, ,, final, double, [, ], dYdP, ), {, double, [, ], p, =]
[}, public, void, getCurrentParameterJacobian, (, String, pName, ,, final, double, [, ], dYdP, ), {, double, [, ], p, =]
[(, String, pName, ,, final, double, [, ], dYdP, ), {, double, [, ], p, =, efode, ., getSecondaryState, (]
[[, ], dYdP, ), {, double, [, ], p, =, efode, ., getSecondaryState, (, index, ), ;, int, i, =]
[[, ], dYdP, ), {, double, [, ], p, =, efode, ., getSecondaryState, (, index, ), ;, int, i, =]
[dYdP, ), {, double, [, ], p, =, efode, ., getSecondaryState, (, index, ), ;, int, i, =, stateDim, *]
[=, efode, ., getSecondaryState, (, index, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :]
[index, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (]
[index, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (]
[index, ), ;, int, i, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (]
[stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param, ., getParameterName, (, ), ., equals, (]
[ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param, ., getParameterName, (, ), ., equals, (, pName, ), ), {]
[ParameterConfiguration, param, :, selectedParameters, ), {, if, (, param, ., getParameterName, (, ), ., equals, (, pName, ), ), {]
[), {, if, (, param, ., getParameterName, (, ), ., equals, (, pName, ), ), {, System, ., arraycopy, (]
[if, (, param, ., getParameterName, (, ), ., equals, (, pName, ), ), {, System, ., arraycopy, (, p, ,]
[param, ., getParameterName, (, ), ., equals, (, pName, ), ), {, System, ., arraycopy, (, p, ,, i, ,]
[getParameterName, (, ), ., equals, (, pName, ), ), {, System, ., arraycopy, (, p, ,, i, ,, dYdP, ,]
[), ., equals, (, pName, ), ), {, System, ., arraycopy, (, p, ,, i, ,, dYdP, ,, 0, ,]
[), {, System, ., arraycopy, (, p, ,, i, ,, dYdP, ,, 0, ,, stateDim, ), ;, return, ;, }]
[System, ., arraycopy, (, p, ,, i, ,, dYdP, ,, 0, ,, stateDim, ), ;, return, ;, }, i, +=]
[}, }, private, void, checkDimension, (, final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =]
[}, }, private, void, checkDimension, (, final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =]
[}, private, void, checkDimension, (, final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =, (]
[}, private, void, checkDimension, (, final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =, (]
[void, checkDimension, (, final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =, (, array, ==]
[final, int, expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =, (, array, ==, null, ), ?]
[expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =, (, array, ==, null, ), ?, 0, :]
[expected, ,, final, Object, array, ), throws, DimensionMismatchException, {, int, arrayDimension, =, (, array, ==, null, ), ?, 0, :]
[array, ), throws, DimensionMismatchException, {, int, arrayDimension, =, (, array, ==, null, ), ?, 0, :, Array, ., getLength, (]
[int, arrayDimension, =, (, array, ==, null, ), ?, 0, :, Array, ., getLength, (, array, ), ;, if, (]
[int, arrayDimension, =, (, array, ==, null, ), ?, 0, :, Array, ., getLength, (, array, ), ;, if, (]
[=, (, array, ==, null, ), ?, 0, :, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=]
[null, ), ?, 0, :, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw]
[0, :, Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException, (]
[Array, ., getLength, (, array, ), ;, if, (, arrayDimension, !=, expected, ), {, throw, new, DimensionMismatchException, (, arrayDimension, ,]
[arrayDimension, ,, expected, ), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return]
[arrayDimension, ,, expected, ), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return]
[expected, ), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return, stateDim, *]
[), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return, stateDim, *, (]
[), ;, }, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return, stateDim, *, (]
[}, }, private, class, JacobiansSecondaryEquations, implements, SecondaryEquations, {, public, int, getDimension, (, ), {, return, stateDim, *, (, stateDim, +]
[,, final, double, [, ], z, ,, final, double, [, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (]
[,, final, double, [, ], z, ,, final, double, [, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (]
[double, [, ], z, ,, final, double, [, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, dirtyParameter, &&]
[[, ], z, ,, final, double, [, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, dirtyParameter, &&, (]
[[, ], z, ,, final, double, [, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, dirtyParameter, &&, (]
[z, ,, final, double, [, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, dirtyParameter, &&, (, paramDim, !=]
[[, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, dirtyParameter, &&, (, paramDim, !=, 0, ), ), {]
[[, ], zDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, dirtyParameter, &&, (, paramDim, !=, 0, ), ), {]
[throws, MaxCountExceededException, ,, DimensionMismatchException, {, if, (, dirtyParameter, &&, (, paramDim, !=, 0, ), ), {, jacobianProviders, ., add, (]
[DimensionMismatchException, {, if, (, dirtyParameter, &&, (, paramDim, !=, 0, ), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (]
[if, (, dirtyParameter, &&, (, paramDim, !=, 0, ), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,]
[dirtyParameter, &&, (, paramDim, !=, 0, ), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,]
[!=, 0, ), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;]
[), ), {, jacobianProviders, ., add, (, new, ParameterJacobianWrapper, (, jode, ,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =]
[jode, ,, pode, ,, selectedParameters, ), ), ;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =]
[,, selectedParameters, ), ), ;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =, new, double, []
[), ;, dirtyParameter, =, false, ;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], []
[=, false, ;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], [, stateDim, ], ;]
[=, false, ;, }, double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], [, stateDim, ], ;]
[double, [, ], [, ], dFdY, =, new, double, [, stateDim, ], [, stateDim, ], ;, jode, ., computeMainStateJacobian, (]
[], [, ], dFdY, =, new, double, [, stateDim, ], [, stateDim, ], ;, jode, ., computeMainStateJacobian, (, t, ,]
[], dFdY, =, new, double, [, stateDim, ], [, stateDim, ], ;, jode, ., computeMainStateJacobian, (, t, ,, y, ,]
[=, new, double, [, stateDim, ], [, stateDim, ], ;, jode, ., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,]
[], ;, jode, ., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =]
[jode, ., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;]
[jode, ., computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;]
[computeMainStateJacobian, (, t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;, i, <]
[t, ,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;]
[,, y, ,, yDot, ,, dFdY, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++]
[(, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =]
[(, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =]
[i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, []
[++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =]
[), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, stateDim, ;]
[], dFdYi, =, dFdY, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, stateDim, ;, ++]
[], ;, for, (, int, j, =, 0, ;, j, <, stateDim, ;, ++, j, ), {, double, s, =]
[=, 0, ;, j, <, stateDim, ;, ++, j, ), {, double, s, =, 0, ;, final, int, startIndex, =]
[stateDim, ;, ++, j, ), {, double, s, =, 0, ;, final, int, startIndex, =, j, ;, int, zIndex, =]
[s, =, 0, ;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (, int, l, =]
[0, ;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;]
[0, ;, final, int, startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;]
[final, int, startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;, l, <]
[startIndex, =, j, ;, int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;]
[=, j, ;, int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++]
[int, zIndex, =, startIndex, ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {]
[=, startIndex, ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=]
[=, startIndex, ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=]
[=, startIndex, ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=]
[;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, []
[int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *]
[int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *]
[=, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, []
[l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;]
[stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=]
[l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }]
[l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }]
[{, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, []
[{, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, []
[+=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +]
[+=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +]
[[, l, ], *, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *]
[*, z, [, zIndex, ], ;, zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =]
[zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if, (]
[zIndex, +=, stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if, (]
[stateDim, ;, }, zDot, [, startIndex, +, i, *, stateDim, ], =, s, ;, }, }, if, (, paramDim, !=]
[*, stateDim, ], =, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =]
[=, s, ;, }, }, if, (, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double, []
[(, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double, [, stateDim, ], ;, int, startIndex, =]
[(, paramDim, !=, 0, ), {, double, [, ], dFdP, =, new, double, [, stateDim, ], ;, int, startIndex, =]
[!=, 0, ), {, double, [, ], dFdP, =, new, double, [, stateDim, ], ;, int, startIndex, =, stateDim, *]
[dFdP, =, new, double, [, stateDim, ], ;, int, startIndex, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :]
[], ;, int, startIndex, =, stateDim, *, stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =]
[stateDim, ;, for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =]
[for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;]
[for, (, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;]
[(, ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (]
[ParameterConfiguration, param, :, selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (, !]
[selectedParameters, ), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (, !, found, ), &&]
[), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (, !, found, ), &&, (]
[), {, boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (, !, found, ), &&, (]
[boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (, !, found, ), &&, (, k, <]
[boolean, found, =, false, ;, for, (, int, k, =, 0, ;, (, !, found, ), &&, (, k, <]
[int, k, =, 0, ;, (, !, found, ), &&, (, k, <, jacobianProviders, ., size, (, ), ), ;]
[k, =, 0, ;, (, !, found, ), &&, (, k, <, jacobianProviders, ., size, (, ), ), ;, ++]
[), &&, (, k, <, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =]
[), &&, (, k, <, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =]
[<, jacobianProviders, ., size, (, ), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (]
[), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (]
[), ), ;, ++, k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (]
[k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider, ., isSupported, (]
[k, ), {, final, ParameterJacobianProvider, provider, =, jacobianProviders, ., get, (, k, ), ;, if, (, provider, ., isSupported, (]
[., get, (, k, ), ;, if, (, provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {]
[., get, (, k, ), ;, if, (, provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {]
[), ;, if, (, provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (]
[if, (, provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (, t, ,]
[provider, ., isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (, t, ,, y, ,]
[isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (, t, ,, y, ,, yDot, ,]
[isSupported, (, param, ., getParameterName, (, ), ), ), {, provider, ., computeParameterJacobian, (, t, ,, y, ,, yDot, ,]
[), ), ), {, provider, ., computeParameterJacobian, (, t, ,, y, ,, yDot, ,, param, ., getParameterName, (, ), ,]
[t, ,, y, ,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =]
[y, ,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;]
[y, ,, yDot, ,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;]
[yDot, ,, param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;, i, <]
[param, ., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;]
[., getParameterName, (, ), ,, dFdP, ), ;, for, (, int, i, =, 0, ;, i, <, stateDim, ;, ++]
[(, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =]
[(, int, i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =]
[i, =, 0, ;, i, <, stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, []
[stateDim, ;, ++, i, ), {, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =]
[{, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =, startIndex, ;, double, s, =]
[{, final, double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =, startIndex, ;, double, s, =]
[double, [, ], dFdYi, =, dFdY, [, i, ], ;, int, zIndex, =, startIndex, ;, double, s, =, dFdP, []
[], ;, int, zIndex, =, startIndex, ;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =]
[int, zIndex, =, startIndex, ;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =, 0, ;]
[int, zIndex, =, startIndex, ;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =, 0, ;]
[=, startIndex, ;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =, 0, ;, l, <]
[;, double, s, =, dFdP, [, i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;]
[double, s, =, dFdP, [, i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++]
[dFdP, [, i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {]
[i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=]
[i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=]
[i, ], ;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=]
[;, for, (, int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, []
[int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *]
[int, l, =, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *]
[=, 0, ;, l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, []
[l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;]
[l, <, stateDim, ;, ++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;]
[++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }]
[++, l, ), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }]
[), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, []
[), {, s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, []
[s, +=, dFdYi, [, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +]
[[, l, ], *, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =]
[*, z, [, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }]
[[, zIndex, ], ;, zIndex, ++, ;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =]
[;, }, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }, }, if, (]
[}, zDot, [, startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }, }, if, (, !]
[startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }, }, if, (, !, found, ), {]
[startIndex, +, i, ], =, s, ;, }, found, =, true, ;, }, }, if, (, !, found, ), {]
[=, s, ;, }, found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (]
[;, }, found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,]
[found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,, startIndex, ,]
[found, =, true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,, startIndex, ,]
[true, ;, }, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex, +]
[}, }, if, (, !, found, ), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex, +, stateDim, ,]
[!, found, ), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex, +, stateDim, ,, 0.0, ), ;, }]
[), {, Arrays, ., fill, (, zDot, ,, startIndex, ,, startIndex, +, stateDim, ,, 0.0, ), ;, }, startIndex, +=]
[[, ], hY, ;, public, MainStateJacobianWrapper, (, final, FirstOrderDifferentialEquations, ode, ,, final, double, [, ], hY, ), throws, DimensionMismatchException, {]
[[, ], hY, ;, public, MainStateJacobianWrapper, (, final, FirstOrderDifferentialEquations, ode, ,, final, double, [, ], hY, ), throws, DimensionMismatchException, {]
[public, MainStateJacobianWrapper, (, final, FirstOrderDifferentialEquations, ode, ,, final, double, [, ], hY, ), throws, DimensionMismatchException, {, this, ., ode, =]
[(, final, FirstOrderDifferentialEquations, ode, ,, final, double, [, ], hY, ), throws, DimensionMismatchException, {, this, ., ode, =, ode, ;]
[(, final, FirstOrderDifferentialEquations, ode, ,, final, double, [, ], hY, ), throws, DimensionMismatchException, {, this, ., ode, =, ode, ;]
[,, final, double, [, ], hY, ), throws, DimensionMismatchException, {, this, ., ode, =, ode, ;, this, ., hY, =]
[,, final, double, [, ], hY, ), throws, DimensionMismatchException, {, this, ., ode, =, ode, ;, this, ., hY, =]
[DimensionMismatchException, {, this, ., ode, =, ode, ;, this, ., hY, =, hY, ., clone, (, ), ;, if, (]
[DimensionMismatchException, {, this, ., ode, =, ode, ;, this, ., hY, =, hY, ., clone, (, ), ;, if, (]
[DimensionMismatchException, {, this, ., ode, =, ode, ;, this, ., hY, =, hY, ., clone, (, ), ;, if, (]
[ode, =, ode, ;, this, ., hY, =, hY, ., clone, (, ), ;, if, (, hY, ., length, !=]
[ode, =, ode, ;, this, ., hY, =, hY, ., clone, (, ), ;, if, (, hY, ., length, !=]
[hY, ., clone, (, ), ;, if, (, hY, ., length, !=, ode, ., getDimension, (, ), ), {, throw]
[(, ), ;, if, (, hY, ., length, !=, ode, ., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (]
[(, ), ;, if, (, hY, ., length, !=, ode, ., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (]
[., length, !=, ode, ., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (, ode, ., getDimension, (, ), ,]
[., length, !=, ode, ., getDimension, (, ), ), {, throw, new, DimensionMismatchException, (, ode, ., getDimension, (, ), ,]
[ode, ., getDimension, (, ), ,, hY, ., length, ), ;, }, }, public, int, getDimension, (, ), {, return]
[ode, ., getDimension, (, ), ,, hY, ., length, ), ;, }, }, public, int, getDimension, (, ), {, return]
[computeDerivatives, (, double, t, ,, double, [, ], y, ,, double, [, ], yDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {]
[computeDerivatives, (, double, t, ,, double, [, ], y, ,, double, [, ], yDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {]
[,, double, [, ], y, ,, double, [, ], yDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, ode, ., computeDerivatives, (]
[[, ], y, ,, double, [, ], yDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, ode, ., computeDerivatives, (, t, ,]
[y, ,, double, [, ], yDot, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, ode, ., computeDerivatives, (, t, ,, y, ,]
[[, ], yDot, ,, double, [, ], [, ], dFdY, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =]
[[, ], yDot, ,, double, [, ], [, ], dFdY, ), throws, MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =]
[MaxCountExceededException, ,, DimensionMismatchException, {, final, int, n, =, ode, ., getDimension, (, ), ;, final, double, [, ], tmpDot, =]
[{, final, int, n, =, ode, ., getDimension, (, ), ;, final, double, [, ], tmpDot, =, new, double, []
[(, ), ;, final, double, [, ], tmpDot, =, new, double, [, n, ], ;, for, (, int, j, =]
[;, final, double, [, ], tmpDot, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[;, final, double, [, ], tmpDot, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;]
[double, [, ], tmpDot, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <]
[], tmpDot, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[tmpDot, =, new, double, [, n, ], ;, for, (, int, j, =, 0, ;, j, <, n, ;, ++]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =]
[(, int, j, =, 0, ;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =, y, []
[=, 0, ;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;]
[=, 0, ;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;]
[;, j, <, n, ;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, []
[n, ;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=]
[n, ;, ++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=]
[++, j, ), {, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=, hY, []
[{, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=, hY, [, j, ], ;]
[{, final, double, savedYj, =, y, [, j, ], ;, y, [, j, ], +=, hY, [, j, ], ;]
[=, y, [, j, ], ;, y, [, j, ], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (]
[[, j, ], ;, y, [, j, ], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,]
[], ;, y, [, j, ], +=, hY, [, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,]
[[, j, ], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =]
[], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;]
[], ;, ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;]
[ode, ., computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <]
[computeDerivatives, (, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, t, ,, y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++]
[y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[y, ,, tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {]
[tmpDot, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, []
[for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], []
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =]
[i, =, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =]
[=, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (]
[=, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (]
[=, 0, ;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (]
[;, i, <, n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, []
[n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -]
[n, ;, ++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -]
[++, i, ), {, dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot, []
[dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /]
[dFdY, [, i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /]
[i, ], [, j, ], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, []
[], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }]
[], =, (, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }]
[(, tmpDot, [, i, ], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }, y, []
[i, ], -, yDot, [, i, ], ), /, hY, [, j, ], ;, }, y, [, j, ], =]
[], =, savedYj, ;, }, }, }, public, static, class, MismatchedEquations, extends, MathIllegalArgumentException, {, private, static, final, long, serialVersionUID, =]
[class, MismatchedEquations, extends, MathIllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 20120902L, ;, public, MismatchedEquations, (, ), {, super, (]
[class, MismatchedEquations, extends, MathIllegalArgumentException, {, private, static, final, long, serialVersionUID, =, 20120902L, ;, public, MismatchedEquations, (, ), {, super, (]
