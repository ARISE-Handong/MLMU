[;, private, double, lower, ;, private, double, upper, ;, public, Range, (, double, lower, ,, double, upper, ), {, if]
[;, private, double, lower, ;, private, double, upper, ;, public, Range, (, double, lower, ,, double, upper, ), {, if]
[), {, String, msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg]
[>, upper, ), {, String, msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException]
[), {, String, msg, =, "Range(double, double): require lower (", +, lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg]
[;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper]
[+, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;, this, ., upper]
[+, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;, this]
[+, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower]
[+, lower, +, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower]
[+, ") <= upper (", +, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower]
[+, upper, +, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;, this]
[+, ").", ;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;, this, ., upper]
[;, throw, new, IllegalArgumentException, (, msg, ), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper]
[;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, getLowerBound, (, )]
[), ;, }, this, ., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, getLowerBound, (]
[=, lower, ;, this, ., upper, =, upper, ;, }, public, double, getLowerBound, (, ), {, return, this, ., lower]
[., lower, =, lower, ;, this, ., upper, =, upper, ;, }, public, double, getLowerBound, (, ), {, return, this]
[;, this, ., upper, =, upper, ;, }, public, double, getLowerBound, (, ), {, return, this, ., lower, ;, }]
[=, upper, ;, }, public, double, getLowerBound, (, ), {, return, this, ., lower, ;, }, public, double, getUpperBound, (]
[., upper, =, upper, ;, }, public, double, getLowerBound, (, ), {, return, this, ., lower, ;, }, public, double]
[;, }, public, double, getLowerBound, (, ), {, return, this, ., lower, ;, }, public, double, getUpperBound, (, ), {]
[;, }, public, double, getUpperBound, (, ), {, return, this, ., upper, ;, }, public, double, getLength, (, ), {]
[., lower, ;, }, public, double, getUpperBound, (, ), {, return, this, ., upper, ;, }, public, double, getLength, (]
[;, }, public, double, getLength, (, ), {, return, this, ., upper, -, this, ., lower, ;, }, public, double]
[., upper, ;, }, public, double, getLength, (, ), {, return, this, ., upper, -, this, ., lower, ;, }]
[;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +, this, ., upper, /, 2.0]
[-, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +, this]
[., upper, -, this, ., lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0]
[;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +, this, ., upper, /, 2.0]
[., lower, ;, }, public, double, getCentralValue, (, ), {, return, this, ., lower, /, 2.0, +, this, ., upper]
[;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&, value, <=]
[+, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=]
[/, 2.0, +, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (]
[., lower, /, 2.0, +, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {]
[+, this, ., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=]
[;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&, value, <=]
[/, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&]
[., upper, /, 2.0, ;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, .]
[;, }, public, boolean, contains, (, double, value, ), {, return, (, value, >=, this, ., lower, &&, value, <=]
[;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=, this, ., lower]
[), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=, this, .]
[&&, value, <=, this, ., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {]
[>=, this, ., lower, &&, value, <=, this, ., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,]
[&&, value, <=, this, ., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {]
[., lower, &&, value, <=, this, ., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1]
[), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=, this, .]
[<=, this, ., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (]
[), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=, this, .]
[., upper, ), ;, }, public, boolean, intersects, (, double, b0, ,, double, b1, ), {, if, (, b0, <=]
[), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <, this, .]
[<=, this, ., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (]
[), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <, this, .]
[., lower, ), {, return, (, b1, >, this, ., lower, ), ;, }, else, {, return, (, b0, <]
[;, }, else, {, return, (, b0, <, this, ., upper, &&, b1, >=, b0, ), ;, }, }, public]
[), ;, }, else, {, return, (, b0, <, this, ., upper, &&, b1, >=, b0, ), ;, }, }]
[>, this, ., lower, ), ;, }, else, {, return, (, b0, <, this, ., upper, &&, b1, >=, b0]
[), ;, }, else, {, return, (, b0, <, this, ., upper, &&, b1, >=, b0, ), ;, }, }]
[., lower, ), ;, }, else, {, return, (, b0, <, this, ., upper, &&, b1, >=, b0, ), ;]
[;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range, ., getLowerBound, (, ), ,]
[), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range, ., getLowerBound, (, )]
[&&, b1, >=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range]
[<, this, ., upper, &&, b1, >=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {]
[&&, b1, >=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range]
[., upper, &&, b1, >=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects]
[), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range, ., getLowerBound, (, )]
[>=, b0, ), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range, ., getLowerBound]
[), ;, }, }, public, boolean, intersects, (, Range, range, ), {, return, intersects, (, range, ., getLowerBound, (, )]
[;, }, public, double, constrain, (, double, value, ), {, double, result, =, value, ;, if, (, !, contains, (]
[,, range, ., getUpperBound, (, ), ), ;, }, public, double, constrain, (, double, value, ), {, double, result, =]
[., getLowerBound, (, ), ,, range, ., getUpperBound, (, ), ), ;, }, public, double, constrain, (, double, value, )]
[), ;, }, public, double, constrain, (, double, value, ), {, double, result, =, value, ;, if, (, !, contains]
[., getUpperBound, (, ), ), ;, }, public, double, constrain, (, double, value, ), {, double, result, =, value, ;]
[;, if, (, !, contains, (, value, ), ), {, if, (, value, >, this, ., upper, ), {, result]
[), {, if, (, value, >, this, ., upper, ), {, result, =, this, ., upper, ;, }, else, if]
[), {, if, (, value, >, this, ., upper, ), {, result, =, this, ., upper, ;, }, else, if]
[), ), {, if, (, value, >, this, ., upper, ), {, result, =, this, ., upper, ;, }, else]
[), {, result, =, this, ., upper, ;, }, else, if, (, value, <, this, ., lower, ), {, result]
[>, this, ., upper, ), {, result, =, this, ., upper, ;, }, else, if, (, value, <, this, .]
[), {, result, =, this, ., upper, ;, }, else, if, (, value, <, this, ., lower, ), {, result]
[., upper, ), {, result, =, this, ., upper, ;, }, else, if, (, value, <, this, ., lower, )]
[=, this, ., upper, ;, }, else, if, (, value, <, this, ., lower, ), {, result, =, this, .]
[;, }, else, if, (, value, <, this, ., lower, ), {, result, =, this, ., lower, ;, }, }]
[., upper, ;, }, else, if, (, value, <, this, ., lower, ), {, result, =, this, ., lower, ;]
[), {, result, =, this, ., lower, ;, }, }, return, result, ;, }, public, static, Range, combine, (, Range]
[<, this, ., lower, ), {, result, =, this, ., lower, ;, }, }, return, result, ;, }, public, static]
[), {, result, =, this, ., lower, ;, }, }, return, result, ;, }, public, static, Range, combine, (, Range]
[., lower, ), {, result, =, this, ., lower, ;, }, }, return, result, ;, }, public, static, Range, combine]
[=, this, ., lower, ;, }, }, return, result, ;, }, public, static, Range, combine, (, Range, range1, ,, Range]
[;, }, }, return, result, ;, }, public, static, Range, combine, (, Range, range1, ,, Range, range2, ), {, if]
[., lower, ;, }, }, return, result, ;, }, public, static, Range, combine, (, Range, range1, ,, Range, range2, )]
[;, }, public, static, Range, combine, (, Range, range1, ,, Range, range2, ), {, if, (, range1, ==, null, )]
[), {, return, range2, ;, }, else, {, if, (, range2, ==, null, ), {, return, range1, ;, }, else]
[==, null, ), {, return, range2, ;, }, else, {, if, (, range2, ==, null, ), {, return, range1, ;]
[), {, return, range2, ;, }, else, {, if, (, range2, ==, null, ), {, return, range1, ;, }, else]
[;, }, else, {, if, (, range2, ==, null, ), {, return, range1, ;, }, else, {, double, l, =]
[), {, return, range1, ;, }, else, {, double, l, =, Math, ., min, (, range1, ., getLowerBound, (, )]
[==, null, ), {, return, range1, ;, }, else, {, double, l, =, Math, ., min, (, range1, ., getLowerBound]
[), {, return, range1, ;, }, else, {, double, l, =, Math, ., min, (, range1, ., getLowerBound, (, )]
[;, }, else, {, double, l, =, Math, ., min, (, range1, ., getLowerBound, (, ), ,, range2, ., getLowerBound]
[;, double, u, =, Math, ., max, (, range1, ., getUpperBound, (, ), ,, range2, ., getUpperBound, (, ), )]
[., min, (, range1, ., getLowerBound, (, ), ,, range2, ., getLowerBound, (, ), ), ;, double, u, =, Math]
[,, range2, ., getLowerBound, (, ), ), ;, double, u, =, Math, ., max, (, range1, ., getUpperBound, (, )]
[., getLowerBound, (, ), ,, range2, ., getLowerBound, (, ), ), ;, double, u, =, Math, ., max, (, range1]
[), ;, double, u, =, Math, ., max, (, range1, ., getUpperBound, (, ), ,, range2, ., getUpperBound, (, )]
[., getLowerBound, (, ), ), ;, double, u, =, Math, ., max, (, range1, ., getUpperBound, (, ), ,, range2]
[;, return, new, Range, (, l, ,, u, ), ;, }, }, }, public, static, Range, expandToInclude, (, Range, range]
[., max, (, range1, ., getUpperBound, (, ), ,, range2, ., getUpperBound, (, ), ), ;, return, new, Range, (]
[,, range2, ., getUpperBound, (, ), ), ;, return, new, Range, (, l, ,, u, ), ;, }, }, }]
[., getUpperBound, (, ), ,, range2, ., getUpperBound, (, ), ), ;, return, new, Range, (, l, ,, u, )]
[), ;, return, new, Range, (, l, ,, u, ), ;, }, }, }, public, static, Range, expandToInclude, (, Range]
[., getUpperBound, (, ), ), ;, return, new, Range, (, l, ,, u, ), ;, }, }, }, public, static]
[;, }, }, }, public, static, Range, expandToInclude, (, Range, range, ,, double, value, ), {, if, (, range, ==]
[,, u, ), ;, }, }, }, public, static, Range, expandToInclude, (, Range, range, ,, double, value, ), {, if]
[), ;, }, }, }, public, static, Range, expandToInclude, (, Range, range, ,, double, value, ), {, if, (, range]
[), {, return, new, Range, (, value, ,, value, ), ;, }, if, (, value, <, range, ., getLowerBound, (]
[==, null, ), {, return, new, Range, (, value, ,, value, ), ;, }, if, (, value, <, range, .]
[), {, return, new, Range, (, value, ,, value, ), ;, }, if, (, value, <, range, ., getLowerBound, (]
[;, }, if, (, value, <, range, ., getLowerBound, (, ), ), {, return, new, Range, (, value, ,, range]
[,, value, ), ;, }, if, (, value, <, range, ., getLowerBound, (, ), ), {, return, new, Range, (]
[), ;, }, if, (, value, <, range, ., getLowerBound, (, ), ), {, return, new, Range, (, value, ,]
[), {, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), ), ;, }, else, if, (, value]
[<, range, ., getLowerBound, (, ), ), {, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), )]
[), {, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), ), ;, }, else, if, (, value]
[., getLowerBound, (, ), ), {, return, new, Range, (, value, ,, range, ., getUpperBound, (, ), ), ;, }]
[;, }, else, if, (, value, >, range, ., getUpperBound, (, ), ), {, return, new, Range, (, range, .]
[,, range, ., getUpperBound, (, ), ), ;, }, else, if, (, value, >, range, ., getUpperBound, (, ), )]
[), ;, }, else, if, (, value, >, range, ., getUpperBound, (, ), ), {, return, new, Range, (, range]
[., getUpperBound, (, ), ), ;, }, else, if, (, value, >, range, ., getUpperBound, (, ), ), {, return]
[), {, return, new, Range, (, range, ., getLowerBound, (, ), ,, value, ), ;, }, else, {, return, range]
[>, range, ., getUpperBound, (, ), ), {, return, new, Range, (, range, ., getLowerBound, (, ), ,, value, )]
[), {, return, new, Range, (, range, ., getLowerBound, (, ), ,, value, ), ;, }, else, {, return, range]
[., getUpperBound, (, ), ), {, return, new, Range, (, range, ., getLowerBound, (, ), ,, value, ), ;, }]
[;, }, else, {, return, range, ;, }, }, public, static, Range, expand, (, Range, range, ,, double, lowerMargin, ,]
[,, value, ), ;, }, else, {, return, range, ;, }, }, public, static, Range, expand, (, Range, range, ,]
[., getLowerBound, (, ), ,, value, ), ;, }, else, {, return, range, ;, }, }, public, static, Range, expand]
[), ;, }, else, {, return, range, ;, }, }, public, static, Range, expand, (, Range, range, ,, double, lowerMargin]
[;, }, }, public, static, Range, expand, (, Range, range, ,, double, lowerMargin, ,, double, upperMargin, ), {, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =, range, ., getLength, (, ), ;, double]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =, range, ., getLength, (, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, double, length, =, range, ., getLength, (, ), ;, double]
[;, }, double, length, =, range, ., getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -]
[), ;, }, double, length, =, range, ., getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, )]
[;, double, lower, =, range, ., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound]
[., getLength, (, ), ;, double, lower, =, range, ., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper]
[;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, )]
[-, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (]
[., getLowerBound, (, ), -, length, *, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +, length, *]
[;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, )]
[*, lowerMargin, ;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >]
[;, double, upper, =, range, ., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, )]
[;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =]
[+, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /]
[., getUpperBound, (, ), +, length, *, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /]
[;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =]
[*, upperMargin, ;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;]
[;, if, (, lower, >, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =]
[), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range]
[>, upper, ), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return]
[), {, lower, =, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range]
[=, lower, /, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range, (, lower, ,]
[;, upper, =, lower, ;, }, return, new, Range, (, lower, ,, upper, ), ;, }, public, static, Range, shift]
[+, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range, (, lower, ,, upper, ), ;, }]
[/, 2.0, +, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range, (, lower, ,, upper, )]
[+, upper, /, 2.0, ;, upper, =, lower, ;, }, return, new, Range, (, lower, ,, upper, ), ;, }]
[;, upper, =, lower, ;, }, return, new, Range, (, lower, ,, upper, ), ;, }, public, static, Range, shift]
[/, 2.0, ;, upper, =, lower, ;, }, return, new, Range, (, lower, ,, upper, ), ;, }, public, static]
[;, upper, =, lower, ;, }, return, new, Range, (, lower, ,, upper, ), ;, }, public, static, Range, shift]
[=, lower, ;, }, return, new, Range, (, lower, ,, upper, ), ;, }, public, static, Range, shift, (, Range]
[;, }, return, new, Range, (, lower, ,, upper, ), ;, }, public, static, Range, shift, (, Range, base, ,]
[;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ), {, return, shift, (, base, ,, delta]
[,, upper, ), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ), {, return, shift, (]
[), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ), {, return, shift, (, base, ,]
[;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {, if, (, base]
[,, delta, ,, false, ), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing]
[,, false, ), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {]
[), ;, }, public, static, Range, shift, (, Range, base, ,, double, delta, ,, boolean, allowZeroCrossing, ), {, if, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base]
[;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base, ., getLowerBound, (, ), +, delta, ,, base]
[), ;, }, if, (, allowZeroCrossing, ), {, return, new, Range, (, base, ., getLowerBound, (, ), +, delta, ,]
[), {, return, new, Range, (, base, ., getLowerBound, (, ), +, delta, ,, base, ., getUpperBound, (, ), +]
[;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta, ), ,, shiftWithNoZeroCrossing]
[,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base]
[+, delta, ,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing]
[., getLowerBound, (, ), +, delta, ,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return]
[,, base, ., getUpperBound, (, ), +, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base]
[), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta, ), ,]
[+, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta]
[., getUpperBound, (, ), +, delta, ), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound]
[), ;, }, else, {, return, new, Range, (, shiftWithNoZeroCrossing, (, base, ., getLowerBound, (, ), ,, delta, ), ,]
[;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (, value, >, 0.0]
[,, shiftWithNoZeroCrossing, (, base, ., getUpperBound, (, ), ,, delta, ), ), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (]
[,, delta, ), ,, shiftWithNoZeroCrossing, (, base, ., getUpperBound, (, ), ,, delta, ), ), ;, }, }, private, static]
[., getLowerBound, (, ), ,, delta, ), ,, shiftWithNoZeroCrossing, (, base, ., getUpperBound, (, ), ,, delta, ), ), ;]
[), ,, shiftWithNoZeroCrossing, (, base, ., getUpperBound, (, ), ,, delta, ), ), ;, }, }, private, static, double, shiftWithNoZeroCrossing]
[), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (, value, >]
[,, delta, ), ), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if]
[., getUpperBound, (, ), ,, delta, ), ), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double]
[), ), ;, }, }, private, static, double, shiftWithNoZeroCrossing, (, double, value, ,, double, delta, ), {, if, (, value]
[), {, return, Math, ., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (, value, <]
[>, 0.0, ), {, return, Math, ., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (]
[), {, return, Math, ., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (, value, <]
[;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (, value, +, delta, ,, 0.0]
[., max, (, value, +, delta, ,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return]
[,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (, value, +]
[+, delta, ,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (]
[,, 0.0, ), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (, value, +]
[), ;, }, else, if, (, value, <, 0.0, ), {, return, Math, ., min, (, value, +, delta, ,]
[), {, return, Math, ., min, (, value, +, delta, ,, 0.0, ), ;, }, else, {, return, value, +]
[<, 0.0, ), {, return, Math, ., min, (, value, +, delta, ,, 0.0, ), ;, }, else, {, return]
[), {, return, Math, ., min, (, value, +, delta, ,, 0.0, ), ;, }, else, {, return, value, +]
[;, }, else, {, return, value, +, delta, ;, }, }, public, static, Range, scale, (, Range, base, ,, double]
[., min, (, value, +, delta, ,, 0.0, ), ;, }, else, {, return, value, +, delta, ;, }, }]
[,, 0.0, ), ;, }, else, {, return, value, +, delta, ;, }, }, public, static, Range, scale, (, Range]
[+, delta, ,, 0.0, ), ;, }, else, {, return, value, +, delta, ;, }, }, public, static, Range, scale]
[,, 0.0, ), ;, }, else, {, return, value, +, delta, ;, }, }, public, static, Range, scale, (, Range]
[), ;, }, else, {, return, value, +, delta, ;, }, }, public, static, Range, scale, (, Range, base, ,]
[;, }, }, public, static, Range, scale, (, Range, base, ,, double, factor, ), {, if, (, base, ==, null]
[+, delta, ;, }, }, public, static, Range, scale, (, Range, base, ,, double, factor, ), {, if, (, base]
[;, }, }, public, static, Range, scale, (, Range, base, ,, double, factor, ), {, if, (, base, ==, null]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, factor, <, 0, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'base' argument.", ), ;, }, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException]
[;, }, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range]
[), ;, }, if, (, factor, <, 0, ), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new]
[), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (, base, ., getLowerBound, (, ), *]
[<, 0, ), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (, base, ., getLowerBound, (]
[), {, throw, new, IllegalArgumentException, (, "Negative 'factor' argument.", ), ;, }, return, new, Range, (, base, ., getLowerBound, (, ), *]
[;, }, return, new, Range, (, base, ., getLowerBound, (, ), *, factor, ,, base, ., getUpperBound, (, ), *]
[), ;, }, return, new, Range, (, base, ., getLowerBound, (, ), *, factor, ,, base, ., getUpperBound, (, )]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (, obj, instanceof, Range, ), ), {]
[,, base, ., getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if]
[*, factor, ,, base, ., getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, )]
[., getLowerBound, (, ), *, factor, ,, base, ., getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals]
[,, base, ., getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if]
[), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (, obj, instanceof, Range, ), )]
[*, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (, obj, instanceof, Range]
[., getUpperBound, (, ), *, factor, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !]
[), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, !, (, obj, instanceof, Range, ), )]
[), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (, this, .]
[), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (, this, .]
[), ), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (, this]
[instanceof, Range, ), ), {, return, false, ;, }, Range, range, =, (, Range, ), obj, ;, if, (, !]
[;, }, Range, range, =, (, Range, ), obj, ;, if, (, !, (, this, ., lower, ==, range, .]
[;, if, (, !, (, this, ., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if]
[;, if, (, !, (, this, ., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if]
[), {, return, false, ;, }, if, (, !, (, this, ., upper, ==, range, ., upper, ), ), {]
[), {, return, false, ;, }, if, (, !, (, this, ., upper, ==, range, ., upper, ), ), {]
[), ), {, return, false, ;, }, if, (, !, (, this, ., upper, ==, range, ., upper, ), )]
[==, range, ., lower, ), ), {, return, false, ;, }, if, (, !, (, this, ., upper, ==, range]
[., lower, ==, range, ., lower, ), ), {, return, false, ;, }, if, (, !, (, this, ., upper]
[), ), {, return, false, ;, }, if, (, !, (, this, ., upper, ==, range, ., upper, ), )]
[., lower, ), ), {, return, false, ;, }, if, (, !, (, this, ., upper, ==, range, ., upper]
[;, }, if, (, !, (, this, ., upper, ==, range, ., upper, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;]
[==, range, ., upper, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, )]
[., upper, ==, range, ., upper, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;]
[., upper, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, temp, =]
[;, }, public, int, hashCode, (, ), {, int, result, ;, long, temp, ;, temp, =, Double, ., doubleToLongBits, (]
[=, Double, ., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (, temp, ^, (, temp]
[;, result, =, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =]
[., doubleToLongBits, (, this, ., lower, ), ;, result, =, (, int, ), (, temp, ^, (, temp, >, >]
[), ;, result, =, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp]
[., lower, ), ;, result, =, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), )]
[=, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, .]
[;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int]
[;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int]
[), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (]
[^, (, temp, >, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, )]
[), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (]
[), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +]
[>, >, >, 32, ), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =]
[), ), ;, temp, =, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +]
[=, Double, ., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, ), (]
[;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, )]
[., doubleToLongBits, (, this, ., upper, ), ;, result, =, 29, *, result, +, (, int, ), (, temp, ^]
[), ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32]
[., upper, ), ;, result, =, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >]
[=, 29, *, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;]
[;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +, ","]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return, result, ;, }]
[*, result, +, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return, result]
[+, (, int, ), (, temp, ^, (, temp, >, >, >, 32, ), ), ;, return, result, ;, }]
[;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +, ","]
[;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +, ","]
[), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +]
[^, (, temp, >, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {]
[), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +]
[), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower]
[>, >, >, 32, ), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range["]
[), ), ;, return, result, ;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower]
[;, }, public, String, toString, (, ), {, return, (, "Range[", +, this, ., lower, +, ",", +, this, .]
[;, }, }]
[), ;, }, }]
[+, "]", ), ;, }, }]
[+, this, ., upper, +, "]", ), ;, }, }]
[+, ",", +, this, ., upper, +, "]", ), ;, }, }]
[+, this, ., lower, +, ",", +, this, ., upper, +, "]", ), ;, }, }]
[+, ",", +, this, ., upper, +, "]", ), ;, }, }]
[., lower, +, ",", +, this, ., upper, +, "]", ), ;, }, }]
[+, this, ., upper, +, "]", ), ;, }, }]
[+, "]", ), ;, }, }]
[., upper, +, "]", ), ;, }, }]
[), ;, }, }]
