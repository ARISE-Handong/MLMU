[=, new, ArrayRealVector, (, n, ), ;, }, RealVector, normal, (, ), {, return, normal, ;, }, void, reset, (]
[;, }, RealVector, normal, (, ), {, return, normal, ;, }, void, reset, (, ), {, brightestIllumination, =, 0, ;]
[), ;, }, RealVector, normal, (, ), {, return, normal, ;, }, void, reset, (, ), {, brightestIllumination, =, 0]
[;, }, void, reset, (, ), {, brightestIllumination, =, 0, ;, brightestSample, =, null, ;, }, void, store, (, final]
[=, 0, ;, brightestSample, =, null, ;, }, void, store, (, final, double, illuminationFromSample, ,, final, Map, ., Entry, <]
[;, brightestSample, =, null, ;, }, void, store, (, final, double, illuminationFromSample, ,, final, Map, ., Entry, <, RealVector, ,]
[=, null, ;, }, void, store, (, final, double, illuminationFromSample, ,, final, Map, ., Entry, <, RealVector, ,, Double, >]
[;, }, void, store, (, final, double, illuminationFromSample, ,, final, Map, ., Entry, <, RealVector, ,, Double, >, sample, )]
[), {, this, ., brightestIllumination, =, illuminationFromSample, ;, this, ., brightestSample, =, sample, ;, }, }, double, illumination, (, )]
[>, this, ., brightestIllumination, ), {, this, ., brightestIllumination, =, illuminationFromSample, ;, this, ., brightestSample, =, sample, ;, }, }]
[), {, this, ., brightestIllumination, =, illuminationFromSample, ;, this, ., brightestSample, =, sample, ;, }, }, double, illumination, (, )]
[., brightestIllumination, ), {, this, ., brightestIllumination, =, illuminationFromSample, ;, this, ., brightestSample, =, sample, ;, }, }, double, illumination]
[=, illuminationFromSample, ;, this, ., brightestSample, =, sample, ;, }, }, double, illumination, (, ), {, return, brightestIllumination, ;, }]
[., brightestIllumination, =, illuminationFromSample, ;, this, ., brightestSample, =, sample, ;, }, }, double, illumination, (, ), {, return, brightestIllumination]
[;, this, ., brightestSample, =, sample, ;, }, }, double, illumination, (, ), {, return, brightestIllumination, ;, }, Map, .]
[=, sample, ;, }, }, double, illumination, (, ), {, return, brightestIllumination, ;, }, Map, ., Entry, <, RealVector, ,]
[., brightestSample, =, sample, ;, }, }, double, illumination, (, ), {, return, brightestIllumination, ;, }, Map, ., Entry, <]
[;, }, }, double, illumination, (, ), {, return, brightestIllumination, ;, }, Map, ., Entry, <, RealVector, ,, Double, >]
[;, }, Map, ., Entry, <, RealVector, ,, Double, >, sample, (, ), {, return, brightestSample, ;, }, }, public]
[;, }, }, public, MicrosphereInterpolatingFunction, (, double, [, ], [, ], xval, ,, double, [, ], yval, ,, int, brightnessExponent]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==, 0, ), {, throw, new]
[||, yval, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==, 0]
[==, null, ||, yval, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length]
[||, yval, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==, 0]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==, 0, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==, 0, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xval, ., length, ==, 0, ), {, throw, new]
[;, }, if, (, xval, ., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, yval, ., length, ), {]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, yval, ., length]
[., length, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, yval]
[), {, throw, new, NoDataException, (, ), ;, }, if, (, xval, ., length, !=, yval, ., length, ), {]
[;, }, if, (, xval, ., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (, xval, []
[!=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }]
[., length, !=, yval, ., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, )]
[), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (, xval, []
[., length, ), {, throw, new, DimensionMismatchException, (, xval, ., length, ,, yval, ., length, ), ;, }, if, (]
[;, }, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension]
[,, yval, ., length, ), ;, }, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException]
[., length, ,, yval, ., length, ), ;, }, if, (, xval, [, 0, ], ==, null, ), {, throw]
[), ;, }, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }]
[., length, ), ;, }, if, (, xval, [, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, )]
[), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length, ;, this, .]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length, ;]
[[, 0, ], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ]]
[], ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length]
[), {, throw, new, NullArgumentException, (, ), ;, }, dimension, =, xval, [, 0, ], ., length, ;, this, .]
[;, }, dimension, =, xval, [, 0, ], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new]
[=, xval, [, 0, ], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector]
[;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length]
[., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (, yval]
[[, 0, ], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double]
[], ., length, ;, this, ., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (]
[=, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (]
[., brightnessExponent, =, brightnessExponent, ;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length, ), ;]
[;, samples, =, new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (, int, i]
[=, new, HashMap, <, RealVector, ,, Double, >, (, yval, ., length, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, xval, ., length, ;, ++, i, ), {, final, double]
[), ;, for, (, int, i, =, 0, ;, i, <, xval, ., length, ;, ++, i, ), {, final]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, xval, ., length, ;, ++, i, )]
[;, i, <, xval, ., length, ;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i]
[;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (, xvalI, ==]
[<, xval, ., length, ;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i, ], ;]
[;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (, xvalI, ==]
[., length, ;, ++, i, ), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (]
[), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (, xvalI, ==, null, ), {]
[), {, final, double, [, ], xvalI, =, xval, [, i, ], ;, if, (, xvalI, ==, null, ), {]
[;, if, (, xvalI, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length]
[[, i, ], ;, if, (, xvalI, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], ;, if, (, xvalI, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, .]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length, !=, dimension, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length, !=, dimension, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, xvalI, ., length, !=, dimension, ), {, throw, new]
[;, }, if, (, xvalI, ., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension]
[), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector]
[!=, dimension, ), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (]
[., length, !=, dimension, ), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, .]
[), {, throw, new, DimensionMismatchException, (, xvalI, ., length, ,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector]
[;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, [, i, ], ), ;, }, microsphere]
[,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, [, i, ], )]
[., length, ,, dimension, ), ;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, [, i]
[), ;, }, samples, ., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, [, i, ], ), ;, }]
[;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;]
[., put, (, new, ArrayRealVector, (, xvalI, ), ,, yval, [, i, ], ), ;, }, microsphere, =, new, ArrayList]
[,, yval, [, i, ], ), ;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for]
[), ,, yval, [, i, ], ), ;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;]
[), ;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0]
[[, i, ], ), ;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int]
[], ), ;, }, microsphere, =, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =]
[=, new, ArrayList, <, MicrosphereSurfaceElement, >, (, microsphereElements, ), ;, for, (, int, i, =, 0, ;, i, <, microsphereElements]
[;, for, (, int, i, =, 0, ;, i, <, microsphereElements, ;, i, ++, ), {, microsphere, ., add, (]
[), ;, for, (, int, i, =, 0, ;, i, <, microsphereElements, ;, i, ++, ), {, microsphere, ., add]
[;, i, <, microsphereElements, ;, i, ++, ), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (, rand, ., nextVector, (]
[;, i, ++, ), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (, rand, ., nextVector, (, ), ), ), ;]
[<, microsphereElements, ;, i, ++, ), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (, rand, ., nextVector, (, ), )]
[;, i, ++, ), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (, rand, ., nextVector, (, ), ), ), ;]
[), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (, rand, ., nextVector, (, ), ), ), ;, }, }, public]
[++, ), {, microsphere, ., add, (, new, MicrosphereSurfaceElement, (, rand, ., nextVector, (, ), ), ), ;, }, }]
[;, }, }, public, double, value, (, double, [, ], point, ), throws, DimensionMismatchException, {, final, RealVector, p, =, new]
[., add, (, new, MicrosphereSurfaceElement, (, rand, ., nextVector, (, ), ), ), ;, }, }, public, double, value, (]
[), ;, }, }, public, double, value, (, double, [, ], point, ), throws, DimensionMismatchException, {, final, RealVector, p, =]
[), ), ;, }, }, public, double, value, (, double, [, ], point, ), throws, DimensionMismatchException, {, final, RealVector, p]
[., nextVector, (, ), ), ), ;, }, }, public, double, value, (, double, [, ], point, ), throws, DimensionMismatchException]
[;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, md, ., reset, (, ), ;, }, for, (, Map, .]
[), ;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, md, ., reset, (, ), ;, }, for, (, Map]
[), {, md, ., reset, (, ), ;, }, for, (, Map, ., Entry, <, RealVector, ,, Double, >, sd]
[;, }, for, (, Map, ., Entry, <, RealVector, ,, Double, >, sd, :, samples, ., entrySet, (, ), )]
[., reset, (, ), ;, }, for, (, Map, ., Entry, <, RealVector, ,, Double, >, sd, :, samples, .]
[), {, final, RealVector, diff, =, sd, ., getKey, (, ), ., subtract, (, p, ), ;, final, double, diffNorm]
[., entrySet, (, ), ), {, final, RealVector, diff, =, sd, ., getKey, (, ), ., subtract, (, p, )]
[;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (, FastMath, ., abs, (, diffNorm, ), <]
[., subtract, (, p, ), ;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (, FastMath, .]
[., getKey, (, ), ., subtract, (, p, ), ;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;]
[), ;, final, double, diffNorm, =, diff, ., getNorm, (, ), ;, if, (, FastMath, ., abs, (, diffNorm, )]
[;, if, (, FastMath, ., abs, (, diffNorm, ), <, FastMath, ., ulp, (, 1d, ), ), {, return, sd]
[., getNorm, (, ), ;, if, (, FastMath, ., abs, (, diffNorm, ), <, FastMath, ., ulp, (, 1d, )]
[), {, return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double]
[<, FastMath, ., ulp, (, 1d, ), ), {, return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement]
[., abs, (, diffNorm, ), <, FastMath, ., ulp, (, 1d, ), ), {, return, sd, ., getValue, (, )]
[), <, FastMath, ., ulp, (, 1d, ), ), {, return, sd, ., getValue, (, ), ;, }, for, (]
[), {, return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double]
[., ulp, (, 1d, ), ), {, return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :]
[), ), {, return, sd, ., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final]
[;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,]
[., getValue, (, ), ;, }, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, w, =, FastMath, .]
[), {, final, double, w, =, FastMath, ., pow, (, diffNorm, ,, -, brightnessExponent, ), ;, md, ., store, (]
[;, md, ., store, (, cosAngle, (, diff, ,, md, ., normal, (, ), ), *, w, ,, sd, )]
[., pow, (, diffNorm, ,, -, brightnessExponent, ), ;, md, ., store, (, cosAngle, (, diff, ,, md, ., normal]
[,, -, brightnessExponent, ), ;, md, ., store, (, cosAngle, (, diff, ,, md, ., normal, (, ), ), *]
[), ;, md, ., store, (, cosAngle, (, diff, ,, md, ., normal, (, ), ), *, w, ,, sd]
[), ;, md, ., store, (, cosAngle, (, diff, ,, md, ., normal, (, ), ), *, w, ,, sd]
[;, }, }, double, value, =, 0, ;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md, :, microsphere, )]
[., store, (, cosAngle, (, diff, ,, md, ., normal, (, ), ), *, w, ,, sd, ), ;, }]
[,, sd, ), ;, }, }, double, value, =, 0, ;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md]
[*, w, ,, sd, ), ;, }, }, double, value, =, 0, ;, double, totalWeight, =, 0, ;, for, (]
[,, md, ., normal, (, ), ), *, w, ,, sd, ), ;, }, }, double, value, =, 0, ;]
[), *, w, ,, sd, ), ;, }, }, double, value, =, 0, ;, double, totalWeight, =, 0, ;, for]
[., normal, (, ), ), *, w, ,, sd, ), ;, }, }, double, value, =, 0, ;, double, totalWeight]
[,, sd, ), ;, }, }, double, value, =, 0, ;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md]
[), ;, }, }, double, value, =, 0, ;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md, :, microsphere]
[;, double, totalWeight, =, 0, ;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, iV, =, md, .]
[;, for, (, MicrosphereSurfaceElement, md, :, microsphere, ), {, final, double, iV, =, md, ., illumination, (, ), ;, final]
[), {, final, double, iV, =, md, ., illumination, (, ), ;, final, Map, ., Entry, <, RealVector, ,, Double]
[;, final, Map, ., Entry, <, RealVector, ,, Double, >, sd, =, md, ., sample, (, ), ;, if, (]
[., illumination, (, ), ;, final, Map, ., Entry, <, RealVector, ,, Double, >, sd, =, md, ., sample, (]
[;, if, (, sd, !=, null, ), {, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=]
[., sample, (, ), ;, if, (, sd, !=, null, ), {, value, +=, iV, *, sd, ., getValue, (]
[), {, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return, value]
[!=, null, ), {, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }]
[), {, value, +=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return, value]
[+=, iV, *, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return, value, /, totalWeight, ;]
[;, totalWeight, +=, iV, ;, }, }, return, value, /, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v]
[*, sd, ., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return, value, /, totalWeight, ;, }, private]
[;, totalWeight, +=, iV, ;, }, }, return, value, /, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v]
[., getValue, (, ), ;, totalWeight, +=, iV, ;, }, }, return, value, /, totalWeight, ;, }, private, double, cosAngle]
[+=, iV, ;, }, }, return, value, /, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v, ,, final]
[;, }, }, return, value, /, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w]
[;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, ., dotProduct, (]
[/, totalWeight, ;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, .]
[;, }, private, double, cosAngle, (, final, RealVector, v, ,, final, RealVector, w, ), {, return, v, ., dotProduct, (]
[;, }, }]
[/, (, v, ., getNorm, (, ), *, w, ., getNorm, (, ), ), ;, }, }]
[., dotProduct, (, w, ), /, (, v, ., getNorm, (, ), *, w, ., getNorm, (, ), ), ;]
[), /, (, v, ., getNorm, (, ), *, w, ., getNorm, (, ), ), ;, }, }]
[;, }, }]
[), ;, }, }]
[*, w, ., getNorm, (, ), ), ;, }, }]
[., getNorm, (, ), *, w, ., getNorm, (, ), ), ;, }, }]
[), ;, }, }]
[., getNorm, (, ), ), ;, }, }]
