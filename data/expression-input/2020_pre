[commons, ., math3, ., exception, ., DimensionMismatchException, ;, public, class, VectorialMean, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[final, long, serialVersionUID, =, 8223009086481006892L, ;, private, final, Mean, [, ], means, ;, public, VectorialMean, (, int, dimension, ), {]
[serialVersionUID, =, 8223009086481006892L, ;, private, final, Mean, [, ], means, ;, public, VectorialMean, (, int, dimension, ), {, means, =]
[;, private, final, Mean, [, ], means, ;, public, VectorialMean, (, int, dimension, ), {, means, =, new, Mean, []
[public, VectorialMean, (, int, dimension, ), {, means, =, new, Mean, [, dimension, ], ;, for, (, int, i, =]
[(, int, dimension, ), {, means, =, new, Mean, [, dimension, ], ;, for, (, int, i, =, 0, ;]
[(, int, dimension, ), {, means, =, new, Mean, [, dimension, ], ;, for, (, int, i, =, 0, ;]
[dimension, ), {, means, =, new, Mean, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <]
[{, means, =, new, Mean, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[means, =, new, Mean, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++]
[Mean, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {]
[Mean, [, dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {]
[dimension, ], ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, means, []
[for, (, int, i, =, 0, ;, i, <, dimension, ;, ++, i, ), {, means, [, i, ], =]
[Mean, (, ), ;, }, }, public, void, increment, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[Mean, (, ), ;, }, }, public, void, increment, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[Mean, (, ), ;, }, }, public, void, increment, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[}, }, public, void, increment, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=]
[}, }, public, void, increment, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=]
[double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, means, ., length, ), {, throw]
[v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, means, ., length, ), {, throw, new, DimensionMismatchException, (]
[v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, means, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, v, ., length, !=, means, ., length, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[{, if, (, v, ., length, !=, means, ., length, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[{, throw, new, DimensionMismatchException, (, v, ., length, ,, means, ., length, ), ;, }, for, (, int, i, =]
[new, DimensionMismatchException, (, v, ., length, ,, means, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[new, DimensionMismatchException, (, v, ., length, ,, means, ., length, ), ;, }, for, (, int, i, =, 0, ;]
[(, v, ., length, ,, means, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, v, ., length, ,, means, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, means, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, v, ., length, ;]
[means, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, ++]
[), ;, }, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, ++, i, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, ++, i, ), {]
[}, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, ++, i, ), {, means, []
[=, 0, ;, i, <, v, ., length, ;, ++, i, ), {, means, [, i, ], ., increment, (]
[=, 0, ;, i, <, v, ., length, ;, ++, i, ), {, means, [, i, ], ., increment, (]
[;, i, <, v, ., length, ;, ++, i, ), {, means, [, i, ], ., increment, (, v, []
[[, i, ], ), ;, }, }, public, double, [, ], getResult, (, ), {, double, [, ], result, =]
[), ;, }, }, public, double, [, ], getResult, (, ), {, double, [, ], result, =, new, double, []
[), ;, }, }, public, double, [, ], getResult, (, ), {, double, [, ], result, =, new, double, []
[), {, double, [, ], result, =, new, double, [, means, ., length, ], ;, for, (, int, i, =]
[double, [, ], result, =, new, double, [, means, ., length, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], result, =, new, double, [, means, ., length, ], ;, for, (, int, i, =, 0, ;]
[], result, =, new, double, [, means, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[], result, =, new, double, [, means, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, means, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;]
[[, means, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, ++]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, ++, i, ), {]
[length, ], ;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, result, ., length, ;, ++, i, ), {, result, []
[int, i, =, 0, ;, i, <, result, ., length, ;, ++, i, ), {, result, [, i, ], =]
[int, i, =, 0, ;, i, <, result, ., length, ;, ++, i, ), {, result, [, i, ], =]
[int, i, =, 0, ;, i, <, result, ., length, ;, ++, i, ), {, result, [, i, ], =]
[=, 0, ;, i, <, result, ., length, ;, ++, i, ), {, result, [, i, ], =, means, []
[++, i, ), {, result, [, i, ], =, means, [, i, ], ., getResult, (, ), ;, }, return]
[[, i, ], ., getResult, (, ), ;, }, return, result, ;, }, public, long, getN, (, ), {, return]
[[, i, ], ., getResult, (, ), ;, }, return, result, ;, }, public, long, getN, (, ), {, return]
[i, ], ., getResult, (, ), ;, }, return, result, ;, }, public, long, getN, (, ), {, return, (]
[i, ], ., getResult, (, ), ;, }, return, result, ;, }, public, long, getN, (, ), {, return, (]
[i, ], ., getResult, (, ), ;, }, return, result, ;, }, public, long, getN, (, ), {, return, (]
[(, ), ;, }, return, result, ;, }, public, long, getN, (, ), {, return, (, means, ., length, ==]
[}, return, result, ;, }, public, long, getN, (, ), {, return, (, means, ., length, ==, 0, ), ?]
[result, ;, }, public, long, getN, (, ), {, return, (, means, ., length, ==, 0, ), ?, 0, :]
[result, ;, }, public, long, getN, (, ), {, return, (, means, ., length, ==, 0, ), ?, 0, :]
[result, ;, }, public, long, getN, (, ), {, return, (, means, ., length, ==, 0, ), ?, 0, :]
[}, public, long, getN, (, ), {, return, (, means, ., length, ==, 0, ), ?, 0, :, means, []
[0, ], ., getN, (, ), ;, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =]
[), ;, }, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =]
[}, @, Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[Override, public, int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =]
[int, hashCode, (, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *]
[(, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +]
[(, ), {, final, int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +]
[int, prime, =, 31, ;, int, result, =, 1, ;, result, =, prime, *, result, +, Arrays, ., hashCode, (]
[;, int, result, =, 1, ;, result, =, prime, *, result, +, Arrays, ., hashCode, (, means, ), ;, return]
[(, means, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[(, means, ), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, return, result, ;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;, }, if, (, !, (]
[this, ==, obj, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, VectorialMean, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, VectorialMean, ), ), {, return, false, ;, }, VectorialMean, other, =]
[if, (, !, (, obj, instanceof, VectorialMean, ), ), {, return, false, ;, }, VectorialMean, other, =, (, VectorialMean, )]
[obj, instanceof, VectorialMean, ), ), {, return, false, ;, }, VectorialMean, other, =, (, VectorialMean, ), obj, ;, if, (]
[instanceof, VectorialMean, ), ), {, return, false, ;, }, VectorialMean, other, =, (, VectorialMean, ), obj, ;, if, (, !]
[instanceof, VectorialMean, ), ), {, return, false, ;, }, VectorialMean, other, =, (, VectorialMean, ), obj, ;, if, (, !]
[{, return, false, ;, }, VectorialMean, other, =, (, VectorialMean, ), obj, ;, if, (, !, Arrays, ., equals, (]
[false, ;, }, VectorialMean, other, =, (, VectorialMean, ), obj, ;, if, (, !, Arrays, ., equals, (, means, ,]
[false, ;, }, VectorialMean, other, =, (, VectorialMean, ), obj, ;, if, (, !, Arrays, ., equals, (, means, ,]
[VectorialMean, ), obj, ;, if, (, !, Arrays, ., equals, (, means, ,, other, ., means, ), ), {, return]
[if, (, !, Arrays, ., equals, (, means, ,, other, ., means, ), ), {, return, false, ;, }, return]
