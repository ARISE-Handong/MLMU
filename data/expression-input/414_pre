[commons, ., math3, ., random, ., Well19937c, ;, public, class, NormalDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =]
[public, class, NormalDistribution, extends, AbstractRealDistribution, {, public, static, final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =]
[final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, static, final, double, SQRT2PI, =]
[final, double, DEFAULT_INVERSE_ABSOLUTE_ACCURACY, =, 1e-9, ;, private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, static, final, double, SQRT2PI, =]
[1e-9, ;, private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (]
[1e-9, ;, private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (]
[private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *]
[private, static, final, long, serialVersionUID, =, 8589540077390120676L, ;, private, static, final, double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *]
[double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =]
[double, SQRT2PI, =, FastMath, ., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =]
[., sqrt, (, 2, *, FastMath, ., PI, ), ;, private, static, final, double, SQRT2, =, FastMath, ., sqrt, (]
[double, mean, ;, private, final, double, standardDeviation, ;, private, final, double, solverAbsoluteAccuracy, ;, public, NormalDistribution, (, ), {, this, (]
[;, private, final, double, standardDeviation, ;, private, final, double, solverAbsoluteAccuracy, ;, public, NormalDistribution, (, ), {, this, (, 0, ,]
[0, ,, 1, ), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ), throws, NotStrictlyPositiveException, {, this, (]
[1, ), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ), throws, NotStrictlyPositiveException, {, this, (, mean, ,]
[;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ), throws, NotStrictlyPositiveException, {, this, (, mean, ,, sd, ,]
[), ;, }, public, NormalDistribution, (, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (]
[(, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,]
[mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, mean, ,]
[double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, this, (, new, Well19937c, (, ), ,, mean, ,, sd, ,]
[public, NormalDistribution, (, RandomGenerator, rng, ,, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (]
[,, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[,, double, mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (]
[mean, ,, double, sd, ,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, sd, <=]
[,, double, inverseCumAccuracy, ), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, sd, <=, 0, ), {, throw]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, sd, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[), throws, NotStrictlyPositiveException, {, super, (, rng, ), ;, if, (, sd, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, sd, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,]
[;, if, (, sd, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }]
[;, if, (, sd, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =, mean, ;]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =, mean, ;, standardDeviation, =]
[NotStrictlyPositiveException, (, LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =, mean, ;, standardDeviation, =, sd, ;]
[LocalizedFormats, ., STANDARD_DEVIATION, ,, sd, ), ;, }, this, ., mean, =, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =]
[mean, =, mean, ;, standardDeviation, =, sd, ;, solverAbsoluteAccuracy, =, inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return]
[inverseCumAccuracy, ;, }, public, double, getMean, (, ), {, return, mean, ;, }, public, double, getStandardDeviation, (, ), {, return]
[getStandardDeviation, (, ), {, return, standardDeviation, ;, }, public, double, density, (, double, x, ), {, final, double, x0, =]
[getStandardDeviation, (, ), {, return, standardDeviation, ;, }, public, double, density, (, double, x, ), {, final, double, x0, =]
[), {, return, standardDeviation, ;, }, public, double, density, (, double, x, ), {, final, double, x0, =, x, -]
[public, double, density, (, double, x, ), {, final, double, x0, =, x, -, mean, ;, final, double, x1, =]
[public, double, density, (, double, x, ), {, final, double, x0, =, x, -, mean, ;, final, double, x1, =]
[density, (, double, x, ), {, final, double, x0, =, x, -, mean, ;, final, double, x1, =, x0, /]
[x, ), {, final, double, x0, =, x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return]
[x, ), {, final, double, x0, =, x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return]
[x, ), {, final, double, x0, =, x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return]
[double, x0, =, x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (]
[double, x0, =, x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (]
[double, x0, =, x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (]
[x0, =, x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -]
[x, -, mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *]
[mean, ;, final, double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *]
[double, x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /]
[x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (]
[x1, =, x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (]
[x0, /, standardDeviation, ;, return, FastMath, ., exp, (, -, 0.5, *, x1, *, x1, ), /, (, standardDeviation, *]
[/, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =]
[/, (, standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =]
[standardDeviation, *, SQRT2PI, ), ;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if, (]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if, (]
[;, }, public, double, cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if, (]
[cumulativeProbability, (, double, x, ), {, final, double, dev, =, x, -, mean, ;, if, (, FastMath, ., abs, (]
[x, ), {, final, double, dev, =, x, -, mean, ;, if, (, FastMath, ., abs, (, dev, ), >]
[x, ), {, final, double, dev, =, x, -, mean, ;, if, (, FastMath, ., abs, (, dev, ), >]
[{, final, double, dev, =, x, -, mean, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *]
[=, x, -, mean, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return]
[=, x, -, mean, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return]
[=, x, -, mean, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return]
[-, mean, ;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <]
[;, if, (, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?]
[(, FastMath, ., abs, (, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :]
[(, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return]
[(, dev, ), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return]
[), >, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *]
[>, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (]
[>, 40, *, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (]
[*, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +]
[*, standardDeviation, ), {, return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +]
[return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (]
[return, dev, <, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (]
[<, 0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /]
[0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (]
[0, ?, 0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (]
[0.0d, :, 1.0d, ;, }, return, 0.5, *, (, 1, +, Erf, ., erf, (, dev, /, (, standardDeviation, *]
[), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), ), ), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (]
[), ;, }, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <]
[}, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[}, @, Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||]
[Override, public, double, inverseCumulativeProbability, (, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >]
[(, final, double, p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw]
[p, ), throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (]
[throws, OutOfRangeException, {, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,]
[{, if, (, p, <, 0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return]
[0.0, ||, p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +]
[p, >, 1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +]
[1.0, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *]
[{, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *]
[{, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *]
[(, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (]
[(, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (]
[(, p, ,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (]
[,, 0, ,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (, 2, *]
[,, 1, ), ;, }, return, mean, +, standardDeviation, *, SQRT2, *, Erf, ., erfInv, (, 2, *, p, -]
[;, }, @, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return]
[@, Override, @, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (]
[@, Deprecated, public, double, cumulativeProbability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, return, probability, (, x0, ,]
[), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (]
[), ;, }, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (]
[}, @, Override, public, double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >]
[double, probability, (, double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw]
[double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (]
[double, x0, ,, double, x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (]
[x1, ), throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,]
[throws, NumberIsTooLargeException, {, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,]
[{, if, (, x0, >, x1, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, final, double, denom, =]
[throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, final, double, denom, =]
[NumberIsTooLargeException, (, LocalizedFormats, ., LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT, ,, x0, ,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *]
[x0, ,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =]
[x0, ,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =]
[,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (]
[,, x1, ,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (]
[,, true, ), ;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (, x0, -]
[;, }, final, double, denom, =, standardDeviation, *, SQRT2, ;, final, double, v0, =, (, x0, -, mean, ), /]
[standardDeviation, *, SQRT2, ;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =]
[standardDeviation, *, SQRT2, ;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =]
[*, SQRT2, ;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =, (]
[*, SQRT2, ;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =, (]
[;, final, double, v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =, (, x1, -]
[v0, =, (, x0, -, mean, ), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /]
[x0, -, mean, ), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return]
[x0, -, mean, ), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return]
[mean, ), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *]
[mean, ), /, denom, ;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *]
[;, final, double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (]
[double, v1, =, (, x1, -, mean, ), /, denom, ;, return, 0.5, *, Erf, ., erf, (, v0, ,]
[*, Erf, ., erf, (, v0, ,, v1, ), ;, }, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return]
[}, @, Override, protected, double, getSolverAbsoluteAccuracy, (, ), {, return, solverAbsoluteAccuracy, ;, }, public, double, getNumericalMean, (, ), {, return]
[getNumericalMean, (, ), {, return, getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =]
[getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, getStandardDeviation, (, ), ;, return]
[getMean, (, ), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, getStandardDeviation, (, ), ;, return]
[), ;, }, public, double, getNumericalVariance, (, ), {, final, double, s, =, getStandardDeviation, (, ), ;, return, s, *]
[double, s, =, getStandardDeviation, (, ), ;, return, s, *, s, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[double, s, =, getStandardDeviation, (, ), ;, return, s, *, s, ;, }, public, double, getSupportLowerBound, (, ), {, return]
[}, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportLowerBound, (, ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, public, double, getSupportUpperBound, (, ), {, return]
[}, public, double, getSupportUpperBound, (, ), {, return, Double, ., POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return]
[POSITIVE_INFINITY, ;, }, public, boolean, isSupportLowerBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return]
[false, ;, }, public, boolean, isSupportUpperBoundInclusive, (, ), {, return, false, ;, }, public, boolean, isSupportConnected, (, ), {, return]
[}, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, return]
[}, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, return]
[}, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, return]
[boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, return, standardDeviation, *]
[boolean, isSupportConnected, (, ), {, return, true, ;, }, @, Override, public, double, sample, (, ), {, return, standardDeviation, *]
[true, ;, }, @, Override, public, double, sample, (, ), {, return, standardDeviation, *, random, ., nextGaussian, (, ), +]
