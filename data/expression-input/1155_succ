[;, protected, List, data, ;, private, int, maximumItemCount, =, Integer, ., MAX_VALUE, ;, private, boolean, autoSort, ;, private, boolean, allowDuplicateXValues]
[;, protected, List, data, ;, private, int, maximumItemCount, =, Integer, ., MAX_VALUE, ;, private, boolean, autoSort, ;, private, boolean, allowDuplicateXValues]
[;, private, boolean, autoSort, ;, private, boolean, allowDuplicateXValues, ;, private, double, minX, ;, private, double, maxX, ;, private, double, minY]
[., MAX_VALUE, ;, private, boolean, autoSort, ;, private, boolean, allowDuplicateXValues, ;, private, double, minX, ;, private, double, maxX, ;, private]
[,, true, ,, true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ), {, this, (, key]
[,, true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ), {, this, (, key, ,, autoSort]
[), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ), {, this, (, key, ,, autoSort, ,, true]
[,, autoSort, ,, true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ,, boolean, allowDuplicateXValues, ), {]
[,, true, ), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ,, boolean, allowDuplicateXValues, ), {, super, (]
[), ;, }, public, XYSeries, (, Comparable, key, ,, boolean, autoSort, ,, boolean, allowDuplicateXValues, ), {, super, (, key, )]
[), ;, this, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort]
[=, new, java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =]
[., data, =, new, java, ., util, ., ArrayList, (, ), ;, this, ., autoSort, =, autoSort, ;, this, .]
[;, this, ., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN]
[=, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX]
[., autoSort, =, autoSort, ;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this]
[;, this, ., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double]
[=, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this]
[., allowDuplicateXValues, =, allowDuplicateXValues, ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN]
[;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY]
[=, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN]
[., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double]
[;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY]
[., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this]
[=, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN]
[., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double]
[;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, }, public, double]
[., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, }]
[=, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, }, public, double, getMinX, (, ), {]
[., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, }, public, double, getMinX, (]
[;, this, ., maxY, =, Double, ., NaN, ;, }, public, double, getMinX, (, ), {, return, this, ., minX]
[., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, }, public, double, getMinX, (, ), {, return, this]
[=, Double, ., NaN, ;, }, public, double, getMinX, (, ), {, return, this, ., minX, ;, }, public, double]
[., maxY, =, Double, ., NaN, ;, }, public, double, getMinX, (, ), {, return, this, ., minX, ;, }]
[;, }, public, double, getMinX, (, ), {, return, this, ., minX, ;, }, public, double, getMaxX, (, ), {]
[., NaN, ;, }, public, double, getMinX, (, ), {, return, this, ., minX, ;, }, public, double, getMaxX, (]
[;, }, public, double, getMaxX, (, ), {, return, this, ., maxX, ;, }, public, double, getMinY, (, ), {]
[., minX, ;, }, public, double, getMaxX, (, ), {, return, this, ., maxX, ;, }, public, double, getMinY, (]
[;, }, public, double, getMinY, (, ), {, return, this, ., minY, ;, }, public, double, getMaxY, (, ), {]
[., maxX, ;, }, public, double, getMinY, (, ), {, return, this, ., minY, ;, }, public, double, getMaxY, (]
[;, }, public, double, getMaxY, (, ), {, return, this, ., maxY, ;, }, private, void, updateBoundsForAddedItem, (, XYDataItem, item]
[., minY, ;, }, public, double, getMaxY, (, ), {, return, this, ., maxY, ;, }, private, void, updateBoundsForAddedItem, (]
[;, }, private, void, updateBoundsForAddedItem, (, XYDataItem, item, ), {, double, x, =, item, ., getXValue, (, ), ;, this]
[., maxY, ;, }, private, void, updateBoundsForAddedItem, (, XYDataItem, item, ), {, double, x, =, item, ., getXValue, (, )]
[;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (]
[., getXValue, (, ), ;, this, ., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, .]
[=, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,]
[., minX, =, minIgnoreNaN, (, this, ., minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, .]
[;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (, item, ., getY, (]
[,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (, item]
[., minX, ,, x, ), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if]
[), ;, this, ., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (, item, ., getY]
[=, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (, item, ., getY, (, ), !=, null, )]
[., maxX, =, maxIgnoreNaN, (, this, ., maxX, ,, x, ), ;, if, (, item, ., getY, (, ), !=]
[;, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, )]
[,, x, ), ;, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =, item, .]
[., maxX, ,, x, ), ;, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =]
[), ;, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (]
[), {, double, y, =, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY]
[!=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this]
[., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, this, ., minY]
[), {, double, y, =, item, ., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (]
[., getYValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, .]
[=, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,]
[., minY, =, minIgnoreNaN, (, this, ., minY, ,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, .]
[;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, y, ), ;, }, }, private, void, updateBoundsForRemovedItem, (]
[,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, y, ), ;, }, }, private]
[., minY, ,, y, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, y, ), ;, }]
[), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, y, ), ;, }, }, private, void, updateBoundsForRemovedItem]
[=, maxIgnoreNaN, (, this, ., maxY, ,, y, ), ;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {]
[., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, y, ), ;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item]
[;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =, false, ;, boolean, itemContributesToYBounds, =, false]
[,, y, ), ;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =, false, ;, boolean]
[., maxY, ,, y, ), ;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =, false]
[), ;, }, }, private, void, updateBoundsForRemovedItem, (, XYDataItem, item, ), {, boolean, itemContributesToXBounds, =, false, ;, boolean, itemContributesToYBounds, =]
[;, boolean, itemContributesToYBounds, =, false, ;, double, x, =, item, ., getXValue, (, ), ;, if, (, !, Double, .]
[;, double, x, =, item, ., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (, x, ), )]
[;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=, this, ., minX, ||]
[., getXValue, (, ), ;, if, (, !, Double, ., isNaN, (, x, ), ), {, if, (, x, <=]
[), {, if, (, x, <=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true]
[), {, if, (, x, <=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true]
[., isNaN, (, x, ), ), {, if, (, x, <=, this, ., minX, ||, x, >=, this, ., maxX]
[), ), {, if, (, x, <=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =]
[), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=, null, ), {, double]
[||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (]
[<=, this, ., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (]
[||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (]
[., minX, ||, x, >=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, .]
[), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=, null, ), {, double]
[>=, this, ., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=]
[), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=, null, ), {, double]
[., maxX, ), {, itemContributesToXBounds, =, true, ;, }, }, if, (, item, ., getY, (, ), !=, null, )]
[=, true, ;, }, }, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =, item]
[;, }, }, if, (, item, ., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue]
[), {, double, y, =, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, )]
[!=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (]
[., getY, (, ), !=, null, ), {, double, y, =, item, ., getYValue, (, ), ;, if, (, !]
[), {, double, y, =, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, )]
[;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=, this, ., minY, ||]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, y, ), ), {, if, (, y, <=]
[), {, if, (, y, <=, this, ., minY, ||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true]
[), {, if, (, y, <=, this, ., minY, ||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true]
[., isNaN, (, y, ), ), {, if, (, y, <=, this, ., minY, ||, y, >=, this, ., maxY]
[), ), {, if, (, y, <=, this, ., minY, ||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =]
[), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;, }, else]
[||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {]
[<=, this, ., minY, ||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if]
[||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {]
[., minY, ||, y, >=, this, ., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds]
[), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;, }, else]
[>=, this, ., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (]
[), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;, }, else]
[., maxY, ), {, itemContributesToYBounds, =, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;]
[=, true, ;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, itemContributesToXBounds]
[;, }, }, }, if, (, itemContributesToYBounds, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, itemContributesToXBounds, ), {]
[), {, findBoundsByIteration, (, ), ;, }, else, if, (, itemContributesToXBounds, ), {, if, (, getAutoSort, (, ), ), {]
[;, }, else, if, (, itemContributesToXBounds, ), {, if, (, getAutoSort, (, ), ), {, this, ., minX, =, getX]
[), {, if, (, getAutoSort, (, ), ), {, this, ., minX, =, getX, (, 0, ), ., doubleValue, (]
[), {, this, ., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =, getX]
[=, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =, getX, (, getItemCount, (, ), -]
[., minX, =, getX, (, 0, ), ., doubleValue, (, ), ;, this, ., maxX, =, getX, (, getItemCount, (]
[;, this, ., maxX, =, getX, (, getItemCount, (, ), -, 1, ), ., doubleValue, (, ), ;, }, else]
[., doubleValue, (, ), ;, this, ., maxX, =, getX, (, getItemCount, (, ), -, 1, ), ., doubleValue, (]
[), ., doubleValue, (, ), ;, this, ., maxX, =, getX, (, getItemCount, (, ), -, 1, ), ., doubleValue]
[=, getX, (, getItemCount, (, ), -, 1, ), ., doubleValue, (, ), ;, }, else, {, findBoundsByIteration, (, )]
[., maxX, =, getX, (, getItemCount, (, ), -, 1, ), ., doubleValue, (, ), ;, }, else, {, findBoundsByIteration]
[;, }, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (, ), {, this, ., minX]
[., doubleValue, (, ), ;, }, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (, )]
[), ., doubleValue, (, ), ;, }, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (]
[-, 1, ), ., doubleValue, (, ), ;, }, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void]
[), ., doubleValue, (, ), ;, }, else, {, findBoundsByIteration, (, ), ;, }, }, }, private, void, findBoundsByIteration, (]
[;, }, }, }, private, void, findBoundsByIteration, (, ), {, this, ., minX, =, Double, ., NaN, ;, this, .]
[=, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN]
[., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double]
[;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY]
[., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this]
[=, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN]
[., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double]
[;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =]
[., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator]
[=, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =, this, ., data, .]
[., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =, this, .]
[;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;]
[., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, Iterator, iterator, =, this, ., data, ., iterator, (]
[=, Double, ., NaN, ;, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (, iterator, .]
[., maxY, =, Double, ., NaN, ;, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (]
[;, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), )]
[., NaN, ;, Iterator, iterator, =, this, ., data, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (]
[;, while, (, iterator, ., hasNext, (, ), ), {, XYDataItem, item, =, (, XYDataItem, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYDataItem, item, =, (, XYDataItem, )]
[., data, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, XYDataItem, item, =, (]
[), {, XYDataItem, item, =, (, XYDataItem, ), iterator, ., next, (, ), ;, updateBoundsForAddedItem, (, item, ), ;, }]
[., hasNext, (, ), ), {, XYDataItem, item, =, (, XYDataItem, ), iterator, ., next, (, ), ;, updateBoundsForAddedItem, (]
[;, updateBoundsForAddedItem, (, item, ), ;, }, }, public, boolean, getAutoSort, (, ), {, return, this, ., autoSort, ;, }]
[;, updateBoundsForAddedItem, (, item, ), ;, }, }, public, boolean, getAutoSort, (, ), {, return, this, ., autoSort, ;, }]
[., next, (, ), ;, updateBoundsForAddedItem, (, item, ), ;, }, }, public, boolean, getAutoSort, (, ), {, return, this]
[;, }, }, public, boolean, getAutoSort, (, ), {, return, this, ., autoSort, ;, }, public, boolean, getAllowDuplicateXValues, (, )]
[), ;, }, }, public, boolean, getAutoSort, (, ), {, return, this, ., autoSort, ;, }, public, boolean, getAllowDuplicateXValues, (]
[;, }, public, boolean, getAllowDuplicateXValues, (, ), {, return, this, ., allowDuplicateXValues, ;, }, public, int, getItemCount, (, ), {]
[., autoSort, ;, }, public, boolean, getAllowDuplicateXValues, (, ), {, return, this, ., allowDuplicateXValues, ;, }, public, int, getItemCount, (]
[;, }, public, int, getItemCount, (, ), {, return, this, ., data, ., size, (, ), ;, }, public, List]
[., allowDuplicateXValues, ;, }, public, int, getItemCount, (, ), {, return, this, ., data, ., size, (, ), ;, }]
[;, }, public, List, getItems, (, ), {, return, Collections, ., unmodifiableList, (, this, ., data, ), ;, }, public]
[., size, (, ), ;, }, public, List, getItems, (, ), {, return, Collections, ., unmodifiableList, (, this, ., data]
[., data, ., size, (, ), ;, }, public, List, getItems, (, ), {, return, Collections, ., unmodifiableList, (, this]
[;, }, public, int, getMaximumItemCount, (, ), {, return, this, ., maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum]
[., unmodifiableList, (, this, ., data, ), ;, }, public, int, getMaximumItemCount, (, ), {, return, this, ., maximumItemCount, ;]
[), ;, }, public, int, getMaximumItemCount, (, ), {, return, this, ., maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int]
[., data, ), ;, }, public, int, getMaximumItemCount, (, ), {, return, this, ., maximumItemCount, ;, }, public, void, setMaximumItemCount]
[;, }, public, void, setMaximumItemCount, (, int, maximum, ), {, this, ., maximumItemCount, =, maximum, ;, int, remove, =, this]
[., maximumItemCount, ;, }, public, void, setMaximumItemCount, (, int, maximum, ), {, this, ., maximumItemCount, =, maximum, ;, int, remove]
[=, maximum, ;, int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (, remove, >]
[., maximumItemCount, =, maximum, ;, int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (]
[;, int, remove, =, this, ., data, ., size, (, ), -, maximum, ;, if, (, remove, >, 0, )]
[;, if, (, remove, >, 0, ), {, this, ., data, ., subList, (, 0, ,, remove, ), ., clear]
[-, maximum, ;, if, (, remove, >, 0, ), {, this, ., data, ., subList, (, 0, ,, remove, )]
[., size, (, ), -, maximum, ;, if, (, remove, >, 0, ), {, this, ., data, ., subList, (]
[., data, ., size, (, ), -, maximum, ;, if, (, remove, >, 0, ), {, this, ., data, .]
[;, if, (, remove, >, 0, ), {, this, ., data, ., subList, (, 0, ,, remove, ), ., clear]
[), {, this, ., data, ., subList, (, 0, ,, remove, ), ., clear, (, ), ;, findBoundsByIteration, (, )]
[>, 0, ), {, this, ., data, ., subList, (, 0, ,, remove, ), ., clear, (, ), ;, findBoundsByIteration]
[), {, this, ., data, ., subList, (, 0, ,, remove, ), ., clear, (, ), ;, findBoundsByIteration, (, )]
[;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, }, public, void, add, (, XYDataItem, item, ), {, add]
[., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, }, public, void, add, (, XYDataItem]
[., subList, (, 0, ,, remove, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;]
[., data, ., subList, (, 0, ,, remove, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (]
[,, remove, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, }, public, void]
[), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, }, public, void, add, (]
[;, fireSeriesChanged, (, ), ;, }, }, public, void, add, (, XYDataItem, item, ), {, add, (, item, ,, true]
[;, }, }, public, void, add, (, XYDataItem, item, ), {, add, (, item, ,, true, ), ;, }, public]
[;, }, public, void, add, (, double, x, ,, double, y, ), {, add, (, new, Double, (, x, )]
[,, true, ), ;, }, public, void, add, (, double, x, ,, double, y, ), {, add, (, new, Double]
[), ;, }, public, void, add, (, double, x, ,, double, y, ), {, add, (, new, Double, (, x]
[;, }, public, void, add, (, double, x, ,, double, y, ,, boolean, notify, ), {, add, (, new, Double]
[,, new, Double, (, y, ), ,, true, ), ;, }, public, void, add, (, double, x, ,, double, y]
[), ,, new, Double, (, y, ), ,, true, ), ;, }, public, void, add, (, double, x, ,, double]
[,, true, ), ;, }, public, void, add, (, double, x, ,, double, y, ,, boolean, notify, ), {, add]
[), ,, true, ), ;, }, public, void, add, (, double, x, ,, double, y, ,, boolean, notify, ), {]
[), ;, }, public, void, add, (, double, x, ,, double, y, ,, boolean, notify, ), {, add, (, new]
[;, }, public, void, add, (, double, x, ,, Number, y, ), {, add, (, new, Double, (, x, )]
[,, new, Double, (, y, ), ,, notify, ), ;, }, public, void, add, (, double, x, ,, Number, y]
[), ,, new, Double, (, y, ), ,, notify, ), ;, }, public, void, add, (, double, x, ,, Number]
[,, notify, ), ;, }, public, void, add, (, double, x, ,, Number, y, ), {, add, (, new, Double]
[), ,, notify, ), ;, }, public, void, add, (, double, x, ,, Number, y, ), {, add, (, new]
[), ;, }, public, void, add, (, double, x, ,, Number, y, ), {, add, (, new, Double, (, x]
[;, }, public, void, add, (, double, x, ,, Number, y, ,, boolean, notify, ), {, add, (, new, Double]
[,, y, ), ;, }, public, void, add, (, double, x, ,, Number, y, ,, boolean, notify, ), {, add]
[), ,, y, ), ;, }, public, void, add, (, double, x, ,, Number, y, ,, boolean, notify, ), {]
[), ;, }, public, void, add, (, double, x, ,, Number, y, ,, boolean, notify, ), {, add, (, new]
[;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add, (, x, ,, y, ,, true]
[,, y, ,, notify, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add, (]
[), ,, y, ,, notify, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add]
[,, notify, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add, (, x, ,]
[), ;, }, public, void, add, (, Number, x, ,, Number, y, ), {, add, (, x, ,, y, ,]
[;, }, public, void, add, (, Number, x, ,, Number, y, ,, boolean, notify, ), {, XYDataItem, item, =, new]
[,, y, ,, true, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ,, boolean, notify, )]
[,, true, ), ;, }, public, void, add, (, Number, x, ,, Number, y, ,, boolean, notify, ), {, XYDataItem]
[), ;, }, public, void, add, (, Number, x, ,, Number, y, ,, boolean, notify, ), {, XYDataItem, item, =]
[;, add, (, item, ,, notify, ), ;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {]
[,, y, ), ;, add, (, item, ,, notify, ), ;, }, public, void, add, (, XYDataItem, item, ,, boolean]
[), ;, add, (, item, ,, notify, ), ;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, )]
[;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (, item, ==, null, ), {]
[,, notify, ), ;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (, item, ==]
[), ;, }, public, void, add, (, XYDataItem, item, ,, boolean, notify, ), {, if, (, item, ==, null, )]
[), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =, (, XYDataItem, ), item, ., clone, (, )]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =, (, XYDataItem, ), item, ., clone]
[), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, item, =, (, XYDataItem, ), item, ., clone, (, )]
[;, }, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {]
[), ;, }, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, )]
[=, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, int, index, =]
[;, if, (, this, ., autoSort, ), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,, item]
[;, if, (, this, ., autoSort, ), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,, item]
[., clone, (, ), ;, if, (, this, ., autoSort, ), {, int, index, =, Collections, ., binarySearch, (, this]
[), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (, index, <]
[., autoSort, ), {, int, index, =, Collections, ., binarySearch, (, this, ., data, ,, item, ), ;, if, (]
[;, if, (, index, <, 0, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item]
[., binarySearch, (, this, ., data, ,, item, ), ;, if, (, index, <, 0, ), {, this, ., data]
[,, item, ), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (, -, index, -]
[., data, ,, item, ), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (, -]
[), ;, if, (, index, <, 0, ), {, this, ., data, ., add, (, -, index, -, 1, ,]
[), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, if]
[<, 0, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else]
[), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, if]
[;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (]
[., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, )]
[., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, if, (, this, .]
[,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data]
[-, 1, ,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this]
[-, 1, ,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this]
[,, item, ), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data]
[), ;, }, else, {, if, (, this, ., allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size]
[), {, int, size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size, &&, item]
[., allowDuplicateXValues, ), {, int, size, =, this, ., data, ., size, (, ), ;, while, (, index, <, size]
[;, while, (, index, <, size, &&, item, ., compareTo, (, this, ., data, ., get, (, index, ), )]
[., size, (, ), ;, while, (, index, <, size, &&, item, ., compareTo, (, this, ., data, ., get]
[., data, ., size, (, ), ;, while, (, index, <, size, &&, item, ., compareTo, (, this, ., data]
[), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, ), ), {, this]
[&&, item, ., compareTo, (, this, ., data, ., get, (, index, ), ), ==, 0, ), {, index, ++]
[<, size, &&, item, ., compareTo, (, this, ., data, ., get, (, index, ), ), ==, 0, ), {]
[&&, item, ., compareTo, (, this, ., data, ., get, (, index, ), ), ==, 0, ), {, index, ++]
[), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, ), ), {, this]
[==, 0, ), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, ), )]
[., compareTo, (, this, ., data, ., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }]
[), ==, 0, ), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, )]
[., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }, if, (, index, <, this, .]
[., data, ., get, (, index, ), ), ==, 0, ), {, index, ++, ;, }, if, (, index, <]
[), ), ==, 0, ), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (]
[), {, index, ++, ;, }, if, (, index, <, this, ., data, ., size, (, ), ), {, this]
[;, }, if, (, index, <, this, ., data, ., size, (, ), ), {, this, ., data, ., add]
[++, ;, }, if, (, index, <, this, ., data, ., size, (, ), ), {, this, ., data, .]
[), {, this, ., data, ., add, (, index, ,, item, ), ;, }, else, {, this, ., data, .]
[<, this, ., data, ., size, (, ), ), {, this, ., data, ., add, (, index, ,, item, )]
[), {, this, ., data, ., add, (, index, ,, item, ), ;, }, else, {, this, ., data, .]
[., size, (, ), ), {, this, ., data, ., add, (, index, ,, item, ), ;, }, else, {]
[., data, ., size, (, ), ), {, this, ., data, ., add, (, index, ,, item, ), ;, }]
[;, }, else, {, this, ., data, ., add, (, item, ), ;, }, }, else, {, throw, new, SeriesException]
[., add, (, index, ,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;]
[., data, ., add, (, index, ,, item, ), ;, }, else, {, this, ., data, ., add, (, item]
[,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, }, else, {]
[), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, }, else, {, throw, new]
[;, }, }, else, {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, }, else, {, if, (, !]
[., add, (, item, ), ;, }, }, else, {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, }]
[., data, ., add, (, item, ), ;, }, }, else, {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }]
[), ;, }, }, else, {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, }, else, {, if, (]
[;, }, }, }, else, {, if, (, !, this, ., allowDuplicateXValues, ), {, int, index, =, indexOf, (, item]
[), ;, }, }, }, else, {, if, (, !, this, ., allowDuplicateXValues, ), {, int, index, =, indexOf, (]
[), {, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=, 0, )]
[), {, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=, 0, )]
[., allowDuplicateXValues, ), {, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=]
[;, if, (, index, >=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, ., data]
[), ;, if, (, index, >=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, .]
[., getX, (, ), ), ;, if, (, index, >=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;]
[), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, ., data, ., add, (, item, ), ;]
[>=, 0, ), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, ., data, ., add, (, item]
[), {, throw, new, SeriesException, (, "X-value already exists.", ), ;, }, }, this, ., data, ., add, (, item, ), ;]
[;, }, }, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (]
[), ;, }, }, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if]
[;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed]
[., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, .]
[., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >]
[), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem]
[;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, .]
[), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this]
[), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed]
[>, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, )]
[), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed]
[., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem]
[;, updateBoundsForRemovedItem, (, removed, ), ;, }, if, (, notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void]
[;, updateBoundsForRemovedItem, (, removed, ), ;, }, if, (, notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void]
[., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, if, (, notify, ), {, fireSeriesChanged, (, )]
[., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, if, (, notify, ), {, fireSeriesChanged]
[), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, if, (, notify, ), {, fireSeriesChanged, (, ), ;, }, }, public]
[;, }, if, (, notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void, delete, (, int, start, ,]
[), ;, }, if, (, notify, ), {, fireSeriesChanged, (, ), ;, }, }, public, void, delete, (, int, start]
[), {, fireSeriesChanged, (, ), ;, }, }, public, void, delete, (, int, start, ,, int, end, ), {, this]
[;, }, }, public, void, delete, (, int, start, ,, int, end, ), {, this, ., data, ., subList, (]
[;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed]
[., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int, index]
[., subList, (, start, ,, end, +, 1, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (]
[., data, ., subList, (, start, ,, end, +, 1, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;]
[,, end, +, 1, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, public]
[), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int]
[+, 1, ), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove]
[), ., clear, (, ), ;, findBoundsByIteration, (, ), ;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int]
[;, fireSeriesChanged, (, ), ;, }, public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed, =, (, XYDataItem, )]
[;, }, public, XYDataItem, remove, (, int, index, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, .]
[;, updateBoundsForRemovedItem, (, removed, ), ;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x]
[;, updateBoundsForRemovedItem, (, removed, ), ;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x]
[., remove, (, index, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public]
[., data, ., remove, (, index, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, fireSeriesChanged, (, ), ;, return, removed, ;]
[), ;, updateBoundsForRemovedItem, (, removed, ), ;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number]
[;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x, ), {, return, remove, (]
[), ;, fireSeriesChanged, (, ), ;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x, ), {, return, remove]
[;, return, removed, ;, }, public, XYDataItem, remove, (, Number, x, ), {, return, remove, (, indexOf, (, x, )]
[;, }, public, XYDataItem, remove, (, Number, x, ), {, return, remove, (, indexOf, (, x, ), ), ;, }]
[;, }, public, void, clear, (, ), {, if, (, this, ., data, ., size, (, ), >, 0, )]
[), ;, }, public, void, clear, (, ), {, if, (, this, ., data, ., size, (, ), >, 0]
[), ), ;, }, public, void, clear, (, ), {, if, (, this, ., data, ., size, (, ), >]
[), {, this, ., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, .]
[>, 0, ), {, this, ., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;]
[., size, (, ), >, 0, ), {, this, ., data, ., clear, (, ), ;, this, ., minX, =]
[., data, ., size, (, ), >, 0, ), {, this, ., data, ., clear, (, ), ;, this, .]
[), {, this, ., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, .]
[;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY]
[., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN]
[., data, ., clear, (, ), ;, this, ., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double]
[=, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN]
[., minX, =, Double, ., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double]
[;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY]
[., NaN, ;, this, ., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this]
[=, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN]
[., maxX, =, Double, ., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double]
[;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, fireSeriesChanged, (, )]
[., NaN, ;, this, ., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, fireSeriesChanged]
[=, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, fireSeriesChanged, (, ), ;, }, }, public]
[., minY, =, Double, ., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, fireSeriesChanged, (, ), ;, }]
[;, this, ., maxY, =, Double, ., NaN, ;, fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int]
[., NaN, ;, this, ., maxY, =, Double, ., NaN, ;, fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem]
[=, Double, ., NaN, ;, fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem]
[., maxY, =, Double, ., NaN, ;, fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, )]
[;, fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =, (, XYDataItem]
[., NaN, ;, fireSeriesChanged, (, ), ;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =]
[;, }, }, public, XYDataItem, getDataItem, (, int, index, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data]
[;, return, (, XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return]
[;, return, (, XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return]
[., get, (, index, ), ;, return, (, XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (]
[., data, ., get, (, index, ), ;, return, (, XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem]
[), ;, return, (, XYDataItem, ), item, ., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {]
[;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return, (, XYDataItem, ), this, ., data, ., get, (, index]
[;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return, (, XYDataItem, ), this, ., data, ., get, (, index]
[., clone, (, ), ;, }, XYDataItem, getRawDataItem, (, int, index, ), {, return, (, XYDataItem, ), this, ., data]
[;, }, public, Number, getX, (, int, index, ), {, return, getRawDataItem, (, index, ), ., getX, (, ), ;]
[;, }, public, Number, getX, (, int, index, ), {, return, getRawDataItem, (, index, ), ., getX, (, ), ;]
[., get, (, index, ), ;, }, public, Number, getX, (, int, index, ), {, return, getRawDataItem, (, index, )]
[., data, ., get, (, index, ), ;, }, public, Number, getX, (, int, index, ), {, return, getRawDataItem, (]
[), ;, }, public, Number, getX, (, int, index, ), {, return, getRawDataItem, (, index, ), ., getX, (, )]
[;, }, public, Number, getY, (, int, index, ), {, return, getRawDataItem, (, index, ), ., getY, (, ), ;]
[., getX, (, ), ;, }, public, Number, getY, (, int, index, ), {, return, getRawDataItem, (, index, ), .]
[), ., getX, (, ), ;, }, public, Number, getY, (, int, index, ), {, return, getRawDataItem, (, index, )]
[;, }, public, void, updateByIndex, (, int, index, ,, Number, y, ), {, XYDataItem, item, =, getRawDataItem, (, index, )]
[., getY, (, ), ;, }, public, void, updateByIndex, (, int, index, ,, Number, y, ), {, XYDataItem, item, =]
[), ., getY, (, ), ;, }, public, void, updateByIndex, (, int, index, ,, Number, y, ), {, XYDataItem, item]
[;, boolean, iterate, =, false, ;, double, oldY, =, item, ., getYValue, (, ), ;, if, (, !, Double, .]
[), ;, boolean, iterate, =, false, ;, double, oldY, =, item, ., getYValue, (, ), ;, if, (, !, Double]
[;, double, oldY, =, item, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), )]
[;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=]
[), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, item, ., setY]
[), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, item, ., setY]
[., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY]
[), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, item, .]
[=, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (, y, )]
[;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else]
[||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {]
[<=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (, y, ), ;, if]
[||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {]
[., minY, ||, oldY, >=, this, ., maxY, ;, }, item, ., setY, (, y, ), ;, if, (, iterate]
[;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else]
[>=, this, ., maxY, ;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (]
[;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else]
[., maxY, ;, }, item, ., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;]
[;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, y, !=, null, ), {, double]
[., setY, (, y, ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, y]
[), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, y, !=, null, ), {]
[), {, findBoundsByIteration, (, ), ;, }, else, if, (, y, !=, null, ), {, double, yy, =, y, .]
[;, }, else, if, (, y, !=, null, ), {, double, yy, =, y, ., doubleValue, (, ), ;, this]
[), {, double, yy, =, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY]
[!=, null, ), {, double, yy, =, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this]
[), {, double, yy, =, y, ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (]
[., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, .]
[=, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,]
[., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, .]
[;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, fireSeriesChanged, (, ), ;, }]
[,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, fireSeriesChanged, (]
[., minY, ,, yy, ), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }]
[), ;, this, ., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, fireSeriesChanged, (, ), ;]
[=, maxIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, fireSeriesChanged, (, ), ;, }, private, double, minIgnoreNaN, (]
[., maxY, =, maxIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, fireSeriesChanged, (, ), ;, }, private, double]
[;, }, fireSeriesChanged, (, ), ;, }, private, double, minIgnoreNaN, (, double, a, ,, double, b, ), {, if, (]
[,, yy, ), ;, }, fireSeriesChanged, (, ), ;, }, private, double, minIgnoreNaN, (, double, a, ,, double, b, )]
[., maxY, ,, yy, ), ;, }, fireSeriesChanged, (, ), ;, }, private, double, minIgnoreNaN, (, double, a, ,, double]
[), ;, }, fireSeriesChanged, (, ), ;, }, private, double, minIgnoreNaN, (, double, a, ,, double, b, ), {, if]
[;, }, private, double, minIgnoreNaN, (, double, a, ,, double, b, ), {, if, (, Double, ., isNaN, (, a]
[), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a]
[., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b]
[), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return]
[;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {]
[), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }, }]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,]
[), ), {, return, a, ;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }]
[;, }, else, {, return, Math, ., min, (, a, ,, b, ), ;, }, }, }, private, double, maxIgnoreNaN]
[;, }, }, }, private, double, maxIgnoreNaN, (, double, a, ,, double, b, ), {, if, (, Double, ., isNaN]
[., min, (, a, ,, b, ), ;, }, }, }, private, double, maxIgnoreNaN, (, double, a, ,, double, b]
[,, b, ), ;, }, }, }, private, double, maxIgnoreNaN, (, double, a, ,, double, b, ), {, if, (]
[), ;, }, }, }, private, double, maxIgnoreNaN, (, double, a, ,, double, b, ), {, if, (, Double, .]
[), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a]
[., isNaN, (, a, ), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b]
[), ), {, return, b, ;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return]
[;, }, else, {, if, (, Double, ., isNaN, (, b, ), ), {, return, a, ;, }, else, {]
[), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }, }]
[., isNaN, (, b, ), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,]
[), ), {, return, a, ;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }]
[;, }, else, {, return, Math, ., max, (, a, ,, b, ), ;, }, }, }, public, void, update]
[;, }, }, }, public, void, update, (, Number, x, ,, Number, y, ), {, int, index, =, indexOf, (]
[., max, (, a, ,, b, ), ;, }, }, }, public, void, update, (, Number, x, ,, Number, y]
[,, b, ), ;, }, }, }, public, void, update, (, Number, x, ,, Number, y, ), {, int, index]
[), ;, }, }, }, public, void, update, (, Number, x, ,, Number, y, ), {, int, index, =, indexOf]
[;, if, (, index, <, 0, ), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else, {]
[), ;, if, (, index, <, 0, ), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else]
[), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else, {, updateByIndex, (, index, ,, y, )]
[<, 0, ), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else, {, updateByIndex, (, index, ,]
[), {, throw, new, SeriesException, (, "No observation for x = ", +, x, ), ;, }, else, {, updateByIndex, (, index, ,, y, )]
[;, }, else, {, updateByIndex, (, index, ,, y, ), ;, }, }, public, XYDataItem, addOrUpdate, (, double, x, ,]
[), ;, }, else, {, updateByIndex, (, index, ,, y, ), ;, }, }, public, XYDataItem, addOrUpdate, (, double, x]
[+, x, ), ;, }, else, {, updateByIndex, (, index, ,, y, ), ;, }, }, public, XYDataItem, addOrUpdate, (]
[), ;, }, else, {, updateByIndex, (, index, ,, y, ), ;, }, }, public, XYDataItem, addOrUpdate, (, double, x]
[;, }, }, public, XYDataItem, addOrUpdate, (, double, x, ,, double, y, ), {, return, addOrUpdate, (, new, Double, (]
[,, y, ), ;, }, }, public, XYDataItem, addOrUpdate, (, double, x, ,, double, y, ), {, return, addOrUpdate, (]
[), ;, }, }, public, XYDataItem, addOrUpdate, (, double, x, ,, double, y, ), {, return, addOrUpdate, (, new, Double]
[;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {, return, addOrUpdate, (, new, XYDataItem, (, x]
[,, new, Double, (, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {]
[), ,, new, Double, (, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, )]
[), ;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {, return, addOrUpdate, (, new, XYDataItem, (]
[), ), ;, }, public, XYDataItem, addOrUpdate, (, Number, x, ,, Number, y, ), {, return, addOrUpdate, (, new, XYDataItem]
[;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (, item, ==, null, ), {, throw, new, IllegalArgumentException]
[), ;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (, item, ==, null, ), {, throw, new]
[,, y, ), ), ;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (, item, ==, null, )]
[), ), ;, }, public, XYDataItem, addOrUpdate, (, XYDataItem, item, ), {, if, (, item, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (, this, ., allowDuplicateXValues, ), {, add, (, item]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (, this, ., allowDuplicateXValues, ), {, add]
[), {, throw, new, IllegalArgumentException, (, "Null 'item' argument.", ), ;, }, if, (, this, ., allowDuplicateXValues, ), {, add, (, item]
[;, }, if, (, this, ., allowDuplicateXValues, ), {, add, (, item, ), ;, return, null, ;, }, XYDataItem, overwritten]
[), ;, }, if, (, this, ., allowDuplicateXValues, ), {, add, (, item, ), ;, return, null, ;, }, XYDataItem]
[), {, add, (, item, ), ;, return, null, ;, }, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf]
[., allowDuplicateXValues, ), {, add, (, item, ), ;, return, null, ;, }, XYDataItem, overwritten, =, null, ;, int, index]
[;, return, null, ;, }, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf, (, item, ., getX, (, )]
[), ;, return, null, ;, }, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf, (, item, ., getX, (]
[;, }, XYDataItem, overwritten, =, null, ;, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if]
[;, int, index, =, indexOf, (, item, ., getX, (, ), ), ;, if, (, index, >=, 0, ), {]
[;, if, (, index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (]
[), ;, if, (, index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get]
[., getX, (, ), ), ;, if, (, index, >=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, ), this]
[), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, overwritten, =, (]
[>=, 0, ), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, overwritten]
[), {, XYDataItem, existing, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, overwritten, =, (]
[;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY, =]
[;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY, =]
[., get, (, index, ), ;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =]
[., data, ., get, (, index, ), ;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean]
[), ;, overwritten, =, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY]
[=, (, XYDataItem, ), existing, ., clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY, =, existing, .]
[;, boolean, iterate, =, false, ;, double, oldY, =, existing, ., getYValue, (, ), ;, if, (, !, Double, .]
[;, boolean, iterate, =, false, ;, double, oldY, =, existing, ., getYValue, (, ), ;, if, (, !, Double, .]
[., clone, (, ), ;, boolean, iterate, =, false, ;, double, oldY, =, existing, ., getYValue, (, ), ;, if]
[;, double, oldY, =, existing, ., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), )]
[;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||]
[., getYValue, (, ), ;, if, (, !, Double, ., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=]
[), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, ., setY]
[), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, ., setY]
[., isNaN, (, oldY, ), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY]
[), ), {, iterate, =, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, .]
[=, oldY, <=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, ., setY, (, item, .]
[;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (]
[||, oldY, >=, this, ., maxY, ;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if]
[<=, this, ., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, ., setY, (, item, ., getY, (]
[||, oldY, >=, this, ., maxY, ;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if]
[., minY, ||, oldY, >=, this, ., maxY, ;, }, existing, ., setY, (, item, ., getY, (, ), )]
[;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (]
[>=, this, ., maxY, ;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if, (, iterate]
[;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (]
[., maxY, ;, }, existing, ., setY, (, item, ., getY, (, ), ), ;, if, (, iterate, ), {]
[;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, item, ., getY, (, ), !=]
[., setY, (, item, ., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }]
[), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, item, ., getY, (, )]
[., getY, (, ), ), ;, if, (, iterate, ), {, findBoundsByIteration, (, ), ;, }, else, if, (, item]
[), {, findBoundsByIteration, (, ), ;, }, else, if, (, item, ., getY, (, ), !=, null, ), {, double]
[;, }, else, if, (, item, ., getY, (, ), !=, null, ), {, double, yy, =, item, ., getY]
[), {, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN]
[!=, null, ), {, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;, this, ., minY]
[., getY, (, ), !=, null, ), {, double, yy, =, item, ., getY, (, ), ., doubleValue, (, )]
[), {, double, yy, =, item, ., getY, (, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN]
[;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (]
[., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, .]
[., getY, (, ), ., doubleValue, (, ), ;, this, ., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy]
[=, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,]
[., minY, =, minIgnoreNaN, (, this, ., minY, ,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (, this, .]
[;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {, item, =]
[,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else]
[., minY, ,, yy, ), ;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }]
[), ;, this, ., maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {, item]
[=, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {, item, =, (, XYDataItem, ), item]
[., maxY, =, minIgnoreNaN, (, this, ., maxY, ,, yy, ), ;, }, }, else, {, item, =, (, XYDataItem]
[;, }, }, else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, .]
[,, yy, ), ;, }, }, else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if]
[., maxY, ,, yy, ), ;, }, }, else, {, item, =, (, XYDataItem, ), item, ., clone, (, )]
[), ;, }, }, else, {, item, =, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this]
[=, (, XYDataItem, ), item, ., clone, (, ), ;, if, (, this, ., autoSort, ), {, this, ., data]
[;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item]
[;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item]
[., clone, (, ), ;, if, (, this, ., autoSort, ), {, this, ., data, ., add, (, -, index]
[), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, this]
[., autoSort, ), {, this, ., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else]
[;, }, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if]
[., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, this, ., data, ., add, (]
[., data, ., add, (, -, index, -, 1, ,, item, ), ;, }, else, {, this, ., data, .]
[,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item]
[-, 1, ,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem]
[-, 1, ,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem]
[,, item, ), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item]
[), ;, }, else, {, this, ., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;]
[;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed]
[., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, .]
[., data, ., add, (, item, ), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >]
[), ;, }, updateBoundsForAddedItem, (, item, ), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem]
[;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, .]
[), ;, if, (, getItemCount, (, ), >, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this]
[), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed]
[>, this, ., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, )]
[), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed]
[., maximumItemCount, ), {, XYDataItem, removed, =, (, XYDataItem, ), this, ., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem]
[;, updateBoundsForRemovedItem, (, removed, ), ;, }, }, fireSeriesChanged, (, ), ;, return, overwritten, ;, }, public, int, indexOf, (]
[;, updateBoundsForRemovedItem, (, removed, ), ;, }, }, fireSeriesChanged, (, ), ;, return, overwritten, ;, }, public, int, indexOf, (]
[., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, }, fireSeriesChanged, (, ), ;, return, overwritten, ;]
[., data, ., remove, (, 0, ), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, }, fireSeriesChanged, (, ), ;, return]
[), ;, updateBoundsForRemovedItem, (, removed, ), ;, }, }, fireSeriesChanged, (, ), ;, return, overwritten, ;, }, public, int, indexOf]
[;, }, }, fireSeriesChanged, (, ), ;, return, overwritten, ;, }, public, int, indexOf, (, Number, x, ), {, if]
[), ;, }, }, fireSeriesChanged, (, ), ;, return, overwritten, ;, }, public, int, indexOf, (, Number, x, ), {]
[;, return, overwritten, ;, }, public, int, indexOf, (, Number, x, ), {, if, (, this, ., autoSort, ), {]
[;, }, public, int, indexOf, (, Number, x, ), {, if, (, this, ., autoSort, ), {, return, Collections, .]
[), {, return, Collections, ., binarySearch, (, this, ., data, ,, new, XYDataItem, (, x, ,, null, ), ), ;]
[., autoSort, ), {, return, Collections, ., binarySearch, (, this, ., data, ,, new, XYDataItem, (, x, ,, null, )]
[;, }, else, {, for, (, int, i, =, 0, ;, i, <, this, ., data, ., size, (, )]
[., binarySearch, (, this, ., data, ,, new, XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for]
[,, new, XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =, 0, ;]
[., data, ,, new, XYDataItem, (, x, ,, null, ), ), ;, }, else, {, for, (, int, i, =]
[), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, this, ., data, ., size, (]
[,, null, ), ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, this, ., data]
[), ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, this, ., data, ., size]
[;, i, <, this, ., data, ., size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem]
[;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, i, ), ;]
[<, this, ., data, ., size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this]
[;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, i, ), ;]
[., size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get]
[., data, ., size, (, ), ;, i, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data]
[), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, i, ), ;, if, (, item]
[++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, i, ), ;, if, (]
[;, if, (, item, ., getX, (, ), ., equals, (, x, ), ), {, return, i, ;, }, }]
[;, if, (, item, ., getX, (, ), ., equals, (, x, ), ), {, return, i, ;, }, }]
[., get, (, i, ), ;, if, (, item, ., getX, (, ), ., equals, (, x, ), ), {]
[., data, ., get, (, i, ), ;, if, (, item, ., getX, (, ), ., equals, (, x, )]
[), ;, if, (, item, ., getX, (, ), ., equals, (, x, ), ), {, return, i, ;, }]
[), {, return, i, ;, }, }, return, -, 1, ;, }, }, public, double, [, ], [, ], toArray]
[., equals, (, x, ), ), {, return, i, ;, }, }, return, -, 1, ;, }, }, public, double]
[., getX, (, ), ., equals, (, x, ), ), {, return, i, ;, }, }, return, -, 1, ;]
[), ), {, return, i, ;, }, }, return, -, 1, ;, }, }, public, double, [, ], [, ]]
[;, }, }, return, -, 1, ;, }, }, public, double, [, ], [, ], toArray, (, ), {, int]
[;, }, }, public, double, [, ], [, ], toArray, (, ), {, int, itemCount, =, getItemCount, (, ), ;]
[;, }, }, public, double, [, ], [, ], toArray, (, ), {, int, itemCount, =, getItemCount, (, ), ;]
[;, double, [, ], [, ], result, =, new, double, [, 2, ], [, itemCount, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, result, [, 0, ]]
[], [, itemCount, ], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, itemCount, ;, i, ++, ), {, result, [, 0]
[;, i, <, itemCount, ;, i, ++, ), {, result, [, 0, ], [, i, ], =, this, ., getX]
[;, i, ++, ), {, result, [, 0, ], [, i, ], =, this, ., getX, (, i, ), .]
[<, itemCount, ;, i, ++, ), {, result, [, 0, ], [, i, ], =, this, ., getX, (, i]
[;, i, ++, ), {, result, [, 0, ], [, i, ], =, this, ., getX, (, i, ), .]
[), {, result, [, 0, ], [, i, ], =, this, ., getX, (, i, ), ., doubleValue, (, )]
[++, ), {, result, [, 0, ], [, i, ], =, this, ., getX, (, i, ), ., doubleValue, (]
[=, this, ., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;]
[[, i, ], =, this, ., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (]
[[, 0, ], [, i, ], =, this, ., getX, (, i, ), ., doubleValue, (, ), ;, Number, y]
[], [, i, ], =, this, ., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY]
[], =, this, ., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (, i, )]
[;, Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, ), {, result, [, 1, ]]
[., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, ), {]
[., getX, (, i, ), ., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (]
[), ., doubleValue, (, ), ;, Number, y, =, getY, (, i, ), ;, if, (, y, !=, null, )]
[;, if, (, y, !=, null, ), {, result, [, 1, ], [, i, ], =, y, ., doubleValue, (]
[), ;, if, (, y, !=, null, ), {, result, [, 1, ], [, i, ], =, y, ., doubleValue]
[), {, result, [, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result]
[!=, null, ), {, result, [, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else]
[), {, result, [, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result]
[=, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ], [, i, ], =, Double, .]
[[, i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ], [, i, ]]
[[, 1, ], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ]]
[], [, i, ], =, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ], [, i]
[], =, y, ., doubleValue, (, ), ;, }, else, {, result, [, 1, ], [, i, ], =, Double]
[;, }, else, {, result, [, 1, ], [, i, ], =, Double, ., NaN, ;, }, }, return, result]
[., doubleValue, (, ), ;, }, else, {, result, [, 1, ], [, i, ], =, Double, ., NaN, ;]
[=, Double, ., NaN, ;, }, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries]
[[, i, ], =, Double, ., NaN, ;, }, }, return, result, ;, }, public, Object, clone, (, ), throws]
[[, 1, ], [, i, ], =, Double, ., NaN, ;, }, }, return, result, ;, }, public, Object, clone]
[], [, i, ], =, Double, ., NaN, ;, }, }, return, result, ;, }, public, Object, clone, (, )]
[], =, Double, ., NaN, ;, }, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {]
[;, }, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =, (, XYSeries]
[., NaN, ;, }, }, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, XYSeries, clone, =, (, XYSeries, ), super, ., clone, (]
[;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, return, clone, ;]
[;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, return, clone, ;]
[., clone, (, ), ;, clone, ., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, )]
[=, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, return, clone, ;, }, public, XYSeries, createCopy]
[., data, =, (, List, ), ObjectUtilities, ., deepClone, (, this, ., data, ), ;, return, clone, ;, }, public]
[;, return, clone, ;, }, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy]
[;, return, clone, ;, }, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy]
[., deepClone, (, this, ., data, ), ;, return, clone, ;, }, public, XYSeries, createCopy, (, int, start, ,, int]
[), ;, return, clone, ;, }, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries]
[., data, ), ;, return, clone, ;, }, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException]
[;, }, public, XYSeries, createCopy, (, int, start, ,, int, end, ), throws, CloneNotSupportedException, {, XYSeries, copy, =, (, XYSeries]
[;, copy, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (, this, ., data, .]
[;, copy, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (, this, ., data, .]
[., clone, (, ), ;, copy, ., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (]
[=, new, java, ., util, ., ArrayList, (, ), ;, if, (, this, ., data, ., size, (, ), >]
[., data, =, new, java, ., util, ., ArrayList, (, ), ;, if, (, this, ., data, ., size, (]
[;, if, (, this, ., data, ., size, (, ), >, 0, ), {, for, (, int, index, =, start]
[), {, for, (, int, index, =, start, ;, index, <=, end, ;, index, ++, ), {, XYDataItem, item, =]
[>, 0, ), {, for, (, int, index, =, start, ;, index, <=, end, ;, index, ++, ), {, XYDataItem]
[., size, (, ), >, 0, ), {, for, (, int, index, =, start, ;, index, <=, end, ;, index]
[., data, ., size, (, ), >, 0, ), {, for, (, int, index, =, start, ;, index, <=, end]
[), {, for, (, int, index, =, start, ;, index, <=, end, ;, index, ++, ), {, XYDataItem, item, =]
[;, index, <=, end, ;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get]
[;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;]
[<=, end, ;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index]
[;, index, ++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;]
[), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, XYDataItem, clone, =]
[++, ), {, XYDataItem, item, =, (, XYDataItem, ), this, ., data, ., get, (, index, ), ;, XYDataItem, clone]
[;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;, try, {, copy, ., add, (, clone]
[;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;, try, {, copy, ., add, (, clone]
[., get, (, index, ), ;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;, try, {]
[., data, ., get, (, index, ), ;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;]
[), ;, XYDataItem, clone, =, (, XYDataItem, ), item, ., clone, (, ), ;, try, {, copy, ., add, (]
[;, try, {, copy, ., add, (, clone, ), ;, }, catch, (, SeriesException, e, ), {, System, ., err]
[;, try, {, copy, ., add, (, clone, ), ;, }, catch, (, SeriesException, e, ), {, System, ., err]
[., clone, (, ), ;, try, {, copy, ., add, (, clone, ), ;, }, catch, (, SeriesException, e, )]
[;, }, catch, (, SeriesException, e, ), {, System, ., err, ., println, (, "Unable to add cloned data item.", ), ;, }, }, }]
[., add, (, clone, ), ;, }, catch, (, SeriesException, e, ), {, System, ., err, ., println, (, "Unable to add cloned data item."]
[), ;, }, catch, (, SeriesException, e, ), {, System, ., err, ., println, (, "Unable to add cloned data item.", ), ;, }, }]
[;, }, }, }, return, copy, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[., println, (, "Unable to add cloned data item.", ), ;, }, }, }, return, copy, ;, }, public, boolean, equals, (, Object, obj, )]
[., err, ., println, (, "Unable to add cloned data item.", ), ;, }, }, }, return, copy, ;, }, public, boolean, equals, (, Object]
[), ;, }, }, }, return, copy, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, XYSeries, ), ), {, return, false, ;, }, if, (, !, super]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false]
[instanceof, XYSeries, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, XYSeries, that, =]
[), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (, this, ., maximumItemCount, !=]
[), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (, this, ., maximumItemCount, !=]
[., equals, (, obj, ), ), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if]
[), ), {, return, false, ;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (, this, ., maximumItemCount]
[;, }, XYSeries, that, =, (, XYSeries, ), obj, ;, if, (, this, ., maximumItemCount, !=, that, ., maximumItemCount, )]
[;, if, (, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;]
[!=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, )]
[., maximumItemCount, !=, that, ., maximumItemCount, ), {, return, false, ;, }, if, (, this, ., autoSort, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;]
[., maximumItemCount, ), {, return, false, ;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return]
[;, }, if, (, this, ., autoSort, !=, that, ., autoSort, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;]
[!=, that, ., autoSort, ), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, )]
[., autoSort, !=, that, ., autoSort, ), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;]
[., autoSort, ), {, return, false, ;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return]
[;, }, if, (, this, ., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data, ,, that, ., data]
[!=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data]
[., allowDuplicateXValues, !=, that, ., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data, ,, that, ., data]
[., allowDuplicateXValues, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data, ,, that]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., data, ,, that, ., data, ), ), {, return]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, super]
[), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, super]
[., equal, (, this, ., data, ,, that, ., data, ), ), {, return, false, ;, }, return, true, ;]
[,, that, ., data, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, )]
[., data, ,, that, ., data, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =]
[., data, ), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int]
[;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, )]
[;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, int, count, =]
[;, int, count, =, getItemCount, (, ), ;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (]
[., hashCode, (, ), ;, int, count, =, getItemCount, (, ), ;, if, (, count, >, 0, ), {, XYDataItem]
[;, if, (, count, >, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =, 29, *]
[), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =, 29, *, result, +, item, ., hashCode, (]
[>, 0, ), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =, 29, *, result, +, item, .]
[), {, XYDataItem, item, =, getRawDataItem, (, 0, ), ;, result, =, 29, *, result, +, item, ., hashCode, (]
[;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, )]
[), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 1]
[=, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem]
[;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (]
[*, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (]
[;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result]
[., hashCode, (, ), ;, }, if, (, count, >, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -]
[), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =, 29, *, result, +, item, .]
[>, 1, ), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =, 29, *, result, +]
[), {, XYDataItem, item, =, getRawDataItem, (, count, -, 1, ), ;, result, =, 29, *, result, +, item, .]
[;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, )]
[), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 2]
[-, 1, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count]
[), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 2]
[=, 29, *, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem]
[;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (]
[*, result, +, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =]
[+, item, ., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (]
[;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result]
[., hashCode, (, ), ;, }, if, (, count, >, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /]
[), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =, 29, *, result, +, item, .]
[>, 2, ), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =, 29, *, result, +]
[), {, XYDataItem, item, =, getRawDataItem, (, count, /, 2, ), ;, result, =, 29, *, result, +, item, .]
[;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +]
[), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result]
[/, 2, ), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29]
[), ;, result, =, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result]
[=, 29, *, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, .]
[;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this]
[+, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =]
[*, result, +, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;]
[+, item, ., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =]
[;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this]
[., hashCode, (, ), ;, }, result, =, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *]
[=, 29, *, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?]
[;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29]
[+, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, )]
[*, result, +, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :]
[+, this, ., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, )]
[;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29]
[., maximumItemCount, ;, result, =, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result]
[=, 29, *, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result]
[;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result, ;]
[+, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (, this, .]
[*, result, +, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (]
[+, (, this, ., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (, this, .]
[;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result, ;]
[), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result]
[?, 1, :, 0, ), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0]
[., autoSort, ?, 1, :, 0, ), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1]
[:, 0, ), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;]
[), ;, result, =, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result]
[=, 29, *, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result, ;, }, }]
[;, return, result, ;, }, }]
[+, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result, ;, }, }]
[*, result, +, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result, ;, }, }]
[+, (, this, ., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result, ;, }, }]
[;, return, result, ;, }, }]
[), ;, return, result, ;, }, }]
[?, 1, :, 0, ), ;, return, result, ;, }, }]
[., allowDuplicateXValues, ?, 1, :, 0, ), ;, return, result, ;, }, }]
[:, 0, ), ;, return, result, ;, }, }]
[), ;, return, result, ;, }, }]
[;, }, }]
