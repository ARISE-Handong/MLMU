[;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 0, ), ;, public]
[,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,, 0]
[,, 0, ,, 0, ), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,, 0, ,, 0]
[,, 0, ), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 0]
[), ;, public, static, final, Quaternion, ZERO, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 0, ), ;]
[;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,, 1, ,, 0, ,, 0, ), ;, public]
[,, 0, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,, 1]
[,, 0, ,, 0, ), ;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,, 1, ,, 0]
[,, 0, ), ;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,, 1, ,, 0, ,, 0]
[), ;, public, static, final, Quaternion, I, =, new, Quaternion, (, 0, ,, 1, ,, 0, ,, 0, ), ;]
[;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,, 0, ,, 1, ,, 0, ), ;, public]
[,, 1, ,, 0, ,, 0, ), ;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,, 0]
[,, 0, ,, 0, ), ;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,, 0, ,, 1]
[,, 0, ), ;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,, 0, ,, 1, ,, 0]
[), ;, public, static, final, Quaternion, J, =, new, Quaternion, (, 0, ,, 0, ,, 1, ,, 0, ), ;]
[;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 1, ), ;, private]
[,, 0, ,, 1, ,, 0, ), ;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,, 0]
[,, 1, ,, 0, ), ;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,, 0, ,, 0]
[,, 0, ), ;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 1]
[), ;, public, static, final, Quaternion, K, =, new, Quaternion, (, 0, ,, 0, ,, 0, ,, 1, ), ;]
[;, private, static, final, long, serialVersionUID, =, 20092012L, ;, private, final, double, q0, ;, private, final, double, q1, ;, private]
[,, 0, ,, 0, ,, 1, ), ;, private, static, final, long, serialVersionUID, =, 20092012L, ;, private, final, double, q0]
[,, 0, ,, 1, ), ;, private, static, final, long, serialVersionUID, =, 20092012L, ;, private, final, double, q0, ;, private]
[,, 1, ), ;, private, static, final, long, serialVersionUID, =, 20092012L, ;, private, final, double, q0, ;, private, final, double]
[), ;, private, static, final, long, serialVersionUID, =, 20092012L, ;, private, final, double, q0, ;, private, final, double, q1, ;]
[;, private, final, double, q0, ;, private, final, double, q1, ;, private, final, double, q2, ;, private, final, double, q3]
[=, a, ;, this, ., q1, =, b, ;, this, ., q2, =, c, ;, this, ., q3, =, d]
[., q0, =, a, ;, this, ., q1, =, b, ;, this, ., q2, =, c, ;, this, ., q3]
[;, this, ., q1, =, b, ;, this, ., q2, =, c, ;, this, ., q3, =, d, ;, }]
[=, b, ;, this, ., q2, =, c, ;, this, ., q3, =, d, ;, }, public, Quaternion, (, final]
[., q1, =, b, ;, this, ., q2, =, c, ;, this, ., q3, =, d, ;, }, public, Quaternion]
[;, this, ., q2, =, c, ;, this, ., q3, =, d, ;, }, public, Quaternion, (, final, double, scalar]
[=, c, ;, this, ., q3, =, d, ;, }, public, Quaternion, (, final, double, scalar, ,, final, double, []
[., q2, =, c, ;, this, ., q3, =, d, ;, }, public, Quaternion, (, final, double, scalar, ,, final]
[;, this, ., q3, =, d, ;, }, public, Quaternion, (, final, double, scalar, ,, final, double, [, ], v]
[=, d, ;, }, public, Quaternion, (, final, double, scalar, ,, final, double, [, ], v, ), throws, DimensionMismatchException, {]
[., q3, =, d, ;, }, public, Quaternion, (, final, double, scalar, ,, final, double, [, ], v, ), throws]
[;, }, public, Quaternion, (, final, double, scalar, ,, final, double, [, ], v, ), throws, DimensionMismatchException, {, if, (]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;]
[!=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =]
[., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, .]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;]
[;, }, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2]
[,, 3, ), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;]
[., length, ,, 3, ), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0]
[), ;, }, this, ., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, .]
[=, scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ]]
[., q0, =, scalar, ;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =, v, []
[;, this, ., q1, =, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;, this]
[=, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;, this, ., q3, =, v]
[., q1, =, v, [, 0, ], ;, this, ., q2, =, v, [, 1, ], ;, this, ., q3]
[;, this, ., q2, =, v, [, 1, ], ;, this, ., q3, =, v, [, 2, ], ;, }]
[[, 0, ], ;, this, ., q2, =, v, [, 1, ], ;, this, ., q3, =, v, [, 2]
[], ;, this, ., q2, =, v, [, 1, ], ;, this, ., q3, =, v, [, 2, ], ;]
[=, v, [, 1, ], ;, this, ., q3, =, v, [, 2, ], ;, }, public, Quaternion, (, final]
[., q2, =, v, [, 1, ], ;, this, ., q3, =, v, [, 2, ], ;, }, public, Quaternion]
[;, this, ., q3, =, v, [, 2, ], ;, }, public, Quaternion, (, final, double, [, ], v, )]
[[, 1, ], ;, this, ., q3, =, v, [, 2, ], ;, }, public, Quaternion, (, final, double, []
[], ;, this, ., q3, =, v, [, 2, ], ;, }, public, Quaternion, (, final, double, [, ], v]
[=, v, [, 2, ], ;, }, public, Quaternion, (, final, double, [, ], v, ), {, this, (, 0]
[., q3, =, v, [, 2, ], ;, }, public, Quaternion, (, final, double, [, ], v, ), {, this]
[;, }, public, Quaternion, (, final, double, [, ], v, ), {, this, (, 0, ,, v, ), ;, }]
[[, 2, ], ;, }, public, Quaternion, (, final, double, [, ], v, ), {, this, (, 0, ,, v]
[], ;, }, public, Quaternion, (, final, double, [, ], v, ), {, this, (, 0, ,, v, ), ;]
[,, v, ), ;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,, -, q1, ,]
[), ;, }, public, Quaternion, getConjugate, (, ), {, return, new, Quaternion, (, q0, ,, -, q1, ,, -, q2]
[;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, final, double, q1a, =]
[,, -, q1, ,, -, q2, ,, -, q3, ), ;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1]
[,, -, q2, ,, -, q3, ), ;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion]
[,, -, q2, ,, -, q3, ), ;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion]
[,, -, q3, ), ;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {]
[,, -, q3, ), ;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {]
[), ;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, final, double, q1a]
[), ;, }, public, static, Quaternion, multiply, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, final, double, q1a]
[;, final, double, q1b, =, q1, ., getQ1, (, ), ;, final, double, q1c, =, q1, ., getQ2, (, )]
[., getQ0, (, ), ;, final, double, q1b, =, q1, ., getQ1, (, ), ;, final, double, q1c, =, q1]
[;, final, double, q1c, =, q1, ., getQ2, (, ), ;, final, double, q1d, =, q1, ., getQ3, (, )]
[., getQ1, (, ), ;, final, double, q1c, =, q1, ., getQ2, (, ), ;, final, double, q1d, =, q1]
[;, final, double, q1d, =, q1, ., getQ3, (, ), ;, final, double, q2a, =, q2, ., getQ0, (, )]
[., getQ2, (, ), ;, final, double, q1d, =, q1, ., getQ3, (, ), ;, final, double, q2a, =, q2]
[;, final, double, q2a, =, q2, ., getQ0, (, ), ;, final, double, q2b, =, q2, ., getQ1, (, )]
[., getQ3, (, ), ;, final, double, q2a, =, q2, ., getQ0, (, ), ;, final, double, q2b, =, q2]
[;, final, double, q2b, =, q2, ., getQ1, (, ), ;, final, double, q2c, =, q2, ., getQ2, (, )]
[., getQ0, (, ), ;, final, double, q2b, =, q2, ., getQ1, (, ), ;, final, double, q2c, =, q2]
[;, final, double, q2c, =, q2, ., getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, )]
[., getQ1, (, ), ;, final, double, q2c, =, q2, ., getQ2, (, ), ;, final, double, q2d, =, q2]
[;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b]
[., getQ2, (, ), ;, final, double, q2d, =, q2, ., getQ3, (, ), ;, final, double, w, =, q1a]
[;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d]
[., getQ3, (, ), ;, final, double, w, =, q1a, *, q2a, -, q1b, *, q2b, -, q1c, *, q2c]
[;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c]
[-, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d]
[-, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a]
[-, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b]
[*, q2a, -, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a]
[-, q1b, *, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b]
[-, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a]
[*, q2b, -, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b]
[-, q1c, *, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a]
[-, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d]
[*, q2c, -, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c]
[-, q1d, *, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d]
[;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c]
[*, q2d, ;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d]
[;, final, double, x, =, q1a, *, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c]
[;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b]
[-, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a]
[+, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d]
[+, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c]
[*, q2b, +, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a]
[+, q1b, *, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c]
[+, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d]
[*, q2a, +, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b]
[+, q1c, *, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d]
[-, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a]
[*, q2d, -, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c]
[-, q1d, *, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a]
[;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b]
[*, q2c, ;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d]
[;, final, double, y, =, q1a, *, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b]
[;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a]
[+, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b]
[+, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c]
[-, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d]
[*, q2c, -, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a]
[-, q1b, *, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d]
[+, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c]
[*, q2d, +, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b]
[+, q1c, *, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c]
[+, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b]
[*, q2a, +, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c]
[+, q1d, *, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b]
[;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a]
[*, q2b, ;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d]
[;, final, double, z, =, q1a, *, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a]
[;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;, }, public, Quaternion, multiply, (, final]
[+, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;, }, public]
[-, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z]
[+, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x]
[*, q2d, +, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w]
[+, q1b, *, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x]
[-, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z]
[*, q2c, -, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y]
[-, q1c, *, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z]
[+, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;, }, public]
[*, q2b, +, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;]
[+, q1d, *, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;, }, public]
[;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;, }, public, Quaternion, multiply, (, final]
[*, q2a, ;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;, }, public, Quaternion, multiply]
[;, return, new, Quaternion, (, w, ,, x, ,, y, ,, z, ), ;, }, public, Quaternion, multiply, (, final]
[;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return, multiply, (, this, ,, q, ), ;, }]
[,, x, ,, y, ,, z, ), ;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return, multiply]
[,, y, ,, z, ), ;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return, multiply, (, this]
[,, z, ), ;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return, multiply, (, this, ,, q]
[), ;, }, public, Quaternion, multiply, (, final, Quaternion, q, ), {, return, multiply, (, this, ,, q, ), ;]
[;, }, public, static, Quaternion, add, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[,, q, ), ;, }, public, static, Quaternion, add, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[), ;, }, public, static, Quaternion, add, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion]
[;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return, add, (, this, ,, q, ), ;, }]
[,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2]
[+, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,, q1]
[., getQ0, (, ), +, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), +, q2, ., getQ1]
[,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2]
[., getQ0, (, ), ,, q1, ., getQ1, (, ), +, q2, ., getQ1, (, ), ,, q1, ., getQ2]
[,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), +, q2]
[+, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,, q1]
[., getQ1, (, ), +, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2, ., getQ2]
[,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), +, q2]
[., getQ1, (, ), ,, q1, ., getQ2, (, ), +, q2, ., getQ2, (, ), ,, q1, ., getQ3]
[,, q1, ., getQ3, (, ), +, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, add, (, final]
[+, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), +, q2, ., getQ3, (, ), ), ;]
[., getQ2, (, ), +, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), +, q2, ., getQ3]
[,, q1, ., getQ3, (, ), +, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, add, (, final]
[., getQ2, (, ), ,, q1, ., getQ3, (, ), +, q2, ., getQ3, (, ), ), ;, }, public]
[), ;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return, add, (, this, ,, q, ), ;]
[+, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return, add]
[., getQ3, (, ), +, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, add, (, final, Quaternion, q]
[), ;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return, add, (, this, ,, q, ), ;]
[., getQ3, (, ), ), ;, }, public, Quaternion, add, (, final, Quaternion, q, ), {, return, add, (, this]
[;, }, public, static, Quaternion, subtract, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion, (]
[,, q, ), ;, }, public, static, Quaternion, subtract, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[), ;, }, public, static, Quaternion, subtract, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, new, Quaternion]
[;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return, subtract, (, this, ,, q, ), ;, }]
[,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2]
[-, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,, q1]
[., getQ0, (, ), -, q2, ., getQ0, (, ), ,, q1, ., getQ1, (, ), -, q2, ., getQ1]
[,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2]
[., getQ0, (, ), ,, q1, ., getQ1, (, ), -, q2, ., getQ1, (, ), ,, q1, ., getQ2]
[,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), -, q2]
[-, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,, q1]
[., getQ1, (, ), -, q2, ., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2, ., getQ2]
[,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), -, q2]
[., getQ1, (, ), ,, q1, ., getQ2, (, ), -, q2, ., getQ2, (, ), ,, q1, ., getQ3]
[,, q1, ., getQ3, (, ), -, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final]
[-, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), -, q2, ., getQ3, (, ), ), ;]
[., getQ2, (, ), -, q2, ., getQ2, (, ), ,, q1, ., getQ3, (, ), -, q2, ., getQ3]
[,, q1, ., getQ3, (, ), -, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final]
[., getQ2, (, ), ,, q1, ., getQ3, (, ), -, q2, ., getQ3, (, ), ), ;, }, public]
[), ;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return, subtract, (, this, ,, q, ), ;]
[-, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return, subtract]
[., getQ3, (, ), -, q2, ., getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final, Quaternion, q]
[), ;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return, subtract, (, this, ,, q, ), ;]
[., getQ3, (, ), ), ;, }, public, Quaternion, subtract, (, final, Quaternion, q, ), {, return, subtract, (, this]
[;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, q1, ., getQ0]
[,, q, ), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return]
[), ;, }, public, static, double, dotProduct, (, final, Quaternion, q1, ,, final, Quaternion, q2, ), {, return, q1, .]
[;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return, dotProduct, (, this, ,, q, ), ;, }]
[+, q1, ., getQ3, (, ), *, q2, ., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion]
[+, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1, ., getQ3, (, ), *, q2]
[+, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2]
[*, q2, ., getQ0, (, ), +, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +, q1]
[., getQ0, (, ), *, q2, ., getQ0, (, ), +, q1, ., getQ1, (, ), *, q2, ., getQ1]
[+, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2]
[., getQ0, (, ), +, q1, ., getQ1, (, ), *, q2, ., getQ1, (, ), +, q1, ., getQ2]
[+, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1, ., getQ3, (, ), *, q2]
[*, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1]
[., getQ1, (, ), *, q2, ., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2, ., getQ2]
[+, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1, ., getQ3, (, ), *, q2]
[., getQ1, (, ), +, q1, ., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1, ., getQ3]
[+, q1, ., getQ3, (, ), *, q2, ., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion]
[*, q2, ., getQ2, (, ), +, q1, ., getQ3, (, ), *, q2, ., getQ3, (, ), ;, }]
[., getQ2, (, ), *, q2, ., getQ2, (, ), +, q1, ., getQ3, (, ), *, q2, ., getQ3]
[+, q1, ., getQ3, (, ), *, q2, ., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion]
[., getQ2, (, ), +, q1, ., getQ3, (, ), *, q2, ., getQ3, (, ), ;, }, public, double]
[;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return, dotProduct, (, this, ,, q, ), ;, }]
[*, q2, ., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return, dotProduct, (]
[., getQ3, (, ), *, q2, ., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion, q, )]
[;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return, dotProduct, (, this, ,, q, ), ;, }]
[., getQ3, (, ), ;, }, public, double, dotProduct, (, final, Quaternion, q, ), {, return, dotProduct, (, this, ,]
[;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *, q1]
[,, q, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +]
[), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, q0, *, q0, +, q1, *]
[;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (, norm, <]
[., sqrt, (, q0, *, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ), ;]
[), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (, norm]
[+, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, )]
[+, q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm]
[+, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, )]
[*, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize]
[+, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, )]
[+, q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm]
[*, q1, +, q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final]
[+, q2, *, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm]
[+, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, )]
[*, q2, +, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm]
[+, q3, *, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, )]
[), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (, norm]
[*, q3, ), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if]
[), ;, }, public, Quaternion, normalize, (, ), {, final, double, norm, =, getNorm, (, ), ;, if, (, norm]
[;, if, (, norm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, )]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /]
[<, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /]
[., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, norm, ), ;, }, return, new, Quaternion, (]
[;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2, /, norm, ,, q3, /]
[,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2, /, norm]
[., NORM, ,, norm, ), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2]
[), ;, }, return, new, Quaternion, (, q0, /, norm, ,, q1, /, norm, ,, q2, /, norm, ,, q3]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[,, q1, /, norm, ,, q2, /, norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals]
[/, norm, ,, q1, /, norm, ,, q2, /, norm, ,, q3, /, norm, ), ;, }, @, Override, public]
[,, q1, /, norm, ,, q2, /, norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals]
[,, q2, /, norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, )]
[/, norm, ,, q2, /, norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object]
[,, q2, /, norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, )]
[,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this]
[/, norm, ,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if]
[,, q3, /, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[/, norm, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[), {, return, true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, )]
[==, other, ), {, return, true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (]
[), {, return, true, ;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, )]
[;, }, if, (, other, instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0]
[), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==, q, ., getQ0, (, ), &&]
[instanceof, Quaternion, ), {, final, Quaternion, q, =, (, Quaternion, ), other, ;, return, q0, ==, q, ., getQ0, (]
[;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==]
[;, return, q0, ==, q, ., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, 17, ;, for]
[&&, q3, ==, q, ., getQ3, (, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[&&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q, ., getQ3, (, ), ;, }, return, false]
[&&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q]
[==, q, ., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2]
[&&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q]
[., getQ0, (, ), &&, q1, ==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, )]
[&&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q, ., getQ3, (, ), ;, }, return, false]
[==, q, ., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q, ., getQ3]
[&&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q, ., getQ3, (, ), ;, }, return, false]
[., getQ1, (, ), &&, q2, ==, q, ., getQ2, (, ), &&, q3, ==, q, ., getQ3, (, )]
[&&, q3, ==, q, ., getQ3, (, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[==, q, ., getQ2, (, ), &&, q3, ==, q, ., getQ3, (, ), ;, }, return, false, ;, }]
[&&, q3, ==, q, ., getQ3, (, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[., getQ2, (, ), &&, q3, ==, q, ., getQ3, (, ), ;, }, return, false, ;, }, @, Override]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, 17, ;, for]
[==, q, ., getQ3, (, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, 17, ;, for]
[., getQ3, (, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, int, result]
[;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, 17, ;, for, (, double, comp, :]
[;, for, (, double, comp, :, new, double, [, ], {, q0, ,, q1, ,, q2, ,, q3, }, )]
[), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =, 31, *, result, +, c]
[), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =, 31, *, result, +, c]
[,, q1, ,, q2, ,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;]
[,, q2, ,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =]
[,, q3, }, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =, 31, *]
[}, ), {, final, int, c, =, MathUtils, ., hash, (, comp, ), ;, result, =, 31, *, result, +]
[;, result, =, 31, *, result, +, c, ;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion]
[., hash, (, comp, ), ;, result, =, 31, *, result, +, c, ;, }, return, result, ;, }, public]
[), ;, result, =, 31, *, result, +, c, ;, }, return, result, ;, }, public, boolean, equals, (, final]
[=, 31, *, result, +, c, ;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,]
[;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return]
[+, c, ;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, )]
[*, result, +, c, ;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double]
[+, c, ;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, )]
[;, }, return, result, ;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return]
[;, }, public, boolean, equals, (, final, Quaternion, q, ,, final, double, eps, ), {, return, Precision, ., equals, (]
[;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, ., equals, (, getNorm, (, ), ,, 1d]
[&&, Precision, ., equals, (, q3, ,, q, ., getQ3, (, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion]
[&&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (]
[&&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (]
[., equals, (, q0, ,, q, ., getQ0, (, ), ,, eps, ), &&, Precision, ., equals, (, q1, ,]
[,, q, ., getQ0, (, ), ,, eps, ), &&, Precision, ., equals, (, q1, ,, q, ., getQ1, (]
[,, eps, ), &&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&, Precision]
[., getQ0, (, ), ,, eps, ), &&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,]
[), &&, Precision, ., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&, Precision, ., equals]
[&&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (]
[., equals, (, q1, ,, q, ., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (, q2, ,]
[,, q, ., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (, q2, ,, q, ., getQ2, (]
[,, eps, ), &&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision]
[., getQ1, (, ), ,, eps, ), &&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,]
[), &&, Precision, ., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals]
[&&, Precision, ., equals, (, q3, ,, q, ., getQ3, (, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion]
[., equals, (, q2, ,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (, q3, ,]
[,, q, ., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (, q3, ,, q, ., getQ3, (]
[,, eps, ), &&, Precision, ., equals, (, q3, ,, q, ., getQ3, (, ), ,, eps, ), ;, }]
[., getQ2, (, ), ,, eps, ), &&, Precision, ., equals, (, q3, ,, q, ., getQ3, (, ), ,]
[), &&, Precision, ., equals, (, q3, ,, q, ., getQ3, (, ), ,, eps, ), ;, }, public, boolean]
[;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, ., equals, (, getNorm, (, ), ,, 1d]
[., equals, (, q3, ,, q, ., getQ3, (, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion, (, double]
[,, q, ., getQ3, (, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return]
[,, eps, ), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, ., equals, (, getNorm, (]
[., getQ3, (, ), ,, eps, ), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, .]
[), ;, }, public, boolean, isUnitQuaternion, (, double, eps, ), {, return, Precision, ., equals, (, getNorm, (, ), ,]
[;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return, FastMath, ., abs, (, getQ0, (, ), ), <=]
[., equals, (, getNorm, (, ), ,, 1d, ,, eps, ), ;, }, public, boolean, isPureQuaternion, (, double, eps, )]
[,, 1d, ,, eps, ), ;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return, FastMath, ., abs, (]
[,, eps, ), ;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return, FastMath, ., abs, (, getQ0, (]
[), ;, }, public, boolean, isPureQuaternion, (, double, eps, ), {, return, FastMath, ., abs, (, getQ0, (, ), )]
[;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (, getQ0, (, ), <, 0, ), {, final, Quaternion, unitQ]
[<=, eps, ;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (, getQ0, (, ), <, 0, ), {, final]
[., abs, (, getQ0, (, ), ), <=, eps, ;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (, getQ0]
[), <=, eps, ;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (, getQ0, (, ), <, 0, ), {]
[;, }, public, Quaternion, getPositivePolarForm, (, ), {, if, (, getQ0, (, ), <, 0, ), {, final, Quaternion, unitQ]
[), {, final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, )]
[<, 0, ), {, final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -, unitQ, ., getQ0]
[), {, final, Quaternion, unitQ, =, normalize, (, ), ;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, )]
[;, return, new, Quaternion, (, -, unitQ, ., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,, -]
[;, }, else, {, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final]
[,, -, unitQ, ., getQ1, (, ), ,, -, unitQ, ., getQ2, (, ), ,, -, unitQ, ., getQ3, (]
[,, -, unitQ, ., getQ1, (, ), ,, -, unitQ, ., getQ2, (, ), ,, -, unitQ, ., getQ3, (]
[., getQ0, (, ), ,, -, unitQ, ., getQ1, (, ), ,, -, unitQ, ., getQ2, (, ), ,, -]
[,, -, unitQ, ., getQ2, (, ), ,, -, unitQ, ., getQ3, (, ), ), ;, }, else, {, return]
[,, -, unitQ, ., getQ2, (, ), ,, -, unitQ, ., getQ3, (, ), ), ;, }, else, {, return]
[., getQ1, (, ), ,, -, unitQ, ., getQ2, (, ), ,, -, unitQ, ., getQ3, (, ), ), ;]
[,, -, unitQ, ., getQ3, (, ), ), ;, }, else, {, return, this, ., normalize, (, ), ;, }]
[,, -, unitQ, ., getQ3, (, ), ), ;, }, else, {, return, this, ., normalize, (, ), ;, }]
[., getQ2, (, ), ,, -, unitQ, ., getQ3, (, ), ), ;, }, else, {, return, this, ., normalize]
[), ;, }, else, {, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {]
[), ;, }, else, {, return, this, ., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {]
[., getQ3, (, ), ), ;, }, else, {, return, this, ., normalize, (, ), ;, }, }, public, Quaternion]
[;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0, +, q1, *, q1]
[., normalize, (, ), ;, }, }, public, Quaternion, getInverse, (, ), {, final, double, squareNorm, =, q0, *, q0]
[;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, )]
[+, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[+, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new]
[+, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN]
[*, q0, +, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision]
[+, q1, *, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN]
[+, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new]
[*, q1, +, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {]
[+, q2, *, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new]
[+, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[*, q2, +, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (]
[+, q3, *, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, .]
[;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, )]
[*, q3, ;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,]
[;, if, (, squareNorm, <, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, )]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /]
[<, Precision, ., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new]
[), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /]
[., SAFE_MIN, ), {, throw, new, ZeroException, (, LocalizedFormats, ., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (]
[;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,]
[,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2]
[., NORM, ,, squareNorm, ), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,]
[), ;, }, return, new, Quaternion, (, q0, /, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm]
[;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double, getQ1, (, ), {, return, q1]
[,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double]
[/, squareNorm, ,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }]
[,, -, q1, /, squareNorm, ,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double]
[,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return]
[/, squareNorm, ,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, )]
[/, squareNorm, ,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, )]
[,, -, q2, /, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return]
[,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double]
[/, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }]
[/, squareNorm, ,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }]
[,, -, q3, /, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double]
[), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double, getQ1, (, ), {, return]
[/, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double, getQ1, (, )]
[/, squareNorm, ), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double, getQ1, (, )]
[), ;, }, public, double, getQ0, (, ), {, return, q0, ;, }, public, double, getQ1, (, ), {, return]
[;, }, public, double, getQ1, (, ), {, return, q1, ;, }, public, double, getQ2, (, ), {, return, q2]
[;, }, public, double, getQ2, (, ), {, return, q2, ;, }, public, double, getQ3, (, ), {, return, q3]
[;, }, public, double, getQ3, (, ), {, return, q3, ;, }, public, double, getScalarPart, (, ), {, return, getQ0]
[;, }, public, double, getScalarPart, (, ), {, return, getQ0, (, ), ;, }, public, double, [, ], getVectorPart, (]
[;, }, public, double, [, ], getVectorPart, (, ), {, return, new, double, [, ], {, getQ1, (, ), ,]
[;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha]
[;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,, alpha]
[,, getQ2, (, ), ,, getQ3, (, ), }, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {]
[,, getQ3, (, ), }, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (]
[}, ;, }, public, Quaternion, multiply, (, final, double, alpha, ), {, return, new, Quaternion, (, alpha, *, q0, ,]
[;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s, =]
[,, alpha, *, q1, ,, alpha, *, q2, ,, alpha, *, q3, ), ;, }, @, Override, public, String, toString]
[*, q0, ,, alpha, *, q1, ,, alpha, *, q2, ,, alpha, *, q3, ), ;, }, @, Override, public]
[,, alpha, *, q1, ,, alpha, *, q2, ,, alpha, *, q3, ), ;, }, @, Override, public, String, toString]
[,, alpha, *, q2, ,, alpha, *, q3, ), ;, }, @, Override, public, String, toString, (, ), {, final]
[*, q1, ,, alpha, *, q2, ,, alpha, *, q3, ), ;, }, @, Override, public, String, toString, (, )]
[,, alpha, *, q2, ,, alpha, *, q3, ), ;, }, @, Override, public, String, toString, (, ), {, final]
[,, alpha, *, q3, ), ;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =, " "]
[*, q2, ,, alpha, *, q3, ), ;, }, @, Override, public, String, toString, (, ), {, final, String, sp]
[,, alpha, *, q3, ), ;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =, " "]
[), ;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s]
[*, q3, ), ;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =, " ", ;, final]
[), ;, }, @, Override, public, String, toString, (, ), {, final, String, sp, =, " ", ;, final, StringBuilder, s]
[;, final, StringBuilder, s, =, new, StringBuilder, (, ), ;, s, ., append, (, "[", ), ., append, (, q0]
[;, s, ., append, (, "[", ), ., append, (, q0, ), ., append, (, sp, ), ., append, (]
[;, return, s, ., toString, (, ), ;, }, }]
[., append, (, "]", ), ;, return, s, ., toString, (, ), ;, }, }]
[., append, (, q3, ), ., append, (, "]", ), ;, return, s, ., toString, (, ), ;, }, }]
[., append, (, sp, ), ., append, (, q3, ), ., append, (, "]", ), ;, return, s, ., toString]
[., append, (, q2, ), ., append, (, sp, ), ., append, (, q3, ), ., append, (, "]", )]
[., append, (, sp, ), ., append, (, q2, ), ., append, (, sp, ), ., append, (, q3, )]
[., append, (, q1, ), ., append, (, sp, ), ., append, (, q2, ), ., append, (, sp, )]
[., append, (, sp, ), ., append, (, q1, ), ., append, (, sp, ), ., append, (, q2, )]
[., append, (, q0, ), ., append, (, sp, ), ., append, (, q1, ), ., append, (, sp, )]
[., append, (, "[", ), ., append, (, q0, ), ., append, (, sp, ), ., append, (, q1, )]
[), ., append, (, q0, ), ., append, (, sp, ), ., append, (, q1, ), ., append, (, sp]
[), ., append, (, sp, ), ., append, (, q1, ), ., append, (, sp, ), ., append, (, q2]
[), ., append, (, q1, ), ., append, (, sp, ), ., append, (, q2, ), ., append, (, sp]
[), ., append, (, sp, ), ., append, (, q2, ), ., append, (, sp, ), ., append, (, q3]
[), ., append, (, q2, ), ., append, (, sp, ), ., append, (, q3, ), ., append, (, "]"]
[), ., append, (, sp, ), ., append, (, q3, ), ., append, (, "]", ), ;, return, s, .]
[), ., append, (, q3, ), ., append, (, "]", ), ;, return, s, ., toString, (, ), ;, }]
[), ., append, (, "]", ), ;, return, s, ., toString, (, ), ;, }, }]
[), ;, return, s, ., toString, (, ), ;, }, }]
[;, }, }]
[., toString, (, ), ;, }, }]
