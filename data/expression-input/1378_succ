[), ;, rows, =, 0, ;, columns, =, 0, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, )]
[=, 0, ;, columns, =, 0, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public]
[;, columns, =, 0, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (]
[=, 0, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, final, Field]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, final, Field, <, T]
[=, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, final, Field, <, T, >, field]
[;, }, public, SparseFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension, )]
[), ;, }, public, SparseFieldMatrix, (, final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension]
[,, rowDimension, ,, columnDimension, ), ;, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, entries, =]
[,, columnDimension, ), ;, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap]
[), ;, this, ., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T]
[=, rowDimension, ;, this, ., columns, =, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;]
[., rows, =, rowDimension, ;, this, ., columns, =, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field]
[;, this, ., columns, =, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public]
[=, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <]
[., columns, =, columnDimension, ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >]
[=, new, OpenIntToFieldHashMap, <, T, >, (, field, ), ;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >, other, )]
[;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, ), ,]
[), ;, }, public, SparseFieldMatrix, (, SparseFieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, )]
[,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (]
[., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =]
[,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, .]
[., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;]
[), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =]
[., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (]
[=, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <]
[;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, other, ., entries]
[., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >]
[=, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, other, ., entries, ), ;]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, other, ., entries, ), ;, }, public, SparseFieldMatrix, (, FieldMatrix, <]
[., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, other, ., entries, ), ;, }, public]
[=, new, OpenIntToFieldHashMap, <, T, >, (, other, ., entries, ), ;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >]
[;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, ), ,]
[), ;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >, other, ), {, super, (, other, ., getField, (, )]
[., entries, ), ;, }, public, SparseFieldMatrix, (, FieldMatrix, <, T, >, other, ), {, super, (, other, ., getField]
[,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (]
[., getField, (, ), ,, other, ., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =]
[,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, .]
[., getRowDimension, (, ), ,, other, ., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;]
[), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =]
[., getColumnDimension, (, ), ), ;, rows, =, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (]
[=, other, ., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <]
[;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, )]
[., getRowDimension, (, ), ;, columns, =, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >]
[=, other, ., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;]
[;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;, for, (, int, i, =, 0]
[., getColumnDimension, (, ), ;, entries, =, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;, for, (]
[=, new, OpenIntToFieldHashMap, <, T, >, (, getField, (, ), ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int, j]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, i, ++, ), {, for, (, int]
[;, i, <, rows, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {]
[<, rows, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {, setEntry, (, i]
[++, ), {, for, (, int, j, =, 0, ;, j, <, columns, ;, j, ++, ), {, setEntry, (]
[;, j, <, columns, ;, j, ++, ), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (, i]
[;, j, ++, ), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (, i, ,, j, ), )]
[<, columns, ;, j, ++, ), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (, i, ,, j]
[;, j, ++, ), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (, i, ,, j, ), )]
[), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (, i, ,, j, ), ), ;, }, }]
[++, ), {, setEntry, (, i, ,, j, ,, other, ., getEntry, (, i, ,, j, ), ), ;, }]
[;, }, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, T, increment, ), {]
[,, j, ,, other, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, @, Override, public, void]
[,, other, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, @, Override, public, void, addToEntry, (]
[), ;, }, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, T, increment, )]
[., getEntry, (, i, ,, j, ), ), ;, }, }, }, @, Override, public, void, addToEntry, (, int, row]
[,, j, ), ), ;, }, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,]
[), ), ;, }, }, }, @, Override, public, void, addToEntry, (, int, row, ,, int, column, ,, T, increment]
[;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value]
[), ;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get, (]
[), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get]
[;, final, T, value, =, entries, ., get, (, key, ), ., add, (, increment, ), ;, if, (, getField]
[,, column, ), ;, final, T, value, =, entries, ., get, (, key, ), ., add, (, increment, ), ;]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., add, (, increment, ), ;, if, (]
[;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove]
[., add, (, increment, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, )]
[., get, (, key, ), ., add, (, increment, ), ;, if, (, getField, (, ), ., getZero, (, )]
[), ., add, (, increment, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value]
[), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, .]
[), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, )]
[., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put]
[., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else]
[), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value]
[;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, @, Override, public, FieldMatrix, <]
[., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }]
[), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, @, Override, public, FieldMatrix]
[;, }, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, SparseFieldMatrix, <, T, >]
[., put, (, key, ,, value, ), ;, }, }, @, Override, public, FieldMatrix, <, T, >, copy, (, )]
[,, value, ), ;, }, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, SparseFieldMatrix]
[), ;, }, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, SparseFieldMatrix, <, T]
[;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), {, return, new]
[), ;, }, @, Override, public, FieldMatrix, <, T, >, createMatrix, (, int, rowDimension, ,, int, columnDimension, ), {, return]
[;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, @, Override, public, T, getEntry, (]
[,, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, @]
[,, columnDimension, ), ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, @, Override, public]
[), ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, columns, ;, }, @, Override, public, T, getEntry]
[;, }, @, Override, public, T, getEntry, (, int, row, ,, int, column, ), {, checkRowIndex, (, row, ), ;]
[;, checkColumnIndex, (, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,, column, ), ), ;, }]
[), ;, checkColumnIndex, (, column, ), ;, return, entries, ., get, (, computeKey, (, row, ,, column, ), ), ;]
[;, return, entries, ., get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int, getRowDimension]
[), ;, return, entries, ., get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int]
[;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, void, multiplyEntry, (]
[., get, (, computeKey, (, row, ,, column, ), ), ;, }, @, Override, public, int, getRowDimension, (, ), {]
[), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, void, multiplyEntry]
[,, column, ), ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override]
[), ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, rows, ;, }, @, Override, public, void]
[;, }, @, Override, public, void, multiplyEntry, (, int, row, ,, int, column, ,, T, factor, ), {, checkRowIndex, (]
[;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value]
[), ;, checkColumnIndex, (, column, ), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T]
[;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get, (]
[), ;, final, int, key, =, computeKey, (, row, ,, column, ), ;, final, T, value, =, entries, ., get]
[;, final, T, value, =, entries, ., get, (, key, ), ., multiply, (, factor, ), ;, if, (, getField]
[,, column, ), ;, final, T, value, =, entries, ., get, (, key, ), ., multiply, (, factor, ), ;]
[), ;, final, T, value, =, entries, ., get, (, key, ), ., multiply, (, factor, ), ;, if, (]
[;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove]
[., multiply, (, factor, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, )]
[., get, (, key, ), ., multiply, (, factor, ), ;, if, (, getField, (, ), ., getZero, (, )]
[), ., multiply, (, factor, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value]
[), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, .]
[), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, )]
[., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put]
[., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, key, ), ;, }, else]
[), ), {, entries, ., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value]
[;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, @, Override, public, void, setEntry]
[., remove, (, key, ), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }]
[), ;, }, else, {, entries, ., put, (, key, ,, value, ), ;, }, }, @, Override, public, void]
[;, }, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, T, value, ), {, checkRowIndex]
[., put, (, key, ,, value, ), ;, }, }, @, Override, public, void, setEntry, (, int, row, ,, int]
[,, value, ), ;, }, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, T, value]
[), ;, }, }, @, Override, public, void, setEntry, (, int, row, ,, int, column, ,, T, value, ), {]
[;, checkColumnIndex, (, column, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, )]
[), ;, checkColumnIndex, (, column, ), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value]
[;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove]
[), ;, if, (, getField, (, ), ., getZero, (, ), ., equals, (, value, ), ), {, entries, .]
[), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put]
[., equals, (, value, ), ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }]
[., getZero, (, ), ., equals, (, value, ), ), {, entries, ., remove, (, computeKey, (, row, ,, column]
[), ), {, entries, ., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, .]
[;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;, }, }]
[., remove, (, computeKey, (, row, ,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (]
[), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;, }]
[,, column, ), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value]
[), ), ;, }, else, {, entries, ., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;]
[;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *, columns, +, column]
[., put, (, computeKey, (, row, ,, column, ), ,, value, ), ;, }, }, private, int, computeKey, (, int]
[,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *]
[,, column, ), ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {]
[), ,, value, ), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row]
[), ;, }, }, private, int, computeKey, (, int, row, ,, int, column, ), {, return, row, *, columns, +]
[;, }, }]
[+, column, ;, }, }]
[*, columns, +, column, ;, }, }]
[+, column, ;, }, }]
[;, }, }]
