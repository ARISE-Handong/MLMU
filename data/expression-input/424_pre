[private, NameReferenceGraph, graph, ;, private, final, JSModuleGraph, moduleGraph, ;, private, final, AbstractCompiler, compiler, ;, AnalyzeNameReferences, (, AbstractCompiler, compiler, ), {]
[private, NameReferenceGraph, graph, ;, private, final, JSModuleGraph, moduleGraph, ;, private, final, AbstractCompiler, compiler, ;, AnalyzeNameReferences, (, AbstractCompiler, compiler, ), {]
[private, final, JSModuleGraph, moduleGraph, ;, private, final, AbstractCompiler, compiler, ;, AnalyzeNameReferences, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[JSModuleGraph, moduleGraph, ;, private, final, AbstractCompiler, compiler, ;, AnalyzeNameReferences, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[JSModuleGraph, moduleGraph, ;, private, final, AbstractCompiler, compiler, ;, AnalyzeNameReferences, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[final, AbstractCompiler, compiler, ;, AnalyzeNameReferences, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =]
[final, AbstractCompiler, compiler, ;, AnalyzeNameReferences, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, this, ., moduleGraph, =]
[(, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameReferenceGraphConstruction, gc, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (]
[public, void, process, (, Node, externs, ,, Node, root, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;]
[Node, externs, ,, Node, root, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (]
[,, Node, root, ), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,]
[), {, NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,, root, ), ;]
[NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,, root, ), ;, graph, =]
[NameReferenceGraphConstruction, gc, =, new, NameReferenceGraphConstruction, (, compiler, ), ;, gc, ., process, (, externs, ,, root, ), ;, graph, =]
[,, root, ), ;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =]
[,, root, ), ;, graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =]
[graph, =, gc, ., getNameReferenceGraph, (, ), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (]
[), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;]
[), ;, FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;]
[FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, getInfo, (]
[FixedPointGraphTraversal, <, Name, ,, Reference, >, t, =, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, getInfo, (]
[=, FixedPointGraphTraversal, ., newTraversal, (, new, PropagateReferences, (, ), ), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (]
[newTraversal, (, new, PropagateReferences, (, ), ), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, ), ;]
[newTraversal, (, new, PropagateReferences, (, ), ), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, ), ;]
[(, ), ), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (]
[), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,]
[), ;, getInfo, (, graph, ., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,]
[graph, ., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (]
[graph, ., MAIN, ), ., markReference, (, null, ), ;, t, ., computeFixedPoint, (, graph, ,, Sets, ., newHashSet, (]
[graph, ,, Sets, ., newHashSet, (, graph, ., MAIN, ), ), ;, }, public, NameReferenceGraph, getGraph, (, ), {, return]
[{, @, Override, public, boolean, traverseEdge, (, Name, start, ,, Reference, edge, ,, Name, dest, ), {, NameInfo, startInfo, =]
[Override, public, boolean, traverseEdge, (, Name, start, ,, Reference, edge, ,, Name, dest, ), {, NameInfo, startInfo, =, getInfo, (]
[start, ,, Reference, edge, ,, Name, dest, ), {, NameInfo, startInfo, =, getInfo, (, start, ), ;, NameInfo, destInfo, =]
[Reference, edge, ,, Name, dest, ), {, NameInfo, startInfo, =, getInfo, (, start, ), ;, NameInfo, destInfo, =, getInfo, (]
[), {, NameInfo, startInfo, =, getInfo, (, start, ), ;, NameInfo, destInfo, =, getInfo, (, dest, ), ;, if, (]
[), {, NameInfo, startInfo, =, getInfo, (, start, ), ;, NameInfo, destInfo, =, getInfo, (, dest, ), ;, if, (]
[NameInfo, destInfo, =, getInfo, (, dest, ), ;, if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =]
[NameInfo, destInfo, =, getInfo, (, dest, ), ;, if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =]
[if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[if, (, startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (]
[startInfo, ., isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=]
[isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&]
[isReferenced, (, ), ), {, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&]
[{, JSModule, startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (]
[startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,]
[startModule, =, startInfo, ., getDeepestCommonModuleRef, (, ), ;, if, (, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,]
[(, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), ), {, return]
[(, startModule, !=, null, &&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), ), {, return]
[&&, moduleGraph, ., dependsOn, (, startModule, ,, edge, ., getModule, (, ), ), ), {, return, destInfo, ., markReference, (]
[edge, ., getModule, (, ), ), ), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return]
[edge, ., getModule, (, ), ), ), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return]
[), ), ), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return, destInfo, ., markReference, (]
[), ), ), {, return, destInfo, ., markReference, (, startModule, ), ;, }, else, {, return, destInfo, ., markReference, (]
[), ;, }, else, {, return, destInfo, ., markReference, (, edge, ., getModule, (, ), ), ;, }, }, return]
[false, ;, }, }, private, NameInfo, getInfo, (, Name, symbol, ), {, GraphNode, <, Name, ,, Reference, >, name, =]
[false, ;, }, }, private, NameInfo, getInfo, (, Name, symbol, ), {, GraphNode, <, Name, ,, Reference, >, name, =]
[private, NameInfo, getInfo, (, Name, symbol, ), {, GraphNode, <, Name, ,, Reference, >, name, =, graph, ., getNode, (]
[), {, GraphNode, <, Name, ,, Reference, >, name, =, graph, ., getNode, (, symbol, ), ;, NameInfo, info, =]
[), {, GraphNode, <, Name, ,, Reference, >, name, =, graph, ., getNode, (, symbol, ), ;, NameInfo, info, =]
[name, =, graph, ., getNode, (, symbol, ), ;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (]
[name, =, graph, ., getNode, (, symbol, ), ;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (]
[graph, ., getNode, (, symbol, ), ;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (, info, ==]
[(, symbol, ), ;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (, info, ==, null, ), {]
[), ;, NameInfo, info, =, name, ., getAnnotation, (, ), ;, if, (, info, ==, null, ), {, info, =]
[name, ., getAnnotation, (, ), ;, if, (, info, ==, null, ), {, info, =, new, NameInfo, (, ), ;]
[name, ., getAnnotation, (, ), ;, if, (, info, ==, null, ), {, info, =, new, NameInfo, (, ), ;]
[), ;, if, (, info, ==, null, ), {, info, =, new, NameInfo, (, ), ;, name, ., setAnnotation, (]
[==, null, ), {, info, =, new, NameInfo, (, ), ;, name, ., setAnnotation, (, info, ), ;, }, return]
[setAnnotation, (, info, ), ;, }, return, info, ;, }, final, class, NameInfo, implements, Annotation, {, private, boolean, referenced, =]
[return, info, ;, }, final, class, NameInfo, implements, Annotation, {, private, boolean, referenced, =, false, ;, private, JSModule, deepestCommonModuleRef, =]
[Annotation, {, private, boolean, referenced, =, false, ;, private, JSModule, deepestCommonModuleRef, =, null, ;, boolean, isReferenced, (, ), {, return]
[JSModule, deepestCommonModuleRef, =, null, ;, boolean, isReferenced, (, ), {, return, referenced, ;, }, JSModule, getDeepestCommonModuleRef, (, ), {, return]
[}, JSModule, getDeepestCommonModuleRef, (, ), {, return, deepestCommonModuleRef, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =]
[), {, return, deepestCommonModuleRef, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (]
[{, return, deepestCommonModuleRef, ;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !]
[;, }, boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {]
[boolean, markReference, (, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {, referenced, =]
[(, JSModule, module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;]
[module, ), {, boolean, hasChanged, =, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =]
[=, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (]
[=, false, ;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (]
[;, if, (, !, referenced, ), {, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=]
[{, referenced, =, true, ;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =]
[;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (]
[;, hasChanged, =, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (]
[=, true, ;, }, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==]
[}, if, (, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {]
[(, moduleGraph, !=, null, ), {, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =]
[{, JSModule, originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {]
[originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =]
[originalDeepestCommon, =, deepestCommonModuleRef, ;, if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =]
[if, (, deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (]
[deepestCommonModuleRef, ==, null, ), {, deepestCommonModuleRef, =, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,]
[=, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (]
[=, module, ;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (]
[;, }, else, {, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=]
[{, deepestCommonModuleRef, =, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {]
[=, moduleGraph, ., getDeepestCommonDependencyInclusive, (, deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =]
[deepestCommonModuleRef, ,, module, ), ;, }, if, (, originalDeepestCommon, !=, deepestCommonModuleRef, ), {, hasChanged, =, true, ;, }, }, return]
