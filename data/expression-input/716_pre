[extends, FieldElement, <, T, >, >, extends, AbstractFieldMatrix, <, T, >, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[T, [, ], [, ], data, ;, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ), {, super, (]
[final, Field, <, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (]
[<, T, >, field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, field, ,]
[>, field, ,, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rowDimension, ,]
[final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;]
[rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, data, =]
[rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, data, =]
[columnDimension, ), throws, NotStrictlyPositiveException, {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, data, =, MathArrays, ., buildArray, (]
[throws, NotStrictlyPositiveException, {, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, data, =, MathArrays, ., buildArray, (, field, ,]
[{, super, (, field, ,, rowDimension, ,, columnDimension, ), ;, data, =, MathArrays, ., buildArray, (, field, ,, rowDimension, ,]
[public, Array2DRowFieldMatrix, (, final, T, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException, {, this, (]
[(, final, T, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException, {, this, (, extractField, (]
[[, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException, {, this, (, extractField, (, d, ), ,]
[>, field, ,, final, T, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException, {, super, (]
[final, T, [, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException, {, super, (, field, ), ;]
[[, ], [, ], d, ), throws, DimensionMismatchException, ,, NullArgumentException, ,, NoDataException, {, super, (, field, ), ;, copyIn, (]
[T, [, ], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, this, (]
[], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, this, (, extractField, (]
[d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, this, (, extractField, (, d, ), ,]
[final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, this, (, extractField, (, d, ), ,, d, ,]
[T, [, ], [, ], d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, super, (]
[d, ,, final, boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, super, (, field, ), ;, if, (]
[boolean, copyArray, ), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, super, (, field, ), ;, if, (, copyArray, ), {]
[), throws, DimensionMismatchException, ,, NoDataException, ,, NullArgumentException, {, super, (, field, ), ;, if, (, copyArray, ), {, copyIn, (]
[NullArgumentException, {, super, (, field, ), ;, if, (, copyArray, ), {, copyIn, (, d, ), ;, }, else, {]
[NullArgumentException, {, super, (, field, ), ;, if, (, copyArray, ), {, copyIn, (, d, ), ;, }, else, {]
[field, ), ;, if, (, copyArray, ), {, copyIn, (, d, ), ;, }, else, {, MathUtils, ., checkNotNull, (]
[{, copyIn, (, d, ), ;, }, else, {, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows, =]
[{, copyIn, (, d, ), ;, }, else, {, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows, =]
[}, else, {, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows, =, d, ., length, ;, if, (]
[}, else, {, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows, =, d, ., length, ;, if, (]
[{, MathUtils, ., checkNotNull, (, d, ), ;, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==]
[(, d, ), ;, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw]
[;, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[;, final, int, nRows, =, d, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, []
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (]
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==]
[}, final, int, nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw]
[nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, =, d, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;]
[0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;]
[{, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;]
[new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[), ;, }, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (]
[}, for, (, int, r, =, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (, d, []
[=, 1, ;, r, <, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=]
[<, nRows, ;, r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw]
[r, ++, ), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[if, (, d, [, r, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, d, []
[!=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], ., length, ), ;, }, }]
[), {, throw, new, DimensionMismatchException, (, nCols, ,, d, [, r, ], ., length, ), ;, }, }, data, =]
[data, =, d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ], v, ), throws, NoDataException, {, this, (]
[d, ;, }, }, public, Array2DRowFieldMatrix, (, final, T, [, ], v, ), throws, NoDataException, {, this, (, extractField, (]
[}, public, Array2DRowFieldMatrix, (, final, T, [, ], v, ), throws, NoDataException, {, this, (, extractField, (, v, ), ,]
[}, public, Array2DRowFieldMatrix, (, final, Field, <, T, >, field, ,, final, T, [, ], v, ), {, super, (]
[T, >, field, ,, final, T, [, ], v, ), {, super, (, field, ), ;, final, int, nRows, =]
[T, >, field, ,, final, T, [, ], v, ), {, super, (, field, ), ;, final, int, nRows, =]
[final, T, [, ], v, ), {, super, (, field, ), ;, final, int, nRows, =, v, ., length, ;]
[[, ], v, ), {, super, (, field, ), ;, final, int, nRows, =, v, ., length, ;, data, =]
[[, ], v, ), {, super, (, field, ), ;, final, int, nRows, =, v, ., length, ;, data, =]
[{, super, (, field, ), ;, final, int, nRows, =, v, ., length, ;, data, =, MathArrays, ., buildArray, (]
[), ;, final, int, nRows, =, v, ., length, ;, data, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[final, int, nRows, =, v, ., length, ;, data, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,]
[data, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =]
[MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;]
[MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;]
[buildArray, (, getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row, <]
[getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[getField, (, ), ,, nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[nRows, ,, 1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {]
[1, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, []
[for, (, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], []
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =]
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =]
[0, ;, row, <, nRows, ;, row, ++, ), {, data, [, row, ], [, 0, ], =, v, []
[Override, public, FieldMatrix, <, T, >, createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return]
[createMatrix, (, final, int, rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, Array2DRowFieldMatrix, <, T, >, (]
[rowDimension, ,, final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,]
[final, int, columnDimension, ), throws, NotStrictlyPositiveException, {, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, rowDimension, ,]
[), ,, rowDimension, ,, columnDimension, ), ;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return]
[;, }, @, Override, public, FieldMatrix, <, T, >, copy, (, ), {, return, new, Array2DRowFieldMatrix, <, T, >, (]
[public, FieldMatrix, <, T, >, copy, (, ), {, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,]
[>, copy, (, ), {, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, copyOut, (, ), ,]
[), ;, }, public, Array2DRowFieldMatrix, <, T, >, add, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[}, public, Array2DRowFieldMatrix, <, T, >, add, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkAdditionCompatible, (]
[(, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkAdditionCompatible, (, m, ), ;, final, int, rowCount, =]
[throws, MatrixDimensionMismatchException, {, checkAdditionCompatible, (, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =]
[final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (]
[getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,]
[outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <]
[getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, []
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =, m, ., data, []
[;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =]
[;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =]
[T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =, outData, []
[[, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, []
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, []
[col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (]
[col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (]
[columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., add, (, mRow, []
[[, col, ], =, dataRow, [, col, ], ., add, (, mRow, [, col, ], ), ;, }, }, return]
[col, ], ., add, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (]
[(, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,]
[[, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,]
[), ;, }, public, Array2DRowFieldMatrix, <, T, >, subtract, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {]
[}, public, Array2DRowFieldMatrix, <, T, >, subtract, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkSubtractionCompatible, (]
[(, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, MatrixDimensionMismatchException, {, checkSubtractionCompatible, (, m, ), ;, final, int, rowCount, =]
[throws, MatrixDimensionMismatchException, {, checkSubtractionCompatible, (, m, ), ;, final, int, rowCount, =, getRowDimension, (, ), ;, final, int, columnCount, =]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =]
[getRowDimension, (, ), ;, final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =]
[final, int, columnCount, =, getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (]
[getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,]
[outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =]
[MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[MathArrays, ., buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;]
[buildArray, (, getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <]
[getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[getField, (, ), ,, rowCount, ,, columnCount, ), ;, for, (, int, row, =, 0, ;, row, <, rowCount, ;]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[row, =, 0, ;, row, <, rowCount, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, []
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =]
[T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], mRow, =, m, ., data, []
[;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =]
[;, final, T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =]
[T, [, ], mRow, =, m, ., data, [, row, ], ;, final, T, [, ], outDataRow, =, outData, []
[[, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {]
[row, ], ;, for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, []
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[for, (, int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =]
[int, col, =, 0, ;, col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, []
[col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (]
[col, <, columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (]
[columnCount, ;, col, ++, ), {, outDataRow, [, col, ], =, dataRow, [, col, ], ., subtract, (, mRow, []
[[, col, ], =, dataRow, [, col, ], ., subtract, (, mRow, [, col, ], ), ;, }, }, return]
[col, ], ., subtract, (, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (]
[(, mRow, [, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,]
[[, col, ], ), ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,]
[), ;, }, public, Array2DRowFieldMatrix, <, T, >, multiply, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {]
[}, public, Array2DRowFieldMatrix, <, T, >, multiply, (, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible, (]
[(, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible, (, m, ), ;, final, int, nRows, =]
[(, final, Array2DRowFieldMatrix, <, T, >, m, ), throws, DimensionMismatchException, {, checkMultiplicationCompatible, (, m, ), ;, final, int, nRows, =]
[{, checkMultiplicationCompatible, (, m, ), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[{, checkMultiplicationCompatible, (, m, ), ;, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =]
[this, ., getRowDimension, (, ), ;, final, int, nCols, =, m, ., getColumnDimension, (, ), ;, final, int, nSum, =]
[), ;, final, int, nSum, =, this, ., getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =]
[), ;, final, int, nSum, =, this, ., getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =]
[nSum, =, this, ., getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (]
[getColumnDimension, (, ), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[), ;, final, T, [, ], [, ], outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,]
[outData, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, nCols, ), ;, for, (, int, row, =]
[MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;]
[MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;]
[buildArray, (, getField, (, ), ,, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <]
[getField, (, ), ,, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[getField, (, ), ,, nRows, ,, nCols, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, []
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], outDataRow, =]
[++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], outDataRow, =]
[{, final, T, [, ], dataRow, =, data, [, row, ], ;, final, T, [, ], outDataRow, =, outData, []
[[, row, ], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[], ;, final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;]
[final, T, [, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[[, ], outDataRow, =, outData, [, row, ], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, T, sum, =]
[], ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, col, ++, ), {, T, sum, =]
[col, ++, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =]
[), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nSum, ;]
[=, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nSum, ;]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, =]
[(, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (]
[(, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (]
[(, int, i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (]
[i, =, 0, ;, i, <, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, []
[<, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[<, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[<, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[<, nSum, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, m, ., data, []
[sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, m, ., data, [, i, ], []
[dataRow, [, i, ], ., multiply, (, m, ., data, [, i, ], [, col, ], ), ), ;, }]
[dataRow, [, i, ], ., multiply, (, m, ., data, [, i, ], [, col, ], ), ), ;, }]
[i, ], ., multiply, (, m, ., data, [, i, ], [, col, ], ), ), ;, }, outDataRow, []
[multiply, (, m, ., data, [, i, ], [, col, ], ), ), ;, }, outDataRow, [, col, ], =]
[[, i, ], [, col, ], ), ), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return]
[), ), ;, }, outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (]
[outDataRow, [, col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,]
[col, ], =, sum, ;, }, }, return, new, Array2DRowFieldMatrix, <, T, >, (, getField, (, ), ,, outData, ,]
[,, outData, ,, false, ), ;, }, @, Override, public, T, [, ], [, ], getData, (, ), {, return]
[(, ), {, return, copyOut, (, ), ;, }, public, T, [, ], [, ], getDataRef, (, ), {, return]
[,, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, if, (]
[,, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, if, (]
[int, row, ,, final, int, column, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, if, (, data, ==]
[column, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, if, (, data, ==, null, ), {, if, (]
[column, ), throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, if, (, data, ==, null, ), {, if, (]
[throws, OutOfRangeException, ,, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, if, (, data, ==, null, ), {, if, (, row, >]
[,, NoDataException, ,, DimensionMismatchException, {, if, (, data, ==, null, ), {, if, (, row, >, 0, ), {, throw]
[DimensionMismatchException, {, if, (, data, ==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (]
[DimensionMismatchException, {, if, (, data, ==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (]
[data, ==, null, ), {, if, (, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,]
[(, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (]
[(, row, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >]
[throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw]
[(, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (]
[(, LocalizedFormats, ., FIRST_ROWS_NOT_INITIALIZED_YET, ,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (]
[,, row, ), ;, }, if, (, column, >, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =]
[>, 0, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =]
[MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (]
[MathIllegalStateException, (, LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (]
[LocalizedFormats, ., FIRST_COLUMNS_NOT_INITIALIZED_YET, ,, column, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==]
[column, ), ;, }, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw]
[}, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[}, final, int, nRows, =, subMatrix, ., length, ;, if, (, nRows, ==, 0, ), {, throw, new, NoDataException, (]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[(, nRows, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, []
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (]
[(, LocalizedFormats, ., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (]
[., AT_LEAST_ONE_ROW, ), ;, }, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==]
[}, final, int, nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw]
[nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[nCols, =, subMatrix, [, 0, ], ., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (]
[., length, ;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =]
[;, if, (, nCols, ==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =]
[==, 0, ), {, throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (]
[throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[throw, new, NoDataException, (, LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[LocalizedFormats, ., AT_LEAST_ONE_COLUMN, ), ;, }, data, =, MathArrays, ., buildArray, (, getField, (, ), ,, subMatrix, ., length, ,]
[MathArrays, ., buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =]
[buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[buildArray, (, getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;]
[getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <]
[getField, (, ), ,, subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <]
[subMatrix, ., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;]
[., length, ,, nCols, ), ;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (]
[(, int, i, =, 0, ;, i, <, data, ., length, ;, ++, i, ), {, if, (, subMatrix, []
[;, i, <, data, ., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=]
[., length, ;, ++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw]
[++, i, ), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[), {, if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,]
[if, (, subMatrix, [, i, ], ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, []
[length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }]
[length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }]
[{, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy, (]
[{, throw, new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy, (]
[new, DimensionMismatchException, (, nCols, ,, subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, []
[nCols, ,, subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,]
[subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,]
[subMatrix, [, i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,]
[i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, []
[i, ], ., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, []
[., length, ), ;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +]
[;, }, System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,]
[System, ., arraycopy, (, subMatrix, [, i, ], ,, 0, ,, data, [, i, +, row, ], ,, column, ,]
[], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {]
[], ,, 0, ,, data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {]
[data, [, i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (]
[i, +, row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,]
[row, ], ,, column, ,, nCols, ), ;, }, }, else, {, super, ., setSubMatrix, (, subMatrix, ,, row, ,]
[;, }, }, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {]
[}, @, Override, public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (]
[public, T, getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[getEntry, (, final, int, row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return]
[row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return]
[row, ,, final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return]
[final, int, column, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return, data, []
[), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, return, data, [, row, ], []
[Override, public, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {]
[void, setEntry, (, final, int, row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (]
[final, int, row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[row, ,, final, int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[int, column, ,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[,, final, T, value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, []
[value, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], []
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[Override, public, void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {]
[void, addToEntry, (, final, int, row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (]
[final, int, row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[row, ,, final, int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[int, column, ,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[,, final, T, increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, []
[increment, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], []
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, []
[), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, [, row, ], []
[), ;, data, [, row, ], [, column, ], =, data, [, row, ], [, column, ], ., add, (]
[Override, public, void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {]
[void, multiplyEntry, (, final, int, row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (]
[final, int, row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;]
[row, ,, final, int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (]
[int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[int, column, ,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;]
[,, final, T, factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, []
[factor, ), throws, OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], []
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[OutOfRangeException, {, checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =]
[checkRowIndex, (, row, ), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, []
[), ;, checkColumnIndex, (, column, ), ;, data, [, row, ], [, column, ], =, data, [, row, ], []
[), ;, data, [, row, ], [, column, ], =, data, [, row, ], [, column, ], ., multiply, (]
[], [, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[], [, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return]
[[, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (]
[[, column, ], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (]
[], ., multiply, (, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==]
[(, factor, ), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?]
[), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0, :]
[), ;, }, @, Override, public, int, getRowDimension, (, ), {, return, (, data, ==, null, ), ?, 0, :]
[==, null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[==, null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return]
[null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (]
[null, ), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[), ?, 0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (]
[0, :, data, ., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==]
[., length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||]
[length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (]
[length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (]
[length, ;, }, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (]
[}, @, Override, public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data, []
[public, int, getColumnDimension, (, ), {, return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==]
[), {, return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?]
[return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :]
[return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :]
[return, (, (, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :]
[(, data, ==, null, ), ||, (, data, [, 0, ], ==, null, ), ), ?, 0, :, data, []
[Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[Override, public, T, [, ], operate, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =]
[nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (]
[nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (]
[nRows, =, this, ., getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (]
[getRowDimension, (, ), ;, final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=]
[final, int, nCols, =, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw]
[=, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[=, this, ., getColumnDimension, (, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (]
[(, ), ;, if, (, v, ., length, !=, nCols, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ], out, =]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ], out, =]
[DimensionMismatchException, (, v, ., length, ,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[length, ,, nCols, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[[, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ), ;, for, (, int, row, =]
[out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ), ;, for, (, int, row, =, 0, ;]
[out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ), ;, for, (, int, row, =, 0, ;]
[MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <]
[buildArray, (, getField, (, ), ,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[buildArray, (, getField, (, ), ,, nRows, ), ;, for, (, int, row, =, 0, ;, row, <, nRows, ;]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[(, int, row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =]
[row, =, 0, ;, row, <, nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, []
[nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, T, sum, =]
[nRows, ;, row, ++, ), {, final, T, [, ], dataRow, =, data, [, row, ], ;, T, sum, =]
[[, row, ], ;, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =]
[], ;, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[], ;, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[=, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, =]
[(, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (]
[(, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (]
[(, int, i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (]
[i, =, 0, ;, i, <, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, []
[<, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[<, nCols, ;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (]
[;, i, ++, ), {, sum, =, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, []
[=, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, [, i, ], ), ), ;, }]
[=, sum, ., add, (, dataRow, [, i, ], ., multiply, (, v, [, i, ], ), ), ;, }]
[., add, (, dataRow, [, i, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, []
[dataRow, [, i, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =]
[., multiply, (, v, [, i, ], ), ), ;, }, out, [, row, ], =, sum, ;, }, return]
[Override, public, T, [, ], preMultiply, (, final, T, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =]
[T, [, ], v, ), throws, DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[DimensionMismatchException, {, final, int, nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (]
[nRows, =, getRowDimension, (, ), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=]
[), ;, final, int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[int, nCols, =, getColumnDimension, (, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (]
[(, ), ;, if, (, v, ., length, !=, nRows, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ], out, =]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ], out, =]
[DimensionMismatchException, (, v, ., length, ,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (]
[length, ,, nRows, ), ;, }, final, T, [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[[, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nCols, ), ;, for, (, int, col, =]
[out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nCols, ), ;, for, (, int, col, =, 0, ;]
[out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nCols, ), ;, for, (, int, col, =, 0, ;]
[MathArrays, ., buildArray, (, getField, (, ), ,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <]
[buildArray, (, getField, (, ), ,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;]
[(, getField, (, ), ,, nCols, ), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++]
[), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =]
[), ;, for, (, int, col, =, 0, ;, col, <, nCols, ;, ++, col, ), {, T, sum, =]
[++, col, ), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =]
[), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[), {, T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;]
[T, sum, =, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[=, getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[getField, (, ), ., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++]
[., getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (]
[i, =, 0, ;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, data, []
[;, i, <, nRows, ;, ++, i, ), {, sum, =, sum, ., add, (, data, [, i, ], []
[++, i, ), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ], ., multiply, (]
[++, i, ), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ], ., multiply, (]
[), {, sum, =, sum, ., add, (, data, [, i, ], [, col, ], ., multiply, (, v, []
[add, (, data, [, i, ], [, col, ], ., multiply, (, v, [, i, ], ), ), ;, }]
[add, (, data, [, i, ], [, col, ], ., multiply, (, v, [, i, ], ), ), ;, }]
[data, [, i, ], [, col, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, []
[], [, col, ], ., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =]
[., multiply, (, v, [, i, ], ), ), ;, }, out, [, col, ], =, sum, ;, }, return]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, []
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, []
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =]
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =]
[=, 0, ;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (]
[;, j, <, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[<, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[<, columns, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[;, }, @, Override, public, T, walkInRowOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, []
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;]
[final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {]
[;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (]
[(, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,]
[j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[j, =, 0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[0, ;, j, <, columns, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, []
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, []
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =]
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =]
[=, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (]
[;, j, <=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[<=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[<=, endColumn, ;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[;, ++, j, ), {, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, []
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[), {, final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;]
[final, T, [, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=]
[[, ], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[], rowI, =, data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[data, [, i, ], ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {]
[;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (]
[(, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,]
[j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,]
[startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ), {, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[final, FieldMatrixChangingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[=, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, []
[;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, i, <, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[<, rows, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, []
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (]
[[, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[;, }, @, Override, public, T, walkInColumnOrder, (, final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =]
[final, FieldMatrixPreservingVisitor, <, T, >, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[>, visitor, ), {, final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;]
[final, int, rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (]
[rows, =, getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,]
[getRowDimension, (, ), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[), ;, final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,]
[final, int, columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -]
[columns, =, getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[getColumnDimension, (, ), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,]
[), ;, visitor, ., start, (, rows, ,, columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -]
[columns, ,, 0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[0, ,, rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;]
[rows, -, 1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <]
[1, ,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;]
[,, 0, ,, columns, -, 1, ), ;, for, (, int, j, =, 0, ;, j, <, columns, ;, ++]
[for, (, int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[int, j, =, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;]
[=, 0, ;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <]
[;, j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;]
[j, <, columns, ;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[;, ++, j, ), {, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[{, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (]
[(, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, 0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[0, ;, i, <, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, []
[<, rows, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[=, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, []
[;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[;, i, <=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;]
[<=, endRow, ;, ++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, []
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[++, i, ), {, final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =]
[final, T, [, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (]
[[, ], rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[rowI, =, data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,]
[data, [, i, ], ;, rowI, [, j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, []
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[j, ], =, visitor, ., visit, (, i, ,, j, ,, rowI, [, j, ], ), ;, }, }, return]
[int, startRow, ,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {]
[,, final, int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (]
[int, endRow, ,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,]
[,, final, int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,]
[int, startColumn, ,, final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[final, int, endColumn, ), throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;]
[throws, OutOfRangeException, ,, NumberIsTooSmallException, {, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (]
[{, checkSubMatrixIndex, (, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,]
[,, startColumn, ,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,]
[,, endColumn, ), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,]
[), ;, visitor, ., start, (, getRowDimension, (, ), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,]
[), ,, getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[getColumnDimension, (, ), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;]
[), ,, startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=]
[startRow, ,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;]
[,, endRow, ,, startColumn, ,, endColumn, ), ;, for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++]
[for, (, int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[int, j, =, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;]
[=, startColumn, ;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=]
[;, j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;]
[j, <=, endColumn, ;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[;, ++, j, ), {, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {]
[{, for, (, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (]
[(, int, i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[i, =, startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,]
[startRow, ;, i, <=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, []
[<=, endRow, ;, ++, i, ), {, visitor, ., visit, (, i, ,, j, ,, data, [, i, ], []
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[visitor, ., visit, (, i, ,, j, ,, data, [, i, ], [, j, ], ), ;, }, }, return]
[., end, (, ), ;, }, private, T, [, ], [, ], copyOut, (, ), {, final, int, nRows, =]
[., end, (, ), ;, }, private, T, [, ], [, ], copyOut, (, ), {, final, int, nRows, =]
[), {, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, T, [, ], [, ], out, =]
[), {, final, int, nRows, =, this, ., getRowDimension, (, ), ;, final, T, [, ], [, ], out, =]
[nRows, =, this, ., getRowDimension, (, ), ;, final, T, [, ], [, ], out, =, MathArrays, ., buildArray, (]
[getRowDimension, (, ), ;, final, T, [, ], [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,]
[), ;, final, T, [, ], [, ], out, =, MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,]
[MathArrays, ., buildArray, (, getField, (, ), ,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =]
[buildArray, (, getField, (, ), ,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;]
[buildArray, (, getField, (, ), ,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;]
[getField, (, ), ,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <]
[), ,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[), ,, nRows, ,, getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;]
[getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {]
[getColumnDimension, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (]
[;, for, (, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (]
[(, int, i, =, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, []
[=, 0, ;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,]
[;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,]
[;, i, <, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,]
[<, nRows, ;, i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, []
[i, ++, ), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[), {, System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,]
[System, ., arraycopy, (, data, [, i, ], ,, 0, ,, out, [, i, ], ,, 0, ,, data, []
[,, 0, ,, out, [, i, ], ,, 0, ,, data, [, i, ], ., length, ), ;, }, return]
[}, private, void, copyIn, (, final, T, [, ], [, ], in, ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {]
[void, copyIn, (, final, T, [, ], [, ], in, ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, setSubMatrix, (]
[(, final, T, [, ], [, ], in, ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, setSubMatrix, (, in, ,]
[T, [, ], [, ], in, ), throws, NullArgumentException, ,, NoDataException, ,, DimensionMismatchException, {, setSubMatrix, (, in, ,, 0, ,]
