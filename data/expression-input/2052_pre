[apache, ., commons, ., lang3, ., Validate, ;, public, class, ExtendedMessageFormat, extends, MessageFormat, {, private, static, final, long, serialVersionUID, =]
[., commons, ., lang3, ., Validate, ;, public, class, ExtendedMessageFormat, extends, MessageFormat, {, private, static, final, long, serialVersionUID, =, -]
[class, ExtendedMessageFormat, extends, MessageFormat, {, private, static, final, long, serialVersionUID, =, -, 2362048321261811743L, ;, private, static, final, int, HASH_SEED, =]
[long, serialVersionUID, =, -, 2362048321261811743L, ;, private, static, final, int, HASH_SEED, =, 31, ;, private, static, final, String, DUMMY_PATTERN, =]
[final, int, HASH_SEED, =, 31, ;, private, static, final, String, DUMMY_PATTERN, =, "", ;, private, static, final, String, ESCAPED_QUOTE, =]
[final, String, DUMMY_PATTERN, =, "", ;, private, static, final, String, ESCAPED_QUOTE, =, "''", ;, private, static, final, char, START_FMT, =]
[final, String, ESCAPED_QUOTE, =, "''", ;, private, static, final, char, START_FMT, =, ',', ;, private, static, final, char, END_FE, =]
[final, char, START_FMT, =, ',', ;, private, static, final, char, END_FE, =, '}', ;, private, static, final, char, START_FE, =]
[final, char, END_FE, =, '}', ;, private, static, final, char, START_FE, =, '{', ;, private, static, final, char, QUOTE, =]
[Map, <, String, ,, ?, extends, FormatFactory, >, registry, ;, public, ExtendedMessageFormat, (, final, String, pattern, ), {, this, (]
[String, ,, ?, extends, FormatFactory, >, registry, ;, public, ExtendedMessageFormat, (, final, String, pattern, ), {, this, (, pattern, ,]
[String, ,, ?, extends, FormatFactory, >, registry, ;, public, ExtendedMessageFormat, (, final, String, pattern, ), {, this, (, pattern, ,]
[getDefault, (, ), ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ), {, this, (]
[), ), ;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ), {, this, (, pattern, ,]
[;, }, public, ExtendedMessageFormat, (, final, String, pattern, ,, final, Locale, locale, ), {, this, (, pattern, ,, locale, ,]
[ExtendedMessageFormat, (, final, String, pattern, ,, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry, ), {, this, (]
[final, String, pattern, ,, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry, ), {, this, (, pattern, ,]
[final, String, pattern, ,, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry, ), {, this, (, pattern, ,]
[<, String, ,, ?, extends, FormatFactory, >, registry, ), {, this, (, pattern, ,, Locale, ., getDefault, (, ), ,]
[pattern, ,, final, Locale, locale, ,, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry, ), {, super, (]
[Locale, locale, ,, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry, ), {, super, (, DUMMY_PATTERN, ), ;]
[,, final, Map, <, String, ,, ?, extends, FormatFactory, >, registry, ), {, super, (, DUMMY_PATTERN, ), ;, setLocale, (]
[<, String, ,, ?, extends, FormatFactory, >, registry, ), {, super, (, DUMMY_PATTERN, ), ;, setLocale, (, locale, ), ;]
[<, String, ,, ?, extends, FormatFactory, >, registry, ), {, super, (, DUMMY_PATTERN, ), ;, setLocale, (, locale, ), ;]
[extends, FormatFactory, >, registry, ), {, super, (, DUMMY_PATTERN, ), ;, setLocale, (, locale, ), ;, this, ., registry, =]
[>, registry, ), {, super, (, DUMMY_PATTERN, ), ;, setLocale, (, locale, ), ;, this, ., registry, =, registry, ;]
[), {, super, (, DUMMY_PATTERN, ), ;, setLocale, (, locale, ), ;, this, ., registry, =, registry, ;, applyPattern, (]
[., registry, =, registry, ;, applyPattern, (, pattern, ), ;, }, @, Override, public, String, toPattern, (, ), {, return]
[), {, return, toPattern, ;, }, @, Override, public, final, void, applyPattern, (, final, String, pattern, ), {, if, (]
[), {, return, toPattern, ;, }, @, Override, public, final, void, applyPattern, (, final, String, pattern, ), {, if, (]
[return, toPattern, ;, }, @, Override, public, final, void, applyPattern, (, final, String, pattern, ), {, if, (, registry, ==]
[}, @, Override, public, final, void, applyPattern, (, final, String, pattern, ), {, if, (, registry, ==, null, ), {]
[}, @, Override, public, final, void, applyPattern, (, final, String, pattern, ), {, if, (, registry, ==, null, ), {]
[final, void, applyPattern, (, final, String, pattern, ), {, if, (, registry, ==, null, ), {, super, ., applyPattern, (]
[(, final, String, pattern, ), {, if, (, registry, ==, null, ), {, super, ., applyPattern, (, pattern, ), ;]
[String, pattern, ), {, if, (, registry, ==, null, ), {, super, ., applyPattern, (, pattern, ), ;, toPattern, =]
[String, pattern, ), {, if, (, registry, ==, null, ), {, super, ., applyPattern, (, pattern, ), ;, toPattern, =]
[), ;, toPattern, =, super, ., toPattern, (, ), ;, return, ;, }, final, ArrayList, <, Format, >, foundFormats, =]
[<, Format, >, foundFormats, =, new, ArrayList, <, Format, >, (, ), ;, final, ArrayList, <, String, >, foundDescriptions, =]
[;, final, ArrayList, <, String, >, foundDescriptions, =, new, ArrayList, <, String, >, (, ), ;, final, StringBuilder, stripCustom, =]
[<, String, >, foundDescriptions, =, new, ArrayList, <, String, >, (, ), ;, final, StringBuilder, stripCustom, =, new, StringBuilder, (]
[<, String, >, foundDescriptions, =, new, ArrayList, <, String, >, (, ), ;, final, StringBuilder, stripCustom, =, new, StringBuilder, (]
[), ;, final, StringBuilder, stripCustom, =, new, StringBuilder, (, pattern, ., length, (, ), ), ;, final, ParsePosition, pos, =]
[StringBuilder, stripCustom, =, new, StringBuilder, (, pattern, ., length, (, ), ), ;, final, ParsePosition, pos, =, new, ParsePosition, (]
[(, ), ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, final, char, [, ], c, =]
[(, ), ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, final, char, [, ], c, =]
[ParsePosition, (, 0, ), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, int, fmtCount, =]
[;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while, (]
[;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while, (]
[;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while, (]
[=, pattern, ., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while, (, pos, ., getIndex, (, ), <]
[=, pattern, ., toCharArray, (, ), ;, int, fmtCount, =, 0, ;, while, (, pos, ., getIndex, (, ), <]
[=, 0, ;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, switch, (]
[=, 0, ;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, switch, (]
[;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, switch, (, c, []
[;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, switch, (, c, []
[pattern, ., length, (, ), ), {, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case]
[length, (, ), ), {, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :]
[), ), {, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (]
[{, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,]
[(, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,]
[[, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,]
[], ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case]
[{, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :]
[{, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :]
[:, appendQuotedString, (, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :, fmtCount, ++, ;]
[(, pattern, ,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (]
[,, pos, ,, stripCustom, ,, true, ), ;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,]
[;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, start, =]
[;, break, ;, case, START_FE, :, fmtCount, ++, ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, start, =]
[(, pattern, ,, pos, ), ;, final, int, start, =, pos, ., getIndex, (, ), ;, final, int, index, =]
[,, pos, ), ;, final, int, start, =, pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (]
[), ;, final, int, start, =, pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,]
[final, int, start, =, pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,, next, (]
[pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ;]
[pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ;]
[pos, ., getIndex, (, ), ;, final, int, index, =, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ;]
[), ;, final, int, index, =, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ;, stripCustom, ., append, (]
[=, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ;, stripCustom, ., append, (, START_FE, ), ., append, (]
[pattern, ,, next, (, pos, ), ), ;, stripCustom, ., append, (, START_FE, ), ., append, (, index, ), ;]
[next, (, pos, ), ), ;, stripCustom, ., append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs, (]
[pos, ), ), ;, stripCustom, ., append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs, (, pattern, ,]
[append, (, START_FE, ), ., append, (, index, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =]
[append, (, index, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =]
[;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (]
[;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (]
[;, seekNonWs, (, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (]
[(, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (, c, []
[(, pattern, ,, pos, ), ;, Format, format, =, null, ;, String, formatDescription, =, null, ;, if, (, c, []
[format, =, null, ;, String, formatDescription, =, null, ;, if, (, c, [, pos, ., getIndex, (, ), ], ==]
[;, String, formatDescription, =, null, ;, if, (, c, [, pos, ., getIndex, (, ), ], ==, START_FMT, ), {]
[formatDescription, =, null, ;, if, (, c, [, pos, ., getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =]
[null, ;, if, (, c, [, pos, ., getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (]
[if, (, c, [, pos, ., getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,]
[c, [, pos, ., getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (]
[getIndex, (, ), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;]
[), ], ==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =]
[==, START_FMT, ), {, formatDescription, =, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (]
[=, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (]
[=, parseFormatDescription, (, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (]
[(, pattern, ,, next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==]
[next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {]
[next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {]
[next, (, pos, ), ), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {]
[), ;, format, =, getFormat, (, formatDescription, ), ;, if, (, format, ==, null, ), {, stripCustom, ., append, (]
[(, formatDescription, ), ;, if, (, format, ==, null, ), {, stripCustom, ., append, (, START_FMT, ), ., append, (]
[(, format, ==, null, ), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }]
[(, format, ==, null, ), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }]
[), {, stripCustom, ., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (]
[., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;]
[., append, (, START_FMT, ), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;]
[), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (]
[), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (]
[), ., append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (]
[append, (, formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==]
[formatDescription, ), ;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?]
[;, }, }, foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :]
[foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;]
[foundFormats, ., add, (, format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;]
[format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (]
[format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (]
[format, ), ;, foundDescriptions, ., add, (, format, ==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (]
[(, format, ==, null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==]
[null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;]
[null, ?, null, :, formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;]
[formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (]
[formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (]
[formatDescription, ), ;, Validate, ., isTrue, (, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (]
[(, foundFormats, ., size, (, ), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==]
[), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (]
[), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (]
[), ==, fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (]
[fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c, []
[fmtCount, ), ;, Validate, ., isTrue, (, foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c, []
[foundDescriptions, ., size, (, ), ==, fmtCount, ), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=]
[), ==, fmtCount, ), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw]
[), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (]
[), ;, if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (]
[if, (, c, [, pos, ., getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +]
[getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :]
[getIndex, (, ), ], !=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :]
[!=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append, (]
[!=, END_FE, ), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append, (]
[), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append, (, c, []
[), {, throw, new, IllegalArgumentException, (, "Unreadable format element at position ", +, start, ), ;, }, default, :, stripCustom, ., append, (, c, []
[start, ), ;, }, default, :, stripCustom, ., append, (, c, [, pos, ., getIndex, (, ), ], ), ;]
[;, }, default, :, stripCustom, ., append, (, c, [, pos, ., getIndex, (, ), ], ), ;, next, (]
[., append, (, c, [, pos, ., getIndex, (, ), ], ), ;, next, (, pos, ), ;, }, }]
[., append, (, c, [, pos, ., getIndex, (, ), ], ), ;, next, (, pos, ), ;, }, }]
[[, pos, ., getIndex, (, ), ], ), ;, next, (, pos, ), ;, }, }, super, ., applyPattern, (]
[[, pos, ., getIndex, (, ), ], ), ;, next, (, pos, ), ;, }, }, super, ., applyPattern, (]
[), ;, next, (, pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;]
[next, (, pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern, =]
[pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern, =, insertFormats, (]
[pos, ), ;, }, }, super, ., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern, =, insertFormats, (]
[., applyPattern, (, stripCustom, ., toString, (, ), ), ;, toPattern, =, insertFormats, (, super, ., toPattern, (, ), ,]
[toString, (, ), ), ;, toPattern, =, insertFormats, (, super, ., toPattern, (, ), ,, foundDescriptions, ), ;, if, (]
[), ), ;, toPattern, =, insertFormats, (, super, ., toPattern, (, ), ,, foundDescriptions, ), ;, if, (, containsElements, (]
[(, ), ,, foundDescriptions, ), ;, if, (, containsElements, (, foundFormats, ), ), {, final, Format, [, ], origFormats, =]
[(, containsElements, (, foundFormats, ), ), {, final, Format, [, ], origFormats, =, getFormats, (, ), ;, int, i, =]
[origFormats, =, getFormats, (, ), ;, int, i, =, 0, ;, for, (, final, Iterator, <, Format, >, it, =]
[origFormats, =, getFormats, (, ), ;, int, i, =, 0, ;, for, (, final, Iterator, <, Format, >, it, =]
[int, i, =, 0, ;, for, (, final, Iterator, <, Format, >, it, =, foundFormats, ., iterator, (, ), ;]
[int, i, =, 0, ;, for, (, final, Iterator, <, Format, >, it, =, foundFormats, ., iterator, (, ), ;]
[(, final, Iterator, <, Format, >, it, =, foundFormats, ., iterator, (, ), ;, it, ., hasNext, (, ), ;]
[(, final, Iterator, <, Format, >, it, =, foundFormats, ., iterator, (, ), ;, it, ., hasNext, (, ), ;]
[foundFormats, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, i, ++, ), {, final, Format, f, =]
[foundFormats, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, i, ++, ), {, final, Format, f, =]
[hasNext, (, ), ;, i, ++, ), {, final, Format, f, =, it, ., next, (, ), ;, if, (]
[hasNext, (, ), ;, i, ++, ), {, final, Format, f, =, it, ., next, (, ), ;, if, (]
[), ;, i, ++, ), {, final, Format, f, =, it, ., next, (, ), ;, if, (, f, !=]
[++, ), {, final, Format, f, =, it, ., next, (, ), ;, if, (, f, !=, null, ), {]
[++, ), {, final, Format, f, =, it, ., next, (, ), ;, if, (, f, !=, null, ), {]
[{, final, Format, f, =, it, ., next, (, ), ;, if, (, f, !=, null, ), {, origFormats, []
[f, =, it, ., next, (, ), ;, if, (, f, !=, null, ), {, origFormats, [, i, ], =]
[next, (, ), ;, if, (, f, !=, null, ), {, origFormats, [, i, ], =, f, ;, }, }]
[next, (, ), ;, if, (, f, !=, null, ), {, origFormats, [, i, ], =, f, ;, }, }]
[if, (, f, !=, null, ), {, origFormats, [, i, ], =, f, ;, }, }, super, ., setFormats, (]
[), ;, }, }, @, Override, public, void, setFormat, (, final, int, formatElementIndex, ,, final, Format, newFormat, ), {, throw]
[(, ), ;, }, @, Override, public, void, setFormatByArgumentIndex, (, final, int, argumentIndex, ,, final, Format, newFormat, ), {, throw]
[new, UnsupportedOperationException, (, ), ;, }, @, Override, public, void, setFormats, (, final, Format, [, ], newFormats, ), {, throw]
[new, UnsupportedOperationException, (, ), ;, }, @, Override, public, void, setFormatsByArgumentIndex, (, final, Format, [, ], newFormats, ), {, throw]
[throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[throw, new, UnsupportedOperationException, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[UnsupportedOperationException, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==]
[}, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[final, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj, ==]
[{, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, obj, ==, null, ), {, return]
[this, ), {, return, true, ;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if, (]
[), {, return, true, ;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, !]
[), {, return, true, ;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, obj, ==, null, ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[==, null, ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, if, (]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (]
[equals, (, obj, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, getClass, (, ), ,]
[equals, (, obj, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, getClass, (, ), ,]
[}, if, (, ObjectUtils, ., notEqual, (, getClass, (, ), ,, obj, ., getClass, (, ), ), ), {, return]
[getClass, (, ), ,, obj, ., getClass, (, ), ), ), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =]
[,, obj, ., getClass, (, ), ), ), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, )]
[(, ), ), ), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (]
[(, ), ), ), {, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (]
[{, return, false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (, ObjectUtils, ., notEqual, (]
[false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (, ObjectUtils, ., notEqual, (, toPattern, ,]
[false, ;, }, final, ExtendedMessageFormat, rhs, =, (, ExtendedMessageFormat, ), obj, ;, if, (, ObjectUtils, ., notEqual, (, toPattern, ,]
[(, ExtendedMessageFormat, ), obj, ;, if, (, ObjectUtils, ., notEqual, (, toPattern, ,, rhs, ., toPattern, ), ), {, return]
[if, (, ObjectUtils, ., notEqual, (, toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if, (]
[if, (, ObjectUtils, ., notEqual, (, toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if, (]
[notEqual, (, toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (]
[toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,]
[toPattern, ,, rhs, ., toPattern, ), ), {, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,]
[{, return, false, ;, }, if, (, ObjectUtils, ., notEqual, (, registry, ,, rhs, ., registry, ), ), {, return]
[}, if, (, ObjectUtils, ., notEqual, (, registry, ,, rhs, ., registry, ), ), {, return, false, ;, }, return]
[{, return, false, ;, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =]
[{, return, false, ;, }, return, true, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =]
[true, ;, }, @, Override, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;]
[}, @, Override, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
[}, @, Override, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
[}, @, Override, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
[Override, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, HASH_SEED, *]
[int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +]
[int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +]
[{, int, result, =, super, ., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (]
[=, super, ., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;]
[., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =]
[., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =]
[., hashCode, (, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =]
[(, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *]
[;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +]
[;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +]
[*, result, +, ObjectUtils, ., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (]
[., hashCode, (, registry, ), ;, result, =, HASH_SEED, *, result, +, ObjectUtils, ., hashCode, (, toPattern, ), ;, return]
[hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, ), {, if, (]
[hashCode, (, toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, ), {, if, (]
[toPattern, ), ;, return, result, ;, }, private, Format, getFormat, (, final, String, desc, ), {, if, (, registry, !=]
[}, private, Format, getFormat, (, final, String, desc, ), {, if, (, registry, !=, null, ), {, String, name, =]
[final, String, desc, ), {, if, (, registry, !=, null, ), {, String, name, =, desc, ;, String, args, =]
[(, registry, !=, null, ), {, String, name, =, desc, ;, String, args, =, null, ;, final, int, i, =]
[(, registry, !=, null, ), {, String, name, =, desc, ;, String, args, =, null, ;, final, int, i, =]
[), {, String, name, =, desc, ;, String, args, =, null, ;, final, int, i, =, desc, ., indexOf, (]
[desc, ;, String, args, =, null, ;, final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (]
[desc, ;, String, args, =, null, ;, final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (]
[String, args, =, null, ;, final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (, i, >]
[null, ;, final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {]
[final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {, name, =]
[final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {, name, =]
[final, int, i, =, desc, ., indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {, name, =]
[desc, ., indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {, name, =, desc, ., substring, (]
[indexOf, (, START_FMT, ), ;, if, (, i, >, 0, ), {, name, =, desc, ., substring, (, 0, ,]
[i, >, 0, ), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;]
[0, ), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =]
[0, ), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =]
[0, ), {, name, =, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =]
[=, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =, desc, ., substring, (]
[=, desc, ., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =, desc, ., substring, (]
[., substring, (, 0, ,, i, ), ., trim, (, ), ;, args, =, desc, ., substring, (, i, +]
[args, =, desc, ., substring, (, i, +, 1, ), ., trim, (, ), ;, }, final, FormatFactory, factory, =]
[args, =, desc, ., substring, (, i, +, 1, ), ., trim, (, ), ;, }, final, FormatFactory, factory, =]
[substring, (, i, +, 1, ), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (]
[), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (]
[), ., trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (]
[trim, (, ), ;, }, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (, factory, !=]
[}, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (, factory, !=, null, ), {, return]
[}, final, FormatFactory, factory, =, registry, ., get, (, name, ), ;, if, (, factory, !=, null, ), {, return]
[=, registry, ., get, (, name, ), ;, if, (, factory, !=, null, ), {, return, factory, ., getFormat, (]
[., get, (, name, ), ;, if, (, factory, !=, null, ), {, return, factory, ., getFormat, (, name, ,]
[(, name, ), ;, if, (, factory, !=, null, ), {, return, factory, ., getFormat, (, name, ,, args, ,]
[null, ), {, return, factory, ., getFormat, (, name, ,, args, ,, getLocale, (, ), ), ;, }, }, return]
[null, ;, }, private, int, readArgumentIndex, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[null, ;, }, private, int, readArgumentIndex, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[(, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;]
[String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, seekNonWs, (]
[,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, seekNonWs, (, pattern, ,]
[int, start, =, pos, ., getIndex, (, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, final, StringBuilder, result, =]
[;, seekNonWs, (, pattern, ,, pos, ), ;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =]
[pos, ), ;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;]
[pos, ), ;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;]
[), ;, final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;, !]
[final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;, !, error, &&]
[final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;, !, error, &&]
[final, StringBuilder, result, =, new, StringBuilder, (, ), ;, boolean, error, =, false, ;, for, (, ;, !, error, &&]
[(, ), ;, boolean, error, =, false, ;, for, (, ;, !, error, &&, pos, ., getIndex, (, ), <]
[(, ), ;, boolean, error, =, false, ;, for, (, ;, !, error, &&, pos, ., getIndex, (, ), <]
[false, ;, for, (, ;, !, error, &&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;]
[for, (, ;, !, error, &&, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (]
[., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char, c, =]
[., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char, c, =]
[<, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char, c, =, pattern, ., charAt, (]
[<, pattern, ., length, (, ), ;, next, (, pos, ), ), {, char, c, =, pattern, ., charAt, (]
[pos, ), ), {, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (]
[pos, ), ), {, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (]
[char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, Character, ., isWhitespace, (]
[., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {]
[(, pos, ., getIndex, (, ), ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (]
[., getIndex, (, ), ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,]
[), ), ;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;]
[;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =]
[;, if, (, Character, ., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =]
[., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (]
[., isWhitespace, (, c, ), ), {, seekNonWs, (, pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (]
[pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (]
[pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (]
[pattern, ,, pos, ), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (]
[pos, ), ;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=]
[;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&]
[;, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&]
[=, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&, c, !=]
[charAt, (, pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&, c, !=, END_FE, ), {]
[pos, ., getIndex, (, ), ), ;, if, (, c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =]
[(, c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (]
[(, c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (]
[c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (]
[c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (]
[c, !=, START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (]
[START_FMT, &&, c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==]
[c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||]
[c, !=, END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||]
[END_FE, ), {, error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==]
[error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE, ), &&]
[error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE, ), &&]
[error, =, true, ;, continue, ;, }, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE, ), &&]
[}, }, if, (, (, c, ==, START_FMT, ||, c, ==, END_FE, ), &&, result, ., length, (, ), >]
[==, START_FMT, ||, c, ==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return]
[==, START_FMT, ||, c, ==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return]
[==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (]
[==, END_FE, ), &&, result, ., length, (, ), >, 0, ), {, try, {, return, Integer, ., parseInt, (]
[., parseInt, (, result, ., toString, (, ), ), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }]
[(, result, ., toString, (, ), ), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }, error, =]
[result, ., toString, (, ), ), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !]
[result, ., toString, (, ), ), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !]
[), ), ;, }, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !, Character, ., isDigit, (]
[}, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !, Character, ., isDigit, (, c, ), ;]
[}, catch, (, final, NumberFormatException, e, ), {, }, }, error, =, !, Character, ., isDigit, (, c, ), ;]
[NumberFormatException, e, ), {, }, }, error, =, !, Character, ., isDigit, (, c, ), ;, result, ., append, (]
[error, =, !, Character, ., isDigit, (, c, ), ;, result, ., append, (, c, ), ;, }, if, (]
[., isDigit, (, c, ), ;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw]
[c, ), ;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (]
[c, ), ;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (]
[c, ), ;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (]
[c, ), ;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (]
[;, result, ., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +]
[., append, (, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +]
[(, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +]
[(, c, ), ;, }, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +]
[}, if, (, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +, pattern, ., substring, (]
[(, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +, pattern, ., substring, (, start, ,]
[(, error, ), {, throw, new, IllegalArgumentException, (, "Invalid format argument index at position ", +, start, +, ": ", +, pattern, ., substring, (, start, ,]
[start, +, ": ", +, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw]
[+, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (]
[+, pattern, ., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (]
[., substring, (, start, ,, pos, ., getIndex, (, ), ), ), ;, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +]
[), ;, }, private, String, parseFormatDescription, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[), ;, }, private, String, parseFormatDescription, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =]
[(, final, String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;]
[String, pattern, ,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, seekNonWs, (]
[,, final, ParsePosition, pos, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, seekNonWs, (, pattern, ,]
[int, start, =, pos, ., getIndex, (, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, text, =]
[int, start, =, pos, ., getIndex, (, ), ;, seekNonWs, (, pattern, ,, pos, ), ;, final, int, text, =]
[seekNonWs, (, pattern, ,, pos, ), ;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth, =]
[), ;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;]
[), ;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;]
[), ;, final, int, text, =, pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;]
[pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;, pos, ., getIndex, (, ), <]
[pos, ., getIndex, (, ), ;, int, depth, =, 1, ;, for, (, ;, pos, ., getIndex, (, ), <]
[int, depth, =, 1, ;, for, (, ;, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;]
[=, 1, ;, for, (, ;, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (]
[pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, switch, (]
[pos, ., getIndex, (, ), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, switch, (]
[), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, switch, (, pattern, ., charAt, (]
[), <, pattern, ., length, (, ), ;, next, (, pos, ), ), {, switch, (, pattern, ., charAt, (]
[(, pos, ), ), {, switch, (, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ), {, case]
[), ), {, switch, (, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ), {, case, START_FE, :]
[), ), {, switch, (, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ), {, case, START_FE, :]
[., charAt, (, pos, ., getIndex, (, ), ), ), {, case, START_FE, :, depth, ++, ;, break, ;, case]
[(, pos, ., getIndex, (, ), ), ), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :]
[(, pos, ., getIndex, (, ), ), ), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :]
[), ), ), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (]
[), ), ), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (]
[), {, case, START_FE, :, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==]
[:, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return]
[:, depth, ++, ;, break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return]
[break, ;, case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return, pattern, ., substring, (]
[case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return, pattern, ., substring, (, text, ,]
[case, END_FE, :, depth, --, ;, if, (, depth, ==, 0, ), {, return, pattern, ., substring, (, text, ,]
[), {, return, pattern, ., substring, (, text, ,, pos, ., getIndex, (, ), ), ;, }, break, ;, case]
[return, pattern, ., substring, (, text, ,, pos, ., getIndex, (, ), ), ;, }, break, ;, case, QUOTE, :]
[., substring, (, text, ,, pos, ., getIndex, (, ), ), ;, }, break, ;, case, QUOTE, :, getQuotedString, (]
[(, text, ,, pos, ., getIndex, (, ), ), ;, }, break, ;, case, QUOTE, :, getQuotedString, (, pattern, ,]
[,, pos, ., getIndex, (, ), ), ;, }, break, ;, case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,]
[}, break, ;, case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,, false, ), ;, break, ;, }, }, throw]
[case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,, false, ), ;, break, ;, }, }, throw, new, IllegalArgumentException, (]
[case, QUOTE, :, getQuotedString, (, pattern, ,, pos, ,, false, ), ;, break, ;, }, }, throw, new, IllegalArgumentException, (]
[:, getQuotedString, (, pattern, ,, pos, ,, false, ), ;, break, ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated format element at position ", +]
[;, }, private, String, insertFormats, (, final, String, pattern, ,, final, ArrayList, <, String, >, customPatterns, ), {, if, (]
[}, private, String, insertFormats, (, final, String, pattern, ,, final, ArrayList, <, String, >, customPatterns, ), {, if, (, !]
[String, insertFormats, (, final, String, pattern, ,, final, ArrayList, <, String, >, customPatterns, ), {, if, (, !, containsElements, (]
[pattern, ,, final, ArrayList, <, String, >, customPatterns, ), {, if, (, !, containsElements, (, customPatterns, ), ), {, return]
[customPatterns, ), {, if, (, !, containsElements, (, customPatterns, ), ), {, return, pattern, ;, }, final, StringBuilder, sb, =]
[if, (, !, containsElements, (, customPatterns, ), ), {, return, pattern, ;, }, final, StringBuilder, sb, =, new, StringBuilder, (]
[if, (, !, containsElements, (, customPatterns, ), ), {, return, pattern, ;, }, final, StringBuilder, sb, =, new, StringBuilder, (]
[if, (, !, containsElements, (, customPatterns, ), ), {, return, pattern, ;, }, final, StringBuilder, sb, =, new, StringBuilder, (]
[), ), {, return, pattern, ;, }, final, StringBuilder, sb, =, new, StringBuilder, (, pattern, ., length, (, ), *]
[final, StringBuilder, sb, =, new, StringBuilder, (, pattern, ., length, (, ), *, 2, ), ;, final, ParsePosition, pos, =]
[=, new, StringBuilder, (, pattern, ., length, (, ), *, 2, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (]
[length, (, ), *, 2, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe, =]
[(, ), *, 2, ), ;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe, =, -]
[;, final, ParsePosition, pos, =, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;, int, depth, =]
[=, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;, int, depth, =, 0, ;, while, (]
[=, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;, int, depth, =, 0, ;, while, (]
[=, new, ParsePosition, (, 0, ), ;, int, fe, =, -, 1, ;, int, depth, =, 0, ;, while, (]
[;, int, fe, =, -, 1, ;, int, depth, =, 0, ;, while, (, pos, ., getIndex, (, ), <]
[;, int, fe, =, -, 1, ;, int, depth, =, 0, ;, while, (, pos, ., getIndex, (, ), <]
[;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, final, char, c, =]
[;, while, (, pos, ., getIndex, (, ), <, pattern, ., length, (, ), ), {, final, char, c, =]
[., getIndex, (, ), <, pattern, ., length, (, ), ), {, final, char, c, =, pattern, ., charAt, (]
[., getIndex, (, ), <, pattern, ., length, (, ), ), {, final, char, c, =, pattern, ., charAt, (]
[), ), {, final, char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, switch, (]
[char, c, =, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, switch, (, c, ), {, case]
[=, pattern, ., charAt, (, pos, ., getIndex, (, ), ), ;, switch, (, c, ), {, case, QUOTE, :]
[., charAt, (, pos, ., getIndex, (, ), ), ;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (]
[(, pos, ., getIndex, (, ), ), ;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,]
[., getIndex, (, ), ), ;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,]
[(, ), ), ;, switch, (, c, ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, sb, ,]
[c, ), {, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, sb, ,, false, ), ;, break, ;, case]
[{, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE, :]
[{, case, QUOTE, :, appendQuotedString, (, pattern, ,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE, :]
[(, pattern, ,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (]
[(, pattern, ,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (]
[,, pos, ,, sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==]
[sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {]
[sb, ,, false, ), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {]
[), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;]
[), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;]
[), ;, break, ;, case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;]
[case, START_FE, :, depth, ++, ;, if, (, depth, ==, 1, ), {, fe, ++, ;, sb, ., append, (]
[;, if, (, depth, ==, 1, ), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (]
[(, depth, ==, 1, ), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (]
[==, 1, ), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,]
[), {, fe, ++, ;, sb, ., append, (, START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (]
[START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ), ;, final, String, customPattern, =]
[START_FE, ), ., append, (, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ), ;, final, String, customPattern, =]
[(, readArgumentIndex, (, pattern, ,, next, (, pos, ), ), ), ;, final, String, customPattern, =, customPatterns, ., get, (]
[next, (, pos, ), ), ), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (]
[next, (, pos, ), ), ), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (]
[pos, ), ), ), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=]
[), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null, ), {]
[), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null, ), {]
[), ;, final, String, customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null, ), {]
[customPattern, =, customPatterns, ., get, (, fe, ), ;, if, (, customPattern, !=, null, ), {, sb, ., append, (]
[(, fe, ), ;, if, (, customPattern, !=, null, ), {, sb, ., append, (, START_FMT, ), ., append, (]
[null, ), {, sb, ., append, (, START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case]
[{, sb, ., append, (, START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE, :]
[{, sb, ., append, (, START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE, :]
[START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :]
[START_FMT, ), ., append, (, customPattern, ), ;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :]
[(, customPattern, ), ;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :, sb, ., append, (]
[;, }, }, break, ;, case, END_FE, :, depth, --, ;, default, :, sb, ., append, (, c, ), ;]
[}, break, ;, case, END_FE, :, depth, --, ;, default, :, sb, ., append, (, c, ), ;, next, (]
[depth, --, ;, default, :, sb, ., append, (, c, ), ;, next, (, pos, ), ;, }, }, return]
[depth, --, ;, default, :, sb, ., append, (, c, ), ;, next, (, pos, ), ;, }, }, return]
[(, ), ;, }, private, void, seekNonWs, (, final, String, pattern, ,, final, ParsePosition, pos, ), {, int, len, =]
[final, String, pattern, ,, final, ParsePosition, pos, ), {, int, len, =, 0, ;, final, char, [, ], buffer, =]
[final, String, pattern, ,, final, ParsePosition, pos, ), {, int, len, =, 0, ;, final, char, [, ], buffer, =]
[{, int, len, =, 0, ;, final, char, [, ], buffer, =, pattern, ., toCharArray, (, ), ;, do, {]
[len, =, 0, ;, final, char, [, ], buffer, =, pattern, ., toCharArray, (, ), ;, do, {, len, =]
[len, =, 0, ;, final, char, [, ], buffer, =, pattern, ., toCharArray, (, ), ;, do, {, len, =]
[len, =, 0, ;, final, char, [, ], buffer, =, pattern, ., toCharArray, (, ), ;, do, {, len, =]
[buffer, =, pattern, ., toCharArray, (, ), ;, do, {, len, =, StrMatcher, ., splitMatcher, (, ), ., isMatch, (]
[pattern, ., toCharArray, (, ), ;, do, {, len, =, StrMatcher, ., splitMatcher, (, ), ., isMatch, (, buffer, ,]
[pattern, ., toCharArray, (, ), ;, do, {, len, =, StrMatcher, ., splitMatcher, (, ), ., isMatch, (, buffer, ,]
[{, len, =, StrMatcher, ., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;]
[{, len, =, StrMatcher, ., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;]
[., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;, pos, ., setIndex, (]
[., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;, pos, ., setIndex, (]
[., splitMatcher, (, ), ., isMatch, (, buffer, ,, pos, ., getIndex, (, ), ), ;, pos, ., setIndex, (]
[(, buffer, ,, pos, ., getIndex, (, ), ), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +]
[(, ), ), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (]
[(, ), ), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (]
[(, ), ), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (]
[), ;, pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (, len, >]
[pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0, &&]
[pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0, &&]
[pos, ., setIndex, (, pos, ., getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0, &&]
[getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0, &&, pos, ., getIndex, (, ), <]
[getIndex, (, ), +, len, ), ;, }, while, (, len, >, 0, &&, pos, ., getIndex, (, ), <]
[(, ), <, pattern, ., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {]
[(, ), <, pattern, ., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {]
[., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (]
[., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (]
[., length, (, ), ), ;, }, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (]
[}, private, ParsePosition, next, (, final, ParsePosition, pos, ), {, pos, ., setIndex, (, pos, ., getIndex, (, ), +]
[(, final, ParsePosition, pos, ), {, pos, ., setIndex, (, pos, ., getIndex, (, ), +, 1, ), ;, return]
[String, pattern, ,, final, ParsePosition, pos, ,, final, StringBuilder, appendTo, ,, final, boolean, escapingOn, ), {, final, int, start, =]
[String, pattern, ,, final, ParsePosition, pos, ,, final, StringBuilder, appendTo, ,, final, boolean, escapingOn, ), {, final, int, start, =]
[boolean, escapingOn, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, final, char, [, ], c, =]
[boolean, escapingOn, ), {, final, int, start, =, pos, ., getIndex, (, ), ;, final, char, [, ], c, =]
[pos, ., getIndex, (, ), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (]
[pos, ., getIndex, (, ), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (]
[getIndex, (, ), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&]
[getIndex, (, ), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&]
[getIndex, (, ), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&]
[), ;, final, char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&, c, []
[char, [, ], c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&, c, [, start, ], ==]
[c, =, pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {]
[pattern, ., toCharArray, (, ), ;, if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (]
[), ;, if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return]
[), ;, if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return]
[), ;, if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return]
[if, (, escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==]
[escapingOn, &&, c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?]
[c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :]
[c, [, start, ], ==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :]
[==, QUOTE, ), {, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (]
[), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =]
[null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i, =]
[null, :, appendTo, ., append, (, QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i, =]
[QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex, (, ), ;]
[QUOTE, ), ;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex, (, ), ;]
[;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i, <]
[;, }, int, lastHold, =, start, ;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i, <]
[;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;]
[;, for, (, int, i, =, pos, ., getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;]
[pos, ., getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (]
[pos, ., getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (]
[getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (, escapingOn, &&]
[getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (, escapingOn, &&]
[getIndex, (, ), ;, i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (, escapingOn, &&]
[i, <, pattern, ., length, (, ), ;, i, ++, ), {, if, (, escapingOn, &&, pattern, ., substring, (]
[(, ), ;, i, ++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (]
[++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {]
[++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {]
[++, ), {, if, (, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {]
[(, escapingOn, &&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (]
[&&, pattern, ., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,]
[., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,, lastHold, ,]
[., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,, lastHold, ,]
[., substring, (, i, ), ., startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,, lastHold, ,]
[startsWith, (, ESCAPED_QUOTE, ), ), {, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -]
[{, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (]
[append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;]
[append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;]
[lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex, (]
[lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex, (]
[pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +]
[pos, ., getIndex, (, ), -, lastHold, ), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +]
[), ., append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;]
[append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =]
[append, (, QUOTE, ), ;, pos, ., setIndex, (, i, +, ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =]
[ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (]
[ESCAPED_QUOTE, ., length, (, ), ), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (]
[length, (, ), ), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (, c, []
[length, (, ), ), ;, lastHold, =, pos, ., getIndex, (, ), ;, continue, ;, }, switch, (, c, []
[getIndex, (, ), ;, continue, ;, }, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case]
[), ;, continue, ;, }, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :]
[continue, ;, }, switch, (, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, next, (]
[(, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return]
[(, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return]
[(, c, [, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return]
[[, pos, ., getIndex, (, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==]
[., getIndex, (, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?]
[(, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :]
[(, ), ], ), {, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :]
[{, case, QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (]
[QUOTE, :, next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,]
[next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold, ,]
[next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold, ,]
[next, (, pos, ), ;, return, appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold, ,]
[appendTo, ==, null, ?, null, :, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -]
[:, appendTo, ., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ;, default, :]
[., append, (, c, ,, lastHold, ,, pos, ., getIndex, (, ), -, lastHold, ), ;, default, :, next, (]
[,, pos, ., getIndex, (, ), -, lastHold, ), ;, default, :, next, (, pos, ), ;, }, }, throw]
[getIndex, (, ), -, lastHold, ), ;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (]
[getIndex, (, ), -, lastHold, ), ;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (]
[), -, lastHold, ), ;, default, :, next, (, pos, ), ;, }, }, throw, new, IllegalArgumentException, (, "Unterminated quoted string at position ", +]
[), ;, }, private, void, getQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {]
[}, private, void, getQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {, appendQuotedString, (]
[void, getQuotedString, (, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {, appendQuotedString, (, pattern, ,]
[(, final, String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {, appendQuotedString, (, pattern, ,, pos, ,]
[String, pattern, ,, final, ParsePosition, pos, ,, final, boolean, escapingOn, ), {, appendQuotedString, (, pattern, ,, pos, ,, null, ,]
[null, ,, escapingOn, ), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (]
[null, ,, escapingOn, ), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (]
[null, ,, escapingOn, ), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (]
[escapingOn, ), ;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (, coll, ==]
[;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (, coll, ==, null, ||]
[;, }, private, boolean, containsElements, (, final, Collection, <, ?, >, coll, ), {, if, (, coll, ==, null, ||]
[<, ?, >, coll, ), {, if, (, coll, ==, null, ||, coll, ., isEmpty, (, ), ), {, return]
[==, null, ||, coll, ., isEmpty, (, ), ), {, return, false, ;, }, for, (, final, Object, name, :]
[isEmpty, (, ), ), {, return, false, ;, }, for, (, final, Object, name, :, coll, ), {, if, (]
[isEmpty, (, ), ), {, return, false, ;, }, for, (, final, Object, name, :, coll, ), {, if, (]
[), ), {, return, false, ;, }, for, (, final, Object, name, :, coll, ), {, if, (, name, !=]
[false, ;, }, for, (, final, Object, name, :, coll, ), {, if, (, name, !=, null, ), {, return]
[final, Object, name, :, coll, ), {, if, (, name, !=, null, ), {, return, true, ;, }, }, return]
