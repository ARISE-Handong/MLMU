[;, private, MathArrays, (, ), {, }, public, interface, Function, {, double, evaluate, (, double, [, ], array, ), ;]
[;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, newArr, []
[], ;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, ), {, newArr]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, arr, ., length, ;, i, ++, )]
[;, i, <, arr, ., length, ;, i, ++, ), {, newArr, [, i, ], =, arr, [, i, ]]
[;, i, ++, ), {, newArr, [, i, ], =, arr, [, i, ], *, val, ;, }, return, newArr]
[<, arr, ., length, ;, i, ++, ), {, newArr, [, i, ], =, arr, [, i, ], *, val]
[;, i, ++, ), {, newArr, [, i, ], =, arr, [, i, ], *, val, ;, }, return, newArr]
[., length, ;, i, ++, ), {, newArr, [, i, ], =, arr, [, i, ], *, val, ;, }]
[), {, newArr, [, i, ], =, arr, [, i, ], *, val, ;, }, return, newArr, ;, }, public]
[++, ), {, newArr, [, i, ], =, arr, [, i, ], *, val, ;, }, return, newArr, ;, }]
[=, arr, [, i, ], *, val, ;, }, return, newArr, ;, }, public, static, void, scaleInPlace, (, double, val]
[[, i, ], =, arr, [, i, ], *, val, ;, }, return, newArr, ;, }, public, static, void, scaleInPlace]
[], =, arr, [, i, ], *, val, ;, }, return, newArr, ;, }, public, static, void, scaleInPlace, (, double]
[;, }, return, newArr, ;, }, public, static, void, scaleInPlace, (, double, val, ,, final, double, [, ], arr, )]
[*, val, ;, }, return, newArr, ;, }, public, static, void, scaleInPlace, (, double, val, ,, final, double, [, ]]
[[, i, ], *, val, ;, }, return, newArr, ;, }, public, static, void, scaleInPlace, (, double, val, ,, final]
[], *, val, ;, }, return, newArr, ;, }, public, static, void, scaleInPlace, (, double, val, ,, final, double, []
[;, }, return, newArr, ;, }, public, static, void, scaleInPlace, (, double, val, ,, final, double, [, ], arr, )]
[;, }, public, static, void, scaleInPlace, (, double, val, ,, final, double, [, ], arr, ), {, for, (, int]
[;, i, <, arr, ., length, ;, i, ++, ), {, arr, [, i, ], *=, val, ;, }, }]
[;, i, ++, ), {, arr, [, i, ], *=, val, ;, }, }, public, static, double, [, ], ebeAdd]
[<, arr, ., length, ;, i, ++, ), {, arr, [, i, ], *=, val, ;, }, }, public, static]
[;, i, ++, ), {, arr, [, i, ], *=, val, ;, }, }, public, static, double, [, ], ebeAdd]
[., length, ;, i, ++, ), {, arr, [, i, ], *=, val, ;, }, }, public, static, double, []
[), {, arr, [, i, ], *=, val, ;, }, }, public, static, double, [, ], ebeAdd, (, double, []
[++, ), {, arr, [, i, ], *=, val, ;, }, }, public, static, double, [, ], ebeAdd, (, double]
[*=, val, ;, }, }, public, static, double, [, ], ebeAdd, (, double, [, ], a, ,, double, [, ]]
[[, i, ], *=, val, ;, }, }, public, static, double, [, ], ebeAdd, (, double, [, ], a, ,]
[], *=, val, ;, }, }, public, static, double, [, ], ebeAdd, (, double, [, ], a, ,, double, []
[;, }, }, public, static, double, [, ], ebeAdd, (, double, [, ], a, ,, double, [, ], b, )]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }]
[., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double]
[;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0]
[,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for]
[., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, )]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++]
[;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], +=, b, [, i, ]]
[;, i, ++, ), {, result, [, i, ], +=, b, [, i, ], ;, }, return, result, ;, }]
[<, a, ., length, ;, i, ++, ), {, result, [, i, ], +=, b, [, i, ], ;, }]
[;, i, ++, ), {, result, [, i, ], +=, b, [, i, ], ;, }, return, result, ;, }]
[., length, ;, i, ++, ), {, result, [, i, ], +=, b, [, i, ], ;, }, return, result]
[), {, result, [, i, ], +=, b, [, i, ], ;, }, return, result, ;, }, public, static, double]
[++, ), {, result, [, i, ], +=, b, [, i, ], ;, }, return, result, ;, }, public, static]
[+=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeSubtract, (, double, []
[[, i, ], +=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeSubtract]
[], +=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeSubtract, (, double]
[;, }, return, result, ;, }, public, static, double, [, ], ebeSubtract, (, double, [, ], a, ,, double, []
[[, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeSubtract, (, double, [, ], a]
[], ;, }, return, result, ;, }, public, static, double, [, ], ebeSubtract, (, double, [, ], a, ,, double]
[;, }, public, static, double, [, ], ebeSubtract, (, double, [, ], a, ,, double, [, ], b, ), throws]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }]
[., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double]
[;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0]
[,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for]
[., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, )]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++]
[;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], -=, b, [, i, ]]
[;, i, ++, ), {, result, [, i, ], -=, b, [, i, ], ;, }, return, result, ;, }]
[<, a, ., length, ;, i, ++, ), {, result, [, i, ], -=, b, [, i, ], ;, }]
[;, i, ++, ), {, result, [, i, ], -=, b, [, i, ], ;, }, return, result, ;, }]
[., length, ;, i, ++, ), {, result, [, i, ], -=, b, [, i, ], ;, }, return, result]
[), {, result, [, i, ], -=, b, [, i, ], ;, }, return, result, ;, }, public, static, double]
[++, ), {, result, [, i, ], -=, b, [, i, ], ;, }, return, result, ;, }, public, static]
[-=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeMultiply, (, double, []
[[, i, ], -=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeMultiply]
[], -=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeMultiply, (, double]
[;, }, return, result, ;, }, public, static, double, [, ], ebeMultiply, (, double, [, ], a, ,, double, []
[[, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeMultiply, (, double, [, ], a]
[], ;, }, return, result, ;, }, public, static, double, [, ], ebeMultiply, (, double, [, ], a, ,, double]
[;, }, public, static, double, [, ], ebeMultiply, (, double, [, ], a, ,, double, [, ], b, ), throws]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }]
[., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double]
[;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0]
[,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for]
[., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, )]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++]
[;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], *=, b, [, i, ]]
[;, i, ++, ), {, result, [, i, ], *=, b, [, i, ], ;, }, return, result, ;, }]
[<, a, ., length, ;, i, ++, ), {, result, [, i, ], *=, b, [, i, ], ;, }]
[;, i, ++, ), {, result, [, i, ], *=, b, [, i, ], ;, }, return, result, ;, }]
[., length, ;, i, ++, ), {, result, [, i, ], *=, b, [, i, ], ;, }, return, result]
[), {, result, [, i, ], *=, b, [, i, ], ;, }, return, result, ;, }, public, static, double]
[++, ), {, result, [, i, ], *=, b, [, i, ], ;, }, return, result, ;, }, public, static]
[*=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeDivide, (, double, []
[[, i, ], *=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeDivide]
[], *=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeDivide, (, double]
[;, }, return, result, ;, }, public, static, double, [, ], ebeDivide, (, double, [, ], a, ,, double, []
[[, i, ], ;, }, return, result, ;, }, public, static, double, [, ], ebeDivide, (, double, [, ], a]
[], ;, }, return, result, ;, }, public, static, double, [, ], ebeDivide, (, double, [, ], a, ,, double]
[;, }, public, static, double, [, ], ebeDivide, (, double, [, ], a, ,, double, [, ], b, ), throws]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }]
[., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, )]
[), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double, [, ]]
[., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, final, double]
[;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =, 0]
[,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for]
[., length, ,, b, ., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, )]
[), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int, i, =]
[., length, ), ;, }, final, double, [, ], result, =, a, ., clone, (, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++, ), {, result, []
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, i, ++]
[;, i, <, a, ., length, ;, i, ++, ), {, result, [, i, ], /=, b, [, i, ]]
[;, i, ++, ), {, result, [, i, ], /=, b, [, i, ], ;, }, return, result, ;, }]
[<, a, ., length, ;, i, ++, ), {, result, [, i, ], /=, b, [, i, ], ;, }]
[;, i, ++, ), {, result, [, i, ], /=, b, [, i, ], ;, }, return, result, ;, }]
[., length, ;, i, ++, ), {, result, [, i, ], /=, b, [, i, ], ;, }, return, result]
[), {, result, [, i, ], /=, b, [, i, ], ;, }, return, result, ;, }, public, static, double]
[++, ), {, result, [, i, ], /=, b, [, i, ], ;, }, return, result, ;, }, public, static]
[/=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, distance1, (, double, [, ], p1]
[[, i, ], /=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, distance1, (, double]
[], /=, b, [, i, ], ;, }, return, result, ;, }, public, static, double, distance1, (, double, [, ]]
[;, }, return, result, ;, }, public, static, double, distance1, (, double, [, ], p1, ,, double, [, ], p2]
[[, i, ], ;, }, return, result, ;, }, public, static, double, distance1, (, double, [, ], p1, ,, double]
[], ;, }, return, result, ;, }, public, static, double, distance1, (, double, [, ], p1, ,, double, [, ]]
[;, }, public, static, double, distance1, (, double, [, ], p1, ,, double, [, ], p2, ), {, double, sum]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=]
[;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i]
[;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ]]
[<, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -]
[;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ]]
[., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, []
[), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }]
[++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;]
[+=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }, return, sum, ;]
[;, }, return, sum, ;, }, public, static, int, distance1, (, int, [, ], p1, ,, int, [, ], p2]
[., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }, return, sum, ;, }, public]
[), ;, }, return, sum, ;, }, public, static, int, distance1, (, int, [, ], p1, ,, int, [, ]]
[-, p2, [, i, ], ), ;, }, return, sum, ;, }, public, static, int, distance1, (, int, [, ]]
[[, i, ], -, p2, [, i, ], ), ;, }, return, sum, ;, }, public, static, int, distance1, (]
[], -, p2, [, i, ], ), ;, }, return, sum, ;, }, public, static, int, distance1, (, int, []
[), ;, }, return, sum, ;, }, public, static, int, distance1, (, int, [, ], p1, ,, int, [, ]]
[[, i, ], ), ;, }, return, sum, ;, }, public, static, int, distance1, (, int, [, ], p1, ,]
[], ), ;, }, return, sum, ;, }, public, static, int, distance1, (, int, [, ], p1, ,, int, []
[;, }, public, static, int, distance1, (, int, [, ], p1, ,, int, [, ], p2, ), {, int, sum]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=]
[;, i, <, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i]
[;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ]]
[<, p1, ., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -]
[;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ]]
[., length, ;, i, ++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, []
[), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }]
[++, ), {, sum, +=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;]
[+=, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }, return, sum, ;]
[;, }, return, sum, ;, }, public, static, double, distance, (, double, [, ], p1, ,, double, [, ], p2]
[., abs, (, p1, [, i, ], -, p2, [, i, ], ), ;, }, return, sum, ;, }, public]
[), ;, }, return, sum, ;, }, public, static, double, distance, (, double, [, ], p1, ,, double, [, ]]
[-, p2, [, i, ], ), ;, }, return, sum, ;, }, public, static, double, distance, (, double, [, ]]
[[, i, ], -, p2, [, i, ], ), ;, }, return, sum, ;, }, public, static, double, distance, (]
[], -, p2, [, i, ], ), ;, }, return, sum, ;, }, public, static, double, distance, (, double, []
[), ;, }, return, sum, ;, }, public, static, double, distance, (, double, [, ], p1, ,, double, [, ]]
[[, i, ], ), ;, }, return, sum, ;, }, public, static, double, distance, (, double, [, ], p1, ,]
[], ), ;, }, return, sum, ;, }, public, static, double, distance, (, double, [, ], p1, ,, double, []
[;, }, public, static, double, distance, (, double, [, ], p1, ,, double, [, ], p2, ), {, double, sum]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double]
[;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -]
[;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum]
[<, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, []
[;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum]
[., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ]]
[), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *]
[++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp]
[;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double]
[-, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, )]
[[, i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt]
[], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum]
[;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double]
[[, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }]
[], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static]
[+=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distance, (]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distance, (, int, [, ], p1]
[*, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distance, (, int, []
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distance, (, int, [, ], p1]
[;, }, public, static, double, distance, (, int, [, ], p1, ,, int, [, ], p2, ), {, double, sum]
[., sqrt, (, sum, ), ;, }, public, static, double, distance, (, int, [, ], p1, ,, int, [, ]]
[), ;, }, public, static, double, distance, (, int, [, ], p1, ,, int, [, ], p2, ), {, double]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, final, double]
[;, i, <, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -]
[;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum]
[<, p1, ., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, []
[;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum]
[., length, ;, i, ++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ]]
[), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp, *]
[++, ), {, final, double, dp, =, p1, [, i, ], -, p2, [, i, ], ;, sum, +=, dp]
[;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double]
[-, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, )]
[[, i, ], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt]
[], -, p2, [, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum]
[;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double]
[[, i, ], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }]
[], ;, sum, +=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static]
[+=, dp, *, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distanceInf, (]
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distanceInf, (, double, [, ], p1]
[*, dp, ;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distanceInf, (, double, []
[;, }, return, FastMath, ., sqrt, (, sum, ), ;, }, public, static, double, distanceInf, (, double, [, ], p1]
[;, }, public, static, double, distanceInf, (, double, [, ], p1, ,, double, [, ], p2, ), {, double, max]
[., sqrt, (, sum, ), ;, }, public, static, double, distanceInf, (, double, [, ], p1, ,, double, [, ]]
[), ;, }, public, static, double, distanceInf, (, double, [, ], p1, ,, double, [, ], p2, ), {, double]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =]
[;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath]
[;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i]
[<, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs]
[;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i]
[., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1]
[), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2]
[++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -]
[=, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ]]
[;, }, return, max, ;, }, public, static, int, distanceInf, (, int, [, ], p1, ,, int, [, ], p2]
[., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), )]
[,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ), ;, }, return, max]
[), ;, }, return, max, ;, }, public, static, int, distanceInf, (, int, [, ], p1, ,, int, [, ]]
[., abs, (, p1, [, i, ], -, p2, [, i, ], ), ), ;, }, return, max, ;, }]
[), ), ;, }, return, max, ;, }, public, static, int, distanceInf, (, int, [, ], p1, ,, int, []
[-, p2, [, i, ], ), ), ;, }, return, max, ;, }, public, static, int, distanceInf, (, int, []
[[, i, ], -, p2, [, i, ], ), ), ;, }, return, max, ;, }, public, static, int, distanceInf]
[], -, p2, [, i, ], ), ), ;, }, return, max, ;, }, public, static, int, distanceInf, (, int]
[), ), ;, }, return, max, ;, }, public, static, int, distanceInf, (, int, [, ], p1, ,, int, []
[[, i, ], ), ), ;, }, return, max, ;, }, public, static, int, distanceInf, (, int, [, ], p1]
[], ), ), ;, }, return, max, ;, }, public, static, int, distanceInf, (, int, [, ], p1, ,, int]
[;, }, public, static, int, distanceInf, (, int, [, ], p1, ,, int, [, ], p2, ), {, int, max]
[;, for, (, int, i, =, 0, ;, i, <, p1, ., length, ;, i, ++, ), {, max, =]
[;, i, <, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath]
[;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i]
[<, p1, ., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs]
[;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i]
[., length, ;, i, ++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1]
[), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2]
[++, ), {, max, =, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -]
[=, FastMath, ., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ]]
[;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING, ,, DECREASING, }, public, static, <, T, extends]
[., max, (, max, ,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), )]
[,, FastMath, ., abs, (, p1, [, i, ], -, p2, [, i, ], ), ), ;, }, return, max]
[), ;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING, ,, DECREASING, }, public, static, <, T]
[., abs, (, p1, [, i, ], -, p2, [, i, ], ), ), ;, }, return, max, ;, }]
[), ), ;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING, ,, DECREASING, }, public, static, <]
[-, p2, [, i, ], ), ), ;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING, ,]
[[, i, ], -, p2, [, i, ], ), ), ;, }, return, max, ;, }, public, static, enum, OrderDirection]
[], -, p2, [, i, ], ), ), ;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING]
[), ), ;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING, ,, DECREASING, }, public, static, <]
[[, i, ], ), ), ;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING, ,, DECREASING, }]
[], ), ), ;, }, return, max, ;, }, public, static, enum, OrderDirection, {, INCREASING, ,, DECREASING, }, public, static]
[;, }, public, static, enum, OrderDirection, {, INCREASING, ,, DECREASING, }, public, static, <, T, extends, Comparable, <, ?, super]
[;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;, i, <, max, ;]
[[, 0, ], ;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;, i]
[], ;, final, int, max, =, val, ., length, ;, for, (, int, i, =, 1, ;, i, <, max]
[;, for, (, int, i, =, 1, ;, i, <, max, ;, i, ++, ), {, final, int, comp, ;]
[., length, ;, for, (, int, i, =, 1, ;, i, <, max, ;, i, ++, ), {, final, int]
[;, i, <, max, ;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING]
[;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =, previous]
[<, max, ;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp]
[;, i, ++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =, previous]
[), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =, previous, ., compareTo, (]
[++, ), {, final, int, comp, ;, switch, (, dir, ), {, case, INCREASING, :, comp, =, previous, ., compareTo]
[), {, case, INCREASING, :, comp, =, previous, ., compareTo, (, val, [, i, ], ), ;, if, (, strict]
[:, comp, =, previous, ., compareTo, (, val, [, i, ], ), ;, if, (, strict, ), {, if, (]
[=, previous, ., compareTo, (, val, [, i, ], ), ;, if, (, strict, ), {, if, (, comp, >=]
[;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {]
[., compareTo, (, val, [, i, ], ), ;, if, (, strict, ), {, if, (, comp, >=, 0, )]
[), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else]
[[, i, ], ), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;]
[], ), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }]
[), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >]
[), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return, false, ;, }]
[>=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return, false]
[), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return, false, ;, }]
[;, }, }, else, {, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, case]
[), {, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =, val, [, i, ], ., compareTo]
[>, 0, ), {, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =, val, [, i, ]]
[), {, return, false, ;, }, }, break, ;, case, DECREASING, :, comp, =, val, [, i, ], ., compareTo]
[;, }, }, break, ;, case, DECREASING, :, comp, =, val, [, i, ], ., compareTo, (, previous, ), ;]
[:, comp, =, val, [, i, ], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (]
[=, val, [, i, ], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (, comp, >=]
[;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {]
[., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return, false]
[[, i, ], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (, comp, >=, 0, )]
[], ., compareTo, (, previous, ), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return]
[), ;, if, (, strict, ), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else]
[), {, if, (, comp, >=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >]
[), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return, false, ;, }]
[>=, 0, ), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return, false]
[), {, return, false, ;, }, }, else, {, if, (, comp, >, 0, ), {, return, false, ;, }]
[;, }, }, else, {, if, (, comp, >, 0, ), {, return, false, ;, }, }, break, ;, default]
[), {, return, false, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[>, 0, ), {, return, false, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }]
[), {, return, false, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =, val, [, i, ]]
[;, }, previous, =, val, [, i, ], ;, }, return, true, ;, }, public, static, boolean, isMonotonic, (, double]
[=, val, [, i, ], ;, }, return, true, ;, }, public, static, boolean, isMonotonic, (, double, [, ], val]
[;, }, return, true, ;, }, public, static, boolean, isMonotonic, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean]
[[, i, ], ;, }, return, true, ;, }, public, static, boolean, isMonotonic, (, double, [, ], val, ,, OrderDirection]
[], ;, }, return, true, ;, }, public, static, boolean, isMonotonic, (, double, [, ], val, ,, OrderDirection, dir, ,]
[;, }, public, static, boolean, isMonotonic, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), {, return]
[;, }, public, static, boolean, checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ,, boolean, abort]
[,, dir, ,, strict, ,, false, ), ;, }, public, static, boolean, checkOrder, (, double, [, ], val, ,, OrderDirection]
[,, strict, ,, false, ), ;, }, public, static, boolean, checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,]
[,, false, ), ;, }, public, static, boolean, checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict]
[), ;, }, public, static, boolean, checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ,, boolean]
[;, final, int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1, ;]
[[, 0, ], ;, final, int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (, index]
[], ;, final, int, max, =, val, ., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1]
[;, int, index, ;, ITEM, :, for, (, index, =, 1, ;, index, <, max, ;, index, ++, ), {]
[., length, ;, int, index, ;, ITEM, :, for, (, index, =, 1, ;, index, <, max, ;, index, ++]
[=, 1, ;, index, <, max, ;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if]
[;, index, <, max, ;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict]
[;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (]
[<, max, ;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {]
[;, index, ++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (]
[), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (, val, [, index]
[++, ), {, switch, (, dir, ), {, case, INCREASING, :, if, (, strict, ), {, if, (, val, []
[), {, case, INCREASING, :, if, (, strict, ), {, if, (, val, [, index, ], <=, previous, ), {]
[:, if, (, strict, ), {, if, (, val, [, index, ], <=, previous, ), {, break, ITEM, ;, }]
[), {, if, (, val, [, index, ], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if]
[), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], <, previous, ), {, break]
[<=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], <, previous, )]
[[, index, ], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ]]
[], <=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], <, previous]
[), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], <, previous, ), {, break]
[), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if, (, val]
[<, previous, ), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if]
[[, index, ], <, previous, ), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict]
[], <, previous, ), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {]
[), {, break, ITEM, ;, }, }, break, ;, case, DECREASING, :, if, (, strict, ), {, if, (, val]
[:, if, (, strict, ), {, if, (, val, [, index, ], >=, previous, ), {, break, ITEM, ;, }]
[), {, if, (, val, [, index, ], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if]
[), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], >, previous, ), {, break]
[>=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], >, previous, )]
[[, index, ], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ]]
[], >=, previous, ), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], >, previous]
[), {, break, ITEM, ;, }, }, else, {, if, (, val, [, index, ], >, previous, ), {, break]
[), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[>, previous, ), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }]
[[, index, ], >, previous, ), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (]
[], >, previous, ), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;]
[), {, break, ITEM, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, previous, =]
[;, }, previous, =, val, [, index, ], ;, }, if, (, index, ==, max, ), {, return, true, ;]
[=, val, [, index, ], ;, }, if, (, index, ==, max, ), {, return, true, ;, }, if, (]
[;, }, if, (, index, ==, max, ), {, return, true, ;, }, if, (, abort, ), {, throw, new]
[[, index, ], ;, }, if, (, index, ==, max, ), {, return, true, ;, }, if, (, abort, )]
[], ;, }, if, (, index, ==, max, ), {, return, true, ;, }, if, (, abort, ), {, throw]
[), {, return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,]
[==, max, ), {, return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index]
[), {, return, true, ;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,]
[;, }, if, (, abort, ), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,, previous, ,, index, ,]
[), {, throw, new, NonMonotonicSequenceException, (, val, [, index, ], ,, previous, ,, index, ,, dir, ,, strict, ), ;]
[;, }, else, {, return, false, ;, }, }, public, static, void, checkOrder, (, double, [, ], val, ,, OrderDirection]
[,, previous, ,, index, ,, dir, ,, strict, ), ;, }, else, {, return, false, ;, }, }, public, static]
[[, index, ], ,, previous, ,, index, ,, dir, ,, strict, ), ;, }, else, {, return, false, ;, }]
[], ,, previous, ,, index, ,, dir, ,, strict, ), ;, }, else, {, return, false, ;, }, }, public]
[,, index, ,, dir, ,, strict, ), ;, }, else, {, return, false, ;, }, }, public, static, void, checkOrder]
[,, dir, ,, strict, ), ;, }, else, {, return, false, ;, }, }, public, static, void, checkOrder, (, double]
[,, strict, ), ;, }, else, {, return, false, ;, }, }, public, static, void, checkOrder, (, double, [, ]]
[), ;, }, else, {, return, false, ;, }, }, public, static, void, checkOrder, (, double, [, ], val, ,]
[;, }, }, public, static, void, checkOrder, (, double, [, ], val, ,, OrderDirection, dir, ,, boolean, strict, ), throws]
[;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,, OrderDirection]
[,, dir, ,, strict, ,, true, ), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws]
[,, strict, ,, true, ), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {]
[,, true, ), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {, checkOrder, (]
[), ;, }, public, static, void, checkOrder, (, double, [, ], val, ), throws, NonMonotonicSequenceException, {, checkOrder, (, val, ,]
[;, }, public, static, void, checkRectangular, (, final, long, [, ], [, ], in, ), throws, NullArgumentException, ,, DimensionMismatchException, {]
[,, OrderDirection, ., INCREASING, ,, true, ), ;, }, public, static, void, checkRectangular, (, final, long, [, ], [, ]]
[,, true, ), ;, }, public, static, void, checkRectangular, (, final, long, [, ], [, ], in, ), throws, NullArgumentException]
[., INCREASING, ,, true, ), ;, }, public, static, void, checkRectangular, (, final, long, [, ], [, ], in, )]
[), ;, }, public, static, void, checkRectangular, (, final, long, [, ], [, ], in, ), throws, NullArgumentException, ,, DimensionMismatchException]
[;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;, i, ++, ), {, if, (]
[., checkNotNull, (, in, ), ;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;, i]
[), ;, for, (, int, i, =, 1, ;, i, <, in, ., length, ;, i, ++, ), {, if]
[;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], ., length, !=]
[;, i, ++, ), {, if, (, in, [, i, ], ., length, !=, in, [, 0, ], ., length]
[<, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], ., length, !=, in, []
[;, i, ++, ), {, if, (, in, [, i, ], ., length, !=, in, [, 0, ], ., length]
[., length, ;, i, ++, ), {, if, (, in, [, i, ], ., length, !=, in, [, 0, ]]
[), {, if, (, in, [, i, ], ., length, !=, in, [, 0, ], ., length, ), {, throw]
[++, ), {, if, (, in, [, i, ], ., length, !=, in, [, 0, ], ., length, ), {]
[), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,, in, [, 0]
[!=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i]
[., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in]
[[, i, ], ., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, .]
[], ., length, !=, in, [, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,]
[), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,, in, [, 0]
[., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,, in]
[[, 0, ], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], .]
[], ., length, ), {, throw, new, DimensionMismatchException, (, LocalizedFormats, ., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,]
[;, }, }, }, public, static, void, checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException, {, for, (]
[,, in, [, i, ], ., length, ,, in, [, 0, ], ., length, ), ;, }, }, }, public]
[., DIFFERENT_ROWS_LENGTHS, ,, in, [, i, ], ., length, ,, in, [, 0, ], ., length, ), ;, }, }]
[,, in, [, 0, ], ., length, ), ;, }, }, }, public, static, void, checkPositive, (, final, double, []
[., length, ,, in, [, 0, ], ., length, ), ;, }, }, }, public, static, void, checkPositive, (, final]
[[, i, ], ., length, ,, in, [, 0, ], ., length, ), ;, }, }, }, public, static, void]
[], ., length, ,, in, [, 0, ], ., length, ), ;, }, }, }, public, static, void, checkPositive, (]
[), ;, }, }, }, public, static, void, checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException, {, for]
[., length, ), ;, }, }, }, public, static, void, checkPositive, (, final, double, [, ], in, ), throws, NotStrictlyPositiveException]
[[, 0, ], ., length, ), ;, }, }, }, public, static, void, checkPositive, (, final, double, [, ], in]
[], ., length, ), ;, }, }, }, public, static, void, checkPositive, (, final, double, [, ], in, ), throws]
[;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <=, 0, )]
[;, i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in]
[<, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw]
[;, i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in]
[., length, ;, i, ++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in, [, i, ]]
[++, ), {, if, (, in, [, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in, [, i]
[), {, throw, new, NotStrictlyPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static, void, checkNonNegative, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static, void]
[[, i, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in, [, i, ], ), ;, }, }, }]
[], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static]
[), {, throw, new, NotStrictlyPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static, void, checkNonNegative, (]
[;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {, for, (]
[), ;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {, for]
[[, i, ], ), ;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], in, ), throws]
[], ), ;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], in, ), throws, NotPositiveException, {]
[;, i, <, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <, 0, )]
[;, i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException, (, in]
[<, in, ., length, ;, i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw]
[;, i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException, (, in]
[., length, ;, i, ++, ), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException]
[), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ]]
[++, ), {, if, (, in, [, i, ], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i]
[), {, throw, new, NotPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static, void, checkNonNegative, (]
[<, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static, void]
[[, i, ], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], ), ;, }, }, }]
[], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static]
[), {, throw, new, NotPositiveException, (, in, [, i, ], ), ;, }, }, }, public, static, void, checkNonNegative, (]
[;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], [, ], in, ), throws, NotPositiveException, {]
[), ;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], [, ], in, ), throws, NotPositiveException]
[[, i, ], ), ;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], [, ], in]
[], ), ;, }, }, }, public, static, void, checkNonNegative, (, final, long, [, ], [, ], in, ), throws]
[;, i, <, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, in, [, i, ], ., length]
[<, in, ., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, in, []
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, in, [, i, ], ., length]
[., length, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, in, [, i, ]]
[), {, for, (, int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;, j, ++]
[++, ), {, for, (, int, j, =, 0, ;, j, <, in, [, i, ], ., length, ;, j]
[;, j, <, in, [, i, ], ., length, ;, j, ++, ), {, if, (, in, [, i, ]]
[;, j, ++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new]
[<, in, [, i, ], ., length, ;, j, ++, ), {, if, (, in, [, i, ], [, j]
[;, j, ++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new]
[., length, ;, j, ++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {]
[[, i, ], ., length, ;, j, ++, ), {, if, (, in, [, i, ], [, j, ], <]
[], ., length, ;, j, ++, ), {, if, (, in, [, i, ], [, j, ], <, 0, )]
[), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (, in]
[++, ), {, if, (, in, [, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (]
[), {, throw, new, NotPositiveException, (, in, [, i, ], [, j, ], ), ;, }, }, }, }, public]
[<, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], [, j, ], ), ;, }, }, }]
[[, j, ], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], [, j, ], ), ;]
[[, i, ], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], [, j]
[], [, j, ], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], [, j, ], )]
[], <, 0, ), {, throw, new, NotPositiveException, (, in, [, i, ], [, j, ], ), ;, }, }]
[), {, throw, new, NotPositiveException, (, in, [, i, ], [, j, ], ), ;, }, }, }, }, public]
[;, }, }, }, }, public, static, double, safeNorm, (, double, [, ], v, ), {, double, rdwarf, =, 3.834e-20]
[), ;, }, }, }, }, public, static, double, safeNorm, (, double, [, ], v, ), {, double, rdwarf, =]
[[, j, ], ), ;, }, }, }, }, public, static, double, safeNorm, (, double, [, ], v, ), {]
[[, i, ], [, j, ], ), ;, }, }, }, }, public, static, double, safeNorm, (, double, [, ]]
[], [, j, ], ), ;, }, }, }, }, public, static, double, safeNorm, (, double, [, ], v, )]
[], ), ;, }, }, }, }, public, static, double, safeNorm, (, double, [, ], v, ), {, double, rdwarf]
[;, double, rgiant, =, 1.304e+19, ;, double, s1, =, 0, ;, double, s2, =, 0, ;, double, s3, =, 0]
[;, double, s1, =, 0, ;, double, s2, =, 0, ;, double, s3, =, 0, ;, double, x1max, =, 0]
[;, double, s2, =, 0, ;, double, s3, =, 0, ;, double, x1max, =, 0, ;, double, x3max, =, 0]
[;, double, s3, =, 0, ;, double, x1max, =, 0, ;, double, x3max, =, 0, ;, double, floatn, =, v]
[;, double, x1max, =, 0, ;, double, x3max, =, 0, ;, double, floatn, =, v, ., length, ;, double, agiant]
[;, double, x3max, =, 0, ;, double, floatn, =, v, ., length, ;, double, agiant, =, rgiant, /, floatn, ;]
[;, double, floatn, =, v, ., length, ;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =]
[;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;, i, <, v, ., length]
[., length, ;, double, agiant, =, rgiant, /, floatn, ;, for, (, int, i, =, 0, ;, i, <, v]
[;, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, i, ++, ), {, double, xabs]
[/, floatn, ;, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, v, ., length, ;, i, ++, ), {, double, xabs]
[;, i, <, v, ., length, ;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, []
[;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (]
[<, v, ., length, ;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ]]
[;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (]
[., length, ;, i, ++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;]
[), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (, xabs, <, rdwarf]
[++, ), {, double, xabs, =, Math, ., abs, (, v, [, i, ], ), ;, if, (, xabs, <]
[;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if]
[., abs, (, v, [, i, ], ), ;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {]
[), ;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {]
[[, i, ], ), ;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >]
[], ), ;, if, (, xabs, <, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, )]
[), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max]
[||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {]
[<, rdwarf, ||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max]
[||, xabs, >, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {]
[), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max]
[>, agiant, ), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r]
[), {, if, (, xabs, >, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max]
[), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +]
[>, rdwarf, ), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =]
[), {, if, (, xabs, >, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +]
[), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +, s1, *, r, *, r, ;, x1max]
[>, x1max, ), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +, s1, *, r, *, r]
[), {, double, r, =, x1max, /, xabs, ;, s1, =, 1, +, s1, *, r, *, r, ;, x1max]
[;, s1, =, 1, +, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r]
[/, xabs, ;, s1, =, 1, +, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {]
[;, s1, =, 1, +, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r]
[=, 1, +, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs]
[;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r, *, r]
[+, s1, *, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max]
[;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r, *, r]
[*, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r]
[*, r, *, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1]
[*, r, ;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r]
[;, x1max, =, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r, *, r]
[=, xabs, ;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r, *, r, ;, }]
[;, }, else, {, double, r, =, xabs, /, x1max, ;, s1, +=, r, *, r, ;, }, }, else]
[;, s1, +=, r, *, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r]
[/, x1max, ;, s1, +=, r, *, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {]
[;, s1, +=, r, *, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r]
[+=, r, *, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max]
[;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3]
[*, r, ;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs]
[;, }, }, else, {, if, (, xabs, >, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3]
[), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +, s3, *, r, *, r, ;, x3max]
[>, x3max, ), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +, s3, *, r, *, r]
[), {, double, r, =, x3max, /, xabs, ;, s3, =, 1, +, s3, *, r, *, r, ;, x3max]
[;, s3, =, 1, +, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (]
[/, xabs, ;, s3, =, 1, +, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {]
[;, s3, =, 1, +, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (]
[=, 1, +, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=]
[;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /]
[+, s3, *, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, )]
[;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /]
[*, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =]
[*, r, *, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double]
[*, r, ;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =]
[;, x3max, =, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /]
[=, xabs, ;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /, x3max, ;]
[;, }, else, {, if, (, xabs, !=, 0, ), {, double, r, =, xabs, /, x3max, ;, s3, +=]
[), {, double, r, =, xabs, /, x3max, ;, s3, +=, r, *, r, ;, }, }, }, }, else]
[!=, 0, ), {, double, r, =, xabs, /, x3max, ;, s3, +=, r, *, r, ;, }, }, }]
[), {, double, r, =, xabs, /, x3max, ;, s3, +=, r, *, r, ;, }, }, }, }, else]
[;, s3, +=, r, *, r, ;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }]
[/, x3max, ;, s3, +=, r, *, r, ;, }, }, }, }, else, {, s2, +=, xabs, *, xabs]
[;, s3, +=, r, *, r, ;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }]
[+=, r, *, r, ;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }, }, double]
[;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (]
[*, r, ;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;]
[;, }, }, }, }, else, {, s2, +=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (]
[+=, xabs, *, xabs, ;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max]
[;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt]
[*, xabs, ;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math]
[;, }, }, double, norm, ;, if, (, s1, !=, 0, ), {, norm, =, x1max, *, Math, ., sqrt]
[), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, )]
[!=, 0, ), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /]
[), {, norm, =, x1max, *, Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, )]
[=, x1max, *, Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, ), ;, }, else]
[;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (, s3]
[*, Math, ., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, ), ;, }, else, {, if]
[;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (, s3]
[., sqrt, (, s1, +, (, s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (, s2]
[), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (]
[+, (, s2, /, x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {]
[), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (]
[/, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math, .]
[), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math]
[/, x1max, ), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max]
[), /, x1max, ), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math]
[), ;, }, else, {, if, (, s2, ==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (]
[), {, norm, =, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=]
[==, 0, ), {, norm, =, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (]
[), {, norm, =, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=]
[=, x3max, *, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {]
[;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (]
[*, Math, ., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =]
[;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (]
[., sqrt, (, s3, ), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, .]
[), ;, }, else, {, if, (, s2, >=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *]
[), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (]
[>=, x3max, ), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, )]
[), {, norm, =, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (]
[=, Math, ., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (, x3max, *, s3]
[;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +, (]
[., sqrt, (, s2, *, (, 1, +, (, x3max, /, s2, ), *, (, x3max, *, s3, ), )]
[), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +]
[*, (, 1, +, (, x3max, /, s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else]
[), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +]
[), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, )]
[+, (, x3max, /, s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =]
[), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, )]
[*, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *]
[), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max]
[/, s2, ), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt]
[), *, (, x3max, *, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max]
[), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, )]
[), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max]
[*, s3, ), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2]
[), ), ), ;, }, else, {, norm, =, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max]
[=, Math, ., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +, (, x3max, *, s3, ), )]
[;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, double, []
[., sqrt, (, x3max, *, (, (, s2, /, x3max, ), +, (, x3max, *, s3, ), ), ), ;]
[), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, double]
[*, (, (, s2, /, x3max, ), +, (, x3max, *, s3, ), ), ), ;, }, }, }, return]
[), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, double]
[), ), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,]
[+, (, x3max, *, s3, ), ), ), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace]
[), +, (, x3max, *, s3, ), ), ), ;, }, }, }, return, norm, ;, }, public, static, void]
[/, x3max, ), +, (, x3max, *, s3, ), ), ), ;, }, }, }, return, norm, ;, }, public]
[), +, (, x3max, *, s3, ), ), ), ;, }, }, }, return, norm, ;, }, public, static, void]
[), ), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,]
[), ), ), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, [, ], x]
[*, s3, ), ), ), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, []
[), ), ), ;, }, }, }, return, norm, ;, }, public, static, void, sortInPlace, (, double, [, ], x]
[;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, double, [, ], ..., yList, ), throws, DimensionMismatchException]
[;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, final, OrderDirection, dir, ,, double, [, ], ...]
[,, OrderDirection, ., INCREASING, ,, yList, ), ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, final]
[,, yList, ), ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, final, OrderDirection, dir, ,, double]
[., INCREASING, ,, yList, ), ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, final, OrderDirection, dir]
[), ;, }, public, static, void, sortInPlace, (, double, [, ], x, ,, final, OrderDirection, dir, ,, double, [, ]]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, yListLen, =, yList, ., length, ;, final, int, len]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, final, int, yListLen, =, yList, ., length, ;, final]
[), {, throw, new, NullArgumentException, (, ), ;, }, final, int, yListLen, =, yList, ., length, ;, final, int, len]
[;, }, final, int, yListLen, =, yList, ., length, ;, final, int, len, =, x, ., length, ;, for, (]
[;, final, int, len, =, x, ., length, ;, for, (, int, j, =, 0, ;, j, <, yListLen, ;]
[., length, ;, final, int, len, =, x, ., length, ;, for, (, int, j, =, 0, ;, j, <]
[;, for, (, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ]]
[., length, ;, for, (, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double]
[;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], y, =, yList, [, j, ], ;]
[;, j, ++, ), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (, y, ==]
[<, yListLen, ;, j, ++, ), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (]
[;, j, ++, ), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (, y, ==]
[), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (, y, ==, null, ), {]
[++, ), {, final, double, [, ], y, =, yList, [, j, ], ;, if, (, y, ==, null, )]
[;, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length]
[[, j, ], ;, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (]
[], ;, if, (, y, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, .]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, !=, len, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, !=, len, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, y, ., length, !=, len, ), {, throw, new]
[;, }, if, (, y, ., length, !=, len, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, len]
[), {, throw, new, DimensionMismatchException, (, y, ., length, ,, len, ), ;, }, }, final, List, <, Pair, <]
[!=, len, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, len, ), ;, }, }, final, List, <]
[., length, !=, len, ), {, throw, new, DimensionMismatchException, (, y, ., length, ,, len, ), ;, }, }, final]
[), {, throw, new, DimensionMismatchException, (, y, ., length, ,, len, ), ;, }, }, final, List, <, Pair, <]
[;, }, }, final, List, <, Pair, <, Double, ,, Integer, >, >, list, =, new, ArrayList, <, Pair, <]
[,, len, ), ;, }, }, final, List, <, Pair, <, Double, ,, Integer, >, >, list, =, new, ArrayList]
[., length, ,, len, ), ;, }, }, final, List, <, Pair, <, Double, ,, Integer, >, >, list, =]
[), ;, }, }, final, List, <, Pair, <, Double, ,, Integer, >, >, list, =, new, ArrayList, <, Pair]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, list, ., add, (]
[), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, list, ., add]
[;, i, <, len, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >]
[;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x, [, i]
[<, len, ;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x]
[;, i, ++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x, [, i]
[), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x, [, i, ], ,, i]
[++, ), {, list, ., add, (, new, Pair, <, Double, ,, Integer, >, (, x, [, i, ], ,]
[;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==, MathArrays, ., OrderDirection, .]
[., add, (, new, Pair, <, Double, ,, Integer, >, (, x, [, i, ], ,, i, ), ), ;]
[), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==, MathArrays, ., OrderDirection]
[,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==]
[[, i, ], ,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp]
[], ,, i, ), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir]
[), ), ;, }, final, Comparator, <, Pair, <, Double, ,, Integer, >, >, comp, =, dir, ==, MathArrays, .]
[;, Collections, ., sort, (, list, ,, comp, ), ;, final, int, [, ], indices, =, new, int, [, len]
[?, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (, Pair, <]
[==, MathArrays, ., OrderDirection, ., INCREASING, ?, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {]
[?, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (, Pair, <]
[., INCREASING, ?, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (]
[., OrderDirection, ., INCREASING, ?, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int]
[:, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare, (, Pair, <]
[;, }, }, :, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int, compare]
[., compareTo, (, o2, ., getKey, (, ), ), ;, }, }, :, new, Comparator, <, Pair, <, Double, ,]
[., getKey, (, ), ., compareTo, (, o2, ., getKey, (, ), ), ;, }, }, :, new, Comparator, <]
[), ;, }, }, :, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (, ), {, public, int]
[., getKey, (, ), ), ;, }, }, :, new, Comparator, <, Pair, <, Double, ,, Integer, >, >, (]
[;, Collections, ., sort, (, list, ,, comp, ), ;, final, int, [, ], indices, =, new, int, [, len]
[;, }, }, ;, Collections, ., sort, (, list, ,, comp, ), ;, final, int, [, ], indices, =, new]
[., compareTo, (, o1, ., getKey, (, ), ), ;, }, }, ;, Collections, ., sort, (, list, ,, comp]
[., getKey, (, ), ., compareTo, (, o1, ., getKey, (, ), ), ;, }, }, ;, Collections, ., sort]
[), ;, }, }, ;, Collections, ., sort, (, list, ,, comp, ), ;, final, int, [, ], indices, =]
[., getKey, (, ), ), ;, }, }, ;, Collections, ., sort, (, list, ,, comp, ), ;, final, int]
[;, final, int, [, ], indices, =, new, int, [, len, ], ;, for, (, int, i, =, 0, ;]
[., sort, (, list, ,, comp, ), ;, final, int, [, ], indices, =, new, int, [, len, ], ;]
[,, comp, ), ;, final, int, [, ], indices, =, new, int, [, len, ], ;, for, (, int, i]
[), ;, final, int, [, ], indices, =, new, int, [, len, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, final, Pair, <, Double]
[], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, final, Pair, <]
[;, i, <, len, ;, i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, .]
[;, i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, )]
[<, len, ;, i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (]
[;, i, ++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, )]
[), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, ), ;, x, []
[++, ), {, final, Pair, <, Double, ,, Integer, >, e, =, list, ., get, (, i, ), ;, x]
[;, x, [, i, ], =, e, ., getKey, (, ), ;, indices, [, i, ], =, e, ., getValue]
[., get, (, i, ), ;, x, [, i, ], =, e, ., getKey, (, ), ;, indices, [, i]
[), ;, x, [, i, ], =, e, ., getKey, (, ), ;, indices, [, i, ], =, e, .]
[=, e, ., getKey, (, ), ;, indices, [, i, ], =, e, ., getValue, (, ), ;, }, for]
[[, i, ], =, e, ., getKey, (, ), ;, indices, [, i, ], =, e, ., getValue, (, )]
[], =, e, ., getKey, (, ), ;, indices, [, i, ], =, e, ., getValue, (, ), ;, }]
[;, indices, [, i, ], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;]
[., getKey, (, ), ;, indices, [, i, ], =, e, ., getValue, (, ), ;, }, for, (, int]
[=, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;, j, <, yListLen, ;, j]
[[, i, ], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[], =, e, ., getValue, (, ), ;, }, for, (, int, j, =, 0, ;, j, <, yListLen, ;]
[;, }, for, (, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, ), {, final, double, []
[., getValue, (, ), ;, }, for, (, int, j, =, 0, ;, j, <, yListLen, ;, j, ++, )]
[;, j, <, yListLen, ;, j, ++, ), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;]
[;, j, ++, ), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;, final, double, [, ]]
[<, yListLen, ;, j, ++, ), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;, final, double]
[;, j, ++, ), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;, final, double, [, ]]
[), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;, final, double, [, ], yOrig, =, yInPlace]
[++, ), {, final, double, [, ], yInPlace, =, yList, [, j, ], ;, final, double, [, ], yOrig, =]
[;, final, double, [, ], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =, 0, ;]
[[, j, ], ;, final, double, [, ], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i]
[], ;, final, double, [, ], yOrig, =, yInPlace, ., clone, (, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, yInPlace, [, i, ]]
[., clone, (, ), ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[;, i, <, len, ;, i, ++, ), {, yInPlace, [, i, ], =, yOrig, [, indices, [, i, ]]
[;, i, ++, ), {, yInPlace, [, i, ], =, yOrig, [, indices, [, i, ], ], ;, }, }]
[<, len, ;, i, ++, ), {, yInPlace, [, i, ], =, yOrig, [, indices, [, i, ], ], ;]
[;, i, ++, ), {, yInPlace, [, i, ], =, yOrig, [, indices, [, i, ], ], ;, }, }]
[), {, yInPlace, [, i, ], =, yOrig, [, indices, [, i, ], ], ;, }, }, }, public, static]
[++, ), {, yInPlace, [, i, ], =, yOrig, [, indices, [, i, ], ], ;, }, }, }, public]
[=, yOrig, [, indices, [, i, ], ], ;, }, }, }, public, static, int, [, ], copyOf, (, int]
[[, i, ], =, yOrig, [, indices, [, i, ], ], ;, }, }, }, public, static, int, [, ]]
[], =, yOrig, [, indices, [, i, ], ], ;, }, }, }, public, static, int, [, ], copyOf, (]
[;, }, }, }, public, static, int, [, ], copyOf, (, int, [, ], source, ), {, return, copyOf, (]
[[, indices, [, i, ], ], ;, }, }, }, public, static, int, [, ], copyOf, (, int, [, ]]
[], ;, }, }, }, public, static, int, [, ], copyOf, (, int, [, ], source, ), {, return, copyOf]
[[, i, ], ], ;, }, }, }, public, static, int, [, ], copyOf, (, int, [, ], source, )]
[], ], ;, }, }, }, public, static, int, [, ], copyOf, (, int, [, ], source, ), {, return]
[;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {, return, copyOf, (, source, ,]
[,, source, ., length, ), ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {]
[), ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {, return, copyOf, (, source]
[., length, ), ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ), {, return, copyOf]
[;, }, public, static, int, [, ], copyOf, (, int, [, ], source, ,, int, len, ), {, final, int]
[,, source, ., length, ), ;, }, public, static, int, [, ], copyOf, (, int, [, ], source, ,, int]
[), ;, }, public, static, int, [, ], copyOf, (, int, [, ], source, ,, int, len, ), {, final]
[., length, ), ;, }, public, static, int, [, ], copyOf, (, int, [, ], source, ,, int, len, )]
[;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source]
[], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,]
[;, return, output, ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ,, int, len, )]
[., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length]
[,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return]
[,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return, output, ;]
[,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return, output, ;, }, public]
[,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return, output, ;, }, public, static, double]
[), ;, return, output, ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ,, int, len]
[., min, (, len, ,, source, ., length, ), ), ;, return, output, ;, }, public, static, double, [, ]]
[,, source, ., length, ), ), ;, return, output, ;, }, public, static, double, [, ], copyOf, (, double, []
[), ), ;, return, output, ;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ,, int]
[., length, ), ), ;, return, output, ;, }, public, static, double, [, ], copyOf, (, double, [, ], source]
[;, }, public, static, double, [, ], copyOf, (, double, [, ], source, ,, int, len, ), {, final, double]
[;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source]
[], ;, System, ., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,]
[;, return, output, ;, }, public, static, double, linearCombination, (, final, double, [, ], a, ,, final, double, [, ]]
[., arraycopy, (, source, ,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length]
[,, 0, ,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return]
[,, output, ,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return, output, ;]
[,, 0, ,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return, output, ;, }, public]
[,, FastMath, ., min, (, len, ,, source, ., length, ), ), ;, return, output, ;, }, public, static, double]
[), ;, return, output, ;, }, public, static, double, linearCombination, (, final, double, [, ], a, ,, final, double, []
[., min, (, len, ,, source, ., length, ), ), ;, return, output, ;, }, public, static, double, linearCombination, (]
[,, source, ., length, ), ), ;, return, output, ;, }, public, static, double, linearCombination, (, final, double, [, ]]
[), ), ;, return, output, ;, }, public, static, double, linearCombination, (, final, double, [, ], a, ,, final, double]
[., length, ), ), ;, return, output, ;, }, public, static, double, linearCombination, (, final, double, [, ], a, ,]
[;, }, public, static, double, linearCombination, (, final, double, [, ], a, ,, final, double, [, ], b, ), throws]
[;, if, (, len, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, )]
[., length, ;, if, (, len, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, len, ,, b, .]
[), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==, 1, )]
[!=, b, ., length, ), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==, 1, )]
[., length, ), {, throw, new, DimensionMismatchException, (, len, ,, b, ., length, ), ;, }, if, (, len, ==]
[;, }, if, (, len, ==, 1, ), {, return, a, [, 0, ], *, b, [, 0, ], ;]
[,, b, ., length, ), ;, }, if, (, len, ==, 1, ), {, return, a, [, 0, ], *]
[), ;, }, if, (, len, ==, 1, ), {, return, a, [, 0, ], *, b, [, 0, ]]
[., length, ), ;, }, if, (, len, ==, 1, ), {, return, a, [, 0, ], *, b, []
[), {, return, a, [, 0, ], *, b, [, 0, ], ;, }, final, double, [, ], prodHigh, =]
[==, 1, ), {, return, a, [, 0, ], *, b, [, 0, ], ;, }, final, double, [, ]]
[), {, return, a, [, 0, ], *, b, [, 0, ], ;, }, final, double, [, ], prodHigh, =]
[;, }, final, double, [, ], prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =, 0, ;, for]
[*, b, [, 0, ], ;, }, final, double, [, ], prodHigh, =, new, double, [, len, ], ;, double]
[[, 0, ], *, b, [, 0, ], ;, }, final, double, [, ], prodHigh, =, new, double, [, len]
[], *, b, [, 0, ], ;, }, final, double, [, ], prodHigh, =, new, double, [, len, ], ;]
[;, }, final, double, [, ], prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =, 0, ;, for]
[[, 0, ], ;, }, final, double, [, ], prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =]
[], ;, }, final, double, [, ], prodHigh, =, new, double, [, len, ], ;, double, prodLowSum, =, 0, ;]
[;, double, prodLowSum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, )]
[], ;, double, prodLowSum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, final, double, ai, =]
[;, i, <, len, ;, i, ++, ), {, final, double, ai, =, a, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *]
[<, len, ;, i, ++, ), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =]
[;, i, ++, ), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *]
[), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final]
[++, ), {, final, double, ai, =, a, [, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;]
[;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (, ca, -, ai, )]
[[, i, ], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (, ca]
[], ;, final, double, ca, =, SPLIT_FACTOR, *, ai, ;, final, double, aHigh, =, ca, -, (, ca, -, ai]
[;, final, double, aHigh, =, ca, -, (, ca, -, ai, ), ;, final, double, aLow, =, ai, -, aHigh]
[*, ai, ;, final, double, aHigh, =, ca, -, (, ca, -, ai, ), ;, final, double, aLow, =, ai]
[;, final, double, aHigh, =, ca, -, (, ca, -, ai, ), ;, final, double, aLow, =, ai, -, aHigh]
[;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final, double]
[-, (, ca, -, ai, ), ;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b]
[;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final, double]
[), ;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final]
[-, ai, ), ;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ]]
[), ;, final, double, aLow, =, ai, -, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final]
[;, final, double, bi, =, b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double]
[-, aHigh, ;, final, double, bi, =, b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;]
[;, final, double, bi, =, b, [, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double]
[;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (, cb, -, bi, )]
[[, i, ], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (, cb]
[], ;, final, double, cb, =, SPLIT_FACTOR, *, bi, ;, final, double, bHigh, =, cb, -, (, cb, -, bi]
[;, final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh]
[*, bi, ;, final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =, bi]
[;, final, double, bHigh, =, cb, -, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh]
[;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double]
[-, (, cb, -, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =]
[;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double]
[), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final]
[-, bi, ), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi]
[), ;, final, double, bLow, =, bi, -, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final]
[;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (]
[-, bHigh, ;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -]
[;, prodHigh, [, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (]
[=, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ]]
[[, i, ], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh]
[], =, ai, *, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i]
[;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh]
[*, bi, ;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh]
[;, final, double, prodLow, =, aLow, *, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh]
[;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, []
[-, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh]
[*, bLow, -, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, )]
[-, (, (, (, prodHigh, [, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh]
[;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, []
[), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh]
[-, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;]
[), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ]]
[-, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =]
[), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur]
[-, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;]
[[, i, ], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum]
[], -, aHigh, *, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow]
[), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur]
[*, bHigh, ), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final]
[), -, aLow, *, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur]
[), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ]]
[*, bHigh, ), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, []
[), -, aHigh, *, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ]]
[), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh]
[*, bLow, ), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext]
[), ;, prodLowSum, +=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh]
[+=, prodLow, ;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, [, 1, ]]
[;, }, final, double, prodHighCur, =, prodHigh, [, 0, ], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double]
[;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev]
[[, 0, ], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double]
[], ;, double, prodHighNext, =, prodHigh, [, 1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =]
[;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext]
[[, 1, ], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum]
[], ;, double, sHighPrev, =, prodHighCur, +, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (]
[;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), )]
[+, prodHighNext, ;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime]
[;, double, sPrime, =, sHighPrev, -, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), )]
[;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime, ), ;]
[-, prodHighNext, ;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime]
[;, double, sLowSum, =, (, prodHighNext, -, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime, ), ;]
[;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;]
[+, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =]
[), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i]
[-, (, sHighPrev, -, sPrime, ), ), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -]
[), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i]
[), ), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int]
[-, sPrime, ), ), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for]
[), ), +, (, prodHighCur, -, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int]
[;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;]
[), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne]
[-, sPrime, ), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i]
[), ;, final, int, lenMinusOne, =, len, -, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne]
[;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, []
[-, 1, ;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =]
[;, for, (, int, i, =, 1, ;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, []
[;, i, <, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double]
[;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +]
[<, lenMinusOne, ;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =]
[;, i, ++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +]
[), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime]
[++, ), {, prodHighNext, =, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;]
[=, prodHigh, [, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -]
[;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -]
[[, i, +, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;]
[], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext]
[+, 1, ], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=]
[], ;, final, double, sHighCur, =, sHighPrev, +, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext]
[;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (]
[+, prodHighNext, ;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), )]
[;, sPrime, =, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (]
[=, sHighCur, -, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -]
[;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev]
[-, prodHighNext, ;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, )]
[;, sLowSum, +=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev]
[+=, (, prodHighNext, -, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur]
[;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (, Double]
[+, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +]
[), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum]
[-, (, sHighCur, -, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double]
[), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum]
[), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (]
[-, sPrime, ), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev]
[), ), +, (, sHighPrev, -, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (]
[;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (, Double]
[), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (]
[-, sPrime, ), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;]
[), ;, sHighPrev, =, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (]
[=, sHighCur, ;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (, Double, ., isNaN]
[;, }, double, result, =, sHighPrev, +, (, prodLowSum, +, sLowSum, ), ;, if, (, Double, ., isNaN, (, result]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i, =]
[+, (, prodLowSum, +, sLowSum, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, 0]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i, =]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i]
[+, sLowSum, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i]
[), {, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, )]
[., isNaN, (, result, ), ), {, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ), {, result, =, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, ++, i, ), {, result, +=, a, []
[;, i, <, len, ;, ++, i, ), {, result, +=, a, [, i, ], *, b, [, i, ]]
[;, ++, i, ), {, result, +=, a, [, i, ], *, b, [, i, ], ;, }, }, return]
[<, len, ;, ++, i, ), {, result, +=, a, [, i, ], *, b, [, i, ], ;, }]
[;, ++, i, ), {, result, +=, a, [, i, ], *, b, [, i, ], ;, }, }, return]
[), {, result, +=, a, [, i, ], *, b, [, i, ], ;, }, }, return, result, ;, }]
[), {, result, +=, a, [, i, ], *, b, [, i, ], ;, }, }, return, result, ;, }]
[+=, a, [, i, ], *, b, [, i, ], ;, }, }, return, result, ;, }, public, static, double]
[;, }, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,]
[*, b, [, i, ], ;, }, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1]
[[, i, ], *, b, [, i, ], ;, }, }, return, result, ;, }, public, static, double, linearCombination, (]
[], *, b, [, i, ], ;, }, }, return, result, ;, }, public, static, double, linearCombination, (, final, double]
[;, }, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,]
[[, i, ], ;, }, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final]
[], ;, }, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1]
[;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final, double, a2, ,, final]
[;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High]
[*, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1]
[;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High]
[;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High]
[-, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR]
[;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High]
[), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double]
[-, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;]
[), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double]
[;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, )]
[-, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -]
[;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, )]
[;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High]
[*, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1]
[;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High]
[;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low]
[-, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1]
[;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low]
[), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double]
[-, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;]
[), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low]
[*, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, )]
[;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low]
[;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, )]
[-, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[*, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *]
[-, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, )]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[-, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[-, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[*, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[*, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[*, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High]
[*, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2]
[;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High]
[;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High]
[-, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR]
[;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High]
[), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double]
[-, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;]
[), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double]
[;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, )]
[-, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -]
[;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, )]
[;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High]
[*, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2]
[;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High]
[;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low]
[-, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2]
[;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low]
[), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double]
[-, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;]
[), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low]
[*, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, )]
[;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low]
[;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low]
[-, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[*, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *]
[-, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[-, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -]
[), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[-, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[*, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[*, b2High, ), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime]
[), -, a2High, *, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[*, b2Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime]
[+, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High]
[;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime]
[;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[-, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -]
[;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (]
[+, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;]
[), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, )]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (]
[), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, )]
[), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low]
[-, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low]
[), ), +, (, prod1High, -, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low]
[;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (]
[), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN]
[-, s12Prime, ), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double]
[), ;, double, result, =, s12High, +, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2]
[+, (, prod1Low, +, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[+, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[+, prod2Low, +, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, s12Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[), {, result, =, a1, *, b1, +, a2, *, b2, ;, }, return, result, ;, }, public, static, double]
[., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, ;, }, return, result]
[), ), {, result, =, a1, *, b1, +, a2, *, b2, ;, }, return, result, ;, }, public, static]
[=, a1, *, b1, +, a2, *, b2, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final]
[;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final]
[+, a2, *, b2, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final]
[*, b1, +, a2, *, b2, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1]
[+, a2, *, b2, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final]
[;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final]
[*, b2, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1]
[;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final]
[;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final, double, a2, ,, final]
[;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High]
[*, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1]
[;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High]
[;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High]
[-, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR]
[;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High]
[), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double]
[-, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;]
[), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double]
[;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, )]
[-, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -]
[;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, )]
[;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High]
[*, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1]
[;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High]
[;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low]
[-, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1]
[;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low]
[), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double]
[-, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;]
[), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low]
[*, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, )]
[;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low]
[;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, )]
[-, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[*, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *]
[-, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, )]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[-, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[-, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[*, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[*, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[*, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High]
[*, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2]
[;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High]
[;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High]
[-, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR]
[;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High]
[), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double]
[-, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;]
[), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double]
[;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, )]
[-, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -]
[;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, )]
[;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High]
[*, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2]
[;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High]
[;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low]
[-, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2]
[;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low]
[), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double]
[-, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;]
[), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low]
[*, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, )]
[;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low]
[;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, )]
[-, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[*, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *]
[-, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, )]
[), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3]
[-, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -]
[), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3]
[-, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;]
[*, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;]
[), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3]
[*, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High]
[), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3]
[), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3]
[*, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3]
[), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3]
[;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High]
[*, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3]
[;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High]
[;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High]
[-, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR]
[;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High]
[), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double]
[-, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;]
[), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double]
[;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, )]
[-, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -]
[;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, )]
[;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High]
[*, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3]
[;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High]
[;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low]
[-, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3]
[;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low]
[), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double]
[-, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;]
[), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[-, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low]
[*, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, )]
[;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low]
[;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low]
[-, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[*, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *]
[-, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[-, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -]
[), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[-, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final]
[), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[-, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =]
[), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[*, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +]
[), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[*, b3High, ), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime]
[), -, a3High, *, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[*, b3Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime]
[+, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High]
[;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime]
[;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[-, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -]
[;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low]
[+, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime]
[-, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final]
[), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime]
[;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low]
[), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double]
[-, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;]
[), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double]
[;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime]
[+, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High]
[;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime]
[;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, )]
[-, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -]
[;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, )]
[;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (]
[+, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low]
[), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (]
[), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +]
[), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low]
[-, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low]
[), ), +, (, s12High, -, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low]
[;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (]
[), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if]
[-, s123Prime, ), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, )]
[), ;, double, result, =, s123High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2]
[+, (, prod1Low, +, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[+, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[+, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, prod2Low, +, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[+, prod3Low, +, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s12Low, +, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, s123Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, ;, }, return, result, ;]
[., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3]
[), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, ;, }, return, result]
[=, a1, *, b1, +, a2, *, b2, +, a3, *, b3, ;, }, return, result, ;, }, public, static]
[;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final]
[+, a3, *, b3, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final]
[+, a2, *, b2, +, a3, *, b3, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final]
[*, b1, +, a2, *, b2, +, a3, *, b3, ;, }, return, result, ;, }, public, static, double, linearCombination]
[+, a2, *, b2, +, a3, *, b3, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final]
[+, a3, *, b3, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final]
[*, b2, +, a3, *, b3, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1]
[+, a3, *, b3, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final]
[;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final]
[*, b3, ;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1]
[;, }, return, result, ;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final]
[;, }, public, static, double, linearCombination, (, final, double, a1, ,, final, double, b1, ,, final, double, a2, ,, final]
[;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High]
[*, a1, ;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1]
[;, final, double, a1High, =, ca1, -, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High]
[;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High]
[-, (, ca1, -, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR]
[;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High]
[), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double]
[-, a1, ), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;]
[), ;, final, double, a1Low, =, a1, -, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double]
[;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, )]
[-, a1High, ;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -]
[;, final, double, cb1, =, SPLIT_FACTOR, *, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, )]
[;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High]
[*, b1, ;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1]
[;, final, double, b1High, =, cb1, -, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High]
[;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low]
[-, (, cb1, -, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1]
[;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low]
[), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double]
[-, b1, ), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;]
[), ;, final, double, b1Low, =, b1, -, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[-, b1High, ;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (]
[;, final, double, prod1High, =, a1, *, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (]
[;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low]
[*, b1, ;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, )]
[;, final, double, prod1Low, =, a1Low, *, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low]
[;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, )]
[-, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[*, b1Low, -, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *]
[-, (, (, (, prod1High, -, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, )]
[;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, )]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[-, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[-, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[-, a1High, *, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[*, b1High, ), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *]
[), -, a1Low, *, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[*, b1High, ), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High]
[), -, a1High, *, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[*, b1Low, ), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2]
[), ;, final, double, ca2, =, SPLIT_FACTOR, *, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2]
[;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High]
[*, a2, ;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2]
[;, final, double, a2High, =, ca2, -, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High]
[;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High]
[-, (, ca2, -, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR]
[;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High]
[), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double]
[-, a2, ), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;]
[), ;, final, double, a2Low, =, a2, -, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double]
[;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, )]
[-, a2High, ;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -]
[;, final, double, cb2, =, SPLIT_FACTOR, *, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, )]
[;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High]
[*, b2, ;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2]
[;, final, double, b2High, =, cb2, -, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High]
[;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low]
[-, (, cb2, -, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2]
[;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low]
[), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double]
[-, b2, ), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;]
[), ;, final, double, b2Low, =, b2, -, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[-, b2High, ;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (]
[;, final, double, prod2High, =, a2, *, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (]
[;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low]
[*, b2, ;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, )]
[;, final, double, prod2Low, =, a2Low, *, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low]
[;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, )]
[-, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[*, b2Low, -, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *]
[-, (, (, (, prod2High, -, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, )]
[;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, )]
[), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3]
[-, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -]
[), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3]
[-, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;]
[-, a2High, *, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;]
[*, b2High, ), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *]
[), -, a2Low, *, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;]
[), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3]
[*, b2High, ), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High]
[), -, a2High, *, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3]
[), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3]
[*, b2Low, ), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3]
[), ;, final, double, ca3, =, SPLIT_FACTOR, *, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3]
[;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High]
[*, a3, ;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3]
[;, final, double, a3High, =, ca3, -, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High]
[;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High]
[-, (, ca3, -, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR]
[;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High]
[), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double]
[-, a3, ), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;]
[), ;, final, double, a3Low, =, a3, -, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double]
[;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, )]
[-, a3High, ;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -]
[;, final, double, cb3, =, SPLIT_FACTOR, *, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, )]
[;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High]
[*, b3, ;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3]
[;, final, double, b3High, =, cb3, -, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High]
[;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low]
[-, (, cb3, -, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3]
[;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low]
[), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double]
[-, b3, ), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;]
[), ;, final, double, b3Low, =, b3, -, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[-, b3High, ;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (]
[;, final, double, prod3High, =, a3, *, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (]
[;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low]
[*, b3, ;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, )]
[;, final, double, prod3Low, =, a3Low, *, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low]
[;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4, )]
[-, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[*, b3Low, -, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *]
[-, (, (, (, prod3High, -, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, )]
[;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4, )]
[), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4]
[-, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -]
[), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4]
[-, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final]
[), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;]
[-, a3High, *, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =]
[), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;]
[*, b3High, ), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *]
[), -, a3Low, *, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;]
[), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4]
[*, b3High, ), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High]
[), -, a3High, *, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4]
[), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4]
[*, b3Low, ), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4]
[), ;, final, double, ca4, =, SPLIT_FACTOR, *, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4]
[;, final, double, a4High, =, ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =, a4, -, a4High]
[*, a4, ;, final, double, a4High, =, ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =, a4]
[;, final, double, a4High, =, ca4, -, (, ca4, -, a4, ), ;, final, double, a4Low, =, a4, -, a4High]
[;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High]
[-, (, ca4, -, a4, ), ;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR]
[;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High]
[), ;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double]
[-, a4, ), ;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;]
[), ;, final, double, a4Low, =, a4, -, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double]
[;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (, cb4, -, b4, )]
[-, a4High, ;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (, cb4, -]
[;, final, double, cb4, =, SPLIT_FACTOR, *, b4, ;, final, double, b4High, =, cb4, -, (, cb4, -, b4, )]
[;, final, double, b4High, =, cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =, b4, -, b4High]
[*, b4, ;, final, double, b4High, =, cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =, b4]
[;, final, double, b4High, =, cb4, -, (, cb4, -, b4, ), ;, final, double, b4Low, =, b4, -, b4High]
[;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low]
[-, (, cb4, -, b4, ), ;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4]
[;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low]
[), ;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double]
[-, b4, ), ;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;]
[), ;, final, double, b4Low, =, b4, -, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double]
[;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (]
[-, b4High, ;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (]
[;, final, double, prod4High, =, a4, *, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (]
[;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low]
[*, b4, ;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, )]
[;, final, double, prod4Low, =, a4Low, *, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low]
[;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low]
[-, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, )]
[*, b4Low, -, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *]
[-, (, (, (, prod4High, -, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, )]
[;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[-, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -]
[), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[-, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final]
[), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[-, a4High, *, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =]
[), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[*, b4High, ), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +]
[), -, a4Low, *, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;]
[), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[*, b4High, ), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime]
[), -, a4High, *, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[*, b4Low, ), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;]
[), ;, final, double, s12High, =, prod1High, +, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double]
[;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime]
[+, prod2High, ;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High]
[;, final, double, s12Prime, =, s12High, -, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime]
[;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[-, prod2High, ;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -]
[;, final, double, s12Low, =, (, prod2High, -, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, )]
[;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low]
[+, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[-, (, s12High, -, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +]
[), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =]
[), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime]
[-, s12Prime, ), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final]
[), ), +, (, prod1High, -, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime]
[;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low]
[), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double]
[-, s12Prime, ), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;]
[), ;, final, double, s123High, =, s12High, +, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double]
[;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime]
[+, prod3High, ;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High]
[;, final, double, s123Prime, =, s123High, -, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime]
[;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, )]
[-, prod3High, ;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -]
[;, final, double, s123Low, =, (, prod3High, -, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, )]
[;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low]
[+, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High]
[), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =]
[-, (, s123High, -, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +]
[), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =]
[), ), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime]
[-, s123Prime, ), ), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final]
[), ), +, (, s12High, -, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime]
[;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low]
[), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double]
[-, s123Prime, ), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;]
[), ;, final, double, s1234High, =, s123High, +, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double]
[;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime]
[+, prod4High, ;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High]
[;, final, double, s1234Prime, =, s1234High, -, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime]
[;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, )]
[-, prod4High, ;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -]
[;, final, double, s1234Low, =, (, prod4High, -, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, )]
[;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low]
[+, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low]
[), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +]
[-, (, s1234High, -, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (]
[), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +]
[), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low]
[-, s1234Prime, ), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low]
[), ), +, (, s123High, -, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low]
[;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low]
[), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +]
[-, s1234Prime, ), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +]
[), ;, double, result, =, s1234High, +, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2]
[+, (, prod1Low, +, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double]
[;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[+, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[+, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[+, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, )]
[+, prod2Low, +, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (]
[+, prod3Low, +, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, )]
[+, prod4Low, +, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {]
[+, s12Low, +, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =]
[+, s123Low, +, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *]
[+, s1234Low, ), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +]
[), ;, if, (, Double, ., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *]
[), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, +, a4, *, b4, ;]
[., isNaN, (, result, ), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3]
[), ), {, result, =, a1, *, b1, +, a2, *, b2, +, a3, *, b3, +, a4, *, b4]
[=, a1, *, b1, +, a2, *, b2, +, a3, *, b3, +, a4, *, b4, ;, }, return, result]
[;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y]
[+, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ], x, ,]
[+, a3, *, b3, +, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float]
[+, a2, *, b2, +, a3, *, b3, +, a4, *, b4, ;, }, return, result, ;, }, public, static]
[*, b1, +, a2, *, b2, +, a3, *, b3, +, a4, *, b4, ;, }, return, result, ;, }]
[+, a2, *, b2, +, a3, *, b3, +, a4, *, b4, ;, }, return, result, ;, }, public, static]
[+, a3, *, b3, +, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float]
[*, b2, +, a3, *, b3, +, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals]
[+, a3, *, b3, +, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float]
[+, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ], x, ,]
[*, b3, +, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ]]
[+, a4, *, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ], x, ,]
[;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y]
[*, b4, ;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ], x, ,, float, []
[;, }, return, result, ;, }, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y]
[;, }, public, static, boolean, equals, (, float, [, ], x, ,, float, [, ], y, ), {, if, (]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, .]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[!=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x]
[., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length]
[;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, []
[;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i]
[<, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ]]
[;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i]
[., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y]
[), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, float, [, ], x]
[), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, float, [, ], x]
[., equals, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }]
[,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean]
[[, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }]
[], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, float, [, ]]
[[, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (]
[], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, float, []
[;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, float, [, ], x, ,, float, [, ]]
[;, }, public, static, boolean, equalsIncludingNaN, (, float, [, ], x, ,, float, [, ], y, ), {, if, (]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, .]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[!=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x]
[., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length]
[;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, []
[;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i]
[<, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ]]
[;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i]
[., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y]
[), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equals, (, double, [, ], x]
[), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equals, (, double, [, ], x]
[., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }]
[,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean]
[[, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }]
[], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equals, (, double, [, ]]
[[, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equals, (]
[], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equals, (, double, []
[;, }, }, return, true, ;, }, public, static, boolean, equals, (, double, [, ], x, ,, double, [, ]]
[;, }, public, static, boolean, equals, (, double, [, ], x, ,, double, [, ], y, ), {, if, (]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, .]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[!=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x]
[., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length]
[;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, []
[;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i]
[<, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ]]
[;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i]
[., length, ;, ++, i, ), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y]
[), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, if, (, !, Precision, ., equals, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, double, [, ], x]
[), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, double, [, ], x]
[., equals, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }]
[,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean]
[[, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }]
[], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, double, [, ]]
[[, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (]
[], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, double, []
[;, }, }, return, true, ;, }, public, static, boolean, equalsIncludingNaN, (, double, [, ], x, ,, double, [, ]]
[;, }, public, static, boolean, equalsIncludingNaN, (, double, [, ], x, ,, double, [, ], y, ), {, if, (]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[==, null, ), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^]
[), ||, (, y, ==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y]
[), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }, if]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[==, null, ), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), )]
[), ), {, return, !, (, (, x, ==, null, ), ^, (, y, ==, null, ), ), ;, }]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[==, null, ), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, .]
[), ^, (, y, ==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, )]
[), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for, (]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[==, null, ), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;]
[), ), ;, }, if, (, x, ., length, !=, y, ., length, ), {, return, false, ;, }, for]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[!=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x]
[., length, !=, y, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++]
[., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, x, ., length]
[;, }, for, (, int, i, =, 0, ;, i, <, x, ., length, ;, ++, i, ), {, if]
[;, i, <, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, []
[;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i]
[<, x, ., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ]]
[;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i]
[., length, ;, ++, i, ), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y]
[), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, if, (, !, Precision, ., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), )]
[), {, return, false, ;, }, }, return, true, ;, }, public, static, double, [, ], normalizeArray, (, double, []
[), {, return, false, ;, }, }, return, true, ;, }, public, static, double, [, ], normalizeArray, (, double, []
[., equalsIncludingNaN, (, x, [, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }]
[,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, double]
[[, i, ], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }]
[], ,, y, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, static, double, [, ], normalizeArray, (, double]
[[, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, double, [, ]]
[], ), ), {, return, false, ;, }, }, return, true, ;, }, public, static, double, [, ], normalizeArray, (]
[;, }, }, return, true, ;, }, public, static, double, [, ], normalizeArray, (, double, [, ], values, ,, double]
[;, }, public, static, double, [, ], normalizeArray, (, double, [, ], values, ,, double, normalizedSum, ), throws, MathIllegalArgumentException, ,]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (, Double, ., isNaN, (, normalizedSum, )]
[., isInfinite, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (, Double]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_INFINITE, ), ;, }, if, (, Double, ., isNaN, (, normalizedSum]
[;, }, if, (, Double, ., isNaN, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, )]
[), ;, }, if, (, Double, ., isNaN, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN]
[., NORMALIZE_INFINITE, ), ;, }, if, (, Double, ., isNaN, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, ), ;, }, double, sum, =, 0d, ;, final, int, len]
[., isNaN, (, normalizedSum, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, ), ;, }, double, sum, =]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NORMALIZE_NAN, ), ;, }, double, sum, =, 0d, ;, final, int]
[;, }, double, sum, =, 0d, ;, final, int, len, =, values, ., length, ;, double, [, ], out, =]
[), ;, }, double, sum, =, 0d, ;, final, int, len, =, values, ., length, ;, double, [, ], out]
[., NORMALIZE_NAN, ), ;, }, double, sum, =, 0d, ;, final, int, len, =, values, ., length, ;, double, []
[;, final, int, len, =, values, ., length, ;, double, [, ], out, =, new, double, [, len, ], ;]
[;, double, [, ], out, =, new, double, [, len, ], ;, for, (, int, i, =, 0, ;, i]
[., length, ;, double, [, ], out, =, new, double, [, len, ], ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double, .]
[], ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double]
[;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], )]
[;, i, ++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new]
[<, len, ;, i, ++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {]
[;, i, ++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new]
[), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats]
[++, ), {, if, (, Double, ., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if]
[., isInfinite, (, values, [, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, []
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }]
[[, i, ], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i]
[], ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;]
[;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {, sum, +=, values, []
[,, values, [, i, ], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (, values, [, i]
[., INFINITE_ARRAY_ELEMENT, ,, values, [, i, ], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (, values]
[,, i, ), ;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {, sum]
[[, i, ], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], )]
[], ,, i, ), ;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {]
[), ;, }, if, (, !, Double, ., isNaN, (, values, [, i, ], ), ), {, sum, +=, values]
[), {, sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw, new]
[), {, sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw, new]
[., isNaN, (, values, [, i, ], ), ), {, sum, +=, values, [, i, ], ;, }, }, if]
[), ), {, sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw]
[[, i, ], ), ), {, sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0]
[], ), ), {, sum, +=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {]
[+=, values, [, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats]
[;, }, }, if, (, sum, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }]
[[, i, ], ;, }, }, if, (, sum, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO]
[], ;, }, }, if, (, sum, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;, i]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;, i]
[;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, Double]
[), ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (]
[., ARRAY_SUMS_TO_ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {]
[;, i, <, len, ;, i, ++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], )]
[;, i, ++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {, out, []
[<, len, ;, i, ++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {]
[;, i, ++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {, out, []
[), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {, out, [, i, ], =]
[++, ), {, if, (, Double, ., isNaN, (, values, [, i, ], ), ), {, out, [, i, ]]
[), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =, values]
[., isNaN, (, values, [, i, ], ), ), {, out, [, i, ], =, Double, ., NaN, ;, }]
[), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =]
[[, i, ], ), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, []
[], ), ), {, out, [, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ]]
[=, Double, ., NaN, ;, }, else, {, out, [, i, ], =, values, [, i, ], *, normalizedSum, /]
[[, i, ], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =, values, [, i, ]]
[], =, Double, ., NaN, ;, }, else, {, out, [, i, ], =, values, [, i, ], *, normalizedSum]
[;, }, else, {, out, [, i, ], =, values, [, i, ], *, normalizedSum, /, sum, ;, }, }]
[., NaN, ;, }, else, {, out, [, i, ], =, values, [, i, ], *, normalizedSum, /, sum, ;]
[=, values, [, i, ], *, normalizedSum, /, sum, ;, }, }, return, out, ;, }, public, static, <, T]
[[, i, ], =, values, [, i, ], *, normalizedSum, /, sum, ;, }, }, return, out, ;, }, public]
[], =, values, [, i, ], *, normalizedSum, /, sum, ;, }, }, return, out, ;, }, public, static, <]
[;, }, }, return, out, ;, }, public, static, <, T, >, T, [, ], buildArray, (, final, Field, <]
[/, sum, ;, }, }, return, out, ;, }, public, static, <, T, >, T, [, ], buildArray, (, final]
[*, normalizedSum, /, sum, ;, }, }, return, out, ;, }, public, static, <, T, >, T, [, ], buildArray]
[[, i, ], *, normalizedSum, /, sum, ;, }, }, return, out, ;, }, public, static, <, T, >, T]
[], *, normalizedSum, /, sum, ;, }, }, return, out, ;, }, public, static, <, T, >, T, [, ]]
[/, sum, ;, }, }, return, out, ;, }, public, static, <, T, >, T, [, ], buildArray, (, final]
[;, }, }, return, out, ;, }, public, static, <, T, >, T, [, ], buildArray, (, final, Field, <]
[;, }, public, static, <, T, >, T, [, ], buildArray, (, final, Field, <, T, >, field, ,, final]
[T, [, ], array, =, (, T, [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,]
[), T, [, ], array, =, (, T, [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, )]
[;, Arrays, ., fill, (, array, ,, field, ., getZero, (, ), ), ;, return, array, ;, }, @, SuppressWarnings]
[;, Arrays, ., fill, (, array, ,, field, ., getZero, (, ), ), ;, return, array, ;, }, @, SuppressWarnings]
[., newInstance, (, field, ., getRuntimeClass, (, ), ,, length, ), ;, Arrays, ., fill, (, array, ,, field, .]
[,, length, ), ;, Arrays, ., fill, (, array, ,, field, ., getZero, (, ), ), ;, return, array, ;]
[., getRuntimeClass, (, ), ,, length, ), ;, Arrays, ., fill, (, array, ,, field, ., getZero, (, ), )]
[), ;, Arrays, ., fill, (, array, ,, field, ., getZero, (, ), ), ;, return, array, ;, }, @]
[;, return, array, ;, }, @, SuppressWarnings, (, "unchecked", ), public, static, <, T, >, T, [, ], [, ]]
[., fill, (, array, ,, field, ., getZero, (, ), ), ;, return, array, ;, }, @, SuppressWarnings, (, "unchecked"]
[,, field, ., getZero, (, ), ), ;, return, array, ;, }, @, SuppressWarnings, (, "unchecked", ), public, static, <]
[), ;, return, array, ;, }, @, SuppressWarnings, (, "unchecked", ), public, static, <, T, >, T, [, ], []
[., getZero, (, ), ), ;, return, array, ;, }, @, SuppressWarnings, (, "unchecked", ), public, static, <, T, >]
[;, }, @, SuppressWarnings, (, "unchecked", ), public, static, <, T, >, T, [, ], [, ], buildArray, (, final]
[public, static, <, T, >, T, [, ], [, ], buildArray, (, final, Field, <, T, >, field, ,, final]
[), public, static, <, T, >, T, [, ], [, ], buildArray, (, final, Field, <, T, >, field, ,]
[), {, T, [, ], dummyRow, =, buildArray, (, field, ,, 0, ), ;, array, =, (, T, [, ]]
[<, 0, ), {, T, [, ], dummyRow, =, buildArray, (, field, ,, 0, ), ;, array, =, (, T]
[), {, T, [, ], dummyRow, =, buildArray, (, field, ,, 0, ), ;, array, =, (, T, [, ]]
[;, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, dummyRow, ., getClass, (, ), ,]
[,, 0, ), ;, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, dummyRow, ., getClass]
[), ;, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, dummyRow, ., getClass, (, )]
[=, (, T, [, ], [, ], ), Array, ., newInstance, (, dummyRow, ., getClass, (, ), ,, rows, )]
[;, }, else, {, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass]
[;, }, else, {, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass]
[., newInstance, (, dummyRow, ., getClass, (, ), ,, rows, ), ;, }, else, {, array, =, (, T, []
[,, rows, ), ;, }, else, {, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (]
[., getClass, (, ), ,, rows, ), ;, }, else, {, array, =, (, T, [, ], [, ], )]
[), ;, }, else, {, array, =, (, T, [, ], [, ], ), Array, ., newInstance, (, field, .]
[=, (, T, [, ], [, ], ), Array, ., newInstance, (, field, ., getRuntimeClass, (, ), ,, new, int]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (]
[;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (]
[., newInstance, (, field, ., getRuntimeClass, (, ), ,, new, int, [, ], {, rows, ,, columns, }, ), ;]
[,, new, int, [, ], {, rows, ,, columns, }, ), ;, for, (, int, i, =, 0, ;, i]
[., getRuntimeClass, (, ), ,, new, int, [, ], {, rows, ,, columns, }, ), ;, for, (, int, i]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill]
[), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill]
[,, columns, }, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {]
[}, ), ;, for, (, int, i, =, 0, ;, i, <, rows, ;, ++, i, ), {, Arrays, .]
[;, i, <, rows, ;, ++, i, ), {, Arrays, ., fill, (, array, [, i, ], ,, field, .]
[;, ++, i, ), {, Arrays, ., fill, (, array, [, i, ], ,, field, ., getZero, (, ), )]
[<, rows, ;, ++, i, ), {, Arrays, ., fill, (, array, [, i, ], ,, field, ., getZero, (]
[;, ++, i, ), {, Arrays, ., fill, (, array, [, i, ], ,, field, ., getZero, (, ), )]
[), {, Arrays, ., fill, (, array, [, i, ], ,, field, ., getZero, (, ), ), ;, }, }]
[), {, Arrays, ., fill, (, array, [, i, ], ,, field, ., getZero, (, ), ), ;, }, }]
[;, }, }, return, array, ;, }, public, static, double, [, ], convolve, (, double, [, ], x, ,, double]
[., fill, (, array, [, i, ], ,, field, ., getZero, (, ), ), ;, }, }, return, array, ;]
[,, field, ., getZero, (, ), ), ;, }, }, return, array, ;, }, public, static, double, [, ], convolve]
[[, i, ], ,, field, ., getZero, (, ), ), ;, }, }, return, array, ;, }, public, static, double]
[], ,, field, ., getZero, (, ), ), ;, }, }, return, array, ;, }, public, static, double, [, ]]
[), ;, }, }, return, array, ;, }, public, static, double, [, ], convolve, (, double, [, ], x, ,]
[., getZero, (, ), ), ;, }, }, return, array, ;, }, public, static, double, [, ], convolve, (, double]
[;, }, public, static, double, [, ], convolve, (, double, [, ], x, ,, double, [, ], h, ), throws]
[;, MathUtils, ., checkNotNull, (, h, ), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =]
[., checkNotNull, (, x, ), ;, MathUtils, ., checkNotNull, (, h, ), ;, final, int, xLen, =, x, ., length]
[), ;, MathUtils, ., checkNotNull, (, h, ), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen]
[;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (, xLen]
[., checkNotNull, (, h, ), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =, h, .]
[), ;, final, int, xLen, =, x, ., length, ;, final, int, hLen, =, h, ., length, ;, if, (]
[;, final, int, hLen, =, h, ., length, ;, if, (, xLen, ==, 0, ||, hLen, ==, 0, ), {]
[., length, ;, final, int, hLen, =, h, ., length, ;, if, (, xLen, ==, 0, ||, hLen, ==, 0]
[;, if, (, xLen, ==, 0, ||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final]
[., length, ;, if, (, xLen, ==, 0, ||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;]
[), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +, hLen, -, 1, ;, final]
[||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +, hLen]
[==, 0, ||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen]
[||, hLen, ==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +, hLen]
[), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +, hLen, -, 1, ;, final]
[==, 0, ), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +, hLen, -, 1]
[), {, throw, new, NoDataException, (, ), ;, }, final, int, totalLength, =, xLen, +, hLen, -, 1, ;, final]
[;, }, final, int, totalLength, =, xLen, +, hLen, -, 1, ;, final, double, [, ], y, =, new, double]
[;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =, 0, ;]
[-, 1, ;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =]
[+, hLen, -, 1, ;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int]
[-, 1, ;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =]
[;, final, double, [, ], y, =, new, double, [, totalLength, ], ;, for, (, int, n, =, 0, ;]
[;, for, (, int, n, =, 0, ;, n, <, totalLength, ;, n, ++, ), {, double, yn, =, 0]
[], ;, for, (, int, n, =, 0, ;, n, <, totalLength, ;, n, ++, ), {, double, yn, =]
[;, n, <, totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max]
[;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,, n]
[<, totalLength, ;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0]
[;, n, ++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,, n]
[), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,, n, +, 1, -]
[++, ), {, double, yn, =, 0, ;, int, k, =, FastMath, ., max, (, 0, ,, n, +, 1]
[;, int, k, =, FastMath, ., max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =]
[;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn]
[., max, (, 0, ,, n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while]
[,, n, +, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen]
[), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {]
[-, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0]
[+, 1, -, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j]
[-, xLen, ), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0]
[), ;, int, j, =, n, -, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {]
[;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *]
[-, k, ;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --]
[;, while, (, k, <, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *]
[), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }, y, [, n]
[&&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;]
[<, hLen, &&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *, h, [, k, ++]
[&&, j, >=, 0, ), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;]
[), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }, y, [, n]
[>=, 0, ), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }, y]
[), {, yn, +=, x, [, j, --, ], *, h, [, k, ++, ], ;, }, y, [, n]
[+=, x, [, j, --, ], *, h, [, k, ++, ], ;, }, y, [, n, ], =, yn]
[;, }, y, [, n, ], =, yn, ;, }, return, y, ;, }, public, static, enum, Position, {, HEAD]
[*, h, [, k, ++, ], ;, }, y, [, n, ], =, yn, ;, }, return, y, ;, }]
[[, j, --, ], *, h, [, k, ++, ], ;, }, y, [, n, ], =, yn, ;, }]
[], *, h, [, k, ++, ], ;, }, y, [, n, ], =, yn, ;, }, return, y, ;]
[--, ], *, h, [, k, ++, ], ;, }, y, [, n, ], =, yn, ;, }, return, y]
[;, }, y, [, n, ], =, yn, ;, }, return, y, ;, }, public, static, enum, Position, {, HEAD]
[[, k, ++, ], ;, }, y, [, n, ], =, yn, ;, }, return, y, ;, }, public, static]
[], ;, }, y, [, n, ], =, yn, ;, }, return, y, ;, }, public, static, enum, Position, {]
[++, ], ;, }, y, [, n, ], =, yn, ;, }, return, y, ;, }, public, static, enum, Position]
[=, yn, ;, }, return, y, ;, }, public, static, enum, Position, {, HEAD, ,, TAIL, }, public, static, void]
[[, n, ], =, yn, ;, }, return, y, ;, }, public, static, enum, Position, {, HEAD, ,, TAIL, }]
[], =, yn, ;, }, return, y, ;, }, public, static, enum, Position, {, HEAD, ,, TAIL, }, public, static]
[;, }, return, y, ;, }, public, static, enum, Position, {, HEAD, ,, TAIL, }, public, static, void, shuffle, (]
[;, }, public, static, enum, Position, {, HEAD, ,, TAIL, }, public, static, void, shuffle, (, int, [, ], list]
[;, }, public, static, void, shuffle, (, int, [, ], list, ,, int, start, ,, Position, pos, ,, RandomGenerator, rng]
[,, start, ,, pos, ,, new, Well19937c, (, ), ), ;, }, public, static, void, shuffle, (, int, [, ]]
[,, pos, ,, new, Well19937c, (, ), ), ;, }, public, static, void, shuffle, (, int, [, ], list, ,]
[,, new, Well19937c, (, ), ), ;, }, public, static, void, shuffle, (, int, [, ], list, ,, int, start]
[), ;, }, public, static, void, shuffle, (, int, [, ], list, ,, int, start, ,, Position, pos, ,, RandomGenerator]
[), {, case, TAIL, :, {, for, (, int, i, =, list, ., length, -, 1, ;, i, >=, start]
[:, {, for, (, int, i, =, list, ., length, -, 1, ;, i, >=, start, ;, i, --, )]
[;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (, i, ==, start, ), {]
[-, 1, ;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (, i, ==, start]
[., length, -, 1, ;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (, i]
[;, i, >=, start, ;, i, --, ), {, final, int, target, ;, if, (, i, ==, start, ), {]
[;, i, --, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;]
[>=, start, ;, i, --, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =]
[;, i, --, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;]
[), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {]
[--, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else]
[), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, start, ,, i, )]
[==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, start, ,]
[), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, start, ,, i, )]
[=, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, start, ,, i, ), ., sample, (]
[;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, start, ,, i, ), ., sample, (, ), ;]
[=, new, UniformIntegerDistribution, (, rng, ,, start, ,, i, ), ., sample, (, ), ;, }, final, int, temp, =]
[;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ]]
[., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =]
[,, start, ,, i, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;]
[,, i, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, []
[), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ]]
[;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }]
[[, target, ], ;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp]
[], ;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }]
[=, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, case, HEAD, :]
[[, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;]
[], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, case, HEAD]
[;, list, [, i, ], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i]
[[, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for]
[], ;, list, [, i, ], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int]
[=, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;, i, <=]
[[, i, ], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0]
[], =, temp, ;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;, i]
[;, }, }, break, ;, case, HEAD, :, {, for, (, int, i, =, 0, ;, i, <=, start, ;]
[:, {, for, (, int, i, =, 0, ;, i, <=, start, ;, i, ++, ), {, final, int, target]
[;, i, <=, start, ;, i, ++, ), {, final, int, target, ;, if, (, i, ==, start, ), {]
[;, i, ++, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;]
[<=, start, ;, i, ++, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =]
[;, i, ++, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;]
[), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else, {]
[++, ), {, final, int, target, ;, if, (, i, ==, start, ), {, target, =, start, ;, }, else]
[), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, i, ,, start, )]
[==, start, ), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, i, ,]
[), {, target, =, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, i, ,, start, )]
[=, start, ;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, i, ,, start, ), ., sample, (]
[;, }, else, {, target, =, new, UniformIntegerDistribution, (, rng, ,, i, ,, start, ), ., sample, (, ), ;]
[=, new, UniformIntegerDistribution, (, rng, ,, i, ,, start, ), ., sample, (, ), ;, }, final, int, temp, =]
[;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =, list, [, i, ]]
[., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ], =]
[,, i, ,, start, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;]
[,, start, ), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, []
[), ., sample, (, ), ;, }, final, int, temp, =, list, [, target, ], ;, list, [, target, ]]
[;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }]
[[, target, ], ;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp]
[], ;, list, [, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }]
[=, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, default, :, throw]
[[, target, ], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;]
[], =, list, [, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, default, :]
[;, list, [, i, ], =, temp, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;]
[[, i, ], ;, list, [, i, ], =, temp, ;, }, }, break, ;, default, :, throw, new, MathInternalError]
[], ;, list, [, i, ], =, temp, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, )]
[=, temp, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, public, static, void]
[[, i, ], =, temp, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }]
[], =, temp, ;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, public, static]
[;, }, }, break, ;, default, :, throw, new, MathInternalError, (, ), ;, }, }, public, static, void, shuffle, (]
[;, }, }, public, static, void, shuffle, (, int, [, ], list, ,, RandomGenerator, rng, ), {, shuffle, (, list]
[;, }, public, static, void, shuffle, (, int, [, ], list, ), {, shuffle, (, list, ,, new, Well19937c, (]
[,, 0, ,, Position, ., TAIL, ,, rng, ), ;, }, public, static, void, shuffle, (, int, [, ], list]
[,, Position, ., TAIL, ,, rng, ), ;, }, public, static, void, shuffle, (, int, [, ], list, ), {]
[,, rng, ), ;, }, public, static, void, shuffle, (, int, [, ], list, ), {, shuffle, (, list, ,]
[., TAIL, ,, rng, ), ;, }, public, static, void, shuffle, (, int, [, ], list, ), {, shuffle, (]
[), ;, }, public, static, void, shuffle, (, int, [, ], list, ), {, shuffle, (, list, ,, new, Well19937c]
[;, }, }]
[,, new, Well19937c, (, ), ), ;, }, }]
[), ;, }, }]
