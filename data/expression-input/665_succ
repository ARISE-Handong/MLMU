[;, private, static, final, double, [, ], W_SUB_N_R, =, {, 0x1.0p0, ,, -, 0x1.0p0, ,, 0x1.1a62633145c07p-54, ,, 0x1.6a09e667f3bcdp-1, ,, 0x1.d906bcf328d46p-1]
[;, private, static, final, double, [, ], W_SUB_N_I, =, {, 0x1.1a62633145c07p-52, ,, -, 0x1.1a62633145c07p-53, ,, -, 0x1.0p0, ,, -, 0x1.6a09e667f3bccp-1]
[,, -, 0x1.0p0, ,, 0x1.1a62633145c07p-54, ,, 0x1.6a09e667f3bcdp-1, ,, 0x1.d906bcf328d46p-1, ,, 0x1.f6297cff75cbp-1, ,, 0x1.fd88da3d12526p-1, ,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,]
[,, 0x1.1a62633145c07p-54, ,, 0x1.6a09e667f3bcdp-1, ,, 0x1.d906bcf328d46p-1, ,, 0x1.f6297cff75cbp-1, ,, 0x1.fd88da3d12526p-1, ,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1]
[,, 0x1.1a62633145c07p-54, ,, 0x1.6a09e667f3bcdp-1, ,, 0x1.d906bcf328d46p-1, ,, 0x1.f6297cff75cbp-1, ,, 0x1.fd88da3d12526p-1, ,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1]
[,, 0x1.6a09e667f3bcdp-1, ,, 0x1.d906bcf328d46p-1, ,, 0x1.f6297cff75cbp-1, ,, 0x1.fd88da3d12526p-1, ,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1]
[,, 0x1.d906bcf328d46p-1, ,, 0x1.f6297cff75cbp-1, ,, 0x1.fd88da3d12526p-1, ,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1]
[,, 0x1.f6297cff75cbp-1, ,, 0x1.fd88da3d12526p-1, ,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1]
[,, 0x1.fd88da3d12526p-1, ,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1]
[,, 0x1.ff621e3796d7ep-1, ,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1]
[,, 0x1.ffd886084cd0dp-1, ,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1]
[,, 0x1.fff62169b92dbp-1, ,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1]
[,, 0x1.fffd8858e8a92p-1, ,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1]
[,, 0x1.ffff621621d02p-1, ,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1]
[,, 0x1.ffffd88586ee6p-1, ,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1]
[,, 0x1.fffff62161a34p-1, ,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1]
[,, 0x1.fffffd8858675p-1, ,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1]
[,, 0x1.ffffff621619cp-1, ,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1]
[,, 0x1.ffffffd885867p-1, ,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1]
[,, 0x1.fffffff62161ap-1, ,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1]
[,, 0x1.fffffffd88586p-1, ,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1]
[,, 0x1.ffffffff62162p-1, ,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1]
[,, 0x1.ffffffffd8858p-1, ,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1]
[,, 0x1.fffffffff6216p-1, ,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0]
[,, 0x1.fffffffffd886p-1, ,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.ffffffffff621p-1, ,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.ffffffffffd88p-1, ,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.fffffffffff62p-1, ,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.fffffffffffd9p-1, ,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.ffffffffffff6p-1, ,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.ffffffffffffep-1, ,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.fffffffffffffp-1, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, }, ;]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, }, ;, private, static]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, }, ;, private, static, final, double]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, }, ;, private, static, final, double, [, ]]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, }, ;, private, static, final, double, [, ], W_SUB_N_I, =]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, }, ;, private, static, final, double, [, ], W_SUB_N_I, =, {, 0x1.1a62633145c07p-52]
[,, 0x1.0p0, ,, 0x1.0p0, ,, 0x1.0p0, }, ;, private, static, final, double, [, ], W_SUB_N_I, =, {, 0x1.1a62633145c07p-52, ,, -]
[,, 0x1.0p0, ,, 0x1.0p0, }, ;, private, static, final, double, [, ], W_SUB_N_I, =, {, 0x1.1a62633145c07p-52, ,, -, 0x1.1a62633145c07p-53, ,]
[,, 0x1.0p0, }, ;, private, static, final, double, [, ], W_SUB_N_I, =, {, 0x1.1a62633145c07p-52, ,, -, 0x1.1a62633145c07p-53, ,, -, 0x1.0p0]
[}, ;, private, static, final, double, [, ], W_SUB_N_I, =, {, 0x1.1a62633145c07p-52, ,, -, 0x1.1a62633145c07p-53, ,, -, 0x1.0p0, ,, -]
[;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final, DftNormalization, normalization, ), {, this, ., normalization, =, normalization, ;]
[,, -, 0x1.1a62633145c07p-53, ,, -, 0x1.0p0, ,, -, 0x1.6a09e667f3bccp-1, ,, -, 0x1.87de2a6aea963p-2, ,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -]
[,, -, 0x1.0p0, ,, -, 0x1.6a09e667f3bccp-1, ,, -, 0x1.87de2a6aea963p-2, ,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -]
[,, -, 0x1.0p0, ,, -, 0x1.6a09e667f3bccp-1, ,, -, 0x1.87de2a6aea963p-2, ,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -]
[,, -, 0x1.6a09e667f3bccp-1, ,, -, 0x1.87de2a6aea963p-2, ,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -]
[,, -, 0x1.6a09e667f3bccp-1, ,, -, 0x1.87de2a6aea963p-2, ,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -]
[,, -, 0x1.87de2a6aea963p-2, ,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -]
[,, -, 0x1.87de2a6aea963p-2, ,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -]
[,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -]
[,, -, 0x1.8f8b83c69a60ap-3, ,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -]
[,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -]
[,, -, 0x1.917a6bc29b42cp-4, ,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -]
[,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -]
[,, -, 0x1.91f65f10dd814p-5, ,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -]
[,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -]
[,, -, 0x1.92155f7a3667ep-6, ,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -]
[,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -]
[,, -, 0x1.921d1fcdec784p-7, ,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -]
[,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -]
[,, -, 0x1.921f0fe670071p-8, ,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -]
[,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -]
[,, -, 0x1.921f8becca4bap-9, ,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -]
[,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -]
[,, -, 0x1.921faaee6472dp-10, ,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -]
[,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -]
[,, -, 0x1.921fb2aecb36p-11, ,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -]
[,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -]
[,, -, 0x1.921fb49ee4ea6p-12, ,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -]
[,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -]
[,, -, 0x1.921fb51aeb57bp-13, ,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -]
[,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -]
[,, -, 0x1.921fb539ecf31p-14, ,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -]
[,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -]
[,, -, 0x1.921fb541ad59ep-15, ,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -]
[,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -]
[,, -, 0x1.921fb5439d73ap-16, ,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -]
[,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -]
[,, -, 0x1.921fb544197ap-17, ,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -]
[,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -]
[,, -, 0x1.921fb544387bap-18, ,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -]
[,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -]
[,, -, 0x1.921fb544403c1p-19, ,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -]
[,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -]
[,, -, 0x1.921fb544422c2p-20, ,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -]
[,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -]
[,, -, 0x1.921fb54442a83p-21, ,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -]
[,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -]
[,, -, 0x1.921fb54442c73p-22, ,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -]
[,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -]
[,, -, 0x1.921fb54442cefp-23, ,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -]
[,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -]
[,, -, 0x1.921fb54442d0ep-24, ,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -]
[,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -]
[,, -, 0x1.921fb54442d15p-25, ,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -]
[,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -]
[,, -, 0x1.921fb54442d17p-26, ,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -]
[,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -]
[,, -, 0x1.921fb54442d18p-27, ,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -]
[,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -]
[,, -, 0x1.921fb54442d18p-28, ,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -]
[,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -]
[,, -, 0x1.921fb54442d18p-29, ,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -]
[,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -]
[,, -, 0x1.921fb54442d18p-30, ,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -]
[,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -]
[,, -, 0x1.921fb54442d18p-31, ,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -]
[,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -]
[,, -, 0x1.921fb54442d18p-32, ,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -]
[,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -]
[,, -, 0x1.921fb54442d18p-33, ,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -]
[,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -]
[,, -, 0x1.921fb54442d18p-34, ,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -]
[,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -]
[,, -, 0x1.921fb54442d18p-35, ,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -]
[,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -]
[,, -, 0x1.921fb54442d18p-36, ,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -]
[,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -]
[,, -, 0x1.921fb54442d18p-37, ,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -]
[,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -]
[,, -, 0x1.921fb54442d18p-38, ,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -]
[,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -]
[,, -, 0x1.921fb54442d18p-39, ,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -]
[,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -]
[,, -, 0x1.921fb54442d18p-40, ,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -]
[,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -]
[,, -, 0x1.921fb54442d18p-41, ,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -]
[,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -]
[,, -, 0x1.921fb54442d18p-42, ,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -]
[,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -]
[,, -, 0x1.921fb54442d18p-43, ,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -]
[,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -]
[,, -, 0x1.921fb54442d18p-44, ,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -]
[,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -]
[,, -, 0x1.921fb54442d18p-45, ,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -]
[,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -]
[,, -, 0x1.921fb54442d18p-46, ,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -]
[,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -]
[,, -, 0x1.921fb54442d18p-47, ,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -]
[,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -]
[,, -, 0x1.921fb54442d18p-48, ,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -]
[,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -]
[,, -, 0x1.921fb54442d18p-49, ,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -]
[,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -]
[,, -, 0x1.921fb54442d18p-50, ,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -]
[,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -]
[,, -, 0x1.921fb54442d18p-51, ,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -]
[,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -]
[,, -, 0x1.921fb54442d18p-52, ,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -]
[,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -]
[,, -, 0x1.921fb54442d18p-53, ,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -]
[,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -]
[,, -, 0x1.921fb54442d18p-54, ,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -]
[,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;]
[,, -, 0x1.921fb54442d18p-55, ,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;]
[,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization]
[,, -, 0x1.921fb54442d18p-56, ,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization]
[,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public]
[,, -, 0x1.921fb54442d18p-57, ,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public]
[,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final]
[,, -, 0x1.921fb54442d18p-58, ,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final]
[,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final, DftNormalization, normalization, )]
[,, -, 0x1.921fb54442d18p-59, ,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final, DftNormalization, normalization, )]
[,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final, DftNormalization, normalization, ), {, this, .]
[,, -, 0x1.921fb54442d18p-60, }, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final, DftNormalization, normalization, ), {, this, .]
[}, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final, DftNormalization, normalization, ), {, this, ., normalization, =, normalization]
[}, ;, private, final, DftNormalization, normalization, ;, public, FastFourierTransformer, (, final, DftNormalization, normalization, ), {, this, ., normalization, =, normalization]
[=, normalization, ;, }, private, static, void, bitReversalShuffle2, (, double, [, ], a, ,, double, [, ], b, ), {]
[., normalization, =, normalization, ;, }, private, static, void, bitReversalShuffle2, (, double, [, ], a, ,, double, [, ], b]
[;, }, private, static, void, bitReversalShuffle2, (, double, [, ], a, ,, double, [, ], b, ), {, final, int]
[;, assert, b, ., length, ==, n, ;, final, int, halfOfN, =, n, >, >, 1, ;, int, j, =]
[., length, ;, assert, b, ., length, ==, n, ;, final, int, halfOfN, =, n, >, >, 1, ;, int]
[;, final, int, halfOfN, =, n, >, >, 1, ;, int, j, =, 0, ;, for, (, int, i, =]
[==, n, ;, final, int, halfOfN, =, n, >, >, 1, ;, int, j, =, 0, ;, for, (, int]
[., length, ==, n, ;, final, int, halfOfN, =, n, >, >, 1, ;, int, j, =, 0, ;, for]
[;, final, int, halfOfN, =, n, >, >, 1, ;, int, j, =, 0, ;, for, (, int, i, =]
[;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[>, >, 1, ;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, int, j, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, i, <]
[;, i, <, n, ;, i, ++, ), {, if, (, i, <, j, ), {, double, temp, =, a]
[;, i, ++, ), {, if, (, i, <, j, ), {, double, temp, =, a, [, i, ], ;]
[<, n, ;, i, ++, ), {, if, (, i, <, j, ), {, double, temp, =, a, [, i]
[;, i, ++, ), {, if, (, i, <, j, ), {, double, temp, =, a, [, i, ], ;]
[), {, if, (, i, <, j, ), {, double, temp, =, a, [, i, ], ;, a, [, i]
[++, ), {, if, (, i, <, j, ), {, double, temp, =, a, [, i, ], ;, a, []
[), {, double, temp, =, a, [, i, ], ;, a, [, i, ], =, a, [, j, ], ;]
[<, j, ), {, double, temp, =, a, [, i, ], ;, a, [, i, ], =, a, [, j]
[), {, double, temp, =, a, [, i, ], ;, a, [, i, ], =, a, [, j, ], ;]
[;, a, [, i, ], =, a, [, j, ], ;, a, [, j, ], =, temp, ;, temp, =]
[[, i, ], ;, a, [, i, ], =, a, [, j, ], ;, a, [, j, ], =, temp]
[], ;, a, [, i, ], =, a, [, j, ], ;, a, [, j, ], =, temp, ;, temp]
[=, a, [, j, ], ;, a, [, j, ], =, temp, ;, temp, =, b, [, i, ], ;]
[[, i, ], =, a, [, j, ], ;, a, [, j, ], =, temp, ;, temp, =, b, []
[], =, a, [, j, ], ;, a, [, j, ], =, temp, ;, temp, =, b, [, i, ]]
[;, a, [, j, ], =, temp, ;, temp, =, b, [, i, ], ;, b, [, i, ], =]
[[, j, ], ;, a, [, j, ], =, temp, ;, temp, =, b, [, i, ], ;, b, []
[], ;, a, [, j, ], =, temp, ;, temp, =, b, [, i, ], ;, b, [, i, ]]
[=, temp, ;, temp, =, b, [, i, ], ;, b, [, i, ], =, b, [, j, ], ;]
[[, j, ], =, temp, ;, temp, =, b, [, i, ], ;, b, [, i, ], =, b, []
[], =, temp, ;, temp, =, b, [, i, ], ;, b, [, i, ], =, b, [, j, ]]
[;, temp, =, b, [, i, ], ;, b, [, i, ], =, b, [, j, ], ;, b, []
[=, b, [, i, ], ;, b, [, i, ], =, b, [, j, ], ;, b, [, j, ]]
[;, b, [, i, ], =, b, [, j, ], ;, b, [, j, ], =, temp, ;, }, int]
[[, i, ], ;, b, [, i, ], =, b, [, j, ], ;, b, [, j, ], =, temp]
[], ;, b, [, i, ], =, b, [, j, ], ;, b, [, j, ], =, temp, ;, }]
[=, b, [, j, ], ;, b, [, j, ], =, temp, ;, }, int, k, =, halfOfN, ;, while]
[[, i, ], =, b, [, j, ], ;, b, [, j, ], =, temp, ;, }, int, k, =]
[], =, b, [, j, ], ;, b, [, j, ], =, temp, ;, }, int, k, =, halfOfN, ;]
[;, b, [, j, ], =, temp, ;, }, int, k, =, halfOfN, ;, while, (, k, <=, j, &&]
[[, j, ], ;, b, [, j, ], =, temp, ;, }, int, k, =, halfOfN, ;, while, (, k]
[], ;, b, [, j, ], =, temp, ;, }, int, k, =, halfOfN, ;, while, (, k, <=, j]
[=, temp, ;, }, int, k, =, halfOfN, ;, while, (, k, <=, j, &&, k, >, 0, ), {]
[[, j, ], =, temp, ;, }, int, k, =, halfOfN, ;, while, (, k, <=, j, &&, k, >]
[], =, temp, ;, }, int, k, =, halfOfN, ;, while, (, k, <=, j, &&, k, >, 0, )]
[;, }, int, k, =, halfOfN, ;, while, (, k, <=, j, &&, k, >, 0, ), {, j, -=]
[;, while, (, k, <=, j, &&, k, >, 0, ), {, j, -=, k, ;, k, >>=, 1, ;]
[), {, j, -=, k, ;, k, >>=, 1, ;, }, j, +=, k, ;, }, }, private, static, void]
[&&, k, >, 0, ), {, j, -=, k, ;, k, >>=, 1, ;, }, j, +=, k, ;, }]
[<=, j, &&, k, >, 0, ), {, j, -=, k, ;, k, >>=, 1, ;, }, j, +=, k]
[&&, k, >, 0, ), {, j, -=, k, ;, k, >>=, 1, ;, }, j, +=, k, ;, }]
[), {, j, -=, k, ;, k, >>=, 1, ;, }, j, +=, k, ;, }, }, private, static, void]
[>, 0, ), {, j, -=, k, ;, k, >>=, 1, ;, }, j, +=, k, ;, }, }, private]
[), {, j, -=, k, ;, k, >>=, 1, ;, }, j, +=, k, ;, }, }, private, static, void]
[-=, k, ;, k, >>=, 1, ;, }, j, +=, k, ;, }, }, private, static, void, normalizeTransformedData, (, final]
[;, k, >>=, 1, ;, }, j, +=, k, ;, }, }, private, static, void, normalizeTransformedData, (, final, double, []
[>>=, 1, ;, }, j, +=, k, ;, }, }, private, static, void, normalizeTransformedData, (, final, double, [, ], []
[;, }, j, +=, k, ;, }, }, private, static, void, normalizeTransformedData, (, final, double, [, ], [, ], dataRI]
[+=, k, ;, }, }, private, static, void, normalizeTransformedData, (, final, double, [, ], [, ], dataRI, ,, final, DftNormalization]
[;, }, }, private, static, void, normalizeTransformedData, (, final, double, [, ], [, ], dataRI, ,, final, DftNormalization, normalization, ,]
[;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, final, int, n, =, dataR, ., length, ;]
[[, 0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, final, int, n, =, dataR]
[], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, final, int, n, =, dataR, ., length]
[;, final, int, n, =, dataR, ., length, ;, assert, dataI, ., length, ==, n, ;, switch, (, normalization, )]
[[, 1, ], ;, final, int, n, =, dataR, ., length, ;, assert, dataI, ., length, ==, n, ;, switch]
[], ;, final, int, n, =, dataR, ., length, ;, assert, dataI, ., length, ==, n, ;, switch, (, normalization]
[;, assert, dataI, ., length, ==, n, ;, switch, (, normalization, ), {, case, STANDARD, :, if, (, type, ==]
[., length, ;, assert, dataI, ., length, ==, n, ;, switch, (, normalization, ), {, case, STANDARD, :, if, (]
[;, switch, (, normalization, ), {, case, STANDARD, :, if, (, type, ==, TransformType, ., INVERSE, ), {, final, double]
[==, n, ;, switch, (, normalization, ), {, case, STANDARD, :, if, (, type, ==, TransformType, ., INVERSE, ), {]
[., length, ==, n, ;, switch, (, normalization, ), {, case, STANDARD, :, if, (, type, ==, TransformType, ., INVERSE]
[;, switch, (, normalization, ), {, case, STANDARD, :, if, (, type, ==, TransformType, ., INVERSE, ), {, final, double]
[), {, case, STANDARD, :, if, (, type, ==, TransformType, ., INVERSE, ), {, final, double, scaleFactor, =, 1.0, /]
[:, if, (, type, ==, TransformType, ., INVERSE, ), {, final, double, scaleFactor, =, 1.0, /, (, (, double, )]
[), {, final, double, scaleFactor, =, 1.0, /, (, (, double, ), n, ), ;, for, (, int, i, =]
[==, TransformType, ., INVERSE, ), {, final, double, scaleFactor, =, 1.0, /, (, (, double, ), n, ), ;, for]
[), {, final, double, scaleFactor, =, 1.0, /, (, (, double, ), n, ), ;, for, (, int, i, =]
[., INVERSE, ), {, final, double, scaleFactor, =, 1.0, /, (, (, double, ), n, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, dataR, [, i, ]]
[/, (, (, double, ), n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, dataR, [, i, ]]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, dataR, [, i]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, dataR, [, i]
[;, i, <, n, ;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ]]
[;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }]
[<, n, ;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor]
[;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }]
[), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, }, break, ;]
[++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, }, break]
[*=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, }, break, ;, case, UNITARY, :, final, double, scaleFactor]
[[, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, }, break, ;, case, UNITARY, :]
[], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, }, break, ;, case, UNITARY, :, final, double]
[;, dataI, [, i, ], *=, scaleFactor, ;, }, }, break, ;, case, UNITARY, :, final, double, scaleFactor, =, 1.0]
[*=, scaleFactor, ;, }, }, break, ;, case, UNITARY, :, final, double, scaleFactor, =, 1.0, /, FastMath, ., sqrt, (]
[[, i, ], *=, scaleFactor, ;, }, }, break, ;, case, UNITARY, :, final, double, scaleFactor, =, 1.0, /, FastMath]
[], *=, scaleFactor, ;, }, }, break, ;, case, UNITARY, :, final, double, scaleFactor, =, 1.0, /, FastMath, ., sqrt]
[;, }, }, break, ;, case, UNITARY, :, final, double, scaleFactor, =, 1.0, /, FastMath, ., sqrt, (, n, )]
[:, final, double, scaleFactor, =, 1.0, /, FastMath, ., sqrt, (, n, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, dataR, [, i, ]]
[/, FastMath, ., sqrt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, dataR, [, i, ]]
[., sqrt, (, n, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, dataR, [, i]
[;, i, <, n, ;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ]]
[;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }]
[<, n, ;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor]
[;, i, ++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }]
[), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, break, ;, default]
[++, ), {, dataR, [, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, break, ;]
[*=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, break, ;, default, :, throw, new, MathIllegalStateException, (, )]
[[, i, ], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, break, ;, default, :, throw, new]
[], *=, scaleFactor, ;, dataI, [, i, ], *=, scaleFactor, ;, }, break, ;, default, :, throw, new, MathIllegalStateException, (]
[;, dataI, [, i, ], *=, scaleFactor, ;, }, break, ;, default, :, throw, new, MathIllegalStateException, (, ), ;, }]
[*=, scaleFactor, ;, }, break, ;, default, :, throw, new, MathIllegalStateException, (, ), ;, }, }, public, static, void, transformInPlace]
[[, i, ], *=, scaleFactor, ;, }, break, ;, default, :, throw, new, MathIllegalStateException, (, ), ;, }, }, public]
[], *=, scaleFactor, ;, }, break, ;, default, :, throw, new, MathIllegalStateException, (, ), ;, }, }, public, static, void]
[;, }, break, ;, default, :, throw, new, MathIllegalStateException, (, ), ;, }, }, public, static, void, transformInPlace, (, final]
[;, }, }, public, static, void, transformInPlace, (, final, double, [, ], [, ], dataRI, ,, final, DftNormalization, normalization, ,]
[), {, throw, new, DimensionMismatchException, (, dataRI, ., length, ,, 2, ), ;, }, final, double, [, ], dataR, =]
[!=, 2, ), {, throw, new, DimensionMismatchException, (, dataRI, ., length, ,, 2, ), ;, }, final, double, [, ]]
[., length, !=, 2, ), {, throw, new, DimensionMismatchException, (, dataRI, ., length, ,, 2, ), ;, }, final, double]
[), {, throw, new, DimensionMismatchException, (, dataRI, ., length, ,, 2, ), ;, }, final, double, [, ], dataR, =]
[;, }, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =, dataRI]
[,, 2, ), ;, }, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ]]
[., length, ,, 2, ), ;, }, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double]
[), ;, }, final, double, [, ], dataR, =, dataRI, [, 0, ], ;, final, double, [, ], dataI, =]
[;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (, dataR, ., length, !=, dataI, .]
[[, 0, ], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (, dataR, ., length]
[], ;, final, double, [, ], dataI, =, dataRI, [, 1, ], ;, if, (, dataR, ., length, !=, dataI]
[;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,]
[[, 1, ], ;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (, dataI]
[], ;, if, (, dataR, ., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (, dataI, ., length]
[), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,, dataR, ., length, ), ;, }, final, int, n, =]
[!=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,, dataR, ., length, ), ;, }]
[., length, !=, dataI, ., length, ), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,, dataR, ., length, )]
[), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,, dataR, ., length, ), ;, }, final, int, n, =]
[., length, ), {, throw, new, DimensionMismatchException, (, dataI, ., length, ,, dataR, ., length, ), ;, }, final, int]
[;, }, final, int, n, =, dataR, ., length, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), )]
[,, dataR, ., length, ), ;, }, final, int, n, =, dataR, ., length, ;, if, (, !, ArithmeticUtils, .]
[., length, ,, dataR, ., length, ), ;, }, final, int, n, =, dataR, ., length, ;, if, (, !]
[), ;, }, final, int, n, =, dataR, ., length, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, )]
[., length, ), ;, }, final, int, n, =, dataR, ., length, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (]
[;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,]
[., length, ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, .]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, n, ), ), ;, }, if]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, n, ), ), ;, }, if]
[., isPowerOfTwo, (, n, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, n]
[), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, n, ), ), ;, }]
[;, }, if, (, n, ==, 1, ), {, return, ;, }, else, if, (, n, ==, 2, ), {]
[,, Integer, ., valueOf, (, n, ), ), ;, }, if, (, n, ==, 1, ), {, return, ;, }]
[., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, n, ), ), ;, }, if, (, n, ==, 1, ), {, return]
[), ;, }, if, (, n, ==, 1, ), {, return, ;, }, else, if, (, n, ==, 2, )]
[., valueOf, (, n, ), ), ;, }, if, (, n, ==, 1, ), {, return, ;, }, else, if]
[), ), ;, }, if, (, n, ==, 1, ), {, return, ;, }, else, if, (, n, ==, 2]
[), {, return, ;, }, else, if, (, n, ==, 2, ), {, final, double, srcR0, =, dataR, [, 0]
[==, 1, ), {, return, ;, }, else, if, (, n, ==, 2, ), {, final, double, srcR0, =, dataR]
[), {, return, ;, }, else, if, (, n, ==, 2, ), {, final, double, srcR0, =, dataR, [, 0]
[), {, final, double, srcR0, =, dataR, [, 0, ], ;, final, double, srcI0, =, dataI, [, 0, ], ;]
[==, 2, ), {, final, double, srcR0, =, dataR, [, 0, ], ;, final, double, srcI0, =, dataI, [, 0]
[), {, final, double, srcR0, =, dataR, [, 0, ], ;, final, double, srcI0, =, dataI, [, 0, ], ;]
[;, final, double, srcI0, =, dataI, [, 0, ], ;, final, double, srcR1, =, dataR, [, 1, ], ;, final]
[[, 0, ], ;, final, double, srcI0, =, dataI, [, 0, ], ;, final, double, srcR1, =, dataR, [, 1]
[], ;, final, double, srcI0, =, dataI, [, 0, ], ;, final, double, srcR1, =, dataR, [, 1, ], ;]
[;, final, double, srcR1, =, dataR, [, 1, ], ;, final, double, srcI1, =, dataI, [, 1, ], ;, dataR]
[[, 0, ], ;, final, double, srcR1, =, dataR, [, 1, ], ;, final, double, srcI1, =, dataI, [, 1]
[], ;, final, double, srcR1, =, dataR, [, 1, ], ;, final, double, srcI1, =, dataI, [, 1, ], ;]
[;, final, double, srcI1, =, dataI, [, 1, ], ;, dataR, [, 0, ], =, srcR0, +, srcR1, ;, dataI]
[[, 1, ], ;, final, double, srcI1, =, dataI, [, 1, ], ;, dataR, [, 0, ], =, srcR0, +]
[], ;, final, double, srcI1, =, dataI, [, 1, ], ;, dataR, [, 0, ], =, srcR0, +, srcR1, ;]
[;, dataR, [, 0, ], =, srcR0, +, srcR1, ;, dataI, [, 0, ], =, srcI0, +, srcI1, ;, dataR]
[[, 1, ], ;, dataR, [, 0, ], =, srcR0, +, srcR1, ;, dataI, [, 0, ], =, srcI0, +]
[], ;, dataR, [, 0, ], =, srcR0, +, srcR1, ;, dataI, [, 0, ], =, srcI0, +, srcI1, ;]
[=, srcR0, +, srcR1, ;, dataI, [, 0, ], =, srcI0, +, srcI1, ;, dataR, [, 1, ], =, srcR0]
[[, 0, ], =, srcR0, +, srcR1, ;, dataI, [, 0, ], =, srcI0, +, srcI1, ;, dataR, [, 1]
[], =, srcR0, +, srcR1, ;, dataI, [, 0, ], =, srcI0, +, srcI1, ;, dataR, [, 1, ], =]
[;, dataI, [, 0, ], =, srcI0, +, srcI1, ;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI]
[+, srcR1, ;, dataI, [, 0, ], =, srcI0, +, srcI1, ;, dataR, [, 1, ], =, srcR0, -, srcR1]
[;, dataI, [, 0, ], =, srcI0, +, srcI1, ;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI]
[=, srcI0, +, srcI1, ;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI, [, 1, ], =, srcI0]
[[, 0, ], =, srcI0, +, srcI1, ;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI, [, 1]
[], =, srcI0, +, srcI1, ;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI, [, 1, ], =]
[;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData]
[+, srcI1, ;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI, [, 1, ], =, srcI0, -, srcI1]
[;, dataR, [, 1, ], =, srcR0, -, srcR1, ;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData]
[=, srcR0, -, srcR1, ;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,]
[[, 1, ], =, srcR0, -, srcR1, ;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI]
[], =, srcR0, -, srcR1, ;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization]
[;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return]
[-, srcR1, ;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, )]
[;, dataI, [, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return]
[=, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return, ;, }, bitReversalShuffle2, (, dataR]
[[, 1, ], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return, ;, }]
[], =, srcI0, -, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return, ;, }, bitReversalShuffle2, (]
[;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return, ;, }, bitReversalShuffle2, (, dataR, ,, dataI, ), ;]
[-, srcI1, ;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return, ;, }, bitReversalShuffle2, (, dataR, ,, dataI]
[;, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, return, ;, }, bitReversalShuffle2, (, dataR, ,, dataI, ), ;]
[;, return, ;, }, bitReversalShuffle2, (, dataR, ,, dataI, ), ;, if, (, type, ==, TransformType, ., INVERSE, ), {]
[,, normalization, ,, type, ), ;, return, ;, }, bitReversalShuffle2, (, dataR, ,, dataI, ), ;, if, (, type, ==]
[,, type, ), ;, return, ;, }, bitReversalShuffle2, (, dataR, ,, dataI, ), ;, if, (, type, ==, TransformType, .]
[), ;, return, ;, }, bitReversalShuffle2, (, dataR, ,, dataI, ), ;, if, (, type, ==, TransformType, ., INVERSE, )]
[;, if, (, type, ==, TransformType, ., INVERSE, ), {, for, (, int, i0, =, 0, ;, i0, <, n]
[,, dataI, ), ;, if, (, type, ==, TransformType, ., INVERSE, ), {, for, (, int, i0, =, 0, ;]
[), ;, if, (, type, ==, TransformType, ., INVERSE, ), {, for, (, int, i0, =, 0, ;, i0, <]
[), {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4, ), {, final, int]
[==, TransformType, ., INVERSE, ), {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4]
[), {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4, ), {, final, int]
[., INVERSE, ), {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4, ), {]
[;, i0, <, n, ;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int]
[;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +]
[<, n, ;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =]
[;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +]
[+=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +, 2, ;]
[), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +, 2, ;, final, int]
[;, final, int, i2, =, i0, +, 2, ;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0]
[+, 1, ;, final, int, i2, =, i0, +, 2, ;, final, int, i3, =, i0, +, 3, ;, final]
[;, final, int, i2, =, i0, +, 2, ;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0]
[;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double]
[+, 2, ;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;]
[;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double]
[;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final]
[+, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ]]
[;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final]
[;, final, double, srcI0, =, dataI, [, i0, ], ;, final, double, srcR1, =, dataR, [, i2, ], ;, final]
[[, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final, double, srcR1, =, dataR, [, i2]
[], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final, double, srcR1, =, dataR, [, i2, ], ;]
[;, final, double, srcR1, =, dataR, [, i2, ], ;, final, double, srcI1, =, dataI, [, i2, ], ;, final]
[[, i0, ], ;, final, double, srcR1, =, dataR, [, i2, ], ;, final, double, srcI1, =, dataI, [, i2]
[], ;, final, double, srcR1, =, dataR, [, i2, ], ;, final, double, srcI1, =, dataI, [, i2, ], ;]
[;, final, double, srcI1, =, dataI, [, i2, ], ;, final, double, srcR2, =, dataR, [, i1, ], ;, final]
[[, i2, ], ;, final, double, srcI1, =, dataI, [, i2, ], ;, final, double, srcR2, =, dataR, [, i1]
[], ;, final, double, srcI1, =, dataI, [, i2, ], ;, final, double, srcR2, =, dataR, [, i1, ], ;]
[;, final, double, srcR2, =, dataR, [, i1, ], ;, final, double, srcI2, =, dataI, [, i1, ], ;, final]
[[, i2, ], ;, final, double, srcR2, =, dataR, [, i1, ], ;, final, double, srcI2, =, dataI, [, i1]
[], ;, final, double, srcR2, =, dataR, [, i1, ], ;, final, double, srcI2, =, dataI, [, i1, ], ;]
[;, final, double, srcI2, =, dataI, [, i1, ], ;, final, double, srcR3, =, dataR, [, i3, ], ;, final]
[[, i1, ], ;, final, double, srcI2, =, dataI, [, i1, ], ;, final, double, srcR3, =, dataR, [, i3]
[], ;, final, double, srcI2, =, dataI, [, i1, ], ;, final, double, srcR3, =, dataR, [, i3, ], ;]
[;, final, double, srcR3, =, dataR, [, i3, ], ;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR]
[[, i1, ], ;, final, double, srcR3, =, dataR, [, i3, ], ;, final, double, srcI3, =, dataI, [, i3]
[], ;, final, double, srcR3, =, dataR, [, i3, ], ;, final, double, srcI3, =, dataI, [, i3, ], ;]
[;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2]
[[, i3, ], ;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR, [, i0, ], =, srcR0, +]
[], ;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +]
[;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0]
[[, i3, ], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0]
[], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =]
[=, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +]
[[, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1]
[], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2]
[;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0]
[+, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ]]
[+, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, []
[+, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;]
[+, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, []
[+, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ]]
[;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0]
[=, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3]
[[, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2]
[], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (]
[;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ]]
[+, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, []
[+, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;]
[+, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1]
[+, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;]
[+, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, []
[;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ]]
[=, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +]
[[, i1, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ], =, srcI0]
[], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2]
[;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ]]
[+, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3]
[-, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1]
[+, (, srcI3, -, srcI1, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3]
[;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ]]
[), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2]
[-, srcI1, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR]
[), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2]
[=, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +]
[[, i1, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ], =, srcR0]
[], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1]
[;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0]
[+, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;]
[-, srcI2, +, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -]
[+, (, srcR1, -, srcR3, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;]
[;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0]
[), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =]
[-, srcR3, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2]
[), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =]
[=, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -]
[[, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1]
[], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2]
[;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0]
[-, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ]]
[+, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, []
[-, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;]
[+, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, []
[-, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ]]
[;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0]
[=, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1]
[[, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2]
[], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (]
[;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ]]
[-, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, []
[+, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;]
[-, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3]
[+, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;]
[-, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, []
[;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ]]
[=, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +]
[[, i3, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ], =, srcI0]
[], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2]
[;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else, {]
[+, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1]
[-, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3]
[+, (, srcI1, -, srcI3, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1]
[;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else, {]
[), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else]
[-, srcI3, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }]
[), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else]
[=, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else, {, for, (, int, i0, =]
[[, i3, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else, {, for, (]
[], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else, {, for, (, int, i0]
[;, }, }, else, {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4, )]
[+, (, srcR3, -, srcR1, ), ;, }, }, else, {, for, (, int, i0, =, 0, ;, i0, <]
[-, srcI2, +, (, srcR3, -, srcR1, ), ;, }, }, else, {, for, (, int, i0, =, 0, ;]
[+, (, srcR3, -, srcR1, ), ;, }, }, else, {, for, (, int, i0, =, 0, ;, i0, <]
[;, }, }, else, {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4, )]
[), ;, }, }, else, {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4]
[-, srcR1, ), ;, }, }, else, {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0]
[), ;, }, }, else, {, for, (, int, i0, =, 0, ;, i0, <, n, ;, i0, +=, 4]
[;, i0, <, n, ;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int]
[;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +]
[<, n, ;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =]
[;, i0, +=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +]
[+=, 4, ), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +, 2, ;]
[), {, final, int, i1, =, i0, +, 1, ;, final, int, i2, =, i0, +, 2, ;, final, int]
[;, final, int, i2, =, i0, +, 2, ;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0]
[+, 1, ;, final, int, i2, =, i0, +, 2, ;, final, int, i3, =, i0, +, 3, ;, final]
[;, final, int, i2, =, i0, +, 2, ;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0]
[;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double]
[+, 2, ;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;]
[;, final, int, i3, =, i0, +, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double]
[;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final]
[+, 3, ;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ]]
[;, final, double, srcR0, =, dataR, [, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final]
[;, final, double, srcI0, =, dataI, [, i0, ], ;, final, double, srcR1, =, dataR, [, i2, ], ;, final]
[[, i0, ], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final, double, srcR1, =, dataR, [, i2]
[], ;, final, double, srcI0, =, dataI, [, i0, ], ;, final, double, srcR1, =, dataR, [, i2, ], ;]
[;, final, double, srcR1, =, dataR, [, i2, ], ;, final, double, srcI1, =, dataI, [, i2, ], ;, final]
[[, i0, ], ;, final, double, srcR1, =, dataR, [, i2, ], ;, final, double, srcI1, =, dataI, [, i2]
[], ;, final, double, srcR1, =, dataR, [, i2, ], ;, final, double, srcI1, =, dataI, [, i2, ], ;]
[;, final, double, srcI1, =, dataI, [, i2, ], ;, final, double, srcR2, =, dataR, [, i1, ], ;, final]
[[, i2, ], ;, final, double, srcI1, =, dataI, [, i2, ], ;, final, double, srcR2, =, dataR, [, i1]
[], ;, final, double, srcI1, =, dataI, [, i2, ], ;, final, double, srcR2, =, dataR, [, i1, ], ;]
[;, final, double, srcR2, =, dataR, [, i1, ], ;, final, double, srcI2, =, dataI, [, i1, ], ;, final]
[[, i2, ], ;, final, double, srcR2, =, dataR, [, i1, ], ;, final, double, srcI2, =, dataI, [, i1]
[], ;, final, double, srcR2, =, dataR, [, i1, ], ;, final, double, srcI2, =, dataI, [, i1, ], ;]
[;, final, double, srcI2, =, dataI, [, i1, ], ;, final, double, srcR3, =, dataR, [, i3, ], ;, final]
[[, i1, ], ;, final, double, srcI2, =, dataI, [, i1, ], ;, final, double, srcR3, =, dataR, [, i3]
[], ;, final, double, srcI2, =, dataI, [, i1, ], ;, final, double, srcR3, =, dataR, [, i3, ], ;]
[;, final, double, srcR3, =, dataR, [, i3, ], ;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR]
[[, i1, ], ;, final, double, srcR3, =, dataR, [, i3, ], ;, final, double, srcI3, =, dataI, [, i3]
[], ;, final, double, srcR3, =, dataR, [, i3, ], ;, final, double, srcI3, =, dataI, [, i3, ], ;]
[;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2]
[[, i3, ], ;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR, [, i0, ], =, srcR0, +]
[], ;, final, double, srcI3, =, dataI, [, i3, ], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +]
[;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0]
[[, i3, ], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0]
[], ;, dataR, [, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =]
[=, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +]
[[, i0, ], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1]
[], =, srcR0, +, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2]
[;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0]
[+, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ]]
[+, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, []
[+, srcR1, +, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;]
[+, srcR2, +, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, []
[+, srcR3, ;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ]]
[;, dataI, [, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0]
[=, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1]
[[, i0, ], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2]
[], =, srcI0, +, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (]
[;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ]]
[+, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, []
[+, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;]
[+, srcI1, +, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3]
[+, srcI2, +, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;]
[+, srcI3, ;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, []
[;, dataR, [, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ]]
[=, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +]
[[, i1, ], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ], =, srcI0]
[], =, srcR0, -, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2]
[;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ]]
[+, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1]
[-, srcR2, +, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3]
[+, (, srcI1, -, srcI3, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1]
[;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ]]
[), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2]
[-, srcI3, ), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR]
[), ;, dataI, [, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2]
[=, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +]
[[, i1, ], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ], =, srcR0]
[], =, srcI0, -, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1]
[;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0]
[+, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;]
[-, srcI2, +, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -]
[+, (, srcR3, -, srcR1, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;]
[;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0]
[), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =]
[-, srcR1, ), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2]
[), ;, dataR, [, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =]
[=, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -]
[[, i2, ], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1]
[], =, srcR0, -, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2]
[;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0]
[-, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ]]
[+, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, []
[-, srcR1, +, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;]
[+, srcR2, -, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, []
[-, srcR3, ;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ]]
[;, dataI, [, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0]
[=, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3]
[[, i2, ], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2]
[], =, srcI0, -, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (]
[;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ]]
[-, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, []
[+, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;]
[-, srcI1, +, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1]
[+, srcI2, -, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;]
[-, srcI3, ;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, []
[;, dataR, [, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ]]
[=, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +]
[[, i3, ], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ], =, srcI0]
[], =, srcR0, -, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2]
[;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0]
[+, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3]
[-, srcR2, +, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1]
[+, (, srcI3, -, srcI1, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3]
[;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0]
[), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int]
[-, srcI1, ), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }]
[), ;, dataI, [, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int]
[=, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0, =, 4, ;, int, lastLogN0]
[[, i3, ], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0, =, 4]
[], =, srcI0, -, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0, =, 4, ;, int]
[;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2, ;, while, (, lastN0, <, n, ), {]
[+, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2, ;, while]
[-, srcI2, +, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2]
[+, (, srcR1, -, srcR3, ), ;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2, ;, while]
[;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2, ;, while, (, lastN0, <, n, ), {]
[), ;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2, ;, while, (, lastN0, <, n, )]
[-, srcR3, ), ;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2, ;, while, (, lastN0, <]
[), ;, }, }, int, lastN0, =, 4, ;, int, lastLogN0, =, 2, ;, while, (, lastN0, <, n, )]
[;, int, lastLogN0, =, 2, ;, while, (, lastN0, <, n, ), {, int, n0, =, lastN0, <<, 1, ;]
[;, while, (, lastN0, <, n, ), {, int, n0, =, lastN0, <<, 1, ;, int, logN0, =, lastLogN0, +]
[), {, int, n0, =, lastN0, <<, 1, ;, int, logN0, =, lastLogN0, +, 1, ;, double, wSubN0R, =, W_SUB_N_R]
[<, n, ), {, int, n0, =, lastN0, <<, 1, ;, int, logN0, =, lastLogN0, +, 1, ;, double, wSubN0R]
[), {, int, n0, =, lastN0, <<, 1, ;, int, logN0, =, lastLogN0, +, 1, ;, double, wSubN0R, =, W_SUB_N_R]
[;, int, logN0, =, lastLogN0, +, 1, ;, double, wSubN0R, =, W_SUB_N_R, [, logN0, ], ;, double, wSubN0I, =, W_SUB_N_I]
[<<, 1, ;, int, logN0, =, lastLogN0, +, 1, ;, double, wSubN0R, =, W_SUB_N_R, [, logN0, ], ;, double, wSubN0I]
[;, int, logN0, =, lastLogN0, +, 1, ;, double, wSubN0R, =, W_SUB_N_R, [, logN0, ], ;, double, wSubN0I, =, W_SUB_N_I]
[;, double, wSubN0R, =, W_SUB_N_R, [, logN0, ], ;, double, wSubN0I, =, W_SUB_N_I, [, logN0, ], ;, if, (, type]
[+, 1, ;, double, wSubN0R, =, W_SUB_N_R, [, logN0, ], ;, double, wSubN0I, =, W_SUB_N_I, [, logN0, ], ;, if]
[;, double, wSubN0R, =, W_SUB_N_R, [, logN0, ], ;, double, wSubN0I, =, W_SUB_N_I, [, logN0, ], ;, if, (, type]
[;, double, wSubN0I, =, W_SUB_N_I, [, logN0, ], ;, if, (, type, ==, TransformType, ., INVERSE, ), {, wSubN0I, =]
[[, logN0, ], ;, double, wSubN0I, =, W_SUB_N_I, [, logN0, ], ;, if, (, type, ==, TransformType, ., INVERSE, )]
[], ;, double, wSubN0I, =, W_SUB_N_I, [, logN0, ], ;, if, (, type, ==, TransformType, ., INVERSE, ), {, wSubN0I]
[;, if, (, type, ==, TransformType, ., INVERSE, ), {, wSubN0I, =, -, wSubN0I, ;, }, for, (, int, destEvenStartIndex]
[[, logN0, ], ;, if, (, type, ==, TransformType, ., INVERSE, ), {, wSubN0I, =, -, wSubN0I, ;, }, for]
[], ;, if, (, type, ==, TransformType, ., INVERSE, ), {, wSubN0I, =, -, wSubN0I, ;, }, for, (, int]
[), {, wSubN0I, =, -, wSubN0I, ;, }, for, (, int, destEvenStartIndex, =, 0, ;, destEvenStartIndex, <, n, ;, destEvenStartIndex]
[==, TransformType, ., INVERSE, ), {, wSubN0I, =, -, wSubN0I, ;, }, for, (, int, destEvenStartIndex, =, 0, ;, destEvenStartIndex]
[), {, wSubN0I, =, -, wSubN0I, ;, }, for, (, int, destEvenStartIndex, =, 0, ;, destEvenStartIndex, <, n, ;, destEvenStartIndex]
[., INVERSE, ), {, wSubN0I, =, -, wSubN0I, ;, }, for, (, int, destEvenStartIndex, =, 0, ;, destEvenStartIndex, <, n]
[=, -, wSubN0I, ;, }, for, (, int, destEvenStartIndex, =, 0, ;, destEvenStartIndex, <, n, ;, destEvenStartIndex, +=, n0, )]
[;, }, for, (, int, destEvenStartIndex, =, 0, ;, destEvenStartIndex, <, n, ;, destEvenStartIndex, +=, n0, ), {, int, destOddStartIndex]
[;, }, for, (, int, destEvenStartIndex, =, 0, ;, destEvenStartIndex, <, n, ;, destEvenStartIndex, +=, n0, ), {, int, destOddStartIndex]
[;, destEvenStartIndex, <, n, ;, destEvenStartIndex, +=, n0, ), {, int, destOddStartIndex, =, destEvenStartIndex, +, lastN0, ;, double, wSubN0ToRR, =]
[;, destEvenStartIndex, +=, n0, ), {, int, destOddStartIndex, =, destEvenStartIndex, +, lastN0, ;, double, wSubN0ToRR, =, 1, ;, double, wSubN0ToRI]
[<, n, ;, destEvenStartIndex, +=, n0, ), {, int, destOddStartIndex, =, destEvenStartIndex, +, lastN0, ;, double, wSubN0ToRR, =, 1, ;]
[;, destEvenStartIndex, +=, n0, ), {, int, destOddStartIndex, =, destEvenStartIndex, +, lastN0, ;, double, wSubN0ToRR, =, 1, ;, double, wSubN0ToRI]
[+=, n0, ), {, int, destOddStartIndex, =, destEvenStartIndex, +, lastN0, ;, double, wSubN0ToRR, =, 1, ;, double, wSubN0ToRI, =, 0]
[), {, int, destOddStartIndex, =, destEvenStartIndex, +, lastN0, ;, double, wSubN0ToRR, =, 1, ;, double, wSubN0ToRI, =, 0, ;, for]
[;, double, wSubN0ToRR, =, 1, ;, double, wSubN0ToRI, =, 0, ;, for, (, int, r, =, 0, ;, r, <]
[+, lastN0, ;, double, wSubN0ToRR, =, 1, ;, double, wSubN0ToRI, =, 0, ;, for, (, int, r, =, 0, ;]
[;, double, wSubN0ToRR, =, 1, ;, double, wSubN0ToRI, =, 0, ;, for, (, int, r, =, 0, ;, r, <]
[;, double, wSubN0ToRI, =, 0, ;, for, (, int, r, =, 0, ;, r, <, lastN0, ;, r, ++, )]
[;, for, (, int, r, =, 0, ;, r, <, lastN0, ;, r, ++, ), {, double, grR, =, dataR]
[;, r, <, lastN0, ;, r, ++, ), {, double, grR, =, dataR, [, destEvenStartIndex, +, r, ], ;, double]
[;, r, ++, ), {, double, grR, =, dataR, [, destEvenStartIndex, +, r, ], ;, double, grI, =, dataI, []
[<, lastN0, ;, r, ++, ), {, double, grR, =, dataR, [, destEvenStartIndex, +, r, ], ;, double, grI, =]
[;, r, ++, ), {, double, grR, =, dataR, [, destEvenStartIndex, +, r, ], ;, double, grI, =, dataI, []
[), {, double, grR, =, dataR, [, destEvenStartIndex, +, r, ], ;, double, grI, =, dataI, [, destEvenStartIndex, +, r]
[++, ), {, double, grR, =, dataR, [, destEvenStartIndex, +, r, ], ;, double, grI, =, dataI, [, destEvenStartIndex, +]
[;, double, grI, =, dataI, [, destEvenStartIndex, +, r, ], ;, double, hrR, =, dataR, [, destOddStartIndex, +, r, ]]
[[, destEvenStartIndex, +, r, ], ;, double, grI, =, dataI, [, destEvenStartIndex, +, r, ], ;, double, hrR, =, dataR]
[], ;, double, grI, =, dataI, [, destEvenStartIndex, +, r, ], ;, double, hrR, =, dataR, [, destOddStartIndex, +, r]
[+, r, ], ;, double, grI, =, dataI, [, destEvenStartIndex, +, r, ], ;, double, hrR, =, dataR, [, destOddStartIndex]
[], ;, double, grI, =, dataI, [, destEvenStartIndex, +, r, ], ;, double, hrR, =, dataR, [, destOddStartIndex, +, r]
[;, double, hrR, =, dataR, [, destOddStartIndex, +, r, ], ;, double, hrI, =, dataI, [, destOddStartIndex, +, r, ]]
[[, destEvenStartIndex, +, r, ], ;, double, hrR, =, dataR, [, destOddStartIndex, +, r, ], ;, double, hrI, =, dataI]
[], ;, double, hrR, =, dataR, [, destOddStartIndex, +, r, ], ;, double, hrI, =, dataI, [, destOddStartIndex, +, r]
[+, r, ], ;, double, hrR, =, dataR, [, destOddStartIndex, +, r, ], ;, double, hrI, =, dataI, [, destOddStartIndex]
[], ;, double, hrR, =, dataR, [, destOddStartIndex, +, r, ], ;, double, hrI, =, dataI, [, destOddStartIndex, +, r]
[;, double, hrI, =, dataI, [, destOddStartIndex, +, r, ], ;, dataR, [, destEvenStartIndex, +, r, ], =, grR, +]
[[, destOddStartIndex, +, r, ], ;, double, hrI, =, dataI, [, destOddStartIndex, +, r, ], ;, dataR, [, destEvenStartIndex, +]
[], ;, double, hrI, =, dataI, [, destOddStartIndex, +, r, ], ;, dataR, [, destEvenStartIndex, +, r, ], =, grR]
[+, r, ], ;, double, hrI, =, dataI, [, destOddStartIndex, +, r, ], ;, dataR, [, destEvenStartIndex, +, r, ]]
[], ;, double, hrI, =, dataI, [, destOddStartIndex, +, r, ], ;, dataR, [, destEvenStartIndex, +, r, ], =, grR]
[;, dataR, [, destEvenStartIndex, +, r, ], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, []
[[, destOddStartIndex, +, r, ], ;, dataR, [, destEvenStartIndex, +, r, ], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI]
[], ;, dataR, [, destEvenStartIndex, +, r, ], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI]
[+, r, ], ;, dataR, [, destEvenStartIndex, +, r, ], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI]
[], ;, dataR, [, destEvenStartIndex, +, r, ], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI]
[=, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +]
[[, destEvenStartIndex, +, r, ], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +]
[], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI]
[+, r, ], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ]]
[], =, grR, +, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI]
[;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, []
[-, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *]
[+, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *]
[-, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *]
[*, hrR, -, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +]
[-, wSubN0ToRI, *, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *]
[;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, []
[*, hrI, ;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;]
[;, dataI, [, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, []
[=, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR, -]
[[, destEvenStartIndex, +, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +]
[], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR]
[+, r, ], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ]]
[], =, grI, +, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR]
[;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;]
[+, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI]
[+, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR]
[+, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI]
[*, hrI, +, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR]
[+, wSubN0ToRI, *, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI]
[;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;]
[*, hrR, ;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI]
[;, dataR, [, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;]
[=, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ], =]
[[, destOddStartIndex, +, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;, dataI, []
[], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ]]
[+, r, ], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +]
[], =, grR, -, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ]]
[;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;]
[-, (, wSubN0ToRR, *, hrR, -, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -]
[;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;]
[), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, )]
[-, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +]
[*, hrR, -, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *]
[-, wSubN0ToRI, *, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +]
[), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, )]
[*, hrI, ), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *]
[), ;, dataI, [, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, )]
[=, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -]
[[, destOddStartIndex, +, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR]
[], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R]
[+, r, ], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR]
[], =, grI, -, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R]
[;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI]
[-, (, wSubN0ToRR, *, hrI, +, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *]
[;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI]
[), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +]
[+, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =]
[*, hrI, +, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double]
[+, wSubN0ToRI, *, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =]
[), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +]
[*, hrR, ), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *]
[), ;, double, nextWsubN0ToRR, =, wSubN0ToRR, *, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +]
[;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;]
[-, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;]
[*, wSubN0R, -, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =]
[-, wSubN0ToRI, *, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;]
[;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;]
[*, wSubN0I, ;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =]
[;, double, nextWsubN0ToRI, =, wSubN0ToRR, *, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;]
[;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0, ;, }]
[+, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0]
[*, wSubN0I, +, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0]
[+, wSubN0ToRI, *, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0]
[;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0, ;, }]
[*, wSubN0R, ;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0]
[;, wSubN0ToRR, =, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0, ;, }]
[=, nextWsubN0ToRR, ;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0, ;, }, normalizeTransformedData, (]
[;, wSubN0ToRI, =, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0, ;, }, normalizeTransformedData, (, dataRI, ,]
[=, nextWsubN0ToRI, ;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0, ;, }, normalizeTransformedData, (, dataRI, ,, normalization, ,]
[;, }, }, lastN0, =, n0, ;, lastLogN0, =, logN0, ;, }, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, )]
[=, n0, ;, lastLogN0, =, logN0, ;, }, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, }, public, Complex]
[;, lastLogN0, =, logN0, ;, }, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, }, public, Complex, [, ]]
[=, logN0, ;, }, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, }, public, Complex, [, ], transform, (]
[;, }, normalizeTransformedData, (, dataRI, ,, normalization, ,, type, ), ;, }, public, Complex, [, ], transform, (, final, double]
[;, }, public, Complex, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, final]
[,, normalization, ,, type, ), ;, }, public, Complex, [, ], transform, (, final, double, [, ], f, ,, final]
[,, type, ), ;, }, public, Complex, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type]
[), ;, }, public, Complex, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {]
[;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, public]
[;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, public]
[,, new, double, [, f, ., length, ], }, ;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return]
[., copyOf, (, f, ,, f, ., length, ), ,, new, double, [, f, ., length, ], }, ;, transformInPlace]
[,, f, ., length, ), ,, new, double, [, f, ., length, ], }, ;, transformInPlace, (, dataRI, ,, normalization]
[), ,, new, double, [, f, ., length, ], }, ;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;]
[., length, ), ,, new, double, [, f, ., length, ], }, ;, transformInPlace, (, dataRI, ,, normalization, ,, type]
[}, ;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }]
[], }, ;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;]
[., length, ], }, ;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI]
[;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, public, Complex, [, ], transform, (, final, UnivariateFunction, f, ,]
[,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, public, Complex, [, ], transform]
[,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, public, Complex, [, ], transform, (, final]
[), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, public, Complex, [, ], transform, (, final, UnivariateFunction, f]
[;, }, public, Complex, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max, ,]
[., createComplexArray, (, dataRI, ), ;, }, public, Complex, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min]
[), ;, }, public, Complex, [, ], transform, (, final, UnivariateFunction, f, ,, final, double, min, ,, final, double, max]
[;, return, transform, (, data, ,, type, ), ;, }, public, Complex, [, ], transform, (, final, Complex, [, ]]
[., sample, (, f, ,, min, ,, max, ,, n, ), ;, return, transform, (, data, ,, type, ), ;]
[,, min, ,, max, ,, n, ), ;, return, transform, (, data, ,, type, ), ;, }, public, Complex, []
[,, max, ,, n, ), ;, return, transform, (, data, ,, type, ), ;, }, public, Complex, [, ], transform]
[,, n, ), ;, return, transform, (, data, ,, type, ), ;, }, public, Complex, [, ], transform, (, final]
[), ;, return, transform, (, data, ,, type, ), ;, }, public, Complex, [, ], transform, (, final, Complex, []
[;, }, public, Complex, [, ], transform, (, final, Complex, [, ], f, ,, final, TransformType, type, ), {, final]
[,, type, ), ;, }, public, Complex, [, ], transform, (, final, Complex, [, ], f, ,, final, TransformType, type]
[), ;, }, public, Complex, [, ], transform, (, final, Complex, [, ], f, ,, final, TransformType, type, ), {]
[;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, @]
[., createRealImaginaryArray, (, f, ), ;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (]
[), ;, transformInPlace, (, dataRI, ,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }]
[;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, @, Deprecated, public, Object, mdfft, (, Object, mdca, ,, TransformType]
[,, normalization, ,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, @, Deprecated, public, Object, mdfft]
[,, type, ), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, @, Deprecated, public, Object, mdfft, (, Object]
[), ;, return, TransformUtils, ., createComplexArray, (, dataRI, ), ;, }, @, Deprecated, public, Object, mdfft, (, Object, mdca, ,]
[;, }, @, Deprecated, public, Object, mdfft, (, Object, mdca, ,, TransformType, type, ), {, MultiDimensionalComplexMatrix, mdcm, =, (, MultiDimensionalComplexMatrix]
[., createComplexArray, (, dataRI, ), ;, }, @, Deprecated, public, Object, mdfft, (, Object, mdca, ,, TransformType, type, ), {]
[), ;, }, @, Deprecated, public, Object, mdfft, (, Object, mdca, ,, TransformType, type, ), {, MultiDimensionalComplexMatrix, mdcm, =, (]
[;, int, [, ], dimensionSize, =, mdcm, ., getDimensionSizes, (, ), ;, for, (, int, i, =, 0, ;, i]
[;, int, [, ], dimensionSize, =, mdcm, ., getDimensionSizes, (, ), ;, for, (, int, i, =, 0, ;, i]
[., clone, (, ), ;, int, [, ], dimensionSize, =, mdcm, ., getDimensionSizes, (, ), ;, for, (, int, i]
[), ., clone, (, ), ;, int, [, ], dimensionSize, =, mdcm, ., getDimensionSizes, (, ), ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i, ++, ), {, mdfft, (]
[., getDimensionSizes, (, ), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i, ++]
[;, i, <, dimensionSize, ., length, ;, i, ++, ), {, mdfft, (, mdcm, ,, type, ,, i, ,, new]
[;, i, ++, ), {, mdfft, (, mdcm, ,, type, ,, i, ,, new, int, [, 0, ], ), ;]
[<, dimensionSize, ., length, ;, i, ++, ), {, mdfft, (, mdcm, ,, type, ,, i, ,, new, int, []
[;, i, ++, ), {, mdfft, (, mdcm, ,, type, ,, i, ,, new, int, [, 0, ], ), ;]
[., length, ;, i, ++, ), {, mdfft, (, mdcm, ,, type, ,, i, ,, new, int, [, 0, ]]
[), {, mdfft, (, mdcm, ,, type, ,, i, ,, new, int, [, 0, ], ), ;, }, return, mdcm]
[++, ), {, mdfft, (, mdcm, ,, type, ,, i, ,, new, int, [, 0, ], ), ;, }, return]
[;, }, return, mdcm, ., getArray, (, ), ;, }, @, Deprecated, private, void, mdfft, (, MultiDimensionalComplexMatrix, mdcm, ,, TransformType]
[,, type, ,, i, ,, new, int, [, 0, ], ), ;, }, return, mdcm, ., getArray, (, ), ;]
[,, i, ,, new, int, [, 0, ], ), ;, }, return, mdcm, ., getArray, (, ), ;, }, @]
[,, new, int, [, 0, ], ), ;, }, return, mdcm, ., getArray, (, ), ;, }, @, Deprecated, private]
[), ;, }, return, mdcm, ., getArray, (, ), ;, }, @, Deprecated, private, void, mdfft, (, MultiDimensionalComplexMatrix, mdcm, ,]
[], ), ;, }, return, mdcm, ., getArray, (, ), ;, }, @, Deprecated, private, void, mdfft, (, MultiDimensionalComplexMatrix, mdcm]
[;, }, @, Deprecated, private, void, mdfft, (, MultiDimensionalComplexMatrix, mdcm, ,, TransformType, type, ,, int, d, ,, int, [, ]]
[., getArray, (, ), ;, }, @, Deprecated, private, void, mdfft, (, MultiDimensionalComplexMatrix, mdcm, ,, TransformType, type, ,, int, d]
[;, if, (, subVector, ., length, ==, dimensionSize, ., length, ), {, Complex, [, ], temp, =, new, Complex, []
[., getDimensionSizes, (, ), ;, if, (, subVector, ., length, ==, dimensionSize, ., length, ), {, Complex, [, ], temp]
[), {, Complex, [, ], temp, =, new, Complex, [, dimensionSize, [, d, ], ], ;, for, (, int, i]
[==, dimensionSize, ., length, ), {, Complex, [, ], temp, =, new, Complex, [, dimensionSize, [, d, ], ], ;]
[., length, ==, dimensionSize, ., length, ), {, Complex, [, ], temp, =, new, Complex, [, dimensionSize, [, d, ]]
[), {, Complex, [, ], temp, =, new, Complex, [, dimensionSize, [, d, ], ], ;, for, (, int, i]
[., length, ), {, Complex, [, ], temp, =, new, Complex, [, dimensionSize, [, d, ], ], ;, for, (]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d, ], ;, i, ++, ), {, subVector]
[], ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d, ], ;, i, ++, ), {]
[[, d, ], ], ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d, ], ;, i]
[], ], ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d, ], ;, i, ++, )]
[;, i, <, dimensionSize, [, d, ], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, temp]
[;, i, ++, ), {, subVector, [, d, ], =, i, ;, temp, [, i, ], =, mdcm, ., get]
[<, dimensionSize, [, d, ], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, temp, [, i]
[;, i, ++, ), {, subVector, [, d, ], =, i, ;, temp, [, i, ], =, mdcm, ., get]
[[, d, ], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, temp, [, i, ], =]
[], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, temp, [, i, ], =, mdcm, .]
[), {, subVector, [, d, ], =, i, ;, temp, [, i, ], =, mdcm, ., get, (, subVector, )]
[++, ), {, subVector, [, d, ], =, i, ;, temp, [, i, ], =, mdcm, ., get, (, subVector]
[=, i, ;, temp, [, i, ], =, mdcm, ., get, (, subVector, ), ;, }, temp, =, transform, (]
[[, d, ], =, i, ;, temp, [, i, ], =, mdcm, ., get, (, subVector, ), ;, }, temp]
[], =, i, ;, temp, [, i, ], =, mdcm, ., get, (, subVector, ), ;, }, temp, =, transform]
[;, temp, [, i, ], =, mdcm, ., get, (, subVector, ), ;, }, temp, =, transform, (, temp, ,]
[=, mdcm, ., get, (, subVector, ), ;, }, temp, =, transform, (, temp, ,, type, ), ;, for, (]
[[, i, ], =, mdcm, ., get, (, subVector, ), ;, }, temp, =, transform, (, temp, ,, type, )]
[], =, mdcm, ., get, (, subVector, ), ;, }, temp, =, transform, (, temp, ,, type, ), ;, for]
[;, }, temp, =, transform, (, temp, ,, type, ), ;, for, (, int, i, =, 0, ;, i, <]
[., get, (, subVector, ), ;, }, temp, =, transform, (, temp, ,, type, ), ;, for, (, int, i]
[), ;, }, temp, =, transform, (, temp, ,, type, ), ;, for, (, int, i, =, 0, ;, i]
[=, transform, (, temp, ,, type, ), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d, ], ;, i, ++, ), {, subVector]
[,, type, ), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d, ], ;, i, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, d, ], ;, i, ++, ), {]
[;, i, <, dimensionSize, [, d, ], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, mdcm]
[;, i, ++, ), {, subVector, [, d, ], =, i, ;, mdcm, ., set, (, temp, [, i, ]]
[<, dimensionSize, [, d, ], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, mdcm, ., set]
[;, i, ++, ), {, subVector, [, d, ], =, i, ;, mdcm, ., set, (, temp, [, i, ]]
[[, d, ], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, mdcm, ., set, (, temp]
[], ;, i, ++, ), {, subVector, [, d, ], =, i, ;, mdcm, ., set, (, temp, [, i]
[), {, subVector, [, d, ], =, i, ;, mdcm, ., set, (, temp, [, i, ], ,, subVector, )]
[++, ), {, subVector, [, d, ], =, i, ;, mdcm, ., set, (, temp, [, i, ], ,, subVector]
[=, i, ;, mdcm, ., set, (, temp, [, i, ], ,, subVector, ), ;, }, }, else, {, int]
[[, d, ], =, i, ;, mdcm, ., set, (, temp, [, i, ], ,, subVector, ), ;, }, }]
[], =, i, ;, mdcm, ., set, (, temp, [, i, ], ,, subVector, ), ;, }, }, else, {]
[;, mdcm, ., set, (, temp, [, i, ], ,, subVector, ), ;, }, }, else, {, int, [, ]]
[;, }, }, else, {, int, [, ], vector, =, new, int, [, subVector, ., length, +, 1, ], ;]
[., set, (, temp, [, i, ], ,, subVector, ), ;, }, }, else, {, int, [, ], vector, =]
[,, subVector, ), ;, }, }, else, {, int, [, ], vector, =, new, int, [, subVector, ., length, +]
[[, i, ], ,, subVector, ), ;, }, }, else, {, int, [, ], vector, =, new, int, [, subVector]
[], ,, subVector, ), ;, }, }, else, {, int, [, ], vector, =, new, int, [, subVector, ., length]
[), ;, }, }, else, {, int, [, ], vector, =, new, int, [, subVector, ., length, +, 1, ]]
[;, System, ., arraycopy, (, subVector, ,, 0, ,, vector, ,, 0, ,, subVector, ., length, ), ;, if, (]
[], ;, System, ., arraycopy, (, subVector, ,, 0, ,, vector, ,, 0, ,, subVector, ., length, ), ;, if]
[+, 1, ], ;, System, ., arraycopy, (, subVector, ,, 0, ,, vector, ,, 0, ,, subVector, ., length, )]
[., length, +, 1, ], ;, System, ., arraycopy, (, subVector, ,, 0, ,, vector, ,, 0, ,, subVector, .]
[], ;, System, ., arraycopy, (, subVector, ,, 0, ,, vector, ,, 0, ,, subVector, ., length, ), ;, if]
[;, if, (, subVector, ., length, ==, d, ), {, vector, [, d, ], =, 0, ;, mdfft, (, mdcm]
[., arraycopy, (, subVector, ,, 0, ,, vector, ,, 0, ,, subVector, ., length, ), ;, if, (, subVector, .]
[,, 0, ,, vector, ,, 0, ,, subVector, ., length, ), ;, if, (, subVector, ., length, ==, d, )]
[,, vector, ,, 0, ,, subVector, ., length, ), ;, if, (, subVector, ., length, ==, d, ), {, vector]
[,, 0, ,, subVector, ., length, ), ;, if, (, subVector, ., length, ==, d, ), {, vector, [, d]
[,, subVector, ., length, ), ;, if, (, subVector, ., length, ==, d, ), {, vector, [, d, ], =]
[), ;, if, (, subVector, ., length, ==, d, ), {, vector, [, d, ], =, 0, ;, mdfft, (]
[., length, ), ;, if, (, subVector, ., length, ==, d, ), {, vector, [, d, ], =, 0, ;]
[), {, vector, [, d, ], =, 0, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;]
[==, d, ), {, vector, [, d, ], =, 0, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector]
[., length, ==, d, ), {, vector, [, d, ], =, 0, ;, mdfft, (, mdcm, ,, type, ,, d]
[), {, vector, [, d, ], =, 0, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;]
[=, 0, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, else, {, for, (, int]
[[, d, ], =, 0, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, else, {]
[], =, 0, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, else, {, for, (]
[;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, else, {, for, (, int, i, =]
[;, }, else, {, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, subVector, ., length, ], ;]
[,, type, ,, d, ,, vector, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <]
[,, d, ,, vector, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, dimensionSize, []
[,, vector, ), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, subVector, .]
[), ;, }, else, {, for, (, int, i, =, 0, ;, i, <, dimensionSize, [, subVector, ., length, ]]
[;, i, <, dimensionSize, [, subVector, ., length, ], ;, i, ++, ), {, vector, [, subVector, ., length, ]]
[;, i, ++, ), {, vector, [, subVector, ., length, ], =, i, ;, mdfft, (, mdcm, ,, type, ,]
[<, dimensionSize, [, subVector, ., length, ], ;, i, ++, ), {, vector, [, subVector, ., length, ], =, i]
[;, i, ++, ), {, vector, [, subVector, ., length, ], =, i, ;, mdfft, (, mdcm, ,, type, ,]
[[, subVector, ., length, ], ;, i, ++, ), {, vector, [, subVector, ., length, ], =, i, ;, mdfft]
[], ;, i, ++, ), {, vector, [, subVector, ., length, ], =, i, ;, mdfft, (, mdcm, ,, type]
[., length, ], ;, i, ++, ), {, vector, [, subVector, ., length, ], =, i, ;, mdfft, (, mdcm]
[), {, vector, [, subVector, ., length, ], =, i, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector]
[++, ), {, vector, [, subVector, ., length, ], =, i, ;, mdfft, (, mdcm, ,, type, ,, d, ,]
[=, i, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, }, }, }, @, Deprecated]
[[, subVector, ., length, ], =, i, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }]
[], =, i, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, }, }, }, @]
[., length, ], =, i, ;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, }, }]
[;, mdfft, (, mdcm, ,, type, ,, d, ,, vector, ), ;, }, }, }, }, @, Deprecated, private, static]
[;, }, }, }, }, @, Deprecated, private, static, class, MultiDimensionalComplexMatrix, implements, Cloneable, {, protected, int, [, ], dimensionSize, ;]
[,, type, ,, d, ,, vector, ), ;, }, }, }, }, @, Deprecated, private, static, class, MultiDimensionalComplexMatrix, implements, Cloneable]
[,, d, ,, vector, ), ;, }, }, }, }, @, Deprecated, private, static, class, MultiDimensionalComplexMatrix, implements, Cloneable, {, protected]
[,, vector, ), ;, }, }, }, }, @, Deprecated, private, static, class, MultiDimensionalComplexMatrix, implements, Cloneable, {, protected, int, []
[), ;, }, }, }, }, @, Deprecated, private, static, class, MultiDimensionalComplexMatrix, implements, Cloneable, {, protected, int, [, ], dimensionSize]
[=, multiDimensionalComplexArray, ;, int, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object, [, ]]
[., multiDimensionalComplexArray, =, multiDimensionalComplexArray, ;, int, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object]
[;, int, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object, [, ], ;, )]
[;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object, [, ], ;, ), {, final, Object, [, ]]
[;, lastDimension, instanceof, Object, [, ], ;, ), {, final, Object, [, ], array, =, (, Object, [, ], )]
[;, ), {, final, Object, [, ], array, =, (, Object, [, ], ), lastDimension, ;, numOfDimensions, ++, ;, lastDimension]
[instanceof, Object, [, ], ;, ), {, final, Object, [, ], array, =, (, Object, [, ], ), lastDimension, ;]
[;, numOfDimensions, ++, ;, lastDimension, =, array, [, 0, ], ;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;]
[;, numOfDimensions, ++, ;, lastDimension, =, array, [, 0, ], ;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;]
[;, lastDimension, =, array, [, 0, ], ;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;, numOfDimensions, =, 0]
[++, ;, lastDimension, =, array, [, 0, ], ;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;, numOfDimensions, =]
[=, array, [, 0, ], ;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;, numOfDimensions, =, 0, ;, for]
[;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray]
[[, 0, ], ;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;, numOfDimensions, =, 0, ;, for, (, Object]
[], ;, }, dimensionSize, =, new, int, [, numOfDimensions, ], ;, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =]
[=, new, int, [, numOfDimensions, ], ;, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof]
[;, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object, [, ], ;, ), {]
[], ;, numOfDimensions, =, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object, [, ], ;, )]
[=, 0, ;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object, [, ], ;, ), {, final, Object]
[;, for, (, Object, lastDimension, =, multiDimensionalComplexArray, ;, lastDimension, instanceof, Object, [, ], ;, ), {, final, Object, [, ]]
[;, lastDimension, instanceof, Object, [, ], ;, ), {, final, Object, [, ], array, =, (, Object, [, ], )]
[;, ), {, final, Object, [, ], array, =, (, Object, [, ], ), lastDimension, ;, dimensionSize, [, numOfDimensions, ++]
[instanceof, Object, [, ], ;, ), {, final, Object, [, ], array, =, (, Object, [, ], ), lastDimension, ;]
[;, dimensionSize, [, numOfDimensions, ++, ], =, array, ., length, ;, lastDimension, =, array, [, 0, ], ;, }, }]
[;, dimensionSize, [, numOfDimensions, ++, ], =, array, ., length, ;, lastDimension, =, array, [, 0, ], ;, }, }]
[=, array, ., length, ;, lastDimension, =, array, [, 0, ], ;, }, }, public, Complex, get, (, int, ...]
[[, numOfDimensions, ++, ], =, array, ., length, ;, lastDimension, =, array, [, 0, ], ;, }, }, public, Complex]
[], =, array, ., length, ;, lastDimension, =, array, [, 0, ], ;, }, }, public, Complex, get, (, int]
[++, ], =, array, ., length, ;, lastDimension, =, array, [, 0, ], ;, }, }, public, Complex, get, (]
[;, lastDimension, =, array, [, 0, ], ;, }, }, public, Complex, get, (, int, ..., vector, ), throws, DimensionMismatchException]
[., length, ;, lastDimension, =, array, [, 0, ], ;, }, }, public, Complex, get, (, int, ..., vector, )]
[=, array, [, 0, ], ;, }, }, public, Complex, get, (, int, ..., vector, ), throws, DimensionMismatchException, {, if]
[;, }, }, public, Complex, get, (, int, ..., vector, ), throws, DimensionMismatchException, {, if, (, vector, ==, null, )]
[[, 0, ], ;, }, }, public, Complex, get, (, int, ..., vector, ), throws, DimensionMismatchException, {, if, (, vector]
[], ;, }, }, public, Complex, get, (, int, ..., vector, ), throws, DimensionMismatchException, {, if, (, vector, ==, null]
[), {, if, (, dimensionSize, ., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length]
[==, null, ), {, if, (, dimensionSize, ., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize]
[), {, if, (, dimensionSize, ., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length]
[), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null, ;, }, if, (]
[>, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null, ;, }]
[., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null]
[), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null, ;, }, if, (]
[;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException]
[,, dimensionSize, ., length, ), ;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length]
[), ;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {, throw, new]
[., length, ), ;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {]
[;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length]
[), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }, Object, lastDimension, =, multiDimensionalComplexArray]
[!=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }]
[., length, !=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, )]
[), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }, Object, lastDimension, =, multiDimensionalComplexArray]
[., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }, Object, lastDimension]
[;, }, Object, lastDimension, =, multiDimensionalComplexArray, ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;]
[,, dimensionSize, ., length, ), ;, }, Object, lastDimension, =, multiDimensionalComplexArray, ;, for, (, int, i, =, 0, ;, i]
[., length, ,, dimensionSize, ., length, ), ;, }, Object, lastDimension, =, multiDimensionalComplexArray, ;, for, (, int, i, =, 0]
[), ;, }, Object, lastDimension, =, multiDimensionalComplexArray, ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length]
[., length, ), ;, }, Object, lastDimension, =, multiDimensionalComplexArray, ;, for, (, int, i, =, 0, ;, i, <, dimensionSize]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i, ++, ), {, lastDimension, =]
[;, i, <, dimensionSize, ., length, ;, i, ++, ), {, lastDimension, =, (, (, Object, [, ], ), lastDimension]
[;, i, ++, ), {, lastDimension, =, (, (, Object, [, ], ), lastDimension, ), [, vector, [, i, ]]
[<, dimensionSize, ., length, ;, i, ++, ), {, lastDimension, =, (, (, Object, [, ], ), lastDimension, ), []
[;, i, ++, ), {, lastDimension, =, (, (, Object, [, ], ), lastDimension, ), [, vector, [, i, ]]
[., length, ;, i, ++, ), {, lastDimension, =, (, (, Object, [, ], ), lastDimension, ), [, vector, []
[), {, lastDimension, =, (, (, Object, [, ], ), lastDimension, ), [, vector, [, i, ], ], ;, }]
[++, ), {, lastDimension, =, (, (, Object, [, ], ), lastDimension, ), [, vector, [, i, ], ], ;]
[=, (, (, Object, [, ], ), lastDimension, ), [, vector, [, i, ], ], ;, }, return, (, Complex]
[;, }, return, (, Complex, ), lastDimension, ;, }, public, Complex, set, (, Complex, magnitude, ,, int, ..., vector, )]
[[, vector, [, i, ], ], ;, }, return, (, Complex, ), lastDimension, ;, }, public, Complex, set, (, Complex]
[), [, vector, [, i, ], ], ;, }, return, (, Complex, ), lastDimension, ;, }, public, Complex, set, (]
[), [, vector, [, i, ], ], ;, }, return, (, Complex, ), lastDimension, ;, }, public, Complex, set, (]
[], ;, }, return, (, Complex, ), lastDimension, ;, }, public, Complex, set, (, Complex, magnitude, ,, int, ..., vector]
[[, i, ], ], ;, }, return, (, Complex, ), lastDimension, ;, }, public, Complex, set, (, Complex, magnitude, ,]
[], ], ;, }, return, (, Complex, ), lastDimension, ;, }, public, Complex, set, (, Complex, magnitude, ,, int, ...]
[;, }, public, Complex, set, (, Complex, magnitude, ,, int, ..., vector, ), throws, DimensionMismatchException, {, if, (, vector, ==]
[;, }, public, Complex, set, (, Complex, magnitude, ,, int, ..., vector, ), throws, DimensionMismatchException, {, if, (, vector, ==]
[), {, if, (, dimensionSize, ., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length]
[==, null, ), {, if, (, dimensionSize, ., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize]
[), {, if, (, dimensionSize, ., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length]
[), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null, ;, }, if, (]
[>, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null, ;, }]
[., length, >, 0, ), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null]
[), {, throw, new, DimensionMismatchException, (, 0, ,, dimensionSize, ., length, ), ;, }, return, null, ;, }, if, (]
[;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException]
[,, dimensionSize, ., length, ), ;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length]
[), ;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {, throw, new]
[., length, ), ;, }, return, null, ;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {]
[;, }, if, (, vector, ., length, !=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length]
[), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }, Object, [, ], lastDimension]
[!=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }]
[., length, !=, dimensionSize, ., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, )]
[), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }, Object, [, ], lastDimension]
[., length, ), {, throw, new, DimensionMismatchException, (, vector, ., length, ,, dimensionSize, ., length, ), ;, }, Object, []
[;, }, Object, [, ], lastDimension, =, (, Object, [, ], ), multiDimensionalComplexArray, ;, for, (, int, i, =, 0]
[,, dimensionSize, ., length, ), ;, }, Object, [, ], lastDimension, =, (, Object, [, ], ), multiDimensionalComplexArray, ;, for]
[., length, ,, dimensionSize, ., length, ), ;, }, Object, [, ], lastDimension, =, (, Object, [, ], ), multiDimensionalComplexArray]
[), ;, }, Object, [, ], lastDimension, =, (, Object, [, ], ), multiDimensionalComplexArray, ;, for, (, int, i, =]
[., length, ), ;, }, Object, [, ], lastDimension, =, (, Object, [, ], ), multiDimensionalComplexArray, ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, -, 1, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, -, 1, ;, i, ++, ), {]
[;, i, <, dimensionSize, ., length, -, 1, ;, i, ++, ), {, lastDimension, =, (, Object, [, ], )]
[;, i, ++, ), {, lastDimension, =, (, Object, [, ], ), lastDimension, [, vector, [, i, ], ], ;]
[<, dimensionSize, ., length, -, 1, ;, i, ++, ), {, lastDimension, =, (, Object, [, ], ), lastDimension, []
[;, i, ++, ), {, lastDimension, =, (, Object, [, ], ), lastDimension, [, vector, [, i, ], ], ;]
[-, 1, ;, i, ++, ), {, lastDimension, =, (, Object, [, ], ), lastDimension, [, vector, [, i, ]]
[., length, -, 1, ;, i, ++, ), {, lastDimension, =, (, Object, [, ], ), lastDimension, [, vector, []
[;, i, ++, ), {, lastDimension, =, (, Object, [, ], ), lastDimension, [, vector, [, i, ], ], ;]
[), {, lastDimension, =, (, Object, [, ], ), lastDimension, [, vector, [, i, ], ], ;, }, Complex, lastValue]
[++, ), {, lastDimension, =, (, Object, [, ], ), lastDimension, [, vector, [, i, ], ], ;, }, Complex]
[=, (, Object, [, ], ), lastDimension, [, vector, [, i, ], ], ;, }, Complex, lastValue, =, (, Complex]
[;, }, Complex, lastValue, =, (, Complex, ), lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], ;]
[;, }, Complex, lastValue, =, (, Complex, ), lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], ;]
[[, vector, [, i, ], ], ;, }, Complex, lastValue, =, (, Complex, ), lastDimension, [, vector, [, dimensionSize, .]
[], ;, }, Complex, lastValue, =, (, Complex, ), lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ]]
[[, i, ], ], ;, }, Complex, lastValue, =, (, Complex, ), lastDimension, [, vector, [, dimensionSize, ., length, -]
[], ], ;, }, Complex, lastValue, =, (, Complex, ), lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ]]
[;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;, }, public]
[;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;, }, public]
[[, vector, [, dimensionSize, ., length, -, 1, ], ], ;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1]
[], ;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;, }]
[[, dimensionSize, ., length, -, 1, ], ], ;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ]]
[], ], ;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;]
[-, 1, ], ], ;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return]
[., length, -, 1, ], ], ;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude]
[], ], ;, lastDimension, [, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;]
[=, magnitude, ;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes, (, ), {, return, dimensionSize, ., clone, (]
[[, vector, [, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;, }, public, int, []
[], =, magnitude, ;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes, (, ), {, return, dimensionSize, ., clone]
[[, dimensionSize, ., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes]
[], ], =, magnitude, ;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes, (, ), {, return, dimensionSize, .]
[-, 1, ], ], =, magnitude, ;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes, (, ), {, return]
[., length, -, 1, ], ], =, magnitude, ;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes, (, )]
[], ], =, magnitude, ;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes, (, ), {, return, dimensionSize, .]
[;, return, lastValue, ;, }, public, int, [, ], getDimensionSizes, (, ), {, return, dimensionSize, ., clone, (, ), ;]
[;, }, public, int, [, ], getDimensionSizes, (, ), {, return, dimensionSize, ., clone, (, ), ;, }, public, Object]
[;, }, public, Object, getArray, (, ), {, return, multiDimensionalComplexArray, ;, }, @, Override, public, Object, clone, (, ), {]
[., clone, (, ), ;, }, public, Object, getArray, (, ), {, return, multiDimensionalComplexArray, ;, }, @, Override, public, Object]
[;, }, @, Override, public, Object, clone, (, ), {, MultiDimensionalComplexMatrix, mdcm, =, new, MultiDimensionalComplexMatrix, (, Array, ., newInstance, (]
[;, clone, (, mdcm, ), ;, return, mdcm, ;, }, private, void, clone, (, MultiDimensionalComplexMatrix, mdcm, ), {, int, []
[), ;, clone, (, mdcm, ), ;, return, mdcm, ;, }, private, void, clone, (, MultiDimensionalComplexMatrix, mdcm, ), {, int]
[., newInstance, (, Complex, ., class, ,, dimensionSize, ), ), ;, clone, (, mdcm, ), ;, return, mdcm, ;, }]
[,, dimensionSize, ), ), ;, clone, (, mdcm, ), ;, return, mdcm, ;, }, private, void, clone, (, MultiDimensionalComplexMatrix, mdcm]
[), ), ;, clone, (, mdcm, ), ;, return, mdcm, ;, }, private, void, clone, (, MultiDimensionalComplexMatrix, mdcm, ), {]
[;, return, mdcm, ;, }, private, void, clone, (, MultiDimensionalComplexMatrix, mdcm, ), {, int, [, ], vector, =, new, int]
[), ;, return, mdcm, ;, }, private, void, clone, (, MultiDimensionalComplexMatrix, mdcm, ), {, int, [, ], vector, =, new]
[;, }, private, void, clone, (, MultiDimensionalComplexMatrix, mdcm, ), {, int, [, ], vector, =, new, int, [, dimensionSize, .]
[;, int, size, =, 1, ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i]
[], ;, int, size, =, 1, ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;]
[., length, ], ;, int, size, =, 1, ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, .]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i, ++, ), {, size, *=]
[;, i, <, dimensionSize, ., length, ;, i, ++, ), {, size, *=, dimensionSize, [, i, ], ;, }, int]
[;, i, ++, ), {, size, *=, dimensionSize, [, i, ], ;, }, int, [, ], [, ], vectorList, =]
[<, dimensionSize, ., length, ;, i, ++, ), {, size, *=, dimensionSize, [, i, ], ;, }, int, [, ]]
[;, i, ++, ), {, size, *=, dimensionSize, [, i, ], ;, }, int, [, ], [, ], vectorList, =]
[., length, ;, i, ++, ), {, size, *=, dimensionSize, [, i, ], ;, }, int, [, ], [, ]]
[), {, size, *=, dimensionSize, [, i, ], ;, }, int, [, ], [, ], vectorList, =, new, int, []
[++, ), {, size, *=, dimensionSize, [, i, ], ;, }, int, [, ], [, ], vectorList, =, new, int]
[*=, dimensionSize, [, i, ], ;, }, int, [, ], [, ], vectorList, =, new, int, [, size, ], []
[;, }, int, [, ], [, ], vectorList, =, new, int, [, size, ], [, dimensionSize, ., length, ], ;]
[[, i, ], ;, }, int, [, ], [, ], vectorList, =, new, int, [, size, ], [, dimensionSize, .]
[], ;, }, int, [, ], [, ], vectorList, =, new, int, [, size, ], [, dimensionSize, ., length, ]]
[;, for, (, int, [, ], nextVector, :, vectorList, ), {, System, ., arraycopy, (, vector, ,, 0, ,, nextVector]
[], [, dimensionSize, ., length, ], ;, for, (, int, [, ], nextVector, :, vectorList, ), {, System, ., arraycopy]
[], ;, for, (, int, [, ], nextVector, :, vectorList, ), {, System, ., arraycopy, (, vector, ,, 0, ,]
[., length, ], ;, for, (, int, [, ], nextVector, :, vectorList, ), {, System, ., arraycopy, (, vector, ,]
[), {, System, ., arraycopy, (, vector, ,, 0, ,, nextVector, ,, 0, ,, dimensionSize, ., length, ), ;, for]
[;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i, ++, ), {, vector, []
[., arraycopy, (, vector, ,, 0, ,, nextVector, ,, 0, ,, dimensionSize, ., length, ), ;, for, (, int, i]
[,, 0, ,, nextVector, ,, 0, ,, dimensionSize, ., length, ), ;, for, (, int, i, =, 0, ;, i]
[,, nextVector, ,, 0, ,, dimensionSize, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize]
[,, 0, ,, dimensionSize, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length]
[,, dimensionSize, ., length, ), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i]
[), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i, ++, ), {, vector]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, dimensionSize, ., length, ;, i, ++, )]
[;, i, <, dimensionSize, ., length, ;, i, ++, ), {, vector, [, i, ], ++, ;, if, (, vector]
[;, i, ++, ), {, vector, [, i, ], ++, ;, if, (, vector, [, i, ], <, dimensionSize, []
[<, dimensionSize, ., length, ;, i, ++, ), {, vector, [, i, ], ++, ;, if, (, vector, [, i]
[;, i, ++, ), {, vector, [, i, ], ++, ;, if, (, vector, [, i, ], <, dimensionSize, []
[., length, ;, i, ++, ), {, vector, [, i, ], ++, ;, if, (, vector, [, i, ], <]
[), {, vector, [, i, ], ++, ;, if, (, vector, [, i, ], <, dimensionSize, [, i, ], )]
[++, ), {, vector, [, i, ], ++, ;, if, (, vector, [, i, ], <, dimensionSize, [, i, ]]
[;, if, (, vector, [, i, ], <, dimensionSize, [, i, ], ), {, break, ;, }, else, {, vector]
[++, ;, if, (, vector, [, i, ], <, dimensionSize, [, i, ], ), {, break, ;, }, else, {]
[[, i, ], ++, ;, if, (, vector, [, i, ], <, dimensionSize, [, i, ], ), {, break, ;]
[], ++, ;, if, (, vector, [, i, ], <, dimensionSize, [, i, ], ), {, break, ;, }, else]
[), {, break, ;, }, else, {, vector, [, i, ], =, 0, ;, }, }, }, for, (, int]
[<, dimensionSize, [, i, ], ), {, break, ;, }, else, {, vector, [, i, ], =, 0, ;, }]
[[, i, ], <, dimensionSize, [, i, ], ), {, break, ;, }, else, {, vector, [, i, ], =]
[], <, dimensionSize, [, i, ], ), {, break, ;, }, else, {, vector, [, i, ], =, 0, ;]
[), {, break, ;, }, else, {, vector, [, i, ], =, 0, ;, }, }, }, for, (, int]
[[, i, ], ), {, break, ;, }, else, {, vector, [, i, ], =, 0, ;, }, }, }]
[], ), {, break, ;, }, else, {, vector, [, i, ], =, 0, ;, }, }, }, for, (]
[=, 0, ;, }, }, }, for, (, int, [, ], nextVector, :, vectorList, ), {, mdcm, ., set, (]
[[, i, ], =, 0, ;, }, }, }, for, (, int, [, ], nextVector, :, vectorList, ), {, mdcm]
[], =, 0, ;, }, }, }, for, (, int, [, ], nextVector, :, vectorList, ), {, mdcm, ., set]
[;, }, }, }, for, (, int, [, ], nextVector, :, vectorList, ), {, mdcm, ., set, (, get, (]
[), {, mdcm, ., set, (, get, (, nextVector, ), ,, nextVector, ), ;, }, }, }, }]
[;, }, }, }, }]
[., set, (, get, (, nextVector, ), ,, nextVector, ), ;, }, }, }, }]
[,, nextVector, ), ;, }, }, }, }]
[), ,, nextVector, ), ;, }, }, }, }]
[), ;, }, }, }, }]
