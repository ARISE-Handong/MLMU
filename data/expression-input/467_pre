[CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, boolean, checkOnly, ;, PrepareAst, (, AbstractCompiler, compiler, ), {, this, (]
[private, final, AbstractCompiler, compiler, ;, private, final, boolean, checkOnly, ;, PrepareAst, (, AbstractCompiler, compiler, ), {, this, (, compiler, ,]
[compiler, ), {, this, (, compiler, ,, false, ), ;, }, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {]
[compiler, ), {, this, (, compiler, ,, false, ), ;, }, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {]
[(, compiler, ,, false, ), ;, }, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {, this, ., compiler, =]
[,, false, ), ;, }, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {, this, ., compiler, =, compiler, ;]
[,, false, ), ;, }, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {, this, ., compiler, =, compiler, ;]
[}, PrepareAst, (, AbstractCompiler, compiler, ,, boolean, checkOnly, ), {, this, ., compiler, =, compiler, ;, this, ., checkOnly, =]
[., compiler, =, compiler, ;, this, ., checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (]
[compiler, ;, this, ., checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {]
[compiler, ;, this, ., checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {]
[checkOnly, =, checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {, Preconditions, ., checkState, (]
[checkOnly, ;, }, private, void, reportChange, (, ), {, if, (, checkOnly, ), {, Preconditions, ., checkState, (, false, ,]
["normalizeNodeType constraints violated", ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (]
[}, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, checkOnly, ), {]
[@, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, checkOnly, ), {, normalizeNodeTypes, (]
[,, Node, root, ), {, if, (, checkOnly, ), {, normalizeNodeTypes, (, root, ), ;, }, else, {, if, (]
[,, Node, root, ), {, if, (, checkOnly, ), {, normalizeNodeTypes, (, root, ), ;, }, else, {, if, (]
[root, ), {, if, (, checkOnly, ), {, normalizeNodeTypes, (, root, ), ;, }, else, {, if, (, externs, !=]
[if, (, checkOnly, ), {, normalizeNodeTypes, (, root, ), ;, }, else, {, if, (, externs, !=, null, ), {]
[if, (, checkOnly, ), {, normalizeNodeTypes, (, root, ), ;, }, else, {, if, (, externs, !=, null, ), {]
[{, normalizeNodeTypes, (, root, ), ;, }, else, {, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (]
[(, root, ), ;, }, else, {, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, }, else, {, if, (, externs, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[null, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (]
[null, ), {, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (]
[{, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=]
[traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=, null, ), {]
[traverse, (, compiler, ,, externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=, null, ), {]
[externs, ,, new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=, null, ), {, NodeTraversal, ., traverse, (]
[new, PrepareAnnotations, (, ), ), ;, }, if, (, root, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[(, ), ), ;, }, if, (, root, !=, null, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[,, root, ,, new, PrepareAnnotations, (, ), ), ;, }, }, }, private, void, normalizeNodeTypes, (, Node, n, ), {]
[,, new, PrepareAnnotations, (, ), ), ;, }, }, }, private, void, normalizeNodeTypes, (, Node, n, ), {, normalizeBlocks, (]
[}, }, private, void, normalizeNodeTypes, (, Node, n, ), {, normalizeBlocks, (, n, ), ;, for, (, Node, child, =]
[}, }, private, void, normalizeNodeTypes, (, Node, n, ), {, normalizeBlocks, (, n, ), ;, for, (, Node, child, =]
[Node, n, ), {, normalizeBlocks, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[Node, n, ), {, normalizeBlocks, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[), {, normalizeBlocks, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[normalizeBlocks, (, n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[n, ), ;, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (]
[;, child, =, child, ., getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==]
[child, ., getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==, n, ), ;]
[getNext, (, ), ), {, Preconditions, ., checkState, (, child, ., getParent, (, ), ==, n, ), ;, normalizeNodeTypes, (]
[n, ), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (]
[n, ), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (]
[n, ), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (]
[n, ), ;, normalizeNodeTypes, (, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (]
[(, child, ), ;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil, ., isControlStructure, (]
[;, }, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, ), &&]
[}, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, ), &&, !]
[}, }, private, void, normalizeBlocks, (, Node, n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, ), &&, !]
[Node, n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, ), &&, !, n, ., isLabel, (, ), &&]
[n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, ), &&, !, n, ., isLabel, (, ), &&, !]
[n, ), {, if, (, NodeUtil, ., isControlStructure, (, n, ), &&, !, n, ., isLabel, (, ), &&, !]
[!, n, ., isLabel, (, ), &&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =]
[!, n, ., isLabel, (, ), &&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =]
[&&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[&&, !, n, ., isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;]
[n, ., isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=]
[isSwitch, (, ), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;]
[), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[), ), {, for, (, Node, c, =, n, ., getFirstChild, (, ), ;, c, !=, null, ;, c, =]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[., getFirstChild, (, ), ;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (]
[;, c, !=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (]
[!=, null, ;, c, =, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,]
[c, =, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&]
[=, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !]
[=, c, ., getNext, (, ), ), {, if, (, NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !]
[NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =]
[NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =]
[NodeUtil, ., isControlStructureCodeBlock, (, n, ,, c, ), &&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =]
[&&, !, c, ., isBlock, (, ), ), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (]
[., isBlock, (, ), ), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;]
[., isBlock, (, ), ), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;]
[), {, Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., replaceChild, (]
[Node, newBlock, =, IR, ., block, (, ), ., srcref, (, n, ), ;, n, ., replaceChild, (, c, ,]
[block, (, ), ., srcref, (, n, ), ;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (]
[(, ), ., srcref, (, n, ), ;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (, !]
[(, ), ., srcref, (, n, ), ;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (, !]
[;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (, !, c, ., isEmpty, (, ), ), {]
[;, n, ., replaceChild, (, c, ,, newBlock, ), ;, if, (, !, c, ., isEmpty, (, ), ), {]
[(, c, ,, newBlock, ), ;, if, (, !, c, ., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (]
[if, (, !, c, ., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {]
[if, (, !, c, ., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {]
[., isEmpty, (, ), ), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (]
[), {, newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }]
[newBlock, ., addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }, c, =]
[addChildrenToFront, (, c, ), ;, }, else, {, newBlock, ., setWasEmptyNode, (, true, ), ;, }, c, =, newBlock, ;]
[{, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isObjectLit, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isObjectLit, (, ), ), {, normalizeObjectLiteralAnnotations, (]
[Node, parent, ), {, if, (, n, ., isObjectLit, (, ), ), {, normalizeObjectLiteralAnnotations, (, n, ), ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., CALL, :, annotateCalls, (]
[n, ., getType, (, ), ), {, case, Token, ., CALL, :, annotateCalls, (, n, ), ;, break, ;, case]
[n, ., getType, (, ), ), {, case, Token, ., CALL, :, annotateCalls, (, n, ), ;, break, ;, case]
[), ), {, case, Token, ., CALL, :, annotateCalls, (, n, ), ;, break, ;, case, Token, ., FUNCTION, :]
[{, case, Token, ., CALL, :, annotateCalls, (, n, ), ;, break, ;, case, Token, ., FUNCTION, :, annotateDispatchers, (]
[Token, ., CALL, :, annotateCalls, (, n, ), ;, break, ;, case, Token, ., FUNCTION, :, annotateDispatchers, (, n, ,]
[:, annotateDispatchers, (, n, ,, parent, ), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {]
[:, annotateDispatchers, (, n, ,, parent, ), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {]
[,, parent, ), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {, Preconditions, ., checkState, (]
[,, parent, ), ;, break, ;, }, }, private, void, normalizeObjectLiteralAnnotations, (, Node, objlit, ), {, Preconditions, ., checkState, (]
[Node, objlit, ), {, Preconditions, ., checkState, (, objlit, ., isObjectLit, (, ), ), ;, for, (, Node, key, =]
[Node, objlit, ), {, Preconditions, ., checkState, (, objlit, ., isObjectLit, (, ), ), ;, for, (, Node, key, =]
[checkState, (, objlit, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;]
[checkState, (, objlit, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;]
[objlit, ., isObjectLit, (, ), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;, key, !=]
[isObjectLit, (, ), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;, key, !=, null, ;]
[), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[), ), ;, for, (, Node, key, =, objlit, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =]
[null, ;, key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;]
[key, =, key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations, (]
[key, ., getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,]
[getNext, (, ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,, key, ,]
[;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,, key, ,, value, ), ;, }, }, private, void, annotateCalls, (, Node, n, ), {]
[;, normalizeObjectLiteralKeyAnnotations, (, objlit, ,, key, ,, value, ), ;, }, }, private, void, annotateCalls, (, Node, n, ), {]
[,, key, ,, value, ), ;, }, }, private, void, annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (]
[,, key, ,, value, ), ;, }, }, private, void, annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (]
[annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isCall, (, ), ), ;, Node, first, =]
[annotateCalls, (, Node, n, ), {, Preconditions, ., checkState, (, n, ., isCall, (, ), ), ;, Node, first, =]
[checkState, (, n, ., isCall, (, ), ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, if, (]
[(, n, ., isCall, (, ), ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !]
[(, n, ., isCall, (, ), ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !]
[(, ), ), ;, Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (]
[Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, first, ), ), {]
[Node, first, =, n, ., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, first, ), ), {]
[., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, first, ), ), {, n, ., putBooleanProp, (]
[., getFirstChild, (, ), ;, if, (, !, NodeUtil, ., isGet, (, first, ), ), {, n, ., putBooleanProp, (]
[;, if, (, !, NodeUtil, ., isGet, (, first, ), ), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[isGet, (, first, ), ), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (]
[isGet, (, first, ), ), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (]
[isGet, (, first, ), ), {, n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (]
[n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (, ), &&]
[n, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (, ), &&]
[Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (, ), &&, "eval", ., equals, (]
[Node, ., FREE_CALL, ,, true, ), ;, }, if, (, first, ., isName, (, ), &&, "eval", ., equals, (]
[if, (, first, ., isName, (, ), &&, "eval", ., equals, (, first, ., getString, (, ), ), ), {]
[if, (, first, ., isName, (, ), &&, "eval", ., equals, (, first, ., getString, (, ), ), ), {]
[isName, (, ), &&, "eval", ., equals, (, first, ., getString, (, ), ), ), {, first, ., putBooleanProp, (]
[isName, (, ), &&, "eval", ., equals, (, first, ., getString, (, ), ), ), {, first, ., putBooleanProp, (]
["eval", ., equals, (, first, ., getString, (, ), ), ), {, first, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,]
[Node, ., DIRECT_EVAL, ,, true, ), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {]
[Node, ., DIRECT_EVAL, ,, true, ), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {]
[true, ), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[true, ), ;, }, }, private, void, annotateDispatchers, (, Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (]
[Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (]
[Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (]
[Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (]
[Node, n, ,, Node, parent, ), {, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (]
[{, Preconditions, ., checkState, (, n, ., isFunction, (, ), ), ;, if, (, parent, ., getJSDocInfo, (, ), !=]
[., checkState, (, n, ., isFunction, (, ), ), ;, if, (, parent, ., getJSDocInfo, (, ), !=, null, &&]
[., checkState, (, n, ., isFunction, (, ), ), ;, if, (, parent, ., getJSDocInfo, (, ), !=, null, &&]
[., checkState, (, n, ., isFunction, (, ), ), ;, if, (, parent, ., getJSDocInfo, (, ), !=, null, &&]
[., getJSDocInfo, (, ), !=, null, &&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (]
[., getJSDocInfo, (, ), !=, null, &&, parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (]
[parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {]
[parent, ., getJSDocInfo, (, ), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {]
[), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (]
[), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (]
[), ., isJavaDispatch, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (]
[{, if, (, parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, ), ==]
[parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;]
[parent, ., isAssign, (, ), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;]
[), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;, n, ., putBooleanProp, (]
[), ), {, Preconditions, ., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;, n, ., putBooleanProp, (]
[., checkState, (, parent, ., getLastChild, (, ), ==, n, ), ;, n, ., putBooleanProp, (, Node, ., IS_DISPATCHER, ,]
[true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node, value, ), {]
[true, ), ;, }, }, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node, value, ), {]
[}, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node, value, ), {, Preconditions, ., checkState, (]
[}, }, private, void, normalizeObjectLiteralKeyAnnotations, (, Node, objlit, ,, Node, key, ,, Node, value, ), {, Preconditions, ., checkState, (]
[Node, key, ,, Node, value, ), {, Preconditions, ., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (]
[Node, key, ,, Node, value, ), {, Preconditions, ., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (]
[Node, key, ,, Node, value, ), {, Preconditions, ., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (]
[Node, key, ,, Node, value, ), {, Preconditions, ., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (]
[{, Preconditions, ., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (, key, ., getJSDocInfo, (, ), !=]
[., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&]
[., checkState, (, objlit, ., isObjectLit, (, ), ), ;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&]
[), ), ;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (, ), ), {]
[), ), ;, if, (, key, ., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (, ), ), {]
[(, key, ., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (, ), ), {, value, ., setJSDocInfo, (]
[(, key, ., getJSDocInfo, (, ), !=, null, &&, value, ., isFunction, (, ), ), {, value, ., setJSDocInfo, (]
