[org, ., jfree, ., data, ., Range, ;, public, class, LogarithmicAxis, extends, NumberAxis, {, private, static, final, long, serialVersionUID, =]
[public, class, LogarithmicAxis, extends, NumberAxis, {, private, static, final, long, serialVersionUID, =, 2502918599004103054L, ;, public, static, final, double, LOG10_VALUE, =]
[public, class, LogarithmicAxis, extends, NumberAxis, {, private, static, final, long, serialVersionUID, =, 2502918599004103054L, ;, public, static, final, double, LOG10_VALUE, =]
[NumberAxis, {, private, static, final, long, serialVersionUID, =, 2502918599004103054L, ;, public, static, final, double, LOG10_VALUE, =, Math, ., log, (]
[;, public, static, final, double, LOG10_VALUE, =, Math, ., log, (, 10.0, ), ;, public, static, final, double, SMALL_LOG_VALUE, =]
[=, Math, ., log, (, 10.0, ), ;, public, static, final, double, SMALL_LOG_VALUE, =, 1e-100, ;, protected, boolean, allowNegativesFlag, =]
[), ;, public, static, final, double, SMALL_LOG_VALUE, =, 1e-100, ;, protected, boolean, allowNegativesFlag, =, false, ;, protected, boolean, strictValuesFlag, =]
[=, 1e-100, ;, protected, boolean, allowNegativesFlag, =, false, ;, protected, boolean, strictValuesFlag, =, true, ;, protected, final, NumberFormat, numberFormatterObj, =]
[=, 1e-100, ;, protected, boolean, allowNegativesFlag, =, false, ;, protected, boolean, strictValuesFlag, =, true, ;, protected, final, NumberFormat, numberFormatterObj, =]
[boolean, strictValuesFlag, =, true, ;, protected, final, NumberFormat, numberFormatterObj, =, NumberFormat, ., getInstance, (, ), ;, protected, boolean, expTickLabelsFlag, =]
[final, NumberFormat, numberFormatterObj, =, NumberFormat, ., getInstance, (, ), ;, protected, boolean, expTickLabelsFlag, =, false, ;, protected, boolean, log10TickLabelsFlag, =]
[getInstance, (, ), ;, protected, boolean, expTickLabelsFlag, =, false, ;, protected, boolean, log10TickLabelsFlag, =, false, ;, protected, boolean, autoRangeNextLogFlag, =]
[expTickLabelsFlag, =, false, ;, protected, boolean, log10TickLabelsFlag, =, false, ;, protected, boolean, autoRangeNextLogFlag, =, false, ;, protected, boolean, smallLogFlag, =]
[boolean, autoRangeNextLogFlag, =, false, ;, protected, boolean, smallLogFlag, =, false, ;, public, LogarithmicAxis, (, String, label, ), {, super, (]
[false, ;, protected, boolean, smallLogFlag, =, false, ;, public, LogarithmicAxis, (, String, label, ), {, super, (, label, ), ;]
[), {, super, (, label, ), ;, setupNumberFmtObj, (, ), ;, }, public, void, setAllowNegativesFlag, (, boolean, flgVal, ), {]
[), {, super, (, label, ), ;, setupNumberFmtObj, (, ), ;, }, public, void, setAllowNegativesFlag, (, boolean, flgVal, ), {]
[label, ), ;, setupNumberFmtObj, (, ), ;, }, public, void, setAllowNegativesFlag, (, boolean, flgVal, ), {, this, ., allowNegativesFlag, =]
[setAllowNegativesFlag, (, boolean, flgVal, ), {, this, ., allowNegativesFlag, =, flgVal, ;, }, public, boolean, getAllowNegativesFlag, (, ), {, return]
[setAllowNegativesFlag, (, boolean, flgVal, ), {, this, ., allowNegativesFlag, =, flgVal, ;, }, public, boolean, getAllowNegativesFlag, (, ), {, return]
[public, boolean, getAllowNegativesFlag, (, ), {, return, this, ., allowNegativesFlag, ;, }, public, void, setStrictValuesFlag, (, boolean, flgVal, ), {]
[public, boolean, getAllowNegativesFlag, (, ), {, return, this, ., allowNegativesFlag, ;, }, public, void, setStrictValuesFlag, (, boolean, flgVal, ), {]
[), {, return, this, ., allowNegativesFlag, ;, }, public, void, setStrictValuesFlag, (, boolean, flgVal, ), {, this, ., strictValuesFlag, =]
[setStrictValuesFlag, (, boolean, flgVal, ), {, this, ., strictValuesFlag, =, flgVal, ;, }, public, boolean, getStrictValuesFlag, (, ), {, return]
[setStrictValuesFlag, (, boolean, flgVal, ), {, this, ., strictValuesFlag, =, flgVal, ;, }, public, boolean, getStrictValuesFlag, (, ), {, return]
[public, boolean, getStrictValuesFlag, (, ), {, return, this, ., strictValuesFlag, ;, }, public, void, setExpTickLabelsFlag, (, boolean, flgVal, ), {]
[public, boolean, getStrictValuesFlag, (, ), {, return, this, ., strictValuesFlag, ;, }, public, void, setExpTickLabelsFlag, (, boolean, flgVal, ), {]
[), {, return, this, ., strictValuesFlag, ;, }, public, void, setExpTickLabelsFlag, (, boolean, flgVal, ), {, this, ., expTickLabelsFlag, =]
[return, this, ., strictValuesFlag, ;, }, public, void, setExpTickLabelsFlag, (, boolean, flgVal, ), {, this, ., expTickLabelsFlag, =, flgVal, ;]
[), {, this, ., expTickLabelsFlag, =, flgVal, ;, setupNumberFmtObj, (, ), ;, }, public, boolean, getExpTickLabelsFlag, (, ), {, return]
[), {, this, ., expTickLabelsFlag, =, flgVal, ;, setupNumberFmtObj, (, ), ;, }, public, boolean, getExpTickLabelsFlag, (, ), {, return]
[public, boolean, getExpTickLabelsFlag, (, ), {, return, this, ., expTickLabelsFlag, ;, }, public, void, setLog10TickLabelsFlag, (, boolean, flag, ), {]
[public, boolean, getExpTickLabelsFlag, (, ), {, return, this, ., expTickLabelsFlag, ;, }, public, void, setLog10TickLabelsFlag, (, boolean, flag, ), {]
[), {, return, this, ., expTickLabelsFlag, ;, }, public, void, setLog10TickLabelsFlag, (, boolean, flag, ), {, this, ., log10TickLabelsFlag, =]
[setLog10TickLabelsFlag, (, boolean, flag, ), {, this, ., log10TickLabelsFlag, =, flag, ;, }, public, boolean, getLog10TickLabelsFlag, (, ), {, return]
[setLog10TickLabelsFlag, (, boolean, flag, ), {, this, ., log10TickLabelsFlag, =, flag, ;, }, public, boolean, getLog10TickLabelsFlag, (, ), {, return]
[public, boolean, getLog10TickLabelsFlag, (, ), {, return, this, ., log10TickLabelsFlag, ;, }, public, void, setAutoRangeNextLogFlag, (, boolean, flag, ), {]
[public, boolean, getLog10TickLabelsFlag, (, ), {, return, this, ., log10TickLabelsFlag, ;, }, public, void, setAutoRangeNextLogFlag, (, boolean, flag, ), {]
[), {, return, this, ., log10TickLabelsFlag, ;, }, public, void, setAutoRangeNextLogFlag, (, boolean, flag, ), {, this, ., autoRangeNextLogFlag, =]
[setAutoRangeNextLogFlag, (, boolean, flag, ), {, this, ., autoRangeNextLogFlag, =, flag, ;, }, public, boolean, getAutoRangeNextLogFlag, (, ), {, return]
[setAutoRangeNextLogFlag, (, boolean, flag, ), {, this, ., autoRangeNextLogFlag, =, flag, ;, }, public, boolean, getAutoRangeNextLogFlag, (, ), {, return]
[public, boolean, getAutoRangeNextLogFlag, (, ), {, return, this, ., autoRangeNextLogFlag, ;, }, public, void, setRange, (, Range, range, ), {]
[public, boolean, getAutoRangeNextLogFlag, (, ), {, return, this, ., autoRangeNextLogFlag, ;, }, public, void, setRange, (, Range, range, ), {]
[), {, return, this, ., autoRangeNextLogFlag, ;, }, public, void, setRange, (, Range, range, ), {, super, ., setRange, (]
[this, ., autoRangeNextLogFlag, ;, }, public, void, setRange, (, Range, range, ), {, super, ., setRange, (, range, ), ;]
[., setRange, (, range, ), ;, setupSmallLogFlag, (, ), ;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =]
[., setRange, (, range, ), ;, setupSmallLogFlag, (, ), ;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =]
[), ;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;]
[), ;, }, protected, void, setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;]
[void, setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =]
[setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (]
[setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (]
[setupSmallLogFlag, (, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (]
[(, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !]
[(, ), {, double, lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !]
[lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&]
[lowerVal, =, getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&]
[getRange, (, ), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&, lowerVal, <]
[), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&, lowerVal, <, 10.0, &&]
[), ., getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&, lowerVal, <, 10.0, &&]
[getLowerBound, (, ), ;, this, ., smallLogFlag, =, (, !, this, ., allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >]
[allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (]
[allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (]
[allowNegativesFlag, &&, lowerVal, <, 10.0, &&, lowerVal, >, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (]
[>, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {]
[>, 0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {]
[0.0, ), ;, }, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (]
[}, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat, )]
[}, protected, void, setupNumberFmtObj, (, ), {, if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat, )]
[if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (]
[if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (]
[if, (, this, ., numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (]
[numberFormatterObj, instanceof, DecimalFormat, ), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (, this, ., expTickLabelsFlag, ?]
[DecimalFormat, ), {, (, (, DecimalFormat, ), this, ., numberFormatterObj, ), ., applyPattern, (, this, ., expTickLabelsFlag, ?, "0E0", :]
[this, ., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return]
[this, ., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return]
[this, ., expTickLabelsFlag, ?, "0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return]
["0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?]
["0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?]
["0E0", :, "0.###", ), ;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?]
[;, }, }, protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., log, (]
[protected, double, switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., log, (, val, ), /]
[switchedLog10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., log, (, val, ), /, LOG10_VALUE, :]
[double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., log, (, val, ), /, LOG10_VALUE, :, adjustedLog10, (]
[val, ), /, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return]
[val, ), /, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return]
[val, ), /, LOG10_VALUE, :, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return]
[:, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?]
[:, adjustedLog10, (, val, ), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?]
[), ;, }, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., pow, (]
[}, public, double, switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., pow, (, 10.0, ,]
[switchedPow10, (, double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., pow, (, 10.0, ,, val, ), :]
[double, val, ), {, return, this, ., smallLogFlag, ?, Math, ., pow, (, 10.0, ,, val, ), :, adjustedPow10, (]
[val, ), :, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =]
[), :, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (]
[), :, adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (]
[adjustedPow10, (, val, ), ;, }, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (, val, <]
[}, public, double, adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (]
[adjustedLog10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (, negFlag, ), {]
[double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (, negFlag, ), {, val, =]
[val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (, negFlag, ), {, val, =, -]
[=, (, val, <, 0.0, ), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (]
[=, (, val, <, 0.0, ), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (]
[val, <, 0.0, ), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <]
[), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {]
[if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=]
[if, (, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=]
[(, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=, (]
[(, negFlag, ), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=, (]
[), {, val, =, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=, (, 10.0, -]
[=, -, val, ;, }, if, (, val, <, 10.0, ), {, val, +=, (, 10.0, -, val, ), /]
[(, val, <, 10.0, ), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =]
[(, val, <, 10.0, ), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =]
[(, val, <, 10.0, ), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =]
[), {, val, +=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (]
[+=, (, 10.0, -, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /]
[-, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return]
[-, val, ), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return]
[), /, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?]
[/, 10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?, (]
[10.0, ;, }, double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?, (, -]
[double, res, =, Math, ., log, (, val, ), /, LOG10_VALUE, ;, return, negFlag, ?, (, -, res, ), :]
[?, (, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =]
[(, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (]
[(, -, res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (]
[res, ), :, res, ;, }, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <]
[}, public, double, adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (]
[adjustedPow10, (, double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (, negFlag, ), {]
[double, val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (, negFlag, ), {, val, =]
[val, ), {, boolean, negFlag, =, (, val, <, 0.0, ), ;, if, (, negFlag, ), {, val, =, -]
[<, 0.0, ), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (]
[<, 0.0, ), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (]
[), ;, if, (, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <]
[(, negFlag, ), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {]
[), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =]
[), {, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =]
[{, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (]
[{, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (]
[{, val, =, -, val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (]
[val, ;, }, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (, Math, ., pow, (]
[}, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (, Math, ., pow, (, 10, ,]
[}, double, res, ;, if, (, val, <, 1.0, ), {, res, =, (, Math, ., pow, (, 10, ,]
[res, ;, if, (, val, <, 1.0, ), {, res, =, (, Math, ., pow, (, 10, ,, val, +]
[(, val, <, 1.0, ), {, res, =, (, Math, ., pow, (, 10, ,, val, +, 1.0, ), -]
[1.0, ), {, res, =, (, Math, ., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /]
[(, Math, ., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {]
[., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {, res, =]
[., pow, (, 10, ,, val, +, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {, res, =]
[,, val, +, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (]
[+, 1.0, ), -, 10.0, ), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,]
[), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return]
[), /, 9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return]
[9.0, ;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?]
[;, }, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?, (]
[}, else, {, res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?, (, -]
[res, =, Math, ., pow, (, 10, ,, val, ), ;, }, return, negFlag, ?, (, -, res, ), :]
[-, res, ), :, res, ;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (]
[-, res, ), :, res, ;, }, protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (]
[protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {, if, (]
[protected, double, computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {, if, (]
[computeLogFloor, (, double, lower, ), {, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, lower, >]
[lower, ), {, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, lower, >, 10.0, ), {]
[{, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, lower, >, 10.0, ), {, logFloor, =]
[{, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, lower, >, 10.0, ), {, logFloor, =]
[{, double, logFloor, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, lower, >, 10.0, ), {, logFloor, =]
[if, (, this, ., allowNegativesFlag, ), {, if, (, lower, >, 10.0, ), {, logFloor, =, Math, ., log, (]
[., allowNegativesFlag, ), {, if, (, lower, >, 10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /]
[), {, if, (, lower, >, 10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;]
[if, (, lower, >, 10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =]
[if, (, lower, >, 10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =]
[10.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (]
[logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;]
[Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =]
[Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =]
[lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (]
[/, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,]
[floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (]
[floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (]
[logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <]
[), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -]
[=, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {]
[., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =]
[., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =]
[., pow, (, 10, ,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =]
[,, logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (]
[logFloor, ), ;, }, else, if, (, lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (, -]
[}, else, if, (, lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (, -, lower, ), /]
[if, (, lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;]
[lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =]
[lower, <, -, 10.0, ), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =]
[), {, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (]
[{, logFloor, =, Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -]
[Math, ., log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;]
[log, (, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =]
[(, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -]
[(, -, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -]
[/, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (]
[;, logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (, 10, ,]
[logFloor, =, Math, ., floor, (, -, logFloor, ), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -]
[-, logFloor, ), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {]
[), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =]
[), ;, logFloor, =, -, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =]
[-, Math, ., pow, (, 10, ,, -, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (]
[), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (]
[), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (]
[}, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower, >]
[logFloor, =, Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower, >, 0.0, ), {]
[Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =]
[Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =]
[Math, ., floor, (, lower, ), ;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =]
[lower, ), ;, }, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =, Math, ., log, (]
[}, }, else, {, if, (, lower, >, 0.0, ), {, logFloor, =, Math, ., log, (, lower, ), /]
[else, {, if, (, lower, >, 0.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;]
[if, (, lower, >, 0.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =]
[if, (, lower, >, 0.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =]
[0.0, ), {, logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (]
[logFloor, =, Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;]
[Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =]
[Math, ., log, (, lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =]
[lower, ), /, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (]
[/, LOG10_VALUE, ;, logFloor, =, Math, ., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,]
[., floor, (, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {]
[(, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {, logFloor, =]
[(, logFloor, ), ;, logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {, logFloor, =]
[logFloor, =, Math, ., pow, (, 10, ,, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (]
[10, ,, logFloor, ), ;, }, else, {, logFloor, =, Math, ., floor, (, lower, ), ;, }, }, return]
[;, }, }, return, logFloor, ;, }, protected, double, computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if, (]
[;, }, }, return, logFloor, ;, }, protected, double, computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if, (]
[protected, double, computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {, if, (]
[protected, double, computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {, if, (]
[computeLogCeil, (, double, upper, ), {, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, upper, >]
[upper, ), {, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, upper, >, 10.0, ), {]
[{, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, upper, >, 10.0, ), {, logCeil, =]
[{, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, upper, >, 10.0, ), {, logCeil, =]
[{, double, logCeil, ;, if, (, this, ., allowNegativesFlag, ), {, if, (, upper, >, 10.0, ), {, logCeil, =]
[if, (, this, ., allowNegativesFlag, ), {, if, (, upper, >, 10.0, ), {, logCeil, =, Math, ., log, (]
[., allowNegativesFlag, ), {, if, (, upper, >, 10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /]
[), {, if, (, upper, >, 10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;]
[if, (, upper, >, 10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =]
[if, (, upper, >, 10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =]
[10.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (]
[logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;]
[Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =]
[Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =]
[upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (]
[/, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,]
[ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (]
[ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (]
[logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <]
[), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -]
[=, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {]
[., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =]
[., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =]
[., pow, (, 10, ,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =]
[,, logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (]
[logCeil, ), ;, }, else, if, (, upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (, -]
[}, else, if, (, upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (, -, upper, ), /]
[if, (, upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;]
[upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =]
[upper, <, -, 10.0, ), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =]
[), {, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (]
[{, logCeil, =, Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -]
[Math, ., log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;]
[log, (, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =]
[(, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -]
[(, -, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -]
[/, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (]
[;, logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (, 10, ,]
[logCeil, =, Math, ., ceil, (, -, logCeil, ), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -]
[-, logCeil, ), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {]
[), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =]
[), ;, logCeil, =, -, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =]
[-, Math, ., pow, (, 10, ,, -, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (]
[), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (]
[), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (]
[}, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper, >]
[logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper, >, 0.0, ), {]
[Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =]
[Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =]
[Math, ., ceil, (, upper, ), ;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =]
[upper, ), ;, }, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =, Math, ., log, (]
[}, }, else, {, if, (, upper, >, 0.0, ), {, logCeil, =, Math, ., log, (, upper, ), /]
[else, {, if, (, upper, >, 0.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;]
[if, (, upper, >, 0.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =]
[if, (, upper, >, 0.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =]
[0.0, ), {, logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (]
[logCeil, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;]
[Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =]
[Math, ., log, (, upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =]
[upper, ), /, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (]
[/, LOG10_VALUE, ;, logCeil, =, Math, ., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,]
[., ceil, (, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {]
[(, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {, logCeil, =]
[(, logCeil, ), ;, logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {, logCeil, =]
[logCeil, =, Math, ., pow, (, 10, ,, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (]
[10, ,, logCeil, ), ;, }, else, {, logCeil, =, Math, ., ceil, (, upper, ), ;, }, }, return]
[ceil, (, upper, ), ;, }, }, return, logCeil, ;, }, public, void, autoAdjustRange, (, ), {, Plot, plot, =]
[}, return, logCeil, ;, }, public, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (]
[}, return, logCeil, ;, }, public, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (]
[logCeil, ;, }, public, void, autoAdjustRange, (, ), {, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==]
[{, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null, ), {, return, ;, }, if, (]
[{, Plot, plot, =, getPlot, (, ), ;, if, (, plot, ==, null, ), {, return, ;, }, if, (]
[if, (, plot, ==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =]
[==, null, ), {, return, ;, }, if, (, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, )]
[(, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, double, lower, ;, Range, r, =]
[(, plot, instanceof, ValueAxisPlot, ), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, double, lower, ;, Range, r, =]
[), {, ValueAxisPlot, vap, =, (, ValueAxisPlot, ), plot, ;, double, lower, ;, Range, r, =, vap, ., getDataRange, (]
[(, ValueAxisPlot, ), plot, ;, double, lower, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (]
[(, ValueAxisPlot, ), plot, ;, double, lower, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (]
[), plot, ;, double, lower, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==]
[double, lower, ;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {]
[;, Range, r, =, vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =]
[vap, ., getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;]
[getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, lower, =]
[getDataRange, (, this, ), ;, if, (, r, ==, null, ), {, r, =, getDefaultAutoRange, (, ), ;, lower, =]
[null, ), {, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (, ), ;, }, else, {]
[{, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (, ), ;, }, else, {, lower, =]
[{, r, =, getDefaultAutoRange, (, ), ;, lower, =, r, ., getLowerBound, (, ), ;, }, else, {, lower, =]
[=, r, ., getLowerBound, (, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (]
[=, r, ., getLowerBound, (, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (]
[=, r, ., getLowerBound, (, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (]
[=, r, ., getLowerBound, (, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (]
[(, ), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&]
[), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !]
[), ;, }, else, {, lower, =, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !]
[{, lower, =, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&]
[{, lower, =, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&]
[=, r, ., getLowerBound, (, ), ;, if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=]
[(, ), ;, if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw]
[if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (]
[if, (, this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (]
[this, ., strictValuesFlag, &&, !, this, ., allowNegativesFlag, &&, lower, <=, 0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +]
[0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (]
[0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (]
[0.0, ), {, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (]
[{, throw, new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >]
[new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&]
[new, RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&]
[RuntimeException, (, "Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&, (]
["Values less than or equal to ", +, "zero not allowed with logarithmic axis", ), ;, }, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&, (, lowerMargin, =]
[}, }, final, double, lowerMargin, ;, if, (, lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, ), ), >]
[(, lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =]
[lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (]
[lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (]
[lower, >, 0.0, &&, (, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (]
[(, lowerMargin, =, getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (, Math, ., log, (]
[getLowerMargin, (, ), ), >, 0.0, ), {, final, double, logLower, =, (, Math, ., log, (, lower, ), /]
[final, double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (]
[final, double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (]
[double, logLower, =, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (]
[=, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =]
[=, (, Math, ., log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =]
[log, (, lower, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (]
[/, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), ), <]
[;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, ), {]
[logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, ), {, logAbs, =]
[(, (, logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }]
[logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =]
[logAbs, =, Math, ., abs, (, logLower, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =]
[abs, (, logLower, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (]
[logLower, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,]
[), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (]
[), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (]
[<, 1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -]
[1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -, (]
[1.0, ), {, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -, (]
[{, logAbs, =, 1.0, ;, }, lower, =, Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs, *]
[Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs, *, lowerMargin, ), ), ), ;, }, if, (]
[Math, ., pow, (, 10, ,, (, logLower, -, (, logAbs, *, lowerMargin, ), ), ), ;, }, if, (]
[,, (, logLower, -, (, logAbs, *, lowerMargin, ), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {]
[logLower, -, (, logAbs, *, lowerMargin, ), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =]
[(, logAbs, *, lowerMargin, ), ), ), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (]
[), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (]
[), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (]
[), ;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (]
[;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !]
[;, }, if, (, this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !]
[this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&]
[this, ., autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&]
[autoRangeNextLogFlag, ), {, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=]
[{, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&]
[{, lower, =, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&]
[=, computeLogFloor, (, lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <]
[lower, ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {]
[;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =]
[;, }, if, (, !, this, ., allowNegativesFlag, &&, lower, >=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =]
[>=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =]
[>=, 0.0, &&, lower, <, SMALL_LOG_VALUE, ), {, lower, =, r, ., getLowerBound, (, ), ;, }, double, upper, =]
[getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (]
[getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (]
[getLowerBound, (, ), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (]
[), ;, }, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (, upper, >]
[}, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (, upper, >, 0.0, &&]
[}, double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (, upper, >, 0.0, &&]
[double, upper, =, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (, upper, >, 0.0, &&, (]
[=, r, ., getUpperBound, (, ), ;, final, double, upperMargin, ;, if, (, upper, >, 0.0, &&, (, upperMargin, =]
[), ;, final, double, upperMargin, ;, if, (, upper, >, 0.0, &&, (, upperMargin, =, getUpperMargin, (, ), ), >]
[(, upper, >, 0.0, &&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =]
[upper, >, 0.0, &&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (]
[upper, >, 0.0, &&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (]
[upper, >, 0.0, &&, (, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (]
[(, upperMargin, =, getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (, Math, ., log, (]
[getUpperMargin, (, ), ), >, 0.0, ), {, final, double, logUpper, =, (, Math, ., log, (, upper, ), /]
[final, double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (]
[final, double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (]
[double, logUpper, =, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (]
[=, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =]
[=, (, Math, ., log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =]
[log, (, upper, ), /, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (]
[/, LOG10_VALUE, ), ;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <]
[;, double, logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, ), {]
[logAbs, ;, if, (, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, ), {, logAbs, =]
[(, (, logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }]
[logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =]
[logAbs, =, Math, ., abs, (, logUpper, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =]
[abs, (, logUpper, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (]
[logUpper, ), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,]
[), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (]
[), ), <, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (]
[<, 1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +]
[1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +, (]
[1.0, ), {, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +, (]
[{, logAbs, =, 1.0, ;, }, upper, =, Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *]
[Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (]
[Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (]
[Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (]
[Math, ., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (]
[., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !]
[., pow, (, 10, ,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !]
[,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&]
[,, (, logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&]
[logUpper, +, (, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <]
[(, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&]
[(, logAbs, *, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&]
[*, upperMargin, ), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >]
[), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&]
[), ), ), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&]
[), ;, }, if, (, !, this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >]
[this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =]
[this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =]
[this, ., allowNegativesFlag, &&, upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =]
[upper, <, 1.0, &&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (]
[&&, upper, >, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /]
[>, 0.0, &&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;]
[&&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =]
[&&, lower, >, 0.0, ), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =]
[), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (]
[), {, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (]
[{, double, expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -]
[expVal, =, Math, ., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +]
[., log, (, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;]
[(, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =]
[(, upper, ), /, LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =]
[LOG10_VALUE, ;, expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (]
[expVal, =, Math, ., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,]
[., ceil, (, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;]
[(, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =]
[(, -, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =]
[-, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (]
[-, expVal, +, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (]
[+, 0.001, ), ;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >]
[;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?]
[;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?]
[;, expVal, =, Math, ., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?]
[., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (]
[., pow, (, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (]
[(, 10, ,, expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *]
[expVal, ), ;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /]
[;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :]
[;, upper, =, (, expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :]
[expVal, >, 0.0, ), ?, Math, ., ceil, (, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (]
[., ceil, (, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {]
[(, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =]
[(, upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =]
[upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (]
[upper, *, expVal, ), /, expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (]
[expVal, :, Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?]
[Math, ., ceil, (, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (]
[(, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :]
[(, upper, ), ;, }, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :]
[}, else, {, upper, =, (, this, ., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :, Math, ., ceil, (]
[., autoRangeNextLogFlag, ), ?, computeLogCeil, (, upper, ), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =]
[upper, ), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[upper, ), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[upper, ), :, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (]
[:, Math, ., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -]
[., ceil, (, upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <]
[upper, ), ;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {]
[;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =]
[;, }, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =]
[}, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =, (]
[}, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =, (]
[}, double, minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =, (]
[minRange, =, getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =, (, upper, +]
[getAutoRangeMinimumSize, (, ), ;, if, (, upper, -, lower, <, minRange, ), {, upper, =, (, upper, +, lower, +]
[;, if, (, upper, -, lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /]
[(, upper, -, lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;]
[-, lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =]
[-, lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =]
[lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (]
[lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (]
[lower, <, minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (]
[minRange, ), {, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +]
[{, upper, =, (, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -]
[(, upper, +, lower, +, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /]
[+, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (]
[+, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (]
[+, minRange, ), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (]
[), /, 2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -]
[2, ;, lower, =, (, upper, +, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower, <]
[+, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =]
[+, lower, -, minRange, ), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =]
[), /, 2, ;, if, (, upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (]
[upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =]
[upper, -, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =]
[-, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (]
[-, lower, <, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (]
[<, minRange, ), {, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >]
[{, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?]
[{, double, absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?]
[absUpper, =, Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /]
[Math, ., abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :]
[abs, (, upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;]
[upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =]
[upper, ), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =]
[), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (]
[), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (]
[), ;, double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (]
[double, adjVal, =, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +]
[=, (, absUpper, >, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +]
[>, SMALL_LOG_VALUE, ), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /]
[), ?, absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;]
[absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =]
[absUpper, /, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =]
[/, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (]
[/, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (]
[/, 100.0, :, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (]
[:, 0.01, ;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +]
[;, upper, =, (, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -]
[(, upper, +, lower, +, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /]
[+, adjVal, ), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }]
[), /, 2, ;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (]
[;, lower, =, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (]
[=, (, upper, +, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,]
[+, lower, -, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,]
[-, adjVal, ), /, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,]
[/, 2, ;, }, }, setRange, (, new, Range, (, lower, ,, upper, ), ,, false, ,, false, ), ;]
[;, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[double, value, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, switchedLog10, (]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, switchedLog10, (]
[=, getRange, (, ), ;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =]
[(, ), ;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (]
[(, ), ;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (]
[getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, min, =]
[double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =]
[(, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[(, range, ., getUpperBound, (, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (]
[(, ), ), ;, double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, min, =, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[=, 0.0, ;, double, max, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, plotArea, ., getMinX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, plotArea, ., getMinX, (, ), ;, max, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, min, =, plotArea, ., getMinX, (, ), ;, max, =]
[min, =, plotArea, ., getMinX, (, ), ;, max, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (]
[min, =, plotArea, ., getMinX, (, ), ;, max, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (]
[getMinX, (, ), ;, max, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[max, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, plotArea, ., getMaxY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, plotArea, ., getMaxY, (, ), ;, max, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, min, =, plotArea, ., getMaxY, (, ), ;, max, =]
[), ), {, min, =, plotArea, ., getMaxY, (, ), ;, max, =, plotArea, ., getMinY, (, ), ;, }]
[{, min, =, plotArea, ., getMaxY, (, ), ;, max, =, plotArea, ., getMinY, (, ), ;, }, value, =]
[=, plotArea, ., getMaxY, (, ), ;, max, =, plotArea, ., getMinY, (, ), ;, }, value, =, switchedLog10, (]
[), ;, max, =, plotArea, ., getMinY, (, ), ;, }, value, =, switchedLog10, (, value, ), ;, if, (]
[getMinY, (, ), ;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return]
[getMinY, (, ), ;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return]
[), ;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -]
[;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (]
[;, }, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (]
[}, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[}, value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (]
[value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (]
[value, =, switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (]
[switchedLog10, (, value, ), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (, value, -]
[), ;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (, value, -, axisMin, ), /]
[;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (, value, -, axisMin, ), /, (]
[;, if, (, isInverted, (, ), ), {, return, max, -, (, (, (, value, -, axisMin, ), /, (]
[(, isInverted, (, ), ), {, return, max, -, (, (, (, value, -, axisMin, ), /, (, axisMax, -]
[), {, return, max, -, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *]
[{, return, max, -, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[{, return, max, -, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[max, -, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return]
[), /, (, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return]
[(, axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +]
[axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (]
[axisMax, -, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (]
[-, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (]
[-, axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (]
[axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (]
[axisMin, ), ), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (]
[), *, (, max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -]
[max, -, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /]
[-, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (]
[-, min, ), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (]
[), ), ;, }, else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -]
[else, {, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *]
[{, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[{, return, min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (]
[min, +, (, (, (, value, -, axisMin, ), /, (, axisMax, -, axisMin, ), ), *, (, max, -]
[;, }, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[double, java2DValue, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, switchedLog10, (]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, axisMin, =, switchedLog10, (]
[=, getRange, (, ), ;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =]
[(, ), ;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (]
[(, ), ;, double, axisMin, =, switchedLog10, (, range, ., getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (]
[getLowerBound, (, ), ), ;, double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, plotMin, =]
[double, axisMax, =, switchedLog10, (, range, ., getUpperBound, (, ), ), ;, double, plotMin, =, 0.0, ;, double, plotMax, =]
[(, range, ., getUpperBound, (, ), ), ;, double, plotMin, =, 0.0, ;, double, plotMax, =, 0.0, ;, if, (]
[(, range, ., getUpperBound, (, ), ), ;, double, plotMin, =, 0.0, ;, double, plotMax, =, 0.0, ;, if, (]
[(, ), ), ;, double, plotMin, =, 0.0, ;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, plotMin, =, 0.0, ;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, plotMin, =]
[=, 0.0, ;, double, plotMax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, plotMin, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, plotMin, =, plotArea, ., getX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, plotMin, =, plotArea, ., getX, (, ), ;, plotMax, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, plotMin, =, plotArea, ., getX, (, ), ;, plotMax, =]
[plotMin, =, plotArea, ., getX, (, ), ;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (]
[plotMin, =, plotArea, ., getX, (, ), ;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (]
[getX, (, ), ;, plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[plotMax, =, plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin, =]
[plotArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin, =, plotArea, ., getMaxY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin, =, plotArea, ., getMaxY, (, ), ;, plotMax, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, plotMin, =, plotArea, ., getMaxY, (, ), ;, plotMax, =]
[{, plotMin, =, plotArea, ., getMaxY, (, ), ;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if, (]
[(, ), ;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return]
[;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (]
[;, plotMax, =, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (]
[=, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -]
[=, plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -]
[plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (]
[plotArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (]
[., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (]
[., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (]
[(, ), ;, }, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -]
[}, if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /]
[if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (]
[if, (, isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (]
[isInverted, (, ), ), {, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -]
[{, return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *]
[return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (]
[return, switchedPow10, (, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (]
[(, axisMax, -, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -]
[), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return]
[(, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (]
[(, plotMax, -, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (]
[-, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +]
[-, plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +]
[plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (]
[plotMin, ), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (]
[), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (]
[), ), *, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (]
[*, (, axisMax, -, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -]
[-, axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /]
[axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (]
[axisMin, ), ), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (]
[), ;, }, else, {, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -]
[{, return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *]
[return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (]
[return, switchedPow10, (, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (]
[(, axisMin, +, (, (, java2DValue, -, plotMin, ), /, (, plotMax, -, plotMin, ), ), *, (, axisMax, -]
[axisMin, ), ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =]
[), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10, (]
[), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, startLog, =, switchedLog10, (]
[upperPercent, ), {, double, startLog, =, switchedLog10, (, getRange, (, ), ., getLowerBound, (, ), ), ;, double, lengthLog, =]
[upperPercent, ), {, double, startLog, =, switchedLog10, (, getRange, (, ), ., getLowerBound, (, ), ), ;, double, lengthLog, =]
[{, double, startLog, =, switchedLog10, (, getRange, (, ), ., getLowerBound, (, ), ), ;, double, lengthLog, =, switchedLog10, (]
[{, double, startLog, =, switchedLog10, (, getRange, (, ), ., getLowerBound, (, ), ), ;, double, lengthLog, =, switchedLog10, (]
[., getLowerBound, (, ), ), ;, double, lengthLog, =, switchedLog10, (, getRange, (, ), ., getUpperBound, (, ), ), -]
[lengthLog, =, switchedLog10, (, getRange, (, ), ., getUpperBound, (, ), ), -, startLog, ;, Range, adjusted, ;, if, (]
[(, ), ., getUpperBound, (, ), ), -, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {]
[., getUpperBound, (, ), ), -, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =]
[), ), -, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (]
[-, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (]
[-, startLog, ;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (]
[;, Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +]
[Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (]
[Range, adjusted, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (]
[;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *]
[if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (]
[if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (]
[isInverted, (, ), ), {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -]
[adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,]
[new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (]
[new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (]
[(, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +]
[switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (]
[switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (]
[startLog, +, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *]
[+, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (]
[+, (, lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (]
[lengthLog, *, (, 1, -, upperPercent, ), ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -]
[,, switchedPow10, (, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {]
[(, startLog, +, (, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =]
[(, lengthLog, *, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (]
[*, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (]
[*, (, 1, -, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (]
[1, -, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +]
[-, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (]
[-, lowerPercent, ), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (]
[), ), ), ), ;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *]
[;, }, else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,]
[else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (]
[else, {, adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (]
[adjusted, =, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (, startLog, +]
[=, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (]
[=, new, Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (]
[Range, (, switchedPow10, (, startLog, +, (, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *]
[(, lengthLog, *, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }]
[*, lowerPercent, ), ), ,, switchedPow10, (, startLog, +, (, lengthLog, *, upperPercent, ), ), ), ;, }, setRange, (]
[), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =]
[,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, Range, range, =]
[=, new, java, ., util, ., ArrayList, (, ), ;, Range, range, =, getRange, (, ), ;, double, lowerBoundVal, =]
[=, new, java, ., util, ., ArrayList, (, ), ;, Range, range, =, getRange, (, ), ;, double, lowerBoundVal, =]
[), ;, Range, range, =, getRange, (, ), ;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (]
[), ;, Range, range, =, getRange, (, ), ;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (]
[), ;, Range, range, =, getRange, (, ), ;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (]
[=, getRange, (, ), ;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&]
[=, getRange, (, ), ;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&]
[(, ), ;, double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <]
[double, lowerBoundVal, =, range, ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {]
[=, range, ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =]
[;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =]
[;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =]
[SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =]
[lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, )]
[lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, )]
[}, double, upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math, ., rint, (]
[upperBoundVal, =, range, ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (]
[;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, )]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, )]
[Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (]
[rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&]
[int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >]
[Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&]
[Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&]
[Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&]
[switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (]
[upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,]
[;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >]
[iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {]
[==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --]
[,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =]
[--, iBegCount, ;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =]
[;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[;, }, double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[double, currentTickValue, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;, i, <=]
[;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;]
[;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;]
[for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j, =]
[int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j, =, 0, ;]
[=, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;]
[i, <=, iEndCount, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++]
[++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++, j, ), {, if, (]
[++, ), {, for, (, int, j, =, 0, ;, j, <, 10, ;, ++, j, ), {, if, (]
[int, j, =, 0, ;, j, <, 10, ;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {]
[=, 0, ;, j, <, 10, ;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =]
[=, 0, ;, j, <, 10, ;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =]
[=, 0, ;, j, <, 10, ;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =]
[<, 10, ;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (]
[;, ++, j, ), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,]
[), {, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +]
[{, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +, (]
[{, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +, (]
[{, if, (, this, ., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +, (]
[., smallLogFlag, ), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (]
[), {, currentTickValue, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[=, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (]
[+, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||]
[(, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (]
[(, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (]
[(, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (]
[(, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (]
[., pow, (, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <]
[(, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&]
[(, 10, ,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&]
[,, i, ), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >]
[), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&]
[), *, j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&]
[j, ), ;, if, (, this, ., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <]
[., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (]
[., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (]
[., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (]
[., expTickLabelsFlag, ||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (]
[||, (, i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==]
[i, <, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||]
[<, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (]
[<, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (]
[<, 0, &&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (]
[&&, currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >]
[currentTickValue, >, 0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -]
[0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&]
[0.0, &&, currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&]
[currentTickValue, <, 1.0, ), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <]
[), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||]
[), ), {, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||]
[{, if, (, j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=]
[j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {]
[j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {]
[j, ==, 0, ||, (, i, >, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {]
[>, -, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (]
[-, 4, &&, j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -]
[j, <, 2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;]
[2, ), ||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =]
[||, currentTickValue, >=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (]
[>=, upperBoundVal, ), {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,]
[numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {]
[setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =]
[tickLabel, =, makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {]
[makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =]
[makeTickLabel, (, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =]
[(, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (]
[(, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (]
[(, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (]
[(, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (]
[(, currentTickValue, ,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (]
[,, true, ), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <]
[), ;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||]
[;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (]
[;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (]
[;, }, else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (]
[else, {, tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (, i, <]
[tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&]
[tickLabel, =, "", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&]
["", ;, }, }, else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j, <]
[}, else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||]
[else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (]
[else, {, tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (]
[tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <]
[tickLabel, =, (, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <]
[(, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -]
[1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||]
[1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||]
[(, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=]
[1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?]
[j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (]
[>=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {]
[upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --]
[makeTickLabel, (, currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }]
[currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =]
[currentTickValue, ), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =]
[), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (]
[), :, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (]
["", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i, >=]
[}, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0, ), ?]
[}, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0, ), ?]
[}, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0, ), ?]
[(, zeroTickFlag, ), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (]
[), {, --, j, ;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,]
[j, ;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +]
[;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[;, }, currentTickValue, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[(, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (]
[>=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :]
[(, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (]
[+, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (]
[Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,]
[., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -]
[10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[-, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -]
[Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -]
[(, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *]
[-, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (]
[(, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, !]
[10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (]
[10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (]
[10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (]
[10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (]
[10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (]
[-, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (]
[-, 1, ), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (]
[), *, j, ), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -]
[), ), ;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <]
[;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&]
[;, if, (, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&]
[(, !, zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=]
[zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&]
[zeroTickFlag, ), {, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&]
[{, if, (, Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=]
[Math, ., abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {]
[abs, (, currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =]
[currentTickValue, -, 1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;]
[1.0, ), <, 0.0001, &&, lowerBoundVal, <=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =]
[<=, 0.0, &&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {]
[&&, upperBoundVal, >=, 0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =]
[0.0, ), {, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }]
[{, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =]
[{, currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =]
[currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (]
[currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (]
[currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (]
[currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (]
[currentTickValue, =, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (]
[=, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (]
[=, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (]
[=, 0.0, ;, zeroTickFlag, =, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (]
[=, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&]
[=, true, ;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&]
[;, }, }, else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <]
[else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||]
[else, {, zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||]
[zeroTickFlag, =, false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <]
[false, ;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||]
[;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (]
[;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (]
[;, }, tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (]
[tickLabel, =, (, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (, i, <]
[(, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&]
[(, (, this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&]
[this, ., expTickLabelsFlag, &&, j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <]
[&&, j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||]
[j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (]
[j, <, 2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (]
[2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <]
[2, ), ||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <]
[||, j, <, 1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -]
[1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||]
[1, ||, (, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||]
[(, i, <, 1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=]
[1, &&, j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?]
[j, <, 5, ), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (]
[), ||, (, j, <, 4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :]
[4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (]
[4, -, i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (]
[i, ), ||, currentTickValue, >=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >]
[>=, upperBoundVal, ), ?, makeTickLabel, (, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return]
[(, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (]
[(, currentTickValue, ), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (]
[), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=]
[), :, "", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=]
["", ;, }, if, (, currentTickValue, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -]
[>, upperBoundVal, ), {, return, ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =]
[ticks, ;, }, if, (, currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =]
[currentTickValue, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =]
[SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (]
[=, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =]
[null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[(, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[(, isVerticalTickLabels, (, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[(, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==]
[(, ), ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {]
[edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[}, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[}, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[-, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[}, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[}, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {]
[TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =]
[TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =]
[=, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =]
[., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =]
[}, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =]
[anchor, =, TextAnchor, ., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (]
[., TOP_CENTER, ;, rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (]
[rotationAnchor, =, TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,]
[TextAnchor, ., TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,]
[TOP_CENTER, ;, }, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,]
[}, }, Tick, tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,]
[tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;]
[tick, =, new, NumberTick, (, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;]
[(, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (]
[tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, ticks, ., add, (, tick, ), ;, }, }, }, return]
[ticks, ;, }, protected, List, refreshTicksVertical, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, ticks, =]
[,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, double, lowerBoundVal, =]
[,, RectangleEdge, edge, ), {, List, ticks, =, new, java, ., util, ., ArrayList, (, ), ;, double, lowerBoundVal, =]
[., util, ., ArrayList, (, ), ;, double, lowerBoundVal, =, getRange, (, ), ., getLowerBound, (, ), ;, if, (]
[., util, ., ArrayList, (, ), ;, double, lowerBoundVal, =, getRange, (, ), ., getLowerBound, (, ), ;, if, (]
[., util, ., ArrayList, (, ), ;, double, lowerBoundVal, =, getRange, (, ), ., getLowerBound, (, ), ;, if, (]
[(, ), ;, double, lowerBoundVal, =, getRange, (, ), ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&]
[(, ), ;, double, lowerBoundVal, =, getRange, (, ), ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&]
[;, double, lowerBoundVal, =, getRange, (, ), ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <]
[=, getRange, (, ), ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {]
[(, ), ., getLowerBound, (, ), ;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =]
[;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =]
[;, if, (, this, ., smallLogFlag, &&, lowerBoundVal, <, SMALL_LOG_VALUE, ), {, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =]
[{, lowerBoundVal, =, SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount, =]
[SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, )]
[SMALL_LOG_VALUE, ;, }, double, upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, )]
[upperBoundVal, =, getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math, ., rint, (]
[getRange, (, ), ., getUpperBound, (, ), ;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (]
[;, int, iBegCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, )]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, )]
[Math, ., rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (]
[rint, (, switchedLog10, (, lowerBoundVal, ), ), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[), ;, int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (]
[int, iEndCount, =, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&]
[=, (, int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&]
[int, ), Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >]
[Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&]
[Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&]
[Math, ., rint, (, switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&]
[switchedLog10, (, upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (]
[upperBoundVal, ), ), ;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,]
[;, if, (, iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >]
[iBegCount, ==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {]
[==, iEndCount, &&, iBegCount, >, 0, &&, Math, ., pow, (, 10, ,, iBegCount, ), >, lowerBoundVal, ), {, --]
[,, iBegCount, ), >, lowerBoundVal, ), {, --, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =]
[--, iBegCount, ;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =]
[;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[;, }, double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;]
[double, tickVal, ;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;, i, <=]
[;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;]
[;, String, tickLabel, ;, boolean, zeroTickFlag, =, false, ;, for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;]
[false, ;, for, (, int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, int, jEndCount, =]
[int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (]
[int, i, =, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (]
[=, iBegCount, ;, i, <=, iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==]
[i, <=, iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, ), {]
[iEndCount, ;, i, ++, ), {, int, jEndCount, =, 10, ;, if, (, i, ==, iEndCount, ), {, jEndCount, =]
[=, 10, ;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =]
[;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;]
[;, if, (, i, ==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;]
[(, i, ==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;, j, <]
[==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;]
[==, iEndCount, ), {, jEndCount, =, 1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;]
[1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if, (]
[1, ;, }, for, (, int, j, =, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if, (]
[int, j, =, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {]
[=, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =]
[=, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =]
[=, 0, ;, j, <, jEndCount, ;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =]
[<, jEndCount, ;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (]
[;, j, ++, ), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,]
[), {, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +]
[{, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +, (]
[{, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +, (]
[{, if, (, this, ., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +, (]
[., smallLogFlag, ), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (]
[), {, tickVal, =, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[=, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (]
[i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), ;, if, (, j, ==]
[., pow, (, 10, ,, i, ), *, j, ), ;, if, (, j, ==, 0, ), {, if, (]
[., pow, (, 10, ,, i, ), *, j, ), ;, if, (, j, ==, 0, ), {, if, (]
[i, ), *, j, ), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {]
[*, j, ), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =]
[*, j, ), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =]
[), ;, if, (, j, ==, 0, ), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +]
[), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (]
[), {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (]
[., log10TickLabelsFlag, ), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {]
[), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =]
[), {, tickLabel, =, "10^", +, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =]
[tickLabel, =, "10^", +, i, ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +]
[else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i, ;, }, else, {, if, (]
[else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i, ;, }, else, {, if, (]
[if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, "1e", +, i, ;, }, else, {, if, (, i, >=]
[{, tickLabel, =, "1e", +, i, ;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =]
[;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (]
[;, }, else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (]
[else, {, if, (, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=]
[(, i, >=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {]
[>=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =]
[>=, 0, ), {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =]
[NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =, format, ., format, (]
[;, if, (, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {]
[(, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =]
[(, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =]
[), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (]
[=, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, )]
[=, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, )]
[(, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, ., rint, (]
[=, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, else, {]
[=, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, else, {]
[=, Long, ., toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, else, {]
[long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (]
[), Math, ., rint, (, tickVal, ), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -]
[rint, (, tickVal, ), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;]
[tickVal, ), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =]
[tickVal, ), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =]
[tickVal, ), ), ;, }, }, else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =]
[else, {, this, ., numberFormatterObj, ., setMaximumFractionDigits, (, -, i, ), ;, tickLabel, =, this, ., numberFormatterObj, ., format, (]
[i, ), ;, tickLabel, =, this, ., numberFormatterObj, ., format, (, tickVal, ), ;, }, }, }, }, else, {]
[;, tickLabel, =, this, ., numberFormatterObj, ., format, (, tickVal, ), ;, }, }, }, }, else, {, tickLabel, =]
[(, tickVal, ), ;, }, }, }, }, else, {, tickLabel, =, "", ;, }, }, else, {, if, (]
[;, }, }, }, }, else, {, tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {]
[}, }, }, }, else, {, tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --]
[}, else, {, tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }]
[{, tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =]
[{, tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =]
[tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (]
[tickLabel, =, "", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (]
["", ;, }, }, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (, i, >=]
[}, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (, i, >=, 0, ), ?]
[}, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (, i, >=, 0, ), ?]
[}, else, {, if, (, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (, i, >=, 0, ), ?]
[(, zeroTickFlag, ), {, --, j, ;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (]
[), {, --, j, ;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,]
[j, ;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +]
[;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[;, }, tickVal, =, (, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (]
[(, i, >=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (]
[>=, 0, ), ?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,]
[?, Math, ., pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *]
[pow, (, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :]
[(, 10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (]
[10, ,, i, ), +, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (]
[+, (, Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (]
[Math, ., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,]
[., pow, (, 10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -]
[10, ,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[,, i, ), *, j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (]
[j, ), :, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[:, -, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,]
[-, (, Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -]
[Math, ., pow, (, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -]
[(, 10, ,, -, i, ), -, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *]
[-, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (]
[-, (, Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (]
[Math, ., pow, (, 10, ,, -, i, -, 1, ), *, j, ), ), ;, if, (, j, ==]
[,, -, i, -, 1, ), *, j, ), ), ;, if, (, j, ==, 0, ), {, if, (]
[-, i, -, 1, ), *, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !]
[*, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (]
[*, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (]
[*, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (]
[*, j, ), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (]
[), ), ;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >]
[;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&]
[;, if, (, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&]
[(, j, ==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <]
[==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&]
[==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&]
[==, 0, ), {, if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&]
[if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (]
[if, (, !, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (]
[!, zeroTickFlag, ), {, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -]
[{, if, (, i, >, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <]
[i, >, iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {]
[iBegCount, &&, i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =]
[i, <, iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;]
[iEndCount, &&, Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =]
[Math, ., abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;]
[abs, (, tickVal, -, 1.0, ), <, 0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =]
[0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (]
[0.0001, ), {, tickVal, =, 0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (]
[0.0, ;, zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {]
[zeroTickFlag, =, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =]
[=, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (]
[=, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (]
[=, true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (]
[true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (]
[true, ;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (]
[;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (]
[;, tickLabel, =, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (]
[=, "0", ;, }, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <]
[}, else, {, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?]
[{, if, (, this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :]
[this, ., log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +]
[log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "10^", +]
[log10TickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "10^", +]
[=, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "10^", +, Math, ., abs, (]
["-", :, "", ), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if, (]
["-", :, "", ), +, "10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if, (]
["10^", +, Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {]
[Math, ., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =]
[., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (]
[., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (]
[., abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (]
[abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (]
[abs, (, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (]
[(, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (]
[(, i, ), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (]
[), ), ;, }, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <]
[}, else, {, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?]
[{, if, (, this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :]
[this, ., expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +]
[expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "1e", +]
[expTickLabelsFlag, ), {, tickLabel, =, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "1e", +]
[=, (, (, (, i, <, 0, ), ?, "-", :, "", ), +, "1e", +, Math, ., abs, (]
[:, "", ), +, "1e", +, Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =]
[Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (]
[Math, ., abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (]
[abs, (, i, ), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=]
[), ), ;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {]
[;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =]
[;, }, else, {, NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =]
[NumberFormat, format, =, getNumberFormatOverride, (, ), ;, if, (, format, !=, null, ), {, tickLabel, =, format, ., format, (]
[;, if, (, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {]
[(, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =]
[(, format, !=, null, ), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =]
[), {, tickLabel, =, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (]
[=, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, )]
[=, format, ., format, (, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, )]
[(, tickVal, ), ;, }, else, {, tickLabel, =, Long, ., toString, (, (, long, ), Math, ., rint, (]
[toString, (, (, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, }, }, }, else, {]
[(, long, ), Math, ., rint, (, tickVal, ), ), ;, }, }, }, }, }, else, {, tickLabel, =]
[), Math, ., rint, (, tickVal, ), ), ;, }, }, }, }, }, else, {, tickLabel, =, "", ;]
[., rint, (, tickVal, ), ), ;, }, }, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =]
[;, }, }, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, else, {]
[}, }, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, else, {, tickLabel, =]
[}, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, else, {, tickLabel, =, "", ;]
[else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =]
[zeroTickFlag, =, false, ;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, if, (]
[zeroTickFlag, =, false, ;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, if, (]
[false, ;, }, }, else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal, >]
[else, {, tickLabel, =, "", ;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return]
[;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (]
[;, zeroTickFlag, =, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (]
[=, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, tickVal, >=]
[=, false, ;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, tickVal, >=]
[;, }, }, if, (, tickVal, >, upperBoundVal, ), {, return, ticks, ;, }, if, (, tickVal, >=, lowerBoundVal, -]
[>, upperBoundVal, ), {, return, ticks, ;, }, if, (, tickVal, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =]
[ticks, ;, }, if, (, tickVal, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =]
[tickVal, >=, lowerBoundVal, -, SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =]
[SMALL_LOG_VALUE, ), {, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==]
[rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==]
[angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[(, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -]
[{, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /]
[BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {]
[rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =]
[rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =]
[BOTTOM_CENTER, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =]
[., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =]
[else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /]
[rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[rotationAnchor, =, TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[TextAnchor, ., BOTTOM_CENTER, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[=, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;]
[}, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[}, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {]
[LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =]
[LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =]
[=, TextAnchor, ., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =]
[., CENTER_RIGHT, ;, rotationAnchor, =, TextAnchor, ., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =]
[., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }]
[., CENTER_RIGHT, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }]
[else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (]
[=, TextAnchor, ., CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (]
[CENTER_LEFT, ;, rotationAnchor, =, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (]
[=, TextAnchor, ., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,]
[., CENTER_LEFT, ;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,, tickLabel, ,]
[;, }, }, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,, tickLabel, ,, anchor, ,]
[}, ticks, ., add, (, new, NumberTick, (, new, Double, (, tickVal, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,]
[new, Double, (, tickVal, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ), ;, }, }, }, return]
[}, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (]
[}, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (]
[}, }, }, return, ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (]
[ticks, ;, }, protected, String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (, this, ., expTickLabelsFlag, ||]
[String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (, this, ., expTickLabelsFlag, ||, forceFmtFlag, ), {, return]
[String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (, this, ., expTickLabelsFlag, ||, forceFmtFlag, ), {, return]
[String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (, this, ., expTickLabelsFlag, ||, forceFmtFlag, ), {, return]
[String, makeTickLabel, (, double, val, ,, boolean, forceFmtFlag, ), {, if, (, this, ., expTickLabelsFlag, ||, forceFmtFlag, ), {, return]
[boolean, forceFmtFlag, ), {, if, (, this, ., expTickLabelsFlag, ||, forceFmtFlag, ), {, return, this, ., numberFormatterObj, ., format, (]
[||, forceFmtFlag, ), {, return, this, ., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;, }, return]
[||, forceFmtFlag, ), {, return, this, ., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;, }, return]
[., numberFormatterObj, ., format, (, val, ), ., toLowerCase, (, ), ;, }, return, getTickUnit, (, ), ., valueToString, (]
[return, getTickUnit, (, ), ., valueToString, (, val, ), ;, }, protected, String, makeTickLabel, (, double, val, ), {, return]
[(, ), ., valueToString, (, val, ), ;, }, protected, String, makeTickLabel, (, double, val, ), {, return, makeTickLabel, (]
[., valueToString, (, val, ), ;, }, protected, String, makeTickLabel, (, double, val, ), {, return, makeTickLabel, (, val, ,]
