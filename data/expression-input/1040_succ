[=, outerClassInstance, ;, }, public, <, T, >, T, newInstance, (, Class, <, T, >, cls, ), {, if, (]
[., outerClassInstance, =, outerClassInstance, ;, }, public, <, T, >, T, newInstance, (, Class, <, T, >, cls, ), {]
[;, }, public, <, T, >, T, newInstance, (, Class, <, T, >, cls, ), {, if, (, outerClassInstance, ==]
[), {, return, noArgConstructor, (, cls, ), ;, }, return, withParams, (, cls, ,, outerClassInstance, ), ;, }, private, static]
[==, null, ), {, return, noArgConstructor, (, cls, ), ;, }, return, withParams, (, cls, ,, outerClassInstance, ), ;, }]
[), {, return, noArgConstructor, (, cls, ), ;, }, return, withParams, (, cls, ,, outerClassInstance, ), ;, }, private, static]
[;, }, return, withParams, (, cls, ,, outerClassInstance, ), ;, }, private, static, <, T, >, T, withParams, (, Class]
[), ;, }, return, withParams, (, cls, ,, outerClassInstance, ), ;, }, private, static, <, T, >, T, withParams, (]
[;, }, private, static, <, T, >, T, withParams, (, Class, <, T, >, cls, ,, Object, ..., params, )]
[,, outerClassInstance, ), ;, }, private, static, <, T, >, T, withParams, (, Class, <, T, >, cls, ,, Object]
[), ;, }, private, static, <, T, >, T, withParams, (, Class, <, T, >, cls, ,, Object, ..., params]
[), {, Class, <, ?, >, [, ], types, =, constructor, ., getParameterTypes, (, ), ;, if, (, paramsMatch, (]
[., getDeclaredConstructors, (, ), ), {, Class, <, ?, >, [, ], types, =, constructor, ., getParameterTypes, (, ), ;]
[;, if, (, paramsMatch, (, types, ,, params, ), ), {, return, invokeConstructor, (, constructor, ,, params, ), ;, }]
[., getParameterTypes, (, ), ;, if, (, paramsMatch, (, types, ,, params, ), ), {, return, invokeConstructor, (, constructor, ,]
[), {, return, invokeConstructor, (, constructor, ,, params, ), ;, }, }, }, catch, (, Exception, e, ), {, throw]
[,, params, ), ), {, return, invokeConstructor, (, constructor, ,, params, ), ;, }, }, }, catch, (, Exception, e]
[), ), {, return, invokeConstructor, (, constructor, ,, params, ), ;, }, }, }, catch, (, Exception, e, ), {]
[;, }, }, }, catch, (, Exception, e, ), {, throw, paramsException, (, cls, ,, e, ), ;, }, throw]
[,, params, ), ;, }, }, }, catch, (, Exception, e, ), {, throw, paramsException, (, cls, ,, e, )]
[), ;, }, }, }, catch, (, Exception, e, ), {, throw, paramsException, (, cls, ,, e, ), ;, }]
[;, }, throw, paramsException, (, cls, ,, null, ), ;, }, @, SuppressWarnings, (, "unchecked", ), private, static, <, T]
[,, e, ), ;, }, throw, paramsException, (, cls, ,, null, ), ;, }, @, SuppressWarnings, (, "unchecked", ), private]
[), ;, }, throw, paramsException, (, cls, ,, null, ), ;, }, @, SuppressWarnings, (, "unchecked", ), private, static, <]
[;, }, @, SuppressWarnings, (, "unchecked", ), private, static, <, T, >, T, invokeConstructor, (, Constructor, <, ?, >, constructor]
[,, null, ), ;, }, @, SuppressWarnings, (, "unchecked", ), private, static, <, T, >, T, invokeConstructor, (, Constructor, <]
[), ;, }, @, SuppressWarnings, (, "unchecked", ), private, static, <, T, >, T, invokeConstructor, (, Constructor, <, ?, >]
[private, static, <, T, >, T, invokeConstructor, (, Constructor, <, ?, >, constructor, ,, Object, ..., params, ), throws, java]
[), private, static, <, T, >, T, invokeConstructor, (, Constructor, <, ?, >, constructor, ,, Object, ..., params, ), throws]
[;, accessibility, ., enableAccess, (, constructor, ), ;, return, (, T, ), constructor, ., newInstance, (, params, ), ;, }]
[;, return, (, T, ), constructor, ., newInstance, (, params, ), ;, }, private, static, <, T, >, InstantiationException, paramsException]
[., enableAccess, (, constructor, ), ;, return, (, T, ), constructor, ., newInstance, (, params, ), ;, }, private, static]
[), ;, return, (, T, ), constructor, ., newInstance, (, params, ), ;, }, private, static, <, T, >, InstantiationException]
[;, }, private, static, <, T, >, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {]
[;, }, private, static, <, T, >, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, ), {]
[., newInstance, (, params, ), ;, }, private, static, <, T, >, InstantiationException, paramsException, (, Class, <, T, >, cls]
[), ;, }, private, static, <, T, >, InstantiationException, paramsException, (, Class, <, T, >, cls, ,, Exception, e, )]
[;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types, ,, Object, [, ], params, )]
[,, e, ), ;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types, ,, Object, []
[,, "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", ), ,, e, ), ;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types]
[+, "'.", ,, "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", ), ,, e, ), ;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, []
[+, cls, ., getSimpleName, (, ), +, "'.", ,, "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", ), ,, e, ), ;, }, private, static, boolean, paramsMatch]
[+, "'.", ,, "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", ), ,, e, ), ;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, []
[., getSimpleName, (, ), +, "'.", ,, "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", ), ,, e, ), ;, }, private, static, boolean, paramsMatch, (, Class]
[,, "Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", ), ,, e, ), ;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types]
[), ,, e, ), ;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types, ,, Object]
[), ;, }, private, static, boolean, paramsMatch, (, Class, <, ?, >, [, ], types, ,, Object, [, ], params]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, params, ., length, ;, i]
[!=, types, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, params]
[., length, !=, types, ., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, params, ., length, ;, i]
[., length, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, params, ., length]
[;, }, for, (, int, i, =, 0, ;, i, <, params, ., length, ;, i, ++, ), {, if]
[;, i, <, params, ., length, ;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance]
[;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance, (, params, [, i, ], )]
[<, params, ., length, ;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance, (, params]
[;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance, (, params, [, i, ], )]
[., length, ;, i, ++, ), {, if, (, !, types, [, i, ], ., isInstance, (, params, [, i]
[), {, if, (, !, types, [, i, ], ., isInstance, (, params, [, i, ], ), ), {, return]
[++, ), {, if, (, !, types, [, i, ], ., isInstance, (, params, [, i, ], ), ), {]
[), {, return, false, ;, }, }, return, true, ;, }, private, static, <, T, >, T, noArgConstructor, (, Class]
[), {, return, false, ;, }, }, return, true, ;, }, private, static, <, T, >, T, noArgConstructor, (, Class]
[., isInstance, (, params, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, private]
[[, i, ], ., isInstance, (, params, [, i, ], ), ), {, return, false, ;, }, }, return, true]
[], ., isInstance, (, params, [, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }]
[), ), {, return, false, ;, }, }, return, true, ;, }, private, static, <, T, >, T, noArgConstructor, (]
[[, i, ], ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, <, T, >]
[], ), ), {, return, false, ;, }, }, return, true, ;, }, private, static, <, T, >, T, noArgConstructor]
[;, }, }, return, true, ;, }, private, static, <, T, >, T, noArgConstructor, (, Class, <, T, >, cls]
[;, }, private, static, <, T, >, T, noArgConstructor, (, Class, <, T, >, cls, ), {, try, {, return]
[;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName, (]
[), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (, "Unable to create instance of '", +, cls, ., getSimpleName]
[., getDeclaredConstructor, (, ), ), ;, }, catch, (, Throwable, t, ), {, throw, new, InstantiationException, (, join, (, "Unable to create instance of '"]
[;, }, }, }]
[,, t, ), ;, }, }, }]
[,, "Please ensure it has 0-arg constructor which invokes cleanly.", ), ,, t, ), ;, }, }, }]
[+, "'.", ,, "Please ensure it has 0-arg constructor which invokes cleanly.", ), ,, t, ), ;, }, }, }]
[+, cls, ., getSimpleName, (, ), +, "'.", ,, "Please ensure it has 0-arg constructor which invokes cleanly.", ), ,, t, ), ;, }, }, }]
[+, "'.", ,, "Please ensure it has 0-arg constructor which invokes cleanly.", ), ,, t, ), ;, }, }, }]
[., getSimpleName, (, ), +, "'.", ,, "Please ensure it has 0-arg constructor which invokes cleanly.", ), ,, t, ), ;, }, }, }]
[,, "Please ensure it has 0-arg constructor which invokes cleanly.", ), ,, t, ), ;, }, }, }]
[), ,, t, ), ;, }, }, }]
[), ;, }, }, }]
