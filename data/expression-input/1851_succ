[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, knots, ., length, <, 2, ), {, throw, new]
[||, polynomials, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, knots, ., length, <, 2]
[==, null, ||, polynomials, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, knots, ., length]
[||, polynomials, ==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, knots, ., length, <, 2]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, knots, ., length, <, 2, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, knots, ., length, <, 2, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, knots, ., length, <, 2, ), {, throw, new]
[;, }, if, (, knots, ., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, ,, 2]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, ,, 2, ,, knots, ., length, ,, false, ), ;, }]
[<, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, ,, 2, ,, knots, ., length, ,, false, )]
[., length, <, 2, ), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, ,, 2, ,, knots, ., length, ,]
[), {, throw, new, NumberIsTooSmallException, (, LocalizedFormats, ., NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, ,, 2, ,, knots, ., length, ,, false, ), ;, }]
[;, }, if, (, knots, ., length, -, 1, !=, polynomials, ., length, ), {, throw, new, DimensionMismatchException, (, polynomials]
[,, 2, ,, knots, ., length, ,, false, ), ;, }, if, (, knots, ., length, -, 1, !=, polynomials]
[., NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION, ,, 2, ,, knots, ., length, ,, false, ), ;, }, if, (, knots, ., length, -, 1]
[,, knots, ., length, ,, false, ), ;, }, if, (, knots, ., length, -, 1, !=, polynomials, ., length]
[,, false, ), ;, }, if, (, knots, ., length, -, 1, !=, polynomials, ., length, ), {, throw, new]
[., length, ,, false, ), ;, }, if, (, knots, ., length, -, 1, !=, polynomials, ., length, ), {]
[), ;, }, if, (, knots, ., length, -, 1, !=, polynomials, ., length, ), {, throw, new, DimensionMismatchException, (]
[), {, throw, new, DimensionMismatchException, (, polynomials, ., length, ,, knots, ., length, ), ;, }, MathArrays, ., checkOrder, (]
[!=, polynomials, ., length, ), {, throw, new, DimensionMismatchException, (, polynomials, ., length, ,, knots, ., length, ), ;, }]
[-, 1, !=, polynomials, ., length, ), {, throw, new, DimensionMismatchException, (, polynomials, ., length, ,, knots, ., length, )]
[., length, -, 1, !=, polynomials, ., length, ), {, throw, new, DimensionMismatchException, (, polynomials, ., length, ,, knots, .]
[!=, polynomials, ., length, ), {, throw, new, DimensionMismatchException, (, polynomials, ., length, ,, knots, ., length, ), ;, }]
[), {, throw, new, DimensionMismatchException, (, polynomials, ., length, ,, knots, ., length, ), ;, }, MathArrays, ., checkOrder, (]
[., length, ), {, throw, new, DimensionMismatchException, (, polynomials, ., length, ,, knots, ., length, ), ;, }, MathArrays, .]
[;, }, MathArrays, ., checkOrder, (, knots, ), ;, this, ., n, =, knots, ., length, -, 1, ;, this]
[,, knots, ., length, ), ;, }, MathArrays, ., checkOrder, (, knots, ), ;, this, ., n, =, knots, .]
[., length, ,, knots, ., length, ), ;, }, MathArrays, ., checkOrder, (, knots, ), ;, this, ., n, =]
[), ;, }, MathArrays, ., checkOrder, (, knots, ), ;, this, ., n, =, knots, ., length, -, 1, ;]
[., length, ), ;, }, MathArrays, ., checkOrder, (, knots, ), ;, this, ., n, =, knots, ., length, -]
[;, this, ., n, =, knots, ., length, -, 1, ;, this, ., knots, =, new, double, [, n, +]
[., checkOrder, (, knots, ), ;, this, ., n, =, knots, ., length, -, 1, ;, this, ., knots, =]
[), ;, this, ., n, =, knots, ., length, -, 1, ;, this, ., knots, =, new, double, [, n]
[=, knots, ., length, -, 1, ;, this, ., knots, =, new, double, [, n, +, 1, ], ;, System]
[., n, =, knots, ., length, -, 1, ;, this, ., knots, =, new, double, [, n, +, 1, ]]
[;, this, ., knots, =, new, double, [, n, +, 1, ], ;, System, ., arraycopy, (, knots, ,, 0]
[-, 1, ;, this, ., knots, =, new, double, [, n, +, 1, ], ;, System, ., arraycopy, (, knots]
[., length, -, 1, ;, this, ., knots, =, new, double, [, n, +, 1, ], ;, System, ., arraycopy]
[;, this, ., knots, =, new, double, [, n, +, 1, ], ;, System, ., arraycopy, (, knots, ,, 0]
[=, new, double, [, n, +, 1, ], ;, System, ., arraycopy, (, knots, ,, 0, ,, this, ., knots]
[., knots, =, new, double, [, n, +, 1, ], ;, System, ., arraycopy, (, knots, ,, 0, ,, this]
[;, System, ., arraycopy, (, knots, ,, 0, ,, this, ., knots, ,, 0, ,, n, +, 1, ), ;]
[], ;, System, ., arraycopy, (, knots, ,, 0, ,, this, ., knots, ,, 0, ,, n, +, 1, )]
[+, 1, ], ;, System, ., arraycopy, (, knots, ,, 0, ,, this, ., knots, ,, 0, ,, n, +]
[], ;, System, ., arraycopy, (, knots, ,, 0, ,, this, ., knots, ,, 0, ,, n, +, 1, )]
[;, this, ., polynomials, =, new, PolynomialFunction, [, n, ], ;, System, ., arraycopy, (, polynomials, ,, 0, ,, this]
[., arraycopy, (, knots, ,, 0, ,, this, ., knots, ,, 0, ,, n, +, 1, ), ;, this, .]
[,, 0, ,, this, ., knots, ,, 0, ,, n, +, 1, ), ;, this, ., polynomials, =, new, PolynomialFunction]
[,, this, ., knots, ,, 0, ,, n, +, 1, ), ;, this, ., polynomials, =, new, PolynomialFunction, [, n]
[,, 0, ,, n, +, 1, ), ;, this, ., polynomials, =, new, PolynomialFunction, [, n, ], ;, System, .]
[., knots, ,, 0, ,, n, +, 1, ), ;, this, ., polynomials, =, new, PolynomialFunction, [, n, ], ;]
[,, n, +, 1, ), ;, this, ., polynomials, =, new, PolynomialFunction, [, n, ], ;, System, ., arraycopy, (]
[), ;, this, ., polynomials, =, new, PolynomialFunction, [, n, ], ;, System, ., arraycopy, (, polynomials, ,, 0, ,]
[+, 1, ), ;, this, ., polynomials, =, new, PolynomialFunction, [, n, ], ;, System, ., arraycopy, (, polynomials, ,]
[), ;, this, ., polynomials, =, new, PolynomialFunction, [, n, ], ;, System, ., arraycopy, (, polynomials, ,, 0, ,]
[=, new, PolynomialFunction, [, n, ], ;, System, ., arraycopy, (, polynomials, ,, 0, ,, this, ., polynomials, ,, 0]
[., polynomials, =, new, PolynomialFunction, [, n, ], ;, System, ., arraycopy, (, polynomials, ,, 0, ,, this, ., polynomials]
[;, System, ., arraycopy, (, polynomials, ,, 0, ,, this, ., polynomials, ,, 0, ,, n, ), ;, }, public]
[], ;, System, ., arraycopy, (, polynomials, ,, 0, ,, this, ., polynomials, ,, 0, ,, n, ), ;, }]
[;, }, public, double, value, (, double, v, ), {, if, (, v, <, knots, [, 0, ], ||, v]
[., arraycopy, (, polynomials, ,, 0, ,, this, ., polynomials, ,, 0, ,, n, ), ;, }, public, double, value]
[,, 0, ,, this, ., polynomials, ,, 0, ,, n, ), ;, }, public, double, value, (, double, v, )]
[,, this, ., polynomials, ,, 0, ,, n, ), ;, }, public, double, value, (, double, v, ), {, if]
[,, 0, ,, n, ), ;, }, public, double, value, (, double, v, ), {, if, (, v, <, knots]
[., polynomials, ,, 0, ,, n, ), ;, }, public, double, value, (, double, v, ), {, if, (, v]
[,, n, ), ;, }, public, double, value, (, double, v, ), {, if, (, v, <, knots, [, 0]
[), ;, }, public, double, value, (, double, v, ), {, if, (, v, <, knots, [, 0, ], ||]
[), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }]
[||, v, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,]
[<, knots, [, 0, ], ||, v, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, v, ,]
[||, v, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,]
[[, 0, ], ||, v, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, v, ,, knots, []
[], ||, v, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ]]
[), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }]
[>, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,, knots, []
[), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }]
[[, n, ], ), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,, knots, [, n, ]]
[], ), {, throw, new, OutOfRangeException, (, v, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;]
[;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, v, ), ;, if, (, i, <, 0, )]
[,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (]
[,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, v, ), ;]
[[, 0, ], ,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,]
[], ,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, v, )]
[), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, v, ), ;, if, (, i, <, 0]
[[, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, v, ), ;, if, (]
[], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, v, ), ;, if, (, i, <]
[;, if, (, i, <, 0, ), {, i, =, -, i, -, 2, ;, }, if, (, i, >=]
[., binarySearch, (, knots, ,, v, ), ;, if, (, i, <, 0, ), {, i, =, -, i, -]
[,, v, ), ;, if, (, i, <, 0, ), {, i, =, -, i, -, 2, ;, }, if]
[), ;, if, (, i, <, 0, ), {, i, =, -, i, -, 2, ;, }, if, (, i]
[), {, i, =, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i]
[<, 0, ), {, i, =, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, )]
[), {, i, =, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i]
[=, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }]
[;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, [, i, ]]
[-, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, []
[-, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, []
[;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, [, i, ]]
[), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, v, -, knots, [, i, ]]
[>=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, v, -]
[), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, v, -, knots, [, i, ]]
[., length, ), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, v, -, knots, []
[;, }, return, polynomials, [, i, ], ., value, (, v, -, knots, [, i, ], ), ;, }, public]
[--, ;, }, return, polynomials, [, i, ], ., value, (, v, -, knots, [, i, ], ), ;, }]
[;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialSplineDerivative, (, ), ;, }, public, PolynomialSplineFunction, polynomialSplineDerivative, (, ), {]
[., value, (, v, -, knots, [, i, ], ), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialSplineDerivative]
[[, i, ], ., value, (, v, -, knots, [, i, ], ), ;, }, public, UnivariateFunction, derivative, (, )]
[], ., value, (, v, -, knots, [, i, ], ), ;, }, public, UnivariateFunction, derivative, (, ), {, return]
[), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialSplineDerivative, (, ), ;, }, public, PolynomialSplineFunction, polynomialSplineDerivative, (, )]
[-, knots, [, i, ], ), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialSplineDerivative, (, ), ;, }]
[), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialSplineDerivative, (, ), ;, }, public, PolynomialSplineFunction, polynomialSplineDerivative, (, )]
[[, i, ], ), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialSplineDerivative, (, ), ;, }, public, PolynomialSplineFunction]
[], ), ;, }, public, UnivariateFunction, derivative, (, ), {, return, polynomialSplineDerivative, (, ), ;, }, public, PolynomialSplineFunction, polynomialSplineDerivative, (]
[;, }, public, PolynomialSplineFunction, polynomialSplineDerivative, (, ), {, PolynomialFunction, derivativePolynomials, [, ], =, new, PolynomialFunction, [, n, ], ;, for]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, derivativePolynomials, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, derivativePolynomials, [, i]
[;, i, <, n, ;, i, ++, ), {, derivativePolynomials, [, i, ], =, polynomials, [, i, ], ., polynomialDerivative]
[;, i, ++, ), {, derivativePolynomials, [, i, ], =, polynomials, [, i, ], ., polynomialDerivative, (, ), ;, }]
[<, n, ;, i, ++, ), {, derivativePolynomials, [, i, ], =, polynomials, [, i, ], ., polynomialDerivative, (, )]
[;, i, ++, ), {, derivativePolynomials, [, i, ], =, polynomials, [, i, ], ., polynomialDerivative, (, ), ;, }]
[), {, derivativePolynomials, [, i, ], =, polynomials, [, i, ], ., polynomialDerivative, (, ), ;, }, return, new, PolynomialSplineFunction]
[++, ), {, derivativePolynomials, [, i, ], =, polynomials, [, i, ], ., polynomialDerivative, (, ), ;, }, return, new]
[=, polynomials, [, i, ], ., polynomialDerivative, (, ), ;, }, return, new, PolynomialSplineFunction, (, knots, ,, derivativePolynomials, ), ;]
[[, i, ], =, polynomials, [, i, ], ., polynomialDerivative, (, ), ;, }, return, new, PolynomialSplineFunction, (, knots, ,]
[], =, polynomials, [, i, ], ., polynomialDerivative, (, ), ;, }, return, new, PolynomialSplineFunction, (, knots, ,, derivativePolynomials, )]
[;, }, return, new, PolynomialSplineFunction, (, knots, ,, derivativePolynomials, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, )]
[., polynomialDerivative, (, ), ;, }, return, new, PolynomialSplineFunction, (, knots, ,, derivativePolynomials, ), ;, }, public, DerivativeStructure, value, (]
[[, i, ], ., polynomialDerivative, (, ), ;, }, return, new, PolynomialSplineFunction, (, knots, ,, derivativePolynomials, ), ;, }, public]
[], ., polynomialDerivative, (, ), ;, }, return, new, PolynomialSplineFunction, (, knots, ,, derivativePolynomials, ), ;, }, public, DerivativeStructure, value]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, final, double, t0, =, t, ., getValue, (, )]
[,, derivativePolynomials, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, final, double, t0, =, t, .]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), {, final, double, t0, =, t, ., getValue, (]
[;, if, (, t0, <, knots, [, 0, ], ||, t0, >, knots, [, n, ], ), {, throw, new]
[., getValue, (, ), ;, if, (, t0, <, knots, [, 0, ], ||, t0, >, knots, [, n, ]]
[), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }]
[||, t0, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,]
[<, knots, [, 0, ], ||, t0, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, t0, ,]
[||, t0, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,]
[[, 0, ], ||, t0, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, t0, ,, knots, []
[], ||, t0, >, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ]]
[), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }]
[>, knots, [, n, ], ), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,, knots, []
[), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }]
[[, n, ], ), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,, knots, [, n, ]]
[], ), {, throw, new, OutOfRangeException, (, t0, ,, knots, [, 0, ], ,, knots, [, n, ], ), ;]
[;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, t0, ), ;, if, (, i, <, 0, )]
[,, knots, [, 0, ], ,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (]
[,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, t0, ), ;]
[[, 0, ], ,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,]
[], ,, knots, [, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, t0, )]
[), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, t0, ), ;, if, (, i, <, 0]
[[, n, ], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, t0, ), ;, if, (]
[], ), ;, }, int, i, =, Arrays, ., binarySearch, (, knots, ,, t0, ), ;, if, (, i, <]
[;, if, (, i, <, 0, ), {, i, =, -, i, -, 2, ;, }, if, (, i, >=]
[., binarySearch, (, knots, ,, t0, ), ;, if, (, i, <, 0, ), {, i, =, -, i, -]
[,, t0, ), ;, if, (, i, <, 0, ), {, i, =, -, i, -, 2, ;, }, if]
[), ;, if, (, i, <, 0, ), {, i, =, -, i, -, 2, ;, }, if, (, i]
[), {, i, =, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i]
[<, 0, ), {, i, =, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, )]
[), {, i, =, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i]
[=, -, i, -, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }]
[;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, [, i, ]]
[-, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, []
[-, 2, ;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, []
[;, }, if, (, i, >=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, [, i, ]]
[), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, t, ., subtract, (, knots, []
[>=, polynomials, ., length, ), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, t, .]
[), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, t, ., subtract, (, knots, []
[., length, ), {, i, --, ;, }, return, polynomials, [, i, ], ., value, (, t, ., subtract, (]
[;, }, return, polynomials, [, i, ], ., value, (, t, ., subtract, (, knots, [, i, ], ), )]
[--, ;, }, return, polynomials, [, i, ], ., value, (, t, ., subtract, (, knots, [, i, ], )]
[;, }, public, int, getN, (, ), {, return, n, ;, }, public, PolynomialFunction, [, ], getPolynomials, (, ), {]
[., value, (, t, ., subtract, (, knots, [, i, ], ), ), ;, }, public, int, getN, (, )]
[[, i, ], ., value, (, t, ., subtract, (, knots, [, i, ], ), ), ;, }, public, int]
[], ., value, (, t, ., subtract, (, knots, [, i, ], ), ), ;, }, public, int, getN, (]
[), ;, }, public, int, getN, (, ), {, return, n, ;, }, public, PolynomialFunction, [, ], getPolynomials, (, )]
[., subtract, (, knots, [, i, ], ), ), ;, }, public, int, getN, (, ), {, return, n, ;]
[), ), ;, }, public, int, getN, (, ), {, return, n, ;, }, public, PolynomialFunction, [, ], getPolynomials, (]
[[, i, ], ), ), ;, }, public, int, getN, (, ), {, return, n, ;, }, public, PolynomialFunction, []
[], ), ), ;, }, public, int, getN, (, ), {, return, n, ;, }, public, PolynomialFunction, [, ], getPolynomials]
[;, }, public, PolynomialFunction, [, ], getPolynomials, (, ), {, PolynomialFunction, p, [, ], =, new, PolynomialFunction, [, n, ]]
[;, System, ., arraycopy, (, polynomials, ,, 0, ,, p, ,, 0, ,, n, ), ;, return, p, ;, }]
[], ;, System, ., arraycopy, (, polynomials, ,, 0, ,, p, ,, 0, ,, n, ), ;, return, p, ;]
[;, return, p, ;, }, public, double, [, ], getKnots, (, ), {, double, out, [, ], =, new, double]
[., arraycopy, (, polynomials, ,, 0, ,, p, ,, 0, ,, n, ), ;, return, p, ;, }, public, double]
[,, 0, ,, p, ,, 0, ,, n, ), ;, return, p, ;, }, public, double, [, ], getKnots, (]
[,, p, ,, 0, ,, n, ), ;, return, p, ;, }, public, double, [, ], getKnots, (, ), {]
[,, 0, ,, n, ), ;, return, p, ;, }, public, double, [, ], getKnots, (, ), {, double, out]
[,, n, ), ;, return, p, ;, }, public, double, [, ], getKnots, (, ), {, double, out, [, ]]
[), ;, return, p, ;, }, public, double, [, ], getKnots, (, ), {, double, out, [, ], =, new]
[;, }, public, double, [, ], getKnots, (, ), {, double, out, [, ], =, new, double, [, n, +]
[;, System, ., arraycopy, (, knots, ,, 0, ,, out, ,, 0, ,, n, +, 1, ), ;, return, out]
[], ;, System, ., arraycopy, (, knots, ,, 0, ,, out, ,, 0, ,, n, +, 1, ), ;, return]
[+, 1, ], ;, System, ., arraycopy, (, knots, ,, 0, ,, out, ,, 0, ,, n, +, 1, )]
[], ;, System, ., arraycopy, (, knots, ,, 0, ,, out, ,, 0, ,, n, +, 1, ), ;, return]
[;, return, out, ;, }, public, boolean, isValidPoint, (, double, x, ), {, if, (, x, <, knots, [, 0]
[., arraycopy, (, knots, ,, 0, ,, out, ,, 0, ,, n, +, 1, ), ;, return, out, ;, }]
[,, 0, ,, out, ,, 0, ,, n, +, 1, ), ;, return, out, ;, }, public, boolean, isValidPoint, (]
[,, out, ,, 0, ,, n, +, 1, ), ;, return, out, ;, }, public, boolean, isValidPoint, (, double, x]
[,, 0, ,, n, +, 1, ), ;, return, out, ;, }, public, boolean, isValidPoint, (, double, x, ), {]
[,, n, +, 1, ), ;, return, out, ;, }, public, boolean, isValidPoint, (, double, x, ), {, if, (]
[), ;, return, out, ;, }, public, boolean, isValidPoint, (, double, x, ), {, if, (, x, <, knots, []
[+, 1, ), ;, return, out, ;, }, public, boolean, isValidPoint, (, double, x, ), {, if, (, x, <]
[), ;, return, out, ;, }, public, boolean, isValidPoint, (, double, x, ), {, if, (, x, <, knots, []
[;, }, public, boolean, isValidPoint, (, double, x, ), {, if, (, x, <, knots, [, 0, ], ||, x]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[||, x, >, knots, [, n, ], ), {, return, false, ;, }, else, {, return, true, ;, }, }]
[<, knots, [, 0, ], ||, x, >, knots, [, n, ], ), {, return, false, ;, }, else, {]
[||, x, >, knots, [, n, ], ), {, return, false, ;, }, else, {, return, true, ;, }, }]
[[, 0, ], ||, x, >, knots, [, n, ], ), {, return, false, ;, }, else, {, return, true]
[], ||, x, >, knots, [, n, ], ), {, return, false, ;, }, else, {, return, true, ;, }]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[>, knots, [, n, ], ), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[[, n, ], ), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[], ), {, return, false, ;, }, else, {, return, true, ;, }, }, }]
[;, }, else, {, return, true, ;, }, }, }]
[;, }, }, }]
