[Node, ;, import, java, ., util, ., Map, ;, class, GenerateExports, implements, CompilerPass, {, private, static, final, String, PROTOTYPE_PROPERTY, =]
[String, exportSymbolFunction, ;, private, final, String, exportPropertyFunction, ;, GenerateExports, (, AbstractCompiler, compiler, ,, String, exportSymbolFunction, ,, String, exportPropertyFunction, ), {]
[String, exportSymbolFunction, ;, private, final, String, exportPropertyFunction, ;, GenerateExports, (, AbstractCompiler, compiler, ,, String, exportSymbolFunction, ,, String, exportPropertyFunction, ), {]
[final, String, exportPropertyFunction, ;, GenerateExports, (, AbstractCompiler, compiler, ,, String, exportSymbolFunction, ,, String, exportPropertyFunction, ), {, Preconditions, ., checkNotNull, (]
[;, GenerateExports, (, AbstractCompiler, compiler, ,, String, exportSymbolFunction, ,, String, exportPropertyFunction, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[;, GenerateExports, (, AbstractCompiler, compiler, ,, String, exportSymbolFunction, ,, String, exportPropertyFunction, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;]
[compiler, ,, String, exportSymbolFunction, ,, String, exportPropertyFunction, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (]
[exportSymbolFunction, ,, String, exportPropertyFunction, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;]
[exportSymbolFunction, ,, String, exportPropertyFunction, ), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;]
[), {, Preconditions, ., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;, Preconditions, ., checkNotNull, (]
[., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;]
[., checkNotNull, (, compiler, ), ;, Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;]
[), ;, Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;, this, ., compiler, =]
[Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;, this, ., compiler, =, compiler, ;]
[Preconditions, ., checkNotNull, (, exportSymbolFunction, ), ;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;, this, ., compiler, =, compiler, ;]
[exportSymbolFunction, ), ;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;, this, ., compiler, =, compiler, ;, this, ., exportSymbolFunction, =]
[;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;, this, ., compiler, =, compiler, ;, this, ., exportSymbolFunction, =, exportSymbolFunction, ;]
[;, Preconditions, ., checkNotNull, (, exportPropertyFunction, ), ;, this, ., compiler, =, compiler, ;, this, ., exportSymbolFunction, =, exportSymbolFunction, ;]
[(, exportPropertyFunction, ), ;, this, ., compiler, =, compiler, ;, this, ., exportSymbolFunction, =, exportSymbolFunction, ;, this, ., exportPropertyFunction, =]
[=, exportPropertyFunction, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, FindExportableNodes, findExportableNodes, =]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, FindExportableNodes, findExportableNodes, =, new, FindExportableNodes, (]
[public, void, process, (, Node, externs, ,, Node, root, ), {, FindExportableNodes, findExportableNodes, =, new, FindExportableNodes, (, compiler, ), ;]
[public, void, process, (, Node, externs, ,, Node, root, ), {, FindExportableNodes, findExportableNodes, =, new, FindExportableNodes, (, compiler, ), ;]
[Node, externs, ,, Node, root, ), {, FindExportableNodes, findExportableNodes, =, new, FindExportableNodes, (, compiler, ), ;, NodeTraversal, ., traverse, (]
[,, Node, root, ), {, FindExportableNodes, findExportableNodes, =, new, FindExportableNodes, (, compiler, ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[root, ), {, FindExportableNodes, findExportableNodes, =, new, FindExportableNodes, (, compiler, ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExportableNodes, ), ;, Map, <, String, ,, GenerateNodeContext, >, exports, =]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, findExportableNodes, ), ;, Map, <, String, ,, GenerateNodeContext, >, exports, =]
[findExportableNodes, ), ;, Map, <, String, ,, GenerateNodeContext, >, exports, =, findExportableNodes, ., getExports, (, ), ;, CodingConvention, convention, =]
[findExportableNodes, ), ;, Map, <, String, ,, GenerateNodeContext, >, exports, =, findExportableNodes, ., getExports, (, ), ;, CodingConvention, convention, =]
[convention, =, compiler, ., getCodingConvention, (, ), ;, for, (, Map, ., Entry, <, String, ,, GenerateNodeContext, >, entry, :]
[convention, =, compiler, ., getCodingConvention, (, ), ;, for, (, Map, ., Entry, <, String, ,, GenerateNodeContext, >, entry, :]
[Map, ., Entry, <, String, ,, GenerateNodeContext, >, entry, :, exports, ., entrySet, (, ), ), {, String, export, =]
[Map, ., Entry, <, String, ,, GenerateNodeContext, >, entry, :, exports, ., entrySet, (, ), ), {, String, export, =]
[:, exports, ., entrySet, (, ), ), {, String, export, =, entry, ., getKey, (, ), ;, GenerateNodeContext, context, =]
[:, exports, ., entrySet, (, ), ), {, String, export, =, entry, ., getKey, (, ), ;, GenerateNodeContext, context, =]
[export, =, entry, ., getKey, (, ), ;, GenerateNodeContext, context, =, entry, ., getValue, (, ), ;, String, parent, =]
[(, ), ;, GenerateNodeContext, context, =, entry, ., getValue, (, ), ;, String, parent, =, null, ;, String, grandparent, =]
[=, entry, ., getValue, (, ), ;, String, parent, =, null, ;, String, grandparent, =, null, ;, Node, node, =]
[=, entry, ., getValue, (, ), ;, String, parent, =, null, ;, String, grandparent, =, null, ;, Node, node, =]
[=, entry, ., getValue, (, ), ;, String, parent, =, null, ;, String, grandparent, =, null, ;, Node, node, =]
[String, grandparent, =, null, ;, Node, node, =, context, ., getNode, (, ), ., getFirstChild, (, ), ;, if, (]
[String, grandparent, =, null, ;, Node, node, =, context, ., getNode, (, ), ., getFirstChild, (, ), ;, if, (]
[=, context, ., getNode, (, ), ., getFirstChild, (, ), ;, if, (, node, ., isGetProp, (, ), ), {]
[., getNode, (, ), ., getFirstChild, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, parent, =]
[., getNode, (, ), ., getFirstChild, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, parent, =]
[., getNode, (, ), ., getFirstChild, (, ), ;, if, (, node, ., isGetProp, (, ), ), {, parent, =]
[., isGetProp, (, ), ), {, parent, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[., isGetProp, (, ), ), {, parent, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[., isGetProp, (, ), ), {, parent, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[., isGetProp, (, ), ), {, parent, =, node, ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, node, ., getFirstChild, (, ), ., isGetProp, (, ), &&]
[getFirstChild, (, ), ., getQualifiedName, (, ), ;, if, (, node, ., getFirstChild, (, ), ., isGetProp, (, ), &&]
[), ., getQualifiedName, (, ), ;, if, (, node, ., getFirstChild, (, ), ., isGetProp, (, ), &&, getPropertyName, (]
[), ., getQualifiedName, (, ), ;, if, (, node, ., getFirstChild, (, ), ., isGetProp, (, ), &&, getPropertyName, (]
[., getFirstChild, (, ), ., isGetProp, (, ), &&, getPropertyName, (, node, ., getFirstChild, (, ), ), ., equals, (]
[., isGetProp, (, ), &&, getPropertyName, (, node, ., getFirstChild, (, ), ), ., equals, (, PROTOTYPE_PROPERTY, ), ), {]
[(, ), &&, getPropertyName, (, node, ., getFirstChild, (, ), ), ., equals, (, PROTOTYPE_PROPERTY, ), ), {, grandparent, =]
[(, ), &&, getPropertyName, (, node, ., getFirstChild, (, ), ), ., equals, (, PROTOTYPE_PROPERTY, ), ), {, grandparent, =]
[(, ), &&, getPropertyName, (, node, ., getFirstChild, (, ), ), ., equals, (, PROTOTYPE_PROPERTY, ), ), {, grandparent, =]
[(, ), &&, getPropertyName, (, node, ., getFirstChild, (, ), ), ., equals, (, PROTOTYPE_PROPERTY, ), ), {, grandparent, =]
[=, node, ., getFirstChild, (, ), ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, }, boolean, useExportSymbol, =]
[(, ), ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, }, boolean, useExportSymbol, =, true, ;, if, (]
[(, ), ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, }, boolean, useExportSymbol, =, true, ;, if, (]
[(, ), ., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, }, boolean, useExportSymbol, =, true, ;, if, (]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ;, }, }, boolean, useExportSymbol, =, true, ;, if, (, grandparent, !=]
[(, ), ., getQualifiedName, (, ), ;, }, }, boolean, useExportSymbol, =, true, ;, if, (, grandparent, !=, null, &&]
[(, ), ., getQualifiedName, (, ), ;, }, }, boolean, useExportSymbol, =, true, ;, if, (, grandparent, !=, null, &&]
[(, ), ;, }, }, boolean, useExportSymbol, =, true, ;, if, (, grandparent, !=, null, &&, exports, ., containsKey, (]
[}, boolean, useExportSymbol, =, true, ;, if, (, grandparent, !=, null, &&, exports, ., containsKey, (, grandparent, ), ), {]
[useExportSymbol, =, true, ;, if, (, grandparent, !=, null, &&, exports, ., containsKey, (, grandparent, ), ), {, useExportSymbol, =]
[grandparent, !=, null, &&, exports, ., containsKey, (, grandparent, ), ), {, useExportSymbol, =, false, ;, }, else, if, (]
[grandparent, !=, null, &&, exports, ., containsKey, (, grandparent, ), ), {, useExportSymbol, =, false, ;, }, else, if, (]
[grandparent, !=, null, &&, exports, ., containsKey, (, grandparent, ), ), {, useExportSymbol, =, false, ;, }, else, if, (]
[null, &&, exports, ., containsKey, (, grandparent, ), ), {, useExportSymbol, =, false, ;, }, else, if, (, parent, !=]
[exports, ., containsKey, (, grandparent, ), ), {, useExportSymbol, =, false, ;, }, else, if, (, parent, !=, null, &&]
[exports, ., containsKey, (, grandparent, ), ), {, useExportSymbol, =, false, ;, }, else, if, (, parent, !=, null, &&]
[grandparent, ), ), {, useExportSymbol, =, false, ;, }, else, if, (, parent, !=, null, &&, exports, ., containsKey, (]
[useExportSymbol, =, false, ;, }, else, if, (, parent, !=, null, &&, exports, ., containsKey, (, parent, ), ), {]
[false, ;, }, else, if, (, parent, !=, null, &&, exports, ., containsKey, (, parent, ), ), {, useExportSymbol, =]
[null, &&, exports, ., containsKey, (, parent, ), ), {, useExportSymbol, =, false, ;, }, Node, call, ;, if, (]
[., containsKey, (, parent, ), ), {, useExportSymbol, =, false, ;, }, Node, call, ;, if, (, useExportSymbol, ), {]
[(, parent, ), ), {, useExportSymbol, =, false, ;, }, Node, call, ;, if, (, useExportSymbol, ), {, call, =]
[(, parent, ), ), {, useExportSymbol, =, false, ;, }, Node, call, ;, if, (, useExportSymbol, ), {, call, =]
[{, useExportSymbol, =, false, ;, }, Node, call, ;, if, (, useExportSymbol, ), {, call, =, IR, ., call, (]
[{, useExportSymbol, =, false, ;, }, Node, call, ;, if, (, useExportSymbol, ), {, call, =, IR, ., call, (]
[;, }, Node, call, ;, if, (, useExportSymbol, ), {, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (]
[Node, call, ;, if, (, useExportSymbol, ), {, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,]
[;, if, (, useExportSymbol, ), {, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportSymbolFunction, ,]
[;, if, (, useExportSymbol, ), {, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportSymbolFunction, ,]
[call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportSymbolFunction, ,, context, ., getNode, (, ), ,]
[., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportSymbolFunction, ,, context, ., getNode, (, ), ,, export, ), ,]
[., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportSymbolFunction, ,, context, ., getNode, (, ), ,, export, ), ,]
[., newQualifiedNameNode, (, convention, ,, exportSymbolFunction, ,, context, ., getNode, (, ), ,, export, ), ,, IR, ., string, (]
[convention, ,, exportSymbolFunction, ,, context, ., getNode, (, ), ,, export, ), ,, IR, ., string, (, export, ), ,]
[convention, ,, exportSymbolFunction, ,, context, ., getNode, (, ), ,, export, ), ,, IR, ., string, (, export, ), ,]
[context, ., getNode, (, ), ,, export, ), ,, IR, ., string, (, export, ), ,, NodeUtil, ., newQualifiedNameNode, (]
[getNode, (, ), ,, export, ), ,, IR, ., string, (, export, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,]
[), ,, export, ), ,, IR, ., string, (, export, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, export, ,]
[), ,, export, ), ,, IR, ., string, (, export, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, export, ,]
[., string, (, export, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, export, ,, context, ., getNode, (, ), ,]
[convention, ,, export, ,, context, ., getNode, (, ), ,, export, ), ), ;, }, else, {, String, property, =]
[export, ,, context, ., getNode, (, ), ,, export, ), ), ;, }, else, {, String, property, =, getPropertyName, (]
[., getNode, (, ), ,, export, ), ), ;, }, else, {, String, property, =, getPropertyName, (, node, ), ;]
[(, ), ,, export, ), ), ;, }, else, {, String, property, =, getPropertyName, (, node, ), ;, call, =]
[(, ), ,, export, ), ), ;, }, else, {, String, property, =, getPropertyName, (, node, ), ;, call, =]
[), ), ;, }, else, {, String, property, =, getPropertyName, (, node, ), ;, call, =, IR, ., call, (]
[), ), ;, }, else, {, String, property, =, getPropertyName, (, node, ), ;, call, =, IR, ., call, (]
[else, {, String, property, =, getPropertyName, (, node, ), ;, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (]
[String, property, =, getPropertyName, (, node, ), ;, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,]
[=, getPropertyName, (, node, ), ;, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportPropertyFunction, ,]
[=, getPropertyName, (, node, ), ;, call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportPropertyFunction, ,]
[call, =, IR, ., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportPropertyFunction, ,, context, ., getNode, (, ), ,]
[., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportPropertyFunction, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,]
[., call, (, NodeUtil, ., newQualifiedNameNode, (, convention, ,, exportPropertyFunction, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,]
[., newQualifiedNameNode, (, convention, ,, exportPropertyFunction, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, NodeUtil, ., newQualifiedNameNode, (]
[(, convention, ,, exportPropertyFunction, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,]
[,, exportPropertyFunction, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, parent, ,]
[,, exportPropertyFunction, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, parent, ,]
[(, ), ,, exportPropertyFunction, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, parent, ,, context, ., getNode, (, ), ,]
[exportPropertyFunction, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, parent, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,]
[exportPropertyFunction, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, parent, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,]
[., newQualifiedNameNode, (, convention, ,, parent, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, IR, ., string, (]
[convention, ,, parent, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, IR, ., string, (, property, ), ,]
[convention, ,, parent, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, IR, ., string, (, property, ), ,]
[context, ., getNode, (, ), ,, exportPropertyFunction, ), ,, IR, ., string, (, property, ), ,, NodeUtil, ., newQualifiedNameNode, (]
[getNode, (, ), ,, exportPropertyFunction, ), ,, IR, ., string, (, property, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,]
[), ,, exportPropertyFunction, ), ,, IR, ., string, (, property, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, export, ,]
[), ,, exportPropertyFunction, ), ,, IR, ., string, (, property, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, export, ,]
[., string, (, property, ), ,, NodeUtil, ., newQualifiedNameNode, (, convention, ,, export, ,, context, ., getNode, (, ), ,]
[newQualifiedNameNode, (, convention, ,, export, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ), ;, }, Node, expression, =]
[newQualifiedNameNode, (, convention, ,, export, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ), ;, }, Node, expression, =]
[export, ,, context, ., getNode, (, ), ,, exportPropertyFunction, ), ), ;, }, Node, expression, =, IR, ., exprResult, (]
[., getNode, (, ), ,, exportPropertyFunction, ), ), ;, }, Node, expression, =, IR, ., exprResult, (, call, ), ;]
[(, ), ,, exportPropertyFunction, ), ), ;, }, Node, expression, =, IR, ., exprResult, (, call, ), ;, annotate, (]
[;, }, Node, expression, =, IR, ., exprResult, (, call, ), ;, annotate, (, expression, ), ;, Node, insertionPoint, =]
[;, }, Node, expression, =, IR, ., exprResult, (, call, ), ;, annotate, (, expression, ), ;, Node, insertionPoint, =]
[;, }, Node, expression, =, IR, ., exprResult, (, call, ), ;, annotate, (, expression, ), ;, Node, insertionPoint, =]
[annotate, (, expression, ), ;, Node, insertionPoint, =, context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (]
[annotate, (, expression, ), ;, Node, insertionPoint, =, context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (]
[annotate, (, expression, ), ;, Node, insertionPoint, =, context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (]
[annotate, (, expression, ), ;, Node, insertionPoint, =, context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (]
[expression, ), ;, Node, insertionPoint, =, context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (, insertionPoint, !=]
[;, Node, insertionPoint, =, context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (, insertionPoint, !=, null, &&]
[;, Node, insertionPoint, =, context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (, insertionPoint, !=, null, &&]
[context, ., getContextNode, (, ), ., getNext, (, ), ;, while, (, insertionPoint, !=, null, &&, NodeUtil, ., isExprCall, (]
[(, ), ., getNext, (, ), ;, while, (, insertionPoint, !=, null, &&, NodeUtil, ., isExprCall, (, insertionPoint, ), &&]
[(, ), ., getNext, (, ), ;, while, (, insertionPoint, !=, null, &&, NodeUtil, ., isExprCall, (, insertionPoint, ), &&]
[(, ), ., getNext, (, ), ;, while, (, insertionPoint, !=, null, &&, NodeUtil, ., isExprCall, (, insertionPoint, ), &&]
[(, ), ;, while, (, insertionPoint, !=, null, &&, NodeUtil, ., isExprCall, (, insertionPoint, ), &&, convention, ., getClassesDefinedByCall, (]
[(, ), ;, while, (, insertionPoint, !=, null, &&, NodeUtil, ., isExprCall, (, insertionPoint, ), &&, convention, ., getClassesDefinedByCall, (]
[null, &&, NodeUtil, ., isExprCall, (, insertionPoint, ), &&, convention, ., getClassesDefinedByCall, (, insertionPoint, ., getFirstChild, (, ), ), !=]
[., isExprCall, (, insertionPoint, ), &&, convention, ., getClassesDefinedByCall, (, insertionPoint, ., getFirstChild, (, ), ), !=, null, ), {]
[(, insertionPoint, ), &&, convention, ., getClassesDefinedByCall, (, insertionPoint, ., getFirstChild, (, ), ), !=, null, ), {, insertionPoint, =]
[(, insertionPoint, ), &&, convention, ., getClassesDefinedByCall, (, insertionPoint, ., getFirstChild, (, ), ), !=, null, ), {, insertionPoint, =]
[., getFirstChild, (, ), ), !=, null, ), {, insertionPoint, =, insertionPoint, ., getNext, (, ), ;, }, if, (]
[., getFirstChild, (, ), ), !=, null, ), {, insertionPoint, =, insertionPoint, ., getNext, (, ), ;, }, if, (]
[(, ), ), !=, null, ), {, insertionPoint, =, insertionPoint, ., getNext, (, ), ;, }, if, (, insertionPoint, ==]
[!=, null, ), {, insertionPoint, =, insertionPoint, ., getNext, (, ), ;, }, if, (, insertionPoint, ==, null, ), {]
[!=, null, ), {, insertionPoint, =, insertionPoint, ., getNext, (, ), ;, }, if, (, insertionPoint, ==, null, ), {]
[!=, null, ), {, insertionPoint, =, insertionPoint, ., getNext, (, ), ;, }, if, (, insertionPoint, ==, null, ), {]
[getNext, (, ), ;, }, if, (, insertionPoint, ==, null, ), {, context, ., getScriptNode, (, ), ., addChildToBack, (]
[(, insertionPoint, ==, null, ), {, context, ., getScriptNode, (, ), ., addChildToBack, (, expression, ), ;, }, else, {]
[(, insertionPoint, ==, null, ), {, context, ., getScriptNode, (, ), ., addChildToBack, (, expression, ), ;, }, else, {]
[(, insertionPoint, ==, null, ), {, context, ., getScriptNode, (, ), ., addChildToBack, (, expression, ), ;, }, else, {]
[getScriptNode, (, ), ., addChildToBack, (, expression, ), ;, }, else, {, context, ., getScriptNode, (, ), ., addChildBefore, (]
[), ., addChildToBack, (, expression, ), ;, }, else, {, context, ., getScriptNode, (, ), ., addChildBefore, (, expression, ,]
[expression, ), ;, }, else, {, context, ., getScriptNode, (, ), ., addChildBefore, (, expression, ,, insertionPoint, ), ;, }]
[expression, ), ;, }, else, {, context, ., getScriptNode, (, ), ., addChildBefore, (, expression, ,, insertionPoint, ), ;, }]
[insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, annotate, (, Node, node, ), {]
[insertionPoint, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, private, void, annotate, (, Node, node, ), {]
[compiler, ., reportCodeChange, (, ), ;, }, }, private, void, annotate, (, Node, node, ), {, NodeTraversal, ., traverse, (]
[reportCodeChange, (, ), ;, }, }, private, void, annotate, (, Node, node, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[), ;, }, }, private, void, annotate, (, Node, node, ), {, NodeTraversal, ., traverse, (, compiler, ,, node, ,]
[,, node, ,, new, PrepareAst, ., PrepareAnnotations, (, ), ), ;, }, private, String, getPropertyName, (, Node, node, ), {]
[,, node, ,, new, PrepareAst, ., PrepareAnnotations, (, ), ), ;, }, private, String, getPropertyName, (, Node, node, ), {]
[PrepareAst, ., PrepareAnnotations, (, ), ), ;, }, private, String, getPropertyName, (, Node, node, ), {, Preconditions, ., checkArgument, (]
[PrepareAst, ., PrepareAnnotations, (, ), ), ;, }, private, String, getPropertyName, (, Node, node, ), {, Preconditions, ., checkArgument, (]
[private, String, getPropertyName, (, Node, node, ), {, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), ), ;, return]
[private, String, getPropertyName, (, Node, node, ), {, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), ), ;, return]
[private, String, getPropertyName, (, Node, node, ), {, Preconditions, ., checkArgument, (, node, ., isGetProp, (, ), ), ;, return]
