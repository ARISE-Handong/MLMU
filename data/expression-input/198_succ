[private, static, final, long, serialVersionUID, =, -, 98628754872287L, ;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, ), {]
[), private, static, final, long, serialVersionUID, =, -, 98628754872287L, ;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, )]
[;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., year, (, ), ,]
[;, protected, final, BasicChronology, iChronology, ;, BasicYearDateTimeField, (, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., year, (, ), ,]
[,, chronology, ., getAverageMillisPerYear, (, ), ), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient, (, ), {, return]
[., year, (, ), ,, chronology, ., getAverageMillisPerYear, (, ), ), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient]
[), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get]
[., getAverageMillisPerYear, (, ), ), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient, (, ), {, return, false, ;]
[=, chronology, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant]
[;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {]
[;, }, public, int, get, (, long, instant, ), {, return, iChronology, ., getYear, (, instant, ), ;, }, public]
[;, }, public, long, add, (, long, instant, ,, int, years, ), {, if, (, years, ==, 0, ), {]
[., getYear, (, instant, ), ;, }, public, long, add, (, long, instant, ,, int, years, ), {, if, (]
[), ;, }, public, long, add, (, long, instant, ,, int, years, ), {, if, (, years, ==, 0, )]
[), {, return, instant, ;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd]
[==, 0, ), {, return, instant, ;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =, FieldUtils]
[), {, return, instant, ;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd]
[;, }, int, thisYear, =, get, (, instant, ), ;, int, newYear, =, FieldUtils, ., safeAdd, (, thisYear, ,, years]
[;, int, newYear, =, FieldUtils, ., safeAdd, (, thisYear, ,, years, ), ;, return, set, (, instant, ,, newYear, )]
[), ;, int, newYear, =, FieldUtils, ., safeAdd, (, thisYear, ,, years, ), ;, return, set, (, instant, ,, newYear]
[;, return, set, (, instant, ,, newYear, ), ;, }, public, long, add, (, long, instant, ,, long, years, )]
[., safeAdd, (, thisYear, ,, years, ), ;, return, set, (, instant, ,, newYear, ), ;, }, public, long, add]
[,, years, ), ;, return, set, (, instant, ,, newYear, ), ;, }, public, long, add, (, long, instant, ,]
[), ;, return, set, (, instant, ,, newYear, ), ;, }, public, long, add, (, long, instant, ,, long, years]
[;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, add, (, instant, ,, FieldUtils, .]
[,, newYear, ), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, add, (, instant]
[), ;, }, public, long, add, (, long, instant, ,, long, years, ), {, return, add, (, instant, ,, FieldUtils]
[;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if, (, years, ==, 0, ), {]
[,, FieldUtils, ., safeToInt, (, years, ), ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, )]
[), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if, (, years, ==, 0, )]
[., safeToInt, (, years, ), ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if]
[), ), ;, }, public, long, addWrapField, (, long, instant, ,, int, years, ), {, if, (, years, ==, 0]
[), {, return, instant, ;, }, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils]
[==, 0, ), {, return, instant, ;, }, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear]
[), {, return, instant, ;, }, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils]
[;, }, int, thisYear, =, iChronology, ., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear]
[;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,, years, ,, iChronology, ., getMinYear, (, ), ,, iChronology, .]
[., getYear, (, instant, ), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,, years, ,, iChronology, ., getMinYear]
[), ;, int, wrappedYear, =, FieldUtils, ., getWrappedValue, (, thisYear, ,, years, ,, iChronology, ., getMinYear, (, ), ,, iChronology]
[;, return, set, (, instant, ,, wrappedYear, ), ;, }, public, long, set, (, long, instant, ,, int, year, )]
[., getWrappedValue, (, thisYear, ,, years, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;]
[,, years, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, set, (, instant]
[,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, set, (, instant, ,, wrappedYear]
[,, iChronology, ., getMaxYear, (, ), ), ;, return, set, (, instant, ,, wrappedYear, ), ;, }, public, long, set]
[., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, set, (, instant, ,, wrappedYear, ), ;]
[), ;, return, set, (, instant, ,, wrappedYear, ), ;, }, public, long, set, (, long, instant, ,, int, year]
[., getMaxYear, (, ), ), ;, return, set, (, instant, ,, wrappedYear, ), ;, }, public, long, set, (, long]
[;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, year]
[,, wrappedYear, ), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, year, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[;, return, iChronology, ., setYear, (, instant, ,, year, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long]
[., verifyValueBounds, (, this, ,, year, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;]
[,, year, ,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, iChronology, ., setYear]
[,, iChronology, ., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, iChronology, ., setYear, (, instant]
[,, iChronology, ., getMaxYear, (, ), ), ;, return, iChronology, ., setYear, (, instant, ,, year, ), ;, }, public]
[., getMinYear, (, ), ,, iChronology, ., getMaxYear, (, ), ), ;, return, iChronology, ., setYear, (, instant, ,, year]
[), ;, return, iChronology, ., setYear, (, instant, ,, year, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,]
[., getMaxYear, (, ), ), ;, return, iChronology, ., setYear, (, instant, ,, year, ), ;, }, public, long, getDifferenceAsLong]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, ), {]
[., setYear, (, instant, ,, year, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, year, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <]
[), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, <, subtrahendInstant, )]
[), {, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return, iChronology, ., getYearDifference, (, minuendInstant]
[<, subtrahendInstant, ), {, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return, iChronology, ., getYearDifference]
[), {, return, -, iChronology, ., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return, iChronology, ., getYearDifference, (, minuendInstant]
[;, }, return, iChronology, ., getYearDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[;, }, return, iChronology, ., getYearDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[., getYearDifference, (, subtrahendInstant, ,, minuendInstant, ), ;, }, return, iChronology, ., getYearDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[,, minuendInstant, ), ;, }, return, iChronology, ., getYearDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, DurationField, getRangeDurationField, (]
[), ;, }, return, iChronology, ., getYearDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, DurationField, getRangeDurationField, (, ), {]
[;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, boolean, isLeap, (, long, instant, ), {]
[., getYearDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public]
[,, subtrahendInstant, ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, boolean, isLeap, (, long]
[), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, boolean, isLeap, (, long, instant, )]
[;, }, public, boolean, isLeap, (, long, instant, ), {, return, iChronology, ., isLeapYear, (, get, (, instant, ), )]
[;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, iChronology, ., isLeapYear, (, get, (, instant, )]
[., isLeapYear, (, get, (, instant, ), ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (]
[), ;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, iChronology, ., isLeapYear, (, get, (, instant]
[), ), ;, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, iChronology, ., isLeapYear, (, get, (]
[), {, return, 1, ;, }, else, {, return, 0, ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return]
[., isLeapYear, (, get, (, instant, ), ), ), {, return, 1, ;, }, else, {, return, 0, ;, }]
[), ), {, return, 1, ;, }, else, {, return, 0, ;, }, }, public, DurationField, getLeapDurationField, (, ), {]
[), ), ), {, return, 1, ;, }, else, {, return, 0, ;, }, }, public, DurationField, getLeapDurationField, (, )]
[;, }, else, {, return, 0, ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return, iChronology, ., days, (]
[;, }, }, public, DurationField, getLeapDurationField, (, ), {, return, iChronology, ., days, (, ), ;, }, public, int, getMinimumValue]
[;, }, public, int, getMinimumValue, (, ), {, return, iChronology, ., getMinYear, (, ), ;, }, public, int, getMaximumValue, (]
[., days, (, ), ;, }, public, int, getMinimumValue, (, ), {, return, iChronology, ., getMinYear, (, ), ;, }]
[;, }, public, int, getMaximumValue, (, ), {, return, iChronology, ., getMaxYear, (, ), ;, }, public, long, roundFloor, (]
[., getMinYear, (, ), ;, }, public, int, getMaximumValue, (, ), {, return, iChronology, ., getMaxYear, (, ), ;, }]
[;, }, public, long, roundFloor, (, long, instant, ), {, return, iChronology, ., getYearMillis, (, get, (, instant, ), )]
[., getMaxYear, (, ), ;, }, public, long, roundFloor, (, long, instant, ), {, return, iChronology, ., getYearMillis, (, get]
[;, }, public, long, roundCeiling, (, long, instant, ), {, int, year, =, get, (, instant, ), ;, long, yearStartMillis]
[., getYearMillis, (, get, (, instant, ), ), ;, }, public, long, roundCeiling, (, long, instant, ), {, int, year]
[), ;, }, public, long, roundCeiling, (, long, instant, ), {, int, year, =, get, (, instant, ), ;, long]
[), ), ;, }, public, long, roundCeiling, (, long, instant, ), {, int, year, =, get, (, instant, ), ;]
[;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =]
[), ;, long, yearStartMillis, =, iChronology, ., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant]
[;, if, (, instant, !=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (, year, +, 1, ), ;, }]
[., getYearMillis, (, year, ), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (, year]
[), ;, if, (, instant, !=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (, year, +, 1, ), ;]
[), {, instant, =, iChronology, ., getYearMillis, (, year, +, 1, ), ;, }, return, instant, ;, }, public, long]
[!=, yearStartMillis, ), {, instant, =, iChronology, ., getYearMillis, (, year, +, 1, ), ;, }, return, instant, ;, }]
[), {, instant, =, iChronology, ., getYearMillis, (, year, +, 1, ), ;, }, return, instant, ;, }, public, long]
[=, iChronology, ., getYearMillis, (, year, +, 1, ), ;, }, return, instant, ;, }, public, long, remainder, (, long]
[;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (, instant]
[., getYearMillis, (, year, +, 1, ), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, )]
[), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (]
[+, 1, ), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return, instant, -]
[), ;, }, return, instant, ;, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (]
[;, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (, instant, ), ;, }, private]
[;, }, private, Object, readResolve, (, ), {, return, iChronology, ., year, (, ), ;, }, }]
[-, roundFloor, (, instant, ), ;, }, private, Object, readResolve, (, ), {, return, iChronology, ., year, (, ), ;]
[;, }, private, Object, readResolve, (, ), {, return, iChronology, ., year, (, ), ;, }, }]
[), ;, }, private, Object, readResolve, (, ), {, return, iChronology, ., year, (, ), ;, }, }]
[;, }, }]
[., year, (, ), ;, }, }]
