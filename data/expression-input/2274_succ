[;, private, static, final, double, SCALE, =, FastMath, ., pow, (, 2, ,, BITS, ), ;, private, static, final, int]
[;, private, static, final, int, MAX_DIMENSION, =, 1000, ;, private, static, final, String, RESOURCE_NAME, =, "/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000", ;, private, static, final]
[., pow, (, 2, ,, BITS, ), ;, private, static, final, int, MAX_DIMENSION, =, 1000, ;, private, static, final, String]
[,, BITS, ), ;, private, static, final, int, MAX_DIMENSION, =, 1000, ;, private, static, final, String, RESOURCE_NAME, =, "/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000", ;]
[), ;, private, static, final, int, MAX_DIMENSION, =, 1000, ;, private, static, final, String, RESOURCE_NAME, =, "/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000", ;, private, static]
[;, private, static, final, String, RESOURCE_NAME, =, "/assets/org/apache/commons/math3/random/new-joe-kuo-6.1000", ;, private, static, final, String, FILE_CHARSET, =, "US-ASCII", ;, private, final, int]
[;, private, static, final, String, FILE_CHARSET, =, "US-ASCII", ;, private, final, int, dimension, ;, private, int, count, =, 0, ;]
[;, private, final, int, dimension, ;, private, int, count, =, 0, ;, private, final, long, [, ], [, ], direction]
[;, private, final, long, [, ], [, ], direction, ;, private, final, long, [, ], x, ;, public, SobolSequenceGenerator, (]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (]
[||, dimension, >, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream]
[<, 1, ||, dimension, >, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }]
[||, dimension, >, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (]
[>, MAX_DIMENSION, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (]
[;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (, is, ==, null]
[,, 1, ,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;]
[,, MAX_DIMENSION, ), ;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (]
[), ;, }, final, InputStream, is, =, getClass, (, ), ., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (, is, ==]
[;, if, (, is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension]
[., getResourceAsStream, (, RESOURCE_NAME, ), ;, if, (, is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }]
[), ;, if, (, is, ==, null, ), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =]
[), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, []
[==, null, ), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new]
[), {, throw, new, MathInternalError, (, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, []
[;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ]]
[=, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long]
[., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =]
[;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension]
[=, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;]
[;, x, =, new, long, [, dimension, ], ;, try, {, initFromStream, (, is, ), ;, }, catch, (, IOException]
[], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;, try, {, initFromStream, (, is]
[], ;, x, =, new, long, [, dimension, ], ;, try, {, initFromStream, (, is, ), ;, }, catch, (]
[+, 1, ], ;, x, =, new, long, [, dimension, ], ;, try, {, initFromStream, (, is, ), ;, }]
[], ;, x, =, new, long, [, dimension, ], ;, try, {, initFromStream, (, is, ), ;, }, catch, (]
[=, new, long, [, dimension, ], ;, try, {, initFromStream, (, is, ), ;, }, catch, (, IOException, e, )]
[;, try, {, initFromStream, (, is, ), ;, }, catch, (, IOException, e, ), {, throw, new, MathInternalError, (, )]
[], ;, try, {, initFromStream, (, is, ), ;, }, catch, (, IOException, e, ), {, throw, new, MathInternalError, (]
[;, }, catch, (, IOException, e, ), {, throw, new, MathInternalError, (, ), ;, }, catch, (, MathParseException, e, )]
[), ;, }, catch, (, IOException, e, ), {, throw, new, MathInternalError, (, ), ;, }, catch, (, MathParseException, e]
[;, }, catch, (, MathParseException, e, ), {, throw, new, MathInternalError, (, ), ;, }, finally, {, try, {, is]
[;, }, finally, {, try, {, is, ., close, (, ), ;, }, catch, (, IOException, e, ), {, }]
[;, }, catch, (, IOException, e, ), {, }, }, }, public, SobolSequenceGenerator, (, final, int, dimension, ,, final, InputStream]
[., close, (, ), ;, }, catch, (, IOException, e, ), {, }, }, }, public, SobolSequenceGenerator, (, final, int]
[), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long]
[<, 1, ), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =]
[), {, throw, new, NotStrictlyPositiveException, (, dimension, ), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long]
[;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ]]
[), ;, }, this, ., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1]
[=, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long]
[., dimension, =, dimension, ;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =]
[;, direction, =, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension]
[=, new, long, [, dimension, ], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;]
[;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension]
[], [, BITS, +, 1, ], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (]
[], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (]
[+, 1, ], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;]
[], ;, x, =, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (]
[=, new, long, [, dimension, ], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension, <, dimension]
[;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension, <, dimension, ), {, throw, new, OutOfRangeException, (]
[], ;, int, lastDimension, =, initFromStream, (, is, ), ;, if, (, lastDimension, <, dimension, ), {, throw, new, OutOfRangeException]
[;, if, (, lastDimension, <, dimension, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, lastDimension, ), ;, }]
[), ;, if, (, lastDimension, <, dimension, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, lastDimension, ), ;]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, lastDimension, ), ;, }, }, private, int, initFromStream, (, final]
[<, dimension, ), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, lastDimension, ), ;, }, }, private, int, initFromStream]
[), {, throw, new, OutOfRangeException, (, dimension, ,, 1, ,, lastDimension, ), ;, }, }, private, int, initFromStream, (, final]
[;, }, }, private, int, initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int, i]
[,, 1, ,, lastDimension, ), ;, }, }, private, int, initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException]
[,, lastDimension, ), ;, }, }, private, int, initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for]
[), ;, }, }, private, int, initFromStream, (, final, InputStream, is, ), throws, MathParseException, ,, IOException, {, for, (, int]
[;, i, <=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (]
[;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (, BITS, -, i, )]
[<=, BITS, ;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (, BITS, -]
[;, i, ++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (, BITS, -, i, )]
[), {, direction, [, 0, ], [, i, ], =, 1l, <<, (, BITS, -, i, ), ;, }, final]
[++, ), {, direction, [, 0, ], [, i, ], =, 1l, <<, (, BITS, -, i, ), ;, }]
[=, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, )]
[[, i, ], =, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =, Charset, ., forName]
[[, 0, ], [, i, ], =, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =]
[], [, i, ], =, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =, Charset, .]
[], =, 1l, <<, (, BITS, -, i, ), ;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET]
[;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader, (]
[<<, (, BITS, -, i, ), ;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final]
[;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader, (]
[), ;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader]
[-, i, ), ;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =]
[), ;, }, final, Charset, charset, =, Charset, ., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader]
[;, final, BufferedReader, reader, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, int, dim, =]
[., forName, (, FILE_CHARSET, ), ;, final, BufferedReader, reader, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, )]
[), ;, final, BufferedReader, reader, =, new, BufferedReader, (, new, InputStreamReader, (, is, ,, charset, ), ), ;, int, dim]
[;, int, dim, =, -, 1, ;, try, {, reader, ., readLine, (, ), ;, int, lineNumber, =, 2, ;]
[), ;, int, dim, =, -, 1, ;, try, {, reader, ., readLine, (, ), ;, int, lineNumber, =, 2]
[,, charset, ), ), ;, int, dim, =, -, 1, ;, try, {, reader, ., readLine, (, ), ;, int]
[), ), ;, int, dim, =, -, 1, ;, try, {, reader, ., readLine, (, ), ;, int, lineNumber, =]
[;, try, {, reader, ., readLine, (, ), ;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String]
[;, try, {, reader, ., readLine, (, ), ;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String]
[;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =, null, ;, while, (, (, line]
[., readLine, (, ), ;, int, lineNumber, =, 2, ;, int, index, =, 1, ;, String, line, =, null, ;]
[;, int, index, =, 1, ;, String, line, =, null, ;, while, (, (, line, =, reader, ., readLine, (]
[;, String, line, =, null, ;, while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, )]
[;, while, (, (, line, =, reader, ., readLine, (, ), ), !=, null, ), {, StringTokenizer, st, =, new]
[), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =, Integer, ., parseInt]
[!=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =, Integer]
[=, reader, ., readLine, (, ), ), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " "]
[), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =]
[., readLine, (, ), ), !=, null, ), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;]
[), {, StringTokenizer, st, =, new, StringTokenizer, (, line, ,, " ", ), ;, try, {, dim, =, Integer, ., parseInt]
[;, try, {, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim, >=]
[,, " ", ), ;, try, {, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if]
[), ;, try, {, dim, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim]
[=, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim, >=, 2, &&, dim, <=]
[;, if, (, dim, >=, 2, &&, dim, <=, dimension, ), {, final, int, s, =, Integer, ., parseInt, (]
[., parseInt, (, st, ., nextToken, (, ), ), ;, if, (, dim, >=, 2, &&, dim, <=, dimension, )]
[), ;, if, (, dim, >=, 2, &&, dim, <=, dimension, ), {, final, int, s, =, Integer, ., parseInt]
[., nextToken, (, ), ), ;, if, (, dim, >=, 2, &&, dim, <=, dimension, ), {, final, int, s]
[), {, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a]
[&&, dim, <=, dimension, ), {, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), )]
[>=, 2, &&, dim, <=, dimension, ), {, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (]
[&&, dim, <=, dimension, ), {, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), )]
[), {, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a]
[<=, dimension, ), {, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final]
[), {, final, int, s, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a]
[;, final, int, a, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, [, ]]
[., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, a, =, Integer, ., parseInt, (, st, .]
[), ;, final, int, a, =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, []
[., nextToken, (, ), ), ;, final, int, a, =, Integer, ., parseInt, (, st, ., nextToken, (, ), )]
[;, final, int, [, ], m, =, new, int, [, s, +, 1, ], ;, for, (, int, i, =]
[., parseInt, (, st, ., nextToken, (, ), ), ;, final, int, [, ], m, =, new, int, [, s]
[), ;, final, int, [, ], m, =, new, int, [, s, +, 1, ], ;, for, (, int, i]
[., nextToken, (, ), ), ;, final, int, [, ], m, =, new, int, [, s, +, 1, ], ;]
[;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, m, [, i, ]]
[], ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, m, [, i]
[+, 1, ], ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, m]
[], ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, m, [, i]
[;, i, <=, s, ;, i, ++, ), {, m, [, i, ], =, Integer, ., parseInt, (, st, .]
[;, i, ++, ), {, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), )]
[<=, s, ;, i, ++, ), {, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (]
[;, i, ++, ), {, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), )]
[), {, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector]
[++, ), {, m, [, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }]
[=, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,, a, ,]
[[, i, ], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++]
[], =, Integer, ., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,, a]
[;, }, initDirectionVector, (, index, ++, ,, a, ,, m, ), ;, }, if, (, dim, >, dimension, ), {]
[., parseInt, (, st, ., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,, a, ,, m, )]
[), ;, }, initDirectionVector, (, index, ++, ,, a, ,, m, ), ;, }, if, (, dim, >, dimension, )]
[., nextToken, (, ), ), ;, }, initDirectionVector, (, index, ++, ,, a, ,, m, ), ;, }, if, (]
[;, }, if, (, dim, >, dimension, ), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, ), {]
[,, a, ,, m, ), ;, }, if, (, dim, >, dimension, ), {, return, dim, ;, }, }, catch]
[++, ,, a, ,, m, ), ;, }, if, (, dim, >, dimension, ), {, return, dim, ;, }, }]
[,, m, ), ;, }, if, (, dim, >, dimension, ), {, return, dim, ;, }, }, catch, (, NoSuchElementException]
[), ;, }, if, (, dim, >, dimension, ), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, )]
[), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber]
[>, dimension, ), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, ), {, throw, new, MathParseException, (, line]
[), {, return, dim, ;, }, }, catch, (, NoSuchElementException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber]
[;, }, }, catch, (, NoSuchElementException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }, catch]
[;, }, catch, (, NumberFormatException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }, lineNumber, ++]
[,, lineNumber, ), ;, }, catch, (, NumberFormatException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;]
[), ;, }, catch, (, NumberFormatException, e, ), {, throw, new, MathParseException, (, line, ,, lineNumber, ), ;, }, lineNumber]
[;, }, lineNumber, ++, ;, }, }, finally, {, reader, ., close, (, ), ;, }, return, dim, ;, }]
[,, lineNumber, ), ;, }, lineNumber, ++, ;, }, }, finally, {, reader, ., close, (, ), ;, }, return]
[), ;, }, lineNumber, ++, ;, }, }, finally, {, reader, ., close, (, ), ;, }, return, dim, ;]
[;, }, }, finally, {, reader, ., close, (, ), ;, }, return, dim, ;, }, private, void, initDirectionVector, (]
[++, ;, }, }, finally, {, reader, ., close, (, ), ;, }, return, dim, ;, }, private, void, initDirectionVector]
[;, }, return, dim, ;, }, private, void, initDirectionVector, (, final, int, d, ,, final, int, a, ,, final, int]
[., close, (, ), ;, }, return, dim, ;, }, private, void, initDirectionVector, (, final, int, d, ,, final, int]
[;, }, private, void, initDirectionVector, (, final, int, d, ,, final, int, a, ,, final, int, [, ], m, )]
[;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, direction, [, d, ]]
[-, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, direction, []
[., length, -, 1, ;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {]
[;, for, (, int, i, =, 1, ;, i, <=, s, ;, i, ++, ), {, direction, [, d, ]]
[;, i, <=, s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, (, (, long]
[;, i, ++, ), {, direction, [, d, ], [, i, ], =, (, (, long, ), m, [, i]
[<=, s, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, (, (, long, ), m]
[;, i, ++, ), {, direction, [, d, ], [, i, ], =, (, (, long, ), m, [, i]
[), {, direction, [, d, ], [, i, ], =, (, (, long, ), m, [, i, ], ), <<]
[++, ), {, direction, [, d, ], [, i, ], =, (, (, long, ), m, [, i, ], )]
[=, (, (, long, ), m, [, i, ], ), <<, (, BITS, -, i, ), ;, }, for, (]
[[, i, ], =, (, (, long, ), m, [, i, ], ), <<, (, BITS, -, i, ), ;]
[[, d, ], [, i, ], =, (, (, long, ), m, [, i, ], ), <<, (, BITS, -]
[], [, i, ], =, (, (, long, ), m, [, i, ], ), <<, (, BITS, -, i, )]
[], =, (, (, long, ), m, [, i, ], ), <<, (, BITS, -, i, ), ;, }, for]
[;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction]
[<<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS]
[), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=]
[), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=]
[[, i, ], ), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1]
[], ), <<, (, BITS, -, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i]
[;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction]
[), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[-, i, ), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++]
[), ;, }, for, (, int, i, =, s, +, 1, ;, i, <=, BITS, ;, i, ++, ), {]
[;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d]
[+, 1, ;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction]
[;, i, <=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d]
[;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -]
[<=, BITS, ;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d, ], []
[;, i, ++, ), {, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -]
[), {, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^]
[++, ), {, direction, [, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ]]
[=, direction, [, d, ], [, i, -, s, ], ^, (, direction, [, d, ], [, i, -, s]
[[, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, [, d, ], []
[[, d, ], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, []
[], [, i, ], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, [, d, ]]
[], =, direction, [, d, ], [, i, -, s, ], ^, (, direction, [, d, ], [, i, -]
[;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction, []
[^, (, direction, [, d, ], [, i, -, s, ], >, >, s, ), ;, for, (, int, k]
[[, i, -, s, ], ^, (, direction, [, d, ], [, i, -, s, ], >, >, s, )]
[[, d, ], [, i, -, s, ], ^, (, direction, [, d, ], [, i, -, s, ], >]
[], [, i, -, s, ], ^, (, direction, [, d, ], [, i, -, s, ], >, >, s]
[], ^, (, direction, [, d, ], [, i, -, s, ], >, >, s, ), ;, for, (, int]
[-, s, ], ^, (, direction, [, d, ], [, i, -, s, ], >, >, s, ), ;, for]
[], ^, (, direction, [, d, ], [, i, -, s, ], >, >, s, ), ;, for, (, int]
[;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction, []
[), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction]
[>, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++]
[[, i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s]
[[, d, ], [, i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;]
[], [, i, -, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=]
[], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k]
[-, s, ], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1]
[], >, >, s, ), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k]
[), ;, for, (, int, k, =, 1, ;, k, <=, s, -, 1, ;, k, ++, ), {, direction]
[;, k, <=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (]
[;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (, s]
[<=, s, -, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a]
[;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (, s]
[-, 1, ;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >]
[;, k, ++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (, s]
[), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (, s, -, 1, -]
[++, ), {, direction, [, d, ], [, i, ], ^=, (, (, a, >, >, (, s, -, 1]
[^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *, direction, []
[[, i, ], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1, )]
[[, d, ], [, i, ], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), )]
[], [, i, ], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1]
[], ^=, (, (, a, >, >, (, s, -, 1, -, k, ), ), &, 1, ), *, direction]
[;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double]
[*, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public, double, [, ], nextVector, (]
[), *, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public, double, [, ], nextVector]
[&, 1, ), *, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public, double, []
[), &, 1, ), *, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public, double]
[>, >, (, s, -, 1, -, k, ), ), &, 1, ), *, direction, [, d, ], [, i]
[), &, 1, ), *, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public, double]
[), ), &, 1, ), *, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public]
[-, k, ), ), &, 1, ), *, direction, [, d, ], [, i, -, k, ], ;, }, }]
[-, 1, -, k, ), ), &, 1, ), *, direction, [, d, ], [, i, -, k, ], ;]
[-, k, ), ), &, 1, ), *, direction, [, d, ], [, i, -, k, ], ;, }, }]
[), ), &, 1, ), *, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public]
[), *, direction, [, d, ], [, i, -, k, ], ;, }, }, }, public, double, [, ], nextVector]
[;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double]
[[, i, -, k, ], ;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double, []
[[, d, ], [, i, -, k, ], ;, }, }, }, public, double, [, ], nextVector, (, ), {]
[], [, i, -, k, ], ;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double]
[], ;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new]
[-, k, ], ;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v]
[], ;, }, }, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new]
[;, if, (, count, ==, 0, ), {, count, ++, ;, return, v, ;, }, int, c, =, 1, ;]
[], ;, if, (, count, ==, 0, ), {, count, ++, ;, return, v, ;, }, int, c, =, 1]
[), {, count, ++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1]
[==, 0, ), {, count, ++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count]
[), {, count, ++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1]
[;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (, (]
[++, ;, return, v, ;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (]
[;, }, int, c, =, 1, ;, int, value, =, count, -, 1, ;, while, (, (, value, &, 1]
[;, int, value, =, count, -, 1, ;, while, (, (, value, &, 1, ), ==, 1, ), {, value]
[;, while, (, (, value, &, 1, ), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }]
[-, 1, ;, while, (, (, value, &, 1, ), ==, 1, ), {, value, >>=, 1, ;, c, ++]
[;, while, (, (, value, &, 1, ), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }]
[), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension]
[==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;, i]
[), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;]
[&, 1, ), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =]
[), ==, 1, ), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;]
[), {, value, >>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension]
[>>=, 1, ;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++]
[;, c, ++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, x, [, i]
[++, ;, }, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, x, []
[;, i, <, dimension, ;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^, direction]
[;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], []
[<, dimension, ;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i]
[;, i, ++, ), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], []
[), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;]
[++, ), {, x, [, i, ], =, x, [, i, ], ^, direction, [, i, ], [, c, ]]
[=, x, [, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =, (]
[[, i, ], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i]
[], =, x, [, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =]
[;, v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }, count, ++, ;]
[^, direction, [, i, ], [, c, ], ;, v, [, i, ], =, (, double, ), x, [, i]
[[, i, ], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =, (, double, )]
[], ^, direction, [, i, ], [, c, ], ;, v, [, i, ], =, (, double, ), x, []
[;, v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }, count, ++, ;]
[[, c, ], ;, v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }]
[[, i, ], [, c, ], ;, v, [, i, ], =, (, double, ), x, [, i, ], /]
[], [, c, ], ;, v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;]
[], ;, v, [, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }, count, ++]
[=, (, double, ), x, [, i, ], /, SCALE, ;, }, count, ++, ;, return, v, ;, }, public]
[[, i, ], =, (, double, ), x, [, i, ], /, SCALE, ;, }, count, ++, ;, return, v]
[], =, (, double, ), x, [, i, ], /, SCALE, ;, }, count, ++, ;, return, v, ;, }]
[;, }, count, ++, ;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws]
[/, SCALE, ;, }, count, ++, ;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index]
[/, SCALE, ;, }, count, ++, ;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index]
[[, i, ], /, SCALE, ;, }, count, ++, ;, return, v, ;, }, public, double, [, ], skipTo, (]
[], /, SCALE, ;, }, count, ++, ;, return, v, ;, }, public, double, [, ], skipTo, (, final, int]
[;, }, count, ++, ;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws]
[;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (]
[++, ;, return, v, ;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if]
[;, }, public, double, [, ], skipTo, (, final, int, index, ), throws, NotPositiveException, {, if, (, index, ==, 0]
[), {, Arrays, ., fill, (, x, ,, 0, ), ;, }, else, {, final, int, i, =, index, -]
[==, 0, ), {, Arrays, ., fill, (, x, ,, 0, ), ;, }, else, {, final, int, i, =]
[), {, Arrays, ., fill, (, x, ,, 0, ), ;, }, else, {, final, int, i, =, index, -]
[;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =, i, ^, (, i]
[., fill, (, x, ,, 0, ), ;, }, else, {, final, int, i, =, index, -, 1, ;, final]
[,, 0, ), ;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =, i]
[), ;, }, else, {, final, int, i, =, index, -, 1, ;, final, long, grayCode, =, i, ^, (]
[;, final, long, grayCode, =, i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0]
[-, 1, ;, final, long, grayCode, =, i, ^, (, i, >, >, 1, ), ;, for, (, int, j]
[;, final, long, grayCode, =, i, ^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0]
[;, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, long, result, =, 0]
[^, (, i, >, >, 1, ), ;, for, (, int, j, =, 0, ;, j, <, dimension, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, long, result, =, 0]
[), ;, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, long, result, =]
[>, >, 1, ), ;, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {]
[), ;, for, (, int, j, =, 0, ;, j, <, dimension, ;, j, ++, ), {, long, result, =]
[;, j, <, dimension, ;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1]
[;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k, <=, BITS]
[<, dimension, ;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k]
[;, j, ++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k, <=, BITS]
[), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k, <=, BITS, ;, k, ++]
[++, ), {, long, result, =, 0, ;, for, (, int, k, =, 1, ;, k, <=, BITS, ;, k]
[;, for, (, int, k, =, 1, ;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =]
[;, k, <=, BITS, ;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1]
[;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;, if, (]
[<=, BITS, ;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;]
[;, k, ++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;, if, (]
[), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;, if, (, shift, ==, 0]
[++, ), {, final, long, shift, =, grayCode, >, >, (, k, -, 1, ), ;, if, (, shift, ==]
[;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result]
[>, >, (, k, -, 1, ), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long]
[;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result]
[), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;]
[-, 1, ), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &]
[), ;, if, (, shift, ==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;]
[), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *, direction, [, j]
[==, 0, ), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *, direction]
[), {, break, ;, }, final, long, ik, =, shift, &, 1, ;, result, ^=, ik, *, direction, [, j]
[;, result, ^=, ik, *, direction, [, j, ], [, k, ], ;, }, x, [, j, ], =, result]
[&, 1, ;, result, ^=, ik, *, direction, [, j, ], [, k, ], ;, }, x, [, j, ]]
[;, result, ^=, ik, *, direction, [, j, ], [, k, ], ;, }, x, [, j, ], =, result]
[^=, ik, *, direction, [, j, ], [, k, ], ;, }, x, [, j, ], =, result, ;, }]
[;, }, x, [, j, ], =, result, ;, }, }, count, =, index, ;, return, nextVector, (, ), ;]
[*, direction, [, j, ], [, k, ], ;, }, x, [, j, ], =, result, ;, }, }, count]
[;, }, x, [, j, ], =, result, ;, }, }, count, =, index, ;, return, nextVector, (, ), ;]
[[, k, ], ;, }, x, [, j, ], =, result, ;, }, }, count, =, index, ;, return, nextVector]
[[, j, ], [, k, ], ;, }, x, [, j, ], =, result, ;, }, }, count, =, index]
[], [, k, ], ;, }, x, [, j, ], =, result, ;, }, }, count, =, index, ;, return]
[], ;, }, x, [, j, ], =, result, ;, }, }, count, =, index, ;, return, nextVector, (, )]
[=, result, ;, }, }, count, =, index, ;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, )]
[[, j, ], =, result, ;, }, }, count, =, index, ;, return, nextVector, (, ), ;, }, public, int]
[], =, result, ;, }, }, count, =, index, ;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (]
[;, }, }, count, =, index, ;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, ), {, return]
[=, index, ;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, ), {, return, count, ;, }, }]
[;, return, nextVector, (, ), ;, }, public, int, getNextIndex, (, ), {, return, count, ;, }, }]
[;, }, public, int, getNextIndex, (, ), {, return, count, ;, }, }]
[;, }, }]
