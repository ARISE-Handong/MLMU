[., List, ;, import, javax, ., annotation, ., Nullable, ;, class, CreateSyntheticBlocks, implements, CompilerPass, {, static, final, DiagnosticType, UNMATCHED_START_MARKER, =]
[., List, ;, import, javax, ., annotation, ., Nullable, ;, class, CreateSyntheticBlocks, implements, CompilerPass, {, static, final, DiagnosticType, UNMATCHED_START_MARKER, =]
[javax, ., annotation, ., Nullable, ;, class, CreateSyntheticBlocks, implements, CompilerPass, {, static, final, DiagnosticType, UNMATCHED_START_MARKER, =, DiagnosticType, ., warning, (]
[annotation, ., Nullable, ;, class, CreateSyntheticBlocks, implements, CompilerPass, {, static, final, DiagnosticType, UNMATCHED_START_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_START_MARKER", ,]
[{, static, final, DiagnosticType, UNMATCHED_START_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_START_MARKER", ,, "Unmatched {0}", ), ;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =]
[{, static, final, DiagnosticType, UNMATCHED_START_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_START_MARKER", ,, "Unmatched {0}", ), ;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =]
[UNMATCHED_START_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_START_MARKER", ,, "Unmatched {0}", ), ;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNMATCHED_START_MARKER", ,, "Unmatched {0}", ), ;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,]
[;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =]
[;, static, final, DiagnosticType, UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =]
[UNMATCHED_END_MARKER, =, DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (]
[DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (, "JSC_INVALID_MARKER_USAGE", ,]
[DiagnosticType, ., warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (, "JSC_INVALID_MARKER_USAGE", ,]
[warning, (, "JSC_UNMATCHED_END_MARKER", ,, "Unmatched {1} - {0} not in the same block", ), ;, static, final, DiagnosticType, INVALID_MARKER_USAGE, =, DiagnosticType, ., warning, (, "JSC_INVALID_MARKER_USAGE", ,, "Marker {0} can only be used in a simple ", +]
[compiler, ;, private, final, String, startMarkerName, ;, private, final, String, endMarkerName, ;, private, final, Deque, <, Node, >, markerStack, =]
[Node, >, markerStack, =, new, ArrayDeque, <, Node, >, (, ), ;, private, final, List, <, Marker, >, validMarkers, =]
[Node, >, markerStack, =, new, ArrayDeque, <, Node, >, (, ), ;, private, final, List, <, Marker, >, validMarkers, =]
[Marker, {, final, Node, startMarker, ;, final, Node, endMarker, ;, public, Marker, (, Node, startMarker, ,, Node, endMarker, ), {]
[Marker, {, final, Node, startMarker, ;, final, Node, endMarker, ;, public, Marker, (, Node, startMarker, ,, Node, endMarker, ), {]
[startMarker, ;, final, Node, endMarker, ;, public, Marker, (, Node, startMarker, ,, Node, endMarker, ), {, this, ., startMarker, =]
[final, Node, endMarker, ;, public, Marker, (, Node, startMarker, ,, Node, endMarker, ), {, this, ., startMarker, =, startMarker, ;]
[final, Node, endMarker, ;, public, Marker, (, Node, startMarker, ,, Node, endMarker, ), {, this, ., startMarker, =, startMarker, ;]
[public, Marker, (, Node, startMarker, ,, Node, endMarker, ), {, this, ., startMarker, =, startMarker, ;, this, ., endMarker, =]
[., endMarker, =, endMarker, ;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {]
[., endMarker, =, endMarker, ;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {]
[;, }, }, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {, this, ., compiler, =]
[}, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {, this, ., compiler, =, compiler, ;]
[}, public, CreateSyntheticBlocks, (, AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {, this, ., compiler, =, compiler, ;]
[AbstractCompiler, compiler, ,, String, startMarkerName, ,, String, endMarkerName, ), {, this, ., compiler, =, compiler, ;, this, ., startMarkerName, =]
[,, String, startMarkerName, ,, String, endMarkerName, ), {, this, ., compiler, =, compiler, ;, this, ., startMarkerName, =, startMarkerName, ;]
[,, String, startMarkerName, ,, String, endMarkerName, ), {, this, ., compiler, =, compiler, ;, this, ., startMarkerName, =, startMarkerName, ;]
[String, endMarkerName, ), {, this, ., compiler, =, compiler, ;, this, ., startMarkerName, =, startMarkerName, ;, this, ., endMarkerName, =]
[this, ., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., endMarkerName, =, endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[endMarkerName, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[{, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, Callback, (, ), ), ;, for, (, Node, node, :]
[traverse, (, compiler, ,, root, ,, new, Callback, (, ), ), ;, for, (, Node, node, :, markerStack, ), {]
[traverse, (, compiler, ,, root, ,, new, Callback, (, ), ), ;, for, (, Node, node, :, markerStack, ), {]
[root, ,, new, Callback, (, ), ), ;, for, (, Node, node, :, markerStack, ), {, compiler, ., report, (]
[root, ,, new, Callback, (, ), ), ;, for, (, Node, node, :, markerStack, ), {, compiler, ., report, (]
[(, ), ), ;, for, (, Node, node, :, markerStack, ), {, compiler, ., report, (, JSError, ., make, (]
[(, ), ), ;, for, (, Node, node, :, markerStack, ), {, compiler, ., report, (, JSError, ., make, (]
[for, (, Node, node, :, markerStack, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (]
[node, :, markerStack, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, node, ), ,]
[markerStack, ), {, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, node, ), ,, node, ,]
[{, compiler, ., report, (, JSError, ., make, (, NodeUtil, ., getSourceName, (, node, ), ,, node, ,, UNMATCHED_START_MARKER, ,]
[., getSourceName, (, node, ), ,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :]
[node, ), ,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :, validMarkers, ), {]
[,, node, ,, UNMATCHED_START_MARKER, ,, startMarkerName, ), ), ;, }, for, (, Marker, marker, :, validMarkers, ), {, addBlocks, (]
[), {, addBlocks, (, marker, ), ;, }, }, private, void, addBlocks, (, Marker, marker, ), {, Node, originalParent, =]
[), {, addBlocks, (, marker, ), ;, }, }, private, void, addBlocks, (, Marker, marker, ), {, Node, originalParent, =]
[), {, addBlocks, (, marker, ), ;, }, }, private, void, addBlocks, (, Marker, marker, ), {, Node, originalParent, =]
[addBlocks, (, Marker, marker, ), {, Node, originalParent, =, marker, ., endMarker, ., getParent, (, ), ;, Node, outerBlock, =]
[addBlocks, (, Marker, marker, ), {, Node, originalParent, =, marker, ., endMarker, ., getParent, (, ), ;, Node, outerBlock, =]
[Node, originalParent, =, marker, ., endMarker, ., getParent, (, ), ;, Node, outerBlock, =, IR, ., block, (, ), ;]
[Node, originalParent, =, marker, ., endMarker, ., getParent, (, ), ;, Node, outerBlock, =, IR, ., block, (, ), ;]
[., endMarker, ., getParent, (, ), ;, Node, outerBlock, =, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (]
[getParent, (, ), ;, Node, outerBlock, =, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;]
[getParent, (, ), ;, Node, outerBlock, =, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;]
[Node, outerBlock, =, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (]
[=, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (, outerBlock, ,]
[=, IR, ., block, (, ), ;, outerBlock, ., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (, outerBlock, ,]
[., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =]
[., setIsSyntheticBlock, (, true, ), ;, originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =]
[originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, ), ;]
[originalParent, ., addChildBefore, (, outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, ), ;]
[outerBlock, ,, marker, ., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (]
[., startMarker, ), ;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;]
[), ;, Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (]
[Node, innerBlock, =, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,]
[=, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,]
[=, IR, ., block, (, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,]
[(, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,]
[(, ), ;, innerBlock, ., setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,]
[setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;]
[setIsSyntheticBlock, (, true, ), ;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;]
[;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (]
[;, moveSiblingExclusive, (, originalParent, ,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (]
[,, innerBlock, ,, marker, ., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (]
[., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;]
[., startMarker, ,, marker, ., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;]
[., endMarker, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (]
[;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;]
[;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;]
[(, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (]
[(, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (]
[(, outerBlock, ), ), ;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (]
[;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;]
[;, outerBlock, ., addChildToBack, (, innerBlock, ), ;, outerBlock, ., addChildToBack, (, originalParent, ., removeChildAfter, (, outerBlock, ), ), ;]
[(, Node, src, ,, Node, dest, ,, @, Nullable, Node, start, ,, @, Nullable, Node, end, ), {, while, (]
[(, Node, src, ,, Node, dest, ,, @, Nullable, Node, start, ,, @, Nullable, Node, end, ), {, while, (]
[src, ,, Node, dest, ,, @, Nullable, Node, start, ,, @, Nullable, Node, end, ), {, while, (, childAfter, (]
[Node, dest, ,, @, Nullable, Node, start, ,, @, Nullable, Node, end, ), {, while, (, childAfter, (, src, ,]
[@, Nullable, Node, start, ,, @, Nullable, Node, end, ), {, while, (, childAfter, (, src, ,, start, ), !=]
[Nullable, Node, end, ), {, while, (, childAfter, (, src, ,, start, ), !=, end, ), {, Node, child, =]
[end, ), {, while, (, childAfter, (, src, ,, start, ), !=, end, ), {, Node, child, =, removeChildAfter, (]
[{, while, (, childAfter, (, src, ,, start, ), !=, end, ), {, Node, child, =, removeChildAfter, (, src, ,]
[childAfter, (, src, ,, start, ), !=, end, ), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;]
[childAfter, (, src, ,, start, ), !=, end, ), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;]
[start, ), !=, end, ), {, Node, child, =, removeChildAfter, (, src, ,, start, ), ;, dest, ., addChildToBack, (]
[child, ), ;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (]
[child, ), ;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (]
[;, }, }, private, Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==]
[Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==, null, ), {, return]
[Node, childAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==, null, ), {, return]
[), {, if, (, siblingBefore, ==, null, ), {, return, parent, ., getFirstChild, (, ), ;, }, else, {, return]
[), {, if, (, siblingBefore, ==, null, ), {, return, parent, ., getFirstChild, (, ), ;, }, else, {, return]
[(, ), ;, }, }, private, Node, removeChildAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (]
[(, ), ;, }, }, private, Node, removeChildAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (]
[;, }, }, private, Node, removeChildAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==]
[Node, removeChildAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==, null, ), {, return]
[Node, removeChildAfter, (, Node, parent, ,, @, Nullable, Node, siblingBefore, ), {, if, (, siblingBefore, ==, null, ), {, return]
[), {, if, (, siblingBefore, ==, null, ), {, return, parent, ., removeFirstChild, (, ), ;, }, else, {, return]
[), {, if, (, siblingBefore, ==, null, ), {, return, parent, ., removeFirstChild, (, ), ;, }, else, {, return]
[siblingBefore, ==, null, ), {, return, parent, ., removeFirstChild, (, ), ;, }, else, {, return, parent, ., removeChildAfter, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[{, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, n, ., isCall, (, ), ||]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, n, ., isCall, (, ), ||, !]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, n, ., isCall, (, ), ||, !]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, !, n, ., isCall, (, ), ||, !]
[), ||, !, n, ., getFirstChild, (, ), ., isName, (, ), ), {, return, ;, }, Node, callTarget, =]
[), ||, !, n, ., getFirstChild, (, ), ., isName, (, ), ), {, return, ;, }, Node, callTarget, =]
[isName, (, ), ), {, return, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName, =]
[isName, (, ), ), {, return, ;, }, Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName, =]
[Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName, =, callTarget, ., getString, (, ), ;, if, (]
[Node, callTarget, =, n, ., getFirstChild, (, ), ;, String, callName, =, callTarget, ., getString, (, ), ;, if, (]
[., getFirstChild, (, ), ;, String, callName, =, callTarget, ., getString, (, ), ;, if, (, startMarkerName, ., equals, (]
[callName, =, callTarget, ., getString, (, ), ;, if, (, startMarkerName, ., equals, (, callName, ), ), {, if, (]
[=, callTarget, ., getString, (, ), ;, if, (, startMarkerName, ., equals, (, callName, ), ), {, if, (, !]
[=, callTarget, ., getString, (, ), ;, if, (, startMarkerName, ., equals, (, callName, ), ), {, if, (, !]
[if, (, startMarkerName, ., equals, (, callName, ), ), {, if, (, !, parent, ., isExprResult, (, ), ), {]
[if, (, startMarkerName, ., equals, (, callName, ), ), {, if, (, !, parent, ., isExprResult, (, ), ), {]
[equals, (, callName, ), ), {, if, (, !, parent, ., isExprResult, (, ), ), {, compiler, ., report, (]
[equals, (, callName, ), ), {, if, (, !, parent, ., isExprResult, (, ), ), {, compiler, ., report, (]
[), {, if, (, !, parent, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[if, (, !, parent, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, parent, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;, }]
[{, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;, }]
[(, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, startMarkerName, ), ), ;, return, ;, }, markerStack, ., push, (]
[,, startMarkerName, ), ), ;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (]
[startMarkerName, ), ), ;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (, !]
[startMarkerName, ), ), ;, return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (, !]
[return, ;, }, markerStack, ., push, (, parent, ), ;, return, ;, }, if, (, !, endMarkerName, ., equals, (]
[return, ;, }, if, (, !, endMarkerName, ., equals, (, callName, ), ), {, return, ;, }, Node, endMarkerNode, =]
[(, !, endMarkerName, ., equals, (, callName, ), ), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (]
[!, endMarkerName, ., equals, (, callName, ), ), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !]
[!, endMarkerName, ., equals, (, callName, ), ), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !]
[), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {]
[), {, return, ;, }, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {]
[}, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {, compiler, ., report, (]
[}, Node, endMarkerNode, =, parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {, compiler, ., report, (]
[parent, ;, if, (, !, endMarkerNode, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[if, (, !, endMarkerNode, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!, endMarkerNode, ., isExprResult, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,]
[., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;, }, if, (]
[., report, (, t, ., makeError, (, n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;, }, if, (]
[n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {]
[n, ,, INVALID_MARKER_USAGE, ,, endMarkerName, ), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {]
[endMarkerName, ), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (]
[endMarkerName, ), ), ;, return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (]
[return, ;, }, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[}, if, (, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[(, markerStack, ., isEmpty, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,]
[., isEmpty, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,]
[t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =]
[t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =]
[startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (]
[startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (]
[startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (]
[return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (, endMarkerNode, ., getParent, (, ), !=]
[return, ;, }, Node, startMarkerNode, =, markerStack, ., pop, (, ), ;, if, (, endMarkerNode, ., getParent, (, ), !=]
[., pop, (, ), ;, if, (, endMarkerNode, ., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {]
[., pop, (, ), ;, if, (, endMarkerNode, ., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {]
[;, if, (, endMarkerNode, ., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (]
[;, if, (, endMarkerNode, ., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (]
[., getParent, (, ), !=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (, t, ., makeError, (]
[(, ), !=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[!=, startMarkerNode, ., getParent, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,]
[., getParent, (, ), ), {, compiler, ., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,]
[., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }]
[., report, (, t, ., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }]
[., makeError, (, n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, validMarkers, ., add, (]
[n, ,, UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, validMarkers, ., add, (, new, Marker, (]
[UNMATCHED_END_MARKER, ,, startMarkerName, ,, endMarkerName, ), ), ;, return, ;, }, validMarkers, ., add, (, new, Marker, (, startMarkerNode, ,]
