[., math3, ., util, ., FastMath, ;, public, class, FastSineTransformer, implements, RealTransformer, ,, Serializable, {, static, final, long, serialVersionUID, =]
[static, final, long, serialVersionUID, =, 20120211L, ;, private, final, DstNormalization, normalization, ;, public, FastSineTransformer, (, final, DstNormalization, normalization, ), {]
[static, final, long, serialVersionUID, =, 20120211L, ;, private, final, DstNormalization, normalization, ;, public, FastSineTransformer, (, final, DstNormalization, normalization, ), {]
[=, 20120211L, ;, private, final, DstNormalization, normalization, ;, public, FastSineTransformer, (, final, DstNormalization, normalization, ), {, this, ., normalization, =]
[}, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (]
[}, public, double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (]
[double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (, normalization, ==]
[double, [, ], transform, (, final, double, [, ], f, ,, final, TransformType, type, ), {, if, (, normalization, ==]
[f, ,, final, TransformType, type, ), {, if, (, normalization, ==, DstNormalization, ., ORTHOGONAL_DST_I, ), {, final, double, s, =]
[f, ,, final, TransformType, type, ), {, if, (, normalization, ==, DstNormalization, ., ORTHOGONAL_DST_I, ), {, final, double, s, =]
[type, ), {, if, (, normalization, ==, DstNormalization, ., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (]
[type, ), {, if, (, normalization, ==, DstNormalization, ., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (]
[{, if, (, normalization, ==, DstNormalization, ., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /]
[{, if, (, normalization, ==, DstNormalization, ., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /]
[., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, ), ;, return]
[., ORTHOGONAL_DST_I, ), {, final, double, s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, ), ;, return]
[final, double, s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, ), ;, return, TransformUtils, ., scaleArray, (]
[s, =, FastMath, ., sqrt, (, 2.0, /, f, ., length, ), ;, return, TransformUtils, ., scaleArray, (, fst, (]
[., sqrt, (, 2.0, /, f, ., length, ), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,]
[., length, ), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (]
[., length, ), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (]
[), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (, type, ==]
[), ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,, s, ), ;, }, if, (, type, ==]
[(, fst, (, f, ), ,, s, ), ;, }, if, (, type, ==, TransformType, ., FORWARD, ), {, return]
[(, f, ), ,, s, ), ;, }, if, (, type, ==, TransformType, ., FORWARD, ), {, return, fst, (]
[if, (, type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;, }, final, double, s, =]
[if, (, type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;, }, final, double, s, =]
[type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /]
[type, ==, TransformType, ., FORWARD, ), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /]
[), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /, f, ., length, ;, return]
[), {, return, fst, (, f, ), ;, }, final, double, s, =, 2.0, /, f, ., length, ;, return]
[(, f, ), ;, }, final, double, s, =, 2.0, /, f, ., length, ;, return, TransformUtils, ., scaleArray, (]
[), ;, }, final, double, s, =, 2.0, /, f, ., length, ;, return, TransformUtils, ., scaleArray, (, fst, (]
[final, double, s, =, 2.0, /, f, ., length, ;, return, TransformUtils, ., scaleArray, (, fst, (, f, ), ,]
[,, final, double, max, ,, final, int, n, ,, final, TransformType, type, ), {, final, double, [, ], data, =]
[,, final, double, max, ,, final, int, n, ,, final, TransformType, type, ), {, final, double, [, ], data, =]
[,, final, int, n, ,, final, TransformType, type, ), {, final, double, [, ], data, =, FunctionUtils, ., sample, (]
[int, n, ,, final, TransformType, type, ), {, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,]
[,, final, TransformType, type, ), {, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,]
[TransformType, type, ), {, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,]
[{, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ;]
[{, final, double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ;]
[double, [, ], data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ;, data, []
[data, =, FunctionUtils, ., sample, (, f, ,, min, ,, max, ,, n, ), ;, data, [, 0, ], =]
[., sample, (, f, ,, min, ,, max, ,, n, ), ;, data, [, 0, ], =, 0.0, ;, return]
[(, f, ,, min, ,, max, ,, n, ), ;, data, [, 0, ], =, 0.0, ;, return, transform, (]
[,, min, ,, max, ,, n, ), ;, data, [, 0, ], =, 0.0, ;, return, transform, (, data, ,]
[protected, double, [, ], fst, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =]
[], fst, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, []
[], fst, (, double, [, ], f, ), throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, []
[), throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, [, f, ., length, ], ;, if, (]
[throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, [, f, ., length, ], ;, if, (, !]
[throws, MathIllegalArgumentException, {, final, double, [, ], transformed, =, new, double, [, f, ., length, ], ;, if, (, !]
[double, [, ], transformed, =, new, double, [, f, ., length, ], ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (]
[double, [, ], transformed, =, new, double, [, f, ., length, ], ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (]
[[, f, ., length, ], ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw]
[length, ], ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (]
[length, ], ;, if, (, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (]
[(, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,]
[(, !, ArithmeticUtils, ., isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,]
[isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (]
[isPowerOfTwo, (, f, ., length, ), ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (]
[new, MathIllegalArgumentException, (, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (]
[(, LocalizedFormats, ., NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, f, []
[NOT_POWER_OF_TWO_CONSIDER_PADDING, ,, Integer, ., valueOf, (, f, ., length, ), ), ;, }, if, (, f, [, 0, ], !=]
[valueOf, (, f, ., length, ), ), ;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw]
[., length, ), ), ;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (]
[., length, ), ), ;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (]
[;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,]
[;, }, if, (, f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,]
[f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (]
[f, [, 0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (]
[0, ], !=, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, []
[LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, [, 0, ], ), ), ;, }, final, int, n, =]
[LocalizedFormats, ., FIRST_ELEMENT_NOT_ZERO, ,, Double, ., valueOf, (, f, [, 0, ], ), ), ;, }, final, int, n, =]
[valueOf, (, f, [, 0, ], ), ), ;, }, final, int, n, =, f, ., length, ;, if, (]
[valueOf, (, f, [, 0, ], ), ), ;, }, final, int, n, =, f, ., length, ;, if, (]
[f, [, 0, ], ), ), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==]
[], ), ), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {]
[], ), ), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {]
[), ;, }, final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {, transformed, []
[final, int, n, =, f, ., length, ;, if, (, n, ==, 1, ), {, transformed, [, 0, ], =]
[=, f, ., length, ;, if, (, n, ==, 1, ), {, transformed, [, 0, ], =, 0.0, ;, return]
[1, ), {, transformed, [, 0, ], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =]
[transformed, [, 0, ], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, []
[], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;]
[], =, 0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;]
[0.0, ;, return, transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, []
[transformed, ;, }, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =]
[}, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.0, ;]
[}, final, double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.0, ;]
[double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.0, ;, x, []
[double, [, ], x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.0, ;, x, []
[x, =, new, double, [, n, ], ;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >]
[double, [, n, ], ;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =]
[double, [, n, ], ;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =]
[n, ], ;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *]
[n, ], ;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *]
[;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f, []
[;, x, [, 0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f, []
[0, ], =, 0.0, ;, x, [, n, >, >, 1, ], =, 2.0, *, f, [, n, >, >]
[>, >, 1, ], =, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =]
[1, ], =, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;]
[1, ], =, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;]
[=, 2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <]
[2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (]
[2.0, *, f, [, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (]
[[, n, >, >, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >]
[>, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[>, 1, ], ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[=, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =]
[=, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =]
[=, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (]
[n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *]
[n, >, >, 1, ), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *]
[), ;, i, ++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /]
[++, ), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *]
[), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[), {, final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (]
[final, double, a, =, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, []
[=, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], +]
[=, FastMath, ., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], +]
[., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], +, f, []
[., sin, (, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], +, f, []
[(, i, *, FastMath, ., PI, /, n, ), *, (, f, [, i, ], +, f, [, n, -]
[), *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =]
[), *, (, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =]
[(, f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *]
[f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (]
[f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (]
[f, [, i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (]
[i, ], +, f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, []
[f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -]
[f, [, n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -]
[n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, []
[n, -, i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, []
[i, ], ), ;, final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -]
[final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;]
[final, double, b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;]
[b, =, 0.5, *, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, []
[*, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =]
[*, (, f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =]
[f, [, i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +]
[i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;]
[i, ], -, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;]
[-, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, []
[-, f, [, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, []
[[, n, -, i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -]
[i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =]
[i, ], ), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =]
[), ;, x, [, i, ], =, a, +, b, ;, x, [, n, -, i, ], =, a, -]
[=, a, +, b, ;, x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;]
[+, b, ;, x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =]
[x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (]
[x, [, n, -, i, ], =, a, -, b, ;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (]
[;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =]
[;, }, FastFourierTransformer, transformer, ;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =]
[;, transformer, =, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (]
[=, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,]
[=, new, FastFourierTransformer, (, DftNormalization, ., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,]
[., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;]
[., STANDARD, ), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;]
[), ;, Complex, [, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, []
[[, ], y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =]
[y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;]
[y, =, transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;]
[transformer, ., transform, (, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, []
[(, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =]
[(, x, ,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =]
[,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *]
[,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *]
[,, TransformType, ., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *]
[., FORWARD, ), ;, transformed, [, 0, ], =, 0.0, ;, transformed, [, 1, ], =, 0.5, *, y, []
[[, 1, ], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =]
[], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;]
[], =, 0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;]
[0.5, *, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <]
[*, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (]
[*, y, [, 0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (]
[0, ], ., getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >]
[getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[getReal, (, ), ;, for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;]
[for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {]
[for, (, int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {]
[int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, []
[int, i, =, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, []
[=, 1, ;, i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *]
[i, <, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -]
[<, (, n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -]
[n, >, >, 1, ), ;, i, ++, ), {, transformed, [, 2, *, i, ], =, -, y, []
[++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;]
[++, ), {, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;]
[{, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, []
[{, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, []
[{, transformed, [, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, []
[[, 2, *, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *]
[*, i, ], =, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +]
[=, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[=, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[=, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[=, -, y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =]
[y, [, i, ], ., getImaginary, (, ), ;, transformed, [, 2, *, i, +, 1, ], =, y, []
[), ;, transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +]
[), ;, transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +]
[transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, []
[transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, []
[transformed, [, 2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, []
[2, *, i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *]
[i, +, 1, ], =, y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -]
[y, [, i, ], ., getReal, (, ), +, transformed, [, 2, *, i, -, 1, ], ;, }, return]
