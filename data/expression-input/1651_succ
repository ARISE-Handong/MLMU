[;, private, final, ArrayList, <, Node, >, localNameNodes, =, new, ArrayList, <, Node, >, (, ), ;, private, final, Map]
[;, private, final, Map, <, Node, ,, String, >, pseudoNameMap, ;, private, final, Set, <, String, >, externNames, =, new]
[;, private, final, Set, <, String, >, reservedNames, ;, private, final, Map, <, String, ,, String, >, renameMap, =, new]
[;, private, final, VariableMap, prevUsedRenameMap, ;, private, final, String, prefix, ;, private, int, assignmentCount, =, 0, ;, private, StringBuilder, assignmentLog]
[;, private, StringBuilder, assignmentLog, ;, private, Set, <, Var, >, localBleedingFunctions, =, Sets, ., newHashSet, (, ), ;, private, ArrayListMultimap]
[;, private, ArrayListMultimap, <, Scope, ,, Var, >, localBleedingFunctionsPerScope, =, ArrayListMultimap, ., create, (, ), ;, class, Assignment, {, final]
[., newHashSet, (, ), ;, private, ArrayListMultimap, <, Scope, ,, Var, >, localBleedingFunctionsPerScope, =, ArrayListMultimap, ., create, (, ), ;]
[;, class, Assignment, {, final, String, oldName, ;, final, int, orderOfOccurrence, ;, String, newName, ;, int, count, ;, Assignment, (]
[., create, (, ), ;, class, Assignment, {, final, String, oldName, ;, final, int, orderOfOccurrence, ;, String, newName, ;, int]
[=, name, ;, this, ., newName, =, null, ;, this, ., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount]
[., oldName, =, name, ;, this, ., newName, =, null, ;, this, ., count, =, 0, ;, this, ., orderOfOccurrence]
[;, this, ., newName, =, null, ;, this, ., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;]
[=, null, ;, this, ., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (]
[., newName, =, null, ;, this, ., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void]
[;, this, ., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName]
[=, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, .]
[., count, =, 0, ;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {]
[;, this, ., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (]
[=, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (, this, ., newName, ==]
[., orderOfOccurrence, =, assignmentCount, ++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (, this, .]
[;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (, this, ., newName, ==, null, ), ;]
[++, ;, }, void, setNewName, (, String, newName, ), {, Preconditions, ., checkState, (, this, ., newName, ==, null, )]
[;, this, ., newName, =, newName, ;, }, }, private, final, Map, <, String, ,, Assignment, >, assignments, =, new]
[., checkState, (, this, ., newName, ==, null, ), ;, this, ., newName, =, newName, ;, }, }, private, final]
[), ;, this, ., newName, =, newName, ;, }, }, private, final, Map, <, String, ,, Assignment, >, assignments, =]
[==, null, ), ;, this, ., newName, =, newName, ;, }, }, private, final, Map, <, String, ,, Assignment, >]
[., newName, ==, null, ), ;, this, ., newName, =, newName, ;, }, }, private, final, Map, <, String, ,]
[), ;, this, ., newName, =, newName, ;, }, }, private, final, Map, <, String, ,, Assignment, >, assignments, =]
[=, newName, ;, }, }, private, final, Map, <, String, ,, Assignment, >, assignments, =, new, HashMap, <, String, ,]
[., newName, =, newName, ;, }, }, private, final, Map, <, String, ,, Assignment, >, assignments, =, new, HashMap, <]
[;, }, }, private, final, Map, <, String, ,, Assignment, >, assignments, =, new, HashMap, <, String, ,, Assignment, >]
[;, private, final, boolean, localRenamingOnly, ;, private, boolean, preserveFunctionExpressionNames, ;, private, final, boolean, shouldShadow, ;, private, final, char, [, ]]
[;, RenameVars, (, AbstractCompiler, compiler, ,, String, prefix, ,, boolean, localRenamingOnly, ,, boolean, preserveFunctionExpressionNames, ,, boolean, generatePseudoNames, ,, boolean, shouldShadow]
[=, compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly]
[., compiler, =, compiler, ;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly]
[;, this, ., prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this]
[=, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames]
[., prefix, =, prefix, ==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames]
[;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, .]
[?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames]
[==, null, ?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if]
[?, "", :, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames]
[:, prefix, ;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {]
[;, this, ., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, .]
[=, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, .]
[., localRenamingOnly, =, localRenamingOnly, ;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =]
[;, this, ., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (]
[=, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else]
[., preserveFunctionExpressionNames, =, preserveFunctionExpressionNames, ;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;]
[;, if, (, generatePseudoNames, ), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {, this]
[), {, this, ., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null]
[=, Maps, ., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap]
[., pseudoNameMap, =, Maps, ., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }, this]
[;, }, else, {, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters]
[., newHashMap, (, ), ;, }, else, {, this, ., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap]
[=, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =]
[., pseudoNameMap, =, null, ;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, .]
[;, }, this, ., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;]
[=, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null]
[., prevUsedRenameMap, =, prevUsedRenameMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames]
[;, this, ., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {]
[=, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =]
[., reservedCharacters, =, reservedCharacters, ;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {, this, .]
[;, this, ., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =, Sets, .]
[=, shouldShadow, ;, if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;]
[., shouldShadow, =, shouldShadow, ;, if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (]
[;, if, (, reservedNames, ==, null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else]
[), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =, Sets]
[==, null, ), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames]
[), {, this, ., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =, Sets]
[=, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =, Sets, ., newHashSet, (, reservedNames, )]
[., reservedNames, =, Sets, ., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =, Sets, ., newHashSet, (]
[;, }, else, {, this, ., reservedNames, =, Sets, ., newHashSet, (, reservedNames, ), ;, }, }, class, ProcessVars, extends]
[., newHashSet, (, ), ;, }, else, {, this, ., reservedNames, =, Sets, ., newHashSet, (, reservedNames, ), ;, }]
[=, Sets, ., newHashSet, (, reservedNames, ), ;, }, }, class, ProcessVars, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, boolean]
[., reservedNames, =, Sets, ., newHashSet, (, reservedNames, ), ;, }, }, class, ProcessVars, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private]
[;, }, }, class, ProcessVars, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, boolean, isExternsPass_, ;, ProcessVars, (, boolean, isExterns, )]
[., newHashSet, (, reservedNames, ), ;, }, }, class, ProcessVars, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, boolean, isExternsPass_, ;]
[), ;, }, }, class, ProcessVars, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, final, boolean, isExternsPass_, ;, ProcessVars, (, boolean, isExterns]
[=, isExterns, ;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (]
[;, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, t, ., inGlobalScope, (, ), )]
[), return, ;, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars, (, ), ;, while]
[., inGlobalScope, (, ), ), return, ;, Iterator, <, Var, >, it, =, t, ., getScope, (, ), ., getVars]
[;, while, (, it, ., hasNext, (, ), ), {, Var, current, =, it, ., next, (, ), ;, if]
[., getVars, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Var, current, =, it, ., next]
[., getScope, (, ), ., getVars, (, ), ;, while, (, it, ., hasNext, (, ), ), {, Var, current]
[), {, Var, current, =, it, ., next, (, ), ;, if, (, current, ., isBleedingFunction, (, ), ), {]
[., hasNext, (, ), ), {, Var, current, =, it, ., next, (, ), ;, if, (, current, ., isBleedingFunction]
[;, if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put]
[., next, (, ), ;, if, (, current, ., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, )]
[), {, localBleedingFunctions, ., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put, (, t, ., getScope, (, ), ., getParent]
[., isBleedingFunction, (, ), ), {, localBleedingFunctions, ., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put, (, t, ., getScope]
[;, localBleedingFunctionsPerScope, ., put, (, t, ., getScope, (, ), ., getParent, (, ), ,, current, ), ;, }, }]
[., add, (, current, ), ;, localBleedingFunctionsPerScope, ., put, (, t, ., getScope, (, ), ., getParent, (, ), ,]
[), ;, localBleedingFunctionsPerScope, ., put, (, t, ., getScope, (, ), ., getParent, (, ), ,, current, ), ;, }]
[;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void, visit]
[., put, (, t, ., getScope, (, ), ., getParent, (, ), ,, current, ), ;, }, }, }, @]
[,, current, ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override]
[., getParent, (, ), ,, current, ), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, )]
[., getScope, (, ), ., getParent, (, ), ,, current, ), ;, }, }, }, @, Override, public, void, exitScope]
[), ;, }, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, }, @, Override, public, void]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, name, ., length, (]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (, name, ., length, (]
[., isName, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, if, (]
[;, if, (, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =]
[., getString, (, ), ;, if, (, name, ., length, (, ), ==, 0, ), {, return, ;, }, Scope]
[), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[==, 0, ), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (]
[., length, (, ), ==, 0, ), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (]
[), {, return, ;, }, Scope, ., Var, var, =, t, ., getScope, (, ), ., getVar, (, name, )]
[;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (, !, var, .]
[., getVar, (, name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, )]
[., getScope, (, ), ., getVar, (, name, ), ;, boolean, local, =, (, var, !=, null, ), &&, var]
[), ;, boolean, local, =, (, var, !=, null, ), &&, var, ., isLocal, (, ), &&, (, !, var]
[;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if]
[&&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (]
[&&, var, ., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, )]
[), &&, var, ., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (]
[!=, null, ), &&, var, ., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), .]
[), &&, var, ., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (]
[&&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (]
[., isLocal, (, ), &&, (, !, var, ., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !]
[;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if]
[), ;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }]
[||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add]
[||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add]
[., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !, local, &&, localRenamingOnly, )]
[., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if, (, !]
[., scope, ., getParent, (, ), ., isGlobal, (, ), ||, !, var, ., isBleedingFunction, (, ), ), ;, if]
[), ;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }]
[), ;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }]
[., isBleedingFunction, (, ), ), ;, if, (, !, local, &&, localRenamingOnly, ), {, reservedNames, ., add, (, name, )]
[), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&]
[&&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=]
[&&, localRenamingOnly, ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=]
[), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&]
[;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (]
[., add, (, name, ), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression]
[), ;, return, ;, }, if, (, preserveFunctionExpressionNames, &&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode]
[), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, !, okToRenameVar, (, name, ,, local]
[&&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name, ), ;]
[&&, var, !=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {, reservedNames, ., add]
[&&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name, ), ;]
[!=, null, &&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name]
[&&, NodeUtil, ., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name, ), ;]
[), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, !, okToRenameVar, (, name, ,, local]
[., isFunctionExpression, (, var, ., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name, ), ;, return, ;]
[), ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, !, okToRenameVar, (, name, ,]
[., getParentNode, (, ), ), ), {, reservedNames, ., add, (, name, ), ;, return, ;, }, if, (, !]
[;, return, ;, }, if, (, !, okToRenameVar, (, name, ,, local, ), ), {, if, (, local, ), {]
[., add, (, name, ), ;, return, ;, }, if, (, !, okToRenameVar, (, name, ,, local, ), ), {]
[), ;, return, ;, }, if, (, !, okToRenameVar, (, name, ,, local, ), ), {, if, (, local, )]
[), {, if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if]
[), {, if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if]
[,, local, ), ), {, if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name]
[), ), {, if, (, local, ), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;]
[), {, String, newName, =, MakeDeclaredNamesUnique, ., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (, !, newName, ., equals]
[;, if, (, !, newName, ., equals, (, name, ), ), {, n, ., setString, (, newName, ), ;, }]
[., getOrginalName, (, name, ), ;, if, (, !, newName, ., equals, (, name, ), ), {, n, ., setString]
[., ContextualRenameInverter, ., getOrginalName, (, name, ), ;, if, (, !, newName, ., equals, (, name, ), ), {, n]
[), ;, if, (, !, newName, ., equals, (, name, ), ), {, n, ., setString, (, newName, ), ;]
[), {, n, ., setString, (, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if]
[), {, n, ., setString, (, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if]
[., equals, (, name, ), ), {, n, ., setString, (, newName, ), ;, }, }, return, ;, }, if]
[), ), {, n, ., setString, (, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {]
[;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if, (, !, local, ), {, externNames, ., add]
[., setString, (, newName, ), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if, (, !, local]
[), ;, }, }, return, ;, }, if, (, isExternsPass_, ), {, if, (, !, local, ), {, externNames, .]
[), {, if, (, !, local, ), {, externNames, ., add, (, name, ), ;, }, return, ;, }, if]
[), {, externNames, ., add, (, name, ), ;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {]
[), {, externNames, ., add, (, name, ), ;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {]
[;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {, recordPseudoName, (, n, ), ;, }, if, (]
[., add, (, name, ), ;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {, recordPseudoName, (, n]
[), ;, }, return, ;, }, if, (, pseudoNameMap, !=, null, ), {, recordPseudoName, (, n, ), ;, }, if]
[), {, recordPseudoName, (, n, ), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (]
[!=, null, ), {, recordPseudoName, (, n, ), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +]
[), {, recordPseudoName, (, n, ), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (]
[;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (, tempName]
[), ;, }, if, (, local, ), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (]
[), {, String, tempName, =, LOCAL_VAR_PREFIX, +, getLocalVarIndex, (, var, ), ;, incCount, (, tempName, ), ;, localNameNodes, ., add]
[;, incCount, (, tempName, ), ;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, ), ;]
[+, getLocalVarIndex, (, var, ), ;, incCount, (, tempName, ), ;, localNameNodes, ., add, (, n, ), ;, n, .]
[;, incCount, (, tempName, ), ;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, ), ;]
[), ;, incCount, (, tempName, ), ;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, )]
[;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, ), ;, }, else, if, (, var]
[), ;, localNameNodes, ., add, (, n, ), ;, n, ., setString, (, tempName, ), ;, }, else, if, (]
[;, n, ., setString, (, tempName, ), ;, }, else, if, (, var, !=, null, ), {, incCount, (, name]
[., add, (, n, ), ;, n, ., setString, (, tempName, ), ;, }, else, if, (, var, !=, null]
[), ;, n, ., setString, (, tempName, ), ;, }, else, if, (, var, !=, null, ), {, incCount, (]
[;, }, else, if, (, var, !=, null, ), {, incCount, (, name, ), ;, globalNameNodes, ., add, (, n]
[., setString, (, tempName, ), ;, }, else, if, (, var, !=, null, ), {, incCount, (, name, ), ;]
[), ;, }, else, if, (, var, !=, null, ), {, incCount, (, name, ), ;, globalNameNodes, ., add, (]
[), {, incCount, (, name, ), ;, globalNameNodes, ., add, (, n, ), ;, }, }, void, incCount, (, String]
[!=, null, ), {, incCount, (, name, ), ;, globalNameNodes, ., add, (, n, ), ;, }, }, void, incCount]
[), {, incCount, (, name, ), ;, globalNameNodes, ., add, (, n, ), ;, }, }, void, incCount, (, String]
[;, globalNameNodes, ., add, (, n, ), ;, }, }, void, incCount, (, String, name, ), {, Assignment, s, =]
[), ;, globalNameNodes, ., add, (, n, ), ;, }, }, void, incCount, (, String, name, ), {, Assignment, s]
[;, }, }, void, incCount, (, String, name, ), {, Assignment, s, =, assignments, ., get, (, name, ), ;]
[., add, (, n, ), ;, }, }, void, incCount, (, String, name, ), {, Assignment, s, =, assignments, .]
[), ;, }, }, void, incCount, (, String, name, ), {, Assignment, s, =, assignments, ., get, (, name, )]
[;, if, (, s, ==, null, ), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (]
[., get, (, name, ), ;, if, (, s, ==, null, ), {, s, =, new, Assignment, (, name, )]
[), ;, if, (, s, ==, null, ), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put]
[), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,, s, ), ;, }]
[==, null, ), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,, s, )]
[), {, s, =, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,, s, ), ;, }]
[=, new, Assignment, (, name, ), ;, assignments, ., put, (, name, ,, s, ), ;, }, s, ., count]
[;, assignments, ., put, (, name, ,, s, ), ;, }, s, ., count, ++, ;, }, }, private, static]
[), ;, assignments, ., put, (, name, ,, s, ), ;, }, s, ., count, ++, ;, }, }, private]
[;, }, s, ., count, ++, ;, }, }, private, static, final, Comparator, <, Assignment, >, FREQUENCY_COMPARATOR, =, new, Comparator]
[., put, (, name, ,, s, ), ;, }, s, ., count, ++, ;, }, }, private, static, final, Comparator]
[,, s, ), ;, }, s, ., count, ++, ;, }, }, private, static, final, Comparator, <, Assignment, >, FREQUENCY_COMPARATOR]
[), ;, }, s, ., count, ++, ;, }, }, private, static, final, Comparator, <, Assignment, >, FREQUENCY_COMPARATOR, =, new]
[;, }, }, private, static, final, Comparator, <, Assignment, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Assignment, >, (, ), {]
[++, ;, }, }, private, static, final, Comparator, <, Assignment, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Assignment, >, (, )]
[., count, ++, ;, }, }, private, static, final, Comparator, <, Assignment, >, FREQUENCY_COMPARATOR, =, new, Comparator, <, Assignment, >]
[;, private, static, final, Comparator, <, Assignment, >, ORDER_OF_OCCURRENCE_COMPARATOR, =, new, Comparator, <, Assignment, >, (, ), {, @, Override]
[), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2]
[!=, a2, ., count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare]
[., count, !=, a2, ., count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR]
[), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2]
[., count, ), {, return, a2, ., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1]
[;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2, ), ;, }, }, ;, private, static, final, Comparator, <]
[-, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2, ), ;, }, }, ;, private]
[., count, -, a1, ., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2, ), ;, }, }]
[;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2, ), ;, }, }, ;, private, static, final, Comparator, <]
[., count, ;, }, return, ORDER_OF_OCCURRENCE_COMPARATOR, ., compare, (, a1, ,, a2, ), ;, }, }, ;, private, static, final]
[;, }, }, ;, private, static, final, Comparator, <, Assignment, >, ORDER_OF_OCCURRENCE_COMPARATOR, =, new, Comparator, <, Assignment, >, (, )]
[., compare, (, a1, ,, a2, ), ;, }, }, ;, private, static, final, Comparator, <, Assignment, >, ORDER_OF_OCCURRENCE_COMPARATOR, =]
[,, a2, ), ;, }, }, ;, private, static, final, Comparator, <, Assignment, >, ORDER_OF_OCCURRENCE_COMPARATOR, =, new, Comparator, <, Assignment]
[), ;, }, }, ;, private, static, final, Comparator, <, Assignment, >, ORDER_OF_OCCURRENCE_COMPARATOR, =, new, Comparator, <, Assignment, >, (]
[;, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, assignmentLog, =, new, StringBuilder, (, )]
[;, }, }, ;, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, assignmentLog, =, new]
[-, a2, ., orderOfOccurrence, ;, }, }, ;, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., orderOfOccurrence, -, a2, ., orderOfOccurrence, ;, }, }, ;, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, }, ;, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, assignmentLog, =, new]
[., orderOfOccurrence, ;, }, }, ;, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, assignmentLog]
[=, new, StringBuilder, (, ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), )]
[;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), ), ;, reservedNames, ., addAll, (]
[., traverse, (, compiler, ,, externs, ,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, externs, ,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars]
[,, new, ProcessVars, (, true, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), ), ;, reservedNames, ., addAll]
[), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), ), ;, reservedNames, .]
[;, reservedNames, ., addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (]
[., traverse, (, compiler, ,, root, ,, new, ProcessVars, (, false, ), ), ;, reservedNames, ., addAll, (, externNames, )]
[,, root, ,, new, ProcessVars, (, false, ), ), ;, reservedNames, ., addAll, (, externNames, ), ;, SortedSet, <, Assignment]
[,, new, ProcessVars, (, false, ), ), ;, reservedNames, ., addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency]
[), ;, reservedNames, ., addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >]
[), ), ;, reservedNames, ., addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment]
[;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, ), ;, varsByFrequency, ., addAll, (]
[., addAll, (, externNames, ), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, )]
[), ;, SortedSet, <, Assignment, >, varsByFrequency, =, new, TreeSet, <, Assignment, >, (, FREQUENCY_COMPARATOR, ), ;, varsByFrequency, ., addAll]
[;, varsByFrequency, ., addAll, (, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (]
[), ;, varsByFrequency, ., addAll, (, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables]
[;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (]
[., addAll, (, assignments, ., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,]
[), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process]
[., values, (, ), ), ;, if, (, shouldShadow, ), {, new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,]
[), {, new, ShadowVariables, (, compiler, ,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, )]
[;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency, ), ;, boolean]
[., process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;]
[,, assignments, ,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=]
[,, varsByFrequency, ,, pseudoNameMap, ), ., process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, )]
[,, pseudoNameMap, ), ., process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap]
[), ., process, (, externs, ,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, )]
[,, root, ), ;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency]
[), ;, }, if, (, prevUsedRenameMap, !=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency, ), ;]
[), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency, ), ;, boolean, changed, =, false, ;, for, (, Node]
[!=, null, ), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency, ), ;, boolean, changed, =, false, ;, for]
[), {, reusePreviouslyUsedVariableMap, (, ), ;, }, assignNames, (, varsByFrequency, ), ;, boolean, changed, =, false, ;, for, (, Node]
[;, }, assignNames, (, varsByFrequency, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, globalNameNodes, ), {]
[;, boolean, changed, =, false, ;, for, (, Node, n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (, n]
[), ;, boolean, changed, =, false, ;, for, (, Node, n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (]
[;, for, (, Node, n, :, globalNameNodes, ), {, String, newName, =, getNewGlobalName, (, n, ), ;, if, (, newName]
[), {, String, newName, =, getNewGlobalName, (, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString]
[;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }]
[), ;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;]
[), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, }, int, count, =, 0, ;]
[!=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, }, int, count, =]
[), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, }, int, count, =, 0, ;]
[;, changed, =, true, ;, }, }, int, count, =, 0, ;, for, (, Node, n, :, localNameNodes, ), {]
[., setString, (, newName, ), ;, changed, =, true, ;, }, }, int, count, =, 0, ;, for, (, Node]
[), ;, changed, =, true, ;, }, }, int, count, =, 0, ;, for, (, Node, n, :, localNameNodes, )]
[=, true, ;, }, }, int, count, =, 0, ;, for, (, Node, n, :, localNameNodes, ), {, String, newName]
[;, }, }, int, count, =, 0, ;, for, (, Node, n, :, localNameNodes, ), {, String, newName, =, getNewLocalName]
[;, for, (, Node, n, :, localNameNodes, ), {, String, newName, =, getNewLocalName, (, n, ), ;, if, (, newName]
[), {, String, newName, =, getNewLocalName, (, n, ), ;, if, (, newName, !=, null, ), {, n, ., setString]
[;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }]
[), ;, if, (, newName, !=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;]
[), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, count, ++, ;, }, if, (]
[!=, null, ), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, count, ++, ;, }]
[), {, n, ., setString, (, newName, ), ;, changed, =, true, ;, }, count, ++, ;, }, if, (]
[;, changed, =, true, ;, }, count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, )]
[., setString, (, newName, ), ;, changed, =, true, ;, }, count, ++, ;, }, if, (, changed, ), {]
[), ;, changed, =, true, ;, }, count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (]
[=, true, ;, }, count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[;, }, count, ++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, .]
[;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n", +]
[++, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n"]
[), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n", +, assignmentLog, ), ;, assignmentLog, =]
[;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n", +, assignmentLog, ), ;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (]
[., reportCodeChange, (, ), ;, }, compiler, ., addToDebugLog, (, "JS var assignments:\n", +, assignmentLog, ), ;, assignmentLog, =, null, ;, }]
[;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =, n, ., getString]
[., addToDebugLog, (, "JS var assignments:\n", +, assignmentLog, ), ;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (, Node, n, )]
[), ;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =, n, .]
[+, assignmentLog, ), ;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =]
[), ;, assignmentLog, =, null, ;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =, n, .]
[=, null, ;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =, n, ., getString, (, )]
[;, }, private, String, getNewGlobalName, (, Node, n, ), {, String, oldName, =, n, ., getString, (, ), ;, Assignment]
[;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (, a, ., newName, !=, null, &&, !]
[., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldName, ), ;, if, (, a, ., newName]
[;, if, (, a, ., newName, !=, null, &&, !, a, ., newName, ., equals, (, oldName, ), ), {]
[., get, (, oldName, ), ;, if, (, a, ., newName, !=, null, &&, !, a, ., newName, ., equals]
[), ;, if, (, a, ., newName, !=, null, &&, !, a, ., newName, ., equals, (, oldName, ), )]
[), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a]
[&&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return]
[!=, null, &&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, )]
[., newName, !=, null, &&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=]
[&&, !, a, ., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return]
[), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a]
[), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a]
[., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n]
[., newName, ., equals, (, oldName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get]
[), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return]
[), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, else, {, return]
[!=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, else]
[), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, else, {, return]
[;, }, return, a, ., newName, ;, }, else, {, return, null, ;, }, }, private, String, getNewLocalName, (, Node]
[., get, (, n, ), ;, }, return, a, ., newName, ;, }, else, {, return, null, ;, }, }]
[), ;, }, return, a, ., newName, ;, }, else, {, return, null, ;, }, }, private, String, getNewLocalName, (]
[;, }, else, {, return, null, ;, }, }, private, String, getNewLocalName, (, Node, n, ), {, String, oldTempName, =]
[., newName, ;, }, else, {, return, null, ;, }, }, private, String, getNewLocalName, (, Node, n, ), {, String]
[;, }, }, private, String, getNewLocalName, (, Node, n, ), {, String, oldTempName, =, n, ., getString, (, ), ;]
[;, Assignment, a, =, assignments, ., get, (, oldTempName, ), ;, if, (, !, a, ., newName, ., equals, (]
[., getString, (, ), ;, Assignment, a, =, assignments, ., get, (, oldTempName, ), ;, if, (, !, a, .]
[;, if, (, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=, null, )]
[., get, (, oldTempName, ), ;, if, (, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if]
[), ;, if, (, !, a, ., newName, ., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=, null]
[), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a]
[), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a]
[., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n]
[., newName, ., equals, (, oldTempName, ), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get]
[), ), {, if, (, pseudoNameMap, !=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return]
[), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, return, null, ;]
[!=, null, ), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, return]
[), {, return, pseudoNameMap, ., get, (, n, ), ;, }, return, a, ., newName, ;, }, return, null, ;]
[;, }, return, a, ., newName, ;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {]
[., get, (, n, ), ;, }, return, a, ., newName, ;, }, return, null, ;, }, private, void, recordPseudoName]
[), ;, }, return, a, ., newName, ;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, )]
[;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,]
[., newName, ;, }, return, null, ;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (]
[;, }, private, void, recordPseudoName, (, Node, n, ), {, pseudoNameMap, ., put, (, n, ,, '$', +, n, .]
[;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :, assignments, ., values, (, ), ), {]
[., put, (, n, ,, '$', +, n, ., getString, (, ), +, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap]
[,, '$', +, n, ., getString, (, ), +, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for]
[), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :, assignments, ., values, (, ), )]
[+, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :, assignments, ., values, (]
[+, n, ., getString, (, ), +, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment]
[+, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :, assignments, ., values, (]
[., getString, (, ), +, "$$", ), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :]
[), ;, }, private, void, reusePreviouslyUsedVariableMap, (, ), {, for, (, Assignment, a, :, assignments, ., values, (, ), )]
[), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (, prevNewName, ==, null, ||]
[., values, (, ), ), {, String, prevNewName, =, prevUsedRenameMap, ., lookupNewName, (, a, ., oldName, ), ;, if, (]
[;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (]
[., lookupNewName, (, a, ., oldName, ), ;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, )]
[), ;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if]
[., oldName, ), ;, if, (, prevNewName, ==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;]
[), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, .]
[||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (]
[==, null, ||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, .]
[||, reservedNames, ., contains, (, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (]
[), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, .]
[., contains, (, prevNewName, ), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, )]
[), ), {, continue, ;, }, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames]
[), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }, }, private]
[||, (, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), ), )]
[., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith]
[., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ||, (, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName]
[), ||, (, !, externNames, ., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), )]
[), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }, }, private]
[), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }, }]
[&&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a]
[&&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a]
[., contains, (, a, ., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add]
[), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (]
[., oldName, ), &&, prevNewName, ., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;]
[), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }, }]
[., startsWith, (, prefix, ), ), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,, prevNewName]
[), ), ), {, reservedNames, ., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }]
[;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }, }, private, void, assignNames, (, Set, <, Assignment, >, varsToRename]
[., add, (, prevNewName, ), ;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }, }, private, void, assignNames, (]
[), ;, finalizeNameAssignment, (, a, ,, prevNewName, ), ;, }, }, }, private, void, assignNames, (, Set, <, Assignment, >]
[;, }, }, }, private, void, assignNames, (, Set, <, Assignment, >, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new, NameGenerator]
[,, prevNewName, ), ;, }, }, }, private, void, assignNames, (, Set, <, Assignment, >, varsToRename, ), {, NameGenerator, globalNameGenerator]
[), ;, }, }, }, private, void, assignNames, (, Set, <, Assignment, >, varsToRename, ), {, NameGenerator, globalNameGenerator, =, new]
[;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters]
[,, prefix, ,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (]
[,, reservedCharacters, ), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,]
[), ;, NameGenerator, localNameGenerator, =, prefix, ., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,, "", ,]
[;, List, <, Assignment, >, pendingAssignments, =, new, ArrayList, <, Assignment, >, (, ), ;, List, <, String, >, generatedNamesForAssignments]
[?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, List, <, Assignment, >, pendingAssignments, =, new]
[., isEmpty, (, ), ?, globalNameGenerator, :, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, List, <, Assignment]
[:, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, List, <, Assignment, >, pendingAssignments, =, new, ArrayList, <]
[;, List, <, Assignment, >, pendingAssignments, =, new, ArrayList, <, Assignment, >, (, ), ;, List, <, String, >, generatedNamesForAssignments]
[,, "", ,, reservedCharacters, ), ;, List, <, Assignment, >, pendingAssignments, =, new, ArrayList, <, Assignment, >, (, ), ;]
[,, reservedCharacters, ), ;, List, <, Assignment, >, pendingAssignments, =, new, ArrayList, <, Assignment, >, (, ), ;, List, <]
[), ;, List, <, Assignment, >, pendingAssignments, =, new, ArrayList, <, Assignment, >, (, ), ;, List, <, String, >]
[;, List, <, String, >, generatedNamesForAssignments, =, new, ArrayList, <, String, >, (, ), ;, for, (, Assignment, a, :]
[;, for, (, Assignment, a, :, varsToRename, ), {, if, (, a, ., newName, !=, null, ), {, continue, ;]
[), {, if, (, a, ., newName, !=, null, ), {, continue, ;, }, if, (, externNames, ., contains, (]
[), {, continue, ;, }, if, (, externNames, ., contains, (, a, ., oldName, ), ), {, continue, ;, }]
[!=, null, ), {, continue, ;, }, if, (, externNames, ., contains, (, a, ., oldName, ), ), {, continue]
[., newName, !=, null, ), {, continue, ;, }, if, (, externNames, ., contains, (, a, ., oldName, ), )]
[), {, continue, ;, }, if, (, externNames, ., contains, (, a, ., oldName, ), ), {, continue, ;, }]
[), {, continue, ;, }, String, newName, ;, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {]
[., contains, (, a, ., oldName, ), ), {, continue, ;, }, String, newName, ;, if, (, a, ., oldName]
[), ), {, continue, ;, }, String, newName, ;, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), )]
[., oldName, ), ), {, continue, ;, }, String, newName, ;, if, (, a, ., oldName, ., startsWith, (, LOCAL_VAR_PREFIX]
[), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {]
[., startsWith, (, LOCAL_VAR_PREFIX, ), ), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName]
[., oldName, ., startsWith, (, LOCAL_VAR_PREFIX, ), ), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a]
[), ), {, newName, =, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else]
[=, localNameGenerator, ., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {, newName, =, globalNameGenerator]
[;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments]
[., generateNextName, (, ), ;, finalizeNameAssignment, (, a, ,, newName, ), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName]
[;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments]
[,, newName, ), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (, a]
[), ;, }, else, {, newName, =, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;]
[=, globalNameGenerator, ., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments, ., add, (, newName, )]
[;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments, ., add, (, newName, ), ;, }, reservedNames, ., add, (]
[., generateNextName, (, ), ;, pendingAssignments, ., add, (, a, ), ;, generatedNamesForAssignments, ., add, (, newName, ), ;, }]
[;, generatedNamesForAssignments, ., add, (, newName, ), ;, }, reservedNames, ., add, (, newName, ), ;, }, int, numPendingAssignments, =]
[., add, (, a, ), ;, generatedNamesForAssignments, ., add, (, newName, ), ;, }, reservedNames, ., add, (, newName, )]
[), ;, generatedNamesForAssignments, ., add, (, newName, ), ;, }, reservedNames, ., add, (, newName, ), ;, }, int, numPendingAssignments]
[;, }, reservedNames, ., add, (, newName, ), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for]
[., add, (, newName, ), ;, }, reservedNames, ., add, (, newName, ), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, .]
[), ;, }, reservedNames, ., add, (, newName, ), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;]
[;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[., add, (, newName, ), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for, (, int, i]
[), ;, }, int, numPendingAssignments, =, generatedNamesForAssignments, ., size, (, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, numPendingAssignments, ;, ), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =]
[., size, (, ), ;, for, (, int, i, =, 0, ;, i, <, numPendingAssignments, ;, ), {, SortedSet, <]
[;, i, <, numPendingAssignments, ;, ), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR]
[;, ), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, ), ;, int, len]
[<, numPendingAssignments, ;, ), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, ), ;]
[;, ), {, SortedSet, <, Assignment, >, varsByOrderOfOccurrence, =, new, TreeSet, <, Assignment, >, (, ORDER_OF_OCCURRENCE_COMPARATOR, ), ;, int, len]
[;, int, len, =, generatedNamesForAssignments, ., get, (, i, ), ., length, (, ), ;, for, (, int, j, =]
[), ;, int, len, =, generatedNamesForAssignments, ., get, (, i, ), ., length, (, ), ;, for, (, int, j]
[;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length]
[., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (]
[., get, (, i, ), ., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments]
[), ., length, (, ), ;, for, (, int, j, =, i, ;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get]
[;, j, <, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;, j, ++]
[;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (]
[&&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, .]
[<, numPendingAssignments, &&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {]
[&&, generatedNamesForAssignments, ., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, .]
[;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (]
[==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), ), ;, }]
[., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j]
[., get, (, j, ), ., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (]
[), ., length, (, ), ==, len, ;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (]
[;, j, ++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (]
[), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (, Assignment, a, :]
[++, ), {, varsByOrderOfOccurrence, ., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (, Assignment, a]
[;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (, i, )]
[., add, (, pendingAssignments, ., get, (, j, ), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {]
[), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (, i]
[., get, (, j, ), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,]
[), ), ;, }, for, (, Assignment, a, :, varsByOrderOfOccurrence, ), {, finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (]
[), {, finalizeNameAssignment, (, a, ,, generatedNamesForAssignments, ., get, (, i, ), ), ;, ++, i, ;, }, }, }]
[;, ++, i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, .]
[,, generatedNamesForAssignments, ., get, (, i, ), ), ;, ++, i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment]
[), ;, ++, i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a]
[., get, (, i, ), ), ;, ++, i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,]
[), ), ;, ++, i, ;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {]
[;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, ., setNewName, (, newName]
[;, }, }, }, private, void, finalizeNameAssignment, (, Assignment, a, ,, String, newName, ), {, a, ., setNewName, (, newName]
[;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;, assignmentLog, ., append, (, a, ., oldName, )]
[., setNewName, (, newName, ), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;, assignmentLog, ., append]
[), ;, renameMap, ., put, (, a, ., oldName, ,, newName, ), ;, assignmentLog, ., append, (, a, ., oldName]
[;, assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, newName, ), .]
[., put, (, a, ., oldName, ,, newName, ), ;, assignmentLog, ., append, (, a, ., oldName, ), ., append]
[,, newName, ), ;, assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (]
[., oldName, ,, newName, ), ;, assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", ), .]
[), ;, assignmentLog, ., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, newName, )]
[;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap, (, ImmutableMap, ., copyOf, (, renameMap, ), ), ;, }]
[., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap, (, ImmutableMap, ., copyOf, (]
[., append, (, newName, ), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap]
[., append, (, " => ", ), ., append, (, newName, ), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (]
[., append, (, a, ., oldName, ), ., append, (, " => ", ), ., append, (, newName, ), ., append, (]
[), ., append, (, " => ", ), ., append, (, newName, ), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap]
[., oldName, ), ., append, (, " => ", ), ., append, (, newName, ), ., append, (, '\n', ), ;, }]
[), ., append, (, newName, ), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return, new]
[), ., append, (, '\n', ), ;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap, (, ImmutableMap, ., copyOf]
[), ;, }, VariableMap, getVariableMap, (, ), {, return, new, VariableMap, (, ImmutableMap, ., copyOf, (, renameMap, ), ), ;]
[;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return, !, compiler, ., getCodingConvention, (, )]
[), ;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return, !, compiler, ., getCodingConvention, (]
[., copyOf, (, renameMap, ), ), ;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return]
[), ), ;, }, private, boolean, okToRenameVar, (, String, name, ,, boolean, isLocal, ), {, return, !, compiler, ., getCodingConvention]
[;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =, v, ., index, ;, Scope, s, =]
[;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =, v, ., index, ;, Scope, s, =]
[., isExported, (, name, ,, isLocal, ), ;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =]
[., getCodingConvention, (, ), ., isExported, (, name, ,, isLocal, ), ;, }, private, int, getLocalVarIndex, (, Var, v, )]
[,, isLocal, ), ;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =, v, ., index, ;]
[), ;, }, private, int, getLocalVarIndex, (, Var, v, ), {, int, num, =, v, ., index, ;, Scope, s]
[;, Scope, s, =, v, ., scope, ., getParent, (, ), ;, if, (, s, ==, null, ), {, throw]
[., index, ;, Scope, s, =, v, ., scope, ., getParent, (, ), ;, if, (, s, ==, null, )]
[;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s]
[., getParent, (, ), ;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }]
[., scope, ., getParent, (, ), ;, if, (, s, ==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", )]
[), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, )]
[), {, throw, new, IllegalArgumentException, (, "Var is not local", ), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null]
[;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, ), ;]
[), ;, }, boolean, isBleedingIntoScope, =, s, ., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, )]
[;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope]
[&&, localBleedingFunctions, ., contains, (, v, ), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if]
[!=, null, &&, localBleedingFunctions, ., contains, (, v, ), ;, while, (, s, ., getParent, (, ), !=, null, )]
[., getParent, (, ), !=, null, &&, localBleedingFunctions, ., contains, (, v, ), ;, while, (, s, ., getParent, (]
[&&, localBleedingFunctions, ., contains, (, v, ), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if]
[;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope]
[., contains, (, v, ), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope]
[), ;, while, (, s, ., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=]
[), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, )]
[!=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (]
[., getParent, (, ), !=, null, ), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s]
[), {, if, (, isBleedingIntoScope, ), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, )]
[), {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =]
[+=, localBleedingFunctionsPerScope, ., get, (, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }]
[;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, )]
[+, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size]
[., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get]
[., get, (, s, ), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {]
[), ., indexOf, (, v, ), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, .]
[), +, 1, ;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), .]
[;, isBleedingIntoScope, =, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, )]
[=, false, ;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, ), ;, }]
[;, }, else, {, num, +=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, ), ;, }, num, +=]
[+=, localBleedingFunctionsPerScope, ., get, (, s, ), ., size, (, ), ;, }, num, +=, s, ., getVarCount, (, )]
[;, }, num, +=, s, ., getVarCount, (, ), ;, s, =, s, ., getParent, (, ), ;, }, return]
[., size, (, ), ;, }, num, +=, s, ., getVarCount, (, ), ;, s, =, s, ., getParent, (]
[., get, (, s, ), ., size, (, ), ;, }, num, +=, s, ., getVarCount, (, ), ;, s]
[), ., size, (, ), ;, }, num, +=, s, ., getVarCount, (, ), ;, s, =, s, ., getParent]
[+=, s, ., getVarCount, (, ), ;, s, =, s, ., getParent, (, ), ;, }, return, num, ;, }]
[;, s, =, s, ., getParent, (, ), ;, }, return, num, ;, }, }]
[., getVarCount, (, ), ;, s, =, s, ., getParent, (, ), ;, }, return, num, ;, }, }]
[=, s, ., getParent, (, ), ;, }, return, num, ;, }, }]
[;, }, return, num, ;, }, }]
[., getParent, (, ), ;, }, return, num, ;, }, }]
[;, }, }]
