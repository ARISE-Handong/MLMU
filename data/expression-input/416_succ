[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, )]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, )]
[;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,]
[), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE]
[., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, ), ;, return, solver, ., solve, (, Integer]
[;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,, function, ,, x0, ,, x1, ), ;, }, public, static]
[;, }, public, static, double, solve, (, UnivariateFunction, function, ,, double, x0, ,, double, x1, ,, double, absoluteAccuracy, ), throws]
[., solve, (, Integer, ., MAX_VALUE, ,, function, ,, x0, ,, x1, ), ;, }, public, static, double, solve, (]
[,, function, ,, x0, ,, x1, ), ;, }, public, static, double, solve, (, UnivariateFunction, function, ,, double, x0, ,]
[., MAX_VALUE, ,, function, ,, x0, ,, x1, ), ;, }, public, static, double, solve, (, UnivariateFunction, function, ,, double]
[,, x0, ,, x1, ), ;, }, public, static, double, solve, (, UnivariateFunction, function, ,, double, x0, ,, double, x1]
[,, x1, ), ;, }, public, static, double, solve, (, UnivariateFunction, function, ,, double, x0, ,, double, x1, ,, double]
[), ;, }, public, static, double, solve, (, UnivariateFunction, function, ,, double, x0, ,, double, x1, ,, double, absoluteAccuracy, )]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy]
[;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE]
[), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (, Integer, .]
[., FUNCTION, ), ;, }, final, UnivariateSolver, solver, =, new, BrentSolver, (, absoluteAccuracy, ), ;, return, solver, ., solve, (]
[;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,, function, ,, x0, ,, x1, ), ;, }, public, static]
[), ;, return, solver, ., solve, (, Integer, ., MAX_VALUE, ,, function, ,, x0, ,, x1, ), ;, }, public]
[;, }, public, static, double, forceSide, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, BracketedUnivariateSolver, <, UnivariateFunction, >]
[., solve, (, Integer, ., MAX_VALUE, ,, function, ,, x0, ,, x1, ), ;, }, public, static, double, forceSide, (]
[,, function, ,, x0, ,, x1, ), ;, }, public, static, double, forceSide, (, final, int, maxEval, ,, final, UnivariateFunction]
[., MAX_VALUE, ,, function, ,, x0, ,, x1, ), ;, }, public, static, double, forceSide, (, final, int, maxEval, ,]
[,, x0, ,, x1, ), ;, }, public, static, double, forceSide, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,]
[,, x1, ), ;, }, public, static, double, forceSide, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, BracketedUnivariateSolver]
[), ;, }, public, static, double, forceSide, (, final, int, maxEval, ,, final, UnivariateFunction, f, ,, final, BracketedUnivariateSolver, <, UnivariateFunction]
[), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,]
[==, AllowedSolution, ., ANY_SIDE, ), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (, bracketing, .]
[), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,]
[., ANY_SIDE, ), {, return, baseRoot, ;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (]
[;, }, final, double, step, =, FastMath, ., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (]
[;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =, f, .]
[., max, (, bracketing, ., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (, baseRoot, *, bracketing, ., getRelativeAccuracy, (, )]
[,, FastMath, ., abs, (, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, .]
[., getAbsoluteAccuracy, (, ), ,, FastMath, ., abs, (, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double]
[), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =, f]
[., abs, (, baseRoot, *, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, ., max, (]
[), ), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =]
[*, bracketing, ., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -]
[), ), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =]
[., getRelativeAccuracy, (, ), ), ), ;, double, xLo, =, FastMath, ., max, (, min, ,, baseRoot, -, step, )]
[;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (, max, ,]
[., max, (, min, ,, baseRoot, -, step, ), ;, double, fLo, =, f, ., value, (, xLo, ), ;]
[,, baseRoot, -, step, ), ;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath]
[), ;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (, max]
[-, step, ), ;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min]
[), ;, double, fLo, =, f, ., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (, max]
[;, double, xHi, =, FastMath, ., min, (, max, ,, baseRoot, +, step, ), ;, double, fHi, =, f, .]
[., value, (, xLo, ), ;, double, xHi, =, FastMath, ., min, (, max, ,, baseRoot, +, step, ), ;]
[), ;, double, xHi, =, FastMath, ., min, (, max, ,, baseRoot, +, step, ), ;, double, fHi, =, f]
[;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (]
[., min, (, max, ,, baseRoot, +, step, ), ;, double, fHi, =, f, ., value, (, xHi, ), ;]
[,, baseRoot, +, step, ), ;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval]
[), ;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while]
[+, step, ), ;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2]
[), ;, double, fHi, =, f, ., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while]
[;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=]
[., value, (, xHi, ), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {]
[), ;, int, remainingEval, =, maxEval, -, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo]
[;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||]
[-, 2, ;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0]
[;, while, (, remainingEval, >, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||]
[), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi]
[>, 0, ), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0]
[), {, if, (, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi]
[), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, ), ;]
[||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f]
[), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,]
[&&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, .]
[>=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return]
[&&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, .]
[), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,]
[<=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (]
[), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,]
[), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, ), ;]
[), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, )]
[&&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,]
[<=, 0, &&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,]
[&&, fHi, >=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,]
[), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, )]
[>=, 0, ), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,]
[), ), {, return, bracketing, ., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, )]
[;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi, ), {, if]
[., solve, (, remainingEval, ,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =]
[,, f, ,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi]
[,, xLo, ,, xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false]
[,, xHi, ,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if]
[,, baseRoot, ,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo]
[,, allowedSolution, ), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi]
[), ;, }, boolean, changeLo, =, false, ;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi, ), {]
[;, boolean, changeHi, =, false, ;, if, (, fLo, <, fHi, ), {, if, (, fLo, >=, 0, ), {]
[;, if, (, fLo, <, fHi, ), {, if, (, fLo, >=, 0, ), {, changeLo, =, true, ;, }]
[), {, if, (, fLo, >=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;]
[<, fHi, ), {, if, (, fLo, >=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =]
[), {, if, (, fLo, >=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;]
[), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >]
[>=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, if, (]
[), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >]
[=, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >, fHi, ), {]
[;, }, else, {, changeHi, =, true, ;, }, }, else, if, (, fLo, >, fHi, ), {, if, (]
[=, true, ;, }, }, else, if, (, fLo, >, fHi, ), {, if, (, fLo, <=, 0, ), {]
[;, }, }, else, if, (, fLo, >, fHi, ), {, if, (, fLo, <=, 0, ), {, changeLo, =]
[), {, if, (, fLo, <=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;]
[>, fHi, ), {, if, (, fLo, <=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =]
[), {, if, (, fLo, <=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;]
[), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo, =, true]
[<=, 0, ), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo]
[), {, changeLo, =, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo, =, true]
[=, true, ;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo, =, true, ;, changeHi, =]
[;, }, else, {, changeHi, =, true, ;, }, }, else, {, changeLo, =, true, ;, changeHi, =, true, ;]
[=, true, ;, }, }, else, {, changeLo, =, true, ;, changeHi, =, true, ;, }, if, (, changeLo, )]
[;, }, }, else, {, changeLo, =, true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo]
[=, true, ;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min]
[;, changeHi, =, true, ;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,, xLo]
[=, true, ;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,, xLo, -, step]
[;, }, if, (, changeLo, ), {, xLo, =, FastMath, ., max, (, min, ,, xLo, -, step, ), ;]
[), {, xLo, =, FastMath, ., max, (, min, ,, xLo, -, step, ), ;, fLo, =, f, ., value]
[=, FastMath, ., max, (, min, ,, xLo, -, step, ), ;, fLo, =, f, ., value, (, xLo, )]
[;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi]
[., max, (, min, ,, xLo, -, step, ), ;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval]
[,, xLo, -, step, ), ;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if]
[), ;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {]
[-, step, ), ;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi]
[), ;, fLo, =, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {]
[=, f, ., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath]
[;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +]
[., value, (, xLo, ), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min]
[), ;, remainingEval, --, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi]
[;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +, step, ), ;]
[--, ;, }, if, (, changeHi, ), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +, step, )]
[), {, xHi, =, FastMath, ., min, (, max, ,, xHi, +, step, ), ;, fHi, =, f, ., value]
[=, FastMath, ., min, (, max, ,, xHi, +, step, ), ;, fHi, =, f, ., value, (, xHi, )]
[;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats]
[., min, (, max, ,, xHi, +, step, ), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval]
[,, xHi, +, step, ), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }]
[), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (]
[+, step, ), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new]
[), ;, fHi, =, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (]
[=, f, ., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING]
[;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,]
[., value, (, xHi, ), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo]
[), ;, remainingEval, --, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo]
[;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval]
[--, ;, }, }, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,]
[;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,, double, lowerBound, ,, double, upperBound]
[,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,, min, ,, max]
[., FAILED_BRACKETING, ,, xLo, ,, xHi, ,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,, min]
[,, xHi, ,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,, min, ,, max, ), ;]
[,, fLo, ,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,, min, ,, max, ), ;, }, public]
[,, fHi, ,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,, min, ,, max, ), ;, }, public, static, double]
[,, maxEval, -, remainingEval, ,, maxEval, ,, baseRoot, ,, min, ,, max, ), ;, }, public, static, double, [, ]]
[,, maxEval, ,, baseRoot, ,, min, ,, max, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function]
[-, remainingEval, ,, maxEval, ,, baseRoot, ,, min, ,, max, ), ;, }, public, static, double, [, ], bracket, (]
[,, maxEval, ,, baseRoot, ,, min, ,, max, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function]
[,, baseRoot, ,, min, ,, max, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double]
[,, min, ,, max, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,]
[,, max, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,, double, lowerBound]
[), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,, double, lowerBound, ,, double]
[;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,, double, lowerBound, ,, double, upperBound]
[,, initial, ,, lowerBound, ,, upperBound, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, [, ], bracket, (]
[,, lowerBound, ,, upperBound, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function]
[,, upperBound, ,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double]
[,, Integer, ., MAX_VALUE, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,]
[), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,, double, lowerBound, ,, double]
[., MAX_VALUE, ), ;, }, public, static, double, [, ], bracket, (, UnivariateFunction, function, ,, double, initial, ,, double, lowerBound]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, ), {, throw]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, )]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, ), {, throw]
[;, }, if, (, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;]
[), ;, }, if, (, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, )]
[., FUNCTION, ), ;, }, if, (, maximumIterations, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,, initial, ,]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,, initial, ,]
[;, }, verifySequence, (, lowerBound, ,, initial, ,, upperBound, ), ;, double, a, =, initial, ;, double, b, =, initial]
[,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,, initial, ,, upperBound, ), ;, double, a, =, initial, ;, double]
[., INVALID_MAX_ITERATIONS, ,, maximumIterations, ), ;, }, verifySequence, (, lowerBound, ,, initial, ,, upperBound, ), ;, double, a, =, initial]
[), ;, }, verifySequence, (, lowerBound, ,, initial, ,, upperBound, ), ;, double, a, =, initial, ;, double, b, =]
[;, double, a, =, initial, ;, double, b, =, initial, ;, double, fa, ;, double, fb, ;, int, numIterations, =]
[,, initial, ,, upperBound, ), ;, double, a, =, initial, ;, double, b, =, initial, ;, double, fa, ;, double]
[,, upperBound, ), ;, double, a, =, initial, ;, double, b, =, initial, ;, double, fa, ;, double, fb, ;]
[), ;, double, a, =, initial, ;, double, b, =, initial, ;, double, fa, ;, double, fb, ;, int, numIterations]
[;, double, b, =, initial, ;, double, fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {, a]
[;, double, fa, ;, double, fb, ;, int, numIterations, =, 0, ;, do, {, a, =, FastMath, ., max, (]
[;, do, {, a, =, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, .]
[=, FastMath, ., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +]
[;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (]
[., max, (, a, -, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,]
[,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function]
[-, 1.0, ,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa]
[,, lowerBound, ), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function]
[), ;, b, =, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value]
[=, FastMath, ., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (, a, )]
[;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++]
[., min, (, b, +, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;, fb]
[,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value, (, b]
[+, 1.0, ,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value]
[,, upperBound, ), ;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value, (, b]
[), ;, fa, =, function, ., value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;]
[=, function, ., value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;]
[;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb]
[., value, (, a, ), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while]
[), ;, fb, =, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *]
[=, function, ., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0]
[;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, )]
[., value, (, b, ), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&]
[), ;, ++, numIterations, ;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations]
[;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (]
[;, }, while, (, (, fa, *, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (]
[), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a]
[&&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *]
[&&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), )]
[), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, )]
[>, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <]
[*, fb, >, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (]
[>, 0.0, ), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <]
[), &&, (, numIterations, <, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, )]
[&&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *]
[), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa]
[<, maximumIterations, ), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if]
[), &&, (, (, a, >, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa]
[), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a]
[), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,]
[||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new]
[), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw]
[>, lowerBound, ), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, )]
[), ||, (, b, <, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw]
[), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,]
[), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING]
[<, upperBound, ), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats]
[), ), ), ;, if, (, fa, *, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING]
[), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,]
[>, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,]
[*, fb, >, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,]
[>, 0.0, ), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,]
[), {, throw, new, NoBracketingException, (, LocalizedFormats, ., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,]
[;, }, return, new, double, [, ], {, a, ,, b, }, ;, }, public, static, double, midpoint, (, double]
[,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;]
[., FAILED_BRACKETING, ,, a, ,, b, ,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound]
[,, b, ,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return]
[,, fa, ,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double]
[,, fb, ,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ]]
[,, numIterations, ,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ], {, a]
[,, maximumIterations, ,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ], {, a, ,, b]
[,, initial, ,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ], {, a, ,, b, }, ;]
[,, lowerBound, ,, upperBound, ), ;, }, return, new, double, [, ], {, a, ,, b, }, ;, }, public]
[,, upperBound, ), ;, }, return, new, double, [, ], {, a, ,, b, }, ;, }, public, static, double]
[), ;, }, return, new, double, [, ], {, a, ,, b, }, ;, }, public, static, double, midpoint, (]
[;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (, a, +, b, )]
[;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (, a, +, b, )]
[,, b, }, ;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (, a]
[}, ;, }, public, static, double, midpoint, (, double, a, ,, double, b, ), {, return, (, a, +, b]
[;, }, public, static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException]
[*, 0.5, ;, }, public, static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, )]
[), *, 0.5, ;, }, public, static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper]
[+, b, ), *, 0.5, ;, }, public, static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final]
[), *, 0.5, ;, }, public, static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper]
[;, }, public, static, boolean, isBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, double, fLo, =, function, ., value, (]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, double, fLo, =, function, .]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, final, double, fLo, =, function, ., value, (]
[;, }, final, double, fLo, =, function, ., value, (, lower, ), ;, final, double, fHi, =, function, ., value]
[), ;, }, final, double, fLo, =, function, ., value, (, lower, ), ;, final, double, fHi, =, function, .]
[., FUNCTION, ), ;, }, final, double, fLo, =, function, ., value, (, lower, ), ;, final, double, fHi, =]
[;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=]
[., value, (, lower, ), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (, fLo]
[), ;, final, double, fHi, =, function, ., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi]
[;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0]
[., value, (, upper, ), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=]
[), ;, return, (, fLo, >=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=]
[;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, ), {]
[||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double, start]
[), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double]
[&&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean]
[>=, 0, &&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public]
[&&, fHi, <=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean]
[), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double]
[<=, 0, ), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (]
[), ||, (, fLo, <=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double]
[;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, ), {]
[), ;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, )]
[&&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,]
[<=, 0, &&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double]
[&&, fHi, >=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,]
[), ;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, )]
[>=, 0, ), ;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double]
[), ;, }, public, static, boolean, isSequence, (, final, double, start, ,, final, double, mid, ,, final, double, end, )]
[;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (]
[&&, (, mid, <, end, ), ;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper]
[), &&, (, mid, <, end, ), ;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double]
[<, mid, ), &&, (, mid, <, end, ), ;, }, public, static, void, verifyInterval, (, final, double, lower, ,]
[), &&, (, mid, <, end, ), ;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double]
[;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if, (]
[), ;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if]
[<, end, ), ;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException]
[), ;, }, public, static, void, verifyInterval, (, final, double, lower, ,, final, double, upper, ), throws, NumberIsTooLargeException, {, if]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., ENDPOINTS_NOT_AN_INTERVAL, ,, lower, ,, upper, ,, false, ), ;, }, }, public]
[>=, upper, ), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., ENDPOINTS_NOT_AN_INTERVAL, ,, lower, ,, upper, ,, false, ), ;, }]
[), {, throw, new, NumberIsTooLargeException, (, LocalizedFormats, ., ENDPOINTS_NOT_AN_INTERVAL, ,, lower, ,, upper, ,, false, ), ;, }, }, public]
[;, }, }, public, static, void, verifySequence, (, final, double, lower, ,, final, double, initial, ,, final, double, upper, )]
[,, lower, ,, upper, ,, false, ), ;, }, }, public, static, void, verifySequence, (, final, double, lower, ,, final]
[., ENDPOINTS_NOT_AN_INTERVAL, ,, lower, ,, upper, ,, false, ), ;, }, }, public, static, void, verifySequence, (, final, double, lower]
[,, upper, ,, false, ), ;, }, }, public, static, void, verifySequence, (, final, double, lower, ,, final, double, initial]
[,, false, ), ;, }, }, public, static, void, verifySequence, (, final, double, lower, ,, final, double, initial, ,, final]
[), ;, }, }, public, static, void, verifySequence, (, final, double, lower, ,, final, double, initial, ,, final, double, upper]
[;, verifyInterval, (, initial, ,, upper, ), ;, }, public, static, void, verifyBracketing, (, UnivariateFunction, function, ,, final, double, lower]
[,, initial, ), ;, verifyInterval, (, initial, ,, upper, ), ;, }, public, static, void, verifyBracketing, (, UnivariateFunction, function, ,]
[), ;, verifyInterval, (, initial, ,, upper, ), ;, }, public, static, void, verifyBracketing, (, UnivariateFunction, function, ,, final, double]
[;, }, public, static, void, verifyBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws, NullArgumentException]
[,, upper, ), ;, }, public, static, void, verifyBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper]
[), ;, }, public, static, void, verifyBracketing, (, UnivariateFunction, function, ,, final, double, lower, ,, final, double, upper, ), throws]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, )]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if]
[;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (, !, isBracketing, (, function, ,, lower, ,, upper, )]
[), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (, !, isBracketing, (, function, ,, lower, ,, upper]
[., FUNCTION, ), ;, }, verifyInterval, (, lower, ,, upper, ), ;, if, (, !, isBracketing, (, function, ,, lower]
[;, if, (, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,]
[,, upper, ), ;, if, (, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException]
[), ;, if, (, !, isBracketing, (, function, ,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (, lower]
[), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower, ), ,, function, ., value]
[), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower, ), ,, function, ., value]
[,, lower, ,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower]
[,, upper, ), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower, ), ,]
[), ), {, throw, new, NoBracketingException, (, lower, ,, upper, ,, function, ., value, (, lower, ), ,, function, .]
[;, }, }, }]
[,, upper, ,, function, ., value, (, lower, ), ,, function, ., value, (, upper, ), ), ;, }, }]
[,, function, ., value, (, lower, ), ,, function, ., value, (, upper, ), ), ;, }, }, }]
[,, function, ., value, (, upper, ), ), ;, }, }, }]
[., value, (, lower, ), ,, function, ., value, (, upper, ), ), ;, }, }, }]
[), ,, function, ., value, (, upper, ), ), ;, }, }, }]
[), ;, }, }, }]
[., value, (, upper, ), ), ;, }, }, }]
[), ), ;, }, }, }]
