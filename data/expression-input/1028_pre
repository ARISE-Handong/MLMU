[implements, ReadableDuration, {, protected, AbstractDuration, (, ), {, super, (, ), ;, }, public, Duration, toDuration, (, ), {, return]
[protected, AbstractDuration, (, ), {, super, (, ), ;, }, public, Duration, toDuration, (, ), {, return, new, Duration, (]
[(, ), {, return, new, Duration, (, getMillis, (, ), ), ;, }, public, Period, toPeriod, (, ), {, return]
[return, new, Duration, (, getMillis, (, ), ), ;, }, public, Period, toPeriod, (, ), {, return, new, Period, (]
[new, Period, (, getMillis, (, ), ), ;, }, public, int, compareTo, (, ReadableDuration, other, ), {, long, thisMillis, =]
[new, Period, (, getMillis, (, ), ), ;, }, public, int, compareTo, (, ReadableDuration, other, ), {, long, thisMillis, =]
[public, int, compareTo, (, ReadableDuration, other, ), {, long, thisMillis, =, this, ., getMillis, (, ), ;, long, otherMillis, =]
[public, int, compareTo, (, ReadableDuration, other, ), {, long, thisMillis, =, this, ., getMillis, (, ), ;, long, otherMillis, =]
[long, thisMillis, =, this, ., getMillis, (, ), ;, long, otherMillis, =, other, ., getMillis, (, ), ;, if, (]
[long, thisMillis, =, this, ., getMillis, (, ), ;, long, otherMillis, =, other, ., getMillis, (, ), ;, if, (]
[=, this, ., getMillis, (, ), ;, long, otherMillis, =, other, ., getMillis, (, ), ;, if, (, thisMillis, <]
[(, ), ;, long, otherMillis, =, other, ., getMillis, (, ), ;, if, (, thisMillis, <, otherMillis, ), {, return]
[), ;, long, otherMillis, =, other, ., getMillis, (, ), ;, if, (, thisMillis, <, otherMillis, ), {, return, -]
[other, ., getMillis, (, ), ;, if, (, thisMillis, <, otherMillis, ), {, return, -, 1, ;, }, if, (]
[other, ., getMillis, (, ), ;, if, (, thisMillis, <, otherMillis, ), {, return, -, 1, ;, }, if, (]
[getMillis, (, ), ;, if, (, thisMillis, <, otherMillis, ), {, return, -, 1, ;, }, if, (, thisMillis, >]
[if, (, thisMillis, <, otherMillis, ), {, return, -, 1, ;, }, if, (, thisMillis, >, otherMillis, ), {, return]
[otherMillis, ), {, return, -, 1, ;, }, if, (, thisMillis, >, otherMillis, ), {, return, 1, ;, }, return]
[), {, return, 1, ;, }, return, 0, ;, }, public, boolean, isEqual, (, ReadableDuration, duration, ), {, if, (]
[), {, return, 1, ;, }, return, 0, ;, }, public, boolean, isEqual, (, ReadableDuration, duration, ), {, if, (]
[return, 1, ;, }, return, 0, ;, }, public, boolean, isEqual, (, ReadableDuration, duration, ), {, if, (, duration, ==]
[}, return, 0, ;, }, public, boolean, isEqual, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {]
[0, ;, }, public, boolean, isEqual, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =]
[0, ;, }, public, boolean, isEqual, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =]
[(, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return]
[(, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return]
[duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return, compareTo, (]
[if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return, compareTo, (, duration, ), ==]
[}, return, compareTo, (, duration, ), ==, 0, ;, }, public, boolean, isLongerThan, (, ReadableDuration, duration, ), {, if, (]
[}, return, compareTo, (, duration, ), ==, 0, ;, }, public, boolean, isLongerThan, (, ReadableDuration, duration, ), {, if, (]
[compareTo, (, duration, ), ==, 0, ;, }, public, boolean, isLongerThan, (, ReadableDuration, duration, ), {, if, (, duration, ==]
[), ==, 0, ;, }, public, boolean, isLongerThan, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {]
[0, ;, }, public, boolean, isLongerThan, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =]
[0, ;, }, public, boolean, isLongerThan, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =]
[(, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return]
[(, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return]
[duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return, compareTo, (]
[if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return, compareTo, (, duration, ), >]
[}, return, compareTo, (, duration, ), >, 0, ;, }, public, boolean, isShorterThan, (, ReadableDuration, duration, ), {, if, (]
[}, return, compareTo, (, duration, ), >, 0, ;, }, public, boolean, isShorterThan, (, ReadableDuration, duration, ), {, if, (]
[compareTo, (, duration, ), >, 0, ;, }, public, boolean, isShorterThan, (, ReadableDuration, duration, ), {, if, (, duration, ==]
[), >, 0, ;, }, public, boolean, isShorterThan, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {]
[0, ;, }, public, boolean, isShorterThan, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =]
[0, ;, }, public, boolean, isShorterThan, (, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =]
[(, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return]
[(, ReadableDuration, duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return]
[duration, ), {, if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return, compareTo, (]
[if, (, duration, ==, null, ), {, duration, =, Duration, ., ZERO, ;, }, return, compareTo, (, duration, ), <]
[}, return, compareTo, (, duration, ), <, 0, ;, }, public, boolean, equals, (, Object, duration, ), {, if, (]
[}, return, compareTo, (, duration, ), <, 0, ;, }, public, boolean, equals, (, Object, duration, ), {, if, (]
[compareTo, (, duration, ), <, 0, ;, }, public, boolean, equals, (, Object, duration, ), {, if, (, this, ==]
[<, 0, ;, }, public, boolean, equals, (, Object, duration, ), {, if, (, this, ==, duration, ), {, return]
[boolean, equals, (, Object, duration, ), {, if, (, this, ==, duration, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, duration, ), {, if, (, this, ==, duration, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, duration, ), {, if, (, this, ==, duration, ), {, return, true, ;, }, if, (]
[duration, ), {, if, (, this, ==, duration, ), {, return, true, ;, }, if, (, duration, instanceof, ReadableDuration, ==]
[(, this, ==, duration, ), {, return, true, ;, }, if, (, duration, instanceof, ReadableDuration, ==, false, ), {, return]
[return, true, ;, }, if, (, duration, instanceof, ReadableDuration, ==, false, ), {, return, false, ;, }, ReadableDuration, other, =]
[}, if, (, duration, instanceof, ReadableDuration, ==, false, ), {, return, false, ;, }, ReadableDuration, other, =, (, ReadableDuration, )]
[duration, instanceof, ReadableDuration, ==, false, ), {, return, false, ;, }, ReadableDuration, other, =, (, ReadableDuration, ), duration, ;, return]
[instanceof, ReadableDuration, ==, false, ), {, return, false, ;, }, ReadableDuration, other, =, (, ReadableDuration, ), duration, ;, return, (]
[instanceof, ReadableDuration, ==, false, ), {, return, false, ;, }, ReadableDuration, other, =, (, ReadableDuration, ), duration, ;, return, (]
[), {, return, false, ;, }, ReadableDuration, other, =, (, ReadableDuration, ), duration, ;, return, (, getMillis, (, ), ==]
[), {, return, false, ;, }, ReadableDuration, other, =, (, ReadableDuration, ), duration, ;, return, (, getMillis, (, ), ==]
[(, ), ==, other, ., getMillis, (, ), ), ;, }, public, int, hashCode, (, ), {, long, len, =]
[getMillis, (, ), ), ;, }, public, int, hashCode, (, ), {, long, len, =, getMillis, (, ), ;, return]
[), ;, }, public, int, hashCode, (, ), {, long, len, =, getMillis, (, ), ;, return, (, int, )]
[;, }, public, int, hashCode, (, ), {, long, len, =, getMillis, (, ), ;, return, (, int, ), (]
[;, }, public, int, hashCode, (, ), {, long, len, =, getMillis, (, ), ;, return, (, int, ), (]
[public, int, hashCode, (, ), {, long, len, =, getMillis, (, ), ;, return, (, int, ), (, len, ^]
[int, hashCode, (, ), {, long, len, =, getMillis, (, ), ;, return, (, int, ), (, len, ^, (]
[int, hashCode, (, ), {, long, len, =, getMillis, (, ), ;, return, (, int, ), (, len, ^, (]
[{, long, len, =, getMillis, (, ), ;, return, (, int, ), (, len, ^, (, len, >, >, >]
[len, >, >, >, 32, ), ), ;, }, @, ToString, public, String, toString, (, ), {, long, millis, =]
[;, }, @, ToString, public, String, toString, (, ), {, long, millis, =, getMillis, (, ), ;, StringBuffer, buf, =]
[String, toString, (, ), {, long, millis, =, getMillis, (, ), ;, StringBuffer, buf, =, new, StringBuffer, (, ), ;]
[String, toString, (, ), {, long, millis, =, getMillis, (, ), ;, StringBuffer, buf, =, new, StringBuffer, (, ), ;]
[{, long, millis, =, getMillis, (, ), ;, StringBuffer, buf, =, new, StringBuffer, (, ), ;, buf, ., append, (]
[), ;, StringBuffer, buf, =, new, StringBuffer, (, ), ;, buf, ., append, (, "PT", ), ;, boolean, negative, =]
[;, StringBuffer, buf, =, new, StringBuffer, (, ), ;, buf, ., append, (, "PT", ), ;, boolean, negative, =, (]
[;, StringBuffer, buf, =, new, StringBuffer, (, ), ;, buf, ., append, (, "PT", ), ;, boolean, negative, =, (]
[buf, =, new, StringBuffer, (, ), ;, buf, ., append, (, "PT", ), ;, boolean, negative, =, (, millis, <]
[StringBuffer, (, ), ;, buf, ., append, (, "PT", ), ;, boolean, negative, =, (, millis, <, 0, ), ;]
[StringBuffer, (, ), ;, buf, ., append, (, "PT", ), ;, boolean, negative, =, (, millis, <, 0, ), ;]
[buf, ., append, (, "PT", ), ;, boolean, negative, =, (, millis, <, 0, ), ;, FormatUtils, ., appendUnpaddedInteger, (]
[append, (, "PT", ), ;, boolean, negative, =, (, millis, <, 0, ), ;, FormatUtils, ., appendUnpaddedInteger, (, buf, ,]
[boolean, negative, =, (, millis, <, 0, ), ;, FormatUtils, ., appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (]
[boolean, negative, =, (, millis, <, 0, ), ;, FormatUtils, ., appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (]
[boolean, negative, =, (, millis, <, 0, ), ;, FormatUtils, ., appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (]
[0, ), ;, FormatUtils, ., appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (, buf, ., length, (, ), <]
[), ;, FormatUtils, ., appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (, buf, ., length, (, ), <, (]
[), ;, FormatUtils, ., appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (, buf, ., length, (, ), <, (]
[FormatUtils, ., appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (, buf, ., length, (, ), <, (, negative, ?]
[appendUnpaddedInteger, (, buf, ,, millis, ), ;, while, (, buf, ., length, (, ), <, (, negative, ?, 7, :]
[millis, ), ;, while, (, buf, ., length, (, ), <, (, negative, ?, 7, :, 6, ), ), {]
[millis, ), ;, while, (, buf, ., length, (, ), <, (, negative, ?, 7, :, 6, ), ), {]
[(, buf, ., length, (, ), <, (, negative, ?, 7, :, 6, ), ), {, buf, ., insert, (]
[(, buf, ., length, (, ), <, (, negative, ?, 7, :, 6, ), ), {, buf, ., insert, (]
[., length, (, ), <, (, negative, ?, 7, :, 6, ), ), {, buf, ., insert, (, negative, ?]
[(, ), <, (, negative, ?, 7, :, 6, ), ), {, buf, ., insert, (, negative, ?, 3, :]
[<, (, negative, ?, 7, :, 6, ), ), {, buf, ., insert, (, negative, ?, 3, :, 2, ,]
[6, ), ), {, buf, ., insert, (, negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (]
[6, ), ), {, buf, ., insert, (, negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (]
[6, ), ), {, buf, ., insert, (, negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (]
[), ), {, buf, ., insert, (, negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (, (]
[), ), {, buf, ., insert, (, negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (, (]
[{, buf, ., insert, (, negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (, (, millis, /]
[insert, (, negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (, (, millis, /, 1000, ), *]
[negative, ?, 3, :, 2, ,, "0", ), ;, }, if, (, (, millis, /, 1000, ), *, 1000, ==]
[:, 2, ,, "0", ), ;, }, if, (, (, millis, /, 1000, ), *, 1000, ==, millis, ), {]
[:, 2, ,, "0", ), ;, }, if, (, (, millis, /, 1000, ), *, 1000, ==, millis, ), {]
[), ;, }, if, (, (, millis, /, 1000, ), *, 1000, ==, millis, ), {, buf, ., setLength, (]
[), ;, }, if, (, (, millis, /, 1000, ), *, 1000, ==, millis, ), {, buf, ., setLength, (]
[), ;, }, if, (, (, millis, /, 1000, ), *, 1000, ==, millis, ), {, buf, ., setLength, (]
[millis, /, 1000, ), *, 1000, ==, millis, ), {, buf, ., setLength, (, buf, ., length, (, ), -]
[==, millis, ), {, buf, ., setLength, (, buf, ., length, (, ), -, 3, ), ;, }, else, {]
[==, millis, ), {, buf, ., setLength, (, buf, ., length, (, ), -, 3, ), ;, }, else, {]
[buf, ., setLength, (, buf, ., length, (, ), -, 3, ), ;, }, else, {, buf, ., insert, (]
[buf, ., setLength, (, buf, ., length, (, ), -, 3, ), ;, }, else, {, buf, ., insert, (]
[buf, ., setLength, (, buf, ., length, (, ), -, 3, ), ;, }, else, {, buf, ., insert, (]
[length, (, ), -, 3, ), ;, }, else, {, buf, ., insert, (, buf, ., length, (, ), -]
[), -, 3, ), ;, }, else, {, buf, ., insert, (, buf, ., length, (, ), -, 3, ,]
[;, }, else, {, buf, ., insert, (, buf, ., length, (, ), -, 3, ,, ".", ), ;, }]
[;, }, else, {, buf, ., insert, (, buf, ., length, (, ), -, 3, ,, ".", ), ;, }]
[buf, ., insert, (, buf, ., length, (, ), -, 3, ,, ".", ), ;, }, buf, ., append, (]
[buf, ., length, (, ), -, 3, ,, ".", ), ;, }, buf, ., append, (, 'S', ), ;, return]
[buf, ., length, (, ), -, 3, ,, ".", ), ;, }, buf, ., append, (, 'S', ), ;, return]
