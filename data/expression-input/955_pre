[google, ., javascript, ., rhino, ., Node, ;, class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =]
[google, ., javascript, ., rhino, ., Node, ;, class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =]
[rhino, ., Node, ;, class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (]
[Node, ;, class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (, "JSC_MISSING_LINE_INFO", ,]
[Node, ;, class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (, "JSC_MISSING_LINE_INFO", ,]
[Node, ;, class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (, "JSC_MISSING_LINE_INFO", ,]
[Node, ;, class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (, "JSC_MISSING_LINE_INFO", ,]
[class, LineNumberCheck, implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (, "JSC_MISSING_LINE_INFO", ,, "No source location information associated with {0}.\n", +]
[implements, Callback, ,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (, "JSC_MISSING_LINE_INFO", ,, "No source location information associated with {0}.\n", +, "Most likely a Node has been created with settings the source file ", +]
[,, CompilerPass, {, static, final, DiagnosticType, MISSING_LINE_INFO, =, DiagnosticType, ., error, (, "JSC_MISSING_LINE_INFO", ,, "No source location information associated with {0}.\n", +, "Most likely a Node has been created with settings the source file ", +, "and line/column location.  Usually this is done using ", +]
["JSC_MISSING_LINE_INFO", ,, "No source location information associated with {0}.\n", +, "Most likely a Node has been created with settings the source file ", +, "and line/column location.  Usually this is done using ", +, "Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =]
["Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, ), {]
["Node.copyInformationFrom and supplying a Node from the source AST.", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, ), {]
[final, AbstractCompiler, compiler, ;, private, boolean, requiresLineNumbers, =, false, ;, LineNumberCheck, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[(, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, public, void, setCheckSubTree, (, Node, root, ), {]
[compiler, ), {, this, ., compiler, =, compiler, ;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =]
[{, this, ., compiler, =, compiler, ;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;]
[{, this, ., compiler, =, compiler, ;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;]
[=, compiler, ;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;, NodeTraversal, ., traverse, (]
[;, }, public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,]
[public, void, setCheckSubTree, (, Node, root, ), {, requiresLineNumbers, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[,, root, ,, this, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[,, this, ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =, false, ;]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =, false, ;]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =, false, ;, NodeTraversal, ., traverse, (]
[void, process, (, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, Node, externs, ,, Node, root, ), {, requiresLineNumbers, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {, requiresLineNumbers, =]
[,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {, requiresLineNumbers, =, true, ;, }, return]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[(, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {]
[t, ,, Node, n, ,, Node, parent, ), {, if, (, n, ., isScript, (, ), ), {, requiresLineNumbers, =]
[parent, ), {, if, (, n, ., isScript, (, ), ), {, requiresLineNumbers, =, false, ;, }, else, if, (]
[n, ., isScript, (, ), ), {, requiresLineNumbers, =, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (]
[n, ., isScript, (, ), ), {, requiresLineNumbers, =, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (]
[n, ., isScript, (, ), ), {, requiresLineNumbers, =, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (]
[{, requiresLineNumbers, =, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==]
[requiresLineNumbers, =, false, ;, }, else, if, (, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==, -]
[;, }, else, if, (, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==, -, 1, ), {]
[;, }, else, if, (, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==, -, 1, ), {]
[(, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (]
[(, requiresLineNumbers, ), {, if, (, n, ., getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (]
[if, (, n, ., getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (, t, ., makeError, (]
[n, ., getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (, t, ., makeError, (, n, ,]
[getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO, ,]
[getLineno, (, ), ==, -, 1, ), {, compiler, ., report, (, t, ., makeError, (, n, ,, MISSING_LINE_INFO, ,]
