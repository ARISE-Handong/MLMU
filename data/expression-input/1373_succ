[), ;, }, public, PolygonsSet, (, final, Collection, <, SubHyperplane, <, Euclidean2D, >, >, boundary, ), {, super, (, boundary]
[), ;, }, public, PolygonsSet, (, final, double, xMin, ,, final, double, xMax, ,, final, double, yMin, ,, final, double]
[), ;, }, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, super, (, verticesToTree, (]
[,, xMax, ,, yMin, ,, yMax, ), ), ;, }, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ...]
[,, yMin, ,, yMax, ), ), ;, }, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, )]
[,, yMax, ), ), ;, }, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, super]
[), ), ;, }, public, PolygonsSet, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {, super, (, verticesToTree]
[), ;, }, private, static, Line, [, ], boxBoundary, (, final, double, xMin, ,, final, double, xMax, ,, final, double]
[,, vertices, ), ), ;, }, private, static, Line, [, ], boxBoundary, (, final, double, xMin, ,, final, double, xMax]
[), ), ;, }, private, static, Line, [, ], boxBoundary, (, final, double, xMin, ,, final, double, xMax, ,, final]
[;, final, Vector2D, minMax, =, new, Vector2D, (, xMin, ,, yMax, ), ;, final, Vector2D, maxMin, =, new, Vector2D, (]
[,, yMin, ), ;, final, Vector2D, minMax, =, new, Vector2D, (, xMin, ,, yMax, ), ;, final, Vector2D, maxMin, =]
[), ;, final, Vector2D, minMax, =, new, Vector2D, (, xMin, ,, yMax, ), ;, final, Vector2D, maxMin, =, new, Vector2D]
[;, final, Vector2D, maxMin, =, new, Vector2D, (, xMax, ,, yMin, ), ;, final, Vector2D, maxMax, =, new, Vector2D, (]
[,, yMax, ), ;, final, Vector2D, maxMin, =, new, Vector2D, (, xMax, ,, yMin, ), ;, final, Vector2D, maxMax, =]
[), ;, final, Vector2D, maxMin, =, new, Vector2D, (, xMax, ,, yMin, ), ;, final, Vector2D, maxMax, =, new, Vector2D]
[;, final, Vector2D, maxMax, =, new, Vector2D, (, xMax, ,, yMax, ), ;, return, new, Line, [, ], {, new]
[,, yMin, ), ;, final, Vector2D, maxMax, =, new, Vector2D, (, xMax, ,, yMax, ), ;, return, new, Line, []
[), ;, final, Vector2D, maxMax, =, new, Vector2D, (, xMax, ,, yMax, ), ;, return, new, Line, [, ], {]
[;, return, new, Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin, ,]
[,, yMax, ), ;, return, new, Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,, new, Line]
[), ;, return, new, Line, [, ], {, new, Line, (, minMin, ,, maxMin, ), ,, new, Line, (, maxMin]
[;, }, private, static, BSPTree, <, Euclidean2D, >, verticesToTree, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {]
[;, }, private, static, BSPTree, <, Euclidean2D, >, verticesToTree, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, ), {]
[,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (]
[,, maxMin, ), ,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,]
[), ,, new, Line, (, maxMin, ,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line]
[,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (, minMax, ,, minMin, ), }, ;, }, private]
[,, maxMax, ), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (, minMax, ,, minMin, ), }]
[), ,, new, Line, (, maxMax, ,, minMax, ), ,, new, Line, (, minMax, ,, minMin, ), }, ;, }]
[,, new, Line, (, minMax, ,, minMin, ), }, ;, }, private, static, BSPTree, <, Euclidean2D, >, verticesToTree, (, final]
[,, minMax, ), ,, new, Line, (, minMax, ,, minMin, ), }, ;, }, private, static, BSPTree, <, Euclidean2D, >]
[), ,, new, Line, (, minMax, ,, minMin, ), }, ;, }, private, static, BSPTree, <, Euclidean2D, >, verticesToTree, (]
[}, ;, }, private, static, BSPTree, <, Euclidean2D, >, verticesToTree, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices, )]
[,, minMin, ), }, ;, }, private, static, BSPTree, <, Euclidean2D, >, verticesToTree, (, final, double, hyperplaneThickness, ,, final, Vector2D]
[), }, ;, }, private, static, BSPTree, <, Euclidean2D, >, verticesToTree, (, final, double, hyperplaneThickness, ,, final, Vector2D, ..., vertices]
[;, if, (, n, ==, 0, ), {, return, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE, ), ;]
[., length, ;, if, (, n, ==, 0, ), {, return, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE]
[), {, return, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE, ), ;, }, final, Vertex, [, ], vArray]
[==, 0, ), {, return, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE, ), ;, }, final, Vertex, []
[), {, return, new, BSPTree, <, Euclidean2D, >, (, Boolean, ., TRUE, ), ;, }, final, Vertex, [, ], vArray]
[;, }, final, Vertex, [, ], vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =, 0]
[), ;, }, final, Vertex, [, ], vArray, =, new, Vertex, [, n, ], ;, for, (, int, i, =]
[., TRUE, ), ;, }, final, Vertex, [, ], vArray, =, new, Vertex, [, n, ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, vArray, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, vArray, [, i]
[;, i, <, n, ;, ++, i, ), {, vArray, [, i, ], =, new, Vertex, (, vertices, [, i]
[;, ++, i, ), {, vArray, [, i, ], =, new, Vertex, (, vertices, [, i, ], ), ;, }]
[<, n, ;, ++, i, ), {, vArray, [, i, ], =, new, Vertex, (, vertices, [, i, ], )]
[;, ++, i, ), {, vArray, [, i, ], =, new, Vertex, (, vertices, [, i, ], ), ;, }]
[), {, vArray, [, i, ], =, new, Vertex, (, vertices, [, i, ], ), ;, }, List, <, Edge]
[), {, vArray, [, i, ], =, new, Vertex, (, vertices, [, i, ], ), ;, }, List, <, Edge]
[=, new, Vertex, (, vertices, [, i, ], ), ;, }, List, <, Edge, >, edges, =, new, ArrayList, <]
[[, i, ], =, new, Vertex, (, vertices, [, i, ], ), ;, }, List, <, Edge, >, edges, =]
[], =, new, Vertex, (, vertices, [, i, ], ), ;, }, List, <, Edge, >, edges, =, new, ArrayList]
[;, }, List, <, Edge, >, edges, =, new, ArrayList, <, Edge, >, (, n, ), ;, for, (, int]
[), ;, }, List, <, Edge, >, edges, =, new, ArrayList, <, Edge, >, (, n, ), ;, for, (]
[[, i, ], ), ;, }, List, <, Edge, >, edges, =, new, ArrayList, <, Edge, >, (, n, )]
[], ), ;, }, List, <, Edge, >, edges, =, new, ArrayList, <, Edge, >, (, n, ), ;, for]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, Vertex, start, =]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, ++, i, ), {, final, Vertex, start]
[;, i, <, n, ;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex]
[;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, []
[<, n, ;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =]
[;, ++, i, ), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, []
[), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, [, (, i, +]
[), {, final, Vertex, start, =, vArray, [, i, ], ;, final, Vertex, end, =, vArray, [, (, i, +]
[;, final, Vertex, end, =, vArray, [, (, i, +, 1, ), %, n, ], ;, Line, line, =, start]
[[, i, ], ;, final, Vertex, end, =, vArray, [, (, i, +, 1, ), %, n, ], ;, Line]
[], ;, final, Vertex, end, =, vArray, [, (, i, +, 1, ), %, n, ], ;, Line, line, =]
[;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {, line, =]
[[, (, i, +, 1, ), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;]
[], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {, line]
[%, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, )]
[), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null]
[+, 1, ), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line]
[), %, n, ], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null]
[], ;, Line, line, =, start, ., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {, line]
[;, if, (, line, ==, null, ), {, line, =, new, Line, (, start, ., getLocation, (, ), ,, end]
[., sharedLineWith, (, end, ), ;, if, (, line, ==, null, ), {, line, =, new, Line, (, start, .]
[), ;, if, (, line, ==, null, ), {, line, =, new, Line, (, start, ., getLocation, (, ), ,]
[), {, line, =, new, Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;]
[==, null, ), {, line, =, new, Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, )]
[), {, line, =, new, Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;]
[=, new, Line, (, start, ., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;, }, edges, .]
[;, }, edges, ., add, (, new, Edge, (, start, ,, end, ,, line, ), ), ;, for, (, final]
[,, end, ., getLocation, (, ), ), ;, }, edges, ., add, (, new, Edge, (, start, ,, end, ,]
[., getLocation, (, ), ,, end, ., getLocation, (, ), ), ;, }, edges, ., add, (, new, Edge, (]
[), ;, }, edges, ., add, (, new, Edge, (, start, ,, end, ,, line, ), ), ;, for, (]
[., getLocation, (, ), ), ;, }, edges, ., add, (, new, Edge, (, start, ,, end, ,, line, )]
[;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&]
[., add, (, new, Edge, (, start, ,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :]
[), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=, end]
[,, end, ,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=]
[,, line, ), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&]
[), ), ;, for, (, final, Vertex, vertex, :, vArray, ), {, if, (, vertex, !=, start, &&, vertex, !=]
[), {, if, (, vertex, !=, start, &&, vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (]
[), {, vertex, ., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new]
[&&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {]
[&&, vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), )]
[!=, start, &&, vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, )]
[&&, vertex, !=, end, &&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), )]
[&&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {]
[!=, end, &&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness]
[&&, FastMath, ., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {]
[), {, vertex, ., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new]
[<=, hyperplaneThickness, ), {, vertex, ., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree]
[., abs, (, line, ., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {, vertex, .]
[), <=, hyperplaneThickness, ), {, vertex, ., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D, >]
[., getOffset, (, vertex, ., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {, vertex, ., bindWith, (, line, )]
[), ), <=, hyperplaneThickness, ), {, vertex, ., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D]
[., getLocation, (, ), ), ), <=, hyperplaneThickness, ), {, vertex, ., bindWith, (, line, ), ;, }, }, }]
[), {, vertex, ., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new]
[;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new, BSPTree, <, Euclidean2D, >, (, ), ;, insertEdges]
[., bindWith, (, line, ), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new, BSPTree, <, Euclidean2D]
[), ;, }, }, }, final, BSPTree, <, Euclidean2D, >, tree, =, new, BSPTree, <, Euclidean2D, >, (, ), ;]
[;, insertEdges, (, hyperplaneThickness, ,, tree, ,, edges, ), ;, return, tree, ;, }, private, static, void, insertEdges, (, final]
[;, return, tree, ;, }, private, static, void, insertEdges, (, final, double, hyperplaneThickness, ,, final, BSPTree, <, Euclidean2D, >, node]
[,, tree, ,, edges, ), ;, return, tree, ;, }, private, static, void, insertEdges, (, final, double, hyperplaneThickness, ,, final]
[,, edges, ), ;, return, tree, ;, }, private, static, void, insertEdges, (, final, double, hyperplaneThickness, ,, final, BSPTree, <]
[), ;, return, tree, ;, }, private, static, void, insertEdges, (, final, double, hyperplaneThickness, ,, final, BSPTree, <, Euclidean2D, >]
[;, }, private, static, void, insertEdges, (, final, double, hyperplaneThickness, ,, final, BSPTree, <, Euclidean2D, >, node, ,, final, List]
[;, Edge, inserted, =, null, ;, while, (, inserted, ==, null, &&, index, <, edges, ., size, (, ), )]
[;, while, (, inserted, ==, null, &&, index, <, edges, ., size, (, ), ), {, inserted, =, edges, .]
[), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==]
[&&, index, <, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++, ), ;]
[==, null, &&, index, <, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++]
[&&, index, <, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++, ), ;]
[), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==]
[<, edges, ., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (]
[), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==]
[., size, (, ), ), {, inserted, =, edges, ., get, (, index, ++, ), ;, if, (, inserted, .]
[=, edges, ., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {]
[;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (, node, ., insertCut, (, inserted, .]
[., get, (, index, ++, ), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (]
[), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (, node, ., insertCut, (, inserted]
[++, ), ;, if, (, inserted, ., getNode, (, ), ==, null, ), {, if, (, node, ., insertCut, (]
[), {, if, (, node, ., insertCut, (, inserted, ., getLine, (, ), ), ), {, inserted, ., setNode, (]
[==, null, ), {, if, (, node, ., insertCut, (, inserted, ., getLine, (, ), ), ), {, inserted, .]
[., getNode, (, ), ==, null, ), {, if, (, node, ., insertCut, (, inserted, ., getLine, (, ), )]
[), {, if, (, node, ., insertCut, (, inserted, ., getLine, (, ), ), ), {, inserted, ., setNode, (]
[), {, inserted, ., setNode, (, node, ), ;, }, else, {, inserted, =, null, ;, }, }, else, {]
[., insertCut, (, inserted, ., getLine, (, ), ), ), {, inserted, ., setNode, (, node, ), ;, }, else]
[), ), {, inserted, ., setNode, (, node, ), ;, }, else, {, inserted, =, null, ;, }, }, else]
[., getLine, (, ), ), ), {, inserted, ., setNode, (, node, ), ;, }, else, {, inserted, =, null]
[;, }, else, {, inserted, =, null, ;, }, }, else, {, inserted, =, null, ;, }, }, if, (]
[., setNode, (, node, ), ;, }, else, {, inserted, =, null, ;, }, }, else, {, inserted, =, null]
[), ;, }, else, {, inserted, =, null, ;, }, }, else, {, inserted, =, null, ;, }, }, if]
[=, null, ;, }, }, else, {, inserted, =, null, ;, }, }, if, (, inserted, ==, null, ), {]
[;, }, }, else, {, inserted, =, null, ;, }, }, if, (, inserted, ==, null, ), {, final, BSPTree]
[=, null, ;, }, }, if, (, inserted, ==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =, node]
[;, }, }, if, (, inserted, ==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent]
[), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==, null]
[==, null, ), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent]
[), {, final, BSPTree, <, Euclidean2D, >, parent, =, node, ., getParent, (, ), ;, if, (, parent, ==, null]
[;, if, (, parent, ==, null, ||, node, ==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (]
[., getParent, (, ), ;, if, (, parent, ==, null, ||, node, ==, parent, ., getMinus, (, ), ), {]
[), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {, node, ., setAttribute, (, Boolean, .]
[||, node, ==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }]
[==, null, ||, node, ==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, )]
[||, node, ==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }]
[), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {, node, ., setAttribute, (, Boolean, .]
[==, parent, ., getMinus, (, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {]
[), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {, node, ., setAttribute, (, Boolean, .]
[., getMinus, (, ), ), {, node, ., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {, node, .]
[;, }, else, {, node, ., setAttribute, (, Boolean, ., FALSE, ), ;, }, return, ;, }, final, List, <]
[., setAttribute, (, Boolean, ., TRUE, ), ;, }, else, {, node, ., setAttribute, (, Boolean, ., FALSE, ), ;]
[), ;, }, else, {, node, ., setAttribute, (, Boolean, ., FALSE, ), ;, }, return, ;, }, final, List]
[., TRUE, ), ;, }, else, {, node, ., setAttribute, (, Boolean, ., FALSE, ), ;, }, return, ;, }]
[;, }, return, ;, }, final, List, <, Edge, >, plusList, =, new, ArrayList, <, Edge, >, (, ), ;]
[., setAttribute, (, Boolean, ., FALSE, ), ;, }, return, ;, }, final, List, <, Edge, >, plusList, =, new]
[), ;, }, return, ;, }, final, List, <, Edge, >, plusList, =, new, ArrayList, <, Edge, >, (, )]
[., FALSE, ), ;, }, return, ;, }, final, List, <, Edge, >, plusList, =, new, ArrayList, <, Edge, >]
[;, final, List, <, Edge, >, minusList, =, new, ArrayList, <, Edge, >, (, ), ;, for, (, final, Edge]
[;, for, (, final, Edge, edge, :, edges, ), {, if, (, edge, !=, inserted, ), {, final, double, startOffset]
[), {, if, (, edge, !=, inserted, ), {, final, double, startOffset, =, inserted, ., getLine, (, ), ., getOffset]
[), {, final, double, startOffset, =, inserted, ., getLine, (, ), ., getOffset, (, edge, ., getStart, (, ), .]
[!=, inserted, ), {, final, double, startOffset, =, inserted, ., getLine, (, ), ., getOffset, (, edge, ., getStart, (]
[), {, final, double, startOffset, =, inserted, ., getLine, (, ), ., getOffset, (, edge, ., getStart, (, ), .]
[;, final, double, endOffset, =, inserted, ., getLine, (, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation]
[., getOffset, (, edge, ., getStart, (, ), ., getLocation, (, ), ), ;, final, double, endOffset, =, inserted, .]
[., getLine, (, ), ., getOffset, (, edge, ., getStart, (, ), ., getLocation, (, ), ), ;, final, double]
[), ;, final, double, endOffset, =, inserted, ., getLine, (, ), ., getOffset, (, edge, ., getEnd, (, ), .]
[., getLocation, (, ), ), ;, final, double, endOffset, =, inserted, ., getLine, (, ), ., getOffset, (, edge, .]
[., getStart, (, ), ., getLocation, (, ), ), ;, final, double, endOffset, =, inserted, ., getLine, (, ), .]
[;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (]
[., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =, (, FastMath, .]
[., getLine, (, ), ., getOffset, (, edge, ., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide]
[), ;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :]
[., getLocation, (, ), ), ;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?]
[., getEnd, (, ), ., getLocation, (, ), ), ;, Side, startSide, =, (, FastMath, ., abs, (, startOffset, )]
[;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (]
[?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, )]
[), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS]
[<=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side]
[., abs, (, startOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?]
[), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :]
[), ?, Side, ., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS]
[:, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =]
[., HYPER, :, (, (, startOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side]
[;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (]
[), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :]
[?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, )]
[), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset]
[<, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs]
[), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset]
[:, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?]
[., MINUS, :, Side, ., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness]
[), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :]
[., PLUS, ), ;, Side, endSide, =, (, FastMath, ., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, .]
[;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex]
[?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, )]
[), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS]
[<=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side]
[., abs, (, endOffset, ), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?]
[), <=, hyperplaneThickness, ), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :]
[), ?, Side, ., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS]
[:, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide]
[., HYPER, :, (, (, endOffset, <, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch]
[;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex]
[), ;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final]
[?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (]
[), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if]
[<, 0, ), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS]
[), ?, Side, ., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if]
[:, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, .]
[., MINUS, :, Side, ., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==]
[), ;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final]
[., PLUS, ), ;, switch, (, startSide, ), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, )]
[), {, case, PLUS, :, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex, splitPoint, =, edge, .]
[:, if, (, endSide, ==, Side, ., MINUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, .]
[), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add]
[==, Side, ., MINUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), )]
[), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add]
[., MINUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList]
[;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, plusList, ., add, (, splitPoint, ., getIncoming, (]
[., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), )]
[), ;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, plusList, ., add, (, splitPoint, ., getIncoming]
[., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, plusList, ., add]
[;, plusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, }, else, {, plusList, ., add, (, edge]
[., add, (, splitPoint, ., getOutgoing, (, ), ), ;, plusList, ., add, (, splitPoint, ., getIncoming, (, ), )]
[), ;, plusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, }, else, {, plusList, ., add, (]
[., getOutgoing, (, ), ), ;, plusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, }, else, {]
[;, }, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case, MINUS, :, if, (, endSide]
[., add, (, splitPoint, ., getIncoming, (, ), ), ;, }, else, {, plusList, ., add, (, edge, ), ;]
[), ;, }, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case, MINUS, :, if, (]
[., getIncoming, (, ), ), ;, }, else, {, plusList, ., add, (, edge, ), ;, }, break, ;, case]
[;, }, break, ;, case, MINUS, :, if, (, endSide, ==, Side, ., PLUS, ), {, final, Vertex, splitPoint, =]
[., add, (, edge, ), ;, }, break, ;, case, MINUS, :, if, (, endSide, ==, Side, ., PLUS, )]
[), ;, }, break, ;, case, MINUS, :, if, (, endSide, ==, Side, ., PLUS, ), {, final, Vertex, splitPoint]
[:, if, (, endSide, ==, Side, ., PLUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, .]
[), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add]
[==, Side, ., PLUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), )]
[), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add]
[., PLUS, ), {, final, Vertex, splitPoint, =, edge, ., split, (, inserted, ., getLine, (, ), ), ;, minusList]
[;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, plusList, ., add, (, splitPoint, ., getOutgoing, (]
[., split, (, inserted, ., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), )]
[), ;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, plusList, ., add, (, splitPoint, ., getOutgoing]
[., getLine, (, ), ), ;, minusList, ., add, (, splitPoint, ., getIncoming, (, ), ), ;, plusList, ., add]
[;, plusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, }, else, {, minusList, ., add, (, edge]
[., add, (, splitPoint, ., getIncoming, (, ), ), ;, plusList, ., add, (, splitPoint, ., getOutgoing, (, ), )]
[), ;, plusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, }, else, {, minusList, ., add, (]
[., getIncoming, (, ), ), ;, plusList, ., add, (, splitPoint, ., getOutgoing, (, ), ), ;, }, else, {]
[;, }, else, {, minusList, ., add, (, edge, ), ;, }, break, ;, default, :, if, (, endSide, ==]
[., add, (, splitPoint, ., getOutgoing, (, ), ), ;, }, else, {, minusList, ., add, (, edge, ), ;]
[), ;, }, else, {, minusList, ., add, (, edge, ), ;, }, break, ;, default, :, if, (, endSide]
[., getOutgoing, (, ), ), ;, }, else, {, minusList, ., add, (, edge, ), ;, }, break, ;, default]
[;, }, break, ;, default, :, if, (, endSide, ==, Side, ., PLUS, ), {, plusList, ., add, (, edge]
[., add, (, edge, ), ;, }, break, ;, default, :, if, (, endSide, ==, Side, ., PLUS, ), {]
[), ;, }, break, ;, default, :, if, (, endSide, ==, Side, ., PLUS, ), {, plusList, ., add, (]
[), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {]
[==, Side, ., PLUS, ), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==, Side]
[), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {]
[., PLUS, ), {, plusList, ., add, (, edge, ), ;, }, else, if, (, endSide, ==, Side, ., MINUS]
[;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {, minusList, ., add, (, edge, ), ;, }]
[., add, (, edge, ), ;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {, minusList, ., add]
[), ;, }, else, if, (, endSide, ==, Side, ., MINUS, ), {, minusList, ., add, (, edge, ), ;]
[), {, minusList, ., add, (, edge, ), ;, }, break, ;, }, }, }, if, (, !, plusList, .]
[==, Side, ., MINUS, ), {, minusList, ., add, (, edge, ), ;, }, break, ;, }, }, }, if]
[), {, minusList, ., add, (, edge, ), ;, }, break, ;, }, }, }, if, (, !, plusList, .]
[., MINUS, ), {, minusList, ., add, (, edge, ), ;, }, break, ;, }, }, }, if, (, !]
[;, }, break, ;, }, }, }, if, (, !, plusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness]
[., add, (, edge, ), ;, }, break, ;, }, }, }, if, (, !, plusList, ., isEmpty, (, )]
[), ;, }, break, ;, }, }, }, if, (, !, plusList, ., isEmpty, (, ), ), {, insertEdges, (]
[), {, insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {, node, .]
[), {, insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {, node, .]
[., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getPlus, (, ), ,, plusList, ), ;, }]
[;, }, else, {, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (]
[,, node, ., getPlus, (, ), ,, plusList, ), ;, }, else, {, node, ., getPlus, (, ), ., setAttribute]
[,, plusList, ), ;, }, else, {, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;]
[., getPlus, (, ), ,, plusList, ), ;, }, else, {, node, ., getPlus, (, ), ., setAttribute, (, Boolean]
[), ;, }, else, {, node, ., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, }, if]
[;, }, if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (]
[., setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges]
[., getPlus, (, ), ., setAttribute, (, Boolean, ., FALSE, ), ;, }, if, (, !, minusList, ., isEmpty, (]
[), ;, }, if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus]
[., FALSE, ), ;, }, if, (, !, minusList, ., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,, node]
[), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {, node, .]
[), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {, node, .]
[., isEmpty, (, ), ), {, insertEdges, (, hyperplaneThickness, ,, node, ., getMinus, (, ), ,, minusList, ), ;, }]
[;, }, else, {, node, ., getMinus, (, ), ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, private]
[,, node, ., getMinus, (, ), ,, minusList, ), ;, }, else, {, node, ., getMinus, (, ), ., setAttribute]
[,, minusList, ), ;, }, else, {, node, ., getMinus, (, ), ., setAttribute, (, Boolean, ., TRUE, ), ;]
[., getMinus, (, ), ,, minusList, ), ;, }, else, {, node, ., getMinus, (, ), ., setAttribute, (, Boolean]
[), ;, }, else, {, node, ., getMinus, (, ), ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }]
[;, }, }, private, static, class, Vertex, {, private, final, Vector2D, location, ;, private, Edge, incoming, ;, private, Edge, outgoing]
[., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, private, static, class, Vertex, {, private, final, Vector2D, location, ;]
[., getMinus, (, ), ., setAttribute, (, Boolean, ., TRUE, ), ;, }, }, private, static, class, Vertex, {, private]
[), ;, }, }, private, static, class, Vertex, {, private, final, Vector2D, location, ;, private, Edge, incoming, ;, private, Edge]
[., TRUE, ), ;, }, }, private, static, class, Vertex, {, private, final, Vector2D, location, ;, private, Edge, incoming, ;]
[=, location, ;, this, ., incoming, =, null, ;, this, ., outgoing, =, null, ;, this, ., lines, =, new]
[., location, =, location, ;, this, ., incoming, =, null, ;, this, ., outgoing, =, null, ;, this, ., lines]
[;, this, ., incoming, =, null, ;, this, ., outgoing, =, null, ;, this, ., lines, =, new, ArrayList, <]
[=, null, ;, this, ., outgoing, =, null, ;, this, ., lines, =, new, ArrayList, <, Line, >, (, )]
[., incoming, =, null, ;, this, ., outgoing, =, null, ;, this, ., lines, =, new, ArrayList, <, Line, >]
[;, this, ., outgoing, =, null, ;, this, ., lines, =, new, ArrayList, <, Line, >, (, ), ;, }]
[=, null, ;, this, ., lines, =, new, ArrayList, <, Line, >, (, ), ;, }, public, Vector2D, getLocation, (]
[., outgoing, =, null, ;, this, ., lines, =, new, ArrayList, <, Line, >, (, ), ;, }, public, Vector2D]
[;, this, ., lines, =, new, ArrayList, <, Line, >, (, ), ;, }, public, Vector2D, getLocation, (, ), {]
[=, new, ArrayList, <, Line, >, (, ), ;, }, public, Vector2D, getLocation, (, ), {, return, location, ;, }]
[., lines, =, new, ArrayList, <, Line, >, (, ), ;, }, public, Vector2D, getLocation, (, ), {, return, location]
[;, }, public, Vector2D, getLocation, (, ), {, return, location, ;, }, public, void, bindWith, (, final, Line, line, )]
[;, }, public, void, bindWith, (, final, Line, line, ), {, lines, ., add, (, line, ), ;, }, public]
[;, }, public, Line, sharedLineWith, (, final, Vertex, vertex, ), {, for, (, final, Line, line1, :, lines, ), {]
[., add, (, line, ), ;, }, public, Line, sharedLineWith, (, final, Vertex, vertex, ), {, for, (, final, Line]
[), ;, }, public, Line, sharedLineWith, (, final, Vertex, vertex, ), {, for, (, final, Line, line1, :, lines, )]
[), {, for, (, final, Line, line2, :, vertex, ., lines, ), {, if, (, line1, ==, line2, ), {]
[), {, if, (, line1, ==, line2, ), {, return, line1, ;, }, }, }, return, null, ;, }, public]
[., lines, ), {, if, (, line1, ==, line2, ), {, return, line1, ;, }, }, }, return, null, ;]
[), {, return, line1, ;, }, }, }, return, null, ;, }, public, void, setIncoming, (, final, Edge, incoming, )]
[==, line2, ), {, return, line1, ;, }, }, }, return, null, ;, }, public, void, setIncoming, (, final, Edge]
[), {, return, line1, ;, }, }, }, return, null, ;, }, public, void, setIncoming, (, final, Edge, incoming, )]
[;, }, }, }, return, null, ;, }, public, void, setIncoming, (, final, Edge, incoming, ), {, this, ., incoming]
[;, }, public, void, setIncoming, (, final, Edge, incoming, ), {, this, ., incoming, =, incoming, ;, bindWith, (, incoming]
[=, incoming, ;, bindWith, (, incoming, ., getLine, (, ), ), ;, }, public, Edge, getIncoming, (, ), {, return]
[., incoming, =, incoming, ;, bindWith, (, incoming, ., getLine, (, ), ), ;, }, public, Edge, getIncoming, (, )]
[;, bindWith, (, incoming, ., getLine, (, ), ), ;, }, public, Edge, getIncoming, (, ), {, return, incoming, ;]
[;, }, public, Edge, getIncoming, (, ), {, return, incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing, )]
[), ;, }, public, Edge, getIncoming, (, ), {, return, incoming, ;, }, public, void, setOutgoing, (, final, Edge, outgoing]
[., getLine, (, ), ), ;, }, public, Edge, getIncoming, (, ), {, return, incoming, ;, }, public, void, setOutgoing]
[;, }, public, void, setOutgoing, (, final, Edge, outgoing, ), {, this, ., outgoing, =, outgoing, ;, bindWith, (, outgoing]
[=, outgoing, ;, bindWith, (, outgoing, ., getLine, (, ), ), ;, }, public, Edge, getOutgoing, (, ), {, return]
[., outgoing, =, outgoing, ;, bindWith, (, outgoing, ., getLine, (, ), ), ;, }, public, Edge, getOutgoing, (, )]
[;, bindWith, (, outgoing, ., getLine, (, ), ), ;, }, public, Edge, getOutgoing, (, ), {, return, outgoing, ;]
[;, }, public, Edge, getOutgoing, (, ), {, return, outgoing, ;, }, }, private, static, class, Edge, {, private, final]
[), ;, }, public, Edge, getOutgoing, (, ), {, return, outgoing, ;, }, }, private, static, class, Edge, {, private]
[., getLine, (, ), ), ;, }, public, Edge, getOutgoing, (, ), {, return, outgoing, ;, }, }, private, static]
[;, }, }, private, static, class, Edge, {, private, final, Vertex, start, ;, private, final, Vertex, end, ;, private, final]
[=, start, ;, this, ., end, =, end, ;, this, ., line, =, line, ;, this, ., node, =, null]
[., start, =, start, ;, this, ., end, =, end, ;, this, ., line, =, line, ;, this, ., node]
[;, this, ., end, =, end, ;, this, ., line, =, line, ;, this, ., node, =, null, ;, start]
[=, end, ;, this, ., line, =, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (, this]
[., end, =, end, ;, this, ., line, =, line, ;, this, ., node, =, null, ;, start, ., setOutgoing]
[;, this, ., line, =, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (, this, ), ;]
[=, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (, this, ), ;, end, ., setIncoming, (]
[., line, =, line, ;, this, ., node, =, null, ;, start, ., setOutgoing, (, this, ), ;, end, .]
[;, this, ., node, =, null, ;, start, ., setOutgoing, (, this, ), ;, end, ., setIncoming, (, this, )]
[=, null, ;, start, ., setOutgoing, (, this, ), ;, end, ., setIncoming, (, this, ), ;, }, public, Vertex]
[., node, =, null, ;, start, ., setOutgoing, (, this, ), ;, end, ., setIncoming, (, this, ), ;, }]
[;, start, ., setOutgoing, (, this, ), ;, end, ., setIncoming, (, this, ), ;, }, public, Vertex, getStart, (]
[;, end, ., setIncoming, (, this, ), ;, }, public, Vertex, getStart, (, ), {, return, start, ;, }, public]
[., setOutgoing, (, this, ), ;, end, ., setIncoming, (, this, ), ;, }, public, Vertex, getStart, (, ), {]
[), ;, end, ., setIncoming, (, this, ), ;, }, public, Vertex, getStart, (, ), {, return, start, ;, }]
[;, }, public, Vertex, getStart, (, ), {, return, start, ;, }, public, Vertex, getEnd, (, ), {, return, end]
[., setIncoming, (, this, ), ;, }, public, Vertex, getStart, (, ), {, return, start, ;, }, public, Vertex, getEnd]
[), ;, }, public, Vertex, getStart, (, ), {, return, start, ;, }, public, Vertex, getEnd, (, ), {, return]
[;, }, public, Vertex, getEnd, (, ), {, return, end, ;, }, public, Line, getLine, (, ), {, return, line]
[;, }, public, Line, getLine, (, ), {, return, line, ;, }, public, void, setNode, (, final, BSPTree, <, Euclidean2D]
[;, }, public, void, setNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, this, ., node, =, node, ;]
[=, node, ;, }, public, BSPTree, <, Euclidean2D, >, getNode, (, ), {, return, node, ;, }, public, Vertex, split]
[., node, =, node, ;, }, public, BSPTree, <, Euclidean2D, >, getNode, (, ), {, return, node, ;, }, public]
[;, }, public, BSPTree, <, Euclidean2D, >, getNode, (, ), {, return, node, ;, }, public, Vertex, split, (, final]
[;, }, public, Vertex, split, (, final, Line, splitLine, ), {, final, Vertex, splitVertex, =, new, Vertex, (, line, .]
[;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,, line]
[), ;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,]
[., intersection, (, splitLine, ), ), ;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge]
[), ), ;, splitVertex, ., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex]
[;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =, new]
[., bindWith, (, splitLine, ), ;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,, line, ), ;]
[), ;, final, Edge, startHalf, =, new, Edge, (, start, ,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =]
[;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;, startHalf, ., node, =, node]
[,, splitVertex, ,, line, ), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;]
[,, line, ), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;, startHalf, .]
[), ;, final, Edge, endHalf, =, new, Edge, (, splitVertex, ,, end, ,, line, ), ;, startHalf, ., node, =]
[;, startHalf, ., node, =, node, ;, endHalf, ., node, =, node, ;, return, splitVertex, ;, }, }, @, Override]
[,, end, ,, line, ), ;, startHalf, ., node, =, node, ;, endHalf, ., node, =, node, ;, return, splitVertex]
[,, line, ), ;, startHalf, ., node, =, node, ;, endHalf, ., node, =, node, ;, return, splitVertex, ;, }]
[), ;, startHalf, ., node, =, node, ;, endHalf, ., node, =, node, ;, return, splitVertex, ;, }, }, @]
[=, node, ;, endHalf, ., node, =, node, ;, return, splitVertex, ;, }, }, @, Override, public, PolygonsSet, buildNew, (]
[., node, =, node, ;, endHalf, ., node, =, node, ;, return, splitVertex, ;, }, }, @, Override, public, PolygonsSet]
[;, endHalf, ., node, =, node, ;, return, splitVertex, ;, }, }, @, Override, public, PolygonsSet, buildNew, (, final, BSPTree]
[=, node, ;, return, splitVertex, ;, }, }, @, Override, public, PolygonsSet, buildNew, (, final, BSPTree, <, Euclidean2D, >, tree]
[., node, =, node, ;, return, splitVertex, ;, }, }, @, Override, public, PolygonsSet, buildNew, (, final, BSPTree, <, Euclidean2D]
[;, return, splitVertex, ;, }, }, @, Override, public, PolygonsSet, buildNew, (, final, BSPTree, <, Euclidean2D, >, tree, ), {]
[;, }, }, @, Override, public, PolygonsSet, buildNew, (, final, BSPTree, <, Euclidean2D, >, tree, ), {, return, new, PolygonsSet]
[;, }, @, Override, protected, void, computeGeometricalProperties, (, ), {, final, Vector2D, [, ], [, ], v, =, getVertices, (]
[), ;, }, @, Override, protected, void, computeGeometricalProperties, (, ), {, final, Vector2D, [, ], [, ], v, =, getVertices]
[;, if, (, v, ., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false]
[), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (, tree, ., getCut, (]
[==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (, tree, .]
[., length, ==, 0, ), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (]
[), {, final, BSPTree, <, Euclidean2D, >, tree, =, getTree, (, false, ), ;, if, (, tree, ., getCut, (]
[;, if, (, tree, ., getCut, (, ), ==, null, &&, (, Boolean, ), tree, ., getAttribute, (, ), )]
[), ;, if, (, tree, ., getCut, (, ), ==, null, &&, (, Boolean, ), tree, ., getAttribute, (, )]
[), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize]
[&&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[==, null, &&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;]
[., getCut, (, ), ==, null, &&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (, Double]
[&&, (, Boolean, ), tree, ., getAttribute, (, ), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize]
[), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize]
[., getAttribute, (, ), ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;]
[;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (, new, Vector2D]
[), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (, new]
[., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter]
[;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;]
[), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), )]
[., NaN, ), ;, }, else, {, setSize, (, 0, ), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0]
[;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (, v, [, 0]
[), ;, setBarycenter, (, new, Vector2D, (, 0, ,, 0, ), ), ;, }, }, else, if, (, v, []
[;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==, null, ), {, setSize, (, Double]
[), ;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==, null, ), {, setSize, (]
[,, 0, ), ), ;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==, null, )]
[), ), ;, }, }, else, if, (, v, [, 0, ], [, 0, ], ==, null, ), {, setSize]
[), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, double]
[==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else]
[[, 0, ], ==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, )]
[[, 0, ], [, 0, ], ==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D]
[], [, 0, ], ==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN]
[], ==, null, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }]
[), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, double]
[;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, double, sum, =, 0, ;, double, sumX, =, 0]
[), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, double, sum, =, 0, ;, double, sumX, =]
[., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, double, sum, =, 0, ;, double]
[;, }, else, {, double, sum, =, 0, ;, double, sumX, =, 0, ;, double, sumY, =, 0, ;, for]
[), ;, }, else, {, double, sum, =, 0, ;, double, sumX, =, 0, ;, double, sumY, =, 0, ;]
[., NaN, ), ;, }, else, {, double, sum, =, 0, ;, double, sumX, =, 0, ;, double, sumY, =]
[;, double, sumX, =, 0, ;, double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, )]
[;, double, sumY, =, 0, ;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =, loop]
[;, for, (, Vector2D, [, ], loop, :, v, ), {, double, x1, =, loop, [, loop, ., length, -]
[), {, double, x1, =, loop, [, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1]
[;, double, y1, =, loop, [, loop, ., length, -, 1, ], ., getY, (, ), ;, for, (, final]
[., getX, (, ), ;, double, y1, =, loop, [, loop, ., length, -, 1, ], ., getY, (, )]
[[, loop, ., length, -, 1, ], ., getX, (, ), ;, double, y1, =, loop, [, loop, ., length]
[], ., getX, (, ), ;, double, y1, =, loop, [, loop, ., length, -, 1, ], ., getY, (]
[-, 1, ], ., getX, (, ), ;, double, y1, =, loop, [, loop, ., length, -, 1, ], .]
[., length, -, 1, ], ., getX, (, ), ;, double, y1, =, loop, [, loop, ., length, -, 1]
[], ., getX, (, ), ;, double, y1, =, loop, [, loop, ., length, -, 1, ], ., getY, (]
[;, for, (, final, Vector2D, point, :, loop, ), {, final, double, x0, =, x1, ;, final, double, y0, =]
[., getY, (, ), ;, for, (, final, Vector2D, point, :, loop, ), {, final, double, x0, =, x1, ;]
[[, loop, ., length, -, 1, ], ., getY, (, ), ;, for, (, final, Vector2D, point, :, loop, )]
[], ., getY, (, ), ;, for, (, final, Vector2D, point, :, loop, ), {, final, double, x0, =, x1]
[-, 1, ], ., getY, (, ), ;, for, (, final, Vector2D, point, :, loop, ), {, final, double, x0]
[., length, -, 1, ], ., getY, (, ), ;, for, (, final, Vector2D, point, :, loop, ), {, final]
[], ., getY, (, ), ;, for, (, final, Vector2D, point, :, loop, ), {, final, double, x0, =, x1]
[), {, final, double, x0, =, x1, ;, final, double, y0, =, y1, ;, x1, =, point, ., getX, (]
[;, final, double, y0, =, y1, ;, x1, =, point, ., getX, (, ), ;, y1, =, point, ., getY]
[;, x1, =, point, ., getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor]
[=, point, ., getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0]
[;, y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1]
[., getX, (, ), ;, y1, =, point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1]
[=, point, ., getY, (, ), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum]
[;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor]
[., getY, (, ), ;, final, double, factor, =, x0, *, y1, -, y0, *, x1, ;, sum, +=, factor]
[;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (]
[-, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY]
[*, y1, -, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, )]
[-, y0, *, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY]
[;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (]
[*, x1, ;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor]
[;, sum, +=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (]
[+=, factor, ;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (, y0, +]
[;, sumX, +=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (, y0, +, y1, )]
[+=, factor, *, (, x0, +, x1, ), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }]
[;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, ), {]
[*, (, x0, +, x1, ), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if]
[;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, ), {]
[), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, )]
[+, x1, ), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <]
[), ;, sumY, +=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, )]
[+=, factor, *, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, ), {, setSize, (]
[;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D]
[*, (, y0, +, y1, ), ;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, .]
[;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D]
[), ;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[+, y1, ), ;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;]
[), ;, }, }, if, (, sum, <, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (]
[), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize]
[<, 0, ), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else]
[), {, setSize, (, Double, ., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize]
[;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (]
[), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter]
[., POSITIVE_INFINITY, ), ;, setBarycenter, (, Vector2D, ., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, )]
[;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3]
[), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (]
[., NaN, ), ;, }, else, {, setSize, (, sum, /, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX]
[;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (, 3, *, sum]
[), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (, 3, *]
[/, 2, ), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (]
[), ;, setBarycenter, (, new, Vector2D, (, sumX, /, (, 3, *, sum, ), ,, sumY, /, (, 3, *]
[;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==, null, )]
[), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==, null]
[,, sumY, /, (, 3, *, sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], [, ]]
[/, (, 3, *, sum, ), ,, sumY, /, (, 3, *, sum, ), ), ), ;, }, }, }]
[,, sumY, /, (, 3, *, sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], [, ]]
[), ,, sumY, /, (, 3, *, sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], []
[*, sum, ), ,, sumY, /, (, 3, *, sum, ), ), ), ;, }, }, }, public, Vector2D, []
[), ,, sumY, /, (, 3, *, sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], []
[), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==]
[/, (, 3, *, sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (]
[), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices, ==]
[), ), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices]
[*, sum, ), ), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if]
[), ), ), ;, }, }, }, public, Vector2D, [, ], [, ], getVertices, (, ), {, if, (, vertices]
[), {, if, (, getTree, (, false, ), ., getCut, (, ), ==, null, ), {, vertices, =, new, Vector2D]
[==, null, ), {, if, (, getTree, (, false, ), ., getCut, (, ), ==, null, ), {, vertices, =]
[), {, if, (, getTree, (, false, ), ., getCut, (, ), ==, null, ), {, vertices, =, new, Vector2D]
[), {, vertices, =, new, Vector2D, [, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =, new]
[==, null, ), {, vertices, =, new, Vector2D, [, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor]
[., getCut, (, ), ==, null, ), {, vertices, =, new, Vector2D, [, 0, ], [, ], ;, }, else]
[), ., getCut, (, ), ==, null, ), {, vertices, =, new, Vector2D, [, 0, ], [, ], ;, }]
[), {, vertices, =, new, Vector2D, [, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =, new]
[=, new, Vector2D, [, 0, ], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =, new, SegmentsBuilder, (, )]
[;, }, else, {, final, SegmentsBuilder, visitor, =, new, SegmentsBuilder, (, ), ;, getTree, (, true, ), ., visit, (]
[], [, ], ;, }, else, {, final, SegmentsBuilder, visitor, =, new, SegmentsBuilder, (, ), ;, getTree, (, true, )]
[;, getTree, (, true, ), ., visit, (, visitor, ), ;, final, AVLTree, <, ComparableSegment, >, sorted, =, visitor, .]
[;, final, AVLTree, <, ComparableSegment, >, sorted, =, visitor, ., getSorted, (, ), ;, final, ArrayList, <, List, <, ComparableSegment]
[., visit, (, visitor, ), ;, final, AVLTree, <, ComparableSegment, >, sorted, =, visitor, ., getSorted, (, ), ;, final]
[), ., visit, (, visitor, ), ;, final, AVLTree, <, ComparableSegment, >, sorted, =, visitor, ., getSorted, (, ), ;]
[), ;, final, AVLTree, <, ComparableSegment, >, sorted, =, visitor, ., getSorted, (, ), ;, final, ArrayList, <, List, <]
[;, final, ArrayList, <, List, <, ComparableSegment, >, >, loops, =, new, ArrayList, <, List, <, ComparableSegment, >, >, (]
[., getSorted, (, ), ;, final, ArrayList, <, List, <, ComparableSegment, >, >, loops, =, new, ArrayList, <, List, <]
[;, while, (, !, sorted, ., isEmpty, (, ), ), {, final, AVLTree, <, ComparableSegment, >, ., Node, node, =]
[), {, final, AVLTree, <, ComparableSegment, >, ., Node, node, =, sorted, ., getSmallest, (, ), ;, final, List, <]
[), {, final, AVLTree, <, ComparableSegment, >, ., Node, node, =, sorted, ., getSmallest, (, ), ;, final, List, <]
[., isEmpty, (, ), ), {, final, AVLTree, <, ComparableSegment, >, ., Node, node, =, sorted, ., getSmallest, (, )]
[;, final, List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,, sorted, ), ;, if, (, loop, !=, null]
[., getSmallest, (, ), ;, final, List, <, ComparableSegment, >, loop, =, followLoop, (, node, ,, sorted, ), ;, if]
[;, if, (, loop, !=, null, ), {, loops, ., add, (, loop, ), ;, }, }, vertices, =, new]
[,, sorted, ), ;, if, (, loop, !=, null, ), {, loops, ., add, (, loop, ), ;, }, }]
[), ;, if, (, loop, !=, null, ), {, loops, ., add, (, loop, ), ;, }, }, vertices, =]
[), {, loops, ., add, (, loop, ), ;, }, }, vertices, =, new, Vector2D, [, loops, ., size, (]
[!=, null, ), {, loops, ., add, (, loop, ), ;, }, }, vertices, =, new, Vector2D, [, loops, .]
[), {, loops, ., add, (, loop, ), ;, }, }, vertices, =, new, Vector2D, [, loops, ., size, (]
[;, }, }, vertices, =, new, Vector2D, [, loops, ., size, (, ), ], [, ], ;, int, i, =]
[., add, (, loop, ), ;, }, }, vertices, =, new, Vector2D, [, loops, ., size, (, ), ], []
[), ;, }, }, vertices, =, new, Vector2D, [, loops, ., size, (, ), ], [, ], ;, int, i]
[=, new, Vector2D, [, loops, ., size, (, ), ], [, ], ;, int, i, =, 0, ;, for, (]
[;, int, i, =, 0, ;, for, (, final, List, <, ComparableSegment, >, loop, :, loops, ), {, if, (]
[], [, ], ;, int, i, =, 0, ;, for, (, final, List, <, ComparableSegment, >, loop, :, loops, )]
[., size, (, ), ], [, ], ;, int, i, =, 0, ;, for, (, final, List, <, ComparableSegment, >]
[;, for, (, final, List, <, ComparableSegment, >, loop, :, loops, ), {, if, (, loop, ., size, (, )]
[), {, if, (, loop, ., size, (, ), <, 2, ), {, final, Line, line, =, loop, ., get]
[), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;, vertices, [, i]
[<, 2, ), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;, vertices]
[., size, (, ), <, 2, ), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine]
[), {, final, Line, line, =, loop, ., get, (, 0, ), ., getLine, (, ), ;, vertices, [, i]
[;, vertices, [, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D]
[., getLine, (, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line, .]
[., get, (, 0, ), ., getLine, (, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ]]
[), ., getLine, (, ), ;, vertices, [, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line]
[=, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, )]
[[, i, ++, ], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -]
[], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE]
[++, ], =, new, Vector2D, [, ], {, null, ,, line, ., toSpace, (, new, Vector1D, (, -, Float, .]
[;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, ), ==, null, ), {, final]
[;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, ), ==, null, ), {, final]
[,, line, ., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (, new]
[,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if, (]
[., toSpace, (, new, Vector1D, (, -, Float, ., MAX_VALUE, ), ), ,, line, ., toSpace, (, new, Vector1D, (]
[), ,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if]
[), ), ,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else]
[), ), ,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else]
[., MAX_VALUE, ), ), ,, line, ., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;]
[}, ;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, ), ==, null, ), {]
[., toSpace, (, new, Vector1D, (, +, Float, ., MAX_VALUE, ), ), }, ;, }, else, if, (, loop, .]
[), }, ;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, ), ==, null, )]
[), ), }, ;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, ), ==, null]
[), ), }, ;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, ), ==, null]
[., MAX_VALUE, ), ), }, ;, }, else, if, (, loop, ., get, (, 0, ), ., getStart, (, )]
[), {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, ), +, 2, ], ;]
[==, null, ), {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, ), +, 2]
[., getStart, (, ), ==, null, ), {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size]
[., get, (, 0, ), ., getStart, (, ), ==, null, ), {, final, Vector2D, [, ], array, =, new]
[), ., getStart, (, ), ==, null, ), {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, .]
[), {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, ), +, 2, ], ;]
[;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0, )]
[], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0]
[+, 2, ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j]
[., size, (, ), +, 2, ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, )]
[], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0]
[;, for, (, Segment, segment, :, loop, ), {, if, (, j, ==, 0, ), {, double, x, =, segment]
[), {, if, (, j, ==, 0, ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (]
[), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), ), .]
[==, 0, ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, )]
[), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), ), .]
[;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array]
[., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2]
[., toSubSpace, (, segment, ., getEnd, (, ), ), ., getX, (, ), ;, x, -=, FastMath, ., max, (]
[., getLine, (, ), ., toSubSpace, (, segment, ., getEnd, (, ), ), ., getX, (, ), ;, x, -=]
[), ., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /]
[., getEnd, (, ), ), ., getX, (, ), ;, x, -=, FastMath, ., max, (, 1.0, ,, FastMath, .]
[-=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j]
[;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =, segment, ., getLine, (, )]
[., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ]]
[,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array]
[), ;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =, segment, ., getLine, (]
[., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array, [, j]
[), ), ;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =, segment, ., getLine]
[/, 2, ), ), ;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =, segment]
[), ), ;, array, [, j, ++, ], =, null, ;, array, [, j, ++, ], =, segment, ., getLine]
[=, null, ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (]
[[, j, ++, ], =, null, ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace]
[], =, null, ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D]
[++, ], =, null, ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new]
[;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, )]
[=, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j]
[[, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;]
[], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (]
[++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if]
[;, }, if, (, j, <, (, array, ., length, -, 1, ), ), {, array, [, j, ++, ]]
[., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j, <, (, array, ., length, -]
[., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, if, (, j, <, (]
[), ;, }, if, (, j, <, (, array, ., length, -, 1, ), ), {, array, [, j, ++]
[), ), ;, }, if, (, j, <, (, array, ., length, -, 1, ), ), {, array, [, j]
[), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (]
[<, (, array, ., length, -, 1, ), ), {, array, [, j, ++, ], =, segment, ., getEnd, (]
[), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (]
[), ), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==]
[-, 1, ), ), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (]
[., length, -, 1, ), ), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }]
[), ), {, array, [, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==]
[=, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (, array, ., length, -, 1, ), )]
[[, j, ++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (, array, ., length]
[], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (, array, ., length, -, 1, )]
[++, ], =, segment, ., getEnd, (, ), ;, }, if, (, j, ==, (, array, ., length, -, 1]
[;, }, if, (, j, ==, (, array, ., length, -, 1, ), ), {, double, x, =, segment, .]
[., getEnd, (, ), ;, }, if, (, j, ==, (, array, ., length, -, 1, ), ), {, double]
[), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), ), .]
[==, (, array, ., length, -, 1, ), ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace]
[), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), ), .]
[), ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), )]
[-, 1, ), ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (]
[., length, -, 1, ), ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, .]
[), ), {, double, x, =, segment, ., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), )]
[;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array]
[., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2]
[., toSubSpace, (, segment, ., getStart, (, ), ), ., getX, (, ), ;, x, +=, FastMath, ., max, (]
[., getLine, (, ), ., toSubSpace, (, segment, ., getStart, (, ), ), ., getX, (, ), ;, x, +=]
[), ., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /]
[., getStart, (, ), ), ., getX, (, ), ;, x, +=, FastMath, ., max, (, 1.0, ,, FastMath, .]
[+=, FastMath, ., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j]
[;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, )]
[., max, (, 1.0, ,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ]]
[,, FastMath, ., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, segment, ., getLine]
[), ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x]
[., abs, (, x, /, 2, ), ), ;, array, [, j, ++, ], =, segment, ., getLine, (, )]
[), ), ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (]
[/, 2, ), ), ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new]
[), ), ;, array, [, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (]
[=, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }, vertices, []
[[, j, ++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;]
[], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }, vertices]
[++, ], =, segment, ., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }]
[;, }, }, vertices, [, i, ++, ], =, array, ;, }, else, {, final, Vector2D, [, ], array, =]
[., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }, vertices, [, i, ++, ], =, array, ;]
[., getLine, (, ), ., toSpace, (, new, Vector1D, (, x, ), ), ;, }, }, vertices, [, i, ++]
[), ;, }, }, vertices, [, i, ++, ], =, array, ;, }, else, {, final, Vector2D, [, ], array]
[), ), ;, }, }, vertices, [, i, ++, ], =, array, ;, }, else, {, final, Vector2D, [, ]]
[=, array, ;, }, else, {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, )]
[[, i, ++, ], =, array, ;, }, else, {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop]
[], =, array, ;, }, else, {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (]
[++, ], =, array, ;, }, else, {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size]
[;, }, else, {, final, Vector2D, [, ], array, =, new, Vector2D, [, loop, ., size, (, ), ], ;]
[;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, array, [, j, ++, ], =]
[], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, array, [, j, ++, ]]
[., size, (, ), ], ;, int, j, =, 0, ;, for, (, Segment, segment, :, loop, ), {, array]
[;, for, (, Segment, segment, :, loop, ), {, array, [, j, ++, ], =, segment, ., getStart, (, )]
[), {, array, [, j, ++, ], =, segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ]]
[=, segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ], =, array, ;, }, }, }, }]
[[, j, ++, ], =, segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ], =, array, ;]
[], =, segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ], =, array, ;, }, }, }]
[++, ], =, segment, ., getStart, (, ), ;, }, vertices, [, i, ++, ], =, array, ;, }, }]
[;, }, vertices, [, i, ++, ], =, array, ;, }, }, }, }, return, vertices, ., clone, (, )]
[., getStart, (, ), ;, }, vertices, [, i, ++, ], =, array, ;, }, }, }, }, return, vertices]
[=, array, ;, }, }, }, }, return, vertices, ., clone, (, ), ;, }, private, List, <, ComparableSegment, >]
[[, i, ++, ], =, array, ;, }, }, }, }, return, vertices, ., clone, (, ), ;, }, private]
[], =, array, ;, }, }, }, }, return, vertices, ., clone, (, ), ;, }, private, List, <, ComparableSegment]
[++, ], =, array, ;, }, }, }, }, return, vertices, ., clone, (, ), ;, }, private, List, <]
[;, }, }, }, }, return, vertices, ., clone, (, ), ;, }, private, List, <, ComparableSegment, >, followLoop, (]
[;, }, private, List, <, ComparableSegment, >, followLoop, (, final, AVLTree, <, ComparableSegment, >, ., Node, node, ,, final, AVLTree]
[., clone, (, ), ;, }, private, List, <, ComparableSegment, >, followLoop, (, final, AVLTree, <, ComparableSegment, >, ., Node]
[;, ComparableSegment, segment, =, node, ., getElement, (, ), ;, loop, ., add, (, segment, ), ;, final, Vector2D, globalStart]
[;, loop, ., add, (, segment, ), ;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end]
[., getElement, (, ), ;, loop, ., add, (, segment, ), ;, final, Vector2D, globalStart, =, segment, ., getStart, (]
[;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end, =, segment, ., getEnd, (, ), ;]
[., add, (, segment, ), ;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end, =, segment]
[), ;, final, Vector2D, globalStart, =, segment, ., getStart, (, ), ;, Vector2D, end, =, segment, ., getEnd, (, )]
[;, Vector2D, end, =, segment, ., getEnd, (, ), ;, node, ., delete, (, ), ;, final, boolean, open, =]
[., getStart, (, ), ;, Vector2D, end, =, segment, ., getEnd, (, ), ;, node, ., delete, (, ), ;]
[;, node, ., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while]
[., getEnd, (, ), ;, node, ., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, )]
[;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, )]
[., delete, (, ), ;, final, boolean, open, =, segment, ., getStart, (, ), ==, null, ;, while, (, (]
[;, while, (, (, end, !=, null, ), &&, (, open, ||, (, globalStart, ., distance, (, end, ), >]
[==, null, ;, while, (, (, end, !=, null, ), &&, (, open, ||, (, globalStart, ., distance, (, end]
[., getStart, (, ), ==, null, ;, while, (, (, end, !=, null, ), &&, (, open, ||, (, globalStart]
[;, while, (, (, end, !=, null, ), &&, (, open, ||, (, globalStart, ., distance, (, end, ), >]
[), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance, =]
[&&, (, open, ||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, ), ), ), {, AVLTree, <, ComparableSegment]
[), &&, (, open, ||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, ), ), ), {, AVLTree, <]
[!=, null, ), &&, (, open, ||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, ), ), ), {]
[), &&, (, open, ||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, ), ), ), {, AVLTree, <]
[), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance, =]
[), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance]
[||, (, globalStart, ., distance, (, end, ), >, 1.0e-10, ), ), ), {, AVLTree, <, ComparableSegment, >, ., Node]
[), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance]
[), ), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double]
[>, 1.0e-10, ), ), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null]
[., distance, (, end, ), >, 1.0e-10, ), ), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null]
[), >, 1.0e-10, ), ), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =]
[), ), ), {, AVLTree, <, ComparableSegment, >, ., Node, selectedNode, =, null, ;, ComparableSegment, selectedSegment, =, null, ;, double]
[;, ComparableSegment, selectedSegment, =, null, ;, double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (]
[;, double, selectedDistance, =, Double, ., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,, -, 1.0e-10, ,]
[;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight]
[., POSITIVE_INFINITY, ;, final, ComparableSegment, lowerLeft, =, new, ComparableSegment, (, end, ,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final]
[;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,, +, 1.0e-10, ), ;, for, (, AVLTree]
[,, -, 1.0e-10, ,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,]
[,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,, +, 1.0e-10, )]
[,, -, 1.0e-10, ), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,, +, 1.0e-10, )]
[), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,, +, 1.0e-10, ), ;, for, (]
[), ;, final, ComparableSegment, upperRight, =, new, ComparableSegment, (, end, ,, +, 1.0e-10, ,, +, 1.0e-10, ), ;, for, (]
[;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (, n]
[,, +, 1.0e-10, ,, +, 1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, .]
[,, +, 1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft]
[,, +, 1.0e-10, ), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft]
[), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (]
[), ;, for, (, AVLTree, <, ComparableSegment, >, ., Node, n, =, sorted, ., getNotSmaller, (, lowerLeft, ), ;, (]
[;, (, n, !=, null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0]
[., getNotSmaller, (, lowerLeft, ), ;, (, n, !=, null, ), &&, (, n, ., getElement, (, ), ., compareTo]
[), ;, (, n, !=, null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=]
[;, n, =, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double]
[&&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n, .]
[), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n]
[!=, null, ), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n]
[), &&, (, n, ., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n]
[;, n, =, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double]
[), ;, n, =, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final]
[<=, 0, ), ;, n, =, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, )]
[., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n, ., getNext, (, ), ), {, segment, =]
[., getElement, (, ), ., compareTo, (, upperRight, ), <=, 0, ), ;, n, =, n, ., getNext, (, )]
[), <=, 0, ), ;, n, =, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (]
[), ;, n, =, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final]
[=, n, ., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double, distance, =]
[), {, segment, =, n, ., getElement, (, ), ;, final, double, distance, =, end, ., distance, (, segment, .]
[., getNext, (, ), ), {, segment, =, n, ., getElement, (, ), ;, final, double, distance, =, end, .]
[=, n, ., getElement, (, ), ;, final, double, distance, =, end, ., distance, (, segment, ., getStart, (, )]
[;, final, double, distance, =, end, ., distance, (, segment, ., getStart, (, ), ), ;, if, (, distance, <]
[., getElement, (, ), ;, final, double, distance, =, end, ., distance, (, segment, ., getStart, (, ), ), ;]
[;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;]
[., distance, (, segment, ., getStart, (, ), ), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n]
[), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance]
[., getStart, (, ), ), ;, if, (, distance, <, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment]
[), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >]
[<, selectedDistance, ), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (]
[), {, selectedNode, =, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >]
[=, n, ;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {]
[;, selectedSegment, =, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null]
[=, segment, ;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }]
[;, selectedDistance, =, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }, end, =]
[=, distance, ;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }, end, =, selectedSegment, .]
[;, }, }, if, (, selectedDistance, >, 1.0e-10, ), {, return, null, ;, }, end, =, selectedSegment, ., getEnd, (]
[), {, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (, selectedSegment, )]
[>, 1.0e-10, ), {, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (]
[), {, return, null, ;, }, end, =, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (, selectedSegment, )]
[;, }, end, =, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete]
[=, selectedSegment, ., getEnd, (, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;]
[;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (, (, loop, .]
[., getEnd, (, ), ;, loop, ., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if]
[;, selectedNode, ., delete, (, ), ;, }, if, (, (, loop, ., size, (, ), ==, 2, ), &&]
[., add, (, selectedSegment, ), ;, selectedNode, ., delete, (, ), ;, }, if, (, (, loop, ., size, (]
[), ;, selectedNode, ., delete, (, ), ;, }, if, (, (, loop, ., size, (, ), ==, 2, )]
[;, }, if, (, (, loop, ., size, (, ), ==, 2, ), &&, !, open, ), {, return, null]
[., delete, (, ), ;, }, if, (, (, loop, ., size, (, ), ==, 2, ), &&, !, open]
[), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !, open, ), {, throw, new]
[&&, !, open, ), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !, open, )]
[), &&, !, open, ), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !, open]
[==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (, (, end, ==, null, ), &&]
[., size, (, ), ==, 2, ), &&, !, open, ), {, return, null, ;, }, if, (, (, end]
[), &&, !, open, ), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !, open]
[), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !, open, ), {, throw, new]
[), {, return, null, ;, }, if, (, (, end, ==, null, ), &&, !, open, ), {, throw, new]
[;, }, if, (, (, end, ==, null, ), &&, !, open, ), {, throw, new, MathInternalError, (, ), ;]
[), {, throw, new, MathInternalError, (, ), ;, }, return, loop, ;, }, private, static, class, ComparableSegment, extends, Segment, implements]
[&&, !, open, ), {, throw, new, MathInternalError, (, ), ;, }, return, loop, ;, }, private, static, class, ComparableSegment]
[), &&, !, open, ), {, throw, new, MathInternalError, (, ), ;, }, return, loop, ;, }, private, static, class]
[==, null, ), &&, !, open, ), {, throw, new, MathInternalError, (, ), ;, }, return, loop, ;, }, private]
[), &&, !, open, ), {, throw, new, MathInternalError, (, ), ;, }, return, loop, ;, }, private, static, class]
[), {, throw, new, MathInternalError, (, ), ;, }, return, loop, ;, }, private, static, class, ComparableSegment, extends, Segment, implements]
[), {, throw, new, MathInternalError, (, ), ;, }, return, loop, ;, }, private, static, class, ComparableSegment, extends, Segment, implements]
[;, }, return, loop, ;, }, private, static, class, ComparableSegment, extends, Segment, implements, Comparable, <, ComparableSegment, >, {, private, OrderedTuple]
[;, }, private, static, class, ComparableSegment, extends, Segment, implements, Comparable, <, ComparableSegment, >, {, private, OrderedTuple, sortingKey, ;, public, ComparableSegment]
[,, end, ,, line, ), ;, sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY]
[,, line, ), ;, sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double]
[), ;, sortingKey, =, (, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY]
[=, (, start, ==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new]
[;, }, public, ComparableSegment, (, final, Vector2D, start, ,, final, double, dx, ,, final, double, dy, ), {, super, (]
[?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX, (]
[), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX]
[==, null, ), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start]
[), ?, new, OrderedTuple, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX]
[:, new, OrderedTuple, (, start, ., getX, (, ), ,, start, ., getY, (, ), ), ;, }, public, ComparableSegment]
[,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX, (, ), ,, start, ., getY, (, )]
[., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX, (, ), ,, start, ., getY]
[), :, new, OrderedTuple, (, start, ., getX, (, ), ,, start, ., getY, (, ), ), ;, }, public]
[., NEGATIVE_INFINITY, ), :, new, OrderedTuple, (, start, ., getX, (, ), ,, start, ., getY, (, ), ), ;]
[;, }, public, ComparableSegment, (, final, Vector2D, start, ,, final, double, dx, ,, final, double, dy, ), {, super, (]
[,, start, ., getY, (, ), ), ;, }, public, ComparableSegment, (, final, Vector2D, start, ,, final, double, dx, ,]
[., getX, (, ), ,, start, ., getY, (, ), ), ;, }, public, ComparableSegment, (, final, Vector2D, start, ,]
[), ;, }, public, ComparableSegment, (, final, Vector2D, start, ,, final, double, dx, ,, final, double, dy, ), {, super]
[., getY, (, ), ), ;, }, public, ComparableSegment, (, final, Vector2D, start, ,, final, double, dx, ,, final, double]
[,, null, ,, null, ), ;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,, start]
[,, null, ), ;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,, start, ., getY]
[), ;, sortingKey, =, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,, start, ., getY, (, )]
[=, new, OrderedTuple, (, start, ., getX, (, ), +, dx, ,, start, ., getY, (, ), +, dy, )]
[;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return, sortingKey, ., compareTo, (, o, ., sortingKey, )]
[,, start, ., getY, (, ), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {]
[+, dx, ,, start, ., getY, (, ), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o]
[., getX, (, ), +, dx, ,, start, ., getY, (, ), +, dy, ), ;, }, public, int, compareTo]
[,, start, ., getY, (, ), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {]
[), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return, sortingKey, ., compareTo, (, o, ., sortingKey]
[+, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return, sortingKey, ., compareTo, (, o]
[., getY, (, ), +, dy, ), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return, sortingKey]
[), ;, }, public, int, compareTo, (, final, ComparableSegment, o, ), {, return, sortingKey, ., compareTo, (, o, ., sortingKey]
[;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==, other, ), {]
[., compareTo, (, o, ., sortingKey, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {]
[), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==, other, )]
[., sortingKey, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (, this, ==]
[), {, return, true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return, compareTo, (, (, ComparableSegment, )]
[==, other, ), {, return, true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return, compareTo, (, (]
[), {, return, true, ;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return, compareTo, (, (, ComparableSegment, )]
[;, }, else, if, (, other, instanceof, ComparableSegment, ), {, return, compareTo, (, (, ComparableSegment, ), other, ), ==, 0]
[), {, return, compareTo, (, (, ComparableSegment, ), other, ), ==, 0, ;, }, else, {, return, false, ;, }]
[instanceof, ComparableSegment, ), {, return, compareTo, (, (, ComparableSegment, ), other, ), ==, 0, ;, }, else, {, return, false]
[;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return, getStart, (]
[==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return]
[), ==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {]
[), ==, 0, ;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {]
[;, }, else, {, return, false, ;, }, }, @, Override, public, int, hashCode, (, ), {, return, getStart, (]
[;, }, }, @, Override, public, int, hashCode, (, ), {, return, getStart, (, ), ., hashCode, (, ), ^]
[;, }, }, private, static, class, SegmentsBuilder, implements, BSPTreeVisitor, <, Euclidean2D, >, {, private, AVLTree, <, ComparableSegment, >, sorted, ;]
[^, sortingKey, ., hashCode, (, ), ;, }, }, private, static, class, SegmentsBuilder, implements, BSPTreeVisitor, <, Euclidean2D, >, {, private]
[^, getLine, (, ), ., hashCode, (, ), ^, sortingKey, ., hashCode, (, ), ;, }, }, private, static, class]
[^, getEnd, (, ), ., hashCode, (, ), ^, getLine, (, ), ., hashCode, (, ), ^, sortingKey, ., hashCode]
[., hashCode, (, ), ^, getEnd, (, ), ., hashCode, (, ), ^, getLine, (, ), ., hashCode, (, )]
[^, getLine, (, ), ., hashCode, (, ), ^, sortingKey, ., hashCode, (, ), ;, }, }, private, static, class]
[., hashCode, (, ), ^, getLine, (, ), ., hashCode, (, ), ^, sortingKey, ., hashCode, (, ), ;, }]
[^, sortingKey, ., hashCode, (, ), ;, }, }, private, static, class, SegmentsBuilder, implements, BSPTreeVisitor, <, Euclidean2D, >, {, private]
[., hashCode, (, ), ^, sortingKey, ., hashCode, (, ), ;, }, }, private, static, class, SegmentsBuilder, implements, BSPTreeVisitor, <]
[;, }, }, private, static, class, SegmentsBuilder, implements, BSPTreeVisitor, <, Euclidean2D, >, {, private, AVLTree, <, ComparableSegment, >, sorted, ;]
[., hashCode, (, ), ;, }, }, private, static, class, SegmentsBuilder, implements, BSPTreeVisitor, <, Euclidean2D, >, {, private, AVLTree, <]
[=, new, AVLTree, <, ComparableSegment, >, (, ), ;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean2D, >, node]
[;, }, public, Order, visitOrder, (, final, BSPTree, <, Euclidean2D, >, node, ), {, return, Order, ., MINUS_SUB_PLUS, ;, }]
[;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, @, SuppressWarnings, (, "unchecked", ), final]
[., MINUS_SUB_PLUS, ;, }, public, void, visitInternalNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, @, SuppressWarnings, (, "unchecked"]
[final, BoundaryAttribute, <, Euclidean2D, >, attribute, =, (, BoundaryAttribute, <, Euclidean2D, >, ), node, ., getAttribute, (, ), ;, if]
[), final, BoundaryAttribute, <, Euclidean2D, >, attribute, =, (, BoundaryAttribute, <, Euclidean2D, >, ), node, ., getAttribute, (, ), ;]
[;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,]
[;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,]
[., getAttribute, (, ), ;, if, (, attribute, ., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, .]
[), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (]
[!=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, .]
[., getPlusOutside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }]
[), {, addContribution, (, attribute, ., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (]
[;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, )]
[,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, .]
[., getPlusOutside, (, ), ,, false, ), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {]
[), ;, }, if, (, attribute, ., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (]
[), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode, (, final]
[!=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode]
[., getPlusInside, (, ), !=, null, ), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }]
[), {, addContribution, (, attribute, ., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode, (, final]
[;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, }, private, void, addContribution, (]
[,, true, ), ;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, }, private]
[., getPlusInside, (, ), ,, true, ), ;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean2D, >, node]
[), ;, }, }, public, void, visitLeafNode, (, final, BSPTree, <, Euclidean2D, >, node, ), {, }, private, void, addContribution]
[final, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, absSub, =, (, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, ), sub, ;, final]
[), final, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, absSub, =, (, AbstractSubHyperplane, <, Euclidean2D, ,, Euclidean1D, >, ), sub, ;]
[;, final, Line, line, =, (, Line, ), sub, ., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals]
[;, final, Line, line, =, (, Line, ), sub, ., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals]
[;, final, List, <, Interval, >, intervals, =, (, (, IntervalsSet, ), absSub, ., getRemainingRegion, (, ), ), ., asList]
[;, final, List, <, Interval, >, intervals, =, (, (, IntervalsSet, ), absSub, ., getRemainingRegion, (, ), ), ., asList]
[., getHyperplane, (, ), ;, final, List, <, Interval, >, intervals, =, (, (, IntervalsSet, ), absSub, ., getRemainingRegion, (]
[;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =, Double, ., isInfinite, (, i, .]
[., asList, (, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =, Double, .]
[), ., asList, (, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =, Double]
[), ., asList, (, ), ;, for, (, final, Interval, i, :, intervals, ), {, final, Vector2D, start, =, Double]
[., getRemainingRegion, (, ), ), ., asList, (, ), ;, for, (, final, Interval, i, :, intervals, ), {, final]
[), {, final, Vector2D, start, =, Double, ., isInfinite, (, i, ., getInf, (, ), ), ?, null, :, (]
[;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D]
[?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), )]
[., isInfinite, (, i, ., getInf, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new]
[), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), )]
[., getInf, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, .]
[:, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), ), ;, final]
[;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D]
[;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D]
[., toSpace, (, new, Vector1D, (, i, ., getInf, (, ), ), ), ;, final, Vector2D, end, =, Double, .]
[), ;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (]
[), ), ;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, ), ), ?, null, :]
[., getInf, (, ), ), ), ;, final, Vector2D, end, =, Double, ., isInfinite, (, i, ., getSup, (, )]
[;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse]
[?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), )]
[., isInfinite, (, i, ., getSup, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new]
[), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), )]
[., getSup, (, ), ), ?, null, :, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, .]
[:, (, Vector2D, ), line, ., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), ), ;, if]
[;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse]
[;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse]
[., toSpace, (, new, Vector1D, (, i, ., getSup, (, ), ), ), ;, if, (, reversed, ), {, sorted]
[), ;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,, line, .]
[), ), ;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,, line]
[., getSup, (, ), ), ), ;, if, (, reversed, ), {, sorted, ., insert, (, new, ComparableSegment, (, end]
[), {, sorted, ., insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse, (, ), ), )]
[;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (, start, ,, end, ,, line, ), ), ;, }]
[., insert, (, new, ComparableSegment, (, end, ,, start, ,, line, ., getReverse, (, ), ), ), ;, }, else]
[), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (, start, ,, end, ,, line, ), ), ;]
[,, start, ,, line, ., getReverse, (, ), ), ), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment]
[,, line, ., getReverse, (, ), ), ), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (, start]
[), ), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (, start, ,, end, ,, line, ), )]
[., getReverse, (, ), ), ), ;, }, else, {, sorted, ., insert, (, new, ComparableSegment, (, start, ,, end]
[;, }, }, }, public, AVLTree, <, ComparableSegment, >, getSorted, (, ), {, return, sorted, ;, }, }, }]
[., insert, (, new, ComparableSegment, (, start, ,, end, ,, line, ), ), ;, }, }, }, public, AVLTree, <]
[), ;, }, }, }, public, AVLTree, <, ComparableSegment, >, getSorted, (, ), {, return, sorted, ;, }, }, }]
[,, end, ,, line, ), ), ;, }, }, }, public, AVLTree, <, ComparableSegment, >, getSorted, (, ), {, return]
[,, line, ), ), ;, }, }, }, public, AVLTree, <, ComparableSegment, >, getSorted, (, ), {, return, sorted, ;]
[), ), ;, }, }, }, public, AVLTree, <, ComparableSegment, >, getSorted, (, ), {, return, sorted, ;, }, }]
[;, }, }, }]
