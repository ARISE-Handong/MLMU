[), {, throw, new, NotStrictlyPositiveException, (, sigma, ), ;, }, this, ., norm, =, norm, ;, this, ., mean, =]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, sigma, ), ;, }, this, ., norm, =, norm, ;, this, .]
[), {, throw, new, NotStrictlyPositiveException, (, sigma, ), ;, }, this, ., norm, =, norm, ;, this, ., mean, =]
[;, }, this, ., norm, =, norm, ;, this, ., mean, =, mean, ;, this, ., is, =, 1, /]
[), ;, }, this, ., norm, =, norm, ;, this, ., mean, =, mean, ;, this, ., is, =, 1]
[=, norm, ;, this, ., mean, =, mean, ;, this, ., is, =, 1, /, sigma, ;, this, ., i2s2]
[., norm, =, norm, ;, this, ., mean, =, mean, ;, this, ., is, =, 1, /, sigma, ;, this]
[;, this, ., mean, =, mean, ;, this, ., is, =, 1, /, sigma, ;, this, ., i2s2, =, 0.5]
[=, mean, ;, this, ., is, =, 1, /, sigma, ;, this, ., i2s2, =, 0.5, *, is, *, is]
[., mean, =, mean, ;, this, ., is, =, 1, /, sigma, ;, this, ., i2s2, =, 0.5, *, is]
[;, this, ., is, =, 1, /, sigma, ;, this, ., i2s2, =, 0.5, *, is, *, is, ;, }]
[=, 1, /, sigma, ;, this, ., i2s2, =, 0.5, *, is, *, is, ;, }, public, Gaussian, (, double]
[., is, =, 1, /, sigma, ;, this, ., i2s2, =, 0.5, *, is, *, is, ;, }, public, Gaussian]
[;, this, ., i2s2, =, 0.5, *, is, *, is, ;, }, public, Gaussian, (, double, mean, ,, double, sigma]
[/, sigma, ;, this, ., i2s2, =, 0.5, *, is, *, is, ;, }, public, Gaussian, (, double, mean, ,]
[;, this, ., i2s2, =, 0.5, *, is, *, is, ;, }, public, Gaussian, (, double, mean, ,, double, sigma]
[=, 0.5, *, is, *, is, ;, }, public, Gaussian, (, double, mean, ,, double, sigma, ), throws, NotStrictlyPositiveException, {]
[., i2s2, =, 0.5, *, is, *, is, ;, }, public, Gaussian, (, double, mean, ,, double, sigma, ), throws]
[;, }, public, Gaussian, (, double, mean, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, this, (, 1, /, (, sigma]
[*, is, ;, }, public, Gaussian, (, double, mean, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, this, (, 1, /]
[*, is, *, is, ;, }, public, Gaussian, (, double, mean, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, this, (]
[*, is, ;, }, public, Gaussian, (, double, mean, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, this, (, 1, /]
[;, }, public, Gaussian, (, double, mean, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, this, (, 1, /, (, sigma]
[,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, ), ;, }]
[/, (, sigma, *, FastMath, ., sqrt, (, 2, *, Math, ., PI, ), ), ,, mean, ,, sigma, )]
[,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, ), ;, }]
[), ,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, ), ;]
[*, FastMath, ., sqrt, (, 2, *, Math, ., PI, ), ), ,, mean, ,, sigma, ), ;, }, public]
[), ,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, ), ;]
[., sqrt, (, 2, *, Math, ., PI, ), ), ,, mean, ,, sigma, ), ;, }, public, Gaussian, (]
[), ), ,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, )]
[*, Math, ., PI, ), ), ,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (]
[), ), ,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, )]
[., PI, ), ), ,, mean, ,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,]
[,, sigma, ), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, ), ;, }, public, double]
[), ;, }, public, Gaussian, (, ), {, this, (, 0, ,, 1, ), ;, }, public, double, value, (]
[,, 1, ), ;, }, public, double, value, (, double, x, ), {, return, value, (, x, -, mean, ,]
[), ;, }, public, double, value, (, double, x, ), {, return, value, (, x, -, mean, ,, norm, ,]
[;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (]
[,, norm, ,, i2s2, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[-, mean, ,, norm, ,, i2s2, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, .]
[,, norm, ,, i2s2, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (]
[,, i2s2, ), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, )]
[), ;, }, @, Deprecated, public, UnivariateFunction, derivative, (, ), {, return, FunctionUtils, ., toDifferentiableUnivariateFunction, (, this, ), ., derivative]
[;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,, double, ..., param, )]
[., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x, ,]
[., toDifferentiableUnivariateFunction, (, this, ), ., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double]
[), ., derivative, (, ), ;, }, public, static, class, Parametric, implements, ParametricUnivariateFunction, {, public, double, value, (, double, x]
[;, final, double, diff, =, x, -, param, [, 1, ], ;, final, double, i2s2, =, 1, /, (, 2]
[), ;, final, double, diff, =, x, -, param, [, 1, ], ;, final, double, i2s2, =, 1, /, (]
[;, final, double, i2s2, =, 1, /, (, 2, *, param, [, 2, ], *, param, [, 2, ], )]
[-, param, [, 1, ], ;, final, double, i2s2, =, 1, /, (, 2, *, param, [, 2, ], *]
[;, final, double, i2s2, =, 1, /, (, 2, *, param, [, 2, ], *, param, [, 2, ], )]
[[, 1, ], ;, final, double, i2s2, =, 1, /, (, 2, *, param, [, 2, ], *, param, []
[], ;, final, double, i2s2, =, 1, /, (, 2, *, param, [, 2, ], *, param, [, 2, ]]
[;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2, ), ;, }, public, double, []
[/, (, 2, *, param, [, 2, ], *, param, [, 2, ], ), ;, return, Gaussian, ., value, (]
[;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2, ), ;, }, public, double, []
[), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2, ), ;, }, public, double]
[*, param, [, 2, ], ), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2]
[*, param, [, 2, ], *, param, [, 2, ], ), ;, return, Gaussian, ., value, (, diff, ,, param]
[*, param, [, 2, ], ), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2]
[[, 2, ], *, param, [, 2, ], ), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0]
[], *, param, [, 2, ], ), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,]
[), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2, ), ;, }, public, double]
[[, 2, ], ), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2, ), ;]
[], ), ;, return, Gaussian, ., value, (, diff, ,, param, [, 0, ], ,, i2s2, ), ;, }, public]
[;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,]
[., value, (, diff, ,, param, [, 0, ], ,, i2s2, ), ;, }, public, double, [, ], gradient, (]
[,, param, [, 0, ], ,, i2s2, ), ;, }, public, double, [, ], gradient, (, double, x, ,, double]
[,, i2s2, ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException]
[[, 0, ], ,, i2s2, ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param]
[], ,, i2s2, ), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws]
[), ;, }, public, double, [, ], gradient, (, double, x, ,, double, ..., param, ), throws, NullArgumentException, ,, DimensionMismatchException]
[;, final, double, norm, =, param, [, 0, ], ;, final, double, diff, =, x, -, param, [, 1, ]]
[), ;, final, double, norm, =, param, [, 0, ], ;, final, double, diff, =, x, -, param, [, 1]
[;, final, double, diff, =, x, -, param, [, 1, ], ;, final, double, sigma, =, param, [, 2, ]]
[[, 0, ], ;, final, double, diff, =, x, -, param, [, 1, ], ;, final, double, sigma, =, param]
[], ;, final, double, diff, =, x, -, param, [, 1, ], ;, final, double, sigma, =, param, [, 2]
[;, final, double, sigma, =, param, [, 2, ], ;, final, double, i2s2, =, 1, /, (, 2, *, sigma]
[-, param, [, 1, ], ;, final, double, sigma, =, param, [, 2, ], ;, final, double, i2s2, =, 1]
[;, final, double, sigma, =, param, [, 2, ], ;, final, double, i2s2, =, 1, /, (, 2, *, sigma]
[[, 1, ], ;, final, double, sigma, =, param, [, 2, ], ;, final, double, i2s2, =, 1, /, (]
[], ;, final, double, sigma, =, param, [, 2, ], ;, final, double, i2s2, =, 1, /, (, 2, *]
[;, final, double, i2s2, =, 1, /, (, 2, *, sigma, *, sigma, ), ;, final, double, n, =, Gaussian]
[[, 2, ], ;, final, double, i2s2, =, 1, /, (, 2, *, sigma, *, sigma, ), ;, final, double]
[], ;, final, double, i2s2, =, 1, /, (, 2, *, sigma, *, sigma, ), ;, final, double, n, =]
[;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1, ,, i2s2, ), ;, final, double, m, =]
[/, (, 2, *, sigma, *, sigma, ), ;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1]
[;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1, ,, i2s2, ), ;, final, double, m, =]
[), ;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1, ,, i2s2, ), ;, final, double, m]
[*, sigma, ), ;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1, ,, i2s2, ), ;, final]
[*, sigma, *, sigma, ), ;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1, ,, i2s2, )]
[*, sigma, ), ;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1, ,, i2s2, ), ;, final]
[), ;, final, double, n, =, Gaussian, ., value, (, diff, ,, 1, ,, i2s2, ), ;, final, double, m]
[;, final, double, m, =, norm, *, n, *, 2, *, i2s2, *, diff, ;, final, double, s, =, m]
[., value, (, diff, ,, 1, ,, i2s2, ), ;, final, double, m, =, norm, *, n, *, 2, *]
[,, 1, ,, i2s2, ), ;, final, double, m, =, norm, *, n, *, 2, *, i2s2, *, diff, ;]
[,, i2s2, ), ;, final, double, m, =, norm, *, n, *, 2, *, i2s2, *, diff, ;, final, double]
[), ;, final, double, m, =, norm, *, n, *, 2, *, i2s2, *, diff, ;, final, double, s, =]
[;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double, [, ], {, n, ,, m]
[*, diff, ;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double, [, ], {, n]
[*, i2s2, *, diff, ;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double, [, ]]
[*, 2, *, i2s2, *, diff, ;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double]
[*, n, *, 2, *, i2s2, *, diff, ;, final, double, s, =, m, *, diff, /, sigma, ;, return]
[*, 2, *, i2s2, *, diff, ;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double]
[*, i2s2, *, diff, ;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double, [, ]]
[*, diff, ;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double, [, ], {, n]
[;, final, double, s, =, m, *, diff, /, sigma, ;, return, new, double, [, ], {, n, ,, m]
[;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, void, validateParameters, (, double]
[/, sigma, ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, void, validateParameters]
[*, diff, /, sigma, ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private]
[/, sigma, ;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, void, validateParameters]
[;, return, new, double, [, ], {, n, ,, m, ,, s, }, ;, }, private, void, validateParameters, (, double]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (]
[;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, if, (]
[,, m, ,, s, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException]
[,, s, }, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException]
[}, ;, }, private, void, validateParameters, (, double, [, ], param, ), throws, NullArgumentException, ,, DimensionMismatchException, ,, NotStrictlyPositiveException, {, if]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {, throw, new]
[==, null, ), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {]
[), {, throw, new, NullArgumentException, (, ), ;, }, if, (, param, ., length, !=, 3, ), {, throw, new]
[;, }, if, (, param, ., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, if, (, param, [, 2, ]]
[!=, 3, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, if, (, param, []
[., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, if, (]
[), {, throw, new, DimensionMismatchException, (, param, ., length, ,, 3, ), ;, }, if, (, param, [, 2, ]]
[;, }, if, (, param, [, 2, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, param, [, 2, ]]
[,, 3, ), ;, }, if, (, param, [, 2, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, param]
[., length, ,, 3, ), ;, }, if, (, param, [, 2, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException]
[), ;, }, if, (, param, [, 2, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, param, [, 2]
[), {, throw, new, NotStrictlyPositiveException, (, param, [, 2, ], ), ;, }, }, }, private, static, double, value, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, param, [, 2, ], ), ;, }, }, }, private, static, double]
[[, 2, ], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, param, [, 2, ], ), ;, }, }, }]
[], <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, param, [, 2, ], ), ;, }, }, }, private, static]
[), {, throw, new, NotStrictlyPositiveException, (, param, [, 2, ], ), ;, }, }, }, private, static, double, value, (]
[;, }, }, }, private, static, double, value, (, double, xMinusMean, ,, double, norm, ,, double, i2s2, ), {, return]
[), ;, }, }, }, private, static, double, value, (, double, xMinusMean, ,, double, norm, ,, double, i2s2, ), {]
[[, 2, ], ), ;, }, }, }, private, static, double, value, (, double, xMinusMean, ,, double, norm, ,, double]
[], ), ;, }, }, }, private, static, double, value, (, double, xMinusMean, ,, double, norm, ,, double, i2s2, )]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, u, =, is, *, (]
[*, FastMath, ., exp, (, -, xMinusMean, *, xMinusMean, *, i2s2, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure]
[;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, u, =, is, *, (]
[., exp, (, -, xMinusMean, *, xMinusMean, *, i2s2, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, )]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, u, =, is, *]
[*, i2s2, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, u, =]
[*, xMinusMean, *, i2s2, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double]
[*, xMinusMean, *, i2s2, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double]
[*, i2s2, ), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, u, =]
[), ;, }, public, DerivativeStructure, value, (, final, DerivativeStructure, t, ), throws, DimensionMismatchException, {, final, double, u, =, is, *]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double]
[*, (, t, ., getValue, (, ), -, mean, ), ;, double, [, ], f, =, new, double, [, t]
[;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final, double]
[), ;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final]
[-, mean, ), ;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ]]
[., getValue, (, ), -, mean, ), ;, double, [, ], f, =, new, double, [, t, ., getOrder, (]
[), ;, double, [, ], f, =, new, double, [, t, ., getOrder, (, ), +, 1, ], ;, final]
[;, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, p, [, 0, ], =]
[], ;, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, p, [, 0, ]]
[+, 1, ], ;, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, p, []
[., getOrder, (, ), +, 1, ], ;, final, double, [, ], p, =, new, double, [, f, ., length]
[], ;, final, double, [, ], p, =, new, double, [, f, ., length, ], ;, p, [, 0, ]]
[;, p, [, 0, ], =, 1, ;, final, double, u2, =, u, *, u, ;, double, coeff, =, norm]
[], ;, p, [, 0, ], =, 1, ;, final, double, u2, =, u, *, u, ;, double, coeff, =]
[., length, ], ;, p, [, 0, ], =, 1, ;, final, double, u2, =, u, *, u, ;, double]
[=, 1, ;, final, double, u2, =, u, *, u, ;, double, coeff, =, norm, *, FastMath, ., exp, (]
[[, 0, ], =, 1, ;, final, double, u2, =, u, *, u, ;, double, coeff, =, norm, *, FastMath]
[], =, 1, ;, final, double, u2, =, u, *, u, ;, double, coeff, =, norm, *, FastMath, ., exp]
[;, final, double, u2, =, u, *, u, ;, double, coeff, =, norm, *, FastMath, ., exp, (, -, 0.5]
[;, double, coeff, =, norm, *, FastMath, ., exp, (, -, 0.5, *, u2, ), ;, if, (, coeff, <=]
[*, u, ;, double, coeff, =, norm, *, FastMath, ., exp, (, -, 0.5, *, u2, ), ;, if, (]
[;, double, coeff, =, norm, *, FastMath, ., exp, (, -, 0.5, *, u2, ), ;, if, (, coeff, <=]
[;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0, ), ;, }]
[*, FastMath, ., exp, (, -, 0.5, *, u2, ), ;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {]
[;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0, ), ;, }]
[., exp, (, -, 0.5, *, u2, ), ;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {, Arrays, .]
[), ;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0, ), ;]
[*, u2, ), ;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0]
[*, u2, ), ;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0]
[), ;, if, (, coeff, <=, Precision, ., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0, ), ;]
[), {, Arrays, ., fill, (, f, ,, 0.0, ), ;, }, else, {, f, [, 0, ], =, coeff]
[<=, Precision, ., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0, ), ;, }, else, {, f, []
[), {, Arrays, ., fill, (, f, ,, 0.0, ), ;, }, else, {, f, [, 0, ], =, coeff]
[., SAFE_MIN, ), {, Arrays, ., fill, (, f, ,, 0.0, ), ;, }, else, {, f, [, 0, ]]
[;, }, else, {, f, [, 0, ], =, coeff, ;, for, (, int, n, =, 1, ;, n, <]
[., fill, (, f, ,, 0.0, ), ;, }, else, {, f, [, 0, ], =, coeff, ;, for, (]
[,, 0.0, ), ;, }, else, {, f, [, 0, ], =, coeff, ;, for, (, int, n, =, 1]
[), ;, }, else, {, f, [, 0, ], =, coeff, ;, for, (, int, n, =, 1, ;, n]
[=, coeff, ;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++, n, ), {]
[[, 0, ], =, coeff, ;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++]
[], =, coeff, ;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++, n, )]
[;, for, (, int, n, =, 1, ;, n, <, f, ., length, ;, ++, n, ), {, double, v]
[;, n, <, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ]]
[;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, -, p, [, n, -]
[<, f, ., length, ;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, -]
[;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, -, p, [, n, -]
[., length, ;, ++, n, ), {, double, v, =, 0, ;, p, [, n, ], =, -, p, []
[), {, double, v, =, 0, ;, p, [, n, ], =, -, p, [, n, -, 1, ], ;]
[), {, double, v, =, 0, ;, p, [, n, ], =, -, p, [, n, -, 1, ], ;]
[;, p, [, n, ], =, -, p, [, n, -, 1, ], ;, for, (, int, k, =, n]
[=, -, p, [, n, -, 1, ], ;, for, (, int, k, =, n, ;, k, >=, 0, ;]
[[, n, ], =, -, p, [, n, -, 1, ], ;, for, (, int, k, =, n, ;, k]
[], =, -, p, [, n, -, 1, ], ;, for, (, int, k, =, n, ;, k, >=, 0]
[;, for, (, int, k, =, n, ;, k, >=, 0, ;, k, -=, 2, ), {, v, =, v]
[;, for, (, int, k, =, n, ;, k, >=, 0, ;, k, -=, 2, ), {, v, =, v]
[[, n, -, 1, ], ;, for, (, int, k, =, n, ;, k, >=, 0, ;, k, -=, 2]
[], ;, for, (, int, k, =, n, ;, k, >=, 0, ;, k, -=, 2, ), {, v, =]
[-, 1, ], ;, for, (, int, k, =, n, ;, k, >=, 0, ;, k, -=, 2, ), {]
[], ;, for, (, int, k, =, n, ;, k, >=, 0, ;, k, -=, 2, ), {, v, =]
[;, k, >=, 0, ;, k, -=, 2, ), {, v, =, v, *, u2, +, p, [, k, ]]
[;, k, -=, 2, ), {, v, =, v, *, u2, +, p, [, k, ], ;, if, (, k]
[>=, 0, ;, k, -=, 2, ), {, v, =, v, *, u2, +, p, [, k, ], ;, if]
[;, k, -=, 2, ), {, v, =, v, *, u2, +, p, [, k, ], ;, if, (, k]
[-=, 2, ), {, v, =, v, *, u2, +, p, [, k, ], ;, if, (, k, >, 2]
[), {, v, =, v, *, u2, +, p, [, k, ], ;, if, (, k, >, 2, ), {]
[=, v, *, u2, +, p, [, k, ], ;, if, (, k, >, 2, ), {, p, [, k]
[;, if, (, k, >, 2, ), {, p, [, k, -, 2, ], =, (, k, -, 1, )]
[+, p, [, k, ], ;, if, (, k, >, 2, ), {, p, [, k, -, 2, ], =]
[*, u2, +, p, [, k, ], ;, if, (, k, >, 2, ), {, p, [, k, -, 2]
[+, p, [, k, ], ;, if, (, k, >, 2, ), {, p, [, k, -, 2, ], =]
[;, if, (, k, >, 2, ), {, p, [, k, -, 2, ], =, (, k, -, 1, )]
[[, k, ], ;, if, (, k, >, 2, ), {, p, [, k, -, 2, ], =, (, k]
[], ;, if, (, k, >, 2, ), {, p, [, k, -, 2, ], =, (, k, -, 1]
[), {, p, [, k, -, 2, ], =, (, k, -, 1, ), *, p, [, k, -, 1]
[>, 2, ), {, p, [, k, -, 2, ], =, (, k, -, 1, ), *, p, [, k]
[), {, p, [, k, -, 2, ], =, (, k, -, 1, ), *, p, [, k, -, 1]
[=, (, k, -, 1, ), *, p, [, k, -, 1, ], -, p, [, k, -, 3, ]]
[[, k, -, 2, ], =, (, k, -, 1, ), *, p, [, k, -, 1, ], -, p]
[], =, (, k, -, 1, ), *, p, [, k, -, 1, ], -, p, [, k, -, 3]
[-, 2, ], =, (, k, -, 1, ), *, p, [, k, -, 1, ], -, p, [, k]
[], =, (, k, -, 1, ), *, p, [, k, -, 1, ], -, p, [, k, -, 3]
[;, }, else, if, (, k, ==, 2, ), {, p, [, 0, ], =, p, [, 1, ], ;]
[-, p, [, k, -, 3, ], ;, }, else, if, (, k, ==, 2, ), {, p, [, 0]
[*, p, [, k, -, 1, ], -, p, [, k, -, 3, ], ;, }, else, if, (, k]
[), *, p, [, k, -, 1, ], -, p, [, k, -, 3, ], ;, }, else, if, (]
[-, 1, ), *, p, [, k, -, 1, ], -, p, [, k, -, 3, ], ;, }, else]
[), *, p, [, k, -, 1, ], -, p, [, k, -, 3, ], ;, }, else, if, (]
[-, p, [, k, -, 3, ], ;, }, else, if, (, k, ==, 2, ), {, p, [, 0]
[[, k, -, 1, ], -, p, [, k, -, 3, ], ;, }, else, if, (, k, ==, 2]
[], -, p, [, k, -, 3, ], ;, }, else, if, (, k, ==, 2, ), {, p, []
[-, 1, ], -, p, [, k, -, 3, ], ;, }, else, if, (, k, ==, 2, ), {]
[], -, p, [, k, -, 3, ], ;, }, else, if, (, k, ==, 2, ), {, p, []
[;, }, else, if, (, k, ==, 2, ), {, p, [, 0, ], =, p, [, 1, ], ;]
[[, k, -, 3, ], ;, }, else, if, (, k, ==, 2, ), {, p, [, 0, ], =]
[], ;, }, else, if, (, k, ==, 2, ), {, p, [, 0, ], =, p, [, 1, ]]
[-, 3, ], ;, }, else, if, (, k, ==, 2, ), {, p, [, 0, ], =, p, []
[], ;, }, else, if, (, k, ==, 2, ), {, p, [, 0, ], =, p, [, 1, ]]
[), {, p, [, 0, ], =, p, [, 1, ], ;, }, }, if, (, (, n, &, 0x1]
[==, 2, ), {, p, [, 0, ], =, p, [, 1, ], ;, }, }, if, (, (, n]
[), {, p, [, 0, ], =, p, [, 1, ], ;, }, }, if, (, (, n, &, 0x1]
[=, p, [, 1, ], ;, }, }, if, (, (, n, &, 0x1, ), ==, 1, ), {, v]
[[, 0, ], =, p, [, 1, ], ;, }, }, if, (, (, n, &, 0x1, ), ==, 1]
[], =, p, [, 1, ], ;, }, }, if, (, (, n, &, 0x1, ), ==, 1, ), {]
[;, }, }, if, (, (, n, &, 0x1, ), ==, 1, ), {, v, *=, u, ;, }, coeff]
[[, 1, ], ;, }, }, if, (, (, n, &, 0x1, ), ==, 1, ), {, v, *=, u]
[], ;, }, }, if, (, (, n, &, 0x1, ), ==, 1, ), {, v, *=, u, ;, }]
[), {, v, *=, u, ;, }, coeff, *=, is, ;, f, [, n, ], =, coeff, *, v, ;]
[==, 1, ), {, v, *=, u, ;, }, coeff, *=, is, ;, f, [, n, ], =, coeff, *]
[), ==, 1, ), {, v, *=, u, ;, }, coeff, *=, is, ;, f, [, n, ], =, coeff]
[&, 0x1, ), ==, 1, ), {, v, *=, u, ;, }, coeff, *=, is, ;, f, [, n, ]]
[), ==, 1, ), {, v, *=, u, ;, }, coeff, *=, is, ;, f, [, n, ], =, coeff]
[), {, v, *=, u, ;, }, coeff, *=, is, ;, f, [, n, ], =, coeff, *, v, ;]
[*=, u, ;, }, coeff, *=, is, ;, f, [, n, ], =, coeff, *, v, ;, }, }, return]
[;, }, coeff, *=, is, ;, f, [, n, ], =, coeff, *, v, ;, }, }, return, t, .]
[*=, is, ;, f, [, n, ], =, coeff, *, v, ;, }, }, return, t, ., compose, (, f]
[;, f, [, n, ], =, coeff, *, v, ;, }, }, return, t, ., compose, (, f, ), ;]
[=, coeff, *, v, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[[, n, ], =, coeff, *, v, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[], =, coeff, *, v, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[*, v, ;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }, return, t, ., compose, (, f, ), ;, }, }]
[;, }, }]
[., compose, (, f, ), ;, }, }]
[), ;, }, }]
