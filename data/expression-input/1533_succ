[;, if, (, parent, ==, null, ), {, return, null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, )]
[., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, null, ;, }, if, (, NodeUtil, .]
[), {, return, null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, )]
[==, null, ), {, return, null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren]
[), {, return, null, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, )]
[;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, new]
[), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (, parent, ., isFunction, (, )]
[&&, n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if]
[., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,, isExtern]
[), &&, n, ., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else]
[), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (, parent, ., isFunction, (, )]
[., hasChildren, (, ), ), {, return, new, VarDefinition, (, n, ,, isExtern, ), ;, }, else, if, (, parent]
[;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[,, isExtern, ), ;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==]
[), ;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), )]
[., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression]
[), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern]
[==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent]
[., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return]
[), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern]
[), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, !, n, ., getString, (]
[), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, !, n, ., getString, (]
[., isFunctionExpression, (, parent, ), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (]
[), ), {, return, new, NamedFunctionDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, !, n, ., getString]
[;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", ), ), {, return, new]
[,, isExtern, ), ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", ), )]
[), ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", ), ), {, return]
[), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (, parent, ., isAssign, (]
[), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (, parent, ., isAssign, (]
[., equals, (, "", ), ), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if]
[., getString, (, ), ., equals, (, "", ), ), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;]
[), ), {, return, new, FunctionExpressionDefinition, (, parent, ,, isExtern, ), ;, }, }, else, if, (, parent, ., isAssign]
[;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[,, isExtern, ), ;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, )]
[), ;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n]
[), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return, new, AssignmentDefinition, (, parent, ,]
[), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n]
[==, n, ), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey]
[., getFirstChild, (, ), ==, n, ), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if]
[), {, return, new, AssignmentDefinition, (, parent, ,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n]
[;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent]
[,, isExtern, ), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, new]
[), ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (]
[), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild, (, ), ,, isExtern, ), ;, }]
[., isObjectLitKey, (, n, ,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild]
[,, parent, ), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild, (, ), ,, isExtern]
[), ), {, return, new, ObjectLiteralPropertyDefinition, (, parent, ,, n, ,, n, ., getFirstChild, (, ), ,, isExtern, ), ;]
[;, }, else, if, (, parent, ., isParamList, (, ), ), {, Node, function, =, parent, ., getParent, (, )]
[,, n, ,, n, ., getFirstChild, (, ), ,, isExtern, ), ;, }, else, if, (, parent, ., isParamList, (]
[,, n, ., getFirstChild, (, ), ,, isExtern, ), ;, }, else, if, (, parent, ., isParamList, (, ), )]
[,, isExtern, ), ;, }, else, if, (, parent, ., isParamList, (, ), ), {, Node, function, =, parent, .]
[., getFirstChild, (, ), ,, isExtern, ), ;, }, else, if, (, parent, ., isParamList, (, ), ), {, Node]
[), ;, }, else, if, (, parent, ., isParamList, (, ), ), {, Node, function, =, parent, ., getParent, (]
[), {, Node, function, =, parent, ., getParent, (, ), ;, return, new, FunctionArgumentDefinition, (, function, ,, n, ,, isExtern]
[., isParamList, (, ), ), {, Node, function, =, parent, ., getParent, (, ), ;, return, new, FunctionArgumentDefinition, (, function]
[;, return, new, FunctionArgumentDefinition, (, function, ,, n, ,, isExtern, ), ;, }, return, null, ;, }, static, boolean, isDefinitionNode]
[., getParent, (, ), ;, return, new, FunctionArgumentDefinition, (, function, ,, n, ,, isExtern, ), ;, }, return, null, ;]
[;, }, return, null, ;, }, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =, n, ., getParent]
[,, n, ,, isExtern, ), ;, }, return, null, ;, }, static, boolean, isDefinitionNode, (, Node, n, ), {, Node]
[,, isExtern, ), ;, }, return, null, ;, }, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =]
[), ;, }, return, null, ;, }, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =, n, .]
[;, }, static, boolean, isDefinitionNode, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, if]
[;, if, (, parent, ==, null, ), {, return, false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, )]
[., getParent, (, ), ;, if, (, parent, ==, null, ), {, return, false, ;, }, if, (, NodeUtil, .]
[), {, return, false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, )]
[==, null, ), {, return, false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren]
[), {, return, false, ;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, )]
[;, }, if, (, NodeUtil, ., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, true]
[), {, return, true, ;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, )]
[&&, n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, parent, ., isFunction, (, )]
[., isVarDeclaration, (, n, ), &&, n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (]
[), &&, n, ., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, parent, ., isFunction, (]
[), {, return, true, ;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, )]
[., hasChildren, (, ), ), {, return, true, ;, }, else, if, (, parent, ., isFunction, (, ), &&, parent]
[;, }, else, if, (, parent, ., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), )]
[., isFunction, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression]
[), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (]
[==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else]
[., getFirstChild, (, ), ==, n, ), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return]
[), {, if, (, !, NodeUtil, ., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (]
[), {, return, true, ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", )]
[), {, return, true, ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", )]
[., isFunctionExpression, (, parent, ), ), {, return, true, ;, }, else, if, (, !, n, ., getString, (, )]
[), ), {, return, true, ;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, ""]
[;, }, else, if, (, !, n, ., getString, (, ), ., equals, (, "", ), ), {, return, true]
[), {, return, true, ;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (]
[), {, return, true, ;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (]
[., equals, (, "", ), ), {, return, true, ;, }, }, else, if, (, parent, ., isAssign, (, )]
[., getString, (, ), ., equals, (, "", ), ), {, return, true, ;, }, }, else, if, (, parent]
[), ), {, return, true, ;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild]
[;, }, }, else, if, (, parent, ., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, )]
[), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey]
[., isAssign, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, return, true, ;, }, else, if]
[), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return]
[==, n, ), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), )]
[., getFirstChild, (, ), ==, n, ), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n]
[), {, return, true, ;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return]
[;, }, else, if, (, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, else]
[), {, return, true, ;, }, else, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }]
[., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, else, if, (, parent, ., isParamList, (]
[,, parent, ), ), {, return, true, ;, }, else, if, (, parent, ., isParamList, (, ), ), {, return]
[), ), {, return, true, ;, }, else, if, (, parent, ., isParamList, (, ), ), {, return, true, ;]
[;, }, else, if, (, parent, ., isParamList, (, ), ), {, return, true, ;, }, return, false, ;, }]
[), {, return, true, ;, }, return, false, ;, }, static, abstract, class, Definition, {, private, final, boolean, isExtern, ;]
[., isParamList, (, ), ), {, return, true, ;, }, return, false, ;, }, static, abstract, class, Definition, {, private]
[;, }, return, false, ;, }, static, abstract, class, Definition, {, private, final, boolean, isExtern, ;, Definition, (, boolean, isExtern]
[;, }, static, abstract, class, Definition, {, private, final, boolean, isExtern, ;, Definition, (, boolean, isExtern, ), {, this, .]
[=, isExtern, ;, }, public, void, remove, (, ), {, if, (, !, isExtern, ), {, performRemove, (, ), ;]
[., isExtern, =, isExtern, ;, }, public, void, remove, (, ), {, if, (, !, isExtern, ), {, performRemove, (]
[;, }, public, void, remove, (, ), {, if, (, !, isExtern, ), {, performRemove, (, ), ;, }, else]
[), {, performRemove, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Attempt to remove() an extern", +, " definition.", ), ;, }, }]
[), {, performRemove, (, ), ;, }, else, {, throw, new, IllegalStateException, (, "Attempt to remove() an extern", +, " definition.", ), ;, }, }]
[;, }, else, {, throw, new, IllegalStateException, (, "Attempt to remove() an extern", +, " definition.", ), ;, }, }, protected, abstract, void, performRemove, (]
[;, }, }, protected, abstract, void, performRemove, (, ), ;, public, abstract, Node, getLValue, (, ), ;, public, abstract, Node]
[), ;, }, }, protected, abstract, void, performRemove, (, ), ;, public, abstract, Node, getLValue, (, ), ;, public, abstract]
[+, " definition.", ), ;, }, }, protected, abstract, void, performRemove, (, ), ;, public, abstract, Node, getLValue, (, ), ;]
[), ;, }, }, protected, abstract, void, performRemove, (, ), ;, public, abstract, Node, getLValue, (, ), ;, public, abstract]
[;, }, }, abstract, static, class, IncompleteDefinition, extends, Definition, {, private, static, final, Set, <, Integer, >, ALLOWED_TYPES, =, ImmutableSet]
[;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (, inExterns, ), ;]
[., of, (, Token, ., NAME, ,, Token, ., GETPROP, ,, Token, ., GETELEM, ), ;, private, final, Node, lValue]
[,, Token, ., GETPROP, ,, Token, ., GETELEM, ), ;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,]
[., NAME, ,, Token, ., GETPROP, ,, Token, ., GETELEM, ), ;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node]
[,, Token, ., GETELEM, ), ;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {]
[., GETPROP, ,, Token, ., GETELEM, ), ;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns]
[), ;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (, inExterns, )]
[., GETELEM, ), ;, private, final, Node, lValue, ;, IncompleteDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super, (]
[), ;, Preconditions, ., checkNotNull, (, lValue, ), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType]
[;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, .]
[., checkNotNull, (, lValue, ), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), )]
[), ;, Preconditions, ., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token]
[;, this, ., lValue, =, lValue, ;, }, @, Override, public, Node, getLValue, (, ), {, return, lValue, ;, }]
[., checkArgument, (, ALLOWED_TYPES, ., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (]
[,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (, ), ), ), ;, this, ., lValue, =, lValue]
[., contains, (, lValue, ., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (]
[), ,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (, ), ), ), ;, this, ., lValue, =]
[., getType, (, ), ), ,, "Unexpected lValue type %s", ,, Token, ., name, (, lValue, ., getType, (, ), ), ), ;]
[,, Token, ., name, (, lValue, ., getType, (, ), ), ), ;, this, ., lValue, =, lValue, ;, }]
[), ;, this, ., lValue, =, lValue, ;, }, @, Override, public, Node, getLValue, (, ), {, return, lValue, ;]
[., name, (, lValue, ., getType, (, ), ), ), ;, this, ., lValue, =, lValue, ;, }, @, Override]
[), ), ;, this, ., lValue, =, lValue, ;, }, @, Override, public, Node, getLValue, (, ), {, return, lValue]
[., getType, (, ), ), ), ;, this, ., lValue, =, lValue, ;, }, @, Override, public, Node, getLValue, (]
[=, lValue, ;, }, @, Override, public, Node, getLValue, (, ), {, return, lValue, ;, }, @, Override, public, Node]
[., lValue, =, lValue, ;, }, @, Override, public, Node, getLValue, (, ), {, return, lValue, ;, }, @, Override]
[;, }, @, Override, public, Node, getLValue, (, ), {, return, lValue, ;, }, @, Override, public, Node, getRValue, (]
[;, }, @, Override, public, Node, getRValue, (, ), {, return, null, ;, }, }, static, final, class, UnknownDefinition, extends]
[;, }, }, static, final, class, UnknownDefinition, extends, IncompleteDefinition, {, UnknownDefinition, (, Node, lValue, ,, boolean, inExterns, ), {, super]
[,, inExterns, ), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (, "Can't remove an UnknownDefinition", ), ;]
[), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (, "Can't remove an UnknownDefinition", ), ;, }, }]
[;, }, }, static, final, class, ExternalNameOnlyDefinition, extends, IncompleteDefinition, {, ExternalNameOnlyDefinition, (, Node, lValue, ), {, super, (, lValue, ,]
[), ;, }, }, static, final, class, ExternalNameOnlyDefinition, extends, IncompleteDefinition, {, ExternalNameOnlyDefinition, (, Node, lValue, ), {, super, (, lValue]
[,, true, ), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (, "Can't remove external name-only definition", ), ;]
[), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (, "Can't remove external name-only definition", ), ;, }, }]
[;, }, }, static, final, class, FunctionArgumentDefinition, extends, IncompleteDefinition, {, FunctionArgumentDefinition, (, Node, function, ,, Node, argumentName, ,, boolean, inExterns]
[), ;, }, }, static, final, class, FunctionArgumentDefinition, extends, IncompleteDefinition, {, FunctionArgumentDefinition, (, Node, function, ,, Node, argumentName, ,, boolean]
[,, inExterns, ), ;, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, argumentName]
[), ;, Preconditions, ., checkArgument, (, function, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, argumentName, ., isName]
[;, Preconditions, ., checkArgument, (, argumentName, ., isName, (, ), ), ;, }, @, Override, public, void, performRemove, (, )]
[., checkArgument, (, function, ., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, argumentName, ., isName, (, ), )]
[), ;, Preconditions, ., checkArgument, (, argumentName, ., isName, (, ), ), ;, }, @, Override, public, void, performRemove, (]
[., isFunction, (, ), ), ;, Preconditions, ., checkArgument, (, argumentName, ., isName, (, ), ), ;, }, @, Override]
[;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (, "Can't remove a FunctionArgumentDefinition", ), ;, }, }, abstract]
[., checkArgument, (, argumentName, ., isName, (, ), ), ;, }, @, Override, public, void, performRemove, (, ), {, throw]
[), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (, "Can't remove a FunctionArgumentDefinition", ), ;, }, }]
[., isName, (, ), ), ;, }, @, Override, public, void, performRemove, (, ), {, throw, new, IllegalArgumentException, (, "Can't remove a FunctionArgumentDefinition"]
[;, }, }, abstract, static, class, FunctionDefinition, extends, Definition, {, protected, final, Node, function, ;, FunctionDefinition, (, Node, node, ,]
[), ;, }, }, abstract, static, class, FunctionDefinition, extends, Definition, {, protected, final, Node, function, ;, FunctionDefinition, (, Node, node]
[), ;, Preconditions, ., checkArgument, (, node, ., isFunction, (, ), ), ;, function, =, node, ;, }, @, Override]
[;, function, =, node, ;, }, @, Override, public, Node, getLValue, (, ), {, return, function, ., getFirstChild, (, )]
[., checkArgument, (, node, ., isFunction, (, ), ), ;, function, =, node, ;, }, @, Override, public, Node, getLValue]
[), ;, function, =, node, ;, }, @, Override, public, Node, getLValue, (, ), {, return, function, ., getFirstChild, (]
[., isFunction, (, ), ), ;, function, =, node, ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[=, node, ;, }, @, Override, public, Node, getLValue, (, ), {, return, function, ., getFirstChild, (, ), ;, }]
[;, }, @, Override, public, Node, getLValue, (, ), {, return, function, ., getFirstChild, (, ), ;, }, @, Override]
[;, }, @, Override, public, Node, getRValue, (, ), {, return, function, ;, }, }, static, final, class, NamedFunctionDefinition, extends]
[., getFirstChild, (, ), ;, }, @, Override, public, Node, getRValue, (, ), {, return, function, ;, }, }, static]
[;, }, }, static, final, class, NamedFunctionDefinition, extends, FunctionDefinition, {, NamedFunctionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super]
[,, inExterns, ), ;, }, @, Override, public, void, performRemove, (, ), {, function, ., detachFromParent, (, ), ;, }]
[), ;, }, @, Override, public, void, performRemove, (, ), {, function, ., detachFromParent, (, ), ;, }, }, static]
[;, }, }, static, final, class, FunctionExpressionDefinition, extends, FunctionDefinition, {, FunctionExpressionDefinition, (, Node, node, ,, boolean, inExterns, ), {, super]
[., detachFromParent, (, ), ;, }, }, static, final, class, FunctionExpressionDefinition, extends, FunctionDefinition, {, FunctionExpressionDefinition, (, Node, node, ,, boolean]
[,, inExterns, ), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isFunctionExpression, (, node, ), ), ;, }, @, Override, public]
[), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isFunctionExpression, (, node, ), ), ;, }, @, Override, public, void, performRemove]
[;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (, function, ., getFirstChild, (, ), ,]
[., checkArgument, (, NodeUtil, ., isFunctionExpression, (, node, ), ), ;, }, @, Override, public, void, performRemove, (, ), {]
[), ;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (, function, ., getFirstChild, (, )]
[., isFunctionExpression, (, node, ), ), ;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (]
[), ), ;, }, @, Override, public, void, performRemove, (, ), {, function, ., replaceChild, (, function, ., getFirstChild, (]
[;, }, }, static, final, class, AssignmentDefinition, extends, Definition, {, private, final, Node, assignment, ;, AssignmentDefinition, (, Node, node, ,]
[., replaceChild, (, function, ., getFirstChild, (, ), ,, IR, ., name, (, "", ), ), ;, }, }, static]
[,, IR, ., name, (, "", ), ), ;, }, }, static, final, class, AssignmentDefinition, extends, Definition, {, private, final]
[., getFirstChild, (, ), ,, IR, ., name, (, "", ), ), ;, }, }, static, final, class, AssignmentDefinition, extends]
[), ;, }, }, static, final, class, AssignmentDefinition, extends, Definition, {, private, final, Node, assignment, ;, AssignmentDefinition, (, Node, node]
[., name, (, "", ), ), ;, }, }, static, final, class, AssignmentDefinition, extends, Definition, {, private, final, Node, assignment]
[), ), ;, }, }, static, final, class, AssignmentDefinition, extends, Definition, {, private, final, Node, assignment, ;, AssignmentDefinition, (, Node]
[), ;, Preconditions, ., checkArgument, (, node, ., isAssign, (, ), ), ;, assignment, =, node, ;, }, @, Override]
[;, assignment, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, parent, =, assignment, ., getParent]
[., checkArgument, (, node, ., isAssign, (, ), ), ;, assignment, =, node, ;, }, @, Override, public, void, performRemove]
[), ;, assignment, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, parent, =, assignment, .]
[., isAssign, (, ), ), ;, assignment, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node]
[=, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, parent, =, assignment, ., getParent, (, )]
[;, }, @, Override, public, void, performRemove, (, ), {, Node, parent, =, assignment, ., getParent, (, ), ;, Node]
[;, Node, last, =, assignment, ., getLastChild, (, ), ;, assignment, ., removeChild, (, last, ), ;, parent, ., replaceChild]
[., getParent, (, ), ;, Node, last, =, assignment, ., getLastChild, (, ), ;, assignment, ., removeChild, (, last, )]
[;, assignment, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, assignment, ,, last, ), ;, }, @, Override]
[., getLastChild, (, ), ;, assignment, ., removeChild, (, last, ), ;, parent, ., replaceChild, (, assignment, ,, last, )]
[;, parent, ., replaceChild, (, assignment, ,, last, ), ;, }, @, Override, public, Node, getLValue, (, ), {, return]
[., removeChild, (, last, ), ;, parent, ., replaceChild, (, assignment, ,, last, ), ;, }, @, Override, public, Node]
[), ;, parent, ., replaceChild, (, assignment, ,, last, ), ;, }, @, Override, public, Node, getLValue, (, ), {]
[;, }, @, Override, public, Node, getLValue, (, ), {, return, assignment, ., getFirstChild, (, ), ;, }, @, Override]
[., replaceChild, (, assignment, ,, last, ), ;, }, @, Override, public, Node, getLValue, (, ), {, return, assignment, .]
[,, last, ), ;, }, @, Override, public, Node, getLValue, (, ), {, return, assignment, ., getFirstChild, (, ), ;]
[), ;, }, @, Override, public, Node, getLValue, (, ), {, return, assignment, ., getFirstChild, (, ), ;, }, @]
[;, }, @, Override, public, Node, getRValue, (, ), {, return, assignment, ., getLastChild, (, ), ;, }, }, static]
[., getFirstChild, (, ), ;, }, @, Override, public, Node, getRValue, (, ), {, return, assignment, ., getLastChild, (, )]
[;, }, }, static, final, class, ObjectLiteralPropertyDefinition, extends, Definition, {, private, final, Node, literal, ;, private, final, Node, name, ;]
[., getLastChild, (, ), ;, }, }, static, final, class, ObjectLiteralPropertyDefinition, extends, Definition, {, private, final, Node, literal, ;, private]
[), ;, this, ., literal, =, lit, ;, this, ., name, =, name, ;, this, ., value, =, value, ;]
[=, lit, ;, this, ., name, =, name, ;, this, ., value, =, value, ;, }, @, Override, public, void]
[., literal, =, lit, ;, this, ., name, =, name, ;, this, ., value, =, value, ;, }, @, Override]
[;, this, ., name, =, name, ;, this, ., value, =, value, ;, }, @, Override, public, void, performRemove, (]
[=, name, ;, this, ., value, =, value, ;, }, @, Override, public, void, performRemove, (, ), {, literal, .]
[., name, =, name, ;, this, ., value, =, value, ;, }, @, Override, public, void, performRemove, (, ), {]
[;, this, ., value, =, value, ;, }, @, Override, public, void, performRemove, (, ), {, literal, ., removeChild, (]
[=, value, ;, }, @, Override, public, void, performRemove, (, ), {, literal, ., removeChild, (, name, ), ;, }]
[., value, =, value, ;, }, @, Override, public, void, performRemove, (, ), {, literal, ., removeChild, (, name, )]
[;, }, @, Override, public, void, performRemove, (, ), {, literal, ., removeChild, (, name, ), ;, }, @, Override]
[;, }, @, Override, public, Node, getLValue, (, ), {, switch, (, name, ., getType, (, ), ), {, case]
[., removeChild, (, name, ), ;, }, @, Override, public, Node, getLValue, (, ), {, switch, (, name, ., getType]
[), ;, }, @, Override, public, Node, getLValue, (, ), {, switch, (, name, ., getType, (, ), ), {]
[), {, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, .]
[., getType, (, ), ), {, case, Token, ., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY]
[:, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (]
[., SETTER_DEF, :, case, Token, ., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, .]
[:, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,, IR, ., string]
[., GETTER_DEF, :, case, Token, ., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,, IR]
[:, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,, IR, ., string, (, name, ., getString, (]
[., STRING_KEY, :, return, IR, ., getprop, (, IR, ., objectlit, (, ), ,, IR, ., string, (, name, .]
[;, default, :, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, @, Override, public, Node, getRValue, (, ), {]
[., getprop, (, IR, ., objectlit, (, ), ,, IR, ., string, (, name, ., getString, (, ), ), )]
[,, IR, ., string, (, name, ., getString, (, ), ), ), ;, default, :, throw, new, IllegalStateException, (, "unexpected"]
[., objectlit, (, ), ,, IR, ., string, (, name, ., getString, (, ), ), ), ;, default, :, throw]
[), ;, default, :, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, @, Override, public, Node, getRValue, (, )]
[., string, (, name, ., getString, (, ), ), ), ;, default, :, throw, new, IllegalStateException, (, "unexpected", ), ;]
[), ), ;, default, :, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, @, Override, public, Node, getRValue, (]
[., getString, (, ), ), ), ;, default, :, throw, new, IllegalStateException, (, "unexpected", ), ;, }, }, @, Override]
[;, }, }, @, Override, public, Node, getRValue, (, ), {, return, value, ;, }, }, static, final, class, VarDefinition]
[), ;, }, }, @, Override, public, Node, getRValue, (, ), {, return, value, ;, }, }, static, final, class]
[;, }, }, static, final, class, VarDefinition, extends, Definition, {, private, final, Node, name, ;, VarDefinition, (, Node, node, ,]
[), ;, Preconditions, ., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (, node, .]
[;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), ), ;]
[., checkArgument, (, NodeUtil, ., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, )]
[), ;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), )]
[., isVarDeclaration, (, node, ), ), ;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node]
[), ), ;, Preconditions, ., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, )]
[;, name, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent]
[., checkArgument, (, node, ., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), ), ;, name, =]
[,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), ), ;, name, =, node, ;, }, @, Override, public, void, performRemove]
[., hasChildren, (, ), ,, "VAR Declaration of %sshould be assigned a value.", ,, node, ., getString, (, ), ), ;, name, =, node, ;, }, @]
[,, node, ., getString, (, ), ), ;, name, =, node, ;, }, @, Override, public, void, performRemove, (, )]
[), ;, name, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =, name, .]
[., getString, (, ), ), ;, name, =, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node]
[=, node, ;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent, (, )]
[;, }, @, Override, public, void, performRemove, (, ), {, Node, var, =, name, ., getParent, (, ), ;, Preconditions]
[;, Preconditions, ., checkState, (, var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, ), ,, "AST should be normalized first", ), ;]
[., getParent, (, ), ;, Preconditions, ., checkState, (, var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, )]
[;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions]
[., checkState, (, var, ., getFirstChild, (, ), ==, var, ., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent]
[,, "AST should be normalized first", ), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (]
[==, var, ., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent, =, var, ., getParent, (, ), ;, Node]
[., getFirstChild, (, ), ==, var, ., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent, =, var, ., getParent]
[,, "AST should be normalized first", ), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (]
[., getLastChild, (, ), ,, "AST should be normalized first", ), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =]
[), ;, Node, parent, =, var, ., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;]
[;, Node, rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !, parent, ., isFor, (, )]
[., getParent, (, ), ;, Node, rValue, =, name, ., removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !, parent]
[;, Preconditions, ., checkState, (, !, parent, ., isFor, (, ), ), ;, parent, ., replaceChild, (, var, ,, NodeUtil]
[., removeFirstChild, (, ), ;, Preconditions, ., checkState, (, !, parent, ., isFor, (, ), ), ;, parent, ., replaceChild]
[;, parent, ., replaceChild, (, var, ,, NodeUtil, ., newExpr, (, rValue, ), ), ;, }, @, Override, public, Node]
[., checkState, (, !, parent, ., isFor, (, ), ), ;, parent, ., replaceChild, (, var, ,, NodeUtil, ., newExpr]
[), ;, parent, ., replaceChild, (, var, ,, NodeUtil, ., newExpr, (, rValue, ), ), ;, }, @, Override, public]
[), ;, parent, ., replaceChild, (, var, ,, NodeUtil, ., newExpr, (, rValue, ), ), ;, }, @, Override, public]
[., isFor, (, ), ), ;, parent, ., replaceChild, (, var, ,, NodeUtil, ., newExpr, (, rValue, ), ), ;]
[;, }, @, Override, public, Node, getLValue, (, ), {, return, name, ;, }, @, Override, public, Node, getRValue, (]
[., replaceChild, (, var, ,, NodeUtil, ., newExpr, (, rValue, ), ), ;, }, @, Override, public, Node, getLValue, (]
[,, NodeUtil, ., newExpr, (, rValue, ), ), ;, }, @, Override, public, Node, getLValue, (, ), {, return, name]
[), ;, }, @, Override, public, Node, getLValue, (, ), {, return, name, ;, }, @, Override, public, Node, getRValue]
[., newExpr, (, rValue, ), ), ;, }, @, Override, public, Node, getLValue, (, ), {, return, name, ;, }]
[), ), ;, }, @, Override, public, Node, getLValue, (, ), {, return, name, ;, }, @, Override, public, Node]
[;, }, @, Override, public, Node, getRValue, (, ), {, return, name, ., getFirstChild, (, ), ;, }, }, }]
[;, }, }, }]
[., getFirstChild, (, ), ;, }, }, }]
