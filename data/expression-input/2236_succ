[;, public, static, final, Range, DEFAULT_RANGE, =, new, Range, (, 0.0, ,, 1.0, ), ;, public, static, final, boolean, DEFAULT_AUTO_RANGE]
[;, public, static, final, boolean, DEFAULT_AUTO_RANGE, =, true, ;, public, static, final, boolean, DEFAULT_INVERTED, =, false, ;, public, static, final]
[,, 1.0, ), ;, public, static, final, boolean, DEFAULT_AUTO_RANGE, =, true, ;, public, static, final, boolean, DEFAULT_INVERTED, =, false, ;]
[), ;, public, static, final, boolean, DEFAULT_AUTO_RANGE, =, true, ;, public, static, final, boolean, DEFAULT_INVERTED, =, false, ;, public, static]
[;, public, static, final, boolean, DEFAULT_INVERTED, =, false, ;, public, static, final, double, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, =, 0.00000001, ;, public, static, final]
[;, public, static, final, double, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, =, 0.00000001, ;, public, static, final, double, DEFAULT_LOWER_MARGIN, =, 0.05, ;, public, static, final]
[;, public, static, final, double, DEFAULT_LOWER_MARGIN, =, 0.05, ;, public, static, final, double, DEFAULT_UPPER_MARGIN, =, 0.05, ;, public, static, final]
[;, public, static, final, double, DEFAULT_UPPER_MARGIN, =, 0.05, ;, public, static, final, boolean, DEFAULT_AUTO_TICK_UNIT_SELECTION, =, true, ;, public, static, final]
[;, public, static, final, boolean, DEFAULT_AUTO_TICK_UNIT_SELECTION, =, true, ;, public, static, final, int, MAXIMUM_TICK_COUNT, =, 500, ;, private, boolean, positiveArrowVisible]
[;, public, static, final, int, MAXIMUM_TICK_COUNT, =, 500, ;, private, boolean, positiveArrowVisible, ;, private, boolean, negativeArrowVisible, ;, private, transient, Shape]
[;, private, boolean, positiveArrowVisible, ;, private, boolean, negativeArrowVisible, ;, private, transient, Shape, upArrow, ;, private, transient, Shape, downArrow, ;, private]
[), ;, this, ., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;]
[=, false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE]
[., positiveArrowVisible, =, false, ;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange]
[;, this, ., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this]
[=, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE]
[., negativeArrowVisible, =, false, ;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange]
[;, this, ., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this]
[=, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED]
[., range, =, DEFAULT_RANGE, ;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted]
[;, this, ., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this]
[=, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE]
[., autoRange, =, DEFAULT_AUTO_RANGE, ;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize]
[;, this, ., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this]
[=, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN]
[., defaultAutoRange, =, DEFAULT_RANGE, ;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin]
[;, this, ., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this]
[=, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN]
[., inverted, =, DEFAULT_INVERTED, ;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin]
[;, this, ., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this]
[=, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0]
[., autoRangeMinimumSize, =, DEFAULT_AUTO_RANGE_MINIMUM_SIZE, ;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange]
[;, this, ., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this]
[=, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION]
[., lowerMargin, =, DEFAULT_LOWER_MARGIN, ;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection]
[;, this, ., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this]
[=, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits]
[., upperMargin, =, DEFAULT_UPPER_MARGIN, ;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits]
[;, this, ., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon]
[=, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon]
[., fixedAutoRange, =, 0.0, ;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =]
[;, this, ., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, )]
[=, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint]
[., autoTickUnitSelection, =, DEFAULT_AUTO_TICK_UNIT_SELECTION, ;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1]
[;, this, ., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0]
[=, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0, ), ;]
[., standardTickUnits, =, standardTickUnits, ;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0]
[;, Polygon, p1, =, new, Polygon, (, ), ;, p1, ., addPoint, (, 0, ,, 0, ), ;, p1, .]
[;, p1, ., addPoint, (, 0, ,, 0, ), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;]
[;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, ), ;]
[., addPoint, (, 0, ,, 0, ), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, .]
[,, 0, ), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,]
[), ;, p1, ., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, )]
[;, p1, ., addPoint, (, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new]
[., addPoint, (, -, 2, ,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, ), ;, this, .]
[,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon]
[,, 2, ), ;, p1, ., addPoint, (, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon]
[), ;, p1, ., addPoint, (, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =]
[;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0]
[., addPoint, (, 2, ,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (]
[,, 2, ), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, .]
[), ;, this, ., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (]
[=, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;]
[., upArrow, =, p1, ;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0]
[;, Polygon, p2, =, new, Polygon, (, ), ;, p2, ., addPoint, (, 0, ,, 0, ), ;, p2, .]
[;, p2, ., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (, -, 2, ,, -, 2, )]
[;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -, 2]
[., addPoint, (, 0, ,, 0, ), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;, p2]
[,, 0, ), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2]
[), ;, p2, ., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -]
[;, p2, ., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =]
[., addPoint, (, -, 2, ,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;]
[,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =, p2]
[,, -, 2, ), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =, p2]
[), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3]
[), ;, p2, ., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3]
[;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0]
[., addPoint, (, 2, ,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon]
[,, -, 2, ), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3]
[), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (]
[), ;, this, ., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (]
[=, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;]
[., downArrow, =, p2, ;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0]
[;, Polygon, p3, =, new, Polygon, (, ), ;, p3, ., addPoint, (, 0, ,, 0, ), ;, p3, .]
[;, p3, ., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -, 2, )]
[;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,, 2]
[., addPoint, (, 0, ,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;, p3]
[,, 0, ), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -]
[), ;, p3, ., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,]
[;, p3, ., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =]
[., addPoint, (, -, 2, ,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;]
[,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =, p3]
[,, -, 2, ), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =, p3]
[), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4]
[), ;, p3, ., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4]
[;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0]
[., addPoint, (, -, 2, ,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon]
[,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, .]
[,, 2, ), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, .]
[), ;, this, ., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (]
[=, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0, ), ;]
[., rightArrow, =, p3, ;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0]
[;, Polygon, p4, =, new, Polygon, (, ), ;, p4, ., addPoint, (, 0, ,, 0, ), ;, p4, .]
[;, p4, ., addPoint, (, 0, ,, 0, ), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;]
[;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;]
[., addPoint, (, 0, ,, 0, ), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, .]
[,, 0, ), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,]
[), ;, p4, ., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, )]
[;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =]
[., addPoint, (, 2, ,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, .]
[,, -, 2, ), ;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;]
[), ;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels]
[), ;, p4, ., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels]
[;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;, }]
[., addPoint, (, 2, ,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;]
[,, 2, ), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =]
[), ;, this, ., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;]
[=, p4, ;, this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (]
[., leftArrow, =, p4, ;, this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;, }, public, boolean]
[;, this, ., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {]
[=, false, ;, this, ., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels]
[., verticalTickLabels, =, false, ;, this, ., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {, return, this]
[;, this, ., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels, ;, }]
[=, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (]
[., minorTickCount, =, 0, ;, }, public, boolean, isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels, ;, }, public, void]
[;, }, public, boolean, isVerticalTickLabels, (, ), {, return, this, ., verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag]
[;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (, this, ., verticalTickLabels, !=, flag, ), {, this]
[., verticalTickLabels, ;, }, public, void, setVerticalTickLabels, (, boolean, flag, ), {, if, (, this, ., verticalTickLabels, !=, flag, )]
[), {, this, ., verticalTickLabels, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[!=, flag, ), {, this, ., verticalTickLabels, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[., verticalTickLabels, !=, flag, ), {, this, ., verticalTickLabels, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[), {, this, ., verticalTickLabels, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[=, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isPositiveArrowVisible, (, ), {]
[., verticalTickLabels, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isPositiveArrowVisible, (]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isPositiveArrowVisible, (, ), {, return, this]
[;, }, }, public, boolean, isPositiveArrowVisible, (, ), {, return, this, ., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (, boolean]
[), ;, }, }, public, boolean, isPositiveArrowVisible, (, ), {, return, this, ., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (]
[), ), ;, }, }, public, boolean, isPositiveArrowVisible, (, ), {, return, this, ., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible]
[;, }, public, void, setPositiveArrowVisible, (, boolean, visible, ), {, this, ., positiveArrowVisible, =, visible, ;, notifyListeners, (, new, AxisChangeEvent]
[., positiveArrowVisible, ;, }, public, void, setPositiveArrowVisible, (, boolean, visible, ), {, this, ., positiveArrowVisible, =, visible, ;, notifyListeners, (]
[=, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, boolean, isNegativeArrowVisible, (, ), {, return]
[., positiveArrowVisible, =, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, boolean, isNegativeArrowVisible, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, boolean, isNegativeArrowVisible, (, ), {, return, this, .]
[;, }, public, boolean, isNegativeArrowVisible, (, ), {, return, this, ., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean, visible]
[), ;, }, public, boolean, isNegativeArrowVisible, (, ), {, return, this, ., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean]
[), ), ;, }, public, boolean, isNegativeArrowVisible, (, ), {, return, this, ., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (]
[;, }, public, void, setNegativeArrowVisible, (, boolean, visible, ), {, this, ., negativeArrowVisible, =, visible, ;, notifyListeners, (, new, AxisChangeEvent]
[., negativeArrowVisible, ;, }, public, void, setNegativeArrowVisible, (, boolean, visible, ), {, this, ., negativeArrowVisible, =, visible, ;, notifyListeners, (]
[=, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getUpArrow, (, ), {, return]
[., negativeArrowVisible, =, visible, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getUpArrow, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getUpArrow, (, ), {, return, this, .]
[;, }, public, Shape, getUpArrow, (, ), {, return, this, ., upArrow, ;, }, public, void, setUpArrow, (, Shape, arrow]
[), ;, }, public, Shape, getUpArrow, (, ), {, return, this, ., upArrow, ;, }, public, void, setUpArrow, (, Shape]
[), ), ;, }, public, Shape, getUpArrow, (, ), {, return, this, ., upArrow, ;, }, public, void, setUpArrow, (]
[;, }, public, void, setUpArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException]
[., upArrow, ;, }, public, void, setUpArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., upArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., upArrow, =, arrow, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., upArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., upArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape]
[), ;, }, this, ., upArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getDownArrow, (, ), {, return]
[., upArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getDownArrow, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getDownArrow, (, ), {, return, this, .]
[;, }, public, Shape, getDownArrow, (, ), {, return, this, ., downArrow, ;, }, public, void, setDownArrow, (, Shape, arrow]
[), ;, }, public, Shape, getDownArrow, (, ), {, return, this, ., downArrow, ;, }, public, void, setDownArrow, (, Shape]
[), ), ;, }, public, Shape, getDownArrow, (, ), {, return, this, ., downArrow, ;, }, public, void, setDownArrow, (]
[;, }, public, void, setDownArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException]
[., downArrow, ;, }, public, void, setDownArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., downArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., downArrow, =, arrow, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., downArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., downArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape]
[), ;, }, this, ., downArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getLeftArrow, (, ), {, return]
[., downArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getLeftArrow, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getLeftArrow, (, ), {, return, this, .]
[;, }, public, Shape, getLeftArrow, (, ), {, return, this, ., leftArrow, ;, }, public, void, setLeftArrow, (, Shape, arrow]
[), ;, }, public, Shape, getLeftArrow, (, ), {, return, this, ., leftArrow, ;, }, public, void, setLeftArrow, (, Shape]
[), ), ;, }, public, Shape, getLeftArrow, (, ), {, return, this, ., leftArrow, ;, }, public, void, setLeftArrow, (]
[;, }, public, void, setLeftArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException]
[., leftArrow, ;, }, public, void, setLeftArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., leftArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., leftArrow, =, arrow, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., leftArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., leftArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape]
[), ;, }, this, ., leftArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getRightArrow, (, ), {, return]
[., leftArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getRightArrow, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, Shape, getRightArrow, (, ), {, return, this, .]
[;, }, public, Shape, getRightArrow, (, ), {, return, this, ., rightArrow, ;, }, public, void, setRightArrow, (, Shape, arrow]
[), ;, }, public, Shape, getRightArrow, (, ), {, return, this, ., rightArrow, ;, }, public, void, setRightArrow, (, Shape]
[), ), ;, }, public, Shape, getRightArrow, (, ), {, return, this, ., rightArrow, ;, }, public, void, setRightArrow, (]
[;, }, public, void, setRightArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw, new, IllegalArgumentException]
[., rightArrow, ;, }, public, void, setRightArrow, (, Shape, arrow, ), {, if, (, arrow, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., rightArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., rightArrow, =, arrow, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'arrow' argument.", ), ;, }, this, ., rightArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., rightArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void]
[), ;, }, this, ., rightArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected]
[=, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, drawAxisLine, (, Graphics2D, g2, ,]
[., rightArrow, =, arrow, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, drawAxisLine, (, Graphics2D]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, protected, void, drawAxisLine, (, Graphics2D, g2, ,, double, cursor]
[;, }, protected, void, drawAxisLine, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Line2D]
[), ;, }, protected, void, drawAxisLine, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {]
[), ), ;, }, protected, void, drawAxisLine, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, )]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX]
[), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX]
[==, RectangleEdge, ., TOP, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor]
[), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX]
[., TOP, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea]
[=, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea]
[,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (]
[,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, .]
[., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (]
[), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX]
[==, RectangleEdge, ., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor]
[), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX]
[., BOTTOM, ), {, axisLine, =, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea]
[=, new, Line2D, ., Double, (, dataArea, ., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor]
[,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[., getX, (, ), ,, cursor, ,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (]
[,, dataArea, ., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, )]
[,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, .]
[., getMaxX, (, ), ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (]
[), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea]
[==, RectangleEdge, ., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, )]
[), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea]
[., LEFT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor]
[=, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor]
[,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (]
[,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (, edge, ==]
[,, dataArea, ., getMaxY, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (]
[., getMaxY, (, ), ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, axisLine, =, new]
[), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea]
[==, RectangleEdge, ., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, )]
[), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea]
[., RIGHT, ), {, axisLine, =, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor]
[=, new, Line2D, ., Double, (, cursor, ,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (]
[;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;]
[,, dataArea, ., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, g2, ., setPaint]
[,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;]
[., getY, (, ), ,, cursor, ,, dataArea, ., getMaxY, (, ), ), ;, }, g2, ., setPaint, (, getAxisLinePaint]
[,, dataArea, ., getMaxY, (, ), ), ;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, .]
[), ;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (, getAxisLineStroke, (, ), )]
[., getMaxY, (, ), ), ;, }, g2, ., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (]
[;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =]
[., setPaint, (, getAxisLinePaint, (, ), ), ;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;, g2, ., draw]
[), ;, g2, ., setStroke, (, getAxisLineStroke, (, ), ), ;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight]
[;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (]
[., setStroke, (, getAxisLineStroke, (, ), ), ;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =, false, ;]
[), ;, g2, ., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if]
[;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (, this, ., positiveArrowVisible, ), {, if, (]
[., draw, (, axisLine, ), ;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (, this, .]
[), ;, boolean, drawUpOrRight, =, false, ;, boolean, drawDownOrLeft, =, false, ;, if, (, this, ., positiveArrowVisible, ), {, if]
[;, boolean, drawDownOrLeft, =, false, ;, if, (, this, ., positiveArrowVisible, ), {, if, (, this, ., inverted, ), {]
[;, if, (, this, ., positiveArrowVisible, ), {, if, (, this, ., inverted, ), {, drawDownOrLeft, =, true, ;, }]
[), {, if, (, this, ., inverted, ), {, drawDownOrLeft, =, true, ;, }, else, {, drawUpOrRight, =, true, ;]
[., positiveArrowVisible, ), {, if, (, this, ., inverted, ), {, drawDownOrLeft, =, true, ;, }, else, {, drawUpOrRight, =]
[), {, drawDownOrLeft, =, true, ;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (, this, ., negativeArrowVisible]
[., inverted, ), {, drawDownOrLeft, =, true, ;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (, this]
[=, true, ;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (, this, ., negativeArrowVisible, ), {, if]
[;, }, else, {, drawUpOrRight, =, true, ;, }, }, if, (, this, ., negativeArrowVisible, ), {, if, (, this]
[=, true, ;, }, }, if, (, this, ., negativeArrowVisible, ), {, if, (, this, ., inverted, ), {, drawUpOrRight]
[;, }, }, if, (, this, ., negativeArrowVisible, ), {, if, (, this, ., inverted, ), {, drawUpOrRight, =, true]
[), {, if, (, this, ., inverted, ), {, drawUpOrRight, =, true, ;, }, else, {, drawDownOrLeft, =, true, ;]
[., negativeArrowVisible, ), {, if, (, this, ., inverted, ), {, drawUpOrRight, =, true, ;, }, else, {, drawDownOrLeft, =]
[), {, drawUpOrRight, =, true, ;, }, else, {, drawDownOrLeft, =, true, ;, }, }, if, (, drawUpOrRight, ), {]
[., inverted, ), {, drawUpOrRight, =, true, ;, }, else, {, drawDownOrLeft, =, true, ;, }, }, if, (, drawUpOrRight]
[=, true, ;, }, else, {, drawDownOrLeft, =, true, ;, }, }, if, (, drawUpOrRight, ), {, double, x, =]
[;, }, else, {, drawDownOrLeft, =, true, ;, }, }, if, (, drawUpOrRight, ), {, double, x, =, 0.0, ;]
[=, true, ;, }, }, if, (, drawUpOrRight, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;]
[;, }, }, if, (, drawUpOrRight, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow]
[), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge]
[;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge]
[;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, )]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, .]
[), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;]
[==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;]
[., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =]
[), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;]
[==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =]
[), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;]
[., BOTTOM, ), {, x, =, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, .]
[=, dataArea, ., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if]
[;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT]
[., getMaxX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge]
[=, cursor, ;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge]
[;, arrow, =, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge]
[=, this, ., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =]
[., rightArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {]
[), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;]
[==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, .]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;]
[., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (]
[), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;]
[==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =]
[), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;]
[., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =, this, .]
[=, cursor, ;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer]
[;, y, =, dataArea, ., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =, new]
[=, dataArea, ., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (]
[;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (]
[., getMinY, (, ), ;, arrow, =, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;]
[=, this, ., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,]
[;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape]
[., upArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, )]
[;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;]
[;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2, .]
[., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, .]
[,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, )]
[), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2]
[;, g2, ., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;, }, if, (, drawDownOrLeft, )]
[., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;]
[), ;, g2, ., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;, }, if, (, drawDownOrLeft]
[;, g2, ., draw, (, shape, ), ;, }, if, (, drawDownOrLeft, ), {, double, x, =, 0.0, ;, double]
[., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;, }, if, (, drawDownOrLeft, ), {, double]
[), ;, g2, ., draw, (, shape, ), ;, }, if, (, drawDownOrLeft, ), {, double, x, =, 0.0, ;]
[;, }, if, (, drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =]
[., draw, (, shape, ), ;, }, if, (, drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =]
[), ;, }, if, (, drawDownOrLeft, ), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow]
[), {, double, x, =, 0.0, ;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge]
[;, double, y, =, 0.0, ;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge]
[;, Shape, arrow, =, null, ;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, )]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, .]
[), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;]
[==, RectangleEdge, ., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;]
[||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;]
[., TOP, ||, edge, ==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =]
[), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;]
[==, RectangleEdge, ., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =]
[), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;]
[., BOTTOM, ), {, x, =, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, .]
[=, dataArea, ., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if]
[;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT]
[., getMinX, (, ), ;, y, =, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge]
[=, cursor, ;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge]
[;, arrow, =, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge]
[=, this, ., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =]
[., leftArrow, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {]
[), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;]
[==, RectangleEdge, ., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, .]
[||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;]
[., LEFT, ||, edge, ==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (]
[), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;]
[==, RectangleEdge, ., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =]
[), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;]
[., RIGHT, ), {, x, =, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =, this, .]
[=, cursor, ;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer]
[;, y, =, dataArea, ., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =, new]
[=, dataArea, ., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (]
[;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (]
[., getMaxY, (, ), ;, arrow, =, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;]
[=, this, ., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,]
[;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape]
[., downArrow, ;, }, AffineTransform, transformer, =, new, AffineTransform, (, ), ;, transformer, ., setToTranslation, (, x, ,, y, )]
[;, transformer, ., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;]
[;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2, .]
[., setToTranslation, (, x, ,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, .]
[,, y, ), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, )]
[), ;, Shape, shape, =, transformer, ., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2]
[;, g2, ., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;, }, }, protected, float, []
[., createTransformedShape, (, arrow, ), ;, g2, ., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;]
[), ;, g2, ., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;, }, }, protected, float]
[;, g2, ., draw, (, shape, ), ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double]
[., fill, (, shape, ), ;, g2, ., draw, (, shape, ), ;, }, }, protected, float, [, ], calculateAnchorPoint]
[), ;, g2, ., draw, (, shape, ), ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,]
[;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[., draw, (, shape, ), ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,]
[), ;, }, }, protected, float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge]
[;, float, [, ], result, =, new, float, [, 2, ], ;, if, (, edge, ==, RectangleEdge, ., TOP, )]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (]
[], ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, result, [, 0, ], =, (, float, ), valueToJava2D]
[), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[==, RectangleEdge, ., TOP, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (]
[), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[., TOP, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[=, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1]
[[, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, []
[;, result, [, 1, ], =, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, )]
[;, result, [, 1, ], =, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, )]
[,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, -, insets, ., getBottom]
[., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor]
[,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, -, insets, ., getBottom, (, )]
[), ;, result, [, 1, ], =, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0]
[=, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (]
[[, 1, ], =, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, ), ;, }]
[], =, (, float, ), (, cursor, -, insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float, )]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float]
[-, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =]
[-, insets, ., getBottom, (, ), -, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[-, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =]
[., getBottom, (, ), -, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float]
[), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[==, RectangleEdge, ., BOTTOM, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (]
[), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[., BOTTOM, ), {, result, [, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[=, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1]
[[, 0, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, []
[;, result, [, 1, ], =, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, )]
[;, result, [, 1, ], =, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, )]
[,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, +, insets, ., getTop]
[., getValue, (, ), ,, dataArea, ,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor]
[,, edge, ), ;, result, [, 1, ], =, (, float, ), (, cursor, +, insets, ., getTop, (, )]
[), ;, result, [, 1, ], =, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0]
[=, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (]
[[, 1, ], =, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, ), ;, }]
[], =, (, float, ), (, cursor, +, insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, )]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float]
[+, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =]
[+, insets, ., getTop, (, ), +, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, )]
[+, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =]
[., getTop, (, ), +, 2.0, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float]
[), {, result, [, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0]
[==, RectangleEdge, ., LEFT, ), {, result, [, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft]
[), {, result, [, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0]
[., LEFT, ), {, result, [, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, )]
[=, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;, result, [, 1, ]]
[[, 0, ], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;, result]
[], =, (, float, ), (, cursor, -, insets, ., getLeft, (, ), -, 2.0, ), ;, result, [, 1]
[;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge]
[;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge]
[), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[-, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[-, insets, ., getLeft, (, ), -, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (]
[-, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[., getLeft, (, ), -, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, .]
[), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[=, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if]
[[, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, )]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, )]
[,, dataArea, ,, edge, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0]
[., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[,, edge, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float]
[), {, result, [, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0]
[==, RectangleEdge, ., RIGHT, ), {, result, [, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight]
[), {, result, [, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0]
[., RIGHT, ), {, result, [, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, )]
[=, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;, result, [, 1, ]]
[[, 0, ], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;, result]
[], =, (, float, ), (, cursor, +, insets, ., getRight, (, ), +, 2.0, ), ;, result, [, 1]
[;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge]
[;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge]
[), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[+, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[+, insets, ., getRight, (, ), +, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (]
[+, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,]
[., getRight, (, ), +, 2.0, ), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, .]
[), ;, result, [, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,]
[=, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, return, result]
[[, 1, ], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[], =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, return]
[;, }, return, result, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D]
[;, }, return, result, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D]
[,, dataArea, ,, edge, ), ;, }, return, result, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor]
[., getValue, (, ), ,, dataArea, ,, edge, ), ;, }, return, result, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D]
[,, edge, ), ;, }, return, result, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D]
[), ;, }, return, result, ;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,]
[;, }, protected, AxisState, drawTickMarksAndLabels, (, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge]
[;, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }]
[), ;, if, (, isAxisLineVisible, (, ), ), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;]
[), {, drawAxisLine, (, g2, ,, cursor, ,, dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2]
[;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (]
[,, cursor, ,, dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,]
[,, dataArea, ,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, )]
[,, edge, ), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state]
[), ;, }, List, ticks, =, refreshTicks, (, g2, ,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks]
[;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =]
[,, state, ,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont]
[,, dataArea, ,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont, (, )]
[,, edge, ), ;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;]
[), ;, state, ., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator]
[;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while]
[., setTicks, (, ticks, ), ;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =, ticks, .]
[), ;, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;]
[;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, ValueTick]
[., setFont, (, getTickLabelFont, (, ), ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator]
[), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[;, while, (, iterator, ., hasNext, (, ), ), {, ValueTick, tick, =, (, ValueTick, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, ValueTick, tick, =, (, ValueTick, )]
[), {, ValueTick, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, if, (, isTickLabelsVisible, (, ), )]
[., hasNext, (, ), ), {, ValueTick, tick, =, (, ValueTick, ), iterator, ., next, (, ), ;, if, (]
[;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ]]
[;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ]]
[., next, (, ), ;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setPaint, (, getTickLabelPaint, (, ), )]
[), {, g2, ., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,]
[;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString]
[., setPaint, (, getTickLabelPaint, (, ), ), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea]
[), ;, float, [, ], anchorPoint, =, calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, .]
[;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, []
[,, cursor, ,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,]
[,, dataArea, ,, edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, []
[,, edge, ), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ]]
[), ;, TextUtilities, ., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint]
[;, }, if, (, (, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR]
[., drawRotatedString, (, tick, ., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ]]
[,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick]
[., getText, (, ), ,, g2, ,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor]
[,, anchorPoint, [, 0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle]
[,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick, .]
[[, 0, ], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, )]
[], ,, anchorPoint, [, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick]
[,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;]
[[, 1, ], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (]
[], ,, tick, ., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), )]
[,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (, isTickMarksVisible, (]
[., getTextAnchor, (, ), ,, tick, ., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if]
[,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&, tick, ., getTickType, (]
[., getAngle, (, ), ,, tick, ., getRotationAnchor, (, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&]
[), ;, }, if, (, (, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, .]
[., getRotationAnchor, (, ), ), ;, }, if, (, (, isTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), .]
[), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?]
[||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), )]
[), ||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), )]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&]
[), ||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), )]
[., equals, (, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), .]
[., getTickType, (, ), ., equals, (, TickType, ., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&, tick, .]
[), ), ||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, )]
[., MAJOR, ), ), ||, (, isMinorTickMarksVisible, (, ), &&, tick, ., getTickType, (, ), ., equals, (, TickType, .]
[), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?]
[), ), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), )]
[&&, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =, (]
[), ), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), )]
[., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =, (, tick, ., getTickType, (, ), .]
[., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ), {, double, ol, =, (, tick, .]
[), ), ), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, )]
[., MINOR, ), ), ), {, double, ol, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, .]
[;, double, il, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkInsideLength]
[?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (, tick, ., getTickType, (, ), ., equals]
[), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (, tick, ., getTickType, (, ), .]
[., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =]
[., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, )]
[), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (, tick, ., getTickType, (, )]
[., MINOR, ), ), ?, getMinorTickMarkOutsideLength, (, ), :, getTickMarkOutsideLength, (, ), ;, double, il, =, (, tick, ., getTickType]
[:, getTickMarkOutsideLength, (, ), ;, double, il, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR]
[;, double, il, =, (, tick, ., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkInsideLength]
[;, float, xx, =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (, tick, ., getValue]
[), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (, tick, .]
[., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =]
[., getTickType, (, ), ., equals, (, TickType, ., MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, )]
[), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (, tick]
[., MINOR, ), ), ?, getMinorTickMarkInsideLength, (, ), :, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D]
[:, getTickMarkInsideLength, (, ), ;, float, xx, =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea]
[;, float, xx, =, (, float, ), valueToJava2D, (, tick, ., getValue, (, ), ,, dataArea, ,, edge, ), ;]
[;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint]
[;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;]
[., getValue, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke]
[,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, .]
[), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (]
[;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if]
[;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark]
[., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge]
[), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol]
[., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new]
[), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -]
[), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx]
[==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor]
[), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx]
[., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il]
[=, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor]
[,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[-, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, )]
[,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, .]
[+, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx]
[==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor]
[), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx]
[., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il]
[=, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }]
[;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx]
[,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, )]
[+, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, )]
[,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, .]
[-, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new]
[,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il]
[==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il]
[., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor]
[=, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx]
[,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, .]
[,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark]
[-, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, )]
[,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark]
[,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[+, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, .]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il]
[==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx]
[), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il]
[., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor]
[=, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }]
[;, }, g2, ., draw, (, mark, ), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (]
[,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;]
[,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used]
[+, ol, ,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, }]
[,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used]
[,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used, =, 0.0]
[), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible]
[-, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used, =, 0.0, ;, if]
[), ;, }, g2, ., draw, (, mark, ), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible]
[;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==, RectangleEdge]
[., draw, (, mark, ), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {]
[), ;, }, }, double, used, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==]
[;, if, (, isTickLabelsVisible, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth]
[), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea]
[), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft]
[==, RectangleEdge, ., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), )]
[), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft]
[., LEFT, ), {, used, +=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state]
[+=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, )]
[;, state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used]
[,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, ), ;, }, else, if]
[,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge]
[,, isVerticalTickLabels, (, ), ), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge]
[), ;, state, ., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,]
[., cursorLeft, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2]
[), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight]
[==, RectangleEdge, ., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), )]
[), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight]
[., RIGHT, ), {, used, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state]
[=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, )]
[;, state, ., cursorRight, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used]
[,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, ), ;, }, else, if]
[,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (, edge]
[,, isVerticalTickLabels, (, ), ), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge]
[), ;, state, ., cursorRight, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,]
[., cursorRight, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2]
[), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp]
[==, RectangleEdge, ., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), )]
[), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp]
[., TOP, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state]
[=, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, )]
[;, state, ., cursorUp, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used]
[,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, ), ;, }, else, if]
[,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (, edge]
[,, isVerticalTickLabels, (, ), ), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge]
[), ;, state, ., cursorUp, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,]
[., cursorUp, (, used, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2]
[), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown]
[==, RectangleEdge, ., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), )]
[), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown]
[., BOTTOM, ), {, used, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state]
[=, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown, (, used, )]
[;, state, ., cursorDown, (, used, ), ;, }, }, return, state, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2]
[,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown, (, used, ), ;, }, }, return]
[,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown, (, used, ), ;, }, }, return, state, ;]
[,, isVerticalTickLabels, (, ), ), ;, state, ., cursorDown, (, used, ), ;, }, }, return, state, ;, }, public]
[), ;, state, ., cursorDown, (, used, ), ;, }, }, return, state, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D]
[;, }, }, return, state, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,]
[., cursorDown, (, used, ), ;, }, }, return, state, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot]
[), ;, }, }, return, state, ;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea]
[;, }, public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space]
[), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space]
[==, null, ), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {]
[), {, space, =, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space]
[=, new, AxisSpace, (, ), ;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, double]
[;, }, if, (, !, isVisible, (, ), ), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, )]
[), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >, 0.0, ), {]
[), {, return, space, ;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >, 0.0, ), {]
[;, }, double, dimension, =, getFixedDimension, (, ), ;, if, (, dimension, >, 0.0, ), {, space, ., ensureAtLeast, (]
[;, if, (, dimension, >, 0.0, ), {, space, ., ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight]
[), {, space, ., ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =]
[>, 0.0, ), {, space, ., ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight, =, 0.0, ;, double]
[), {, space, ., ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =]
[;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, g2]
[., ensureAtLeast, (, dimension, ,, edge, ), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if]
[,, edge, ), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, )]
[), ;, }, double, tickLabelHeight, =, 0.0, ;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {]
[;, double, tickLabelWidth, =, 0.0, ;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (, getTickLabelFont, (, )]
[;, if, (, isTickLabelsVisible, (, ), ), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, List, ticks, =]
[), {, g2, ., setFont, (, getTickLabelFont, (, ), ), ;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState]
[;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState, (, ), ,, plotArea, ,, edge, ), ;, if, (]
[., setFont, (, getTickLabelFont, (, ), ), ;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState, (, ), ,]
[), ;, List, ticks, =, refreshTicks, (, g2, ,, new, AxisState, (, ), ,, plotArea, ,, edge, ), ;, if]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea]
[,, new, AxisState, (, ), ,, plotArea, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[,, plotArea, ,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (]
[,, edge, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,]
[), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,]
[), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if]
[., isTopOrBottom, (, edge, ), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, )]
[), ), {, tickLabelHeight, =, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else]
[=, findMaximumTickLabelHeight, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if, (, RectangleEdge, .]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,, g2]
[,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, )]
[,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[,, isVerticalTickLabels, (, ), ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,]
[), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D]
[., isLeftOrRight, (, edge, ), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, )]
[), ), {, tickLabelWidth, =, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }]
[=, findMaximumTickLabelWidth, (, ticks, ,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure]
[;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth]
[,, g2, ,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge]
[,, plotArea, ,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;]
[,, isVerticalTickLabels, (, ), ), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight]
[), ;, }, }, Rectangle2D, labelEnclosure, =, getLabelEnclosure, (, g2, ,, edge, ), ;, double, labelHeight, =, 0.0, ;, double]
[;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), )]
[,, edge, ), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[), ;, double, labelHeight, =, 0.0, ;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, )]
[;, double, labelWidth, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, .]
[;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space]
[), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge, )]
[., isTopOrBottom, (, edge, ), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight]
[), ), {, labelHeight, =, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge]
[=, labelEnclosure, ., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else]
[;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[., getHeight, (, ), ;, space, ., add, (, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else, if, (]
[;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, )]
[., add, (, labelHeight, +, tickLabelHeight, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, )]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, .]
[+, tickLabelHeight, ,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =]
[,, edge, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, .]
[), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (]
[), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, ,, edge, )]
[., isLeftOrRight, (, edge, ), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth]
[), ), {, labelWidth, =, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, ,, edge]
[=, labelEnclosure, ., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, ,, edge, ), ;, }, return]
[;, space, ., add, (, labelWidth, +, tickLabelWidth, ,, edge, ), ;, }, return, space, ;, }, protected, double, findMaximumTickLabelHeight]
[., getWidth, (, ), ;, space, ., add, (, labelWidth, +, tickLabelWidth, ,, edge, ), ;, }, return, space, ;]
[;, }, return, space, ;, }, protected, double, findMaximumTickLabelHeight, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean]
[., add, (, labelWidth, +, tickLabelWidth, ,, edge, ), ;, }, return, space, ;, }, protected, double, findMaximumTickLabelHeight, (, List]
[,, edge, ), ;, }, return, space, ;, }, protected, double, findMaximumTickLabelHeight, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D]
[+, tickLabelWidth, ,, edge, ), ;, }, return, space, ;, }, protected, double, findMaximumTickLabelHeight, (, List, ticks, ,, Graphics2D, g2]
[,, edge, ), ;, }, return, space, ;, }, protected, double, findMaximumTickLabelHeight, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D]
[), ;, }, return, space, ;, }, protected, double, findMaximumTickLabelHeight, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,]
[;, }, protected, double, findMaximumTickLabelHeight, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean, vertical, ), {, RectangleInsets]
[;, Font, font, =, getTickLabelFont, (, ), ;, double, maxHeight, =, 0.0, ;, if, (, vertical, ), {, FontMetrics, fm]
[;, double, maxHeight, =, 0.0, ;, if, (, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, )]
[;, if, (, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks]
[), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, )]
[;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick]
[., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, )]
[), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds]
[., hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds]
[;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if]
[;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if]
[., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,]
[;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, )]
[., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (]
[,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +]
[., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, .]
[,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, .]
[), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (]
[), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (]
[>, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, .]
[+, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, .]
[+, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =, labelBounds, .]
[., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {]
[+, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, .]
[., getTop, (, ), +, insets, ., getBottom, (, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (]
[>, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, .]
[., getBottom, (, ), >, maxHeight, ), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (]
[), {, maxHeight, =, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (]
[=, labelBounds, ., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }]
[;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, )]
[+, insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz"]
[+, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics]
[., getWidth, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, }, }]
[+, insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz"]
[., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font]
[;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, )]
[., getBottom, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2]
[;, maxHeight, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, )]
[., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =, metrics, ., getHeight, (, ), +]
[,, g2, ., getFontRenderContext, (, ), ), ;, maxHeight, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (]
[), ;, maxHeight, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (]
[., getFontRenderContext, (, ), ), ;, maxHeight, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[=, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }]
[;, }, return, maxHeight, ;, }, protected, double, findMaximumTickLabelWidth, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean]
[+, insets, ., getBottom, (, ), ;, }, return, maxHeight, ;, }, protected, double, findMaximumTickLabelWidth, (, List, ticks, ,, Graphics2D]
[+, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return, maxHeight, ;, }, protected, double]
[., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return, maxHeight]
[+, insets, ., getBottom, (, ), ;, }, return, maxHeight, ;, }, protected, double, findMaximumTickLabelWidth, (, List, ticks, ,, Graphics2D]
[., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return, maxHeight, ;, }, protected, double, findMaximumTickLabelWidth, (]
[;, }, return, maxHeight, ;, }, protected, double, findMaximumTickLabelWidth, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean]
[., getBottom, (, ), ;, }, return, maxHeight, ;, }, protected, double, findMaximumTickLabelWidth, (, List, ticks, ,, Graphics2D, g2, ,]
[;, }, protected, double, findMaximumTickLabelWidth, (, List, ticks, ,, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, boolean, vertical, ), {, RectangleInsets]
[;, Font, font, =, getTickLabelFont, (, ), ;, double, maxWidth, =, 0.0, ;, if, (, !, vertical, ), {, FontMetrics]
[;, double, maxWidth, =, 0.0, ;, if, (, !, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font]
[;, if, (, !, vertical, ), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =]
[), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, )]
[), {, FontMetrics, fm, =, g2, ., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, )]
[;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick]
[., getFontMetrics, (, font, ), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext]
[), ;, Iterator, iterator, =, ticks, ., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {]
[;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (]
[., iterator, (, ), ;, while, (, iterator, ., hasNext, (, ), ), {, Tick, tick, =, (, Tick, )]
[), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds]
[., hasNext, (, ), ), {, Tick, tick, =, (, Tick, ), iterator, ., next, (, ), ;, Rectangle2D, labelBounds]
[;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if]
[;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if]
[., next, (, ), ;, Rectangle2D, labelBounds, =, TextUtilities, ., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,]
[;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, )]
[., getTextBounds, (, tick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (]
[,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +]
[., getText, (, ), ,, g2, ,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, .]
[,, fm, ), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, .]
[), ;, if, (, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (]
[), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (]
[>, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, .]
[+, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, .]
[+, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =, labelBounds, .]
[., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {]
[+, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, .]
[., getLeft, (, ), +, insets, ., getRight, (, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (]
[>, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, .]
[., getRight, (, ), >, maxWidth, ), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (]
[), {, maxWidth, =, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (]
[=, labelBounds, ., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, }]
[;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, )]
[+, insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz"]
[+, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics]
[., getWidth, (, ), +, insets, ., getLeft, (, ), +, insets, ., getRight, (, ), ;, }, }, }]
[+, insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz"]
[., getLeft, (, ), +, insets, ., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font]
[;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, )]
[., getRight, (, ), ;, }, }, }, else, {, LineMetrics, metrics, =, font, ., getLineMetrics, (, "ABCxyz", ,, g2]
[;, maxWidth, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, )]
[., getLineMetrics, (, "ABCxyz", ,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =, metrics, ., getHeight, (, ), +]
[,, g2, ., getFontRenderContext, (, ), ), ;, maxWidth, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (]
[), ;, maxWidth, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (]
[., getFontRenderContext, (, ), ), ;, maxWidth, =, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +]
[=, metrics, ., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }]
[;, }, return, maxWidth, ;, }, public, boolean, isInverted, (, ), {, return, this, ., inverted, ;, }, public, void]
[+, insets, ., getBottom, (, ), ;, }, return, maxWidth, ;, }, public, boolean, isInverted, (, ), {, return, this]
[+, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return, maxWidth, ;, }, public, boolean]
[., getHeight, (, ), +, insets, ., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return, maxWidth]
[+, insets, ., getBottom, (, ), ;, }, return, maxWidth, ;, }, public, boolean, isInverted, (, ), {, return, this]
[., getTop, (, ), +, insets, ., getBottom, (, ), ;, }, return, maxWidth, ;, }, public, boolean, isInverted, (]
[;, }, return, maxWidth, ;, }, public, boolean, isInverted, (, ), {, return, this, ., inverted, ;, }, public, void]
[., getBottom, (, ), ;, }, return, maxWidth, ;, }, public, boolean, isInverted, (, ), {, return, this, ., inverted]
[;, }, public, boolean, isInverted, (, ), {, return, this, ., inverted, ;, }, public, void, setInverted, (, boolean, flag]
[;, }, public, void, setInverted, (, boolean, flag, ), {, if, (, this, ., inverted, !=, flag, ), {, this]
[., inverted, ;, }, public, void, setInverted, (, boolean, flag, ), {, if, (, this, ., inverted, !=, flag, )]
[), {, this, ., inverted, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[!=, flag, ), {, this, ., inverted, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[., inverted, !=, flag, ), {, this, ., inverted, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[), {, this, ., inverted, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[=, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isAutoRange, (, ), {]
[., inverted, =, flag, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isAutoRange, (]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, boolean, isAutoRange, (, ), {, return, this]
[;, }, }, public, boolean, isAutoRange, (, ), {, return, this, ., autoRange, ;, }, public, void, setAutoRange, (, boolean]
[), ;, }, }, public, boolean, isAutoRange, (, ), {, return, this, ., autoRange, ;, }, public, void, setAutoRange, (]
[), ), ;, }, }, public, boolean, isAutoRange, (, ), {, return, this, ., autoRange, ;, }, public, void, setAutoRange]
[;, }, public, void, setAutoRange, (, boolean, auto, ), {, setAutoRange, (, auto, ,, true, ), ;, }, protected, void]
[., autoRange, ;, }, public, void, setAutoRange, (, boolean, auto, ), {, setAutoRange, (, auto, ,, true, ), ;, }]
[;, }, protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (, this, ., autoRange, !=, auto]
[,, true, ), ;, }, protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (, this, .]
[), ;, }, protected, void, setAutoRange, (, boolean, auto, ,, boolean, notify, ), {, if, (, this, ., autoRange, !=]
[), {, this, ., autoRange, =, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }]
[!=, auto, ), {, this, ., autoRange, =, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, )]
[., autoRange, !=, auto, ), {, this, ., autoRange, =, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange]
[), {, this, ., autoRange, =, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }]
[=, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {]
[., autoRange, =, auto, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify]
[;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (]
[), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this]
[;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public]
[), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, double, getAutoRangeMinimumSize, (, ), {]
[;, }, }, }, public, double, getAutoRangeMinimumSize, (, ), {, return, this, ., autoRangeMinimumSize, ;, }, public, void, setAutoRangeMinimumSize, (]
[), ;, }, }, }, public, double, getAutoRangeMinimumSize, (, ), {, return, this, ., autoRangeMinimumSize, ;, }, public, void, setAutoRangeMinimumSize]
[), ), ;, }, }, }, public, double, getAutoRangeMinimumSize, (, ), {, return, this, ., autoRangeMinimumSize, ;, }, public, void]
[;, }, public, void, setAutoRangeMinimumSize, (, double, size, ), {, setAutoRangeMinimumSize, (, size, ,, true, ), ;, }, public, void]
[., autoRangeMinimumSize, ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ), {, setAutoRangeMinimumSize, (, size, ,, true, ), ;, }]
[;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, <=, 0.0, ), {]
[,, true, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, <=]
[), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, <=, 0.0, )]
[), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {, this]
[<=, 0.0, ), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, )]
[), {, throw, new, IllegalArgumentException, (, "NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.", ), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {, this]
[;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {, this, ., autoRangeMinimumSize, =, size, ;, if, (, this]
[), ;, }, if, (, this, ., autoRangeMinimumSize, !=, size, ), {, this, ., autoRangeMinimumSize, =, size, ;, if, (]
[), {, this, ., autoRangeMinimumSize, =, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }]
[!=, size, ), {, this, ., autoRangeMinimumSize, =, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, )]
[., autoRangeMinimumSize, !=, size, ), {, this, ., autoRangeMinimumSize, =, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange]
[), {, this, ., autoRangeMinimumSize, =, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }]
[=, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {]
[., autoRangeMinimumSize, =, size, ;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify]
[;, if, (, this, ., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (]
[), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), )]
[., autoRange, ), {, autoAdjustRange, (, ), ;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this]
[;, }, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public]
[), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, Range, getDefaultAutoRange, (, ), {]
[;, }, }, }, public, Range, getDefaultAutoRange, (, ), {, return, this, ., defaultAutoRange, ;, }, public, void, setDefaultAutoRange, (]
[), ;, }, }, }, public, Range, getDefaultAutoRange, (, ), {, return, this, ., defaultAutoRange, ;, }, public, void, setDefaultAutoRange]
[), ), ;, }, }, }, public, Range, getDefaultAutoRange, (, ), {, return, this, ., defaultAutoRange, ;, }, public, void]
[;, }, public, void, setDefaultAutoRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw, new, IllegalArgumentException]
[., defaultAutoRange, ;, }, public, void, setDefaultAutoRange, (, Range, range, ), {, if, (, range, ==, null, ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, this, ., defaultAutoRange, =, range, ;, notifyListeners, (, new, AxisChangeEvent]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, this, ., defaultAutoRange, =, range, ;, notifyListeners, (]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, this, ., defaultAutoRange, =, range, ;, notifyListeners, (, new, AxisChangeEvent]
[;, }, this, ., defaultAutoRange, =, range, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double]
[), ;, }, this, ., defaultAutoRange, =, range, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public]
[=, range, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerMargin, (, ), {, return]
[., defaultAutoRange, =, range, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerMargin, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerMargin, (, ), {, return, this, .]
[;, }, public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin]
[), ;, }, public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (, double]
[), ), ;, }, public, double, getLowerMargin, (, ), {, return, this, ., lowerMargin, ;, }, public, void, setLowerMargin, (]
[;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, if, (, isAutoRange, (]
[., lowerMargin, ;, }, public, void, setLowerMargin, (, double, margin, ), {, this, ., lowerMargin, =, margin, ;, if, (]
[=, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[., lowerMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new]
[;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, )]
[), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getUpperMargin, (, ), {, return, this]
[;, }, public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin]
[), ;, }, public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (, double]
[), ), ;, }, public, double, getUpperMargin, (, ), {, return, this, ., upperMargin, ;, }, public, void, setUpperMargin, (]
[;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, if, (, isAutoRange, (]
[., upperMargin, ;, }, public, void, setUpperMargin, (, double, margin, ), {, this, ., upperMargin, =, margin, ;, if, (]
[=, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[., upperMargin, =, margin, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new]
[;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, )]
[), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getFixedAutoRange]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getFixedAutoRange, (, ), {, return, this]
[;, }, public, double, getFixedAutoRange, (, ), {, return, this, ., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (, double, length]
[), ;, }, public, double, getFixedAutoRange, (, ), {, return, this, ., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (, double]
[), ), ;, }, public, double, getFixedAutoRange, (, ), {, return, this, ., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (]
[;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., fixedAutoRange, =, length, ;, if, (, isAutoRange, (]
[., fixedAutoRange, ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., fixedAutoRange, =, length, ;, if, (]
[=, length, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (]
[., fixedAutoRange, =, length, ;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new]
[;, if, (, isAutoRange, (, ), ), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, )]
[), {, autoAdjustRange, (, ), ;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerBound]
[;, }, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, double, getLowerBound, (, ), {, return, this]
[;, }, public, double, getLowerBound, (, ), {, return, this, ., range, ., getLowerBound, (, ), ;, }, public, void]
[), ;, }, public, double, getLowerBound, (, ), {, return, this, ., range, ., getLowerBound, (, ), ;, }, public]
[), ), ;, }, public, double, getLowerBound, (, ), {, return, this, ., range, ., getLowerBound, (, ), ;, }]
[;, }, public, void, setLowerBound, (, double, min, ), {, if, (, this, ., range, ., getUpperBound, (, ), >]
[., getLowerBound, (, ), ;, }, public, void, setLowerBound, (, double, min, ), {, if, (, this, ., range, .]
[., range, ., getLowerBound, (, ), ;, }, public, void, setLowerBound, (, double, min, ), {, if, (, this, .]
[), {, setRange, (, new, Range, (, min, ,, this, ., range, ., getUpperBound, (, ), ), ), ;, }]
[>, min, ), {, setRange, (, new, Range, (, min, ,, this, ., range, ., getUpperBound, (, ), ), )]
[., getUpperBound, (, ), >, min, ), {, setRange, (, new, Range, (, min, ,, this, ., range, ., getUpperBound]
[., range, ., getUpperBound, (, ), >, min, ), {, setRange, (, new, Range, (, min, ,, this, ., range]
[), {, setRange, (, new, Range, (, min, ,, this, ., range, ., getUpperBound, (, ), ), ), ;, }]
[;, }, else, {, setRange, (, new, Range, (, min, ,, min, +, 1.0, ), ), ;, }, }, public]
[), ;, }, else, {, setRange, (, new, Range, (, min, ,, min, +, 1.0, ), ), ;, }, }]
[,, this, ., range, ., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (, new, Range, (, min]
[), ), ;, }, else, {, setRange, (, new, Range, (, min, ,, min, +, 1.0, ), ), ;, }]
[., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (, new, Range, (, min, ,, min, +, 1.0]
[., range, ., getUpperBound, (, ), ), ), ;, }, else, {, setRange, (, new, Range, (, min, ,, min]
[;, }, }, public, double, getUpperBound, (, ), {, return, this, ., range, ., getUpperBound, (, ), ;, }, public]
[), ;, }, }, public, double, getUpperBound, (, ), {, return, this, ., range, ., getUpperBound, (, ), ;, }]
[,, min, +, 1.0, ), ), ;, }, }, public, double, getUpperBound, (, ), {, return, this, ., range, .]
[), ), ;, }, }, public, double, getUpperBound, (, ), {, return, this, ., range, ., getUpperBound, (, ), ;]
[+, 1.0, ), ), ;, }, }, public, double, getUpperBound, (, ), {, return, this, ., range, ., getUpperBound, (]
[), ), ;, }, }, public, double, getUpperBound, (, ), {, return, this, ., range, ., getUpperBound, (, ), ;]
[;, }, public, void, setUpperBound, (, double, max, ), {, if, (, this, ., range, ., getLowerBound, (, ), <]
[., getUpperBound, (, ), ;, }, public, void, setUpperBound, (, double, max, ), {, if, (, this, ., range, .]
[., range, ., getUpperBound, (, ), ;, }, public, void, setUpperBound, (, double, max, ), {, if, (, this, .]
[), {, setRange, (, new, Range, (, this, ., range, ., getLowerBound, (, ), ,, max, ), ), ;, }]
[<, max, ), {, setRange, (, new, Range, (, this, ., range, ., getLowerBound, (, ), ,, max, ), )]
[., getLowerBound, (, ), <, max, ), {, setRange, (, new, Range, (, this, ., range, ., getLowerBound, (, )]
[., range, ., getLowerBound, (, ), <, max, ), {, setRange, (, new, Range, (, this, ., range, ., getLowerBound]
[), {, setRange, (, new, Range, (, this, ., range, ., getLowerBound, (, ), ,, max, ), ), ;, }]
[;, }, else, {, setRange, (, max, -, 1.0, ,, max, ), ;, }, }, public, Range, getRange, (, )]
[), ;, }, else, {, setRange, (, max, -, 1.0, ,, max, ), ;, }, }, public, Range, getRange, (]
[,, max, ), ), ;, }, else, {, setRange, (, max, -, 1.0, ,, max, ), ;, }, }, public]
[., getLowerBound, (, ), ,, max, ), ), ;, }, else, {, setRange, (, max, -, 1.0, ,, max, )]
[., range, ., getLowerBound, (, ), ,, max, ), ), ;, }, else, {, setRange, (, max, -, 1.0, ,]
[), ), ;, }, else, {, setRange, (, max, -, 1.0, ,, max, ), ;, }, }, public, Range, getRange]
[;, }, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }, public, void, setRange, (, Range]
[,, max, ), ;, }, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }, public, void]
[-, 1.0, ,, max, ), ;, }, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }]
[,, max, ), ;, }, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }, public, void]
[), ;, }, }, public, Range, getRange, (, ), {, return, this, ., range, ;, }, public, void, setRange, (]
[;, }, public, void, setRange, (, Range, range, ), {, setRange, (, range, ,, true, ,, true, ), ;, }]
[., range, ;, }, public, void, setRange, (, Range, range, ), {, setRange, (, range, ,, true, ,, true, )]
[;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==]
[,, true, ,, true, ), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, )]
[,, true, ), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if]
[), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false]
[;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false, ;, }, this, ., range, =, range, ;]
[), ;, }, if, (, turnOffAutoRange, ), {, this, ., autoRange, =, false, ;, }, this, ., range, =, range]
[), {, this, ., autoRange, =, false, ;, }, this, ., range, =, range, ;, if, (, notify, ), {]
[=, false, ;, }, this, ., range, =, range, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[., autoRange, =, false, ;, }, this, ., range, =, range, ;, if, (, notify, ), {, notifyListeners, (, new]
[;, }, this, ., range, =, range, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, )]
[=, range, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public]
[., range, =, range, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, void, setRange]
[), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, public, void, setRange, (, double, lower, ,]
[;, }, }, public, void, setRange, (, double, lower, ,, double, upper, ), {, setRange, (, new, Range, (, lower]
[), ;, }, }, public, void, setRange, (, double, lower, ,, double, upper, ), {, setRange, (, new, Range, (]
[), ), ;, }, }, public, void, setRange, (, double, lower, ,, double, upper, ), {, setRange, (, new, Range]
[;, }, public, void, setRangeWithMargins, (, Range, range, ), {, setRangeWithMargins, (, range, ,, true, ,, true, ), ;, }]
[), ;, }, public, void, setRangeWithMargins, (, Range, range, ), {, setRangeWithMargins, (, range, ,, true, ,, true, ), ;]
[,, upper, ), ), ;, }, public, void, setRangeWithMargins, (, Range, range, ), {, setRangeWithMargins, (, range, ,, true, ,]
[), ), ;, }, public, void, setRangeWithMargins, (, Range, range, ), {, setRangeWithMargins, (, range, ,, true, ,, true, )]
[;, }, public, void, setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range, ==]
[,, true, ,, true, ), ;, }, public, void, setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, )]
[,, true, ), ;, }, public, void, setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if]
[), ;, }, public, void, setRangeWithMargins, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, if, (, range]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (, Range, ., expand, (, range, ,, getLowerMargin, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (, Range, ., expand, (, range, ,]
[), {, throw, new, IllegalArgumentException, (, "Null 'range' argument.", ), ;, }, setRange, (, Range, ., expand, (, range, ,, getLowerMargin, (]
[;, }, setRange, (, Range, ., expand, (, range, ,, getLowerMargin, (, ), ,, getUpperMargin, (, ), ), ,, turnOffAutoRange]
[), ;, }, setRange, (, Range, ., expand, (, range, ,, getLowerMargin, (, ), ,, getUpperMargin, (, ), ), ,]
[;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins, (, new, Range, (, lower, ,]
[,, turnOffAutoRange, ,, notify, ), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins, (]
[., expand, (, range, ,, getLowerMargin, (, ), ,, getUpperMargin, (, ), ), ,, turnOffAutoRange, ,, notify, ), ;, }]
[,, getLowerMargin, (, ), ,, getUpperMargin, (, ), ), ,, turnOffAutoRange, ,, notify, ), ;, }, public, void, setRangeWithMargins, (]
[,, getUpperMargin, (, ), ), ,, turnOffAutoRange, ,, notify, ), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double]
[), ,, turnOffAutoRange, ,, notify, ), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins]
[,, notify, ), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins, (, new, Range]
[), ;, }, public, void, setRangeWithMargins, (, double, lower, ,, double, upper, ), {, setRangeWithMargins, (, new, Range, (, lower]
[;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (, value, -]
[), ;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (, value]
[,, upper, ), ), ;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new]
[), ), ;, }, public, void, setRangeAboutValue, (, double, value, ,, double, length, ), {, setRange, (, new, Range, (]
[;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag]
[), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (, boolean]
[,, value, +, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection]
[-, length, /, 2, ,, value, +, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {]
[,, value, +, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection]
[/, 2, ,, value, +, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this]
[,, value, +, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection]
[), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (]
[+, length, /, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }]
[), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (]
[/, 2, ), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void]
[), ), ;, }, public, boolean, isAutoTickUnitSelection, (, ), {, return, this, ., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (]
[;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ), {, setAutoTickUnitSelection, (, flag, ,, true, ), ;, }, public, void]
[., autoTickUnitSelection, ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ), {, setAutoTickUnitSelection, (, flag, ,, true, ), ;, }]
[;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (, this, ., autoTickUnitSelection, !=, flag]
[,, true, ), ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (, this, .]
[), ;, }, public, void, setAutoTickUnitSelection, (, boolean, flag, ,, boolean, notify, ), {, if, (, this, ., autoTickUnitSelection, !=]
[), {, this, ., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, )]
[!=, flag, ), {, this, ., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (]
[., autoTickUnitSelection, !=, flag, ), {, this, ., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {, notifyListeners, (, new]
[), {, this, ., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, )]
[=, flag, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }]
[., autoTickUnitSelection, =, flag, ;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }]
[;, if, (, notify, ), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, TickUnitSource]
[), {, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, }, }, public, TickUnitSource, getStandardTickUnits, (, ), {]
[;, }, }, }, public, TickUnitSource, getStandardTickUnits, (, ), {, return, this, ., standardTickUnits, ;, }, public, void, setStandardTickUnits, (]
[), ;, }, }, }, public, TickUnitSource, getStandardTickUnits, (, ), {, return, this, ., standardTickUnits, ;, }, public, void, setStandardTickUnits]
[), ), ;, }, }, }, public, TickUnitSource, getStandardTickUnits, (, ), {, return, this, ., standardTickUnits, ;, }, public, void]
[;, }, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {, this, ., standardTickUnits, =, source, ;, notifyListeners, (, new, AxisChangeEvent]
[., standardTickUnits, ;, }, public, void, setStandardTickUnits, (, TickUnitSource, source, ), {, this, ., standardTickUnits, =, source, ;, notifyListeners, (]
[=, source, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMinorTickCount, (, ), {, return]
[., standardTickUnits, =, source, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMinorTickCount, (, )]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, int, getMinorTickCount, (, ), {, return, this, .]
[;, }, public, int, getMinorTickCount, (, ), {, return, this, ., minorTickCount, ;, }, public, void, setMinorTickCount, (, int, count]
[), ;, }, public, int, getMinorTickCount, (, ), {, return, this, ., minorTickCount, ;, }, public, void, setMinorTickCount, (, int]
[), ), ;, }, public, int, getMinorTickCount, (, ), {, return, this, ., minorTickCount, ;, }, public, void, setMinorTickCount, (]
[;, }, public, void, setMinorTickCount, (, int, count, ), {, this, ., minorTickCount, =, count, ;, notifyListeners, (, new, AxisChangeEvent]
[., minorTickCount, ;, }, public, void, setMinorTickCount, (, int, count, ), {, this, ., minorTickCount, =, count, ;, notifyListeners, (]
[=, count, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, abstract, double, valueToJava2D, (, double, value]
[., minorTickCount, =, count, ;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, abstract, double, valueToJava2D, (]
[;, notifyListeners, (, new, AxisChangeEvent, (, this, ), ), ;, }, public, abstract, double, valueToJava2D, (, double, value, ,, Rectangle2D]
[;, }, public, abstract, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), ;, public, double, lengthToJava2D]
[), ;, }, public, abstract, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), ;, public, double]
[), ), ;, }, public, abstract, double, valueToJava2D, (, double, value, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), ;, public]
[;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -]
[,, area, ,, edge, ), ;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return, Math]
[,, edge, ), ;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return, Math, ., abs]
[), ;, double, l, =, valueToJava2D, (, length, ,, area, ,, edge, ), ;, return, Math, ., abs, (, l]
[;, return, Math, ., abs, (, l, -, zero, ), ;, }, public, abstract, double, java2DToValue, (, double, java2DValue, ,]
[,, area, ,, edge, ), ;, return, Math, ., abs, (, l, -, zero, ), ;, }, public, abstract, double]
[,, edge, ), ;, return, Math, ., abs, (, l, -, zero, ), ;, }, public, abstract, double, java2DToValue, (]
[), ;, return, Math, ., abs, (, l, -, zero, ), ;, }, public, abstract, double, java2DToValue, (, double, java2DValue]
[;, }, public, abstract, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), ;, protected, abstract, void]
[., abs, (, l, -, zero, ), ;, }, public, abstract, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,]
[), ;, }, public, abstract, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), ;, protected, abstract]
[-, zero, ), ;, }, public, abstract, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), ;]
[), ;, }, public, abstract, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, area, ,, RectangleEdge, edge, ), ;, protected, abstract]
[;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value, -, central, ,, this]
[., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, ), +, value]
[., range, ., getCentralValue, (, ), ;, Range, adjusted, =, new, Range, (, this, ., range, ., getLowerBound, (, )]
[;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, this]
[,, this, ., range, ., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (, adjusted, ), ;, }]
[-, central, ,, this, ., range, ., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (, adjusted, )]
[+, value, -, central, ,, this, ., range, ., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (]
[., getLowerBound, (, ), +, value, -, central, ,, this, ., range, ., getUpperBound, (, ), +, value, -, central]
[., range, ., getLowerBound, (, ), +, value, -, central, ,, this, ., range, ., getUpperBound, (, ), +, value]
[-, central, ,, this, ., range, ., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (, adjusted, )]
[,, this, ., range, ., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (, adjusted, ), ;, }]
[), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,]
[-, central, ), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (]
[+, value, -, central, ), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {]
[., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (]
[., range, ., getUpperBound, (, ), +, value, -, central, ), ;, setRange, (, adjusted, ), ;, }, public, void]
[-, central, ), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (]
[), ;, setRange, (, adjusted, ), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,]
[;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, this, ., range, ., getCentralValue, (]
[), ;, }, public, void, resizeRange, (, double, percent, ), {, resizeRange, (, percent, ,, this, ., range, ., getCentralValue]
[;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, ), {]
[,, this, ., range, ., getCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue]
[), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, )]
[., getCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {, if, (]
[., range, ., getCentralValue, (, ), ), ;, }, public, void, resizeRange, (, double, percent, ,, double, anchorValue, ), {]
[), {, double, halfLength, =, this, ., range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =]
[>, 0.0, ), {, double, halfLength, =, this, ., range, ., getLength, (, ), *, percent, /, 2, ;, Range]
[), {, double, halfLength, =, this, ., range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =]
[;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (, adjusted, )]
[/, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (]
[*, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;]
[., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue]
[., range, ., getLength, (, ), *, percent, /, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength]
[/, 2, ;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (]
[;, Range, adjusted, =, new, Range, (, anchorValue, -, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (, adjusted, )]
[;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, resizeRange2, (]
[,, anchorValue, +, halfLength, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }]
[-, halfLength, ,, anchorValue, +, halfLength, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, )]
[,, anchorValue, +, halfLength, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }]
[), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, resizeRange2]
[+, halfLength, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public]
[), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, resizeRange2]
[;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, resizeRange2, (, double, percent, ,, double, anchorValue]
[), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, resizeRange2, (, double, percent, ,, double]
[;, }, }, public, void, resizeRange2, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0, )]
[), ;, }, }, public, void, resizeRange2, (, double, percent, ,, double, anchorValue, ), {, if, (, percent, >, 0.0]
[), {, double, left, =, anchorValue, -, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;]
[>, 0.0, ), {, double, left, =, anchorValue, -, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -]
[), {, double, left, =, anchorValue, -, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;]
[;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *]
[-, getLowerBound, (, ), ;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (]
[;, double, right, =, getUpperBound, (, ), -, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *]
[;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +, right, *, percent, ), ;]
[-, anchorValue, ;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +, right, *, percent]
[;, Range, adjusted, =, new, Range, (, anchorValue, -, left, *, percent, ,, anchorValue, +, right, *, percent, ), ;]
[;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, zoomRange, (]
[,, anchorValue, +, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, )]
[-, left, *, percent, ,, anchorValue, +, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {]
[,, anchorValue, +, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, )]
[*, percent, ,, anchorValue, +, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (]
[,, anchorValue, +, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, )]
[), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, zoomRange]
[+, right, *, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }]
[), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, zoomRange]
[*, percent, ), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public]
[), ;, setRange, (, adjusted, ), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, zoomRange]
[;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent]
[), ;, }, else, {, setAutoRange, (, true, ), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double]
[;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, start, =, this, ., range]
[), ;, }, }, public, void, zoomRange, (, double, lowerPercent, ,, double, upperPercent, ), {, double, start, =, this, .]
[;, double, length, =, this, ., range, ., getLength, (, ), ;, Range, adjusted, =, null, ;, if, (, isInverted]
[., getLowerBound, (, ), ;, double, length, =, this, ., range, ., getLength, (, ), ;, Range, adjusted, =, null]
[., range, ., getLowerBound, (, ), ;, double, length, =, this, ., range, ., getLength, (, ), ;, Range, adjusted]
[;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +]
[., getLength, (, ), ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted, =, new]
[., range, ., getLength, (, ), ;, Range, adjusted, =, null, ;, if, (, isInverted, (, ), ), {, adjusted]
[;, if, (, isInverted, (, ), ), {, adjusted, =, new, Range, (, start, +, (, length, *, (, 1]
[), {, adjusted, =, new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start]
[=, new, Range, (, start, +, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (, length]
[;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length, *, upperPercent]
[,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new]
[+, (, length, *, (, 1, -, upperPercent, ), ), ,, start, +, (, length, *, (, 1, -, lowerPercent]
[,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new]
[), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =]
[*, (, 1, -, upperPercent, ), ), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), )]
[), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =]
[), ), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted]
[-, upperPercent, ), ), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else]
[), ), ,, start, +, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted]
[), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length, *]
[+, (, length, *, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (]
[), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length, *]
[), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length]
[*, (, 1, -, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length]
[), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length]
[), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +]
[-, lowerPercent, ), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,]
[), ), ), ;, }, else, {, adjusted, =, new, Range, (, start, +, length, *, lowerPercent, ,, start, +]
[=, new, Range, (, start, +, length, *, lowerPercent, ,, start, +, length, *, upperPercent, ), ;, }, setRange, (]
[;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange]
[,, start, +, length, *, upperPercent, ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double]
[+, length, *, lowerPercent, ,, start, +, length, *, upperPercent, ), ;, }, setRange, (, adjusted, ), ;, }, public]
[,, start, +, length, *, upperPercent, ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double]
[*, lowerPercent, ,, start, +, length, *, upperPercent, ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan]
[,, start, +, length, *, upperPercent, ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double]
[), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =]
[+, length, *, upperPercent, ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, )]
[), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =]
[*, upperPercent, ), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range]
[), ;, }, setRange, (, adjusted, ), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =]
[;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, length, =]
[), ;, }, public, void, pan, (, double, percent, ), {, Range, range, =, getRange, (, ), ;, double, length]
[;, double, length, =, range, ., getLength, (, ), ;, double, adj, =, length, *, percent, ;, double, lower, =]
[;, double, adj, =, length, *, percent, ;, double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double]
[., getLength, (, ), ;, double, adj, =, length, *, percent, ;, double, lower, =, range, ., getLowerBound, (, )]
[;, double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =, range, ., getUpperBound, (, )]
[*, percent, ;, double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =, range, ., getUpperBound]
[;, double, lower, =, range, ., getLowerBound, (, ), +, adj, ;, double, upper, =, range, ., getUpperBound, (, )]
[;, double, upper, =, range, ., getUpperBound, (, ), +, adj, ;, setRange, (, lower, ,, upper, ), ;, }]
[+, adj, ;, double, upper, =, range, ., getUpperBound, (, ), +, adj, ;, setRange, (, lower, ,, upper, )]
[., getLowerBound, (, ), +, adj, ;, double, upper, =, range, ., getUpperBound, (, ), +, adj, ;, setRange, (]
[;, double, upper, =, range, ., getUpperBound, (, ), +, adj, ;, setRange, (, lower, ,, upper, ), ;, }]
[;, setRange, (, lower, ,, upper, ), ;, }, protected, int, getAutoTickIndex, (, ), {, return, this, ., autoTickIndex, ;]
[+, adj, ;, setRange, (, lower, ,, upper, ), ;, }, protected, int, getAutoTickIndex, (, ), {, return, this, .]
[., getUpperBound, (, ), +, adj, ;, setRange, (, lower, ,, upper, ), ;, }, protected, int, getAutoTickIndex, (, )]
[;, setRange, (, lower, ,, upper, ), ;, }, protected, int, getAutoTickIndex, (, ), {, return, this, ., autoTickIndex, ;]
[;, }, protected, int, getAutoTickIndex, (, ), {, return, this, ., autoTickIndex, ;, }, protected, void, setAutoTickIndex, (, int, index]
[,, upper, ), ;, }, protected, int, getAutoTickIndex, (, ), {, return, this, ., autoTickIndex, ;, }, protected, void, setAutoTickIndex]
[), ;, }, protected, int, getAutoTickIndex, (, ), {, return, this, ., autoTickIndex, ;, }, protected, void, setAutoTickIndex, (, int]
[;, }, protected, void, setAutoTickIndex, (, int, index, ), {, this, ., autoTickIndex, =, index, ;, }, public, boolean, equals]
[., autoTickIndex, ;, }, protected, void, setAutoTickIndex, (, int, index, ), {, this, ., autoTickIndex, =, index, ;, }, public]
[=, index, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[., autoTickIndex, =, index, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, )]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, ValueAxis, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, ValueAxis, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, ValueAxis, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, ValueAxis, ), ), {, return, false, ;, }, ValueAxis, that, =, (]
[), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this, ., positiveArrowVisible, !=]
[), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this, ., positiveArrowVisible, !=]
[), ), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this, ., positiveArrowVisible]
[instanceof, ValueAxis, ), ), {, return, false, ;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this]
[;, }, ValueAxis, that, =, (, ValueAxis, ), obj, ;, if, (, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, )]
[;, if, (, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;]
[!=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, )]
[., positiveArrowVisible, !=, that, ., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;]
[., positiveArrowVisible, ), {, return, false, ;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return]
[;, }, if, (, this, ., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return, false, ;]
[!=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (, this, ., inverted, !=, that, ., inverted, )]
[., negativeArrowVisible, !=, that, ., negativeArrowVisible, ), {, return, false, ;, }, if, (, this, ., inverted, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return, false, ;]
[., negativeArrowVisible, ), {, return, false, ;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return]
[;, }, if, (, this, ., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (, this, .]
[!=, that, ., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, .]
[., inverted, !=, that, ., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !]
[), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (, this, .]
[., inverted, ), {, return, false, ;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (]
[;, }, if, (, !, this, ., autoRange, &&, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, .]
[), {, return, false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;]
[&&, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }]
[&&, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }]
[., autoRange, &&, !, ObjectUtilities, ., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false]
[), {, return, false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;]
[., equal, (, this, ., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, this]
[,, that, ., range, ), ), {, return, false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange]
[., range, ,, that, ., range, ), ), {, return, false, ;, }, if, (, this, ., autoRange, !=, that]
[), ), {, return, false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false]
[., range, ), ), {, return, false, ;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {]
[;, }, if, (, this, ., autoRange, !=, that, ., autoRange, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;]
[!=, that, ., autoRange, ), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, )]
[., autoRange, !=, that, ., autoRange, ), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;]
[., autoRange, ), {, return, false, ;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return]
[;, }, if, (, this, ., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), )]
[!=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals, (, that]
[., autoRangeMinimumSize, !=, that, ., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals]
[), {, return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), )]
[., autoRangeMinimumSize, ), {, return, false, ;, }, if, (, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange]
[;, }, if, (, !, this, ., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;]
[., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;, }, if, (, this, ., upperMargin, !=, that]
[., defaultAutoRange, ., equals, (, that, ., defaultAutoRange, ), ), {, return, false, ;, }, if, (, this, ., upperMargin]
[), ), {, return, false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false]
[., defaultAutoRange, ), ), {, return, false, ;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {]
[;, }, if, (, this, ., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;]
[!=, that, ., upperMargin, ), {, return, false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, )]
[., upperMargin, !=, that, ., upperMargin, ), {, return, false, ;, }, if, (, this, ., lowerMargin, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;]
[., upperMargin, ), {, return, false, ;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return]
[;, }, if, (, this, ., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;]
[!=, that, ., lowerMargin, ), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, )]
[., lowerMargin, !=, that, ., lowerMargin, ), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;]
[., lowerMargin, ), {, return, false, ;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return]
[;, }, if, (, this, ., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;]
[!=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, )]
[., fixedAutoRange, !=, that, ., fixedAutoRange, ), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;]
[., fixedAutoRange, ), {, return, false, ;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return]
[;, }, if, (, this, ., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits]
[!=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits]
[., autoTickUnitSelection, !=, that, ., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this]
[), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits]
[., autoTickUnitSelection, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return]
[), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;]
[), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;]
[., equal, (, this, ., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (, this]
[,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels]
[., standardTickUnits, ,, that, ., standardTickUnits, ), ), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=, that]
[), ), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false]
[., standardTickUnits, ), ), {, return, false, ;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {]
[;, }, if, (, this, ., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return, false, ;]
[!=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, )]
[., verticalTickLabels, !=, that, ., verticalTickLabels, ), {, return, false, ;, }, if, (, this, ., minorTickCount, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return, false, ;]
[., verticalTickLabels, ), {, return, false, ;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return]
[;, }, if, (, this, ., minorTickCount, !=, that, ., minorTickCount, ), {, return, false, ;, }, return, super, .]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, )]
[!=, that, ., minorTickCount, ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public]
[., minorTickCount, !=, that, ., minorTickCount, ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;]
[), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, )]
[., minorTickCount, ), {, return, false, ;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis]
[;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis, clone, =, (, ValueAxis, ), super, ., clone, (]
[., equals, (, obj, ), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis, clone, =, (, ValueAxis]
[), ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, ValueAxis, clone, =, (, ValueAxis, ), super, ., clone]
[;, return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, )]
[;, return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, )]
[., clone, (, ), ;, return, clone, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream]
[;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, .]
[;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (]
[;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,]
[., writeShape, (, this, ., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this]
[., upArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape]
[), ;, SerialUtilities, ., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow]
[;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., rightArrow, ,]
[., writeShape, (, this, ., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this]
[., downArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape]
[), ;, SerialUtilities, ., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., rightArrow]
[;, SerialUtilities, ., writeShape, (, this, ., rightArrow, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, )]
[., writeShape, (, this, ., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., rightArrow, ,, stream, )]
[,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., rightArrow, ,, stream, ), ;, }, private, void, readObject, (]
[., leftArrow, ,, stream, ), ;, SerialUtilities, ., writeShape, (, this, ., rightArrow, ,, stream, ), ;, }, private, void]
[), ;, SerialUtilities, ., writeShape, (, this, ., rightArrow, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[., writeShape, (, this, ., rightArrow, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException]
[,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject]
[., rightArrow, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream]
[), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, )]
[;, this, ., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (]
[., defaultReadObject, (, ), ;, this, ., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =]
[=, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this]
[., upArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, )]
[;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (]
[., readShape, (, stream, ), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow]
[), ;, this, ., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape]
[=, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this]
[., downArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, )]
[;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow, =, SerialUtilities, ., readShape, (]
[., readShape, (, stream, ), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow]
[), ;, this, ., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow, =, SerialUtilities, ., readShape]
[=, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, }]
[., leftArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, this, ., rightArrow, =, SerialUtilities, ., readShape, (, stream, )]
[;, this, ., rightArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, }, }]
[., readShape, (, stream, ), ;, this, ., rightArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, }, }]
[), ;, this, ., rightArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, }, }]
[=, SerialUtilities, ., readShape, (, stream, ), ;, }, }]
[., rightArrow, =, SerialUtilities, ., readShape, (, stream, ), ;, }, }]
[;, }, }]
[., readShape, (, stream, ), ;, }, }]
[), ;, }, }]
