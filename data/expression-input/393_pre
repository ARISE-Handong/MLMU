[commons, ., math3, ., util, ., FastMath, ;, public, class, HighamHall54Integrator, extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =]
[HighamHall54Integrator, extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =]
[extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {]
[extends, EmbeddedRungeKuttaIntegrator, {, private, static, final, String, METHOD_NAME, =, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {]
[{, private, static, final, String, METHOD_NAME, =, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /]
[static, final, String, METHOD_NAME, =, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,]
[static, final, String, METHOD_NAME, =, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,]
[String, METHOD_NAME, =, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /]
[=, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,]
[=, "Higham-Hall 5(4)", ;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,]
[;, private, static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /]
[static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,]
[static, final, double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,]
[double, [, ], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,, 3.0, /]
[], STATIC_C, =, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,]
[=, {, 2.0, /, 9.0, ,, 1.0, /, 3.0, ,, 1.0, /, 2.0, ,, 3.0, /, 5.0, ,, 1.0, ,]
[,, 3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =]
[3.0, /, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {]
[/, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {]
[/, 5.0, ,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {]
[,, 1.0, ,, 1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /]
[1.0, }, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,]
[}, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {]
[}, ;, private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {]
[private, static, final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0, /]
[final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,]
[final, double, [, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,]
[[, ], [, ], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /]
[], STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,]
[STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {]
[STATIC_A, =, {, {, 2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {]
[{, {, 2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /]
[2.0, /, 9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,]
[9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,]
[9.0, }, ,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,]
[,, {, 1.0, /, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /]
[/, 12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,]
[12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {]
[12.0, ,, 1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {]
[1.0, /, 4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /]
[4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,]
[4.0, }, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,]
[}, ,, {, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -]
[{, 1.0, /, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /]
[/, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,]
[/, 8.0, ,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,]
[,, 0.0, ,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /]
[,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,]
[,, 3.0, /, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,]
[/, 8.0, }, ,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /]
[,, {, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,]
[{, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {]
[{, 91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {]
[91.0, /, 500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -]
[500.0, ,, -, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /]
[-, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,]
[-, 27.0, /, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,]
[/, 100.0, ,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /]
[,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,]
[,, 78.0, /, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,]
[/, 125.0, ,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /]
[,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,]
[,, 8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,]
[8.0, /, 125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -]
[125.0, }, ,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /]
[,, {, -, 11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,]
[11.0, /, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,]
[/, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {]
[/, 20.0, ,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {]
[,, 27.0, /, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /]
[/, 20.0, ,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,]
[,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,]
[,, 12.0, /, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,]
[/, 5.0, ,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /]
[,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,]
[,, -, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,]
[-, 36.0, /, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -]
[/, 5.0, ,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /]
[,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,]
[,, 5.0, }, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,]
[}, ,, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /]
[{, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,]
[{, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,]
[/, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /]
[3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =]
[,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {]
[,, 125.0, /, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {]
[/, 96.0, ,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /]
[,, 5.0, /, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,]
[/, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,]
[/, 48.0, }, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,]
[}, }, ;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /]
[;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,]
[;, private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,]
[private, static, final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -]
[final, double, [, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /]
[[, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,]
[[, ], STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,]
[STATIC_B, =, {, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /]
[{, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,]
[{, 1.0, /, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,]
[/, 12.0, ,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /]
[,, 0.0, ,, 27.0, /, 32.0, ,, -, 4.0, /, 3.0, ,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,]
[,, 125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =]
[125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {]
[125.0, /, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {]
[/, 96.0, ,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -]
[,, 5.0, /, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /]
[/, 48.0, ,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,]
[,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,]
[,, 0.0, }, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,]
[}, ;, private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /]
[private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,]
[private, static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,]
[static, final, double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -]
[double, [, ], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /]
[], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,]
[], STATIC_E, =, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,]
[=, {, -, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /]
[-, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,]
[-, 1.0, /, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,]
[/, 20.0, ,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /]
[,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,]
[,, 0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,]
[0.0, ,, 81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -]
[81.0, /, 160.0, ,, -, 6.0, /, 5.0, ,, 25.0, /, 32.0, ,, 1.0, /, 16.0, ,, -, 1.0, /]
[(, final, double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (]
[double, minStep, ,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,]
[,, final, double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,]
[double, maxStep, ,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,]
[,, final, double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,]
[double, scalAbsoluteTolerance, ,, final, double, scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,]
[scalRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,]
[{, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,]
[(, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,]
[,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, scalAbsoluteTolerance, ,]
[,, final, double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (]
[double, maxStep, ,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,]
[,, final, double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,]
[double, [, ], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,]
[], vecAbsoluteTolerance, ,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,]
[,, final, double, [, ], vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,]
[vecRelativeTolerance, ), {, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,]
[{, super, (, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,]
[(, METHOD_NAME, ,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,]
[,, false, ,, STATIC_C, ,, STATIC_A, ,, STATIC_B, ,, new, HighamHall54StepInterpolator, (, ), ,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,]
[,, minStep, ,, maxStep, ,, vecAbsoluteTolerance, ,, vecRelativeTolerance, ), ;, }, @, Override, public, int, getOrder, (, ), {, return]
[final, double, [, ], y0, ,, final, double, [, ], y1, ,, final, double, h, ), {, double, error, =]
[double, [, ], y1, ,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =]
[], y1, ,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;]
[], y1, ,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;]
[,, final, double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[double, h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;]
[h, ), {, double, error, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++]
[0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =]
[0, ;, for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =]
[for, (, int, j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, []
[j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *]
[j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *]
[j, =, 0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *]
[0, ;, j, <, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, []
[<, mainSetDimension, ;, ++, j, ), {, double, errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0, ], []
[errSum, =, STATIC_E, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =]
[STATIC_E, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[STATIC_E, [, 0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;]
[0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <]
[0, ], *, yDotK, [, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <]
[[, 0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;]
[0, ], [, j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++]
[j, ], ;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {]
[;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=]
[;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=]
[;, for, (, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=]
[(, int, l, =, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, []
[=, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *]
[=, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *]
[=, 1, ;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *]
[;, l, <, STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, []
[STATIC_E, ., length, ;, ++, l, ), {, errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], []
[errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =]
[errSum, +=, STATIC_E, [, l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =]
[l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (]
[l, ], *, yDotK, [, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (]
[[, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (]
[[, l, ], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (]
[], [, j, ], ;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, []
[;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,]
[;, }, final, double, yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,]
[yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (]
[yScale, =, FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (]
[FastMath, ., max, (, FastMath, ., abs, (, y0, [, j, ], ), ,, FastMath, ., abs, (, y1, []
[[, j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =]
[[, j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =]
[j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (]
[j, ], ), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (]
[), ,, FastMath, ., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==]
[., abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?]
[abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (]
[abs, (, y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (]
[y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +]
[y1, [, j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +]
[j, ], ), ), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *]
[), ;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :]
[;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (]
[;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (]
[;, final, double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (]
[double, tol, =, (, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, []
[(, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +]
[(, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +]
[(, vecAbsoluteTolerance, ==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +]
[==, null, ), ?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, []
[?, (, scalAbsoluteTolerance, +, scalRelativeTolerance, *, yScale, ), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[), :, (, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =]
[(, vecAbsoluteTolerance, [, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *]
[[, j, ], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /]
[], +, vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;]
[vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=]
[vecRelativeTolerance, [, j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=]
[j, ], *, yScale, ), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *]
[), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return]
[), ;, final, double, ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return]
[ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (]
[ratio, =, h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (]
[h, *, errSum, /, tol, ;, error, +=, ratio, *, ratio, ;, }, return, FastMath, ., sqrt, (, error, /]
