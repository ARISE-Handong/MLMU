[;, private, static, final, long, serialVersionUID, =, 7628716375283629643L, ;, protected, char, [, ], buffer, ;, protected, int, size, ;, private]
[;, protected, char, [, ], buffer, ;, protected, int, size, ;, private, String, newLine, ;, private, String, nullText, ;, public]
[), ;, }, public, StrBuilder, (, int, initialCapacity, ), {, super, (, ), ;, if, (, initialCapacity, <=, 0, )]
[), {, initialCapacity, =, CAPACITY, ;, }, buffer, =, new, char, [, initialCapacity, ], ;, }, public, StrBuilder, (, final]
[<=, 0, ), {, initialCapacity, =, CAPACITY, ;, }, buffer, =, new, char, [, initialCapacity, ], ;, }, public, StrBuilder]
[), {, initialCapacity, =, CAPACITY, ;, }, buffer, =, new, char, [, initialCapacity, ], ;, }, public, StrBuilder, (, final]
[=, CAPACITY, ;, }, buffer, =, new, char, [, initialCapacity, ], ;, }, public, StrBuilder, (, final, String, str, )]
[;, }, buffer, =, new, char, [, initialCapacity, ], ;, }, public, StrBuilder, (, final, String, str, ), {, super]
[=, new, char, [, initialCapacity, ], ;, }, public, StrBuilder, (, final, String, str, ), {, super, (, ), ;]
[;, }, public, StrBuilder, (, final, String, str, ), {, super, (, ), ;, if, (, str, ==, null, )]
[], ;, }, public, StrBuilder, (, final, String, str, ), {, super, (, ), ;, if, (, str, ==, null]
[), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, [, str, .]
[==, null, ), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, []
[), {, buffer, =, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, [, str, .]
[=, new, char, [, CAPACITY, ], ;, }, else, {, buffer, =, new, char, [, str, ., length, (, )]
[;, }, else, {, buffer, =, new, char, [, str, ., length, (, ), +, CAPACITY, ], ;, append, (]
[], ;, }, else, {, buffer, =, new, char, [, str, ., length, (, ), +, CAPACITY, ], ;, append]
[=, new, char, [, str, ., length, (, ), +, CAPACITY, ], ;, append, (, str, ), ;, }, }]
[;, append, (, str, ), ;, }, }, public, String, getNewLineText, (, ), {, return, newLine, ;, }, public, StrBuilder]
[], ;, append, (, str, ), ;, }, }, public, String, getNewLineText, (, ), {, return, newLine, ;, }, public]
[+, CAPACITY, ], ;, append, (, str, ), ;, }, }, public, String, getNewLineText, (, ), {, return, newLine, ;]
[., length, (, ), +, CAPACITY, ], ;, append, (, str, ), ;, }, }, public, String, getNewLineText, (, )]
[], ;, append, (, str, ), ;, }, }, public, String, getNewLineText, (, ), {, return, newLine, ;, }, public]
[;, }, }, public, String, getNewLineText, (, ), {, return, newLine, ;, }, public, StrBuilder, setNewLineText, (, final, String, newLine]
[), ;, }, }, public, String, getNewLineText, (, ), {, return, newLine, ;, }, public, StrBuilder, setNewLineText, (, final, String]
[;, }, public, StrBuilder, setNewLineText, (, final, String, newLine, ), {, this, ., newLine, =, newLine, ;, return, this, ;]
[=, newLine, ;, return, this, ;, }, public, String, getNullText, (, ), {, return, nullText, ;, }, public, StrBuilder, setNullText]
[., newLine, =, newLine, ;, return, this, ;, }, public, String, getNullText, (, ), {, return, nullText, ;, }, public]
[;, return, this, ;, }, public, String, getNullText, (, ), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String]
[;, }, public, String, getNullText, (, ), {, return, nullText, ;, }, public, StrBuilder, setNullText, (, String, nullText, ), {]
[;, }, public, StrBuilder, setNullText, (, String, nullText, ), {, if, (, nullText, !=, null, &&, nullText, ., isEmpty, (]
[), {, nullText, =, null, ;, }, this, ., nullText, =, nullText, ;, return, this, ;, }, @, Override, public]
[&&, nullText, ., isEmpty, (, ), ), {, nullText, =, null, ;, }, this, ., nullText, =, nullText, ;, return]
[!=, null, &&, nullText, ., isEmpty, (, ), ), {, nullText, =, null, ;, }, this, ., nullText, =, nullText]
[&&, nullText, ., isEmpty, (, ), ), {, nullText, =, null, ;, }, this, ., nullText, =, nullText, ;, return]
[), {, nullText, =, null, ;, }, this, ., nullText, =, nullText, ;, return, this, ;, }, @, Override, public]
[., isEmpty, (, ), ), {, nullText, =, null, ;, }, this, ., nullText, =, nullText, ;, return, this, ;]
[=, null, ;, }, this, ., nullText, =, nullText, ;, return, this, ;, }, @, Override, public, int, length, (]
[;, }, this, ., nullText, =, nullText, ;, return, this, ;, }, @, Override, public, int, length, (, ), {]
[=, nullText, ;, return, this, ;, }, @, Override, public, int, length, (, ), {, return, size, ;, }, public]
[., nullText, =, nullText, ;, return, this, ;, }, @, Override, public, int, length, (, ), {, return, size, ;]
[;, return, this, ;, }, @, Override, public, int, length, (, ), {, return, size, ;, }, public, StrBuilder, setLength]
[;, }, @, Override, public, int, length, (, ), {, return, size, ;, }, public, StrBuilder, setLength, (, final, int]
[;, }, public, StrBuilder, setLength, (, final, int, length, ), {, if, (, length, <, 0, ), {, throw, new]
[), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (, length, <, size, ), {, size, =, length]
[<, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (, length, <, size, ), {, size]
[), {, throw, new, StringIndexOutOfBoundsException, (, length, ), ;, }, if, (, length, <, size, ), {, size, =, length]
[;, }, if, (, length, <, size, ), {, size, =, length, ;, }, else, if, (, length, >, size]
[), ;, }, if, (, length, <, size, ), {, size, =, length, ;, }, else, if, (, length, >]
[), {, size, =, length, ;, }, else, if, (, length, >, size, ), {, ensureCapacity, (, length, ), ;]
[<, size, ), {, size, =, length, ;, }, else, if, (, length, >, size, ), {, ensureCapacity, (, length]
[), {, size, =, length, ;, }, else, if, (, length, >, size, ), {, ensureCapacity, (, length, ), ;]
[=, length, ;, }, else, if, (, length, >, size, ), {, ensureCapacity, (, length, ), ;, final, int, oldEnd]
[;, }, else, if, (, length, >, size, ), {, ensureCapacity, (, length, ), ;, final, int, oldEnd, =, size]
[), {, ensureCapacity, (, length, ), ;, final, int, oldEnd, =, size, ;, final, int, newEnd, =, length, ;, size]
[>, size, ), {, ensureCapacity, (, length, ), ;, final, int, oldEnd, =, size, ;, final, int, newEnd, =, length]
[), {, ensureCapacity, (, length, ), ;, final, int, oldEnd, =, size, ;, final, int, newEnd, =, length, ;, size]
[;, final, int, oldEnd, =, size, ;, final, int, newEnd, =, length, ;, size, =, length, ;, for, (, int]
[), ;, final, int, oldEnd, =, size, ;, final, int, newEnd, =, length, ;, size, =, length, ;, for, (]
[;, final, int, newEnd, =, length, ;, size, =, length, ;, for, (, int, i, =, oldEnd, ;, i, <]
[;, size, =, length, ;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;, i, ++, ), {]
[=, length, ;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;, i, ++, ), {, buffer, []
[;, for, (, int, i, =, oldEnd, ;, i, <, newEnd, ;, i, ++, ), {, buffer, [, i, ]]
[;, i, <, newEnd, ;, i, ++, ), {, buffer, [, i, ], =, '\0', ;, }, }, return, this]
[;, i, ++, ), {, buffer, [, i, ], =, '\0', ;, }, }, return, this, ;, }, public, int]
[<, newEnd, ;, i, ++, ), {, buffer, [, i, ], =, '\0', ;, }, }, return, this, ;, }]
[;, i, ++, ), {, buffer, [, i, ], =, '\0', ;, }, }, return, this, ;, }, public, int]
[), {, buffer, [, i, ], =, '\0', ;, }, }, return, this, ;, }, public, int, capacity, (, )]
[++, ), {, buffer, [, i, ], =, '\0', ;, }, }, return, this, ;, }, public, int, capacity, (]
[=, '\0', ;, }, }, return, this, ;, }, public, int, capacity, (, ), {, return, buffer, ., length, ;]
[[, i, ], =, '\0', ;, }, }, return, this, ;, }, public, int, capacity, (, ), {, return, buffer]
[], =, '\0', ;, }, }, return, this, ;, }, public, int, capacity, (, ), {, return, buffer, ., length]
[;, }, }, return, this, ;, }, public, int, capacity, (, ), {, return, buffer, ., length, ;, }, public]
[;, }, public, int, capacity, (, ), {, return, buffer, ., length, ;, }, public, StrBuilder, ensureCapacity, (, final, int]
[;, }, public, StrBuilder, ensureCapacity, (, final, int, capacity, ), {, if, (, capacity, >, buffer, ., length, ), {]
[., length, ;, }, public, StrBuilder, ensureCapacity, (, final, int, capacity, ), {, if, (, capacity, >, buffer, ., length]
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, capacity, *, 2, ], ;]
[>, buffer, ., length, ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, capacity]
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, capacity, *, 2, ], ;]
[., length, ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, capacity, *, 2]
[;, buffer, =, new, char, [, capacity, *, 2, ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer]
[=, new, char, [, capacity, *, 2, ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0]
[;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;]
[], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this]
[*, 2, ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }]
[], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this]
[;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (, buffer, ., length, >, length, (]
[., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public]
[,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, )]
[,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if]
[,, 0, ,, size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (, buffer]
[,, size, ), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (, buffer, ., length]
[), ;, }, return, this, ;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (, buffer, ., length, >, length]
[;, }, public, StrBuilder, minimizeCapacity, (, ), {, if, (, buffer, ., length, >, length, (, ), ), {, final]
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, length, (, ), ], ;]
[>, length, (, ), ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, length]
[., length, >, length, (, ), ), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char]
[), {, final, char, [, ], old, =, buffer, ;, buffer, =, new, char, [, length, (, ), ], ;]
[;, buffer, =, new, char, [, length, (, ), ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer]
[=, new, char, [, length, (, ), ], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0]
[;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;]
[], ;, System, ., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this]
[;, }, return, this, ;, }, public, int, size, (, ), {, return, size, ;, }, public, boolean, isEmpty, (]
[., arraycopy, (, old, ,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public]
[,, 0, ,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, int, size, (, )]
[,, buffer, ,, 0, ,, size, ), ;, }, return, this, ;, }, public, int, size, (, ), {, return]
[,, 0, ,, size, ), ;, }, return, this, ;, }, public, int, size, (, ), {, return, size, ;]
[,, size, ), ;, }, return, this, ;, }, public, int, size, (, ), {, return, size, ;, }, public]
[), ;, }, return, this, ;, }, public, int, size, (, ), {, return, size, ;, }, public, boolean, isEmpty]
[;, }, public, int, size, (, ), {, return, size, ;, }, public, boolean, isEmpty, (, ), {, return, size]
[;, }, public, boolean, isEmpty, (, ), {, return, size, ==, 0, ;, }, public, StrBuilder, clear, (, ), {]
[;, }, public, StrBuilder, clear, (, ), {, size, =, 0, ;, return, this, ;, }, @, Override, public, char]
[==, 0, ;, }, public, StrBuilder, clear, (, ), {, size, =, 0, ;, return, this, ;, }, @, Override]
[;, }, public, StrBuilder, clear, (, ), {, size, =, 0, ;, return, this, ;, }, @, Override, public, char]
[=, 0, ;, return, this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (]
[;, return, this, ;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (, index, <]
[;, }, @, Override, public, char, charAt, (, final, int, index, ), {, if, (, index, <, 0, ||, index]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer, [, index, ], ;, }, public, StrBuilder, setCharAt]
[||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer, [, index]
[<, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer]
[||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer, [, index]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer, [, index, ], ;, }, public, StrBuilder, setCharAt]
[>=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer, [, index, ], ;]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, return, buffer, [, index, ], ;, }, public, StrBuilder, setCharAt]
[;, }, return, buffer, [, index, ], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch]
[), ;, }, return, buffer, [, index, ], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char]
[;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (, index, <, 0]
[[, index, ], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (]
[], ;, }, public, StrBuilder, setCharAt, (, final, int, index, ,, final, char, ch, ), {, if, (, index, <]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ], =, ch, ;, return, this, ;]
[||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ]]
[<, 0, ||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, []
[||, index, >=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ]]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ], =, ch, ;, return, this, ;]
[>=, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ], =, ch]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, buffer, [, index, ], =, ch, ;, return, this, ;]
[;, }, buffer, [, index, ], =, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index]
[), ;, }, buffer, [, index, ], =, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int]
[=, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <]
[[, index, ], =, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if]
[], =, ch, ;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index]
[;, return, this, ;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <, 0, ||]
[;, }, public, StrBuilder, deleteCharAt, (, final, int, index, ), {, if, (, index, <, 0, ||, index, >=, size]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +, 1, ,, 1, )]
[||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +]
[<, 0, ||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,]
[||, index, >=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +, 1, ,, 1, )]
[>=, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +, 1, ,]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, deleteImpl, (, index, ,, index, +, 1, ,, 1, )]
[;, }, deleteImpl, (, index, ,, index, +, 1, ,, 1, ), ;, return, this, ;, }, public, char, []
[), ;, }, deleteImpl, (, index, ,, index, +, 1, ,, 1, ), ;, return, this, ;, }, public, char]
[;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==, 0, ), {]
[,, index, +, 1, ,, 1, ), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {]
[,, 1, ), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==]
[+, 1, ,, 1, ), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (]
[,, 1, ), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==]
[), ;, return, this, ;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==, 0, )]
[;, }, public, char, [, ], toCharArray, (, ), {, if, (, size, ==, 0, ), {, return, ArrayUtils, .]
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, size, ], ;]
[==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, size]
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, size, ], ;]
[;, }, final, char, chars, [, ], =, new, char, [, size, ], ;, System, ., arraycopy, (, buffer, ,]
[., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, size, ], ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, buffer, ,, 0, ,, chars, ,, 0, ,, size, ), ;, return, chars, ;, }]
[], ;, System, ., arraycopy, (, buffer, ,, 0, ,, chars, ,, 0, ,, size, ), ;, return, chars, ;]
[;, return, chars, ;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex]
[., arraycopy, (, buffer, ,, 0, ,, chars, ,, 0, ,, size, ), ;, return, chars, ;, }, public, char]
[,, 0, ,, chars, ,, 0, ,, size, ), ;, return, chars, ;, }, public, char, [, ], toCharArray, (]
[,, chars, ,, 0, ,, size, ), ;, return, chars, ;, }, public, char, [, ], toCharArray, (, final, int]
[,, 0, ,, size, ), ;, return, chars, ;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,]
[,, size, ), ;, return, chars, ;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex]
[), ;, return, chars, ;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex, ), {]
[;, }, public, char, [, ], toCharArray, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (]
[=, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, ==]
[;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY]
[,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, ==, 0, ), {, return]
[), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, ==, 0, ), {, return, ArrayUtils, .]
[;, if, (, len, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =]
[-, startIndex, ;, if, (, len, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, []
[;, if, (, len, ==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =]
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, len, ], ;]
[==, 0, ), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, len]
[), {, return, ArrayUtils, ., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, len, ], ;]
[;, }, final, char, chars, [, ], =, new, char, [, len, ], ;, System, ., arraycopy, (, buffer, ,]
[., EMPTY_CHAR_ARRAY, ;, }, final, char, chars, [, ], =, new, char, [, len, ], ;, System, ., arraycopy, (]
[;, System, ., arraycopy, (, buffer, ,, startIndex, ,, chars, ,, 0, ,, len, ), ;, return, chars, ;, }]
[], ;, System, ., arraycopy, (, buffer, ,, startIndex, ,, chars, ,, 0, ,, len, ), ;, return, chars, ;]
[;, return, chars, ;, }, public, char, [, ], getChars, (, char, [, ], destination, ), {, final, int, len]
[., arraycopy, (, buffer, ,, startIndex, ,, chars, ,, 0, ,, len, ), ;, return, chars, ;, }, public, char]
[,, startIndex, ,, chars, ,, 0, ,, len, ), ;, return, chars, ;, }, public, char, [, ], getChars, (]
[,, chars, ,, 0, ,, len, ), ;, return, chars, ;, }, public, char, [, ], getChars, (, char, []
[,, 0, ,, len, ), ;, return, chars, ;, }, public, char, [, ], getChars, (, char, [, ], destination]
[,, len, ), ;, return, chars, ;, }, public, char, [, ], getChars, (, char, [, ], destination, ), {]
[), ;, return, chars, ;, }, public, char, [, ], getChars, (, char, [, ], destination, ), {, final, int]
[;, }, public, char, [, ], getChars, (, char, [, ], destination, ), {, final, int, len, =, length, (]
[;, if, (, destination, ==, null, ||, destination, ., length, <, len, ), {, destination, =, new, char, [, len]
[), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination]
[||, destination, ., length, <, len, ), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy]
[==, null, ||, destination, ., length, <, len, ), {, destination, =, new, char, [, len, ], ;, }, System]
[||, destination, ., length, <, len, ), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy]
[), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination]
[<, len, ), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0]
[., length, <, len, ), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer]
[), {, destination, =, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination]
[=, new, char, [, len, ], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination, ,, 0, ,]
[;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination, ,, 0, ,, len, ), ;, return, destination, ;]
[], ;, }, System, ., arraycopy, (, buffer, ,, 0, ,, destination, ,, 0, ,, len, ), ;, return, destination]
[;, return, destination, ;, }, public, void, getChars, (, final, int, startIndex, ,, final, int, endIndex, ,, final, char, destination]
[., arraycopy, (, buffer, ,, 0, ,, destination, ,, 0, ,, len, ), ;, return, destination, ;, }, public, void]
[,, 0, ,, destination, ,, 0, ,, len, ), ;, return, destination, ;, }, public, void, getChars, (, final, int]
[,, destination, ,, 0, ,, len, ), ;, return, destination, ;, }, public, void, getChars, (, final, int, startIndex, ,]
[,, 0, ,, len, ), ;, return, destination, ;, }, public, void, getChars, (, final, int, startIndex, ,, final, int]
[,, len, ), ;, return, destination, ;, }, public, void, getChars, (, final, int, startIndex, ,, final, int, endIndex, ,]
[), ;, return, destination, ;, }, public, void, getChars, (, final, int, startIndex, ,, final, int, endIndex, ,, final, char]
[;, }, public, void, getChars, (, final, int, startIndex, ,, final, int, endIndex, ,, final, char, destination, [, ], ,]
[), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <, 0, ||, endIndex, >, length, (]
[<, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <, 0, ||, endIndex, >]
[), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, <, 0, ||, endIndex, >, length, (]
[;, }, if, (, endIndex, <, 0, ||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex]
[), ;, }, if, (, endIndex, <, 0, ||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException]
[||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >]
[<, 0, ||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (]
[||, endIndex, >, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >]
[), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException]
[>, length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, )]
[), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException]
[;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy]
[), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, .]
[), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,]
[>, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,]
[), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,]
[;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }]
[), ;, }, System, ., arraycopy, (, buffer, ,, startIndex, ,, destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;]
[;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {, append, (, SystemUtils, ., LINE_SEPARATOR]
[., arraycopy, (, buffer, ,, startIndex, ,, destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine]
[,, startIndex, ,, destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if]
[,, destination, ,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine]
[,, destinationIndex, ,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null]
[,, endIndex, -, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {]
[), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {, append, (, SystemUtils, .]
[-, startIndex, ), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {, append, (]
[), ;, }, public, StrBuilder, appendNewLine, (, ), {, if, (, newLine, ==, null, ), {, append, (, SystemUtils, .]
[), {, append, (, SystemUtils, ., LINE_SEPARATOR, ), ;, return, this, ;, }, return, append, (, newLine, ), ;, }]
[==, null, ), {, append, (, SystemUtils, ., LINE_SEPARATOR, ), ;, return, this, ;, }, return, append, (, newLine, )]
[), {, append, (, SystemUtils, ., LINE_SEPARATOR, ), ;, return, this, ;, }, return, append, (, newLine, ), ;, }]
[;, return, this, ;, }, return, append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, ), {, if, (]
[), ;, return, this, ;, }, return, append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, ), {, if]
[., LINE_SEPARATOR, ), ;, return, this, ;, }, return, append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, )]
[;, }, return, append, (, newLine, ), ;, }, public, StrBuilder, appendNull, (, ), {, if, (, nullText, ==, null]
[;, }, public, StrBuilder, appendNull, (, ), {, if, (, nullText, ==, null, ), {, return, this, ;, }, return]
[), ;, }, public, StrBuilder, appendNull, (, ), {, if, (, nullText, ==, null, ), {, return, this, ;, }]
[), {, return, this, ;, }, return, append, (, nullText, ), ;, }, public, StrBuilder, append, (, final, Object, obj]
[==, null, ), {, return, this, ;, }, return, append, (, nullText, ), ;, }, public, StrBuilder, append, (, final]
[), {, return, this, ;, }, return, append, (, nullText, ), ;, }, public, StrBuilder, append, (, final, Object, obj]
[;, }, return, append, (, nullText, ), ;, }, public, StrBuilder, append, (, final, Object, obj, ), {, if, (]
[;, }, public, StrBuilder, append, (, final, Object, obj, ), {, if, (, obj, ==, null, ), {, return, appendNull]
[), ;, }, public, StrBuilder, append, (, final, Object, obj, ), {, if, (, obj, ==, null, ), {, return]
[), {, return, appendNull, (, ), ;, }, return, append, (, obj, ., toString, (, ), ), ;, }, @]
[==, null, ), {, return, appendNull, (, ), ;, }, return, append, (, obj, ., toString, (, ), ), ;]
[), {, return, appendNull, (, ), ;, }, return, append, (, obj, ., toString, (, ), ), ;, }, @]
[;, }, return, append, (, obj, ., toString, (, ), ), ;, }, @, Override, public, StrBuilder, append, (, final]
[;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ), {, if, (, seq, ==, null, ), {]
[), ;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ), {, if, (, seq, ==, null, )]
[., toString, (, ), ), ;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ), {, if, (]
[), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ), ;, }, @]
[==, null, ), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ), ;]
[), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ), ;, }, @]
[;, }, return, append, (, seq, ., toString, (, ), ), ;, }, @, Override, public, StrBuilder, append, (, final]
[;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ,, final, int, startIndex, ,, final, int, length, )]
[), ;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ,, final, int, startIndex, ,, final, int, length]
[., toString, (, ), ), ;, }, @, Override, public, StrBuilder, append, (, final, CharSequence, seq, ,, final, int, startIndex]
[), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ,, startIndex, ,, length]
[==, null, ), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ,, startIndex]
[), {, return, appendNull, (, ), ;, }, return, append, (, seq, ., toString, (, ), ,, startIndex, ,, length]
[;, }, return, append, (, seq, ., toString, (, ), ,, startIndex, ,, length, ), ;, }, public, StrBuilder, append]
[;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (, str, ==, null, ), {, return, appendNull]
[,, startIndex, ,, length, ), ;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (, str, ==]
[., toString, (, ), ,, startIndex, ,, length, ), ;, }, public, StrBuilder, append, (, final, String, str, ), {]
[,, length, ), ;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (, str, ==, null, )]
[), ;, }, public, StrBuilder, append, (, final, String, str, ), {, if, (, str, ==, null, ), {, return]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars]
[;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, )]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return]
[), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }]
[+, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen]
[), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }]
[;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, str, ,, final, int]
[., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;]
[,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, str]
[), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, str, ,, final]
[+=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, str, ,, final, int, startIndex, ,]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, str, ,, final, int, startIndex, ,, final, int]
[;, }, public, StrBuilder, append, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, if]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, .]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[<, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), )]
[), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[+, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, )]
[;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[+, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, format, ,, final, Object]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[+, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, format]
[), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, format, ,, final]
[+=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, format, ,, final, Object, ..., objs]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, String, format, ,, final, Object, ..., objs, ), {]
[;, }, public, StrBuilder, append, (, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (, String]
[;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (, str, ==, null, ), {, return, appendNull]
[), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (, str, ==, null, ), {, return]
[., format, (, format, ,, objs, ), ), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if]
[,, objs, ), ), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (, str, ==, null]
[), ), ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ), {, if, (, str, ==, null, ), {]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars]
[;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, )]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return]
[), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }]
[+, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen]
[), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }]
[;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ,, final, int]
[., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;]
[,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuffer, str]
[), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ,, final]
[+=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ,, final, int, startIndex, ,]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int]
[;, }, public, StrBuilder, append, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, if]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, .]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[<, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), )]
[), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[+, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, )]
[;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[+, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[+, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str]
[), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {]
[+=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if, (, str]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if, (, str, ==, null]
[;, }, public, StrBuilder, append, (, final, StringBuilder, str, ), {, if, (, str, ==, null, ), {, return, appendNull]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars]
[;, ensureCapacity, (, len, +, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, )]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return]
[), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }]
[+, strLen, ), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen]
[), ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }]
[;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ,, final, int]
[., getChars, (, 0, ,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;]
[,, strLen, ,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, buffer, ,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, len, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str]
[), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ,, final]
[+=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ,, final, int, startIndex, ,]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int]
[;, }, public, StrBuilder, append, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, .]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[<, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), )]
[), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[+, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, )]
[;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[+, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[+, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str]
[), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {]
[+=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if, (, str]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if, (, str, ==, null]
[;, }, public, StrBuilder, append, (, final, StrBuilder, str, ), {, if, (, str, ==, null, ), {, return, appendNull]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy]
[;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,]
[;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=]
[), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size]
[+, strLen, ), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, )]
[), ;, System, ., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size]
[;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ,, final, int]
[., arraycopy, (, str, ., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;]
[,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public]
[., buffer, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;]
[,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str]
[), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ,, final]
[+=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ,, final, int, startIndex, ,]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int]
[;, }, public, StrBuilder, append, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, if]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, .]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (]
[;, }, if, (, startIndex, <, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[<, 0, ||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }]
[||, startIndex, >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <]
[), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "startIndex must be valid", ), ;, }, if, (, length, <, 0, ||]
[;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), )]
[), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[<, 0, ||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (]
[||, (, startIndex, +, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[>, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[+, length, ), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if]
[), >, str, ., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length]
[), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, ), {, final, int, len]
[., length, (, ), ), {, throw, new, StringIndexOutOfBoundsException, (, "length must be valid", ), ;, }, if, (, length, >, 0, )]
[;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars]
[;, ensureCapacity, (, len, +, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,]
[;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[+, length, ), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size]
[), ;, str, ., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length]
[;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, )]
[., getChars, (, startIndex, ,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return]
[,, startIndex, +, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[+, length, ,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, buffer, ,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, len, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, []
[), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars]
[+=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ), {, if]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ), {, if, (, chars]
[;, }, public, StrBuilder, append, (, final, char, [, ], chars, ), {, if, (, chars, ==, null, ), {]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, chars, ., length, ;, if, (, strLen, >]
[==, null, ), {, return, appendNull, (, ), ;, }, final, int, strLen, =, chars, ., length, ;, if, (]
[), {, return, appendNull, (, ), ;, }, final, int, strLen, =, chars, ., length, ;, if, (, strLen, >]
[;, }, final, int, strLen, =, chars, ., length, ;, if, (, strLen, >, 0, ), {, final, int, len]
[;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +]
[., length, ;, if, (, strLen, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy]
[;, ensureCapacity, (, len, +, strLen, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,]
[;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;]
[), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen]
[+, strLen, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size]
[), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen]
[;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ,]
[., arraycopy, (, chars, ,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return]
[,, 0, ,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public]
[,, buffer, ,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, len, ,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, strLen, ), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, []
[), ;, size, +=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars]
[+=, strLen, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ,, final, int]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, char, [, ], chars, ,, final, int, startIndex, ,]
[;, }, public, StrBuilder, append, (, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, )]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, chars, ., length, )]
[==, null, ), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, chars, .]
[), {, return, appendNull, (, ), ;, }, if, (, startIndex, <, 0, ||, startIndex, >, chars, ., length, )]
[;, }, if, (, startIndex, <, 0, ||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: "]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (, startIndex]
[||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (]
[<, 0, ||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }]
[||, startIndex, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (, startIndex]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||, (, startIndex]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid startIndex: ", +, length, ), ;, }, if, (, length, <, 0, ||]
[;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw]
[), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {]
[+, length, ), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, chars, ., length]
[), ;, }, if, (, length, <, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, final]
[||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, )]
[<, 0, ||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +]
[||, (, startIndex, +, length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, )]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, final]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >]
[), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length]
[+, length, ), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if]
[), >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, final]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, )]
[;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[+, length, ), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;]
[), ;, }, if, (, length, >, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy]
[>, 0, ), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, System]
[), {, final, int, len, =, length, (, ), ;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy]
[;, ensureCapacity, (, len, +, length, ), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,]
[;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size, +=, length, ;]
[), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size, +=, length]
[+, length, ), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size]
[), ;, System, ., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size, +=, length]
[;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if]
[., arraycopy, (, chars, ,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size, +=, length, ;, }, return]
[,, startIndex, ,, buffer, ,, len, ,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public]
[,, buffer, ,, len, ,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append]
[,, len, ,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final]
[,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, boolean, value]
[), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {]
[+=, length, ;, }, return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (, value]
[;, }, return, this, ;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {]
[;, }, public, StrBuilder, append, (, final, boolean, value, ), {, if, (, value, ), {, ensureCapacity, (, size, +]
[), {, ensureCapacity, (, size, +, 4, ), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size]
[;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size]
[), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, []
[+, 4, ), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;]
[), ;, buffer, [, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, []
[=, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer]
[[, size, ++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ]]
[], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;]
[++, ], =, 't', ;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u']
[;, buffer, [, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size]
[=, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }]
[[, size, ++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size, ++, ]]
[], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;]
[++, ], =, 'r', ;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e']
[;, buffer, [, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {]
[=, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, )]
[[, size, ++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (]
[], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5]
[++, ], =, 'u', ;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +]
[;, buffer, [, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer]
[=, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =, 'f']
[[, size, ++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size]
[], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =]
[++, ], =, 'e', ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ]]
[;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;, buffer]
[;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size]
[), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, []
[+, 5, ), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;]
[), ;, buffer, [, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, []
[=, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer]
[[, size, ++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ]]
[], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;]
[++, ], =, 'f', ;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l']
[;, buffer, [, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size]
[=, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer]
[[, size, ++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ]]
[], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;]
[++, ], =, 'a', ;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's']
[;, buffer, [, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size]
[=, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size, ++, ], =, 'e', ;, }]
[[, size, ++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size, ++, ]]
[], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size, ++, ], =, 'e', ;]
[++, ], =, 'l', ;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size, ++, ], =, 'e']
[;, buffer, [, size, ++, ], =, 's', ;, buffer, [, size, ++, ], =, 'e', ;, }, return, this]
[=, 's', ;, buffer, [, size, ++, ], =, 'e', ;, }, return, this, ;, }, @, Override, public, StrBuilder]
[[, size, ++, ], =, 's', ;, buffer, [, size, ++, ], =, 'e', ;, }, return, this, ;, }]
[], =, 's', ;, buffer, [, size, ++, ], =, 'e', ;, }, return, this, ;, }, @, Override, public]
[++, ], =, 's', ;, buffer, [, size, ++, ], =, 'e', ;, }, return, this, ;, }, @, Override]
[;, buffer, [, size, ++, ], =, 'e', ;, }, return, this, ;, }, @, Override, public, StrBuilder, append, (]
[=, 'e', ;, }, return, this, ;, }, @, Override, public, StrBuilder, append, (, final, char, ch, ), {, final]
[[, size, ++, ], =, 'e', ;, }, return, this, ;, }, @, Override, public, StrBuilder, append, (, final, char]
[], =, 'e', ;, }, return, this, ;, }, @, Override, public, StrBuilder, append, (, final, char, ch, ), {]
[++, ], =, 'e', ;, }, return, this, ;, }, @, Override, public, StrBuilder, append, (, final, char, ch, )]
[;, }, return, this, ;, }, @, Override, public, StrBuilder, append, (, final, char, ch, ), {, final, int, len]
[;, }, @, Override, public, StrBuilder, append, (, final, char, ch, ), {, final, int, len, =, length, (, )]
[;, ensureCapacity, (, len, +, 1, ), ;, buffer, [, size, ++, ], =, ch, ;, return, this, ;, }]
[;, buffer, [, size, ++, ], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value]
[), ;, buffer, [, size, ++, ], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int]
[+, 1, ), ;, buffer, [, size, ++, ], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (]
[), ;, buffer, [, size, ++, ], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int]
[=, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append, (, String]
[[, size, ++, ], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {]
[], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append, (]
[++, ], =, ch, ;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append]
[;, return, this, ;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append, (, String, ., valueOf]
[;, }, public, StrBuilder, append, (, final, int, value, ), {, return, append, (, String, ., valueOf, (, value, )]
[;, }, public, StrBuilder, append, (, final, long, value, ), {, return, append, (, String, ., valueOf, (, value, )]
[), ;, }, public, StrBuilder, append, (, final, long, value, ), {, return, append, (, String, ., valueOf, (, value]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, long, value, ), {, return, append, (]
[), ), ;, }, public, StrBuilder, append, (, final, long, value, ), {, return, append, (, String, ., valueOf, (]
[;, }, public, StrBuilder, append, (, final, float, value, ), {, return, append, (, String, ., valueOf, (, value, )]
[), ;, }, public, StrBuilder, append, (, final, float, value, ), {, return, append, (, String, ., valueOf, (, value]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, float, value, ), {, return, append, (]
[), ), ;, }, public, StrBuilder, append, (, final, float, value, ), {, return, append, (, String, ., valueOf, (]
[;, }, public, StrBuilder, append, (, final, double, value, ), {, return, append, (, String, ., valueOf, (, value, )]
[), ;, }, public, StrBuilder, append, (, final, double, value, ), {, return, append, (, String, ., valueOf, (, value]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, append, (, final, double, value, ), {, return, append, (]
[), ), ;, }, public, StrBuilder, append, (, final, double, value, ), {, return, append, (, String, ., valueOf, (]
[;, }, public, StrBuilder, appendln, (, final, Object, obj, ), {, return, append, (, obj, ), ., appendNewLine, (, )]
[), ;, }, public, StrBuilder, appendln, (, final, Object, obj, ), {, return, append, (, obj, ), ., appendNewLine, (]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, appendln, (, final, Object, obj, ), {, return, append, (]
[), ), ;, }, public, StrBuilder, appendln, (, final, Object, obj, ), {, return, append, (, obj, ), ., appendNewLine]
[;, }, public, StrBuilder, appendln, (, final, String, str, ), {, return, append, (, str, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, str, ), {, return, append, (, str, )]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, str, ), {, return, append, (, str]
[;, }, public, StrBuilder, appendln, (, final, String, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, str, ,, final, int, startIndex, ,, final, int]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, str, ,, final, int, startIndex, ,, final]
[;, }, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ..., objs, ), {, return, append, (, format]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ..., objs, ), {]
[,, startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, format, ,, final]
[,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ...]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, String, format, ,, final, Object, ..., objs, )]
[;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ), {, return, append, (, str, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ), {, return, append, (, str, )]
[,, objs, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ), {, return, append]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ), {, return, append, (, str]
[;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ), {, return, append, (, str, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ), {, return, append, (, str, )]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ), {, return, append, (, str]
[;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final, int]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuilder, str, ,, final, int, startIndex, ,, final]
[;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final, int]
[,, startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final]
[,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final, int, startIndex]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StringBuffer, str, ,, final, int, startIndex, ,, final]
[;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {, return, append, (, str, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {, return, append, (, str, )]
[,, startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {]
[,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {, return, append]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ), {, return, append, (, str]
[;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int, length, ), {, return]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final, int]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, StrBuilder, str, ,, final, int, startIndex, ,, final]
[;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ), {, return, append, (, chars, ), ., appendNewLine]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ), {, return, append, (]
[,, startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars]
[,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ), {]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ), {, return, append]
[;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ,, final, int, startIndex, ,, final, int, length, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ,, final, int, startIndex, ,]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, [, ], chars, ,, final, int, startIndex]
[;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {, return, append, (, value, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {, return, append, (, value, )]
[,, startIndex, ,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {]
[,, length, ), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {, return, append]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, boolean, value, ), {, return, append, (, value]
[;, }, public, StrBuilder, appendln, (, final, char, ch, ), {, return, append, (, ch, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, ch, ), {, return, append, (, ch, )]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, char, ch, ), {, return, append, (, ch]
[;, }, public, StrBuilder, appendln, (, final, int, value, ), {, return, append, (, value, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, int, value, ), {, return, append, (, value, )]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, int, value, ), {, return, append, (, value]
[;, }, public, StrBuilder, appendln, (, final, long, value, ), {, return, append, (, value, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, long, value, ), {, return, append, (, value, )]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, long, value, ), {, return, append, (, value]
[;, }, public, StrBuilder, appendln, (, final, float, value, ), {, return, append, (, value, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, float, value, ), {, return, append, (, value, )]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, float, value, ), {, return, append, (, value]
[;, }, public, StrBuilder, appendln, (, final, double, value, ), {, return, append, (, value, ), ., appendNewLine, (, )]
[., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, double, value, ), {, return, append, (, value, )]
[), ., appendNewLine, (, ), ;, }, public, StrBuilder, appendln, (, final, double, value, ), {, return, append, (, value]
[;, }, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if, (, array, !=, null]
[., appendNewLine, (, ), ;, }, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {, if]
[), ., appendNewLine, (, ), ;, }, public, <, T, >, StrBuilder, appendAll, (, final, T, ..., array, ), {]
[), {, for, (, final, Object, element, :, array, ), {, append, (, element, ), ;, }, }, return, this]
[&&, array, ., length, >, 0, ), {, for, (, final, Object, element, :, array, ), {, append, (, element]
[!=, null, &&, array, ., length, >, 0, ), {, for, (, final, Object, element, :, array, ), {, append]
[&&, array, ., length, >, 0, ), {, for, (, final, Object, element, :, array, ), {, append, (, element]
[), {, for, (, final, Object, element, :, array, ), {, append, (, element, ), ;, }, }, return, this]
[>, 0, ), {, for, (, final, Object, element, :, array, ), {, append, (, element, ), ;, }, }]
[., length, >, 0, ), {, for, (, final, Object, element, :, array, ), {, append, (, element, ), ;]
[), {, for, (, final, Object, element, :, array, ), {, append, (, element, ), ;, }, }, return, this]
[), {, append, (, element, ), ;, }, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterable, <]
[;, }, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterable, <, ?, >, iterable, ), {, if]
[), ;, }, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterable, <, ?, >, iterable, ), {]
[;, }, public, StrBuilder, appendAll, (, final, Iterable, <, ?, >, iterable, ), {, if, (, iterable, !=, null, )]
[), {, for, (, final, Object, o, :, iterable, ), {, append, (, o, ), ;, }, }, return, this]
[!=, null, ), {, for, (, final, Object, o, :, iterable, ), {, append, (, o, ), ;, }, }]
[), {, for, (, final, Object, o, :, iterable, ), {, append, (, o, ), ;, }, }, return, this]
[), {, append, (, o, ), ;, }, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterator, <]
[;, }, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {, if]
[), ;, }, }, return, this, ;, }, public, StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {]
[;, }, public, StrBuilder, appendAll, (, final, Iterator, <, ?, >, it, ), {, if, (, it, !=, null, )]
[), {, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;]
[!=, null, ), {, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, )]
[), {, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;]
[), {, append, (, it, ., next, (, ), ), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators]
[., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, }, }, return, this, ;]
[;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, )]
[), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator]
[., next, (, ), ), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ]]
[;, }, public, StrBuilder, appendWithSeparators, (, final, Object, [, ], array, ,, String, separator, ), {, if, (, array, !=]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for]
[&&, array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array]
[!=, null, &&, array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append]
[&&, array, ., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for]
[>, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array, [, 0, ], )]
[., length, >, 0, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array, [, 0]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for]
[=, ObjectUtils, ., toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for, (, int, i]
[;, append, (, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;, i, <, array, .]
[., toString, (, separator, ), ;, append, (, array, [, 0, ], ), ;, for, (, int, i, =, 1]
[), ;, append, (, array, [, 0, ], ), ;, for, (, int, i, =, 1, ;, i, <, array]
[;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, append, (]
[), ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {, append]
[[, 0, ], ), ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++]
[], ), ;, for, (, int, i, =, 1, ;, i, <, array, ., length, ;, i, ++, ), {]
[;, i, <, array, ., length, ;, i, ++, ), {, append, (, separator, ), ;, append, (, array, []
[;, i, ++, ), {, append, (, separator, ), ;, append, (, array, [, i, ], ), ;, }, }]
[<, array, ., length, ;, i, ++, ), {, append, (, separator, ), ;, append, (, array, [, i, ]]
[;, i, ++, ), {, append, (, separator, ), ;, append, (, array, [, i, ], ), ;, }, }]
[., length, ;, i, ++, ), {, append, (, separator, ), ;, append, (, array, [, i, ], ), ;]
[), {, append, (, separator, ), ;, append, (, array, [, i, ], ), ;, }, }, return, this, ;]
[++, ), {, append, (, separator, ), ;, append, (, array, [, i, ], ), ;, }, }, return, this]
[;, append, (, array, [, i, ], ), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final]
[), ;, append, (, array, [, i, ], ), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (]
[;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,, String, separator]
[), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,, String]
[[, i, ], ), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >]
[], ), ;, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,]
[;, }, public, StrBuilder, appendWithSeparators, (, final, Iterable, <, ?, >, iterable, ,, String, separator, ), {, if, (, iterable]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =, iterable, .]
[!=, null, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =, iterable, .]
[=, ObjectUtils, ., toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =, iterable, ., iterator, (, )]
[;, final, Iterator, <, ?, >, it, =, iterable, ., iterator, (, ), ;, while, (, it, ., hasNext, (]
[., toString, (, separator, ), ;, final, Iterator, <, ?, >, it, =, iterable, ., iterator, (, ), ;, while]
[), ;, final, Iterator, <, ?, >, it, =, iterable, ., iterator, (, ), ;, while, (, it, ., hasNext]
[;, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if]
[., iterator, (, ), ;, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (]
[), {, append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {]
[., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext]
[;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return, this]
[), ;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return]
[., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;]
[), {, append, (, separator, ), ;, }, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterator]
[., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return, this, ;, }, public, StrBuilder]
[;, }, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterator, <, ?, >, it, ,, String]
[), ;, }, }, }, return, this, ;, }, public, StrBuilder, appendWithSeparators, (, final, Iterator, <, ?, >, it, ,]
[;, }, public, StrBuilder, appendWithSeparators, (, final, Iterator, <, ?, >, it, ,, String, separator, ), {, if, (, it]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (, it, ., hasNext, (, ), ), {]
[!=, null, ), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (, it, ., hasNext, (, )]
[), {, separator, =, ObjectUtils, ., toString, (, separator, ), ;, while, (, it, ., hasNext, (, ), ), {]
[=, ObjectUtils, ., toString, (, separator, ), ;, while, (, it, ., hasNext, (, ), ), {, append, (, it]
[;, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if]
[., toString, (, separator, ), ;, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next]
[), ;, while, (, it, ., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;]
[), {, append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {]
[., hasNext, (, ), ), {, append, (, it, ., next, (, ), ), ;, if, (, it, ., hasNext]
[;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return, this]
[), ;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return]
[., next, (, ), ), ;, if, (, it, ., hasNext, (, ), ), {, append, (, separator, ), ;]
[), {, append, (, separator, ), ;, }, }, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String]
[., hasNext, (, ), ), {, append, (, separator, ), ;, }, }, }, return, this, ;, }, public, StrBuilder]
[;, }, }, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ), {, return, appendSeparator, (]
[), ;, }, }, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ), {, return, appendSeparator]
[;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ), {, return, appendSeparator, (, separator, ,, null, ), ;, }]
[;, }, public, StrBuilder, appendSeparator, (, final, String, standard, ,, final, String, defaultIfEmpty, ), {, final, String, str, =, isEmpty]
[,, null, ), ;, }, public, StrBuilder, appendSeparator, (, final, String, standard, ,, final, String, defaultIfEmpty, ), {, final, String]
[), ;, }, public, StrBuilder, appendSeparator, (, final, String, standard, ,, final, String, defaultIfEmpty, ), {, final, String, str, =]
[;, if, (, str, !=, null, ), {, append, (, str, ), ;, }, return, this, ;, }, public, StrBuilder]
[?, defaultIfEmpty, :, standard, ;, if, (, str, !=, null, ), {, append, (, str, ), ;, }, return, this]
[:, standard, ;, if, (, str, !=, null, ), {, append, (, str, ), ;, }, return, this, ;, }]
[;, if, (, str, !=, null, ), {, append, (, str, ), ;, }, return, this, ;, }, public, StrBuilder]
[), {, append, (, str, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, )]
[!=, null, ), {, append, (, str, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char]
[), {, append, (, str, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, )]
[;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (, size, (, )]
[), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (, size, (]
[;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ), {, if, (, size, (, ), >, 0, ), {]
[), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, standard, ,]
[>, 0, ), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char]
[), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, standard, ,]
[;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, standard, ,, final, char, defaultIfEmpty, ), {, if]
[), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, standard, ,, final, char, defaultIfEmpty, ), {]
[;, }, public, StrBuilder, appendSeparator, (, final, char, standard, ,, final, char, defaultIfEmpty, ), {, if, (, size, (, )]
[), {, append, (, standard, ), ;, }, else, {, append, (, defaultIfEmpty, ), ;, }, return, this, ;, }]
[>, 0, ), {, append, (, standard, ), ;, }, else, {, append, (, defaultIfEmpty, ), ;, }, return, this]
[), {, append, (, standard, ), ;, }, else, {, append, (, defaultIfEmpty, ), ;, }, return, this, ;, }]
[;, }, else, {, append, (, defaultIfEmpty, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String]
[), ;, }, else, {, append, (, defaultIfEmpty, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final]
[;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if]
[), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {]
[;, }, public, StrBuilder, appendSeparator, (, final, String, separator, ,, final, int, loopIndex, ), {, if, (, separator, !=, null]
[), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,]
[&&, loopIndex, >, 0, ), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (]
[!=, null, &&, loopIndex, >, 0, ), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder]
[&&, loopIndex, >, 0, ), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (]
[), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,]
[>, 0, ), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char]
[), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,]
[;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {, if]
[), ;, }, return, this, ;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {]
[;, }, public, StrBuilder, appendSeparator, (, final, char, separator, ,, final, int, loopIndex, ), {, if, (, loopIndex, >, 0]
[), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendPadding, (, final, int, length, ,]
[>, 0, ), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendPadding, (, final, int]
[), {, append, (, separator, ), ;, }, return, this, ;, }, public, StrBuilder, appendPadding, (, final, int, length, ,]
[;, }, return, this, ;, }, public, StrBuilder, appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if]
[), ;, }, return, this, ;, }, public, StrBuilder, appendPadding, (, final, int, length, ,, final, char, padChar, ), {]
[;, }, public, StrBuilder, appendPadding, (, final, int, length, ,, final, char, padChar, ), {, if, (, length, >=, 0]
[), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;]
[>=, 0, ), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <]
[), {, ensureCapacity, (, size, +, length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;]
[;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, buffer, [, size, ++]
[), ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, buffer, [, size]
[+, length, ), ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, buffer]
[), ;, for, (, int, i, =, 0, ;, i, <, length, ;, i, ++, ), {, buffer, [, size]
[;, i, <, length, ;, i, ++, ), {, buffer, [, size, ++, ], =, padChar, ;, }, }, return]
[;, i, ++, ), {, buffer, [, size, ++, ], =, padChar, ;, }, }, return, this, ;, }, public]
[<, length, ;, i, ++, ), {, buffer, [, size, ++, ], =, padChar, ;, }, }, return, this, ;]
[;, i, ++, ), {, buffer, [, size, ++, ], =, padChar, ;, }, }, return, this, ;, }, public]
[), {, buffer, [, size, ++, ], =, padChar, ;, }, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (]
[++, ), {, buffer, [, size, ++, ], =, padChar, ;, }, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft]
[=, padChar, ;, }, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final, int, width]
[[, size, ++, ], =, padChar, ;, }, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj]
[], =, padChar, ;, }, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final, int]
[++, ], =, padChar, ;, }, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final]
[;, }, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final, int, width, ,, final]
[;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if]
[), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, )]
[>, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText]
[), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, )]
[;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;]
[), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), )]
[+, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (]
[), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), )]
[;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length]
[), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, .]
[?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str]
[==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, )]
[?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str]
[:, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }]
[), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, .]
[., toString, (, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int]
[), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if]
[), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[=, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, )]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {, str]
[;, if, (, strLen, >=, width, ), {, str, ., getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,]
[., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, strLen, -, width, ,]
[), {, str, ., getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,, size, ), ;, }, else, {]
[>=, width, ), {, str, ., getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,, size, ), ;, }]
[), {, str, ., getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,, size, ), ;, }, else, {]
[;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =, 0, ;, i]
[., getChars, (, strLen, -, width, ,, strLen, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen]
[,, strLen, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for]
[-, width, ,, strLen, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen]
[,, strLen, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for]
[,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int]
[,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =]
[), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +]
[-, strLen, ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, []
[;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +]
[;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }, str]
[;, i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0]
[<, padLen, ;, i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars]
[;, i, ++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0]
[), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,]
[++, ), {, buffer, [, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen]
[=, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;, }]
[[, size, +, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size]
[], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;]
[+, i, ], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen]
[], =, padChar, ;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;]
[;, }, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;, }, size, +=]
[;, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,, final]
[., getChars, (, 0, ,, strLen, ,, buffer, ,, size, +, padLen, ), ;, }, size, +=, width, ;, }]
[,, strLen, ,, buffer, ,, size, +, padLen, ), ;, }, size, +=, width, ;, }, return, this, ;, }]
[,, buffer, ,, size, +, padLen, ), ;, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder]
[,, size, +, padLen, ), ;, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (]
[), ;, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,]
[+, padLen, ), ;, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int]
[), ;, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,]
[+=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,, final, int, width, ,]
[;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,, final, int, width, ,, final, char]
[;, }, public, StrBuilder, appendFixedWidthPadLeft, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return]
[;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {, if]
[,, width, ,, padChar, ), ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,, final]
[., valueOf, (, value, ), ,, width, ,, padChar, ), ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,]
[), ,, width, ,, padChar, ), ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,]
[,, padChar, ), ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar]
[), ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, Object, obj, ,, final, int, width, ,, final, char, padChar, ), {]
[), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, )]
[>, 0, ), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText]
[), {, ensureCapacity, (, size, +, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, )]
[;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;]
[), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), )]
[+, width, ), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (]
[), ;, String, str, =, (, obj, ==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), )]
[;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length]
[), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, .]
[?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str]
[==, null, ?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, )]
[?, getNullText, (, ), :, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str]
[:, obj, ., toString, (, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }]
[), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, .]
[., toString, (, ), ), ;, if, (, str, ==, null, ), {, str, =, "", ;, }, final, int]
[), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[==, null, ), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if]
[), {, str, =, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[=, "", ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, )]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >=, width, ), {, str]
[;, if, (, strLen, >=, width, ), {, str, ., getChars, (, 0, ,, width, ,, buffer, ,, size, )]
[., length, (, ), ;, if, (, strLen, >=, width, ), {, str, ., getChars, (, 0, ,, width, ,]
[), {, str, ., getChars, (, 0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int]
[>=, width, ), {, str, ., getChars, (, 0, ,, width, ,, buffer, ,, size, ), ;, }, else, {]
[), {, str, ., getChars, (, 0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int]
[;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars, (, 0, ,, strLen, ,]
[., getChars, (, 0, ,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width]
[,, width, ,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str]
[,, buffer, ,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars]
[,, size, ), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars, (, 0]
[), ;, }, else, {, final, int, padLen, =, width, -, strLen, ;, str, ., getChars, (, 0, ,, strLen]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0]
[-, strLen, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +]
[., getChars, (, 0, ,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i]
[,, strLen, ,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i]
[,, buffer, ,, size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, )]
[,, size, ), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer]
[), ;, for, (, int, i, =, 0, ;, i, <, padLen, ;, i, ++, ), {, buffer, [, size]
[;, i, <, padLen, ;, i, ++, ), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;]
[;, i, ++, ), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }, size, +=]
[<, padLen, ;, i, ++, ), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }]
[;, i, ++, ), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }, size, +=]
[), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }, size, +=, width, ;, }]
[++, ), {, buffer, [, size, +, strLen, +, i, ], =, padChar, ;, }, }, size, +=, width, ;]
[=, padChar, ;, }, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, int]
[[, size, +, strLen, +, i, ], =, padChar, ;, }, }, size, +=, width, ;, }, return, this, ;]
[], =, padChar, ;, }, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final]
[+, i, ], =, padChar, ;, }, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight]
[+, strLen, +, i, ], =, padChar, ;, }, }, size, +=, width, ;, }, return, this, ;, }, public]
[+, i, ], =, padChar, ;, }, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight]
[], =, padChar, ;, }, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final]
[;, }, }, size, +=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, int, value, ,]
[+=, width, ;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, int, value, ,, final, int, width, ,]
[;, }, return, this, ;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, int, value, ,, final, int, width, ,, final, char]
[;, }, public, StrBuilder, appendFixedWidthPadRight, (, final, int, value, ,, final, int, width, ,, final, char, padChar, ), {, return]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {, if, (, obj, ==, null]
[,, width, ,, padChar, ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {]
[., valueOf, (, value, ), ,, width, ,, padChar, ), ;, }, public, StrBuilder, insert, (, final, int, index, ,]
[), ,, width, ,, padChar, ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, )]
[,, padChar, ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {, if, (]
[), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, Object, obj, ), {, if, (, obj, ==]
[), {, return, insert, (, index, ,, nullText, ), ;, }, return, insert, (, index, ,, obj, ., toString, (]
[==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, return, insert, (, index, ,, obj, .]
[), {, return, insert, (, index, ,, nullText, ), ;, }, return, insert, (, index, ,, obj, ., toString, (]
[;, }, return, insert, (, index, ,, obj, ., toString, (, ), ), ;, }, public, StrBuilder, insert, (, final]
[,, nullText, ), ;, }, return, insert, (, index, ,, obj, ., toString, (, ), ), ;, }, public, StrBuilder]
[), ;, }, return, insert, (, index, ,, obj, ., toString, (, ), ), ;, }, public, StrBuilder, insert, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, String, str, ), {, validateIndex, (, index, ), ;, if]
[,, obj, ., toString, (, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, String, str, )]
[), ;, }, public, StrBuilder, insert, (, final, int, index, ,, String, str, ), {, validateIndex, (, index, ), ;]
[., toString, (, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, String, str, ), {, validateIndex]
[;, if, (, str, ==, null, ), {, str, =, nullText, ;, }, if, (, str, !=, null, ), {]
[), ;, if, (, str, ==, null, ), {, str, =, nullText, ;, }, if, (, str, !=, null, )]
[), {, str, =, nullText, ;, }, if, (, str, !=, null, ), {, final, int, strLen, =, str, .]
[==, null, ), {, str, =, nullText, ;, }, if, (, str, !=, null, ), {, final, int, strLen, =]
[), {, str, =, nullText, ;, }, if, (, str, !=, null, ), {, final, int, strLen, =, str, .]
[=, nullText, ;, }, if, (, str, !=, null, ), {, final, int, strLen, =, str, ., length, (, )]
[;, }, if, (, str, !=, null, ), {, final, int, strLen, =, str, ., length, (, ), ;, if]
[), {, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final]
[!=, null, ), {, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, )]
[), {, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, ), {, final]
[;, if, (, strLen, >, 0, ), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, )]
[., length, (, ), ;, if, (, strLen, >, 0, ), {, final, int, newSize, =, size, +, strLen, ;]
[), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer]
[>, 0, ), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy]
[), {, final, int, newSize, =, size, +, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer]
[;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,]
[+, strLen, ;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[;, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, )]
[;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, index, ), ;, }, }]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;, size, =]
[,, index, ,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;, size, =, newSize, ;, str, .]
[,, buffer, ,, index, +, strLen, ,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (]
[,, index, +, strLen, ,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,]
[,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[+, strLen, ,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,]
[,, size, -, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,]
[), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, index, ), ;, }]
[-, index, ), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, index, )]
[), ;, size, =, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, index, ), ;, }]
[=, newSize, ;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, index, ), ;, }, }, return, this]
[;, str, ., getChars, (, 0, ,, strLen, ,, buffer, ,, index, ), ;, }, }, return, this, ;, }]
[;, }, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, [, ]]
[., getChars, (, 0, ,, strLen, ,, buffer, ,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder]
[,, strLen, ,, buffer, ,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder, insert, (, final, int]
[,, buffer, ,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,]
[,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char]
[), ;, }, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, []
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, [, ], ), {, validateIndex, (, index]
[;, if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, final, int, len]
[), ;, if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, final, int]
[), {, return, insert, (, index, ,, nullText, ), ;, }, final, int, len, =, chars, ., length, ;, if]
[==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, final, int, len, =, chars, ., length]
[), {, return, insert, (, index, ,, nullText, ), ;, }, final, int, len, =, chars, ., length, ;, if]
[;, }, final, int, len, =, chars, ., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (, size]
[,, nullText, ), ;, }, final, int, len, =, chars, ., length, ;, if, (, len, >, 0, ), {]
[), ;, }, final, int, len, =, chars, ., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (]
[;, if, (, len, >, 0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer]
[., length, ;, if, (, len, >, 0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy]
[), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index]
[>, 0, ), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer]
[), {, ensureCapacity, (, size, +, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -, index, ), ;]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -, index, )]
[+, len, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -, index, )]
[;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;, size, +=, len, ;]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, len, ,, size, -, index, ), ;, System, .]
[,, index, ,, buffer, ,, index, +, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,]
[,, buffer, ,, index, +, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,]
[,, index, +, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,]
[,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, )]
[+, len, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,]
[,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, )]
[), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;, size, +=, len]
[-, index, ), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;, size]
[), ;, System, ., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;, size, +=, len]
[;, size, +=, len, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char]
[., arraycopy, (, chars, ,, 0, ,, buffer, ,, index, ,, len, ), ;, size, +=, len, ;, }, return]
[,, 0, ,, buffer, ,, index, ,, len, ), ;, size, +=, len, ;, }, return, this, ;, }, public]
[,, buffer, ,, index, ,, len, ), ;, size, +=, len, ;, }, return, this, ;, }, public, StrBuilder, insert]
[,, index, ,, len, ), ;, size, +=, len, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final]
[,, len, ), ;, size, +=, len, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index]
[), ;, size, +=, len, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final]
[+=, len, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, []
[;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, [, ], ,]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, chars, [, ], ,, final, int, offset, ,]
[;, if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset]
[), ;, if, (, chars, ==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (]
[), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||, offset, >, chars]
[==, null, ), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||, offset]
[), {, return, insert, (, index, ,, nullText, ), ;, }, if, (, offset, <, 0, ||, offset, >, chars]
[;, }, if, (, offset, <, 0, ||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: "]
[,, nullText, ), ;, }, if, (, offset, <, 0, ||, offset, >, chars, ., length, ), {, throw, new]
[), ;, }, if, (, offset, <, 0, ||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||, offset, +]
[||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (]
[<, 0, ||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }]
[||, offset, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||, offset, +]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||, offset, +]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid offset: ", +, offset, ), ;, }, if, (, length, <, 0, ||]
[;, }, if, (, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException]
[), ;, }, if, (, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {, throw, new]
[+, offset, ), ;, }, if, (, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {]
[), ;, }, if, (, length, <, 0, ||, offset, +, length, >, chars, ., length, ), {, throw, new]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity]
[||, offset, +, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }]
[<, 0, ||, offset, +, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, )]
[||, offset, +, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >]
[+, length, >, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (]
[>, chars, ., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >]
[), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity]
[., length, ), {, throw, new, StringIndexOutOfBoundsException, (, "Invalid length: ", +, length, ), ;, }, if, (, length, >, 0, )]
[;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (]
[), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy]
[+, length, ), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System]
[), ;, }, if, (, length, >, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy]
[), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index]
[>, 0, ), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer]
[), {, ensureCapacity, (, size, +, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -, index, ), ;]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -, index, )]
[+, length, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -, index, )]
[;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;, size, +=, length, ;]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, length, ,, size, -, index, ), ;, System, .]
[,, index, ,, buffer, ,, index, +, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,]
[,, buffer, ,, index, +, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,]
[,, index, +, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,]
[,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, )]
[+, length, ,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,]
[,, size, -, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, )]
[), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;, size, +=, length]
[-, index, ), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;, size]
[), ;, System, ., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;, size, +=, length]
[;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, insert, (, int, index, ,, final, boolean, value]
[., arraycopy, (, chars, ,, offset, ,, buffer, ,, index, ,, length, ), ;, size, +=, length, ;, }, return]
[,, offset, ,, buffer, ,, index, ,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public]
[,, buffer, ,, index, ,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, insert]
[,, index, ,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, insert, (, int]
[,, length, ), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, insert, (, int, index, ,]
[), ;, size, +=, length, ;, }, return, this, ;, }, public, StrBuilder, insert, (, int, index, ,, final, boolean]
[+=, length, ;, }, return, this, ;, }, public, StrBuilder, insert, (, int, index, ,, final, boolean, value, ), {]
[;, }, return, this, ;, }, public, StrBuilder, insert, (, int, index, ,, final, boolean, value, ), {, validateIndex, (]
[;, }, public, StrBuilder, insert, (, int, index, ,, final, boolean, value, ), {, validateIndex, (, index, ), ;, if]
[;, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index]
[), ;, if, (, value, ), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,]
[), {, ensureCapacity, (, size, +, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, )]
[+, 4, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, )]
[;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, []
[,, index, ,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =]
[,, buffer, ,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;]
[,, index, +, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, []
[,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =]
[+, 4, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++]
[,, size, -, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =]
[), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, []
[-, index, ), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;]
[), ;, buffer, [, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, []
[=, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer]
[[, index, ++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ]]
[], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;]
[++, ], =, 't', ;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u']
[;, buffer, [, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index]
[=, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=]
[[, index, ++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =]
[], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size]
[++, ], =, 'r', ;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;]
[;, buffer, [, index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;]
[=, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size]
[[, index, ++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else]
[], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (]
[++, ], =, 'u', ;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity]
[;, buffer, [, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5]
[=, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy]
[[, index, ], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;]
[], =, 'e', ;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, .]
[;, size, +=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer]
[+=, 4, ;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index]
[;, }, else, {, ensureCapacity, (, size, +, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, )]
[+, 5, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, )]
[;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, []
[,, index, ,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =]
[,, buffer, ,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;]
[,, index, +, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, []
[,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =]
[+, 5, ,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++]
[,, size, -, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =]
[), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, []
[-, index, ), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;]
[), ;, buffer, [, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, []
[=, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer]
[[, index, ++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ]]
[], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;]
[++, ], =, 'f', ;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l']
[;, buffer, [, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index]
[=, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer]
[[, index, ++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ]]
[], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;]
[++, ], =, 'a', ;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's']
[;, buffer, [, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index]
[=, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=]
[[, index, ++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =]
[], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;, size]
[++, ], =, 'l', ;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;]
[;, buffer, [, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=, 5, ;]
[=, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=, 5, ;, }, return, this, ;, }, public]
[[, index, ++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=, 5, ;, }, return]
[], =, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=, 5, ;, }, return, this, ;, }]
[++, ], =, 's', ;, buffer, [, index, ], =, 'e', ;, size, +=, 5, ;, }, return, this, ;]
[;, buffer, [, index, ], =, 'e', ;, size, +=, 5, ;, }, return, this, ;, }, public, StrBuilder, insert]
[=, 'e', ;, size, +=, 5, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,]
[[, index, ], =, 'e', ;, size, +=, 5, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final]
[], =, 'e', ;, size, +=, 5, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index]
[;, size, +=, 5, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char]
[+=, 5, ;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, value, )]
[;, }, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, value, ), {, validateIndex]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, char, value, ), {, validateIndex, (, index, ), ;]
[;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +]
[), ;, ensureCapacity, (, size, +, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index]
[;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, )]
[+, 1, ), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -]
[), ;, System, ., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, )]
[;, buffer, [, index, ], =, value, ;, size, ++, ;, return, this, ;, }, public, StrBuilder, insert, (, final]
[., arraycopy, (, buffer, ,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;, buffer, []
[,, index, ,, buffer, ,, index, +, 1, ,, size, -, index, ), ;, buffer, [, index, ], =, value]
[,, buffer, ,, index, +, 1, ,, size, -, index, ), ;, buffer, [, index, ], =, value, ;, size]
[,, index, +, 1, ,, size, -, index, ), ;, buffer, [, index, ], =, value, ;, size, ++, ;]
[,, size, -, index, ), ;, buffer, [, index, ], =, value, ;, size, ++, ;, return, this, ;, }]
[+, 1, ,, size, -, index, ), ;, buffer, [, index, ], =, value, ;, size, ++, ;, return, this]
[,, size, -, index, ), ;, buffer, [, index, ], =, value, ;, size, ++, ;, return, this, ;, }]
[), ;, buffer, [, index, ], =, value, ;, size, ++, ;, return, this, ;, }, public, StrBuilder, insert, (]
[-, index, ), ;, buffer, [, index, ], =, value, ;, size, ++, ;, return, this, ;, }, public, StrBuilder]
[), ;, buffer, [, index, ], =, value, ;, size, ++, ;, return, this, ;, }, public, StrBuilder, insert, (]
[=, value, ;, size, ++, ;, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int]
[[, index, ], =, value, ;, size, ++, ;, return, this, ;, }, public, StrBuilder, insert, (, final, int, index]
[], =, value, ;, size, ++, ;, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final]
[;, size, ++, ;, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, )]
[;, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, ), {, return, insert]
[++, ;, return, this, ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, ), {, return]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, int, value, ), {, return, insert, (, index, ,]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, ), {, return, insert, (, index, ,]
[,, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long]
[), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, ), {, return, insert, (, index]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, )]
[), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, long, value, ), {, return, insert, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, ), {, return, insert, (, index, ,]
[,, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float]
[), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, ), {, return, insert, (, index]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, )]
[), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, float, value, ), {, return, insert, (]
[;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, ), {, return, insert, (, index, ,]
[,, String, ., valueOf, (, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double]
[), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, ), {, return, insert, (, index]
[., valueOf, (, value, ), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, )]
[), ), ;, }, public, StrBuilder, insert, (, final, int, index, ,, final, double, value, ), {, return, insert, (]
[;, }, private, void, deleteImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, len, ), {, System]
[,, String, ., valueOf, (, value, ), ), ;, }, private, void, deleteImpl, (, final, int, startIndex, ,, final, int]
[), ;, }, private, void, deleteImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, len, ), {]
[., valueOf, (, value, ), ), ;, }, private, void, deleteImpl, (, final, int, startIndex, ,, final, int, endIndex, ,]
[), ), ;, }, private, void, deleteImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, len, )]
[;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =]
[., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, ,, size, -, endIndex, ), ;, size, -=, len, ;]
[,, endIndex, ,, buffer, ,, startIndex, ,, size, -, endIndex, ), ;, size, -=, len, ;, }, public, StrBuilder, delete]
[,, buffer, ,, startIndex, ,, size, -, endIndex, ), ;, size, -=, len, ;, }, public, StrBuilder, delete, (, final]
[,, startIndex, ,, size, -, endIndex, ), ;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex]
[,, size, -, endIndex, ), ;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int]
[), ;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex]
[-, endIndex, ), ;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, )]
[), ;, size, -=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex]
[-=, len, ;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (]
[;, }, public, StrBuilder, delete, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,]
[=, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >]
[;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex, ,]
[,, endIndex, ), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >, 0, ), {, deleteImpl]
[), ;, final, int, len, =, endIndex, -, startIndex, ;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex]
[;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex, ,, endIndex, ,, len, ), ;, }, return, this]
[-, startIndex, ;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex, ,, endIndex, ,, len, ), ;, }]
[;, if, (, len, >, 0, ), {, deleteImpl, (, startIndex, ,, endIndex, ,, len, ), ;, }, return, this]
[), {, deleteImpl, (, startIndex, ,, endIndex, ,, len, ), ;, }, return, this, ;, }, public, StrBuilder, deleteAll, (]
[>, 0, ), {, deleteImpl, (, startIndex, ,, endIndex, ,, len, ), ;, }, return, this, ;, }, public, StrBuilder]
[), {, deleteImpl, (, startIndex, ,, endIndex, ,, len, ), ;, }, return, this, ;, }, public, StrBuilder, deleteAll, (]
[;, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =]
[,, endIndex, ,, len, ), ;, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {]
[,, len, ), ;, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (]
[), ;, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i]
[;, }, public, StrBuilder, deleteAll, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <]
[;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, final]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i]
[<, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i]
[), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i, ;, while, (]
[++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, final, int, start, =, i, ;, while]
[), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (, buffer, []
[==, ch, ), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (]
[[, i, ], ==, ch, ), {, final, int, start, =, i, ;, while, (, ++, i, <, size, )]
[], ==, ch, ), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if]
[), {, final, int, start, =, i, ;, while, (, ++, i, <, size, ), {, if, (, buffer, []
[;, while, (, ++, i, <, size, ), {, if, (, buffer, [, i, ], !=, ch, ), {, break]
[), {, if, (, buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =]
[<, size, ), {, if, (, buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int]
[<, size, ), {, if, (, buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int]
[), {, if, (, buffer, [, i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =]
[), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (, start, ,, i, ,]
[!=, ch, ), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (, start, ,]
[[, i, ], !=, ch, ), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl]
[], !=, ch, ), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (, start]
[), {, break, ;, }, }, final, int, len, =, i, -, start, ;, deleteImpl, (, start, ,, i, ,]
[;, deleteImpl, (, start, ,, i, ,, len, ), ;, i, -=, len, ;, }, }, return, this, ;, }]
[-, start, ;, deleteImpl, (, start, ,, i, ,, len, ), ;, i, -=, len, ;, }, }, return, this]
[;, deleteImpl, (, start, ,, i, ,, len, ), ;, i, -=, len, ;, }, }, return, this, ;, }]
[;, i, -=, len, ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {]
[,, i, ,, len, ), ;, i, -=, len, ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (]
[,, len, ), ;, i, -=, len, ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char]
[), ;, i, -=, len, ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char, ch, )]
[-=, len, ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (]
[;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i]
[;, }, public, StrBuilder, deleteFirst, (, final, char, ch, ), {, for, (, int, i, =, 0, ;, i, <]
[;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,, i]
[<, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,, i]
[), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,, i, +, 1, ,]
[++, ), {, if, (, buffer, [, i, ], ==, ch, ), {, deleteImpl, (, i, ,, i, +, 1]
[), {, deleteImpl, (, i, ,, i, +, 1, ,, 1, ), ;, break, ;, }, }, return, this, ;]
[==, ch, ), {, deleteImpl, (, i, ,, i, +, 1, ,, 1, ), ;, break, ;, }, }, return]
[[, i, ], ==, ch, ), {, deleteImpl, (, i, ,, i, +, 1, ,, 1, ), ;, break, ;]
[], ==, ch, ), {, deleteImpl, (, i, ,, i, +, 1, ,, 1, ), ;, break, ;, }, }]
[), {, deleteImpl, (, i, ,, i, +, 1, ,, 1, ), ;, break, ;, }, }, return, this, ;]
[;, break, ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int]
[,, i, +, 1, ,, 1, ), ;, break, ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (]
[,, 1, ), ;, break, ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, )]
[+, 1, ,, 1, ), ;, break, ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String]
[,, 1, ), ;, break, ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, )]
[), ;, break, ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final]
[;, }, public, StrBuilder, deleteAll, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?]
[;, if, (, len, >, 0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (]
[), ;, if, (, len, >, 0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while]
[?, 0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, int, index, =]
[==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, int]
[?, 0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, int, index, =]
[:, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, int, index, =, indexOf, (]
[), ;, if, (, len, >, 0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while]
[., length, (, ), ), ;, if, (, len, >, 0, ), {, int, index, =, indexOf, (, str, ,]
[), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl]
[>, 0, ), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, )]
[), {, int, index, =, indexOf, (, str, ,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl]
[;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, index]
[,, 0, ), ;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len]
[), ;, while, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;]
[), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, index, =, indexOf, (, str, ,, index]
[>=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, index, =, indexOf, (, str]
[), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, index, =, indexOf, (, str, ,, index]
[;, index, =, indexOf, (, str, ,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (]
[,, index, +, len, ,, len, ), ;, index, =, indexOf, (, str, ,, index, ), ;, }, }, return]
[,, len, ), ;, index, =, indexOf, (, str, ,, index, ), ;, }, }, return, this, ;, }, public]
[+, len, ,, len, ), ;, index, =, indexOf, (, str, ,, index, ), ;, }, }, return, this, ;]
[,, len, ), ;, index, =, indexOf, (, str, ,, index, ), ;, }, }, return, this, ;, }, public]
[), ;, index, =, indexOf, (, str, ,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst]
[=, indexOf, (, str, ,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String]
[;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =]
[,, index, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final]
[), ;, }, }, return, this, ;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len]
[;, }, public, StrBuilder, deleteFirst, (, final, String, str, ), {, final, int, len, =, (, str, ==, null, ?]
[;, if, (, len, >, 0, ), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if]
[), ;, if, (, len, >, 0, ), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;]
[?, 0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, final, int, index]
[==, null, ?, 0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, final]
[?, 0, :, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, final, int, index]
[:, str, ., length, (, ), ), ;, if, (, len, >, 0, ), {, final, int, index, =, indexOf]
[), ;, if, (, len, >, 0, ), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;]
[., length, (, ), ), ;, if, (, len, >, 0, ), {, final, int, index, =, indexOf, (, str]
[), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0, ), {]
[>, 0, ), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0]
[), {, final, int, index, =, indexOf, (, str, ,, 0, ), ;, if, (, index, >=, 0, ), {]
[;, if, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, }]
[,, 0, ), ;, if, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len]
[), ;, if, (, index, >=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;]
[), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, }, }, return, this, ;, }, public]
[>=, 0, ), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, }, }, return, this, ;]
[), {, deleteImpl, (, index, ,, index, +, len, ,, len, ), ;, }, }, return, this, ;, }, public]
[;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher]
[,, index, +, len, ,, len, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher]
[,, len, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return]
[+, len, ,, len, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, )]
[,, len, ), ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return]
[), ;, }, }, return, this, ;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (]
[;, }, public, StrBuilder, deleteAll, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0, ,]
[;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0, ,]
[,, null, ,, 0, ,, size, ,, -, 1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, )]
[,, 0, ,, size, ,, -, 1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return]
[,, size, ,, -, 1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (]
[,, -, 1, ), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,]
[), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0]
[), ;, }, public, StrBuilder, deleteFirst, (, final, StrMatcher, matcher, ), {, return, replace, (, matcher, ,, null, ,, 0]
[;, }, private, void, replaceImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, removeLen, ,, final, String]
[,, null, ,, 0, ,, size, ,, 1, ), ;, }, private, void, replaceImpl, (, final, int, startIndex, ,, final]
[,, 0, ,, size, ,, 1, ), ;, }, private, void, replaceImpl, (, final, int, startIndex, ,, final, int, endIndex]
[,, size, ,, 1, ), ;, }, private, void, replaceImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final]
[,, 1, ), ;, }, private, void, replaceImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, removeLen]
[), ;, }, private, void, replaceImpl, (, final, int, startIndex, ,, final, int, endIndex, ,, final, int, removeLen, ,, final]
[;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex]
[+, insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer]
[-, removeLen, +, insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy]
[+, insertLen, ;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer]
[;, if, (, insertLen, !=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex]
[), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen]
[!=, removeLen, ), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex]
[), {, ensureCapacity, (, newSize, ), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen]
[;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;]
[), ;, System, ., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, )]
[;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,, insertLen]
[., arraycopy, (, buffer, ,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =]
[,, endIndex, ,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if]
[,, buffer, ,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen]
[,, startIndex, +, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0]
[,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, .]
[+, insertLen, ,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {]
[,, size, -, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, .]
[), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,]
[-, endIndex, ), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (]
[), ;, size, =, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,]
[=, newSize, ;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,, insertLen, ,, buffer]
[;, }, if, (, insertLen, >, 0, ), {, insertStr, ., getChars, (, 0, ,, insertLen, ,, buffer, ,, startIndex]
[), {, insertStr, ., getChars, (, 0, ,, insertLen, ,, buffer, ,, startIndex, ), ;, }, }, public, StrBuilder, replace]
[>, 0, ), {, insertStr, ., getChars, (, 0, ,, insertLen, ,, buffer, ,, startIndex, ), ;, }, }, public]
[), {, insertStr, ., getChars, (, 0, ,, insertLen, ,, buffer, ,, startIndex, ), ;, }, }, public, StrBuilder, replace]
[;, }, }, public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex, ,, final, String, replaceStr, ), {, endIndex]
[., getChars, (, 0, ,, insertLen, ,, buffer, ,, startIndex, ), ;, }, }, public, StrBuilder, replace, (, final, int]
[,, insertLen, ,, buffer, ,, startIndex, ), ;, }, }, public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex]
[,, buffer, ,, startIndex, ), ;, }, }, public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex, ,, final]
[,, startIndex, ), ;, }, }, public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex, ,, final, String, replaceStr]
[), ;, }, }, public, StrBuilder, replace, (, final, int, startIndex, ,, int, endIndex, ,, final, String, replaceStr, ), {]
[=, validateRange, (, startIndex, ,, endIndex, ), ;, final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr]
[;, final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl]
[,, endIndex, ), ;, final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, )]
[), ;, final, int, insertLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,, insertLen, ), ;, return, this, ;, }]
[), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,, insertLen, ), ;, return, this, ;]
[?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,]
[==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -]
[?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,]
[:, replaceStr, ., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,]
[), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,, insertLen, ), ;, return, this, ;]
[., length, (, ), ), ;, replaceImpl, (, startIndex, ,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,, insertLen, )]
[;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char, replace, ), {, if, (]
[,, endIndex, ,, endIndex, -, startIndex, ,, replaceStr, ,, insertLen, ), ;, return, this, ;, }, public, StrBuilder, replaceAll, (]
[,, endIndex, -, startIndex, ,, replaceStr, ,, insertLen, ), ;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char]
[,, replaceStr, ,, insertLen, ), ;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char]
[-, startIndex, ,, replaceStr, ,, insertLen, ), ;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,]
[,, replaceStr, ,, insertLen, ), ;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char]
[,, insertLen, ), ;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char, replace, )]
[), ;, return, this, ;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char, replace, ), {, if]
[;, }, public, StrBuilder, replaceAll, (, final, char, search, ,, final, char, replace, ), {, if, (, search, !=, replace]
[), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer]
[!=, replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if]
[), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer]
[;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =]
[<, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =]
[), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;, }]
[++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;]
[), {, buffer, [, i, ], =, replace, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (]
[==, search, ), {, buffer, [, i, ], =, replace, ;, }, }, }, return, this, ;, }, public, StrBuilder]
[[, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;, }, }, }, return, this, ;]
[], ==, search, ), {, buffer, [, i, ], =, replace, ;, }, }, }, return, this, ;, }, public]
[), {, buffer, [, i, ], =, replace, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (]
[=, replace, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, char, search, ,, final, char]
[[, i, ], =, replace, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, char, search]
[], =, replace, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, char, search, ,, final]
[;, }, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, char, search, ,, final, char, replace, )]
[;, }, public, StrBuilder, replaceFirst, (, final, char, search, ,, final, char, replace, ), {, if, (, search, !=, replace]
[), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer]
[!=, replace, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if]
[), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, if, (, buffer]
[;, i, <, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =]
[<, size, ;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i]
[;, i, ++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =]
[), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;, break]
[++, ), {, if, (, buffer, [, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;]
[), {, buffer, [, i, ], =, replace, ;, break, ;, }, }, }, return, this, ;, }, public, StrBuilder]
[==, search, ), {, buffer, [, i, ], =, replace, ;, break, ;, }, }, }, return, this, ;, }]
[[, i, ], ==, search, ), {, buffer, [, i, ], =, replace, ;, break, ;, }, }, }, return]
[], ==, search, ), {, buffer, [, i, ], =, replace, ;, break, ;, }, }, }, return, this, ;]
[), {, buffer, [, i, ], =, replace, ;, break, ;, }, }, }, return, this, ;, }, public, StrBuilder]
[=, replace, ;, break, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, String, searchStr, ,]
[[, i, ], =, replace, ;, break, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final]
[], =, replace, ;, break, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, String, searchStr]
[;, break, ;, }, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, String, searchStr, ,, final, String]
[;, }, public, StrBuilder, replaceAll, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr]
[), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen]
[==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final]
[?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen]
[:, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (]
[), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==]
[), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[>, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, )]
[), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (]
[), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl]
[?, 0, :, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;]
[==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0]
[?, 0, :, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;]
[:, replaceStr, ., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (]
[), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl]
[., length, (, ), ), ;, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, while, (, index, >=]
[;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,]
[,, 0, ), ;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen]
[), ;, while, (, index, >=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr]
[), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf]
[>=, 0, ), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index]
[), {, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf]
[;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder]
[,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +]
[,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }]
[+, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, )]
[,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }]
[,, replaceStr, ,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }, }, return]
[,, replaceLen, ), ;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }, }, return, this, ;]
[), ;, index, =, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }, }, return, this, ;, }, public]
[=, indexOf, (, searchStr, ,, index, +, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (]
[;, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {]
[,, index, +, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,]
[), ;, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, )]
[+, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String]
[), ;, }, }, return, this, ;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, )]
[;, }, public, StrBuilder, replaceFirst, (, final, String, searchStr, ,, final, String, replaceStr, ), {, final, int, searchLen, =, (]
[;, if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, if]
[), ;, if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;]
[?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, index]
[==, null, ?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final]
[?, 0, :, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, index]
[:, searchStr, ., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf]
[), ;, if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;]
[., length, (, ), ), ;, if, (, searchLen, >, 0, ), {, final, int, index, =, indexOf, (, searchStr]
[), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=, 0, ), {]
[>, 0, ), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=, 0]
[), {, final, int, index, =, indexOf, (, searchStr, ,, 0, ), ;, if, (, index, >=, 0, ), {]
[;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr]
[,, 0, ), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?]
[), ;, if, (, index, >=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :]
[), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[>=, 0, ), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, )]
[), {, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return, this]
[), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return]
[?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,]
[==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,]
[?, 0, :, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,]
[:, replaceStr, ., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,]
[), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return]
[., length, (, ), ), ;, replaceImpl, (, index, ,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, )]
[;, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {]
[,, index, +, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder]
[,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher]
[+, searchLen, ,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (]
[,, searchLen, ,, replaceStr, ,, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher]
[,, replaceStr, ,, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,]
[,, replaceLen, ), ;, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String]
[), ;, }, }, return, this, ;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, )]
[;, }, public, StrBuilder, replaceAll, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,]
[;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher, ,]
[,, replaceStr, ,, 0, ,, size, ,, -, 1, ), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,]
[,, 0, ,, size, ,, -, 1, ), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String]
[,, size, ,, -, 1, ), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, )]
[,, -, 1, ), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return]
[), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher]
[), ;, }, public, StrBuilder, replaceFirst, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ), {, return, replace, (, matcher]
[;, }, public, StrBuilder, replace, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, startIndex, ,, int, endIndex]
[,, replaceStr, ,, 0, ,, size, ,, 1, ), ;, }, public, StrBuilder, replace, (, final, StrMatcher, matcher, ,, final]
[,, 0, ,, size, ,, 1, ), ;, }, public, StrBuilder, replace, (, final, StrMatcher, matcher, ,, final, String, replaceStr]
[,, size, ,, 1, ), ;, }, public, StrBuilder, replace, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final]
[,, 1, ), ;, }, public, StrBuilder, replace, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, startIndex]
[), ;, }, public, StrBuilder, replace, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, startIndex, ,, int]
[=, validateRange, (, startIndex, ,, endIndex, ), ;, return, replaceImpl, (, matcher, ,, replaceStr, ,, startIndex, ,, endIndex, ,, replaceCount]
[;, return, replaceImpl, (, matcher, ,, replaceStr, ,, startIndex, ,, endIndex, ,, replaceCount, ), ;, }, private, StrBuilder, replaceImpl, (]
[,, endIndex, ), ;, return, replaceImpl, (, matcher, ,, replaceStr, ,, startIndex, ,, endIndex, ,, replaceCount, ), ;, }, private]
[), ;, return, replaceImpl, (, matcher, ,, replaceStr, ,, startIndex, ,, endIndex, ,, replaceCount, ), ;, }, private, StrBuilder, replaceImpl]
[;, }, private, StrBuilder, replaceImpl, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, from, ,, int, to]
[,, replaceStr, ,, startIndex, ,, endIndex, ,, replaceCount, ), ;, }, private, StrBuilder, replaceImpl, (, final, StrMatcher, matcher, ,, final]
[,, startIndex, ,, endIndex, ,, replaceCount, ), ;, }, private, StrBuilder, replaceImpl, (, final, StrMatcher, matcher, ,, final, String, replaceStr]
[,, endIndex, ,, replaceCount, ), ;, }, private, StrBuilder, replaceImpl, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final]
[,, replaceCount, ), ;, }, private, StrBuilder, replaceImpl, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, from]
[), ;, }, private, StrBuilder, replaceImpl, (, final, StrMatcher, matcher, ,, final, String, replaceStr, ,, final, int, from, ,, int]
[), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length]
[||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0]
[==, null, ||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null]
[||, size, ==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0]
[), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length]
[==, 0, ), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr]
[), {, return, this, ;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length]
[;, }, final, int, replaceLen, =, (, replaceStr, ==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to, &&]
[), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to]
[?, 0, :, replaceStr, ., length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (]
[==, null, ?, 0, :, replaceStr, ., length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;]
[?, 0, :, replaceStr, ., length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (]
[:, replaceStr, ., length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i]
[), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from, ;, i, <, to]
[., length, (, ), ), ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, from]
[;, for, (, int, i, =, from, ;, i, <, to, &&, replaceCount, !=, 0, ;, i, ++, ), {]
[;, i, <, to, &&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch]
[;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to]
[&&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i]
[<, to, &&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf]
[&&, replaceCount, !=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i]
[;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to]
[!=, 0, ;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from]
[;, i, ++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to]
[), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to, ), ;, if]
[++, ), {, final, int, removeLen, =, matcher, ., isMatch, (, buf, ,, i, ,, from, ,, to, ), ;]
[;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,]
[., isMatch, (, buf, ,, i, ,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl]
[,, i, ,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i]
[,, from, ,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen]
[,, to, ), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen]
[), ;, if, (, removeLen, >, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr]
[), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to]
[>, 0, ), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to]
[), {, replaceImpl, (, i, ,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to]
[;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount]
[,, i, +, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;]
[,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +]
[+, removeLen, ,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =]
[,, removeLen, ,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +]
[,, replaceStr, ,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -]
[,, replaceLen, ), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;]
[), ;, to, =, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (]
[=, to, -, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0]
[;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }]
[+, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --]
[-, removeLen, +, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {]
[+, replaceLen, ;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --]
[;, i, =, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }]
[=, i, +, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }, }, }]
[;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder]
[-, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }, }, }, return, this, ;, }]
[+, replaceLen, -, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }, }, }, return, this]
[-, 1, ;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }, }, }, return, this, ;, }]
[;, if, (, replaceCount, >, 0, ), {, replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder]
[), {, replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (]
[>, 0, ), {, replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {]
[), {, replaceCount, --, ;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (]
[;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (, size, ==, 0, )]
[--, ;, }, }, }, return, this, ;, }, public, StrBuilder, reverse, (, ), {, if, (, size, ==, 0]
[;, }, public, StrBuilder, reverse, (, ), {, if, (, size, ==, 0, ), {, return, this, ;, }, final]
[), {, return, this, ;, }, final, int, half, =, size, /, 2, ;, final, char, [, ], buf, =]
[==, 0, ), {, return, this, ;, }, final, int, half, =, size, /, 2, ;, final, char, [, ]]
[), {, return, this, ;, }, final, int, half, =, size, /, 2, ;, final, char, [, ], buf, =]
[;, }, final, int, half, =, size, /, 2, ;, final, char, [, ], buf, =, buffer, ;, for, (]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -]
[/, 2, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -]
[;, for, (, int, leftIdx, =, 0, ,, rightIdx, =, size, -, 1, ;, leftIdx, <, half, ;, leftIdx, ++]
[,, rightIdx, =, size, -, 1, ;, leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char]
[;, leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ]]
[-, 1, ;, leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, []
[;, leftIdx, <, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ]]
[;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx]
[<, half, ;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf]
[;, leftIdx, ++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx]
[,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf]
[++, ,, rightIdx, --, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =]
[), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, [, rightIdx, ]]
[--, ), {, final, char, swap, =, buf, [, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, [, rightIdx]
[;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =, swap, ;, }, return]
[[, leftIdx, ], ;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =, swap]
[], ;, buf, [, leftIdx, ], =, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =, swap, ;, }]
[=, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder]
[[, leftIdx, ], =, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =, swap, ;, }, return, this, ;]
[], =, buf, [, rightIdx, ], ;, buf, [, rightIdx, ], =, swap, ;, }, return, this, ;, }, public]
[;, buf, [, rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if]
[[, rightIdx, ], ;, buf, [, rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (]
[], ;, buf, [, rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {]
[=, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (, size, ==, 0, )]
[[, rightIdx, ], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (, size]
[], =, swap, ;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (, size, ==, 0]
[;, }, return, this, ;, }, public, StrBuilder, trim, (, ), {, if, (, size, ==, 0, ), {, return]
[;, }, public, StrBuilder, trim, (, ), {, if, (, size, ==, 0, ), {, return, this, ;, }, int]
[), {, return, this, ;, }, int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, int]
[==, 0, ), {, return, this, ;, }, int, len, =, size, ;, final, char, [, ], buf, =, buffer]
[), {, return, this, ;, }, int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, int]
[;, }, int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;]
[;, final, char, [, ], buf, =, buffer, ;, int, pos, =, 0, ;, while, (, pos, <, len, &&]
[;, int, pos, =, 0, ;, while, (, pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {]
[;, while, (, pos, <, len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while]
[), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ']
[&&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf]
[<, len, &&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len]
[&&, buf, [, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf]
[), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ']
[<=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ]]
[[, pos, ], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len]
[], <=, ' ', ), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1]
[), {, pos, ++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ']
[;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ', ), {, len, --]
[++, ;, }, while, (, pos, <, len, &&, buf, [, len, -, 1, ], <=, ' ', ), {, len]
[), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;]
[&&, buf, [, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size]
[<, len, &&, buf, [, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len]
[&&, buf, [, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size]
[), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;]
[<=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (, len, ,, size]
[[, len, -, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {]
[], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (, len, ,]
[-, 1, ], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (]
[], <=, ' ', ), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (, len, ,]
[), {, len, --, ;, }, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;]
[;, }, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;, }, if, (, pos]
[--, ;, }, if, (, len, <, size, ), {, delete, (, len, ,, size, ), ;, }, if, (]
[), {, delete, (, len, ,, size, ), ;, }, if, (, pos, >, 0, ), {, delete, (, 0]
[<, size, ), {, delete, (, len, ,, size, ), ;, }, if, (, pos, >, 0, ), {, delete]
[), {, delete, (, len, ,, size, ), ;, }, if, (, pos, >, 0, ), {, delete, (, 0]
[;, }, if, (, pos, >, 0, ), {, delete, (, 0, ,, pos, ), ;, }, return, this, ;]
[,, size, ), ;, }, if, (, pos, >, 0, ), {, delete, (, 0, ,, pos, ), ;, }]
[), ;, }, if, (, pos, >, 0, ), {, delete, (, 0, ,, pos, ), ;, }, return, this]
[), {, delete, (, 0, ,, pos, ), ;, }, return, this, ;, }, public, boolean, startsWith, (, final, String]
[>, 0, ), {, delete, (, 0, ,, pos, ), ;, }, return, this, ;, }, public, boolean, startsWith, (]
[), {, delete, (, 0, ,, pos, ), ;, }, return, this, ;, }, public, boolean, startsWith, (, final, String]
[;, }, return, this, ;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (, str, ==, null]
[,, pos, ), ;, }, return, this, ;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (]
[), ;, }, return, this, ;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (, str, ==]
[;, }, public, boolean, startsWith, (, final, String, str, ), {, if, (, str, ==, null, ), {, return, false]
[), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==]
[==, null, ), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (]
[), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==]
[;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return]
[;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >, size, ), {, return]
[., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >]
[), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, for, (, int]
[==, 0, ), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, for]
[), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, for, (, int]
[;, }, if, (, len, >, size, ), {, return, false, ;, }, for, (, int, i, =, 0, ;]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, )]
[>, size, ), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i]
[), {, return, false, ;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, )]
[;, }, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ), {, if, (, buffer]
[;, i, <, len, ;, i, ++, ), {, if, (, buffer, [, i, ], !=, str, ., charAt, (]
[;, i, ++, ), {, if, (, buffer, [, i, ], !=, str, ., charAt, (, i, ), ), {]
[<, len, ;, i, ++, ), {, if, (, buffer, [, i, ], !=, str, ., charAt, (, i, )]
[;, i, ++, ), {, if, (, buffer, [, i, ], !=, str, ., charAt, (, i, ), ), {]
[), {, if, (, buffer, [, i, ], !=, str, ., charAt, (, i, ), ), {, return, false, ;]
[++, ), {, if, (, buffer, [, i, ], !=, str, ., charAt, (, i, ), ), {, return, false]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, endsWith, (, final, String, str, ), {]
[!=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean]
[[, i, ], !=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;]
[], !=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, public]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, endsWith, (, final, String, str, ), {]
[., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, endsWith, (]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, endsWith, (, final, String, str, )]
[;, }, }, return, true, ;, }, public, boolean, endsWith, (, final, String, str, ), {, if, (, str, ==]
[;, }, public, boolean, endsWith, (, final, String, str, ), {, if, (, str, ==, null, ), {, return, false]
[), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==]
[==, null, ), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (]
[), {, return, false, ;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==]
[;, }, final, int, len, =, str, ., length, (, ), ;, if, (, len, ==, 0, ), {, return]
[;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >, size, ), {, return]
[., length, (, ), ;, if, (, len, ==, 0, ), {, return, true, ;, }, if, (, len, >]
[), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, int, pos, =]
[==, 0, ), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, int]
[), {, return, true, ;, }, if, (, len, >, size, ), {, return, false, ;, }, int, pos, =]
[;, }, if, (, len, >, size, ), {, return, false, ;, }, int, pos, =, size, -, len, ;]
[), {, return, false, ;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;]
[>, size, ), {, return, false, ;, }, int, pos, =, size, -, len, ;, for, (, int, i, =]
[), {, return, false, ;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;]
[;, }, int, pos, =, size, -, len, ;, for, (, int, i, =, 0, ;, i, <, len, ;]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if]
[-, len, ;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,, pos, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if]
[;, i, <, len, ;, i, ++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=, str]
[;, i, ++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (, i]
[<, len, ;, i, ++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt]
[;, i, ++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (, i]
[,, pos, ++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (, i, ), ), {]
[++, ,, pos, ++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (, i, ), )]
[), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (, i, ), ), {, return, false, ;]
[++, ), {, if, (, buffer, [, pos, ], !=, str, ., charAt, (, i, ), ), {, return, false]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, CharSequence, subSequence, (, final, int, startIndex]
[!=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override]
[[, pos, ], !=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;]
[], !=, str, ., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, @]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, CharSequence, subSequence, (, final, int, startIndex]
[., charAt, (, i, ), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, CharSequence]
[), ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, CharSequence, subSequence, (, final, int]
[;, }, }, return, true, ;, }, @, Override, public, CharSequence, subSequence, (, final, int, startIndex, ,, final, int, endIndex]
[;, }, @, Override, public, CharSequence, subSequence, (, final, int, startIndex, ,, final, int, endIndex, ), {, if, (, startIndex]
[), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException]
[<, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, throw]
[), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException]
[;, }, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex]
[), ;, }, if, (, endIndex, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException]
[>, size, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw]
[), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, ), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException]
[;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }, return]
[), ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }]
[), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }, return, substring, (, startIndex, ,, endIndex, ), ;]
[>, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }, return, substring, (, startIndex, ,, endIndex]
[), {, throw, new, StringIndexOutOfBoundsException, (, endIndex, -, startIndex, ), ;, }, return, substring, (, startIndex, ,, endIndex, ), ;]
[;, }, return, substring, (, startIndex, ,, endIndex, ), ;, }, public, String, substring, (, final, int, start, ), {]
[), ;, }, return, substring, (, startIndex, ,, endIndex, ), ;, }, public, String, substring, (, final, int, start, )]
[-, startIndex, ), ;, }, return, substring, (, startIndex, ,, endIndex, ), ;, }, public, String, substring, (, final, int]
[), ;, }, return, substring, (, startIndex, ,, endIndex, ), ;, }, public, String, substring, (, final, int, start, )]
[;, }, public, String, substring, (, final, int, start, ), {, return, substring, (, start, ,, size, ), ;, }]
[,, endIndex, ), ;, }, public, String, substring, (, final, int, start, ), {, return, substring, (, start, ,, size]
[), ;, }, public, String, substring, (, final, int, start, ), {, return, substring, (, start, ,, size, ), ;]
[;, }, public, String, substring, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex, ,]
[,, size, ), ;, }, public, String, substring, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange]
[), ;, }, public, String, substring, (, final, int, startIndex, ,, int, endIndex, ), {, endIndex, =, validateRange, (, startIndex]
[=, validateRange, (, startIndex, ,, endIndex, ), ;, return, new, String, (, buffer, ,, startIndex, ,, endIndex, -, startIndex, )]
[;, return, new, String, (, buffer, ,, startIndex, ,, endIndex, -, startIndex, ), ;, }, public, String, leftString, (, final]
[,, endIndex, ), ;, return, new, String, (, buffer, ,, startIndex, ,, endIndex, -, startIndex, ), ;, }, public, String]
[), ;, return, new, String, (, buffer, ,, startIndex, ,, endIndex, -, startIndex, ), ;, }, public, String, leftString, (]
[;, }, public, String, leftString, (, final, int, length, ), {, if, (, length, <=, 0, ), {, return, ""]
[,, startIndex, ,, endIndex, -, startIndex, ), ;, }, public, String, leftString, (, final, int, length, ), {, if, (]
[,, endIndex, -, startIndex, ), ;, }, public, String, leftString, (, final, int, length, ), {, if, (, length, <=]
[), ;, }, public, String, leftString, (, final, int, length, ), {, if, (, length, <=, 0, ), {, return]
[-, startIndex, ), ;, }, public, String, leftString, (, final, int, length, ), {, if, (, length, <=, 0, )]
[), ;, }, public, String, leftString, (, final, int, length, ), {, if, (, length, <=, 0, ), {, return]
[), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,]
[<=, 0, ), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (]
[), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,]
[;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,, 0, ,, size, )]
[), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (]
[>=, size, ), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new]
[), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (]
[;, }, else, {, return, new, String, (, buffer, ,, 0, ,, length, ), ;, }, }, public, String, rightString]
[,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,, 0, ,, length, ), ;]
[,, size, ), ;, }, else, {, return, new, String, (, buffer, ,, 0, ,, length, ), ;, }, }]
[), ;, }, else, {, return, new, String, (, buffer, ,, 0, ,, length, ), ;, }, }, public, String]
[;, }, }, public, String, rightString, (, final, int, length, ), {, if, (, length, <=, 0, ), {, return]
[,, 0, ,, length, ), ;, }, }, public, String, rightString, (, final, int, length, ), {, if, (, length]
[,, length, ), ;, }, }, public, String, rightString, (, final, int, length, ), {, if, (, length, <=, 0]
[), ;, }, }, public, String, rightString, (, final, int, length, ), {, if, (, length, <=, 0, ), {]
[), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,]
[<=, 0, ), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (]
[), {, return, "", ;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,]
[;, }, else, if, (, length, >=, size, ), {, return, new, String, (, buffer, ,, 0, ,, size, )]
[), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (]
[>=, size, ), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new]
[), {, return, new, String, (, buffer, ,, 0, ,, size, ), ;, }, else, {, return, new, String, (]
[;, }, else, {, return, new, String, (, buffer, ,, size, -, length, ,, length, ), ;, }, }, public]
[,, 0, ,, size, ), ;, }, else, {, return, new, String, (, buffer, ,, size, -, length, ,, length]
[,, size, ), ;, }, else, {, return, new, String, (, buffer, ,, size, -, length, ,, length, ), ;]
[), ;, }, else, {, return, new, String, (, buffer, ,, size, -, length, ,, length, ), ;, }, }]
[;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (, index, <, 0]
[,, size, -, length, ,, length, ), ;, }, }, public, String, midString, (, int, index, ,, final, int, length]
[,, length, ), ;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (]
[-, length, ,, length, ), ;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {]
[,, length, ), ;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (]
[), ;, }, }, public, String, midString, (, int, index, ,, final, int, length, ), {, if, (, index, <]
[), {, index, =, 0, ;, }, if, (, length, <=, 0, ||, index, >=, size, ), {, return, ""]
[<, 0, ), {, index, =, 0, ;, }, if, (, length, <=, 0, ||, index, >=, size, ), {]
[), {, index, =, 0, ;, }, if, (, length, <=, 0, ||, index, >=, size, ), {, return, ""]
[=, 0, ;, }, if, (, length, <=, 0, ||, index, >=, size, ), {, return, "", ;, }, if]
[;, }, if, (, length, <=, 0, ||, index, >=, size, ), {, return, "", ;, }, if, (, size]
[), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer]
[||, index, >=, size, ), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return]
[<=, 0, ||, index, >=, size, ), {, return, "", ;, }, if, (, size, <=, index, +, length, )]
[||, index, >=, size, ), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return]
[), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer]
[>=, size, ), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String]
[), {, return, "", ;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer]
[;, }, if, (, size, <=, index, +, length, ), {, return, new, String, (, buffer, ,, index, ,, size]
[), {, return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return, new, String, (]
[<=, index, +, length, ), {, return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }]
[), {, return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return, new, String, (]
[+, length, ), {, return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return, new]
[), {, return, new, String, (, buffer, ,, index, ,, size, -, index, ), ;, }, return, new, String, (]
[;, }, return, new, String, (, buffer, ,, index, ,, length, ), ;, }, public, boolean, contains, (, final, char]
[,, index, ,, size, -, index, ), ;, }, return, new, String, (, buffer, ,, index, ,, length, ), ;]
[,, size, -, index, ), ;, }, return, new, String, (, buffer, ,, index, ,, length, ), ;, }, public]
[), ;, }, return, new, String, (, buffer, ,, index, ,, length, ), ;, }, public, boolean, contains, (, final]
[-, index, ), ;, }, return, new, String, (, buffer, ,, index, ,, length, ), ;, }, public, boolean, contains]
[), ;, }, return, new, String, (, buffer, ,, index, ,, length, ), ;, }, public, boolean, contains, (, final]
[;, }, public, boolean, contains, (, final, char, ch, ), {, final, char, [, ], thisBuf, =, buffer, ;, for]
[,, index, ,, length, ), ;, }, public, boolean, contains, (, final, char, ch, ), {, final, char, [, ]]
[,, length, ), ;, }, public, boolean, contains, (, final, char, ch, ), {, final, char, [, ], thisBuf, =]
[), ;, }, public, boolean, contains, (, final, char, ch, ), {, final, char, [, ], thisBuf, =, buffer, ;]
[;, for, (, int, i, =, 0, ;, i, <, this, ., size, ;, i, ++, ), {, if, (]
[;, i, <, this, ., size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, )]
[;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, true, ;, }, }]
[<, this, ., size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return]
[;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, true, ;, }, }]
[., size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, true, ;]
[), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, true, ;, }, }, return, false, ;]
[++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, true, ;, }, }, return, false]
[), {, return, true, ;, }, }, return, false, ;, }, public, boolean, contains, (, final, String, str, ), {]
[==, ch, ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, contains, (, final, String, str]
[[, i, ], ==, ch, ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, contains, (]
[], ==, ch, ), {, return, true, ;, }, }, return, false, ;, }, public, boolean, contains, (, final, String]
[), {, return, true, ;, }, }, return, false, ;, }, public, boolean, contains, (, final, String, str, ), {]
[;, }, }, return, false, ;, }, public, boolean, contains, (, final, String, str, ), {, return, indexOf, (, str]
[;, }, public, boolean, contains, (, final, String, str, ), {, return, indexOf, (, str, ,, 0, ), >=, 0]
[;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,, 0, ), >=, 0]
[>=, 0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,, 0, )]
[,, 0, ), >=, 0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher]
[), >=, 0, ;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,, 0]
[;, }, public, boolean, contains, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,, 0, ), >=, 0]
[;, }, public, int, indexOf, (, final, char, ch, ), {, return, indexOf, (, ch, ,, 0, ), ;, }]
[>=, 0, ;, }, public, int, indexOf, (, final, char, ch, ), {, return, indexOf, (, ch, ,, 0, )]
[,, 0, ), >=, 0, ;, }, public, int, indexOf, (, final, char, ch, ), {, return, indexOf, (, ch]
[), >=, 0, ;, }, public, int, indexOf, (, final, char, ch, ), {, return, indexOf, (, ch, ,, 0]
[;, }, public, int, indexOf, (, final, char, ch, ), {, return, indexOf, (, ch, ,, 0, ), ;, }]
[;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0]
[,, 0, ), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, indexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <]
[=, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, startIndex, >=, size, ), {, return, -]
[;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer]
[), ;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =]
[?, 0, :, startIndex, ), ;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }, final, char]
[<, 0, ?, 0, :, startIndex, ), ;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }]
[?, 0, :, startIndex, ), ;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }, final, char]
[:, startIndex, ), ;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }, final, char, [, ]]
[), ;, if, (, startIndex, >=, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =]
[), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =]
[>=, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int]
[), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =]
[;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, size]
[;, }, final, char, [, ], thisBuf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, size]
[;, for, (, int, i, =, startIndex, ;, i, <, size, ;, i, ++, ), {, if, (, thisBuf, []
[;, i, <, size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return]
[;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, i, ;, }, }]
[<, size, ;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, i, ;]
[;, i, ++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, i, ;, }, }]
[), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, i, ;, }, }, return, -, 1]
[++, ), {, if, (, thisBuf, [, i, ], ==, ch, ), {, return, i, ;, }, }, return, -]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, indexOf, (, final, String, str, )]
[==, ch, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, indexOf, (, final, String]
[[, i, ], ==, ch, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, indexOf]
[], ==, ch, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, indexOf, (, final]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, indexOf, (, final, String, str, )]
[;, }, }, return, -, 1, ;, }, public, int, indexOf, (, final, String, str, ), {, return, indexOf, (]
[;, }, public, int, indexOf, (, final, String, str, ), {, return, indexOf, (, str, ,, 0, ), ;, }]
[;, }, public, int, indexOf, (, final, String, str, ), {, return, indexOf, (, str, ,, 0, ), ;, }]
[;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0]
[,, 0, ), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, indexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <]
[=, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=, size]
[;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, strLen]
[), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int]
[?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1]
[<, 0, ?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return]
[?, 0, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1]
[:, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }]
[), ;, if, (, str, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int]
[), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, )]
[==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length]
[||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, )]
[), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[>=, size, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if]
[), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, ==, 1, ), {, return]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, ==, 1, ), {, return]
[;, if, (, strLen, ==, 1, ), {, return, indexOf, (, str, ., charAt, (, 0, ), ,, startIndex, )]
[., length, (, ), ;, if, (, strLen, ==, 1, ), {, return, indexOf, (, str, ., charAt, (, 0]
[), {, return, indexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (, strLen, ==]
[==, 1, ), {, return, indexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (]
[), {, return, indexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (, strLen, ==]
[;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (, strLen, >, size, ), {]
[,, startIndex, ), ;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (, strLen, >]
[., charAt, (, 0, ), ,, startIndex, ), ;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;]
[), ,, startIndex, ), ;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (, strLen]
[), ;, }, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, if, (, strLen, >, size, )]
[), {, return, startIndex, ;, }, if, (, strLen, >, size, ), {, return, -, 1, ;, }, final, char]
[==, 0, ), {, return, startIndex, ;, }, if, (, strLen, >, size, ), {, return, -, 1, ;, }]
[), {, return, startIndex, ;, }, if, (, strLen, >, size, ), {, return, -, 1, ;, }, final, char]
[;, }, if, (, strLen, >, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =]
[), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =, size]
[>, size, ), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len]
[), {, return, -, 1, ;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =, size]
[;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =, size, -, strLen, +, 1, ;]
[;, }, final, char, [, ], thisBuf, =, buffer, ;, final, int, len, =, size, -, strLen, +, 1, ;]
[;, final, int, len, =, size, -, strLen, +, 1, ;, outer, :, for, (, int, i, =, startIndex, ;]
[;, outer, :, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, for, (]
[+, 1, ;, outer, :, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {]
[-, strLen, +, 1, ;, outer, :, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++]
[+, 1, ;, outer, :, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {]
[;, outer, :, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, for, (]
[;, i, <, len, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {]
[<, len, ;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++]
[;, i, ++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str]
[++, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, []
[;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, [, i, +, j, ]]
[<, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, [, i, +]
[;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, [, i, +, j, ]]
[), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, [, i, +, j, ], ), {, continue]
[++, ), {, if, (, str, ., charAt, (, j, ), !=, thisBuf, [, i, +, j, ], ), {]
[), {, continue, outer, ;, }, }, return, i, ;, }, return, -, 1, ;, }, public, int, indexOf, (]
[!=, thisBuf, [, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, return, -]
[., charAt, (, j, ), !=, thisBuf, [, i, +, j, ], ), {, continue, outer, ;, }, }, return]
[), !=, thisBuf, [, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, return]
[), {, continue, outer, ;, }, }, return, i, ;, }, return, -, 1, ;, }, public, int, indexOf, (]
[[, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, return, -, 1, ;]
[], ), {, continue, outer, ;, }, }, return, i, ;, }, return, -, 1, ;, }, public, int, indexOf]
[+, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, return, -, 1, ;, }, public]
[], ), {, continue, outer, ;, }, }, return, i, ;, }, return, -, 1, ;, }, public, int, indexOf]
[;, }, return, -, 1, ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher]
[;, }, public, int, indexOf, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,, 0, ), ;, }]
[;, }, public, int, indexOf, (, final, StrMatcher, matcher, ), {, return, indexOf, (, matcher, ,, 0, ), ;, }]
[;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <, 0]
[,, 0, ), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, indexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, <]
[=, (, startIndex, <, 0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=, size]
[;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, len]
[), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int]
[?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -, 1]
[<, 0, ?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return]
[?, 0, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -, 1]
[:, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }]
[), ;, if, (, matcher, ==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int]
[), {, return, -, 1, ;, }, final, int, len, =, size, ;, final, char, [, ], buf, =, buffer]
[||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, len, =, size, ;, final, char, []
[==, null, ||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, len, =, size, ;, final]
[||, startIndex, >=, size, ), {, return, -, 1, ;, }, final, int, len, =, size, ;, final, char, []
[), {, return, -, 1, ;, }, final, int, len, =, size, ;, final, char, [, ], buf, =, buffer]
[>=, size, ), {, return, -, 1, ;, }, final, int, len, =, size, ;, final, char, [, ], buf]
[), {, return, -, 1, ;, }, final, int, len, =, size, ;, final, char, [, ], buf, =, buffer]
[;, }, final, int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i]
[;, }, final, int, len, =, size, ;, final, char, [, ], buf, =, buffer, ;, for, (, int, i]
[;, final, char, [, ], buf, =, buffer, ;, for, (, int, i, =, startIndex, ;, i, <, len, ;]
[;, for, (, int, i, =, startIndex, ;, i, <, len, ;, i, ++, ), {, if, (, matcher, .]
[;, i, <, len, ;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex]
[;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >]
[<, len, ;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,, len]
[;, i, ++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >]
[), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >, 0, ), {]
[++, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >, 0, )]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, )]
[>, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char]
[., isMatch, (, buf, ,, i, ,, startIndex, ,, len, ), >, 0, ), {, return, i, ;, }, }]
[,, i, ,, startIndex, ,, len, ), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;]
[,, startIndex, ,, len, ), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public]
[,, len, ), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf]
[), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, )]
[;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return, lastIndexOf, (]
[;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return, lastIndexOf, (, ch, ,, size, -, 1, )]
[;, }, public, int, lastIndexOf, (, final, char, ch, ), {, return, lastIndexOf, (, ch, ,, size, -, 1, )]
[;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size]
[,, size, -, 1, ), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex]
[), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, lastIndexOf, (, final, char, ch, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[=, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, startIndex, <, 0, ), {]
[;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;]
[), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex]
[?, size, -, 1, :, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }]
[>=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -, 1]
[?, size, -, 1, :, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }]
[:, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i]
[-, 1, :, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (]
[:, startIndex, ), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i]
[), ;, if, (, startIndex, <, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex]
[), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --]
[<, 0, ), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;]
[), {, return, -, 1, ;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --]
[;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, buffer]
[;, }, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, buffer]
[;, i, >=, 0, ;, i, --, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return]
[;, i, --, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return, i, ;, }, }]
[>=, 0, ;, i, --, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return, i, ;]
[;, i, --, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return, i, ;, }, }]
[), {, if, (, buffer, [, i, ], ==, ch, ), {, return, i, ;, }, }, return, -, 1]
[--, ), {, if, (, buffer, [, i, ], ==, ch, ), {, return, i, ;, }, }, return, -]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String, str, )]
[==, ch, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String]
[[, i, ], ==, ch, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf]
[], ==, ch, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String, str, )]
[;, }, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, String, str, ), {, return, lastIndexOf, (]
[;, }, public, int, lastIndexOf, (, final, String, str, ), {, return, lastIndexOf, (, str, ,, size, -, 1, )]
[;, }, public, int, lastIndexOf, (, final, String, str, ), {, return, lastIndexOf, (, str, ,, size, -, 1, )]
[;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size]
[,, size, -, 1, ), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex]
[), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[-, 1, ), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, lastIndexOf, (, final, String, str, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[=, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex]
[;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int, strLen]
[), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int]
[?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return]
[>=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, )]
[?, size, -, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return]
[:, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }]
[-, 1, :, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1]
[:, startIndex, ), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }]
[), ;, if, (, str, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int]
[), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, )]
[==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length]
[||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, )]
[), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[<, 0, ), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if]
[), {, return, -, 1, ;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, &&, strLen, <=]
[;, }, final, int, strLen, =, str, ., length, (, ), ;, if, (, strLen, >, 0, &&, strLen, <=]
[;, if, (, strLen, >, 0, &&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return]
[., length, (, ), ;, if, (, strLen, >, 0, &&, strLen, <=, size, ), {, if, (, strLen, ==]
[), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex]
[&&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (]
[>, 0, &&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, .]
[&&, strLen, <=, size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (]
[), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex]
[<=, size, ), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (, 0, )]
[), {, if, (, strLen, ==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex]
[), {, return, lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (]
[==, 1, ), {, return, lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :]
[), {, return, lastIndexOf, (, str, ., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (]
[;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;, i, >=, 0, ;, i]
[,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;, i, >=]
[., charAt, (, 0, ), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen]
[), ,, startIndex, ), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;, i]
[), ;, }, outer, :, for, (, int, i, =, startIndex, -, strLen, +, 1, ;, i, >=, 0, ;]
[;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;]
[+, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <]
[-, strLen, +, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;]
[+, 1, ;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <]
[;, i, >=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;]
[;, i, --, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {]
[>=, 0, ;, i, --, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++]
[;, i, --, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (, str]
[--, ), {, for, (, int, j, =, 0, ;, j, <, strLen, ;, j, ++, ), {, if, (]
[;, j, <, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, []
[;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, [, i, +, j, ]]
[<, strLen, ;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, [, i, +]
[;, j, ++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, [, i, +, j, ]]
[), {, if, (, str, ., charAt, (, j, ), !=, buffer, [, i, +, j, ], ), {, continue]
[++, ), {, if, (, str, ., charAt, (, j, ), !=, buffer, [, i, +, j, ], ), {]
[), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (, strLen, ==, 0, ), {]
[!=, buffer, [, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else]
[., charAt, (, j, ), !=, buffer, [, i, +, j, ], ), {, continue, outer, ;, }, }, return]
[), !=, buffer, [, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, }]
[), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (, strLen, ==, 0, ), {]
[[, i, +, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (]
[], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (, strLen, ==, 0, )]
[+, j, ], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (, strLen, ==]
[], ), {, continue, outer, ;, }, }, return, i, ;, }, }, else, if, (, strLen, ==, 0, )]
[;, }, }, else, if, (, strLen, ==, 0, ), {, return, startIndex, ;, }, return, -, 1, ;, }]
[), {, return, startIndex, ;, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {]
[==, 0, ), {, return, startIndex, ;, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher]
[), {, return, startIndex, ;, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {]
[;, }, return, -, 1, ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {, return, lastIndexOf, (, matcher]
[;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {, return, lastIndexOf, (, matcher, ,, size, ), ;, }]
[;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ), {, return, lastIndexOf, (, matcher, ,, size, ), ;, }]
[;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=, size]
[,, size, ), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (]
[), ;, }, public, int, lastIndexOf, (, final, StrMatcher, matcher, ,, int, startIndex, ), {, startIndex, =, (, startIndex, >=]
[=, (, startIndex, >=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex]
[;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, char, []
[), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, char]
[?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return]
[>=, size, ?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, )]
[?, size, -, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return]
[:, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }]
[-, 1, :, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return, -, 1]
[:, startIndex, ), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }]
[), ;, if, (, matcher, ==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, char]
[), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =, startIndex]
[||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final]
[==, null, ||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer]
[||, startIndex, <, 0, ), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final]
[), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =, startIndex]
[<, 0, ), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex]
[), {, return, -, 1, ;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =, startIndex]
[;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =, startIndex, +, 1, ;, for, (]
[;, }, final, char, [, ], buf, =, buffer, ;, final, int, endIndex, =, startIndex, +, 1, ;, for, (]
[;, final, int, endIndex, =, startIndex, +, 1, ;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;]
[;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, matcher, .]
[+, 1, ;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (]
[;, for, (, int, i, =, startIndex, ;, i, >=, 0, ;, i, --, ), {, if, (, matcher, .]
[;, i, >=, 0, ;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0]
[;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >]
[>=, 0, ;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,, endIndex]
[;, i, --, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >]
[), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >, 0, ), {]
[--, ), {, if, (, matcher, ., isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >, 0, )]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, StrTokenizer, asTokenizer, (, ), {, return, new]
[>, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, StrTokenizer, asTokenizer, (, ), {]
[., isMatch, (, buf, ,, i, ,, 0, ,, endIndex, ), >, 0, ), {, return, i, ;, }, }]
[,, i, ,, 0, ,, endIndex, ), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;]
[,, 0, ,, endIndex, ), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public]
[,, endIndex, ), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, StrTokenizer, asTokenizer]
[), >, 0, ), {, return, i, ;, }, }, return, -, 1, ;, }, public, StrTokenizer, asTokenizer, (, )]
[), {, return, i, ;, }, }, return, -, 1, ;, }, public, StrTokenizer, asTokenizer, (, ), {, return, new]
[;, }, }, return, -, 1, ;, }, public, StrTokenizer, asTokenizer, (, ), {, return, new, StrBuilderTokenizer, (, ), ;]
[;, }, public, StrTokenizer, asTokenizer, (, ), {, return, new, StrBuilderTokenizer, (, ), ;, }, public, Reader, asReader, (, )]
[;, }, public, StrTokenizer, asTokenizer, (, ), {, return, new, StrBuilderTokenizer, (, ), ;, }, public, Reader, asReader, (, )]
[;, }, public, Reader, asReader, (, ), {, return, new, StrBuilderReader, (, ), ;, }, public, Writer, asWriter, (, )]
[;, }, public, Writer, asWriter, (, ), {, return, new, StrBuilderWriter, (, ), ;, }, public, boolean, equalsIgnoreCase, (, final]
[;, }, public, boolean, equalsIgnoreCase, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true]
[), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return, false, ;]
[==, other, ), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return]
[), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return, false, ;]
[;, }, if, (, this, ., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf]
[), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, []
[!=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;]
[., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, .]
[), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, []
[., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char]
[;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, [, ], =, other, .]
[;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;]
[., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, char]
[., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;]
[;, i, >=, 0, ;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char]
[;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, []
[>=, 0, ;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =]
[;, i, --, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, []
[), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;]
[--, ), {, final, char, c1, =, thisBuf, [, i, ], ;, final, char, c2, =, otherBuf, [, i, ]]
[;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (]
[[, i, ], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&, Character]
[], ;, final, char, c2, =, otherBuf, [, i, ], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase]
[;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, )]
[[, i, ], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase]
[], ;, if, (, c1, !=, c2, &&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {]
[&&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), ), {, return, false, ;, }]
[!=, c2, &&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), ), {, return, false]
[&&, Character, ., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {]
[!=, Character, ., toUpperCase, (, c2, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean]
[., toUpperCase, (, c1, ), !=, Character, ., toUpperCase, (, c2, ), ), {, return, false, ;, }, }, return]
[), !=, Character, ., toUpperCase, (, c2, ), ), {, return, false, ;, }, }, return, true, ;, }, public]
[), {, return, false, ;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {]
[., toUpperCase, (, c2, ), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, equals, (]
[), ), {, return, false, ;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, )]
[;, }, }, return, true, ;, }, public, boolean, equals, (, final, StrBuilder, other, ), {, if, (, this, ==]
[;, }, public, boolean, equals, (, final, StrBuilder, other, ), {, if, (, this, ==, other, ), {, return, true]
[), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return, false, ;]
[==, other, ), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return]
[), {, return, true, ;, }, if, (, this, ., size, !=, other, ., size, ), {, return, false, ;]
[;, }, if, (, this, ., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf]
[), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, []
[!=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;]
[., size, !=, other, ., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, .]
[), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, []
[., size, ), {, return, false, ;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char]
[;, }, final, char, thisBuf, [, ], =, this, ., buffer, ;, final, char, otherBuf, [, ], =, other, .]
[;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -, 1, ;]
[., buffer, ;, final, char, otherBuf, [, ], =, other, ., buffer, ;, for, (, int, i, =, size, -]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[., buffer, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, i, >=, 0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ]]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, []
[;, i, >=, 0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ]]
[;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ], ), {, return, false]
[>=, 0, ;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ], ), {]
[;, i, --, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ], ), {, return, false]
[), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ], ), {, return, false, ;, }, }]
[--, ), {, if, (, thisBuf, [, i, ], !=, otherBuf, [, i, ], ), {, return, false, ;, }]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, boolean, equals, (, final, Object, obj]
[!=, otherBuf, [, i, ], ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, boolean]
[[, i, ], !=, otherBuf, [, i, ], ), {, return, false, ;, }, }, return, true, ;, }, @]
[], !=, otherBuf, [, i, ], ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public]
[), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, boolean, equals, (, final, Object, obj]
[[, i, ], ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, boolean, equals, (]
[], ), {, return, false, ;, }, }, return, true, ;, }, @, Override, public, boolean, equals, (, final, Object]
[;, }, }, return, true, ;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (]
[;, }, @, Override, public, boolean, equals, (, final, Object, obj, ), {, if, (, obj, instanceof, StrBuilder, ), {]
[), {, return, equals, (, (, StrBuilder, ), obj, ), ;, }, return, false, ;, }, @, Override, public, int]
[instanceof, StrBuilder, ), {, return, equals, (, (, StrBuilder, ), obj, ), ;, }, return, false, ;, }, @, Override]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, final, char, buf, [, ], =]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, final, char, buf, [, ]]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, final, char, buf, [, ]]
[;, }, @, Override, public, int, hashCode, (, ), {, final, char, buf, [, ], =, buffer, ;, int, hash]
[;, int, hash, =, 0, ;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i]
[;, for, (, int, i, =, size, -, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =]
[;, i, >=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +, buf, [, i, ], ;]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +, buf, [, i]
[;, i, >=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +, buf, [, i, ], ;]
[;, i, --, ), {, hash, =, 31, *, hash, +, buf, [, i, ], ;, }, return, hash, ;]
[>=, 0, ;, i, --, ), {, hash, =, 31, *, hash, +, buf, [, i, ], ;, }, return]
[;, i, --, ), {, hash, =, 31, *, hash, +, buf, [, i, ], ;, }, return, hash, ;]
[), {, hash, =, 31, *, hash, +, buf, [, i, ], ;, }, return, hash, ;, }, @, Override]
[--, ), {, hash, =, 31, *, hash, +, buf, [, i, ], ;, }, return, hash, ;, }, @]
[=, 31, *, hash, +, buf, [, i, ], ;, }, return, hash, ;, }, @, Override, public, String, toString]
[;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return, new, String, (, buffer, ,]
[+, buf, [, i, ], ;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return]
[*, hash, +, buf, [, i, ], ;, }, return, hash, ;, }, @, Override, public, String, toString, (, )]
[+, buf, [, i, ], ;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return]
[;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return, new, String, (, buffer, ,]
[[, i, ], ;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return, new, String]
[], ;, }, return, hash, ;, }, @, Override, public, String, toString, (, ), {, return, new, String, (, buffer]
[;, }, @, Override, public, String, toString, (, ), {, return, new, String, (, buffer, ,, 0, ,, size, )]
[;, }, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (, size, ), ., append, (, buffer, ,, 0]
[,, 0, ,, size, ), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (, size, ), .]
[,, size, ), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (, size, ), ., append, (]
[), ;, }, public, StringBuffer, toStringBuffer, (, ), {, return, new, StringBuffer, (, size, ), ., append, (, buffer, ,]
[;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (, size, ), ., append, (, buffer, ,, 0]
[., append, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder]
[), ., append, (, buffer, ,, 0, ,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new]
[,, 0, ,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (, size, ), .]
[,, size, ), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (, size, ), ., append, (]
[), ;, }, public, StringBuilder, toStringBuilder, (, ), {, return, new, StringBuilder, (, size, ), ., append, (, buffer, ,]
[;, }, @, Override, public, String, build, (, ), {, return, toString, (, ), ;, }, protected, int, validateRange, (]
[., append, (, buffer, ,, 0, ,, size, ), ;, }, @, Override, public, String, build, (, ), {, return]
[), ., append, (, buffer, ,, 0, ,, size, ), ;, }, @, Override, public, String, build, (, ), {]
[,, 0, ,, size, ), ;, }, @, Override, public, String, build, (, ), {, return, toString, (, ), ;]
[,, size, ), ;, }, @, Override, public, String, build, (, ), {, return, toString, (, ), ;, }, protected]
[), ;, }, @, Override, public, String, build, (, ), {, return, toString, (, ), ;, }, protected, int, validateRange]
[;, }, protected, int, validateRange, (, final, int, startIndex, ,, int, endIndex, ), {, if, (, startIndex, <, 0, )]
[), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, endIndex, =, size]
[<, 0, ), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, endIndex]
[), {, throw, new, StringIndexOutOfBoundsException, (, startIndex, ), ;, }, if, (, endIndex, >, size, ), {, endIndex, =, size]
[;, }, if, (, endIndex, >, size, ), {, endIndex, =, size, ;, }, if, (, startIndex, >, endIndex, )]
[), ;, }, if, (, endIndex, >, size, ), {, endIndex, =, size, ;, }, if, (, startIndex, >, endIndex]
[), {, endIndex, =, size, ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", )]
[>, size, ), {, endIndex, =, size, ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (]
[), {, endIndex, =, size, ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", )]
[=, size, ;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, return]
[;, }, if, (, startIndex, >, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, return, endIndex, ;]
[), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int]
[>, endIndex, ), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, "end < start", ), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int]
[;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (, index, <, 0]
[), ;, }, return, endIndex, ;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (, index, <]
[;, }, protected, void, validateIndex, (, final, int, index, ), {, if, (, index, <, 0, ||, index, >, size]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {, StrBuilderTokenizer, (, ), {]
[||, index, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {]
[<, 0, ||, index, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, }, class, StrBuilderTokenizer, extends]
[||, index, >, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {, StrBuilderTokenizer, (, ), {]
[>, size, ), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {, StrBuilderTokenizer, (]
[), {, throw, new, StringIndexOutOfBoundsException, (, index, ), ;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {, StrBuilderTokenizer, (, ), {]
[;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {, StrBuilderTokenizer, (, ), {, super, (, ), ;, }, @, Override, protected]
[), ;, }, }, class, StrBuilderTokenizer, extends, StrTokenizer, {, StrBuilderTokenizer, (, ), {, super, (, ), ;, }, @, Override]
[), {, return, super, ., tokenize, (, StrBuilder, ., this, ., buffer, ,, 0, ,, StrBuilder, ., this, ., size]
[==, null, ), {, return, super, ., tokenize, (, StrBuilder, ., this, ., buffer, ,, 0, ,, StrBuilder, ., this]
[), {, return, super, ., tokenize, (, StrBuilder, ., this, ., buffer, ,, 0, ,, StrBuilder, ., this, ., size]
[;, }, return, super, ., tokenize, (, chars, ,, offset, ,, count, ), ;, }, @, Override, public, String, getContent]
[., tokenize, (, StrBuilder, ., this, ., buffer, ,, 0, ,, StrBuilder, ., this, ., size, (, ), ), ;]
[,, 0, ,, StrBuilder, ., this, ., size, (, ), ), ;, }, return, super, ., tokenize, (, chars, ,]
[., buffer, ,, 0, ,, StrBuilder, ., this, ., size, (, ), ), ;, }, return, super, ., tokenize, (]
[,, StrBuilder, ., this, ., size, (, ), ), ;, }, return, super, ., tokenize, (, chars, ,, offset, ,]
[), ;, }, return, super, ., tokenize, (, chars, ,, offset, ,, count, ), ;, }, @, Override, public, String]
[., size, (, ), ), ;, }, return, super, ., tokenize, (, chars, ,, offset, ,, count, ), ;, }]
[;, }, @, Override, public, String, getContent, (, ), {, final, String, str, =, super, ., getContent, (, ), ;]
[., tokenize, (, chars, ,, offset, ,, count, ), ;, }, @, Override, public, String, getContent, (, ), {, final]
[,, offset, ,, count, ), ;, }, @, Override, public, String, getContent, (, ), {, final, String, str, =, super]
[,, count, ), ;, }, @, Override, public, String, getContent, (, ), {, final, String, str, =, super, ., getContent]
[), ;, }, @, Override, public, String, getContent, (, ), {, final, String, str, =, super, ., getContent, (, )]
[;, if, (, str, ==, null, ), {, return, StrBuilder, ., this, ., toString, (, ), ;, }, return, str]
[., getContent, (, ), ;, if, (, str, ==, null, ), {, return, StrBuilder, ., this, ., toString, (, )]
[), {, return, StrBuilder, ., this, ., toString, (, ), ;, }, return, str, ;, }, }, class, StrBuilderReader, extends]
[==, null, ), {, return, StrBuilder, ., this, ., toString, (, ), ;, }, return, str, ;, }, }, class]
[), {, return, StrBuilder, ., this, ., toString, (, ), ;, }, return, str, ;, }, }, class, StrBuilderReader, extends]
[;, }, return, str, ;, }, }, class, StrBuilderReader, extends, Reader, {, private, int, pos, ;, private, int, mark, ;]
[., toString, (, ), ;, }, return, str, ;, }, }, class, StrBuilderReader, extends, Reader, {, private, int, pos, ;]
[;, }, }, class, StrBuilderReader, extends, Reader, {, private, int, pos, ;, private, int, mark, ;, StrBuilderReader, (, ), {]
[), {, return, -, 1, ;, }, return, StrBuilder, ., this, ., charAt, (, pos, ++, ), ;, }, @]
[==, false, ), {, return, -, 1, ;, }, return, StrBuilder, ., this, ., charAt, (, pos, ++, ), ;]
[), {, return, -, 1, ;, }, return, StrBuilder, ., this, ., charAt, (, pos, ++, ), ;, }, @]
[;, }, return, StrBuilder, ., this, ., charAt, (, pos, ++, ), ;, }, @, Override, public, int, read, (]
[;, }, return, StrBuilder, ., this, ., charAt, (, pos, ++, ), ;, }, @, Override, public, int, read, (]
[;, }, @, Override, public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int, len]
[., charAt, (, pos, ++, ), ;, }, @, Override, public, int, read, (, final, char, b, [, ], ,]
[), ;, }, @, Override, public, int, read, (, final, char, b, [, ], ,, final, int, off, ,, int]
[++, ), ;, }, @, Override, public, int, read, (, final, char, b, [, ], ,, final, int, off, ,]
[), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0, ;, }]
[||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len]
[||, (, off, +, len, ), >, b, ., length, ||, (, off, +, len, ), <, 0, ), {]
[||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (, off, +]
[||, len, <, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length]
[<, 0, ||, len, <, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b]
[||, len, <, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length]
[||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (, off, +]
[<, 0, ||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (]
[||, off, >, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (, off, +]
[||, (, off, +, len, ), >, b, ., length, ||, (, off, +, len, ), <, 0, ), {]
[>, b, ., length, ||, (, off, +, len, ), >, b, ., length, ||, (, off, +, len, )]
[||, (, off, +, len, ), >, b, ., length, ||, (, off, +, len, ), <, 0, ), {]
[., length, ||, (, off, +, len, ), >, b, ., length, ||, (, off, +, len, ), <, 0]
[||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len]
[>, b, ., length, ||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;]
[), >, b, ., length, ||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, )]
[+, len, ), >, b, ., length, ||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException]
[), >, b, ., length, ||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, )]
[||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len]
[., length, ||, (, off, +, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if]
[), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0, ;, }]
[<, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0]
[), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return]
[+, len, ), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, )]
[), <, 0, ), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return]
[), {, throw, new, IndexOutOfBoundsException, (, ), ;, }, if, (, len, ==, 0, ), {, return, 0, ;, }]
[;, }, if, (, len, ==, 0, ), {, return, 0, ;, }, if, (, pos, >=, StrBuilder, ., this]
[), {, return, 0, ;, }, if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return]
[==, 0, ), {, return, 0, ;, }, if, (, pos, >=, StrBuilder, ., this, ., size, (, ), )]
[), {, return, 0, ;, }, if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return]
[;, }, if, (, pos, >=, StrBuilder, ., this, ., size, (, ), ), {, return, -, 1, ;, }]
[), {, return, -, 1, ;, }, if, (, pos, +, len, >, size, (, ), ), {, len, =]
[>=, StrBuilder, ., this, ., size, (, ), ), {, return, -, 1, ;, }, if, (, pos, +, len]
[), {, return, -, 1, ;, }, if, (, pos, +, len, >, size, (, ), ), {, len, =]
[., size, (, ), ), {, return, -, 1, ;, }, if, (, pos, +, len, >, size, (, )]
[;, }, if, (, pos, +, len, >, size, (, ), ), {, len, =, StrBuilder, ., this, ., size]
[;, }, if, (, pos, +, len, >, size, (, ), ), {, len, =, StrBuilder, ., this, ., size]
[), {, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars]
[>, size, (, ), ), {, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder]
[+, len, >, size, (, ), ), {, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;]
[>, size, (, ), ), {, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder]
[), {, len, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars]
[=, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,]
[;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,, b, ,, off, ), ;, pos]
[-, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,, b, ,, off, )]
[., size, (, ), -, pos, ;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,]
[;, }, StrBuilder, ., this, ., getChars, (, pos, ,, pos, +, len, ,, b, ,, off, ), ;, pos]
[;, pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if]
[., getChars, (, pos, ,, pos, +, len, ,, b, ,, off, ), ;, pos, +=, len, ;, return, len]
[,, pos, +, len, ,, b, ,, off, ), ;, pos, +=, len, ;, return, len, ;, }, @, Override]
[,, b, ,, off, ), ;, pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (]
[+, len, ,, b, ,, off, ), ;, pos, +=, len, ;, return, len, ;, }, @, Override, public, long]
[,, b, ,, off, ), ;, pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (]
[,, off, ), ;, pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n]
[), ;, pos, +=, len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {]
[+=, len, ;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (, pos]
[;, return, len, ;, }, @, Override, public, long, skip, (, long, n, ), {, if, (, pos, +, n]
[;, }, @, Override, public, long, skip, (, long, n, ), {, if, (, pos, +, n, >, StrBuilder, .]
[), {, n, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if, (, n, <, 0]
[>, StrBuilder, ., this, ., size, (, ), ), {, n, =, StrBuilder, ., this, ., size, (, ), -]
[+, n, >, StrBuilder, ., this, ., size, (, ), ), {, n, =, StrBuilder, ., this, ., size, (]
[>, StrBuilder, ., this, ., size, (, ), ), {, n, =, StrBuilder, ., this, ., size, (, ), -]
[), {, n, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if, (, n, <, 0]
[., size, (, ), ), {, n, =, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if]
[=, StrBuilder, ., this, ., size, (, ), -, pos, ;, }, if, (, n, <, 0, ), {, return]
[;, }, if, (, n, <, 0, ), {, return, 0, ;, }, pos, +=, n, ;, return, n, ;]
[-, pos, ;, }, if, (, n, <, 0, ), {, return, 0, ;, }, pos, +=, n, ;, return]
[., size, (, ), -, pos, ;, }, if, (, n, <, 0, ), {, return, 0, ;, }, pos]
[;, }, if, (, n, <, 0, ), {, return, 0, ;, }, pos, +=, n, ;, return, n, ;]
[), {, return, 0, ;, }, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (]
[<, 0, ), {, return, 0, ;, }, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean]
[), {, return, 0, ;, }, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (]
[;, }, pos, +=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (, ), {, return, pos]
[+=, n, ;, return, n, ;, }, @, Override, public, boolean, ready, (, ), {, return, pos, <, StrBuilder, .]
[;, return, n, ;, }, @, Override, public, boolean, ready, (, ), {, return, pos, <, StrBuilder, ., this, .]
[;, }, @, Override, public, boolean, ready, (, ), {, return, pos, <, StrBuilder, ., this, ., size, (, )]
[;, }, @, Override, public, boolean, markSupported, (, ), {, return, true, ;, }, @, Override, public, void, mark, (]
[<, StrBuilder, ., this, ., size, (, ), ;, }, @, Override, public, boolean, markSupported, (, ), {, return, true]
[;, }, @, Override, public, boolean, markSupported, (, ), {, return, true, ;, }, @, Override, public, void, mark, (]
[., size, (, ), ;, }, @, Override, public, boolean, markSupported, (, ), {, return, true, ;, }, @, Override]
[;, }, @, Override, public, void, mark, (, final, int, readAheadLimit, ), {, mark, =, pos, ;, }, @, Override]
[=, pos, ;, }, @, Override, public, void, reset, (, ), {, pos, =, mark, ;, }, }, class, StrBuilderWriter]
[;, }, @, Override, public, void, reset, (, ), {, pos, =, mark, ;, }, }, class, StrBuilderWriter, extends, Writer]
[=, mark, ;, }, }, class, StrBuilderWriter, extends, Writer, {, StrBuilderWriter, (, ), {, super, (, ), ;, }, @]
[;, }, }, class, StrBuilderWriter, extends, Writer, {, StrBuilderWriter, (, ), {, super, (, ), ;, }, @, Override, public]
[;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ), {, StrBuilder, ., this, ., append]
[., append, (, (, char, ), c, ), ;, }, @, Override, public, void, write, (, final, char, [, ]]
[), ;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ), {, StrBuilder, ., this, .]
[), ;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ), {, StrBuilder, ., this, .]
[;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ,, final, int, off, ,, final, int]
[., append, (, cbuf, ), ;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ,, final]
[), ;, }, @, Override, public, void, write, (, final, char, [, ], cbuf, ,, final, int, off, ,, final]
[;, }, @, Override, public, void, write, (, final, String, str, ), {, StrBuilder, ., this, ., append, (, str]
[., append, (, cbuf, ,, off, ,, len, ), ;, }, @, Override, public, void, write, (, final, String, str]
[,, off, ,, len, ), ;, }, @, Override, public, void, write, (, final, String, str, ), {, StrBuilder, .]
[,, len, ), ;, }, @, Override, public, void, write, (, final, String, str, ), {, StrBuilder, ., this, .]
[), ;, }, @, Override, public, void, write, (, final, String, str, ), {, StrBuilder, ., this, ., append, (]
[;, }, @, Override, public, void, write, (, final, String, str, ,, final, int, off, ,, final, int, len, )]
[., append, (, str, ), ;, }, @, Override, public, void, write, (, final, String, str, ,, final, int, off]
[), ;, }, @, Override, public, void, write, (, final, String, str, ,, final, int, off, ,, final, int, len]
[;, }, }, }]
[., append, (, str, ,, off, ,, len, ), ;, }, }, }]
[,, off, ,, len, ), ;, }, }, }]
[,, len, ), ;, }, }, }]
[), ;, }, }, }]
