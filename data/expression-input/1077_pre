[<, String, >, stripNamePrefixes, ;, private, final, Set, <, Scope, ., Var, >, varsToRemove, ;, static, final, DiagnosticType, STRIP_TYPE_INHERIT_ERROR, =]
[<, String, >, stripNamePrefixes, ;, private, final, Set, <, Scope, ., Var, >, varsToRemove, ;, static, final, DiagnosticType, STRIP_TYPE_INHERIT_ERROR, =]
[;, private, final, Set, <, Scope, ., Var, >, varsToRemove, ;, static, final, DiagnosticType, STRIP_TYPE_INHERIT_ERROR, =, DiagnosticType, ., error, (]
[final, Set, <, Scope, ., Var, >, varsToRemove, ;, static, final, DiagnosticType, STRIP_TYPE_INHERIT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_TYPE_INHERIT_ERROR", ,]
[;, static, final, DiagnosticType, STRIP_TYPE_INHERIT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_TYPE_INHERIT_ERROR", ,, "Non-strip type {0} cannot inherit from strip type {1}", ), ;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =]
[;, static, final, DiagnosticType, STRIP_TYPE_INHERIT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_TYPE_INHERIT_ERROR", ,, "Non-strip type {0} cannot inherit from strip type {1}", ), ;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =]
[STRIP_TYPE_INHERIT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_TYPE_INHERIT_ERROR", ,, "Non-strip type {0} cannot inherit from strip type {1}", ), ;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =, DiagnosticType, ., error, (]
[DiagnosticType, ., error, (, "JSC_STRIP_TYPE_INHERIT_ERROR", ,, "Non-strip type {0} cannot inherit from strip type {1}", ), ;, static, final, DiagnosticType, STRIP_ASSIGNMENT_ERROR, =, DiagnosticType, ., error, (, "JSC_STRIP_ASSIGNMENT_ERROR", ,]
[,, Set, <, String, >, stripNameSuffixes, ,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {]
[,, Set, <, String, >, stripNameSuffixes, ,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {]
[>, stripNameSuffixes, ,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, this, ., compiler, =]
[,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, this, ., compiler, =, compiler, ;]
[,, Set, <, String, >, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, this, ., compiler, =, compiler, ;]
[>, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, this, ., compiler, =, compiler, ;, this, ., stripTypes, =]
[>, stripTypePrefixes, ,, Set, <, String, >, stripNamePrefixes, ), {, this, ., compiler, =, compiler, ;, this, ., stripTypes, =]
[<, String, >, stripNamePrefixes, ), {, this, ., compiler, =, compiler, ;, this, ., stripTypes, =, Sets, ., newHashSet, (]
[stripNamePrefixes, ), {, this, ., compiler, =, compiler, ;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;]
[stripNamePrefixes, ), {, this, ., compiler, =, compiler, ;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;]
[., compiler, =, compiler, ;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =]
[., compiler, =, compiler, ;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =]
[;, this, ., stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (]
[stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;]
[stripTypes, =, Sets, ., newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;]
[newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =]
[newHashSet, (, stripTypes, ), ;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =]
[;, this, ., stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (]
[stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;]
[stripNameSuffixes, =, Sets, ., newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;]
[newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =]
[newHashSet, (, stripNameSuffixes, ), ;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =]
[;, this, ., stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (]
[stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;]
[stripTypePrefixes, =, Sets, ., newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;]
[newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove, =]
[newHashSet, (, stripTypePrefixes, ), ;, this, ., stripNamePrefixes, =, Sets, ., newHashSet, (, stripNamePrefixes, ), ;, this, ., varsToRemove, =]
[stripNamePrefixes, ), ;, this, ., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {]
[stripNamePrefixes, ), ;, this, ., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {]
[., varsToRemove, =, Sets, ., newHashSet, (, ), ;, }, public, void, enableTweakStripping, (, ), {, stripTypes, ., add, (]
[., add, (, "goog.tweak", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., add, (, "goog.tweak", ), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :]
[Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (]
[), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,]
[switch, (, n, ., getType, (, ), ), {, case, Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,]
[), ), {, case, Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[), ), {, case, Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[Token, ., VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., NAME, :]
[VAR, :, removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (]
[removeVarDeclarationsByNameOrRvalue, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,]
[t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,]
[;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[;, break, ;, case, Token, ., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case]
[., NAME, :, maybeRemoveReferenceToRemovedVariable, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case]
[t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[), ;, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., CALL, :, case]
[., ASSIGN_MOD, :, maybeEliminateAssignmentByLvalueName, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., CALL, :, case]
[(, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :]
[,, n, ,, parent, ), ;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (]
[,, parent, ), ;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,]
[), ;, break, ;, case, Token, ., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,]
[., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[., CALL, :, case, Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case]
[Token, ., NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :]
[NEW, :, maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (]
[maybeRemoveCall, (, t, ,, n, ,, parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,]
[parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case]
[parent, ), ;, break, ;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case]
[;, case, Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token, ., EXPR_RESULT, :]
[Token, ., OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (]
[OBJECTLIT, :, eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t, ,]
[eliminateKeysWithStripNamesFromObjLit, (, t, ,, n, ), ;, break, ;, case, Token, ., EXPR_RESULT, :, maybeEliminateExpressionByName, (, t, ,, n, ,]
[}, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, Node, nameNode, =]
[}, }, void, removeVarDeclarationsByNameOrRvalue, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, for, (, Node, nameNode, =]
[t, ,, Node, n, ,, Node, parent, ), {, for, (, Node, nameNode, =, n, ., getFirstChild, (, ), ;]
[t, ,, Node, n, ,, Node, parent, ), {, for, (, Node, nameNode, =, n, ., getFirstChild, (, ), ;]
[Node, n, ,, Node, parent, ), {, for, (, Node, nameNode, =, n, ., getFirstChild, (, ), ;, nameNode, !=]
[,, Node, parent, ), {, for, (, Node, nameNode, =, n, ., getFirstChild, (, ), ;, nameNode, !=, null, ;]
[parent, ), {, for, (, Node, nameNode, =, n, ., getFirstChild, (, ), ;, nameNode, !=, null, ;, nameNode, =]
[parent, ), {, for, (, Node, nameNode, =, n, ., getFirstChild, (, ), ;, nameNode, !=, null, ;, nameNode, =]
[getFirstChild, (, ), ;, nameNode, !=, null, ;, nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =]
[getFirstChild, (, ), ;, nameNode, !=, null, ;, nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =]
[nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if, (]
[nameNode, =, nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if, (]
[nameNode, ., getNext, (, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if, (, isStripName, (]
[(, ), ), {, String, name, =, nameNode, ., getString, (, ), ;, if, (, isStripName, (, name, ), ||]
[), {, String, name, =, nameNode, ., getString, (, ), ;, if, (, isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (]
[), {, String, name, =, nameNode, ., getString, (, ), ;, if, (, isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (]
[if, (, isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), ), ), {, Scope, scope, =]
[if, (, isStripName, (, name, ), ||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), ), ), {, Scope, scope, =]
[||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), ), ), {, Scope, scope, =, t, ., getScope, (, ), ;]
[||, isCallWhoseReturnValueShouldBeStripped, (, nameNode, ., getFirstChild, (, ), ), ), {, Scope, scope, =, t, ., getScope, (, ), ;]
[., getFirstChild, (, ), ), ), {, Scope, scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (]
[., getFirstChild, (, ), ), ), {, Scope, scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (]
[), ), {, Scope, scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (]
[scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (, name, ), ), ;]
[scope, =, t, ., getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (, name, ), ), ;]
[getScope, (, ), ;, varsToRemove, ., add, (, scope, ., getVar, (, name, ), ), ;, n, ., removeChild, (]
[;, varsToRemove, ., add, (, scope, ., getVar, (, name, ), ), ;, n, ., removeChild, (, nameNode, ), ;]
[;, varsToRemove, ., add, (, scope, ., getVar, (, name, ), ), ;, n, ., removeChild, (, nameNode, ), ;]
[), ), ;, n, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (]
[), ;, n, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !]
[), ;, n, ., removeChild, (, nameNode, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !, n, ., hasChildren, (, ), ), {]
[compiler, ., reportCodeChange, (, ), ;, }, }, if, (, !, n, ., hasChildren, (, ), ), {, replaceWithEmpty, (]
[reportCodeChange, (, ), ;, }, }, if, (, !, n, ., hasChildren, (, ), ), {, replaceWithEmpty, (, n, ,]
[;, }, }, if, (, !, n, ., hasChildren, (, ), ), {, replaceWithEmpty, (, n, ,, parent, ), ;]
[;, }, }, if, (, !, n, ., hasChildren, (, ), ), {, replaceWithEmpty, (, n, ,, parent, ), ;]
[(, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[(, ), ;, }, }, void, maybeRemoveReferenceToRemovedVariable, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, break, ;, case]
[parent, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, break, ;, case]
[parent, ., getType, (, ), ), {, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case]
[parent, ., getType, (, ), ), {, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case]
[{, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (]
[{, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (]
[{, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (]
[{, case, Token, ., VAR, :, break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (]
[break, ;, case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==]
[case, Token, ., GETPROP, :, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==, n, &&]
[., GETPROP, :, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (]
[:, case, Token, ., GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,]
[GETELEM, :, if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), ), {]
[if, (, parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull, (]
[parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,]
[parent, ., getFirstChild, (, ), ==, n, &&, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,]
[,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case]
[,, n, ), ), {, replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case]
[replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, case]
[replaceHighestNestedCallWithNull, (, parent, ,, parent, ., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, case]
[., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[., getParent, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case]
[;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[;, }, break, ;, case, Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN, :, case, Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITOR, :, case, Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITXOR, :, case, Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_BITAND, :, case, Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_LSH, :, case, Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_RSH, :, case, Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_URSH, :, case, Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[Token, ., ASSIGN_ADD, :, case, Token, ., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case]
[., ASSIGN_SUB, :, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (]
[:, case, Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (]
[Token, ., ASSIGN_MUL, :, case, Token, ., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (]
[., ASSIGN_DIV, :, case, Token, ., ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (]
[ASSIGN_MOD, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, if, (, parent, ., getFirstChild, (, ), ==]
[t, ,, n, ), ), {, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, Node, gramps, =]
[t, ,, n, ), ), {, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, Node, gramps, =]
[parent, ., getFirstChild, (, ), ==, n, ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[parent, ., getFirstChild, (, ), ==, n, ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, Node, greatGramps, =]
[gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ., isExprResult, (, ), ), {, Node, greatGramps, =]
[), ;, if, (, gramps, ., isExprResult, (, ), ), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;]
[if, (, gramps, ., isExprResult, (, ), ), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;, replaceWithEmpty, (]
[gramps, ., isExprResult, (, ), ), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;, replaceWithEmpty, (, gramps, ,]
[(, ), ), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;, replaceWithEmpty, (, gramps, ,, greatGramps, ), ;]
[(, ), ), {, Node, greatGramps, =, gramps, ., getParent, (, ), ;, replaceWithEmpty, (, gramps, ,, greatGramps, ), ;]
[;, replaceWithEmpty, (, gramps, ,, greatGramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =]
[;, replaceWithEmpty, (, gramps, ,, greatGramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;]
[reportCodeChange, (, ), ;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;, parent, ., removeChild, (]
[;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;]
[;, }, else, {, Node, rvalue, =, n, ., getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;]
[Node, rvalue, =, n, ., getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;, gramps, ., replaceChild, (]
[=, n, ., getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;, gramps, ., replaceChild, (, parent, ,]
[getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;, gramps, ., replaceChild, (, parent, ,, rvalue, ), ;]
[getNext, (, ), ;, parent, ., removeChild, (, rvalue, ), ;, gramps, ., replaceChild, (, parent, ,, rvalue, ), ;]
[;, gramps, ., replaceChild, (, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {]
[., replaceChild, (, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (]
[(, parent, ,, rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (, n, ,]
[rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (, n, ,, parent, ), ;]
[rvalue, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, else, {, replaceWithNull, (, n, ,, parent, ), ;]
[(, n, ,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (]
[,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (]
[), ;, compiler, ., reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,]
[reportCodeChange, (, ), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {]
[), ;, }, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceWithNull, (]
[}, }, break, ;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceWithNull, (, n, ,]
[;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceWithNull, (, n, ,, parent, ), ;]
[;, default, :, if, (, isReferenceToRemovedVar, (, t, ,, n, ), ), {, replaceWithNull, (, n, ,, parent, ), ;]
[), ;, }, break, ;, }, }, void, replaceHighestNestedCallWithNull, (, Node, node, ,, Node, parent, ), {, Node, ancestor, =]
[}, }, void, replaceHighestNestedCallWithNull, (, Node, node, ,, Node, parent, ), {, Node, ancestor, =, parent, ;, Node, ancestorChild, =]
[(, Node, node, ,, Node, parent, ), {, Node, ancestor, =, parent, ;, Node, ancestorChild, =, node, ;, while, (]
[parent, ), {, Node, ancestor, =, parent, ;, Node, ancestorChild, =, node, ;, while, (, true, ), {, if, (]
[parent, ), {, Node, ancestor, =, parent, ;, Node, ancestorChild, =, node, ;, while, (, true, ), {, if, (]
[parent, ), {, Node, ancestor, =, parent, ;, Node, ancestorChild, =, node, ;, while, (, true, ), {, if, (]
[parent, ;, Node, ancestorChild, =, node, ;, while, (, true, ), {, if, (, ancestor, ., getFirstChild, (, ), !=]
[ancestorChild, =, node, ;, while, (, true, ), {, if, (, ancestor, ., getFirstChild, (, ), !=, ancestorChild, ), {]
[node, ;, while, (, true, ), {, if, (, ancestor, ., getFirstChild, (, ), !=, ancestorChild, ), {, replaceWithNull, (]
[while, (, true, ), {, if, (, ancestor, ., getFirstChild, (, ), !=, ancestorChild, ), {, replaceWithNull, (, ancestorChild, ,]
[., getFirstChild, (, ), !=, ancestorChild, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (]
[., getFirstChild, (, ), !=, ancestorChild, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (]
[ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (, ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =]
[ancestorChild, ,, ancestor, ), ;, break, ;, }, if, (, ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =]
[;, }, if, (, ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =, ancestor, ., getParent, (, ), ;]
[if, (, ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =, ancestor, ., getParent, (, ), ;, replaceWithEmpty, (]
[ancestor, ., isExprResult, (, ), ), {, Node, ancParent, =, ancestor, ., getParent, (, ), ;, replaceWithEmpty, (, ancestor, ,]
[=, ancestor, ., getParent, (, ), ;, replaceWithEmpty, (, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =]
[=, ancestor, ., getParent, (, ), ;, replaceWithEmpty, (, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =]
[(, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (]
[(, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (]
[(, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (]
[(, ancestor, ,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (]
[,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=]
[,, ancParent, ), ;, break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=]
[break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&]
[break, ;, }, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&]
[}, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&, type, !=]
[}, int, type, =, ancestor, ., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&, type, !=]
[ancestor, ., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&]
[ancestor, ., getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&]
[getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=]
[getType, (, ), ;, if, (, type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=]
[(, type, !=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {]
[!=, Token, ., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (]
[., GETPROP, &&, type, !=, Token, ., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,]
[., GETELEM, &&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }]
[&&, type, !=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =]
[!=, Token, ., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;]
[., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =]
[., CALL, ), {, replaceWithNull, (, ancestorChild, ,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =]
[,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, ., getParent, (, ), ;, }]
[,, ancestor, ), ;, break, ;, }, ancestorChild, =, ancestor, ;, ancestor, =, ancestor, ., getParent, (, ), ;, }]
[(, ), ;, }, void, maybeEliminateAssignmentByLvalueName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, lvalue, =]
[(, ), ;, }, void, maybeEliminateAssignmentByLvalueName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, lvalue, =]
[t, ,, Node, n, ,, Node, parent, ), {, Node, lvalue, =, n, ., getFirstChild, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, lvalue, =, n, ., getFirstChild, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, Node, lvalue, =, n, ., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (]
[Node, parent, ), {, Node, lvalue, =, n, ., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, lvalue, ), ||]
[), {, Node, lvalue, =, n, ., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, lvalue, ), ||, qualifiedNameBeginsWithStripType, (]
[., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, lvalue, ), ||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (]
[., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, lvalue, ), ||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (]
[), ||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =]
[), ||, qualifiedNameBeginsWithStripType, (, lvalue, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =]
[), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;]
[if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (]
[parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,]
[(, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;]
[(, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;]
[getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {]
[getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {]
[replaceWithEmpty, (, parent, ,, gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report, (]
[parent, ,, gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report, (, n, ,]
[gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,]
[gramps, ), ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, t, ., report, (, n, ,, STRIP_ASSIGNMENT_ERROR, ,]
[;, }, }, }, void, maybeEliminateExpressionByName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, expression, =]
[;, }, }, }, void, maybeEliminateExpressionByName, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, expression, =]
[t, ,, Node, n, ,, Node, parent, ), {, Node, expression, =, n, ., getFirstChild, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, expression, =, n, ., getFirstChild, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, Node, expression, =, n, ., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (]
[Node, parent, ), {, Node, expression, =, n, ., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, expression, ), ||]
[), {, Node, expression, =, n, ., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, expression, ), ||, qualifiedNameBeginsWithStripType, (]
[., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, expression, ), ||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (]
[., getFirstChild, (, ), ;, if, (, nameEndsWithFieldNameToStrip, (, expression, ), ||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (]
[), ||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =]
[), ||, qualifiedNameBeginsWithStripType, (, expression, ), ), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =]
[), {, if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;]
[if, (, parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (]
[parent, ., isExprResult, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,]
[{, Node, gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else, {]
[gramps, =, parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else, {, replaceWithEmpty, (]
[parent, ., getParent, (, ), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else, {, replaceWithEmpty, (, n, ,]
[), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else, {, replaceWithEmpty, (, n, ,, parent, ), ;, }]
[), ;, replaceWithEmpty, (, parent, ,, gramps, ), ;, }, else, {, replaceWithEmpty, (, n, ,, parent, ), ;, }]
[(, ), ;, }, }, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, }, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isMethodOrCtorCallThatTriggersRemoval, (]
[}, void, maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isMethodOrCtorCallThatTriggersRemoval, (, t, ,]
[maybeRemoveCall, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, isMethodOrCtorCallThatTriggersRemoval, (, t, ,, n, ,]
[,, Node, n, ,, Node, parent, ), {, if, (, isMethodOrCtorCallThatTriggersRemoval, (, t, ,, n, ,, parent, ), ), {]
[n, ,, Node, parent, ), {, if, (, isMethodOrCtorCallThatTriggersRemoval, (, t, ,, n, ,, parent, ), ), {, replaceHighestNestedCallWithNull, (]
[Node, parent, ), {, if, (, isMethodOrCtorCallThatTriggersRemoval, (, t, ,, n, ,, parent, ), ), {, replaceHighestNestedCallWithNull, (, n, ,]
[n, ,, parent, ), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, key, =]
[n, ,, parent, ), ;, }, }, void, eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, key, =]
[eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, key, =, n, ., getFirstChild, (, ), ;, while, (]
[eliminateKeysWithStripNamesFromObjLit, (, NodeTraversal, t, ,, Node, n, ), {, Node, key, =, n, ., getFirstChild, (, ), ;, while, (]
[NodeTraversal, t, ,, Node, n, ), {, Node, key, =, n, ., getFirstChild, (, ), ;, while, (, key, !=]
[), {, Node, key, =, n, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, if, (]
[Node, key, =, n, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, if, (, isStripName, (]
[Node, key, =, n, ., getFirstChild, (, ), ;, while, (, key, !=, null, ), {, if, (, isStripName, (]
[key, !=, null, ), {, if, (, isStripName, (, key, ., getString, (, ), ), ), {, Node, value, =]
[key, !=, null, ), {, if, (, isStripName, (, key, ., getString, (, ), ), ), {, Node, value, =]
[key, ., getString, (, ), ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, Node, next, =]
[key, ., getString, (, ), ), ), {, Node, value, =, key, ., getFirstChild, (, ), ;, Node, next, =]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, Node, next, =, key, ., getNext, (, ), ;]
[), {, Node, value, =, key, ., getFirstChild, (, ), ;, Node, next, =, key, ., getNext, (, ), ;]
[=, key, ., getFirstChild, (, ), ;, Node, next, =, key, ., getNext, (, ), ;, n, ., removeChild, (]
[getFirstChild, (, ), ;, Node, next, =, key, ., getNext, (, ), ;, n, ., removeChild, (, key, ), ;]
[), ;, Node, next, =, key, ., getNext, (, ), ;, n, ., removeChild, (, key, ), ;, key, =]
[Node, next, =, key, ., getNext, (, ), ;, n, ., removeChild, (, key, ), ;, key, =, next, ;]
[Node, next, =, key, ., getNext, (, ), ;, n, ., removeChild, (, key, ), ;, key, =, next, ;]
[n, ., removeChild, (, key, ), ;, key, =, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else, {]
[removeChild, (, key, ), ;, key, =, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, key, =]
[removeChild, (, key, ), ;, key, =, next, ;, compiler, ., reportCodeChange, (, ), ;, }, else, {, key, =]
[=, key, ., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return]
[=, key, ., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return]
[=, key, ., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return]
[=, key, ., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return]
[=, key, ., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return]
[., getNext, (, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=]
[(, ), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=, null, &&]
[), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=, null, &&, (]
[), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=, null, &&, (]
[), ;, }, }, }, boolean, isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=, null, &&, (]
[isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=, null, &&, (, n, ., isCall, (, ), ||]
[isCallWhoseReturnValueShouldBeStripped, (, @, Nullable, Node, n, ), {, return, n, !=, null, &&, (, n, ., isCall, (, ), ||]
[{, return, n, !=, null, &&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&]
[{, return, n, !=, null, &&, (, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&]
[(, n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&]
[n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (]
[n, ., isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (]
[isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (]
[isCall, (, ), ||, n, ., isNew, (, ), ), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (]
[(, ), ), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||]
[), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (]
[), &&, n, ., hasChildren, (, ), &&, (, qualifiedNameBeginsWithStripType, (, n, ., getFirstChild, (, ), ), ||, nameEndsWithFieldNameToStrip, (]
[(, n, ., getFirstChild, (, ), ), ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =]
[(, n, ., getFirstChild, (, ), ), ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =]
[), ;, }, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, ., getQualifiedName, (, ), ;, return]
[}, boolean, qualifiedNameBeginsWithStripType, (, Node, n, ), {, String, name, =, n, ., getQualifiedName, (, ), ;, return, qualifiedNameBeginsWithStripType, (]
[getQualifiedName, (, ), ;, return, qualifiedNameBeginsWithStripType, (, name, ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if, (]
[getQualifiedName, (, ), ;, return, qualifiedNameBeginsWithStripType, (, name, ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if, (]
[), ;, return, qualifiedNameBeginsWithStripType, (, name, ), ;, }, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if, (, name, !=]
[}, boolean, qualifiedNameBeginsWithStripType, (, String, name, ), {, if, (, name, !=, null, ), {, for, (, String, type, :]
[name, ), {, if, (, name, !=, null, ), {, for, (, String, type, :, stripTypes, ), {, if, (]
[name, ), {, if, (, name, !=, null, ), {, for, (, String, type, :, stripTypes, ), {, if, (]
[name, ), {, if, (, name, !=, null, ), {, for, (, String, type, :, stripTypes, ), {, if, (]
[(, name, !=, null, ), {, for, (, String, type, :, stripTypes, ), {, if, (, name, ., equals, (]
[null, ), {, for, (, String, type, :, stripTypes, ), {, if, (, name, ., equals, (, type, ), ||]
[null, ), {, for, (, String, type, :, stripTypes, ), {, if, (, name, ., equals, (, type, ), ||]
[(, String, type, :, stripTypes, ), {, if, (, name, ., equals, (, type, ), ||, name, ., startsWith, (]
[(, String, type, :, stripTypes, ), {, if, (, name, ., equals, (, type, ), ||, name, ., startsWith, (]
[type, :, stripTypes, ), {, if, (, name, ., equals, (, type, ), ||, name, ., startsWith, (, type, +]
[if, (, name, ., equals, (, type, ), ||, name, ., startsWith, (, type, +, ".", ), ), {, return]
[name, ., startsWith, (, type, +, ".", ), ), {, return, true, ;, }, }, for, (, String, type, :]
[+, ".", ), ), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (]
[+, ".", ), ), {, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (]
[{, return, true, ;, }, }, for, (, String, type, :, stripTypePrefixes, ), {, if, (, name, ., startsWith, (]
[}, for, (, String, type, :, stripTypePrefixes, ), {, if, (, name, ., startsWith, (, type, ), ), {, return]
[stripTypePrefixes, ), {, if, (, name, ., startsWith, (, type, ), ), {, return, true, ;, }, }, }, return]
[}, }, }, return, false, ;, }, boolean, isReferenceToRemovedVar, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[}, }, }, return, false, ;, }, boolean, isReferenceToRemovedVar, (, NodeTraversal, t, ,, Node, n, ), {, String, name, =]
[(, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =]
[(, NodeTraversal, t, ,, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, Scope, scope, =]
[n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[n, ., getString, (, ), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =]
[), ;, Scope, scope, =, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (]
[=, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, name, ), ;, return]
[=, t, ., getScope, (, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, name, ), ;, return]
[(, ), ;, Scope, ., Var, var, =, scope, ., getVar, (, name, ), ;, return, varsToRemove, ., contains, (]
[var, ), ;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, function, =]
[var, ), ;, }, boolean, isMethodOrCtorCallThatTriggersRemoval, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, Node, function, =]
[t, ,, Node, n, ,, Node, parent, ), {, Node, function, =, n, ., getFirstChild, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, function, =, n, ., getFirstChild, (, ), ;, if, (]
[t, ,, Node, n, ,, Node, parent, ), {, Node, function, =, n, ., getFirstChild, (, ), ;, if, (]
[Node, n, ,, Node, parent, ), {, Node, function, =, n, ., getFirstChild, (, ), ;, if, (, function, ==]
[,, Node, parent, ), {, Node, function, =, n, ., getFirstChild, (, ), ;, if, (, function, ==, null, ||]
[Node, parent, ), {, Node, function, =, n, ., getFirstChild, (, ), ;, if, (, function, ==, null, ||, !]
[Node, parent, ), {, Node, function, =, n, ., getFirstChild, (, ), ;, if, (, function, ==, null, ||, !]
[., getFirstChild, (, ), ;, if, (, function, ==, null, ||, !, function, ., isGetProp, (, ), ), {, return]
[if, (, function, ==, null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (]
[if, (, function, ==, null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (]
[if, (, function, ==, null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (]
[function, ==, null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (, parent, !=]
[null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (, parent, !=, null, &&]
[null, ||, !, function, ., isGetProp, (, ), ), {, return, false, ;, }, if, (, parent, !=, null, &&]
[return, false, ;, }, if, (, parent, !=, null, &&, parent, ., isName, (, ), ), {, Node, gramps, =]
[return, false, ;, }, if, (, parent, !=, null, &&, parent, ., isName, (, ), ), {, Node, gramps, =]
[null, &&, parent, ., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[null, &&, parent, ., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[null, &&, parent, ., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (]
[parent, ., isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, !=]
[isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, !=, null, &&]
[isName, (, ), ), {, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, !=, null, &&]
[parent, ., getParent, (, ), ;, if, (, gramps, !=, null, &&, gramps, ., isVar, (, ), ), {, return]
[(, gramps, !=, null, &&, gramps, ., isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =]
[(, gramps, !=, null, &&, gramps, ., isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =]
[isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return]
[isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return]
[isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return]
[isVar, (, ), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return]
[), ), {, return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (]
[return, false, ;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||]
[;, }, }, Node, callee, =, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (]
[Node, callee, =, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||]
[=, function, ., getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (]
[getFirstChild, (, ), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, ), ||]
[), ;, return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (]
[return, nameEndsWithFieldNameToStrip, (, callee, ), ||, nameEndsWithFieldNameToStrip, (, function, ), ||, qualifiedNameBeginsWithStripType, (, function, ), ||, actsOnStripType, (, t, ,]
[||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (]
[||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (]
[||, actsOnStripType, (, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (]
[(, t, ,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (, n, !=]
[,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (, n, !=, null, &&]
[,, n, ), ;, }, boolean, nameEndsWithFieldNameToStrip, (, @, Nullable, Node, n, ), {, if, (, n, !=, null, &&]
[Node, n, ), {, if, (, n, !=, null, &&, n, ., isGetProp, (, ), ), {, Node, propNode, =]
[Node, n, ), {, if, (, n, !=, null, &&, n, ., isGetProp, (, ), ), {, Node, propNode, =]
[!=, null, &&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return]
[!=, null, &&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return]
[!=, null, &&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return]
[!=, null, &&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return]
[&&, n, ., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=]
[., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&]
[., isGetProp, (, ), ), {, Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&]
[Node, propNode, =, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&, propNode, ., isString, (, ), &&]
[=, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&, propNode, ., isString, (, ), &&, isStripName, (]
[=, n, ., getLastChild, (, ), ;, return, propNode, !=, null, &&, propNode, ., isString, (, ), &&, isStripName, (]
[!=, null, &&, propNode, ., isString, (, ), &&, isStripName, (, propNode, ., getString, (, ), ), ;, }, return]
[;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes, =]
[;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes, =]
[;, }, return, false, ;, }, private, boolean, actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes, =]
[actsOnStripType, (, NodeTraversal, t, ,, Node, callNode, ), {, SubclassRelationship, classes, =, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (]
[Node, callNode, ), {, SubclassRelationship, classes, =, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, ), ;, if, (]
[Node, callNode, ), {, SubclassRelationship, classes, =, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, ), ;, if, (]
[), {, SubclassRelationship, classes, =, compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, ), ;, if, (, classes, !=]
[compiler, ., getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, ), ;, if, (, classes, !=, null, ), {, if, (]
[getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, ), ;, if, (, classes, !=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (]
[getCodingConvention, (, ), ., getClassesDefinedByCall, (, callNode, ), ;, if, (, classes, !=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (]
[), ;, if, (, classes, !=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return]
[!=, null, ), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return, true, ;, }, if, (]
[), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (]
[), {, if, (, qualifiedNameBeginsWithStripType, (, classes, ., subclassName, ), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (]
[classes, ., subclassName, ), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {]
[classes, ., subclassName, ), ), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {]
[), {, return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (]
[return, true, ;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (, callNode, ,]
[;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,]
[;, }, if, (, qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,]
[qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,]
[qualifiedNameBeginsWithStripType, (, classes, ., superclassName, ), ), {, t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,]
[t, ., report, (, callNode, ,, STRIP_TYPE_INHERIT_ERROR, ,, classes, ., subclassName, ,, classes, ., superclassName, ), ;, }, }, return]
[classes, ., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (]
[classes, ., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (]
[classes, ., superclassName, ), ;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (]
[;, }, }, return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes, ., contains, (]
[return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes, ., contains, (, name, ), ||]
[return, false, ;, }, boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes, ., contains, (, name, ), ||]
[boolean, isStripName, (, String, name, ), {, if, (, stripNameSuffixes, ., contains, (, name, ), ||, stripNamePrefixes, ., contains, (]
[), {, if, (, stripNameSuffixes, ., contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return]
[., contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (]
[., contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (]
[contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (, (]
[contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (, (]
[contains, (, name, ), ||, stripNamePrefixes, ., contains, (, name, ), ), {, return, true, ;, }, if, (, (]
[., contains, (, name, ), ), {, return, true, ;, }, if, (, (, name, ., length, (, ), ==]
[name, ), ), {, return, true, ;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||]
[name, ), ), {, return, true, ;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||]
[return, true, ;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||, Character, ., isUpperCase, (]
[return, true, ;, }, if, (, (, name, ., length, (, ), ==, 0, ), ||, Character, ., isUpperCase, (]
[if, (, (, name, ., length, (, ), ==, 0, ), ||, Character, ., isUpperCase, (, name, ., charAt, (]
[(, ), ==, 0, ), ||, Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return]
[Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return, false, ;, }, String, lcName, =]
[Character, ., isUpperCase, (, name, ., charAt, (, 0, ), ), ), {, return, false, ;, }, String, lcName, =]
[), {, return, false, ;, }, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String, stripName, :]
[}, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String, stripName, :, stripNamePrefixes, ), {, if, (]
[}, String, lcName, =, name, ., toLowerCase, (, ), ;, for, (, String, stripName, :, stripNamePrefixes, ), {, if, (]
[name, ., toLowerCase, (, ), ;, for, (, String, stripName, :, stripNamePrefixes, ), {, if, (, lcName, ., startsWith, (]
[name, ., toLowerCase, (, ), ;, for, (, String, stripName, :, stripNamePrefixes, ), {, if, (, lcName, ., startsWith, (]
[stripName, :, stripNamePrefixes, ), {, if, (, lcName, ., startsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return]
[startsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return, true, ;, }, }, for, (, String, stripName, :]
[(, ), ), ), {, return, true, ;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {, if, (]
[(, ), ), ), {, return, true, ;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {, if, (]
[{, return, true, ;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {, if, (, lcName, ., endsWith, (]
[{, return, true, ;, }, }, for, (, String, stripName, :, stripNameSuffixes, ), {, if, (, lcName, ., endsWith, (]
[stripName, :, stripNameSuffixes, ), {, if, (, lcName, ., endsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return]
[if, (, lcName, ., endsWith, (, stripName, ., toLowerCase, (, ), ), ), {, return, true, ;, }, }, return]
[{, return, true, ;, }, }, return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, ), {]
[{, return, true, ;, }, }, return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, ), {]
[}, }, return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, ), {, parent, ., replaceChild, (]
[return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, ), {, parent, ., replaceChild, (, n, ,]
[return, false, ;, }, void, replaceWithNull, (, Node, n, ,, Node, parent, ), {, parent, ., replaceChild, (, n, ,]
[n, ,, IR, ., nullNode, (, ), ), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {]
[n, ,, IR, ., nullNode, (, ), ), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {]
[nullNode, (, ), ), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {, NodeUtil, ., removeChild, (]
[), ), ;, }, void, replaceWithEmpty, (, Node, n, ,, Node, parent, ), {, NodeUtil, ., removeChild, (, parent, ,]
