[;, public, static, final, double, DEFAULT_INITIAL_RADIUS, =, 10.0, ;, public, static, final, double, DEFAULT_STOPPING_RADIUS, =, 1E-8, ;, private, static, final]
[;, public, static, final, double, DEFAULT_STOPPING_RADIUS, =, 1E-8, ;, private, static, final, double, ZERO, =, 0d, ;, private, static, final]
[;, private, static, final, double, ZERO, =, 0d, ;, private, static, final, double, ONE, =, 1d, ;, private, static, final]
[;, private, static, final, double, ONE, =, 1d, ;, private, static, final, double, TWO, =, 2d, ;, private, static, final]
[;, private, static, final, double, TWO, =, 2d, ;, private, static, final, double, TEN, =, 10d, ;, private, static, final]
[;, private, static, final, double, TEN, =, 10d, ;, private, static, final, double, SIXTEEN, =, 16d, ;, private, static, final]
[;, private, static, final, double, SIXTEEN, =, 16d, ;, private, static, final, double, TWO_HUNDRED_FIFTY, =, 250d, ;, private, static, final]
[;, private, static, final, double, TWO_HUNDRED_FIFTY, =, 250d, ;, private, static, final, double, MINUS_ONE, =, -, ONE, ;, private, static]
[;, private, static, final, double, MINUS_ONE, =, -, ONE, ;, private, static, final, double, HALF, =, ONE, /, 2, ;]
[;, private, static, final, double, HALF, =, ONE, /, 2, ;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4]
[;, private, static, final, double, HALF, =, ONE, /, 2, ;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4]
[;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8]
[/, 2, ;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE]
[;, private, static, final, double, ONE_OVER_FOUR, =, ONE, /, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8]
[;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10]
[/, 4, ;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE]
[;, private, static, final, double, ONE_OVER_EIGHT, =, ONE, /, 8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10]
[;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10, ;, private, static, final, double, ONE_OVER_A_THOUSAND, =, ONE, /, 1000]
[/, 8, ;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10, ;, private, static, final, double, ONE_OVER_A_THOUSAND, =, ONE]
[;, private, static, final, double, ONE_OVER_TEN, =, ONE, /, 10, ;, private, static, final, double, ONE_OVER_A_THOUSAND, =, ONE, /, 1000]
[;, private, static, final, double, ONE_OVER_A_THOUSAND, =, ONE, /, 1000, ;, private, final, int, numberOfInterpolationPoints, ;, private, double, initialTrustRegionRadius, ;]
[/, 10, ;, private, static, final, double, ONE_OVER_A_THOUSAND, =, ONE, /, 1000, ;, private, final, int, numberOfInterpolationPoints, ;, private, double]
[;, private, static, final, double, ONE_OVER_A_THOUSAND, =, ONE, /, 1000, ;, private, final, int, numberOfInterpolationPoints, ;, private, double, initialTrustRegionRadius, ;]
[;, private, final, int, numberOfInterpolationPoints, ;, private, double, initialTrustRegionRadius, ;, private, final, double, stoppingTrustRegionRadius, ;, private, boolean, isMinimize, ;, private]
[/, 1000, ;, private, final, int, numberOfInterpolationPoints, ;, private, double, initialTrustRegionRadius, ;, private, final, double, stoppingTrustRegionRadius, ;, private, boolean, isMinimize]
[;, private, final, int, numberOfInterpolationPoints, ;, private, double, initialTrustRegionRadius, ;, private, final, double, stoppingTrustRegionRadius, ;, private, boolean, isMinimize, ;, private]
[,, DEFAULT_INITIAL_RADIUS, ,, DEFAULT_STOPPING_RADIUS, ), ;, }, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {]
[,, DEFAULT_STOPPING_RADIUS, ), ;, }, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (]
[), ;, }, public, BOBYQAOptimizer, (, int, numberOfInterpolationPoints, ,, double, initialTrustRegionRadius, ,, double, stoppingTrustRegionRadius, ), {, super, (, null, )]
[), ;, this, ., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;, this, ., initialTrustRegionRadius, =, initialTrustRegionRadius, ;, this, ., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;]
[=, numberOfInterpolationPoints, ;, this, ., initialTrustRegionRadius, =, initialTrustRegionRadius, ;, this, ., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair]
[., numberOfInterpolationPoints, =, numberOfInterpolationPoints, ;, this, ., initialTrustRegionRadius, =, initialTrustRegionRadius, ;, this, ., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override]
[;, this, ., initialTrustRegionRadius, =, initialTrustRegionRadius, ;, this, ., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair, doOptimize, (]
[=, initialTrustRegionRadius, ;, this, ., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, double]
[., initialTrustRegionRadius, =, initialTrustRegionRadius, ;, this, ., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {]
[;, this, ., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, double, [, ]]
[=, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, double, [, ], lowerBound, =, getLowerBound, (]
[., stoppingTrustRegionRadius, =, stoppingTrustRegionRadius, ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, double, [, ], lowerBound, =]
[;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, double, [, ], lowerBound, =, getLowerBound, (, ), ;]
[;, final, double, [, ], upperBound, =, getUpperBound, (, ), ;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =]
[;, setup, (, lowerBound, ,, upperBound, ), ;, isMinimize, =, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;]
[;, isMinimize, =, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (]
[,, upperBound, ), ;, isMinimize, =, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector]
[), ;, isMinimize, =, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint]
[=, (, getGoalType, (, ), ==, GoalType, ., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), )]
[;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,, upperBound]
[), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,]
[==, GoalType, ., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =]
[), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,]
[., MINIMIZE, ), ;, currentBest, =, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (]
[=, new, ArrayRealVector, (, getStartPoint, (, ), ), ;, final, double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;]
[;, final, double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (]
[), ;, final, double, value, =, bobyqa, (, lowerBound, ,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef]
[;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,, isMinimize, ?, value, :, -, value, ), ;, }]
[,, upperBound, ), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,, isMinimize, ?, value, :, -, value]
[), ;, return, new, PointValuePair, (, currentBest, ., getDataRef, (, ), ,, isMinimize, ?, value, :, -, value, ), ;]
[;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, )]
[,, isMinimize, ?, value, :, -, value, ), ;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double]
[., getDataRef, (, ), ,, isMinimize, ?, value, :, -, value, ), ;, }, private, double, bobyqa, (, double, []
[), ;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (]
[?, value, :, -, value, ), ;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double, [, ]]
[:, -, value, ), ;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double, [, ], upperBound, )]
[), ;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (]
[), ;, }, private, double, bobyqa, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, for, (, int, j, =, 0, ;, j, <]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, boundDiff, =]
[., getDimension, (, ), ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[;, j, <, n, ;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, .]
[;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,]
[<, n, ;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (]
[;, j, ++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,]
[), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j]
[++, ), {, final, double, boundDiff, =, boundDifference, [, j, ], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, []
[;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;]
[[, j, ], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j]
[], ;, lowerDifference, ., setEntry, (, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), )]
[;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;]
[., setEntry, (, j, ,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, .]
[,, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,]
[), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), )]
[-, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -]
[[, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, []
[], -, currentBest, ., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ]]
[), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), )]
[., getEntry, (, j, ), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, .]
[), ), ;, upperDifference, ., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, )]
[;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (]
[., setEntry, (, j, ,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (]
[,, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (]
[), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry]
[-, currentBest, ., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius]
[[, j, ], -, currentBest, ., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, )]
[], -, currentBest, ., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -]
[), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry]
[., getEntry, (, j, ), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {]
[), ), ;, if, (, lowerDifference, ., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, .]
[), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[>=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry]
[., getEntry, (, j, ), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO]
[), >=, -, initialTrustRegionRadius, ), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, .]
[), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[), {, if, (, lowerDifference, ., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,]
[>=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (]
[., getEntry, (, j, ), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], )]
[), >=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry]
[), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,]
[;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }]
[., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;]
[,, lowerBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (]
[), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;]
[[, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,]
[], ), ;, lowerDifference, ., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, )]
[;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound]
[., setEntry, (, j, ,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {]
[,, ZERO, ), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (]
[), ;, upperDifference, ., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, .]
[., setEntry, (, j, ,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j]
[,, boundDiff, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, )]
[), ;, }, else, {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference]
[;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -]
[., setEntry, (, j, ,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -]
[,, lowerBound, [, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final]
[), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ]]
[+, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, []
[[, j, ], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne]
[], +, initialTrustRegionRadius, ), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound]
[), ;, lowerDifference, ., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ]]
[;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry]
[., setEntry, (, j, ,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, .]
[,, -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, )]
[), ;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, .]
[), ;, final, double, deltaOne, =, upperBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, .]
[;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else]
[-, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,]
[[, j, ], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,, Math, ., max]
[], -, currentBest, ., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (, deltaOne]
[;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else]
[., getEntry, (, j, ), ;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, )]
[), ;, upperDifference, ., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }]
[;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (, upperDifference, .]
[., setEntry, (, j, ,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (]
[,, Math, ., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (]
[), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (, upperDifference]
[., max, (, deltaOne, ,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, )]
[,, initialTrustRegionRadius, ), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {]
[), ), ;, }, }, else, if, (, upperDifference, ., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (]
[), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[<=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (]
[., getEntry, (, j, ), <=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, )]
[), <=, initialTrustRegionRadius, ), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry]
[), {, if, (, upperDifference, ., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,]
[), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,]
[<=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (]
[., getEntry, (, j, ), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], )]
[), <=, ZERO, ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry]
[), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,]
[;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;]
[., setEntry, (, j, ,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, )]
[,, upperBound, [, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry]
[), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO, )]
[[, j, ], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j]
[], ), ;, lowerDifference, ., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO]
[;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, upperBound]
[., setEntry, (, j, ,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else]
[,, -, boundDiff, ), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry]
[), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[), ;, upperDifference, ., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,]
[;, }, else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double]
[., setEntry, (, j, ,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j]
[,, ZERO, ), ;, }, else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, )]
[), ;, }, else, {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final]
[;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo]
[., setEntry, (, j, ,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j]
[,, upperBound, [, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, .]
[), ;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double]
[-, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;]
[[, j, ], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (]
[], -, initialTrustRegionRadius, ), ;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, )]
[), ;, final, double, deltaOne, =, lowerBound, [, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double]
[;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,]
[-, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j]
[[, j, ], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, .]
[], -, currentBest, ., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (]
[;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,]
[., getEntry, (, j, ), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math]
[), ;, final, double, deltaTwo, =, -, initialTrustRegionRadius, ;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne]
[;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry]
[;, lowerDifference, ., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry]
[;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (, lowerBound, ,, upperBound, )]
[., setEntry, (, j, ,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (, j]
[,, Math, ., min, (, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;]
[), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (, lowerBound, ,, upperBound]
[., min, (, deltaOne, ,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }]
[,, deltaTwo, ), ), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (]
[), ), ;, upperDifference, ., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (, lowerBound, ,]
[;, }, }, }, return, bobyqb, (, lowerBound, ,, upperBound, ), ;, }, private, double, bobyqb, (, double, [, ]]
[., setEntry, (, j, ,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (, lowerBound, ,, upperBound, ), ;, }]
[,, initialTrustRegionRadius, ), ;, }, }, }, return, bobyqb, (, lowerBound, ,, upperBound, ), ;, }, private, double, bobyqb, (]
[), ;, }, }, }, return, bobyqb, (, lowerBound, ,, upperBound, ), ;, }, private, double, bobyqb, (, double, []
[;, }, private, double, bobyqb, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, )]
[,, upperBound, ), ;, }, private, double, bobyqb, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {]
[), ;, }, private, double, bobyqb, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np]
[;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =, n, +, 1, ;, final, int, nptm, =, npt]
[., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, np, =, n, +, 1, ;, final]
[;, final, int, np, =, n, +, 1, ;, final, int, nptm, =, npt, -, np, ;, final, int, nh]
[;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =, n, *, np, /, 2, ;, final]
[+, 1, ;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =, n, *, np, /, 2]
[;, final, int, nptm, =, npt, -, np, ;, final, int, nh, =, n, *, np, /, 2, ;, final]
[;, final, int, nh, =, n, *, np, /, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, )]
[-, np, ;, final, int, nh, =, n, *, np, /, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (]
[;, final, int, nh, =, n, *, np, /, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, )]
[;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, npt, )]
[/, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (]
[*, np, /, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new]
[/, 2, ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (]
[;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, npt, )]
[;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt, )]
[), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt]
[;, final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt, ), ;, double, cauchy, =, Double, ., NaN, ;, double, alpha]
[), ;, final, ArrayRealVector, work3, =, new, ArrayRealVector, (, npt, ), ;, double, cauchy, =, Double, ., NaN, ;, double]
[;, double, cauchy, =, Double, ., NaN, ;, double, alpha, =, Double, ., NaN, ;, double, dsq, =, Double, .]
[), ;, double, cauchy, =, Double, ., NaN, ;, double, alpha, =, Double, ., NaN, ;, double, dsq, =, Double]
[;, double, alpha, =, Double, ., NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, .]
[., NaN, ;, double, alpha, =, Double, ., NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =]
[;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim]
[., NaN, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0]
[;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim, (, lowerBound, ,, upperBound, ), ;, double]
[., NaN, ;, double, crvmin, =, Double, ., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim, (, lowerBound, ,, upperBound, )]
[;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int]
[., NaN, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for]
[=, 0, ;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =]
[;, prelim, (, lowerBound, ,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[,, upperBound, ), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[), ;, double, xoptsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex]
[;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), )]
[<, n, ;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i]
[;, i, ++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), )]
[), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double]
[++, ), {, trustRegionCenterOffset, ., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final]
[;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *, deltaOne, ;, }, double]
[., setEntry, (, i, ,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset]
[,, interpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i]
[), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *, deltaOne, ;, }]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;]
[,, i, ), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *]
[), ), ;, final, double, deltaOne, =, trustRegionCenterOffset, ., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *, deltaOne, ;]
[;, xoptsq, +=, deltaOne, *, deltaOne, ;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final, int]
[., getEntry, (, i, ), ;, xoptsq, +=, deltaOne, *, deltaOne, ;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (]
[), ;, xoptsq, +=, deltaOne, *, deltaOne, ;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final]
[+=, deltaOne, *, deltaOne, ;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final, int, kbase, =]
[;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final, int, kbase, =, 0, ;, int, ntrits]
[*, deltaOne, ;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final, int, kbase, =, 0, ;]
[;, }, double, fsave, =, fAtInterpolationPoints, ., getEntry, (, 0, ), ;, final, int, kbase, =, 0, ;, int, ntrits]
[;, final, int, kbase, =, 0, ;, int, ntrits, =, 0, ;, int, itest, =, 0, ;, int, knew, =]
[., getEntry, (, 0, ), ;, final, int, kbase, =, 0, ;, int, ntrits, =, 0, ;, int, itest, =]
[), ;, final, int, kbase, =, 0, ;, int, ntrits, =, 0, ;, int, itest, =, 0, ;, int, knew]
[;, int, ntrits, =, 0, ;, int, itest, =, 0, ;, int, knew, =, 0, ;, int, nfsav, =, getEvaluations]
[;, int, itest, =, 0, ;, int, knew, =, 0, ;, int, nfsav, =, getEvaluations, (, ), ;, double, rho]
[;, int, knew, =, 0, ;, int, nfsav, =, getEvaluations, (, ), ;, double, rho, =, initialTrustRegionRadius, ;, double, delta]
[;, int, nfsav, =, getEvaluations, (, ), ;, double, rho, =, initialTrustRegionRadius, ;, double, delta, =, rho, ;, double, diffa]
[;, double, rho, =, initialTrustRegionRadius, ;, double, delta, =, rho, ;, double, diffa, =, ZERO, ;, double, diffb, =, ZERO]
[;, double, delta, =, rho, ;, double, diffa, =, ZERO, ;, double, diffb, =, ZERO, ;, double, diffc, =, ZERO]
[;, double, diffa, =, ZERO, ;, double, diffb, =, ZERO, ;, double, diffc, =, ZERO, ;, double, f, =, ZERO]
[;, double, diffb, =, ZERO, ;, double, diffc, =, ZERO, ;, double, f, =, ZERO, ;, double, beta, =, ZERO]
[;, double, diffc, =, ZERO, ;, double, f, =, ZERO, ;, double, beta, =, ZERO, ;, double, adelt, =, ZERO]
[;, double, f, =, ZERO, ;, double, beta, =, ZERO, ;, double, adelt, =, ZERO, ;, double, denom, =, ZERO]
[;, double, beta, =, ZERO, ;, double, adelt, =, ZERO, ;, double, denom, =, ZERO, ;, double, ratio, =, ZERO]
[;, double, adelt, =, ZERO, ;, double, denom, =, ZERO, ;, double, ratio, =, ZERO, ;, double, dnorm, =, ZERO]
[;, double, denom, =, ZERO, ;, double, ratio, =, ZERO, ;, double, dnorm, =, ZERO, ;, double, scaden, =, ZERO]
[;, double, ratio, =, ZERO, ;, double, dnorm, =, ZERO, ;, double, scaden, =, ZERO, ;, double, biglsq, =, ZERO]
[;, double, dnorm, =, ZERO, ;, double, scaden, =, ZERO, ;, double, biglsq, =, ZERO, ;, double, distsq, =, ZERO]
[;, double, scaden, =, ZERO, ;, double, biglsq, =, ZERO, ;, double, distsq, =, ZERO, ;, int, state, =, 20]
[;, double, biglsq, =, ZERO, ;, double, distsq, =, ZERO, ;, int, state, =, 20, ;, for, (, ;, ;]
[;, double, distsq, =, ZERO, ;, int, state, =, 20, ;, for, (, ;, ;, ), switch, (, state, )]
[;, int, state, =, 20, ;, for, (, ;, ;, ), switch, (, state, ), {, case, 20, :, {]
[;, for, (, ;, ;, ), switch, (, state, ), {, case, 20, :, {, printState, (, 20, ), ;]
[), {, case, 20, :, {, printState, (, 20, ), ;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih]
[:, {, printState, (, 20, ), ;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =, 0, ;, for]
[;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;]
[), ;, if, (, trustRegionCenterInterpolationPointIndex, !=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0]
[), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[!=, kbase, ), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[), {, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, for, (, int, i]
[;, j, <, n, ;, j, ++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;]
[;, j, ++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {]
[<, n, ;, j, ++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++]
[;, j, ++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {]
[), {, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i]
[++, ), {, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, .]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, .]
[), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j]
[++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[<, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset]
[,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[+, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry]
[., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), )]
[), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, .]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[*, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i]
[), *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, )]
[), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry]
[;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j]
[), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k]
[+, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;, }]
[., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), )]
[), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;]
[), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >]
[., getEntry, (, ih, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, if]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, )]
[), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k]
[., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >, npt, )]
[), ), ;, ih, ++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int]
[;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =, 0, ;, k]
[++, ;, }, }, if, (, getEvaluations, (, ), >, npt, ), {, for, (, int, k, =, 0, ;]
[), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, temp, =]
[>, npt, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, temp, =]
[;, k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0]
[;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[<, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j]
[;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, .]
[;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[<, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, .]
[;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=]
[;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, .]
[,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, )]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for]
[;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i]
[), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i]
[*=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry]
[++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, .]
[;, }, }, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =, new]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;]
[), ;, }, }, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =]
[+, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, }, }, case, 60]
[., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }]
[), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, }, }, case]
[), ;, }, }, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, }, }, case, 60, :, {]
[), ;, }, }, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =]
[., getEntry, (, k, ,, i, ), ), ;, }, }, }, }, }, case, 60, :, {, printState, (]
[,, i, ), ), ;, }, }, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final]
[), ), ;, }, }, }, }, }, case, 60, :, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew]
[:, {, printState, (, 60, ), ;, final, ArrayRealVector, gnew, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, xbdi]
[;, final, ArrayRealVector, gnew, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, xbdi, =, new, ArrayRealVector, (, n, )]
[), ;, final, ArrayRealVector, gnew, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, xbdi, =, new, ArrayRealVector, (, n]
[;, final, ArrayRealVector, xbdi, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, s, =, new, ArrayRealVector, (, n, )]
[), ;, final, ArrayRealVector, xbdi, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, s, =, new, ArrayRealVector, (, n]
[;, final, ArrayRealVector, s, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hs, =, new, ArrayRealVector, (, n, )]
[), ;, final, ArrayRealVector, s, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hs, =, new, ArrayRealVector, (, n]
[;, final, ArrayRealVector, hs, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hred, =, new, ArrayRealVector, (, n, )]
[), ;, final, ArrayRealVector, hs, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hred, =, new, ArrayRealVector, (, n]
[;, final, ArrayRealVector, hred, =, new, ArrayRealVector, (, n, ), ;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta]
[), ;, final, ArrayRealVector, hred, =, new, ArrayRealVector, (, n, ), ;, final, double, [, ], dsqCrvmin, =, trsbox, (]
[;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,, hred]
[), ;, final, double, [, ], dsqCrvmin, =, trsbox, (, delta, ,, gnew, ,, xbdi, ,, s, ,, hs, ,]
[;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;]
[,, gnew, ,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin]
[,, xbdi, ,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin]
[,, s, ,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1]
[,, hs, ,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;]
[,, hred, ), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne]
[), ;, dsq, =, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta]
[=, dsqCrvmin, [, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo]
[;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (]
[[, 0, ], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math]
[], ;, crvmin, =, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt]
[=, dsqCrvmin, [, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, )]
[;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm, =, Math, .]
[[, 1, ], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm]
[], ;, double, deltaOne, =, delta, ;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm, =, Math]
[;, double, deltaTwo, =, Math, ., sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo]
[;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, )]
[., sqrt, (, dsq, ), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm]
[), ;, dnorm, =, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho]
[=, Math, ., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits]
[;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho]
[., min, (, deltaOne, ,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -]
[,, deltaTwo, ), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =]
[), ;, if, (, dnorm, <, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *]
[), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if]
[<, HALF, *, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne]
[), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if]
[*, rho, ), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne]
[), {, ntrits, =, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if]
[=, -, 1, ;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (]
[;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav]
[;, deltaOne, =, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav]
[=, TEN, *, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2]
[;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =]
[*, rho, ;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {]
[;, distsq, =, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =]
[=, deltaOne, *, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =, 650, ;]
[;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne]
[*, deltaOne, ;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;]
[;, if, (, getEvaluations, (, ), <=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne]
[), {, state, =, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;]
[<=, nfsav, +, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa]
[), {, state, =, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;]
[+, 2, ), {, state, =, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb]
[), {, state, =, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;]
[=, 650, ;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;, final, double, errbig]
[;, break, ;, }, deltaOne, =, Math, ., max, (, diffa, ,, diffb, ), ;, final, double, errbig, =, Math]
[=, Math, ., max, (, diffa, ,, diffb, ), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,]
[;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *]
[., max, (, diffa, ,, diffb, ), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, )]
[,, diffb, ), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq]
[), ;, final, double, errbig, =, Math, ., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho]
[;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq]
[., max, (, deltaOne, ,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (]
[,, diffc, ), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&]
[), ;, final, double, frhosq, =, rho, *, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >]
[;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;]
[*, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;]
[*, ONE_OVER_EIGHT, *, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =]
[*, rho, ;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;]
[;, if, (, crvmin, >, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;]
[), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int]
[&&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig]
[>, ZERO, &&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol]
[&&, errbig, >, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig]
[), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int]
[>, frhosq, *, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho]
[), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int]
[*, crvmin, ), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for]
[), {, state, =, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int]
[=, 650, ;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =, 0]
[;, break, ;, }, final, double, bdtol, =, errbig, /, rho, ;, for, (, int, j, =, 0, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, bdtest, =, bdtol]
[/, rho, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, bdtest]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, bdtest, =, bdtol]
[;, j, <, n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (]
[;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference]
[<, n, ;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, )]
[;, j, ++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference]
[), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (]
[++, ), {, double, bdtest, =, bdtol, ;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference, ., getEntry]
[;, if, (, newPoint, ., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =]
[), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j, )]
[==, lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if]
[., getEntry, (, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (]
[), ==, lowerDifference, ., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }]
[), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j, )]
[., getEntry, (, j, ), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint]
[), ), {, bdtest, =, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j]
[=, work1, ., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, .]
[;, }, if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, bdtest]
[., getEntry, (, j, ), ;, }, if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (]
[), ;, }, if, (, newPoint, ., getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {]
[), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {]
[==, upperDifference, ., getEntry, (, j, ), ), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }]
[., getEntry, (, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, bdtest, =, -, work1, ., getEntry]
[), ==, upperDifference, ., getEntry, (, j, ), ), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;]
[), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {]
[., getEntry, (, j, ), ), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }, if, (]
[), ), {, bdtest, =, -, work1, ., getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, )]
[=, -, work1, ., getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =]
[;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +, j]
[;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +, j]
[., getEntry, (, j, ), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry]
[), ;, }, if, (, bdtest, <, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +]
[), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +, j, *, j, ), /, 2, ), ;]
[<, bdtol, ), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +, j, *, j, ), /, 2]
[), {, double, curv, =, modelSecondDerivativesValues, ., getEntry, (, (, j, +, j, *, j, ), /, 2, ), ;]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1, =]
[., getEntry, (, (, j, +, j, *, j, ), /, 2, ), ;, for, (, int, k, =, 0]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1]
[/, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final]
[), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[+, j, *, j, ), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[*, j, ), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[), /, 2, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double, d1]
[;, k, <, npt, ;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j]
[;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=]
[<, npt, ;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;]
[;, k, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=]
[), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry]
[++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, .]
[;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF]
[., getEntry, (, k, ,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *]
[,, j, ), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }]
[), ;, curv, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=]
[+=, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv]
[;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650]
[*, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <]
[., getEntry, (, k, ), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho]
[), *, (, d1, *, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest]
[;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650]
[), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =]
[*, d1, ), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {]
[), ;, }, bdtest, +=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =]
[+=, HALF, *, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;]
[;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state, =, 680]
[*, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state]
[*, curv, *, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;, }, }]
[*, rho, ;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state]
[;, if, (, bdtest, <, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state, =, 680]
[), {, state, =, 650, ;, break, ;, }, }, }, state, =, 680, ;, break, ;, }, ++, ntrits]
[<, bdtol, ), {, state, =, 650, ;, break, ;, }, }, }, state, =, 680, ;, break, ;, }]
[), {, state, =, 650, ;, break, ;, }, }, }, state, =, 680, ;, break, ;, }, ++, ntrits]
[=, 650, ;, break, ;, }, }, }, state, =, 680, ;, break, ;, }, ++, ntrits, ;, }, case]
[;, break, ;, }, }, }, state, =, 680, ;, break, ;, }, ++, ntrits, ;, }, case, 90, :]
[=, 680, ;, break, ;, }, ++, ntrits, ;, }, case, 90, :, {, printState, (, 90, ), ;, if]
[;, break, ;, }, ++, ntrits, ;, }, case, 90, :, {, printState, (, 90, ), ;, if, (, dsq]
[;, }, case, 90, :, {, printState, (, 90, ), ;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {]
[;, }, case, 90, :, {, printState, (, 90, ), ;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {]
[:, {, printState, (, 90, ), ;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =]
[;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq]
[), ;, if, (, dsq, <=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double]
[), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =]
[<=, xoptsq, *, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for]
[), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =]
[*, ONE_OVER_A_THOUSAND, ), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int]
[), {, final, double, fracsq, =, xoptsq, *, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =]
[;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[*, ONE_OVER_FOUR, ;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[;, double, sumpq, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, .]
[;, k, <, npt, ;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum]
[;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -, HALF, *]
[<, npt, ;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -]
[;, k, ++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -, HALF, *]
[), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;, for]
[++, ), {, sumpq, +=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;]
[+=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i]
[;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[., getEntry, (, k, ), ;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0]
[), ;, double, sum, =, -, HALF, *, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, interpolationPoints, .]
[*, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[*, xoptsq, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, interpolationPoints, .]
[;, i, <, n, ;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *]
[;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (]
[<, n, ;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, .]
[;, i, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (]
[), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;]
[++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }, work2, .]
[;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =, fracsq, -, HALF, *, sum]
[*, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double]
[., getEntry, (, k, ,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }, work2, ., setEntry, (]
[,, i, ), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, )]
[), *, trustRegionCenterOffset, ., getEntry, (, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final]
[;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =, fracsq, -, HALF, *, sum]
[., getEntry, (, i, ), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =]
[), ;, }, work2, ., setEntry, (, k, ,, sum, ), ;, final, double, temp, =, fracsq, -, HALF, *]
[;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i, <]
[., setEntry, (, k, ,, sum, ), ;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (]
[,, sum, ), ;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0]
[), ;, final, double, temp, =, fracsq, -, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (]
[-, HALF, *, sum, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (]
[*, sum, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k]
[;, i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), )]
[<, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i]
[;, i, ++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), )]
[), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, .]
[++, ), {, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp, *]
[., setEntry, (, i, ,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i]
[,, bMatrix, ., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints]
[), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp]
[., getEntry, (, k, ,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry]
[,, i, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i]
[), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +]
[;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i, ;]
[., setEntry, (, i, ,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp, *, trustRegionCenterOffset, .]
[,, sum, *, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, )]
[), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i]
[+, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +, i, ;, for]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[+, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +, i, ;, for]
[., getEntry, (, k, ,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int]
[,, i, ), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +]
[), +, temp, *, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +, i, ;]
[), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i]
[*, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +, i, ;, for, (, int]
[), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=, i]
[., getEntry, (, i, ), ), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =]
[), ), ;, final, int, ip, =, npt, +, i, ;, for, (, int, j, =, 0, ;, j, <=]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (]
[+, i, ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, .]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (]
[;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry]
[;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j]
[<=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip]
[;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j]
[), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, work1]
[++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +]
[;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, double]
[., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (]
[,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint]
[,, bMatrix, ., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry]
[), ;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {]
[+, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for]
[+, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i]
[., getEntry, (, ip, ,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j]
[,, j, ), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, .]
[), +, work1, ., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (]
[+, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (, j]
[., getEntry, (, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *]
[), *, lagrangeValuesAtNewPoint, ., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (]
[+, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for]
[., getEntry, (, j, ), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), )]
[), +, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, }, }, }]
[), ;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {]
[*, work1, ., getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;, m]
[., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for, (, int]
[), *, work1, ., getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;]
[), ;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {]
[., getEntry, (, j, ), ), ;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm]
[), ), ;, }, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, )]
[;, m, <, nptm, ;, m, ++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for]
[;, m, ++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =]
[<, nptm, ;, m, ++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int]
[;, m, ++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =]
[), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;, k]
[++, ), {, double, sumz, =, ZERO, ;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;]
[;, double, sumw, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sumz, +=, zMatrix, .]
[;, k, <, npt, ;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;]
[;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[<, npt, ;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, .]
[;, k, ++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2]
[++, ), {, sumz, +=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,]
[+=, zMatrix, ., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,]
[., getEntry, (, k, ,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, )]
[,, m, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry]
[), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k]
[;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[., setEntry, (, k, ,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,, m, )]
[,, work2, ., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, sumw, +=]
[), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;]
[., getEntry, (, k, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, sumw, +=, lagrangeValuesAtNewPoint, .]
[), *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, )]
[), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j]
[., getEntry, (, k, ,, m, ), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for]
[,, m, ), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =]
[), ), ;, sumw, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;]
[+=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum, =]
[., getEntry, (, k, ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, double, sum]
[;, j, <, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw]
[;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *, trustRegionCenterOffset, .]
[<, n, ;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *]
[;, j, ++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *, trustRegionCenterOffset, .]
[), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j]
[++, ), {, double, sum, =, (, fracsq, *, sumz, -, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, .]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[-, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;]
[*, sumz, -, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =]
[-, HALF, *, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[*, sumw, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, .]
[., getEntry, (, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, .]
[;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,]
[<, npt, ;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (]
[;, k, ++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,]
[), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;]
[++, ), {, sum, +=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, )]
[+=, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }, work1, .]
[;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <]
[*, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }, work1, ., setEntry, (, j, ,, sum, ), ;]
[., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }, work1, ., setEntry, (]
[), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ;, }, work1, ., setEntry, (, j, ,, sum, )]
[;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <]
[., getEntry, (, k, ,, j, ), ;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (]
[,, j, ), ;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0]
[), ;, }, work1, ., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (]
[., setEntry, (, j, ,, sum, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[,, sum, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry]
[;, k, <, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry]
[;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j]
[<, npt, ;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k]
[;, k, ++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j]
[), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum]
[++, ), {, bMatrix, ., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +]
[;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, int]
[., setEntry, (, k, ,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum, *, zMatrix, .]
[,, j, ,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum, *, zMatrix, ., getEntry, (, k, ,]
[,, bMatrix, ., getEntry, (, k, ,, j, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, )]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final]
[+, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i, =]
[., getEntry, (, k, ,, j, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;]
[,, j, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, for, (]
[), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final]
[., getEntry, (, k, ,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[,, m, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, i, <, n, ;, i, ++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp]
[;, i, ++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =, work1, ., getEntry]
[<, n, ;, i, ++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =, work1]
[;, i, ++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =, work1, ., getEntry]
[), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =, work1, ., getEntry, (, i, )]
[++, ), {, final, int, ip, =, i, +, npt, ;, final, double, temp, =, work1, ., getEntry, (, i]
[;, final, double, temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j]
[+, npt, ;, final, double, temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0]
[;, final, double, temp, =, work1, ., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (]
[., getEntry, (, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, )]
[), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry]
[;, j, <=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry]
[;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j]
[<=, i, ;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip]
[;, j, ++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j]
[), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, temp]
[++, ), {, bMatrix, ., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +]
[;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[., setEntry, (, ip, ,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, temp, *, work1, .]
[,, j, ,, bMatrix, ., getEntry, (, ip, ,, j, ), +, temp, *, work1, ., getEntry, (, j, )]
[,, bMatrix, ., getEntry, (, ip, ,, j, ), +, temp, *, work1, ., getEntry, (, j, ), ), ;]
[), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n]
[+, temp, *, work1, ., getEntry, (, j, ), ), ;, }, }, }, int, ih, =, 0, ;, for]
[., getEntry, (, ip, ,, j, ), +, temp, *, work1, ., getEntry, (, j, ), ), ;, }, }]
[,, j, ), +, temp, *, work1, ., getEntry, (, j, ), ), ;, }, }, }, int, ih, =]
[), +, temp, *, work1, ., getEntry, (, j, ), ), ;, }, }, }, int, ih, =, 0, ;]
[), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n]
[*, work1, ., getEntry, (, j, ), ), ;, }, }, }, int, ih, =, 0, ;, for, (, int]
[), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n]
[., getEntry, (, j, ), ), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =]
[), ), ;, }, }, }, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (]
[;, j, <, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *]
[;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (]
[<, n, ;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, .]
[;, j, ++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (]
[), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), )]
[++, ), {, work1, ., setEntry, (, j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, )]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry, (]
[., setEntry, (, j, ,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (]
[,, -, HALF, *, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[*, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <]
[*, sumpq, *, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry]
[., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work1, .]
[;, k, <, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j]
[;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, .]
[<, npt, ;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +]
[;, k, ++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, .]
[), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k]
[++, ), {, work1, ., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (]
[;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, .]
[., setEntry, (, j, ,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints]
[,, work1, ., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k]
[), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset]
[+, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, .]
[., getEntry, (, j, ), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j]
[), +, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints]
[), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset]
[*, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints]
[., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (]
[), *, interpolationPoints, ., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,]
[), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset]
[., getEntry, (, k, ,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry]
[,, j, ), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j]
[), ), ;, interpolationPoints, ., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[;, }, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry]
[., setEntry, (, k, ,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (]
[,, j, ,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;]
[,, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for]
[), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, .]
[-, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=, j]
[., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int]
[,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;]
[), -, trustRegionCenterOffset, ., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=]
[), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, .]
[., getEntry, (, j, ), ), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;, i]
[), ), ;, }, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues]
[;, i, <=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih]
[;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, .]
[<=, j, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +]
[;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, .]
[), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (, i]
[++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (]
[;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,, i]
[., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset]
[,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j]
[), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,]
[+, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (]
[+, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i]
[., getEntry, (, ih, ), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +]
[), +, work1, ., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (]
[+, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j]
[., getEntry, (, i, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (]
[+, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (]
[., getEntry, (, j, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), )]
[), +, trustRegionCenterOffset, ., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry]
[), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,]
[*, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix]
[., getEntry, (, i, ), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +]
[), *, work1, ., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,]
[), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,]
[., getEntry, (, j, ), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry]
[), ), ;, bMatrix, ., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j]
[;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[., setEntry, (, npt, +, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,, i, ), )]
[,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,, i, ), ), ;, ih, ++, ;, }, }]
[+, i, ,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,, i, ), ), ;, ih, ++, ;]
[,, j, ,, bMatrix, ., getEntry, (, npt, +, j, ,, i, ), ), ;, ih, ++, ;, }, }]
[,, bMatrix, ., getEntry, (, npt, +, j, ,, i, ), ), ;, ih, ++, ;, }, }, for, (]
[), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[., getEntry, (, npt, +, j, ,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i]
[,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n]
[+, j, ,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i]
[,, i, ), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n]
[), ), ;, ih, ++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, originShift, .]
[++, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, originShift]
[;, i, <, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i]
[;, i, ++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, .]
[<, n, ;, i, ++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +]
[;, i, ++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, .]
[), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i]
[++, ), {, originShift, ., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (]
[;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, )]
[., setEntry, (, i, ,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (]
[), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[+, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i]
[., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[), +, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (]
[), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[), ), ;, newPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, )]
[., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (]
[), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (]
[), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[., getEntry, (, i, ), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -]
[), ), ;, lowerDifference, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, )]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (]
[), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (]
[), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[., getEntry, (, i, ), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -]
[), ), ;, upperDifference, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (]
[), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }]
[), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits]
[., getEntry, (, i, ), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO]
[), ), ;, trustRegionCenterOffset, ., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (]
[;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==, 0, ), {, state, =, 210, ;, break, ;]
[., setEntry, (, i, ,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==, 0, )]
[,, ZERO, ), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==, 0, ), {, state, =, 210]
[), ;, }, xoptsq, =, ZERO, ;, }, if, (, ntrits, ==, 0, ), {, state, =, 210, ;, break]
[=, ZERO, ;, }, if, (, ntrits, ==, 0, ), {, state, =, 210, ;, break, ;, }, state, =]
[;, }, if, (, ntrits, ==, 0, ), {, state, =, 210, ;, break, ;, }, state, =, 230, ;]
[), {, state, =, 210, ;, break, ;, }, state, =, 230, ;, break, ;, }, case, 210, :, {]
[==, 0, ), {, state, =, 210, ;, break, ;, }, state, =, 230, ;, break, ;, }, case, 210]
[), {, state, =, 210, ;, break, ;, }, state, =, 230, ;, break, ;, }, case, 210, :, {]
[=, 210, ;, break, ;, }, state, =, 230, ;, break, ;, }, case, 210, :, {, printState, (, 210]
[;, break, ;, }, state, =, 230, ;, break, ;, }, case, 210, :, {, printState, (, 210, ), ;]
[=, 230, ;, break, ;, }, case, 210, :, {, printState, (, 210, ), ;, final, double, [, ], alphaCauchy]
[;, break, ;, }, case, 210, :, {, printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =, altmov]
[:, {, printState, (, 210, ), ;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;]
[;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =, alphaCauchy, [, 0, ]]
[), ;, final, double, [, ], alphaCauchy, =, altmov, (, knew, ,, adelt, ), ;, alpha, =, alphaCauchy, [, 0]
[;, alpha, =, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =]
[,, adelt, ), ;, alpha, =, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (]
[), ;, alpha, =, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i]
[=, alphaCauchy, [, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;]
[;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[[, 0, ], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <]
[], ;, cauchy, =, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, alphaCauchy, [, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (]
[[, 1, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint]
[], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i]
[;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[<, n, ;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[;, i, ++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[++, ), {, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;, k]
[., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, }, case, 230]
[), ;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, }, case, 230, :, {, printState, (, 230, ), ;]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, }, case, 230, :, {]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, }, case, 230, :, {, printState, (, 230, )]
[), ;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;]
[., getEntry, (, i, ), ), ;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (]
[), ), ;, }, }, case, 230, :, {, printState, (, 230, ), ;, for, (, int, k, =, 0]
[:, {, printState, (, 230, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, suma, =, ZERO]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, suma, =]
[;, k, <, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double]
[;, k, ++, ), {, double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;]
[<, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =]
[;, k, ++, ), {, double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;]
[), {, double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int]
[++, ), {, double, suma, =, ZERO, ;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (]
[;, double, sumb, =, ZERO, ;, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[;, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, )]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, suma, +=, interpolationPoints, .]
[;, j, <, n, ;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (]
[<, n, ;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, .]
[;, j, ++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (]
[), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;]
[++, ), {, suma, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints]
[;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum]
[*, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset]
[., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry]
[,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j]
[), *, trialStepPoint, ., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum]
[., getEntry, (, j, ), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry]
[), ;, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix]
[;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry]
[,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *]
[;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }]
[., getEntry, (, j, ), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry]
[), ;, sum, +=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;]
[+=, bMatrix, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, .]
[;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint]
[*, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *]
[., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (]
[,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *]
[), *, trialStepPoint, ., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF]
[;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint]
[., getEntry, (, j, ), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +]
[), ;, }, work3, ., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, ), ;, }]
[., setEntry, (, k, ,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (]
[,, suma, *, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, )]
[), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, ), ;]
[*, (, HALF, *, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2]
[), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, ), ;]
[), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, )]
[+, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,]
[*, suma, +, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (]
[+, sumb, ), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,]
[), ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, )]
[;, work2, ., setEntry, (, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =]
[., setEntry, (, k, ,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, ), ;, }, beta, =]
[,, sum, ), ;, work2, ., setEntry, (, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (]
[), ;, work2, ., setEntry, (, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m]
[;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, )]
[., setEntry, (, k, ,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;]
[,, suma, ), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;]
[), ;, }, beta, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++]
[=, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, double, sum]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, double, sum, =, ZERO]
[;, m, <, nptm, ;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0]
[;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt]
[<, nptm, ;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k]
[;, m, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt]
[), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, .]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *]
[;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (]
[<, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, .]
[;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (]
[), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, ), ;]
[++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, )]
[+=, zMatrix, ., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, ), ;, }, beta, -=]
[;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[*, work3, ., getEntry, (, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =]
[., getEntry, (, k, ,, m, ), *, work3, ., getEntry, (, k, ), ;, }, beta, -=, sum, *]
[,, m, ), *, work3, ., getEntry, (, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (]
[), *, work3, ., getEntry, (, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k]
[;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[., getEntry, (, k, ), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;]
[), ;, }, beta, -=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[-=, sum, *, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (]
[*, sum, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, .]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (]
[;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k]
[;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *]
[<, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +]
[;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *]
[), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry]
[++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *, zMatrix, .]
[;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int]
[., setEntry, (, k, ,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,]
[,, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;]
[), ;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (]
[+, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, dsq, =, ZERO, ;, double]
[., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }]
[), +, sum, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, dsq, =, ZERO, ;]
[), ;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, dsq, =, ZERO, ;, double, bsum, =]
[), ;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (]
[., getEntry, (, k, ,, m, ), ), ;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;]
[,, m, ), ), ;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO]
[), ), ;, }, }, dsq, =, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for]
[=, ZERO, ;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;]
[;, double, bsum, =, ZERO, ;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[;, double, dx, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, )]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =]
[;, j, <, n, ;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;]
[;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=, d1, *]
[<, n, ;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=]
[;, j, ++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=, d1, *]
[), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=, d1, *, d1, ;, double]
[++, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, j, ), ;, dsq, +=, d1, *, d1, ;]
[;, dsq, +=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k]
[., getEntry, (, j, ), ;, dsq, +=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int]
[), ;, dsq, +=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;]
[+=, d1, *, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt]
[;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[*, d1, ;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[;, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, work3, .]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, .]
[;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,]
[<, npt, ;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (]
[;, k, ++, ), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,]
[), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;]
[++, ), {, sum, +=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, )]
[+=, work3, ., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=]
[;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =, npt, +, j]
[*, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j]
[., getEntry, (, k, ), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=, sum, *]
[), *, bMatrix, ., getEntry, (, k, ,, j, ), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (]
[;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =, npt, +, j]
[., getEntry, (, k, ,, j, ), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;]
[,, j, ), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =]
[), ;, }, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =, npt, +]
[+=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =, npt, +, j, ;, for, (]
[;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[*, trialStepPoint, ., getEntry, (, j, ), ;, final, int, jp, =, npt, +, j, ;, for, (, int, i]
[;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[., getEntry, (, j, ), ;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0]
[), ;, final, int, jp, =, npt, +, j, ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, bMatrix, .]
[+, j, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, sum, +=, bMatrix, .]
[;, i, <, n, ;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *]
[;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (]
[<, n, ;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, .]
[;, i, ++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (]
[), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;]
[++, ), {, sum, +=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, )]
[+=, bMatrix, ., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, .]
[;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j]
[*, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=]
[., getEntry, (, jp, ,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (]
[,, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, )]
[), *, trialStepPoint, ., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum]
[;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j]
[., getEntry, (, i, ), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *]
[), ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (]
[;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, )]
[., setEntry, (, jp, ,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx]
[,, sum, ), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry]
[), ;, bsum, +=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j]
[+=, sum, *, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset]
[;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =]
[*, trialStepPoint, ., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry]
[;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =]
[., getEntry, (, j, ), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j]
[), ;, dx, +=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta]
[+=, trialStepPoint, ., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *]
[;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +]
[., getEntry, (, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq]
[;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq]
[., getEntry, (, j, ), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +]
[), ;, }, beta, =, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *]
[=, dx, *, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits]
[-, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if]
[+, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, )]
[+, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint]
[*, dx, +, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum]
[+, dsq, *, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint]
[+, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, )]
[*, (, xoptsq, +, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry]
[+, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, )]
[), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE]
[+, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[+, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, .]
[+, dx, +, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,]
[+, dx, +, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, .]
[+, HALF, *, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE]
[*, dsq, ), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, )]
[), +, beta, -, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE]
[-, bsum, ;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits]
[;, if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom]
[., setEntry, (, trustRegionCenterInterpolationPointIndex, ,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits, ==, 0]
[,, lagrangeValuesAtNewPoint, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits, ==, 0, ), {, final, double]
[), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;]
[+, ONE, ), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), +, ONE, ), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =]
[), +, ONE, ), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[), ;, if, (, ntrits, ==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;]
[), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha]
[==, 0, ), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1]
[), {, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha]
[;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO]
[., getEntry, (, knew, ), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <]
[), ;, denom, =, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >]
[=, d1, *, d1, +, alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {]
[;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i]
[+, alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i]
[*, d1, +, alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (]
[+, alpha, *, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i]
[;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i]
[*, beta, ;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0]
[;, if, (, denom, <, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry]
[&&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[<, cauchy, &&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[&&, cauchy, >, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry]
[>, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, newPoint]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i]
[;, i, ++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint]
[<, n, ;, i, ++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), )]
[;, i, ++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint]
[), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (]
[++, ), {, newPoint, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry]
[;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, )]
[., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint]
[,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i]
[), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[., getEntry, (, i, ), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -]
[), ), ;, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =]
[., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, cauchy, =, ZERO]
[), ;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, cauchy, =, ZERO, ;, state]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break]
[), ;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq]
[., getEntry, (, i, ), ), ;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }]
[), ), ;, }, cauchy, =, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double]
[=, ZERO, ;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta]
[;, state, =, 230, ;, break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta, ;, scaden]
[=, 230, ;, break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO]
[;, break, ;, }, }, else, {, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[*, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[=, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[=, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, k, ==]
[;, k, <, npt, ;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double]
[;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;]
[<, npt, ;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =]
[;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;]
[), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int]
[++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (]
[), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm]
[==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m]
[), {, continue, ;, }, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =]
[;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[<, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1]
[++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *]
[;, hdiag, +=, d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final]
[., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint]
[,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k]
[), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;]
[+=, d1, *, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den]
[;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag]
[*, d1, ;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta]
[;, }, final, double, d2, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag]
[;, final, double, den, =, beta, *, hdiag, +, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int]
[., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d2, *, d2, ;, distsq, =]
[), ;, final, double, den, =, beta, *, hdiag, +, d2, *, d2, ;, distsq, =, ZERO, ;, for, (]
[;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[+, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[*, hdiag, +, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[+, d2, *, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[*, d2, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d3, =]
[;, j, <, n, ;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j]
[;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, .]
[<, n, ;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[;, j, ++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, .]
[), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j]
[++, ), {, final, double, d3, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =]
[-, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq]
[., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *, d3]
[,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *, d3, ;, }, final, double]
[), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =]
[;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =]
[., getEntry, (, j, ), ;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq, /, delsq]
[), ;, distsq, +=, d3, *, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp]
[+=, d3, *, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, .]
[;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[*, d3, ;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (]
[;, }, final, double, d4, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (]
[;, final, double, temp, =, Math, ., max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *]
[;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;]
[., max, (, ONE, ,, d4, *, d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden]
[,, d4, *, d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den]
[), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k]
[*, d4, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew]
[), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k]
[), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5]
[>, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final]
[*, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;]
[>, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final]
[), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5]
[=, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, .]
[;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, )]
[*, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[;, knew, =, k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, )]
[=, k, ;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq]
[;, denom, =, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math]
[=, den, ;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max]
[;, }, final, double, d5, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq]
[;, biglsq, =, Math, ., max, (, biglsq, ,, temp, *, (, d5, *, d5, ), ), ;, }, }]
[., getEntry, (, k, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, temp, *, (, d5, *, d5]
[), ;, biglsq, =, Math, ., max, (, biglsq, ,, temp, *, (, d5, *, d5, ), ), ;, }]
[=, Math, ., max, (, biglsq, ,, temp, *, (, d5, *, d5, ), ), ;, }, }, }, case]
[;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0, ;]
[., max, (, biglsq, ,, temp, *, (, d5, *, d5, ), ), ;, }, }, }, case, 360, :]
[,, temp, *, (, d5, *, d5, ), ), ;, }, }, }, case, 360, :, {, printState, (, 360]
[), ;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0]
[*, (, d5, *, d5, ), ), ;, }, }, }, case, 360, :, {, printState, (, 360, ), ;]
[), ;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =, 0]
[), ), ;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =]
[*, d5, ), ), ;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int]
[), ), ;, }, }, }, case, 360, :, {, printState, (, 360, ), ;, for, (, int, i, =]
[:, {, printState, (, 360, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3, =]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3]
[;, i, <, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, .]
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, .]
[), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i]
[++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (]
[;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, newPoint, ., getEntry, (, i, ), ;, final]
[[, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, newPoint, ., getEntry, (, i]
[], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, newPoint, ., getEntry, (, i, ), ;]
[;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, []
[+, newPoint, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, )]
[., getEntry, (, i, ), +, newPoint, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max]
[), +, newPoint, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4]
[;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, []
[., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final]
[), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound]
[;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (]
[., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry]
[,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math]
[), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min]
[;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, newPoint]
[[, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, .]
[., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, newPoint, ., getEntry]
[,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==]
[), ;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest]
[., min, (, d1, ,, d2, ), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, .]
[,, d2, ), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, )]
[), ), ;, if, (, newPoint, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {]
[), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry]
[==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], )]
[., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ]]
[), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry]
[., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }]
[), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, .]
[;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest]
[., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry, (, i, )]
[,, lowerBound, [, i, ], ), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry]
[), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[[, i, ], ), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i]
[], ), ;, }, if, (, newPoint, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), )]
[), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, computeObjectiveValue, (]
[==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], )]
[., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ]]
[), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, computeObjectiveValue, (]
[., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }]
[), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, computeObjectiveValue]
[;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, ), f]
[., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray]
[,, upperBound, [, i, ], ), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;]
[), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, )]
[[, i, ], ), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (]
[], ), ;, }, }, f, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize]
[=, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =, -, f, ;]
[;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {, fsave]
[), ;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {]
[., toArray, (, ), ), ;, if, (, !, isMinimize, ), f, =, -, f, ;, if, (, ntrits, ==]
[), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {, fsave, =, f, ;, state, =]
[), f, =, -, f, ;, if, (, ntrits, ==, -, 1, ), {, fsave, =, f, ;, state, =]
[=, -, f, ;, if, (, ntrits, ==, -, 1, ), {, fsave, =, f, ;, state, =, 720, ;]
[;, if, (, ntrits, ==, -, 1, ), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }]
[;, if, (, ntrits, ==, -, 1, ), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }]
[), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry]
[==, -, 1, ), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =]
[), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry]
[), {, fsave, =, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry]
[=, f, ;, state, =, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, )]
[;, state, =, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, double]
[=, 720, ;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =]
[;, break, ;, }, final, double, fopt, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =, ZERO, ;]
[;, double, vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, double, vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j]
[), ;, double, vquad, =, ZERO, ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j]
[;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, )]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, vquad, +=, trialStepPoint, .]
[;, j, <, n, ;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, .]
[;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, )]
[<, n, ;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (]
[;, j, ++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, )]
[), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (]
[++, ), {, vquad, +=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for]
[+=, trialStepPoint, ., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =, trialStepPoint]
[*, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i]
[., getEntry, (, j, ), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;]
[), *, gradientAtTrustRegionCenter, ., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =, trialStepPoint]
[., getEntry, (, j, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, double, temp, =]
[;, i, <=, j, ;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint]
[;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j]
[<=, j, ;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry]
[;, i, ++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j]
[), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;, if]
[++, ), {, double, temp, =, trialStepPoint, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;]
[;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih]
[*, trialStepPoint, ., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }]
[., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, j, ), ;, if, (, i, ==, j, ), {]
[), *, trialStepPoint, ., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;]
[;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih]
[., getEntry, (, j, ), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=]
[), ;, if, (, i, ==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (]
[), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;, ih, ++]
[==, j, ), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;]
[), {, temp, *=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;, ih, ++]
[*=, HALF, ;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;, ih, ++, ;, }, }]
[;, }, vquad, +=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;, ih, ++, ;, }, }, for, (]
[+=, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =]
[;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[*, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[., getEntry, (, ih, ), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;]
[), *, temp, ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final, double]
[++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, final]
[;, k, <, npt, ;, k, ++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;]
[;, k, ++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =]
[<, npt, ;, k, ++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double]
[;, k, ++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =]
[), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1]
[++, ), {, final, double, d1, =, work2, ., getEntry, (, k, ), ;, final, double, d2, =, d1, *]
[;, final, double, d2, =, d1, *, d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *]
[., getEntry, (, k, ), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, .]
[), ;, final, double, d2, =, d1, *, d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, )]
[;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f]
[*, d1, ;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff]
[;, vquad, +=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f]
[+=, HALF, *, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f, -, fopt]
[;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;]
[*, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =]
[*, modelSecondDerivativesParameters, ., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad]
[*, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =]
[., getEntry, (, k, ), *, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc]
[), *, d2, ;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb]
[;, }, final, double, diff, =, f, -, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;]
[;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (]
[-, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;]
[-, fopt, -, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff]
[-, vquad, ;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;]
[;, diffc, =, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (]
[=, diffb, ;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (, dnorm, >]
[;, diffb, =, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (, dnorm, >, rho, )]
[=, diffa, ;, diffa, =, Math, ., abs, (, diff, ), ;, if, (, dnorm, >, rho, ), {, nfsav]
[;, diffa, =, Math, ., abs, (, diff, ), ;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations]
[=, Math, ., abs, (, diff, ), ;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations, (, )]
[;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0]
[., abs, (, diff, ), ;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }]
[), ;, if, (, dnorm, >, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >]
[), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=]
[>, rho, ), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (]
[), {, nfsav, =, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=]
[=, getEvaluations, (, ), ;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=, ZERO, ), {]
[;, }, if, (, ntrits, >, 0, ), {, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (]
[), {, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;]
[>, 0, ), {, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad]
[), {, if, (, vquad, >=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f, -, fopt]
[>=, ZERO, ), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f]
[), {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f, -, fopt]
[;, }, ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;]
[,, vquad, ), ;, }, ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF]
[., TRUST_REGION_STEP_FAILED, ,, vquad, ), ;, }, ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta]
[), ;, }, ratio, =, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta]
[=, (, f, -, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio]
[;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, .]
[/, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =]
[), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta]
[-, fopt, ), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, )]
[), /, vquad, ;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta]
[;, final, double, hDelta, =, HALF, *, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, .]
[;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }]
[*, delta, ;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, )]
[;, if, (, ratio, <=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }]
[), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7]
[<=, ONE_OVER_TEN, ), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio]
[), {, delta, =, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7]
[=, Math, ., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {, delta]
[;, }, else, if, (, ratio, <=, .7, ), {, delta, =, Math, ., max, (, hDelta, ,, dnorm, )]
[., min, (, hDelta, ,, dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {, delta, =, Math]
[,, dnorm, ), ;, }, else, if, (, ratio, <=, .7, ), {, delta, =, Math, ., max, (, hDelta]
[), ;, }, else, if, (, ratio, <=, .7, ), {, delta, =, Math, ., max, (, hDelta, ,, dnorm]
[), {, delta, =, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, .]
[<=, .7, ), {, delta, =, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =]
[), {, delta, =, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, .]
[=, Math, ., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, ., max, (, hDelta]
[;, }, else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (]
[., max, (, hDelta, ,, dnorm, ), ;, }, else, {, delta, =, Math, ., max, (, hDelta, ,, 2]
[,, dnorm, ), ;, }, else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;]
[), ;, }, else, {, delta, =, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if]
[=, Math, ., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5]
[;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if, (, f, <]
[., max, (, hDelta, ,, 2, *, dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5, ), {]
[,, 2, *, dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;]
[), ;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if, (, f]
[*, dnorm, ), ;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if]
[), ;, }, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if, (, f]
[), {, delta, =, rho, ;, }, if, (, f, <, fopt, ), {, final, int, ksav, =, knew, ;]
[<=, rho, *, 1.5, ), {, delta, =, rho, ;, }, if, (, f, <, fopt, ), {, final, int]
[), {, delta, =, rho, ;, }, if, (, f, <, fopt, ), {, final, int, ksav, =, knew, ;]
[*, 1.5, ), {, delta, =, rho, ;, }, if, (, f, <, fopt, ), {, final, int, ksav, =]
[), {, delta, =, rho, ;, }, if, (, f, <, fopt, ), {, final, int, ksav, =, knew, ;]
[=, rho, ;, }, if, (, f, <, fopt, ), {, final, int, ksav, =, knew, ;, final, double, densav]
[;, }, if, (, f, <, fopt, ), {, final, int, ksav, =, knew, ;, final, double, densav, =, denom]
[), {, final, int, ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =, delta, *]
[<, fopt, ), {, final, int, ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =]
[), {, final, int, ksav, =, knew, ;, final, double, densav, =, denom, ;, final, double, delsq, =, delta, *]
[;, final, double, densav, =, denom, ;, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq]
[;, final, double, delsq, =, delta, *, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[*, delta, ;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =]
[;, scaden, =, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;]
[=, ZERO, ;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[;, biglsq, =, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[=, ZERO, ;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[;, knew, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[=, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, hdiag]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, hdiag, =, ZERO]
[;, k, <, npt, ;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0]
[;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm]
[<, npt, ;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m]
[;, k, ++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm]
[), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++]
[++, ), {, double, hdiag, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =]
[;, m, <, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[<, nptm, ;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;]
[;, m, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=]
[), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1]
[++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *]
[;, hdiag, +=, d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final]
[., getEntry, (, k, ,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint]
[,, m, ), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k]
[), ;, hdiag, +=, d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;]
[+=, d1, *, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den]
[;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag]
[*, d1, ;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta]
[;, }, final, double, d1, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag]
[;, final, double, den, =, beta, *, hdiag, +, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int]
[., getEntry, (, k, ), ;, final, double, den, =, beta, *, hdiag, +, d1, *, d1, ;, distsq, =]
[), ;, final, double, den, =, beta, *, hdiag, +, d1, *, d1, ;, distsq, =, ZERO, ;, for, (]
[;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[+, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[*, hdiag, +, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <]
[+, d1, *, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[*, d1, ;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, distsq, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d2, =]
[;, j, <, n, ;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j]
[;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, .]
[<, n, ;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[;, j, ++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, .]
[), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (, j]
[++, ), {, final, double, d2, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (]
[;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =]
[-, newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq]
[., getEntry, (, k, ,, j, ), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *, d2]
[,, j, ), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *, d2, ;, }, final, double]
[), -, newPoint, ., getEntry, (, j, ), ;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =]
[;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =]
[., getEntry, (, j, ), ;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq, /, delsq]
[), ;, distsq, +=, d2, *, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp]
[+=, d2, *, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, .]
[;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[*, d2, ;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (]
[;, }, final, double, d3, =, distsq, /, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,]
[;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *]
[/, delsq, ;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (]
[;, final, double, temp, =, Math, ., max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *]
[;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;]
[., max, (, ONE, ,, d3, *, d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden]
[,, d3, *, d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den]
[), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k]
[*, d3, ), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew]
[), ;, if, (, temp, *, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k]
[), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4]
[>, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final]
[*, den, >, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;]
[>, scaden, ), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final]
[), {, scaden, =, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4]
[=, temp, *, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, .]
[;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, )]
[*, den, ;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (]
[;, knew, =, k, ;, denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, )]
[=, k, ;, denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final]
[;, denom, =, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5]
[=, den, ;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =, temp]
[;, }, final, double, d4, =, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (]
[;, final, double, d5, =, temp, *, (, d4, *, d4, ), ;, biglsq, =, Math, ., max, (, biglsq]
[., getEntry, (, k, ), ;, final, double, d5, =, temp, *, (, d4, *, d4, ), ;, biglsq, =]
[), ;, final, double, d5, =, temp, *, (, d4, *, d4, ), ;, biglsq, =, Math, ., max, (]
[;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq]
[*, (, d4, *, d4, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if]
[;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq]
[), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *]
[*, d4, ), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=]
[), ;, biglsq, =, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *]
[=, Math, ., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {]
[;, }, if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;, }]
[., max, (, biglsq, ,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =]
[,, d5, ), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =]
[), ;, }, if, (, scaden, <=, HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;]
[), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew]
[<=, HALF, *, biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta]
[), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew]
[*, biglsq, ), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom]
[), {, knew, =, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew]
[=, ksav, ;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew, ), ;, ih]
[;, denom, =, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew, ), ;, ih, =, 0]
[=, densav, ;, }, }, }, update, (, beta, ,, denom, ,, knew, ), ;, ih, =, 0, ;, final]
[;, }, }, }, update, (, beta, ,, denom, ,, knew, ), ;, ih, =, 0, ;, final, double, pqold]
[;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (]
[,, denom, ,, knew, ), ;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, )]
[,, knew, ), ;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;, modelSecondDerivativesParameters]
[), ;, ih, =, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry]
[=, 0, ;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,]
[;, final, double, pqold, =, modelSecondDerivativesParameters, ., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, )]
[;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <, n]
[., getEntry, (, knew, ), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =]
[), ;, modelSecondDerivativesParameters, ., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, temp, =]
[., setEntry, (, knew, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, temp]
[;, i, <, n, ;, i, ++, ), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew]
[;, i, ++, ), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;]
[<, n, ;, i, ++, ), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i]
[;, i, ++, ), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;]
[), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int]
[++, ), {, final, double, temp, =, pqold, *, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (]
[*, interpolationPoints, ., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i]
[;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (]
[., getEntry, (, knew, ,, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j]
[,, i, ), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues]
[), ;, for, (, int, j, =, 0, ;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry]
[;, j, <=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih]
[;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *]
[<=, i, ;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +]
[;, j, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *]
[), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry]
[++, ), {, modelSecondDerivativesValues, ., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, .]
[;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, )]
[., setEntry, (, ih, ,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry, (, knew, ,]
[,, modelSecondDerivativesValues, ., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;]
[), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++]
[+, temp, *, interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;, ih, ++, ;, }, }, for, (]
[., getEntry, (, ih, ), +, temp, *, interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;, ih, ++]
[), +, temp, *, interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;, ih, ++, ;, }, }, for]
[), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++]
[*, interpolationPoints, ., getEntry, (, knew, ,, j, ), ), ;, ih, ++, ;, }, }, for, (, int, m]
[), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++]
[., getEntry, (, knew, ,, j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0]
[,, j, ), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm]
[), ), ;, ih, ++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m]
[;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final, double]
[++, ;, }, }, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, final]
[;, m, <, nptm, ;, m, ++, ), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew]
[;, m, ++, ), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;]
[<, nptm, ;, m, ++, ), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m]
[;, m, ++, ), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;]
[), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int]
[++, ), {, final, double, temp, =, diff, *, zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (]
[*, zMatrix, ., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =, 0, ;, k, <, npt]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (]
[., getEntry, (, knew, ,, m, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[,, m, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry]
[;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k]
[;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *]
[<, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +]
[;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *]
[), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry]
[++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *, zMatrix, .]
[;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;, i]
[., setEntry, (, k, ,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry, (, k, ,]
[,, modelSecondDerivativesParameters, ., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;]
[), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;]
[+, temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew]
[., getEntry, (, k, ), +, temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }]
[), +, temp, *, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (]
[), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f]
[), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;]
[., getEntry, (, k, ,, m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;]
[,, m, ), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i]
[), ), ;, }, }, fAtInterpolationPoints, ., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (]
[., setEntry, (, knew, ,, f, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[,, f, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, interpolationPoints]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry]
[;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), )]
[<, n, ;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i]
[;, i, ++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), )]
[), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1, .]
[++, ), {, interpolationPoints, ., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1]
[;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (]
[., setEntry, (, knew, ,, i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i]
[,, i, ,, newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry]
[,, newPoint, ., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew]
[), ;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for]
[., getEntry, (, i, ), ), ;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i]
[), ), ;, work1, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }]
[;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, suma, =]
[., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k]
[,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k]
[), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, suma]
[., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt]
[,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[;, k, <, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0]
[;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm]
[<, npt, ;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m]
[;, k, ++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm]
[), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++]
[++, ), {, double, suma, =, ZERO, ;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m]
[;, for, (, int, m, =, 0, ;, m, <, nptm, ;, m, ++, ), {, suma, +=, zMatrix, .]
[;, m, <, nptm, ;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *]
[;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (]
[<, nptm, ;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, .]
[;, m, ++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (]
[), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (, k, ,, m]
[++, ), {, suma, +=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (, k, ,]
[+=, zMatrix, ., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ;, }]
[;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[*, zMatrix, ., getEntry, (, k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j]
[., getEntry, (, knew, ,, m, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ;, }, double, sumb]
[,, m, ), *, zMatrix, ., getEntry, (, k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for]
[), *, zMatrix, ., getEntry, (, k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int]
[;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[., getEntry, (, k, ,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0]
[,, m, ), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[), ;, }, double, sumb, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sumb, +=, interpolationPoints, .]
[;, j, <, n, ;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[<, n, ;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, .]
[;, j, ++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[++, ), {, sumb, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double]
[;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <, n]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double, temp, =]
[,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double, temp, =, suma, *, sumb, ;]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (]
[;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <, n]
[., getEntry, (, j, ), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =]
[), ;, }, final, double, temp, =, suma, *, sumb, ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (]
[*, sumb, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i]
[;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *]
[<, n, ;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +]
[;, i, ++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *]
[), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry]
[++, ), {, work1, ., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *, interpolationPoints, .]
[;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, .]
[., setEntry, (, i, ,, work1, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,]
[,, work1, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter]
[+, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i, =]
[., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }]
[), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;]
[), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter]
[., getEntry, (, k, ,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[,, i, ), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[), ), ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *, work1, ., getEntry]
[++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *, work1, .]
[;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *, work1, ., getEntry, (, i, )]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if]
[), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =]
[+, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex]
[., getEntry, (, i, ), +, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (, f]
[), +, diff, *, work1, ., getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {]
[), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =]
[*, work1, ., getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew]
[), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =]
[., getEntry, (, i, ), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq]
[), ), ;, }, if, (, f, <, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih]
[), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0]
[<, fopt, ), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j]
[), {, trustRegionCenterInterpolationPointIndex, =, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0]
[=, knew, ;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[;, xoptsq, =, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[=, ZERO, ;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {]
[=, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, trustRegionCenterOffset, .]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (]
[;, j, <, n, ;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j]
[;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final]
[<, n, ;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), )]
[;, j, ++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final]
[), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1, =]
[++, ), {, trustRegionCenterOffset, ., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1]
[;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (]
[., setEntry, (, j, ,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry]
[,, newPoint, ., getEntry, (, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;, for]
[., getEntry, (, j, ), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=]
[), ), ;, final, double, d1, =, trustRegionCenterOffset, ., getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;]
[;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++]
[., getEntry, (, j, ), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;, i]
[), ;, xoptsq, +=, d1, *, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i]
[+=, d1, *, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <]
[*, d1, ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <]
[;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, .]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,]
[;, i, ++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, .]
[), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j]
[++, ), {, if, (, i, <, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[<, j, ), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[., setEntry, (, j, ,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint]
[,, gradientAtTrustRegionCenter, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[+, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry]
[., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), )]
[), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, .]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[*, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (]
[., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i]
[), *, trialStepPoint, ., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry]
[), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[., getEntry, (, i, ), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, )]
[), ), ;, }, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry]
[;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, j]
[), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[+, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;, }]
[., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, j, ), )]
[), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;]
[), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[*, trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0]
[., getEntry, (, ih, ), *, trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for]
[), *, trialStepPoint, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =]
[), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k]
[), ), ;, ih, ++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, temp]
[++, ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[;, k, <, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0]
[;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[<, npt, ;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j]
[;, k, ++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[++, ), {, double, temp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, .]
[;, j, <, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (]
[<, n, ;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, .]
[;, j, ++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (]
[), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;]
[++, ), {, temp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=]
[;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[*, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (]
[., getEntry, (, k, ,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, .]
[,, j, ), *, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, )]
[), *, trialStepPoint, ., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for]
[;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[., getEntry, (, j, ), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i]
[), ;, }, temp, *=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i]
[*=, modelSecondDerivativesParameters, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[<, n, ;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry]
[++, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, .]
[;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k, <]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;]
[), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k]
[+, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, ntrits, >]
[., getEntry, (, i, ), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }]
[), +, temp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, ntrits]
[), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, ntrits, >, 0, )]
[), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;, k]
[., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, ntrits, >, 0, ), {, for]
[,, i, ), ), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =]
[), ), ;, }, }, }, if, (, ntrits, >, 0, ), {, for, (, int, k, =, 0, ;]
[), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry]
[>, 0, ), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint]
[), {, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry]
[;, k, <, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k]
[;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, .]
[<, npt, ;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -]
[;, k, ++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, .]
[), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex]
[++, ), {, lagrangeValuesAtNewPoint, ., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (]
[;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j, <]
[., setEntry, (, k, ,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;]
[,, fAtInterpolationPoints, ., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (]
[), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j]
[-, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for]
[., getEntry, (, k, ), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (, k, ,]
[), -, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }]
[), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int]
[), ), ;, work3, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;]
[;, }, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, double, sum, =]
[., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j, <, nptm, ;]
[,, ZERO, ), ;, }, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {]
[), ;, }, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, double, sum]
[;, j, <, nptm, ;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0]
[;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt]
[<, nptm, ;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k]
[;, j, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt]
[), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, .]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *]
[;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (]
[<, npt, ;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, .]
[;, k, ++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (]
[), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;]
[++, ), {, sum, +=, zMatrix, ., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, )]
[+=, zMatrix, ., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (]
[;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[., getEntry, (, k, ,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k]
[,, j, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;, k]
[), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt]
[;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry]
[., getEntry, (, k, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, work3, .]
[;, k, <, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k]
[;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *]
[<, npt, ;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +]
[;, k, ++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *]
[), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry]
[++, ), {, work3, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *, zMatrix, .]
[;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, sum]
[., setEntry, (, k, ,, work3, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,]
[,, work3, ., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;]
[), ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[+, sum, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k, =]
[., getEntry, (, k, ), +, sum, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }]
[), +, sum, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k]
[), ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[*, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;]
[), ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[., getEntry, (, k, ,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;, k, <]
[,, j, ), ), ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[), ), ;, }, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[;, k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0]
[;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[<, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j]
[;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, sum, +=, interpolationPoints, .]
[;, j, <, n, ;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[<, n, ;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, .]
[;, j, ++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[++, ), {, sum, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, .]
[;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (]
[,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,, work3, .]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (]
[;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (]
[., getEntry, (, j, ), ;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), )]
[), ;, }, work2, ., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry]
[;, work3, ., setEntry, (, k, ,, sum, *, work3, ., getEntry, (, k, ), ), ;, }, double, gqsq]
[., setEntry, (, k, ,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,, sum]
[,, work3, ., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,, sum, *, work3, ., getEntry]
[), ;, work3, ., setEntry, (, k, ,, sum, *, work3, ., getEntry, (, k, ), ), ;, }, double]
[., getEntry, (, k, ), ), ;, work3, ., setEntry, (, k, ,, sum, *, work3, ., getEntry, (, k]
[), ), ;, work3, ., setEntry, (, k, ,, sum, *, work3, ., getEntry, (, k, ), ), ;, }]
[;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;, i]
[., setEntry, (, k, ,, sum, *, work3, ., getEntry, (, k, ), ), ;, }, double, gqsq, =, ZERO]
[,, sum, *, work3, ., getEntry, (, k, ), ), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =]
[), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[*, work3, ., getEntry, (, k, ), ), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;]
[), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[., getEntry, (, k, ), ), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (]
[), ), ;, }, double, gqsq, =, ZERO, ;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0]
[;, double, gisq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, double, sum, =, ZERO]
[;, i, <, n, ;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0]
[;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt]
[<, n, ;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k]
[;, i, ++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt]
[), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[++, ), {, double, sum, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, sum, +=, bMatrix, .]
[;, k, <, npt, ;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *]
[;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (]
[<, npt, ;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, .]
[;, k, ++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (]
[), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +]
[++, ), {, sum, +=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, )]
[+=, bMatrix, ., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry]
[;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, final]
[+, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry]
[., getEntry, (, k, ,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k]
[,, i, ), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *]
[), *, lagrangeValuesAtNewPoint, ., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, .]
[+, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (]
[., getEntry, (, k, ), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k]
[), +, interpolationPoints, ., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if]
[;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, final]
[*, work3, ., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, .]
[., getEntry, (, k, ,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, .]
[,, i, ), *, work3, ., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, )]
[), *, work3, ., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference]
[;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, final]
[., getEntry, (, k, ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (]
[), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {]
[), {, final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;]
[==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter]
[., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, .]
[), ==, lowerDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., min, (, ZERO, ,]
[), {, final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;]
[., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry]
[), ), {, final, double, d1, =, Math, ., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), )]
[;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;]
[., min, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math]
[), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, )]
[., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., min]
[), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum]
[+=, d1, *, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=]
[;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;]
[*, d1, ;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *]
[;, final, double, d2, =, Math, ., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;]
[;, gisq, +=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, .]
[., min, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, .]
[,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, )]
[), ;, gisq, +=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference]
[+=, d2, *, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (]
[;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[*, d2, ;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, )]
[;, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[), {, final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;]
[==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter]
[., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, .]
[), ==, upperDifference, ., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., max, (, ZERO, ,]
[), {, final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;]
[., getEntry, (, i, ), ), {, final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry]
[), ), {, final, double, d1, =, Math, ., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), )]
[;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;]
[., max, (, ZERO, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math]
[), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, )]
[., getEntry, (, i, ), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., max]
[), ), ;, gqsq, +=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum]
[+=, d1, *, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;, gisq, +=]
[;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;]
[*, d1, ;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *]
[;, final, double, d2, =, Math, ., max, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;]
[;, gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, )]
[., max, (, ZERO, ,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1]
[,, sum, ), ;, gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry]
[), ;, gisq, +=, d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i]
[+=, d2, *, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq]
[;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1]
[*, d2, ;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1]
[;, }, else, {, final, double, d1, =, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1]
[;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +]
[., getEntry, (, i, ), ;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint]
[), ;, gqsq, +=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt]
[+=, d1, *, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,]
[;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }]
[*, d1, ;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, )]
[;, gisq, +=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }]
[+=, sum, *, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest]
[;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq]
[*, sum, ;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if]
[;, }, lagrangeValuesAtNewPoint, ., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq]
[;, }, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0, ;, }, if]
[., setEntry, (, npt, +, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *]
[,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0]
[+, i, ,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest]
[,, sum, ), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0]
[), ;, }, ++, itest, ;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0, ;, }]
[;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0, ;, }, if, (, itest, >=, 3]
[;, if, (, gqsq, <, TEN, *, gisq, ), {, itest, =, 0, ;, }, if, (, itest, >=, 3]
[), {, itest, =, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =, 0]
[<, TEN, *, gisq, ), {, itest, =, 0, ;, }, if, (, itest, >=, 3, ), {, for, (]
[), {, itest, =, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =, 0]
[*, gisq, ), {, itest, =, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i]
[), {, itest, =, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =, 0]
[=, 0, ;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =, 0, ,, max, =]
[;, }, if, (, itest, >=, 3, ), {, for, (, int, i, =, 0, ,, max, =, Math, .]
[), {, for, (, int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh, ), ;]
[>=, 3, ), {, for, (, int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh]
[), {, for, (, int, i, =, 0, ,, max, =, Math, ., max, (, npt, ,, nh, ), ;]
[,, max, =, Math, ., max, (, npt, ,, nh, ), ;, i, <, max, ;, i, ++, ), {]
[;, i, <, max, ;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (]
[., max, (, npt, ,, nh, ), ;, i, <, max, ;, i, ++, ), {, if, (, i, <]
[,, nh, ), ;, i, <, max, ;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter]
[), ;, i, <, max, ;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry]
[;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, .]
[<, max, ;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,]
[;, i, ++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, .]
[), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt]
[++, ), {, if, (, i, <, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if]
[<, n, ), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if]
[;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (, i]
[., setEntry, (, i, ,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if, (, i, <]
[,, lagrangeValuesAtNewPoint, ., getEntry, (, npt, +, i, ), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters]
[), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (]
[., getEntry, (, npt, +, i, ), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry]
[), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry]
[+, i, ), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2]
[), ), ;, }, if, (, i, <, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry]
[), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (, i]
[<, npt, ), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if]
[), {, modelSecondDerivativesParameters, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (, i]
[;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, itest]
[., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, if, (, i, <, nh, )]
[,, work2, ., getEntry, (, i, ), ), ;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry]
[), ;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }]
[., getEntry, (, i, ), ), ;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i]
[), ), ;, }, if, (, i, <, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;]
[), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if]
[<, nh, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }]
[), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if]
[;, }, itest, =, 0, ;, }, }, }, if, (, ntrits, ==, 0, ), {, state, =, 60, ;]
[., setEntry, (, i, ,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if, (, ntrits, ==]
[,, ZERO, ), ;, }, itest, =, 0, ;, }, }, }, if, (, ntrits, ==, 0, ), {, state]
[), ;, }, itest, =, 0, ;, }, }, }, if, (, ntrits, ==, 0, ), {, state, =, 60]
[=, 0, ;, }, }, }, if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }]
[;, }, }, }, if, (, ntrits, ==, 0, ), {, state, =, 60, ;, break, ;, }, if, (]
[), {, state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {]
[==, 0, ), {, state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *, vquad]
[), {, state, =, 60, ;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {]
[=, 60, ;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {, state, =, 60]
[;, break, ;, }, if, (, f, <=, fopt, +, ONE_OVER_TEN, *, vquad, ), {, state, =, 60, ;, break]
[), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2]
[<=, fopt, +, ONE_OVER_TEN, *, vquad, ), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO]
[), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2]
[+, ONE_OVER_TEN, *, vquad, ), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta]
[), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2]
[*, vquad, ), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final]
[), {, state, =, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2]
[=, 60, ;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *]
[;, break, ;, }, final, double, d1, =, TWO, *, delta, ;, final, double, d2, =, TEN, *, rho, ;]
[;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (, d1, *, d1, ,, d2]
[*, delta, ;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (, d1, *, d1]
[;, final, double, d2, =, TEN, *, rho, ;, distsq, =, Math, ., max, (, d1, *, d1, ,, d2]
[;, distsq, =, Math, ., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case, 650, :]
[*, rho, ;, distsq, =, Math, ., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case]
[;, distsq, =, Math, ., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case, 650, :]
[=, Math, ., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case, 650, :, {, printState]
[;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int, k]
[., max, (, d1, *, d1, ,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (, 650]
[,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =, -, 1]
[*, d1, ,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =]
[,, d2, *, d2, ), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =, -, 1]
[), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int]
[*, d2, ), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for]
[), ;, }, case, 650, :, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int]
[:, {, printState, (, 650, ), ;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;, k]
[;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[), ;, knew, =, -, 1, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[=, -, 1, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO]
[;, k, <, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0]
[;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[<, npt, ;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j]
[;, k, ++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[++, ), {, double, sum, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, double, d1, =]
[;, j, <, n, ;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j]
[;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, .]
[<, n, ;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -]
[;, j, ++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, .]
[), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j]
[++, ), {, final, double, d1, =, interpolationPoints, ., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq]
[-, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq]
[., getEntry, (, k, ,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *, d1]
[,, j, ), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (]
[), -, trustRegionCenterOffset, ., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >]
[;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq]
[., getEntry, (, j, ), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {]
[), ;, sum, +=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;]
[+=, d1, *, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq, =, sum]
[;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if]
[*, d1, ;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq, =, sum, ;, }]
[;, }, if, (, sum, >, distsq, ), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if]
[), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if, (, knew, >=, 0, ), {, final]
[>, distsq, ), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if, (, knew, >=, 0, )]
[), {, knew, =, k, ;, distsq, =, sum, ;, }, }, if, (, knew, >=, 0, ), {, final]
[=, k, ;, distsq, =, sum, ;, }, }, if, (, knew, >=, 0, ), {, final, double, dist, =]
[;, distsq, =, sum, ;, }, }, if, (, knew, >=, 0, ), {, final, double, dist, =, Math, .]
[=, sum, ;, }, }, if, (, knew, >=, 0, ), {, final, double, dist, =, Math, ., sqrt, (]
[;, }, }, if, (, knew, >=, 0, ), {, final, double, dist, =, Math, ., sqrt, (, distsq, )]
[), {, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, )]
[>=, 0, ), {, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -]
[), {, final, double, dist, =, Math, ., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, )]
[;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF]
[., sqrt, (, distsq, ), ;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (]
[), ;, if, (, ntrits, ==, -, 1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,]
[), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta]
[==, -, 1, ), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;]
[), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta]
[), {, delta, =, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta]
[=, Math, ., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *]
[;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;]
[., min, (, ONE_OVER_TEN, *, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *, 1.5, )]
[,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }]
[*, delta, ,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho]
[,, HALF, *, dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }]
[), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =, 0]
[*, dist, ), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits]
[), ;, if, (, delta, <=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =, 0]
[), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (]
[<=, rho, *, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =]
[), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (]
[*, 1.5, ), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, .]
[), {, delta, =, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (]
[=, rho, ;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist]
[;, }, }, ntrits, =, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta]
[=, 0, ;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =]
[;, final, double, d1, =, Math, ., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =, Math, .]
[;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =]
[., min, (, ONE_OVER_TEN, *, dist, ,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, )]
[,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt]
[*, dist, ,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt]
[,, delta, ), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt]
[), ;, adelt, =, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state]
[=, Math, ., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;]
[;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1]
[., max, (, d1, ,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;]
[,, rho, ), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits]
[), ;, dsq, =, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -]
[=, adelt, *, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {]
[;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 680, ;]
[*, adelt, ;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =]
[;, state, =, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 680, ;]
[=, 90, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 680, ;, break, ;]
[;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 680, ;, break, ;, }, if]
[), {, state, =, 680, ;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;]
[==, -, 1, ), {, state, =, 680, ;, break, ;, }, if, (, ratio, >, ZERO, ), {, state]
[), {, state, =, 680, ;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;]
[), {, state, =, 680, ;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;]
[=, 680, ;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;, break, ;, }]
[;, break, ;, }, if, (, ratio, >, ZERO, ), {, state, =, 60, ;, break, ;, }, if, (]
[), {, state, =, 60, ;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm, ), >]
[>, ZERO, ), {, state, =, 60, ;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm]
[), {, state, =, 60, ;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm, ), >]
[=, 60, ;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm, ), >, rho, ), {]
[;, break, ;, }, if, (, Math, ., max, (, delta, ,, dnorm, ), >, rho, ), {, state, =]
[), {, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if]
[>, rho, ), {, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680, )]
[., max, (, delta, ,, dnorm, ), >, rho, ), {, state, =, 60, ;, break, ;, }, }, case]
[,, dnorm, ), >, rho, ), {, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState]
[), >, rho, ), {, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680]
[), {, state, =, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if]
[=, 60, ;, break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if, (, rho, >]
[;, break, ;, }, }, case, 680, :, {, printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, )]
[:, {, printState, (, 680, ), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;]
[;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;]
[), ;, if, (, rho, >, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius]
[), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, )]
[>, stoppingTrustRegionRadius, ), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=]
[), {, delta, =, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, )]
[=, HALF, *, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =]
[;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else]
[*, rho, ;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;]
[;, ratio, =, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else]
[=, rho, /, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (]
[;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, )]
[/, stoppingTrustRegionRadius, ;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=]
[;, if, (, ratio, <=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, )]
[), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt]
[<=, SIXTEEN, ), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math]
[), {, rho, =, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt]
[=, stoppingTrustRegionRadius, ;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt, (, ratio, )]
[;, }, else, if, (, ratio, <=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius]
[), {, rho, =, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;]
[<=, TWO_HUNDRED_FIFTY, ), {, rho, =, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=]
[), {, rho, =, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;]
[=, Math, ., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =]
[;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;]
[*, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho]
[., sqrt, (, ratio, ), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, .]
[), *, stoppingTrustRegionRadius, ;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,]
[;, }, else, {, rho, *=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;]
[*=, ONE_OVER_TEN, ;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;, nfsav]
[;, }, delta, =, Math, ., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;, nfsav, =, getEvaluations]
[=, Math, ., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;]
[;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (]
[., max, (, delta, ,, rho, ), ;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =]
[,, rho, ), ;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;]
[), ;, ntrits, =, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if]
[=, 0, ;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==]
[;, nfsav, =, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==, -, 1]
[=, getEvaluations, (, ), ;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {]
[;, state, =, 60, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 360, ;]
[=, 60, ;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 360, ;, break, ;]
[;, break, ;, }, if, (, ntrits, ==, -, 1, ), {, state, =, 360, ;, break, ;, }, }]
[), {, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if]
[==, -, 1, ), {, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720]
[), {, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if]
[), {, state, =, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if]
[=, 360, ;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if, (, fAtInterpolationPoints, .]
[;, break, ;, }, }, case, 720, :, {, printState, (, 720, ), ;, if, (, fAtInterpolationPoints, ., getEntry, (]
[:, {, printState, (, 720, ), ;, if, (, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for]
[;, if, (, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0, ;]
[), ;, if, (, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3]
[<=, fsave, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), <=, fsave, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[), <=, fsave, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, d3]
[;, i, <, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double]
[;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, .]
[<, n, ;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =]
[;, i, ++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, .]
[), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i]
[++, ), {, final, double, d3, =, lowerBound, [, i, ], ;, final, double, d4, =, originShift, ., getEntry, (]
[;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final]
[[, i, ], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i]
[], ;, final, double, d4, =, originShift, ., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;]
[;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, []
[+, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, )]
[., getEntry, (, i, ), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max]
[), +, trustRegionCenterOffset, ., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4]
[;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, []
[., getEntry, (, i, ), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final]
[), ;, final, double, d1, =, Math, ., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound]
[;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (]
[., max, (, d3, ,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry]
[,, d4, ), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math]
[), ;, final, double, d2, =, upperBound, [, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min]
[;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset]
[[, i, ], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;]
[], ;, currentBest, ., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (]
[;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, .]
[., setEntry, (, i, ,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry]
[,, Math, ., min, (, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==]
[), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest]
[., min, (, d1, ,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, .]
[,, d2, ), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, )]
[), ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {]
[), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry]
[==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], )]
[., getEntry, (, i, ), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[), ==, lowerDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ]]
[), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry]
[., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }]
[), ), {, currentBest, ., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, .]
[;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest]
[., setEntry, (, i, ,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, )]
[,, lowerBound, [, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry]
[), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {]
[[, i, ], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i]
[], ), ;, }, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), )]
[), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, fAtInterpolationPoints, .]
[==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], )]
[., getEntry, (, i, ), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,]
[), ==, upperDifference, ., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ]]
[), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, fAtInterpolationPoints, .]
[., getEntry, (, i, ), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }]
[), ), {, currentBest, ., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, fAtInterpolationPoints]
[;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :, {]
[., setEntry, (, i, ,, upperBound, [, i, ], ), ;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex]
[,, upperBound, [, i, ], ), ;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return]
[), ;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :]
[[, i, ], ), ;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;]
[], ), ;, }, }, f, =, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default]
[=, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :, {, throw, new, MathIllegalStateException, (]
[;, }, return, f, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,, "bobyqb", ), ;]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ;, }, return, f, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, .]
[), ;, }, return, f, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,, "bobyqb", )]
[;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,, "bobyqb", ), ;, }, }, }, private]
[;, }, }, }, private, double, [, ], altmov, (, int, knew, ,, double, adelt, ), {, printMethod, (, )]
[,, "bobyqb", ), ;, }, }, }, private, double, [, ], altmov, (, int, knew, ,, double, adelt, ), {]
[., SIMPLE_MESSAGE, ,, "bobyqb", ), ;, }, }, }, private, double, [, ], altmov, (, int, knew, ,, double, adelt]
[), ;, }, }, }, private, double, [, ], altmov, (, int, knew, ,, double, adelt, ), {, printMethod, (]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, ArrayRealVector, glag]
[;, final, int, npt, =, numberOfInterpolationPoints, ;, final, ArrayRealVector, glag, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hcol]
[., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, ArrayRealVector, glag, =, new, ArrayRealVector, (, n, )]
[;, final, ArrayRealVector, glag, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, hcol, =, new, ArrayRealVector, (, npt, )]
[;, final, ArrayRealVector, hcol, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, )]
[), ;, final, ArrayRealVector, hcol, =, new, ArrayRealVector, (, npt, ), ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n]
[;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n, )]
[), ;, final, ArrayRealVector, work1, =, new, ArrayRealVector, (, n, ), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n]
[;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;, k, <]
[), ;, final, ArrayRealVector, work2, =, new, ArrayRealVector, (, n, ), ;, for, (, int, k, =, 0, ;, k]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry]
[;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for]
[;, k, ++, ), {, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =]
[<, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int]
[;, k, ++, ), {, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =]
[), {, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max]
[++, ), {, hcol, ., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,]
[;, }, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;, j, <, max]
[., setEntry, (, k, ,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -]
[,, ZERO, ), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;]
[), ;, }, for, (, int, j, =, 0, ,, max, =, npt, -, n, -, 1, ;, j, <]
[,, max, =, npt, -, n, -, 1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp]
[;, j, <, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j]
[-, 1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew]
[-, n, -, 1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry]
[-, 1, ;, j, <, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew]
[;, j, <, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j]
[;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (]
[<, max, ;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;]
[;, j, ++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (]
[), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =]
[++, ), {, final, double, tmp, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, for, (, int, k]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (]
[., getEntry, (, knew, ,, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[,, j, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry]
[;, k, <, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k]
[;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *]
[<, npt, ;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +]
[;, k, ++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *]
[), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *, zMatrix, ., getEntry]
[++, ), {, hcol, ., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *, zMatrix, .]
[;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =, HALF, *]
[., setEntry, (, k, ,, hcol, ., getEntry, (, k, ), +, tmp, *, zMatrix, ., getEntry, (, k, ,]
[,, hcol, ., getEntry, (, k, ), +, tmp, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;]
[), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =, HALF]
[+, tmp, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, final, double, alpha, =, hcol]
[., getEntry, (, k, ), +, tmp, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }]
[), +, tmp, *, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, final, double, alpha, =]
[), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =, HALF]
[*, zMatrix, ., getEntry, (, k, ,, j, ), ), ;, }, }, final, double, alpha, =, hcol, ., getEntry]
[), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =, HALF]
[., getEntry, (, k, ,, j, ), ), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew]
[,, j, ), ), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double]
[), ), ;, }, }, final, double, alpha, =, hcol, ., getEntry, (, knew, ), ;, final, double, ha, =]
[;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[., getEntry, (, knew, ), ;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0]
[), ;, final, double, ha, =, HALF, *, alpha, ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (]
[*, alpha, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), )]
[<, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), )]
[), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for]
[++, ), {, glag, ., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }]
[;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, tmp, =]
[., setEntry, (, i, ,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k]
[,, bMatrix, ., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k]
[), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, tmp]
[., getEntry, (, knew, ,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt]
[,, i, ), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[), ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double]
[;, k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0]
[;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[<, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j]
[;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, .]
[;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[<, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, .]
[;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (]
[), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;]
[++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=]
[;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[*, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (]
[., getEntry, (, k, ,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=, hcol, .]
[,, j, ), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=, hcol, ., getEntry, (, k, )]
[), *, trustRegionCenterOffset, ., getEntry, (, j, ), ;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for]
[;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <]
[., getEntry, (, j, ), ;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i]
[), ;, }, tmp, *=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i]
[*=, hcol, ., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (]
[., getEntry, (, k, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *]
[<, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *]
[), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *, interpolationPoints, ., getEntry]
[++, ), {, glag, ., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *, interpolationPoints, .]
[;, }, }, double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int, ksav, =, 0, ;]
[., setEntry, (, i, ,, glag, ., getEntry, (, i, ), +, tmp, *, interpolationPoints, ., getEntry, (, k, ,]
[,, glag, ., getEntry, (, i, ), +, tmp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;]
[), ;, }, }, double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int, ksav, =, 0]
[+, tmp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, double, presav, =, ZERO, ;]
[., getEntry, (, i, ), +, tmp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }]
[), +, tmp, *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, double, presav, =, ZERO]
[), ;, }, }, double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int, ksav, =, 0]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, double, presav, =, ZERO, ;, double, step]
[), ;, }, }, double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int, ksav, =, 0]
[., getEntry, (, k, ,, i, ), ), ;, }, }, double, presav, =, ZERO, ;, double, step, =, Double]
[,, i, ), ), ;, }, }, double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int]
[), ), ;, }, }, double, presav, =, ZERO, ;, double, step, =, Double, ., NaN, ;, int, ksav, =]
[;, double, step, =, Double, ., NaN, ;, int, ksav, =, 0, ;, int, ibdsav, =, 0, ;, double, stpsav]
[;, int, ksav, =, 0, ;, int, ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k]
[., NaN, ;, int, ksav, =, 0, ;, int, ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (]
[;, int, ibdsav, =, 0, ;, double, stpsav, =, 0, ;, for, (, int, k, =, 0, ;, k, <]
[;, double, stpsav, =, 0, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, k, ==]
[;, k, <, npt, ;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double]
[;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =, ZERO, ;]
[<, npt, ;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =]
[;, k, ++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =, ZERO, ;]
[), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =]
[++, ), {, if, (, k, ==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq]
[), {, continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =]
[==, trustRegionCenterInterpolationPointIndex, ), {, continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int]
[), {, continue, ;, }, double, dderiv, =, ZERO, ;, double, distsq, =, ZERO, ;, for, (, int, i, =]
[;, double, distsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i]
[;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, .]
[<, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -]
[;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, .]
[), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq]
[., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry]
[,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;]
[;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double]
[., getEntry, (, i, ), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp]
[), ;, dderiv, +=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }]
[+=, glag, ., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =]
[;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;]
[*, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq]
[., getEntry, (, i, ), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /]
[), *, tmp, ;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (]
[;, distsq, +=, tmp, *, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;]
[+=, tmp, *, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;, double, slbd]
[;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;, double, slbd, =, -, subd, ;]
[*, tmp, ;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;, double, slbd, =, -]
[;, }, double, subd, =, adelt, /, Math, ., sqrt, (, distsq, ), ;, double, slbd, =, -, subd, ;]
[;, double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin]
[/, Math, ., sqrt, (, distsq, ), ;, double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int]
[;, double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin]
[., sqrt, (, distsq, ), ;, double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int, iubd, =]
[), ;, double, slbd, =, -, subd, ;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double]
[;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin, =, Math, ., min, (, ONE]
[;, int, ilbd, =, 0, ;, int, iubd, =, 0, ;, final, double, sumin, =, Math, ., min, (, ONE]
[;, int, iubd, =, 0, ;, final, double, sumin, =, Math, ., min, (, ONE, ,, subd, ), ;, for]
[;, final, double, sumin, =, Math, ., min, (, ONE, ,, subd, ), ;, for, (, int, i, =, 0]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[., min, (, ONE, ,, subd, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[,, subd, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i]
[;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, .]
[<, n, ;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -]
[;, i, ++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, .]
[), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[++, ), {, final, double, tmp, =, interpolationPoints, ., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, )]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp]
[., getEntry, (, k, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO]
[,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *]
[;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, )]
[., getEntry, (, i, ), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference]
[), ;, if, (, tmp, >, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i]
[), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[>, ZERO, ), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[), {, if, (, slbd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[<, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference]
[*, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =]
[<, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference]
[), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -]
[), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[., getEntry, (, i, ), ), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[), ), {, slbd, =, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), )]
[=, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd]
[;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i]
[/, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry]
[), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, .]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }]
[), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, .]
[., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd]
[), ), /, tmp, ;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference]
[;, ilbd, =, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i]
[=, -, i, -, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -]
[;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[-, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[-, 1, ;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[;, }, if, (, subd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[>, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, .]
[*, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =]
[>, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, .]
[), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, .]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference]
[), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (]
[), ), {, subd, =, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset]
[=, Math, ., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd]
[., max, (, sumin, ,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), )]
[,, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;]
[), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (]
[/, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {]
[), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, )]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, i]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, i, +, 1, ;, }]
[), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, )]
[., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if]
[), ), /, tmp, ), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO]
[), ;, iubd, =, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (]
[=, i, +, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp]
[;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry]
[+, 1, ;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference]
[;, }, }, else, if, (, tmp, <, ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry]
[), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[<, ZERO, ), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[), {, if, (, slbd, *, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[>, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference]
[*, tmp, >, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =]
[>, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference]
[), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -]
[), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /]
[., getEntry, (, i, ), ), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[), ), {, slbd, =, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), )]
[=, (, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd]
[;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, )]
[/, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (]
[), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if]
[), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry]
[., getEntry, (, i, ), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *]
[), ), /, tmp, ;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, .]
[;, ilbd, =, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, )]
[=, i, +, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset]
[;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[+, 1, ;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[;, }, if, (, subd, *, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[<, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, .]
[*, tmp, <, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =]
[<, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, .]
[), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, .]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference]
[), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[., getEntry, (, i, ), ), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (]
[), ), {, subd, =, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset]
[=, Math, ., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;]
[., max, (, sumin, ,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), )]
[,, (, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;]
[), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd]
[/, tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd]
[), /, tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, -, i, -, 1, ;, }]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, -]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, -, i, -, 1, ;]
[), /, tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int]
[., getEntry, (, i, ), ), /, tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }]
[), ), /, tmp, ), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;]
[), ;, iubd, =, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd]
[=, -, i, -, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag]
[;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, ., NaN, ;]
[-, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, .]
[-, 1, ;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, .]
[;, }, }, }, step, =, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, ., NaN, ;]
[=, slbd, ;, int, isbd, =, ilbd, ;, double, vlag, =, Double, ., NaN, ;, if, (, k, ==, knew]
[;, int, isbd, =, ilbd, ;, double, vlag, =, Double, ., NaN, ;, if, (, k, ==, knew, ), {]
[;, double, vlag, =, Double, ., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv]
[;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *]
[., NaN, ;, if, (, k, ==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =]
[), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff]
[==, knew, ), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd]
[), {, final, double, diff, =, dderiv, -, ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff]
[;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (]
[-, ONE, ;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd]
[;, vlag, =, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (]
[=, slbd, *, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -]
[;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, ., abs]
[*, (, dderiv, -, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *]
[;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, ., abs]
[), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, .]
[-, slbd, *, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;]
[), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, .]
[*, diff, ), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (]
[), ;, final, double, d1, =, subd, *, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, .]
[;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[*, (, dderiv, -, subd, *, diff, ), ;, if, (, Math, ., abs, (, d1, ), >, Math, .]
[;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[), ;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step]
[-, subd, *, diff, ), ;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag]
[), ;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step]
[*, diff, ), ;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), )]
[), ;, if, (, Math, ., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step]
[), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF]
[>, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd]
[., abs, (, d1, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =]
[), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =]
[), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF]
[., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }]
[), ), {, step, =, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =]
[=, subd, ;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;]
[;, vlag, =, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double]
[=, d1, ;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =]
[;, isbd, =, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -]
[=, iubd, ;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -, diff, *]
[;, }, final, double, d2, =, HALF, *, dderiv, ;, final, double, d3, =, d2, -, diff, *, slbd, ;]
[;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd]
[*, dderiv, ;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff]
[;, final, double, d3, =, d2, -, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd]
[;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {]
[-, diff, *, slbd, ;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (, d3, *, d4]
[;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {]
[*, slbd, ;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO]
[;, final, double, d4, =, d2, -, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {]
[;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;]
[-, diff, *, subd, ;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *]
[;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;]
[*, subd, ;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /]
[;, if, (, d3, *, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;]
[), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (, d5, )]
[<, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (]
[*, d4, <, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, .]
[<, ZERO, ), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (]
[), {, final, double, d5, =, d2, *, d2, /, diff, ;, if, (, Math, ., abs, (, d5, )]
[;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[/, diff, ;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {]
[*, d2, /, diff, ;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, )]
[/, diff, ;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {]
[;, if, (, Math, ., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[), {, step, =, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else]
[>, Math, ., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;, vlag, =, d5, ;, isbd]
[., abs, (, d5, ), >, Math, ., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;]
[), >, Math, ., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;, vlag, =, d5, ;]
[), {, step, =, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else]
[., abs, (, vlag, ), ), {, step, =, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0]
[), ), {, step, =, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }]
[=, d2, /, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =]
[;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (, ONE]
[/, diff, ;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *]
[;, vlag, =, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (, ONE]
[=, d5, ;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (, ONE, -, slbd]
[;, isbd, =, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;]
[=, 0, ;, }, }, }, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double]
[;, }, }, }, else, {, vlag, =, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =]
[=, slbd, *, (, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, )]
[;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (, tmp]
[*, (, ONE, -, slbd, ), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if]
[;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (, tmp]
[), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (]
[-, slbd, ), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, .]
[), ;, final, double, tmp, =, subd, *, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (]
[;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[*, (, ONE, -, subd, ), ;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (]
[;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step, =]
[), ;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step]
[-, subd, ), ;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), )]
[), ;, if, (, Math, ., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step]
[), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF]
[>, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd]
[., abs, (, tmp, ), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =]
[), >, Math, ., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =]
[), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF]
[., abs, (, vlag, ), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }]
[), ), {, step, =, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >]
[=, subd, ;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&, Math, .]
[;, vlag, =, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&, Math, ., abs, (]
[=, tmp, ;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, )]
[;, isbd, =, iubd, ;, }, if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR]
[=, iubd, ;, }, if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {]
[;, }, if, (, subd, >, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =]
[), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }]
[&&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd]
[>, HALF, &&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR]
[&&, Math, ., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd]
[), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }]
[<, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv]
[., abs, (, vlag, ), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0]
[), <, ONE_OVER_FOUR, ), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=]
[), {, step, =, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }]
[=, HALF, ;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp]
[;, vlag, =, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step]
[=, ONE_OVER_FOUR, ;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (]
[;, isbd, =, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (, ONE, -]
[=, 0, ;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (, ONE, -, step, )]
[;, }, vlag, *=, dderiv, ;, }, final, double, tmp, =, step, *, (, ONE, -, step, ), *, distsq]
[*=, dderiv, ;, }, final, double, tmp, =, step, *, (, ONE, -, step, ), *, distsq, ;, final, double]
[;, }, final, double, tmp, =, step, *, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =]
[;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, )]
[*, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *]
[*, (, ONE, -, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *]
[*, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *]
[), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp]
[-, step, ), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha]
[), *, distsq, ;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp]
[;, final, double, predsq, =, vlag, *, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, )]
[;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;]
[*, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {]
[*, vlag, *, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav]
[*, (, vlag, *, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {]
[;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;]
[), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step]
[+, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav]
[*, vlag, +, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq]
[+, ha, *, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav]
[), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step]
[*, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav]
[*, tmp, *, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k]
[*, tmp, ), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav]
[), ;, if, (, predsq, >, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step]
[), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }]
[>, presav, ), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;]
[), {, presav, =, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }]
[=, predsq, ;, ksav, =, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int]
[;, ksav, =, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =]
[=, k, ;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;]
[;, stpsav, =, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[=, step, ;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[;, ibdsav, =, isbd, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[=, isbd, ;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints]
[<, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *]
[;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints]
[), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry, (]
[++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry]
[;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, .]
[+, stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), )]
[., getEntry, (, i, ), +, stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, .]
[), +, stpsav, *, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, )]
[;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, .]
[*, (, interpolationPoints, ., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint]
[;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, .]
[), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference]
[., getEntry, (, ksav, ,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (]
[,, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, .]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (]
[), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math]
[., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry]
[), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,]
[;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, .]
[., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (]
[), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference]
[., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, )]
[,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (]
[., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), )]
[), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if]
[), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,]
[., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <]
[,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav]
[., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint]
[), ,, tmp, ), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -]
[), ), ), ;, }, if, (, ibdsav, <, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1]
[), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, )]
[<, 0, ), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -]
[), {, newPoint, ., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, )]
[;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry]
[., setEntry, (, -, ibdsav, -, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }]
[,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {]
[-, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0]
[-, 1, ,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0]
[,, lowerDifference, ., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {]
[), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, .]
[., getEntry, (, -, ibdsav, -, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, .]
[), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference]
[-, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1]
[-, 1, ), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1]
[), ), ;, }, if, (, ibdsav, >, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference]
[), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;]
[>, 0, ), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, )]
[), {, newPoint, ., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;]
[;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =, Double, .]
[., setEntry, (, ibdsav, -, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double]
[,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;]
[-, 1, ,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =, adelt, +]
[,, upperDifference, ., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;]
[), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =, Double]
[., getEntry, (, ibdsav, -, 1, ), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag]
[), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =]
[-, 1, ), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =, 0, ;, double]
[), ), ;, }, final, double, bigstp, =, adelt, +, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =]
[;, int, iflag, =, 0, ;, double, cauchy, =, Double, ., NaN, ;, double, csave, =, ZERO, ;, while, (]
[+, adelt, ;, int, iflag, =, 0, ;, double, cauchy, =, Double, ., NaN, ;, double, csave, =, ZERO, ;]
[;, int, iflag, =, 0, ;, double, cauchy, =, Double, ., NaN, ;, double, csave, =, ZERO, ;, while, (]
[;, double, cauchy, =, Double, ., NaN, ;, double, csave, =, ZERO, ;, while, (, true, ), {, double, wfixsq]
[;, double, csave, =, ZERO, ;, while, (, true, ), {, double, wfixsq, =, ZERO, ;, double, ggfree, =, ZERO]
[., NaN, ;, double, csave, =, ZERO, ;, while, (, true, ), {, double, wfixsq, =, ZERO, ;, double, ggfree]
[;, while, (, true, ), {, double, wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i]
[), {, double, wfixsq, =, ZERO, ;, double, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i]
[;, double, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =]
[;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (]
[<, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, work1, .]
[;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (]
[), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO]
[++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,]
[;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (]
[., getEntry, (, i, ), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min]
[), ;, work1, ., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry]
[;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, )]
[., setEntry, (, i, ,, ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, )]
[,, ZERO, ), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry]
[), ;, if, (, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i]
[), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if]
[||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue]
[>, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, )]
[., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >]
[,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry]
[-, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry]
[., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, .]
[), -, lowerDifference, ., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, .]
[,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry]
[., getEntry, (, i, ), ,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i]
[), ,, glagValue, ), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, .]
[), >, ZERO, ||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i]
[||, Math, ., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue]
[), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if]
[<, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }]
[., max, (, trustRegionCenterOffset, ., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <]
[,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *]
[-, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,]
[., getEntry, (, i, ), -, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {, work1]
[), -, upperDifference, ., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i]
[,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *]
[., getEntry, (, i, ), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, )]
[), ,, glagValue, ), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue]
[), <, ZERO, ), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;]
[), {, work1, ., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if]
[;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, []
[., setEntry, (, i, ,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==]
[,, bigstp, ), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return]
[), ;, ggfree, +=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double]
[+=, glagValue, *, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, [, ], {]
[;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, [, ], {, alpha, ,, ZERO, }]
[*, glagValue, ;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, [, ], {, alpha, ,]
[;, }, }, if, (, ggfree, ==, ZERO, ), {, return, new, double, [, ], {, alpha, ,, ZERO, }]
[), {, return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *]
[==, ZERO, ), {, return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =]
[), {, return, new, double, [, ], {, alpha, ,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *]
[;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step]
[;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step]
[,, ZERO, }, ;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO]
[}, ;, }, final, double, tmp1, =, adelt, *, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {]
[;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree]
[-, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, )]
[*, adelt, -, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /]
[-, wfixsq, ;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, )]
[;, if, (, tmp1, >, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree]
[), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int]
[>, ZERO, ), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for]
[), {, step, =, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int]
[=, Math, ., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0]
[;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[., sqrt, (, tmp1, /, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i]
[), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[/, ggfree, ), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[), ;, ggfree, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, work1, .]
[;, i, <, n, ;, i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, )]
[;, i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2]
[<, n, ;, i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final]
[;, i, ++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2]
[), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, .]
[++, ), {, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset]
[), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry, (, i]
[==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry]
[., getEntry, (, i, ), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[), ==, bigstp, ), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, .]
[), {, final, double, tmp2, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, step, *, glag, ., getEntry, (, i]
[;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference]
[-, step, *, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, )]
[., getEntry, (, i, ), -, step, *, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference]
[), -, step, *, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i]
[;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference]
[*, glag, ., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {]
[;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference]
[., getEntry, (, i, ), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, .]
[), ;, if, (, tmp2, <=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,]
[), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[<=, lowerDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i]
[), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -]
[), ), {, work1, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, lowerDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, .]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, )]
[), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }]
[., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=]
[), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;]
[;, wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), )]
[., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=, upperDifference, .]
[), ;, wfixsq, +=, d1, *, d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, )]
[+=, d1, *, d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1]
[;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i]
[*, d1, ;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry]
[;, }, else, if, (, tmp2, >=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i]
[), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[>=, upperDifference, ., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i]
[), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[., getEntry, (, i, ), ), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -]
[), ), {, work1, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, .]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, )]
[), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }]
[., getEntry, (, i, ), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=]
[), ), ;, final, double, d1, =, work1, ., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;]
[;, wfixsq, +=, d1, *, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, )]
[., getEntry, (, i, ), ;, wfixsq, +=, d1, *, d1, ;, }, else, {, final, double, d1, =, glag]
[), ;, wfixsq, +=, d1, *, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i]
[+=, d1, *, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;, ggfree]
[;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;, ggfree, +=, d1, *, d1]
[*, d1, ;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;, ggfree, +=, d1]
[;, }, else, {, final, double, d1, =, glag, ., getEntry, (, i, ), ;, ggfree, +=, d1, *, d1]
[;, ggfree, +=, d1, *, d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i]
[., getEntry, (, i, ), ;, ggfree, +=, d1, *, d1, ;, }, }, }, }, double, gw, =, ZERO]
[), ;, ggfree, +=, d1, *, d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int]
[+=, d1, *, d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0]
[;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n]
[*, d1, ;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;, i]
[;, }, }, }, }, double, gw, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =]
[;, i, <, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;]
[;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (, work1, .]
[<, n, ;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (]
[;, i, ++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (, work1, .]
[), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (, work1, ., getEntry, (, i]
[++, ), {, final, double, glagValue, =, glag, ., getEntry, (, i, ), ;, if, (, work1, ., getEntry, (]
[;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (, i, ,, -]
[., getEntry, (, i, ), ;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, .]
[), ;, if, (, work1, ., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (, i, ,]
[), {, work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =, Math, .]
[==, bigstp, ), {, work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =]
[., getEntry, (, i, ), ==, bigstp, ), {, work1, ., setEntry, (, i, ,, -, step, *, glagValue, )]
[), ==, bigstp, ), {, work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min]
[), {, work1, ., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =, Math, .]
[;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (]
[., setEntry, (, i, ,, -, step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference]
[,, -, step, *, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i]
[), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry]
[*, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset]
[*, glagValue, ), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset]
[), ;, final, double, min, =, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry]
[;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min, )]
[., min, (, upperDifference, ., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry]
[,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (]
[., getEntry, (, i, ), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), )]
[), ,, trustRegionCenterOffset, ., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry]
[), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min]
[+, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference]
[., getEntry, (, i, ), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,]
[), +, work1, ., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (]
[), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min]
[., getEntry, (, i, ), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry]
[), ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,]
[;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i]
[., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min, ), ), ;]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (]
[), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (]
[., max, (, lowerDifference, ., getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (, work1, .]
[,, min, ), ), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint]
[., getEntry, (, i, ), ,, min, ), ), ;, }, else, if, (, work1, ., getEntry, (, i, )]
[), ,, min, ), ), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {]
[), ), ;, }, else, if, (, work1, ., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry]
[), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (]
[==, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else]
[., getEntry, (, i, ), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i]
[), ==, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }]
[), {, alternativeNewPoint, ., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (]
[;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (]
[., setEntry, (, i, ,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (, glagValue, >, ZERO]
[,, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, .]
[), ;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry]
[., getEntry, (, i, ), ), ;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (]
[), ), ;, }, else, if, (, glagValue, >, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, .]
[), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint]
[>, ZERO, ), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else]
[), {, alternativeNewPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint]
[;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (]
[,, lowerDifference, ., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, .]
[), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }]
[., getEntry, (, i, ), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (]
[), ), ;, }, else, {, alternativeNewPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;]
[;, }, gw, +=, glagValue, *, work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw, +=, glagValue, *, work1, .]
[,, upperDifference, ., getEntry, (, i, ), ), ;, }, gw, +=, glagValue, *, work1, ., getEntry, (, i, )]
[), ;, }, gw, +=, glagValue, *, work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;]
[., getEntry, (, i, ), ), ;, }, gw, +=, glagValue, *, work1, ., getEntry, (, i, ), ;, }]
[), ), ;, }, gw, +=, glagValue, *, work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO]
[+=, glagValue, *, work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k]
[;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[*, work1, ., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0]
[;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[., getEntry, (, i, ), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;, k]
[), ;, }, double, curv, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO]
[;, k, <, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0]
[;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[<, npt, ;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j]
[;, k, ++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n]
[), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[++, ), {, double, tmp, =, ZERO, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, .]
[;, j, <, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *]
[;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (]
[<, n, ;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, .]
[;, j, ++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (]
[), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;]
[++, ), {, tmp, +=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, )]
[+=, interpolationPoints, ., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=]
[;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==]
[*, work1, ., getEntry, (, j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *]
[., getEntry, (, k, ,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=, hcol, .]
[,, j, ), *, work1, ., getEntry, (, j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, )]
[), *, work1, ., getEntry, (, j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp]
[;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==]
[., getEntry, (, j, ), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;]
[), ;, }, curv, +=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag]
[+=, hcol, ., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {]
[;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -]
[*, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv]
[*, tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if]
[., getEntry, (, k, ), *, tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =]
[), *, tmp, *, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }]
[*, tmp, ;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv]
[;, }, if, (, iflag, ==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -]
[), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *]
[==, 1, ), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -]
[), {, curv, =, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *]
[=, -, curv, ;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (, ONE, +]
[;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (, ONE, +, Math, ., sqrt]
[;, }, if, (, curv, >, -, gw, &&, curv, <, -, gw, *, (, ONE, +, Math, ., sqrt]
[), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i, <]
[&&, curv, <, -, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double]
[>, -, gw, &&, curv, <, -, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), )]
[&&, curv, <, -, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double]
[&&, curv, <, -, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double]
[), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i, <]
[<, -, gw, *, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =]
[), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i, <]
[*, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =, -, gw, /]
[*, (, ONE, +, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =, -, gw, /]
[), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i, <]
[), ), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i]
[+, Math, ., sqrt, (, TWO, ), ), ), {, final, double, scale, =, -, gw, /, curv, ;, for]
[), ), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;, i]
[., sqrt, (, TWO, ), ), ), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int]
[), ), ), {, final, double, scale, =, -, gw, /, curv, ;, for, (, int, i, =, 0, ;]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[/, curv, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double]
[/, curv, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, tmp, =]
[;, i, <, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, .]
[<, n, ;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *]
[;, i, ++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, .]
[), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, ., getEntry, (, i]
[++, ), {, final, double, tmp, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, scale, *, work1, ., getEntry, (]
[;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, .]
[+, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (]
[., getEntry, (, i, ), +, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i]
[), +, scale, *, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max]
[;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, .]
[*, work1, ., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, .]
[;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, .]
[., getEntry, (, i, ), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (]
[), ;, alternativeNewPoint, ., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math]
[;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =, d1, *, d1, ;, }, else]
[., setEntry, (, i, ,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (]
[,, Math, ., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (]
[), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =, d1, *, d1, ;, }]
[., max, (, lowerDifference, ., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, )]
[,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double]
[., getEntry, (, i, ), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), )]
[), ,, Math, ., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final]
[), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =, d1, *, d1, ;]
[., min, (, upperDifference, ., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =]
[,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =, d1]
[., getEntry, (, i, ), ,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *]
[), ,, tmp, ), ), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =]
[), ), ), ;, }, final, double, d1, =, HALF, *, gw, *, scale, ;, cauchy, =, d1, *, d1]
[;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;]
[*, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *]
[*, gw, *, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +]
[*, scale, ;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *]
[;, cauchy, =, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;]
[=, d1, *, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =]
[;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =, d1, *, d1, ;]
[*, d1, ;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =, d1, *]
[;, }, else, {, final, double, d1, =, gw, +, HALF, *, curv, ;, cauchy, =, d1, *, d1, ;]
[;, cauchy, =, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =]
[+, HALF, *, curv, ;, cauchy, =, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for]
[;, cauchy, =, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =]
[*, curv, ;, cauchy, =, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int]
[;, cauchy, =, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =]
[=, d1, *, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;]
[;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[*, d1, ;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <]
[;, }, if, (, iflag, ==, 0, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry]
[==, 0, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, glag, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;]
[<, n, ;, i, ++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, )]
[;, i, ++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;]
[), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;, work2, ., setEntry]
[++, ), {, glag, ., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;, work2, .]
[;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =, cauchy, ;]
[., setEntry, (, i, ,, -, glag, ., getEntry, (, i, ), ), ;, work2, ., setEntry, (, i, ,]
[,, -, glag, ., getEntry, (, i, ), ), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (]
[), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =, cauchy]
[), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =, cauchy]
[., getEntry, (, i, ), ), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), )]
[), ), ;, work2, ., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =]
[;, }, csave, =, cauchy, ;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if, (, csave]
[., setEntry, (, i, ,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =, cauchy, ;, iflag, =]
[,, alternativeNewPoint, ., getEntry, (, i, ), ), ;, }, csave, =, cauchy, ;, iflag, =, 1, ;, }, else]
[), ;, }, csave, =, cauchy, ;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if, (]
[., getEntry, (, i, ), ), ;, }, csave, =, cauchy, ;, iflag, =, 1, ;, }, else, {, break]
[), ), ;, }, csave, =, cauchy, ;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if]
[=, cauchy, ;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if, (, csave, >, cauchy, )]
[;, iflag, =, 1, ;, }, else, {, break, ;, }, }, if, (, csave, >, cauchy, ), {, for]
[=, 1, ;, }, else, {, break, ;, }, }, if, (, csave, >, cauchy, ), {, for, (, int]
[;, }, else, {, break, ;, }, }, if, (, csave, >, cauchy, ), {, for, (, int, i, =]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry]
[>, cauchy, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, alternativeNewPoint]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i]
[;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }]
[<, n, ;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), )]
[;, i, ++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }]
[), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, cauchy, =, csave]
[++, ), {, alternativeNewPoint, ., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, cauchy, =]
[;, }, cauchy, =, csave, ;, }, return, new, double, [, ], {, alpha, ,, cauchy, }, ;, }, private]
[., setEntry, (, i, ,, work2, ., getEntry, (, i, ), ), ;, }, cauchy, =, csave, ;, }, return]
[,, work2, ., getEntry, (, i, ), ), ;, }, cauchy, =, csave, ;, }, return, new, double, [, ]]
[), ;, }, cauchy, =, csave, ;, }, return, new, double, [, ], {, alpha, ,, cauchy, }, ;, }]
[., getEntry, (, i, ), ), ;, }, cauchy, =, csave, ;, }, return, new, double, [, ], {, alpha]
[), ), ;, }, cauchy, =, csave, ;, }, return, new, double, [, ], {, alpha, ,, cauchy, }, ;]
[=, csave, ;, }, return, new, double, [, ], {, alpha, ,, cauchy, }, ;, }, private, void, prelim, (]
[;, }, return, new, double, [, ], {, alpha, ,, cauchy, }, ;, }, private, void, prelim, (, double, []
[;, }, private, void, prelim, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, )]
[;, }, private, void, prelim, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (, )]
[,, cauchy, }, ;, }, private, void, prelim, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {]
[}, ;, }, private, void, prelim, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {, printMethod, (]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, ndim]
[;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, ndim, =, bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq]
[., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, ndim, =, bMatrix, ., getRowDimension, (, )]
[;, final, int, ndim, =, bMatrix, ., getRowDimension, (, ), ;, final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final]
[;, final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =, 1d, /, rhosq, ;, final, int, np]
[., getRowDimension, (, ), ;, final, double, rhosq, =, initialTrustRegionRadius, *, initialTrustRegionRadius, ;, final, double, recip, =, 1d, /, rhosq]
[;, final, double, recip, =, 1d, /, rhosq, ;, final, int, np, =, n, +, 1, ;, for, (, int]
[*, initialTrustRegionRadius, ;, final, double, recip, =, 1d, /, rhosq, ;, final, int, np, =, n, +, 1, ;, for]
[;, final, double, recip, =, 1d, /, rhosq, ;, final, int, np, =, n, +, 1, ;, for, (, int]
[;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[/, rhosq, ;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <]
[;, final, int, np, =, n, +, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, originShift, ., setEntry, (]
[+, 1, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, originShift, .]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, originShift, ., setEntry, (]
[;, j, <, n, ;, j, ++, ), {, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (, j]
[;, j, ++, ), {, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for]
[<, n, ;, j, ++, ), {, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), )]
[;, j, ++, ), {, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for]
[), {, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k]
[++, ), {, originShift, ., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, interpolationPoints, ., setEntry, (]
[., setEntry, (, j, ,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;]
[,, currentBest, ., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, interpolationPoints, ., setEntry]
[., getEntry, (, j, ), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[), ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, interpolationPoints, .]
[;, k, <, npt, ;, k, ++, ), {, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;]
[;, k, ++, ), {, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int]
[<, npt, ;, k, ++, ), {, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for]
[;, k, ++, ), {, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int]
[), {, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0]
[++, ), {, interpolationPoints, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =]
[;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;, i, ++, ), {, bMatrix, ., setEntry]
[., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;, i, ++]
[,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, ndim, ;, i, ++, ), {, bMatrix, .]
[;, i, <, ndim, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, ZERO, ), ;]
[;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (]
[<, ndim, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }]
[;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (]
[), {, bMatrix, ., setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =]
[++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i]
[;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2, ;, i, <]
[., setEntry, (, i, ,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max]
[,, j, ,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np]
[,, ZERO, ), ;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2]
[), ;, }, }, for, (, int, i, =, 0, ,, max, =, n, *, np, /, 2, ;, i]
[,, max, =, n, *, np, /, 2, ;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry]
[;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for]
[/, 2, ;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;]
[*, np, /, 2, ;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO]
[/, 2, ;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;]
[;, i, <, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for]
[;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =]
[<, max, ;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int]
[;, i, ++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =]
[), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k]
[++, ), {, modelSecondDerivativesValues, ., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;]
[;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry]
[., setEntry, (, i, ,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;]
[,, ZERO, ), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {]
[), ;, }, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, .]
[;, k, <, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (]
[;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0]
[<, npt, ;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j]
[;, k, ++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0]
[), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =]
[++, ), {, modelSecondDerivativesParameters, ., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max]
[;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <, max, ;, j, ++]
[., setEntry, (, k, ,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np]
[,, ZERO, ), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <, max]
[), ;, for, (, int, j, =, 0, ,, max, =, npt, -, np, ;, j, <, max, ;, j]
[,, max, =, npt, -, np, ;, j, <, max, ;, j, ++, ), {, zMatrix, ., setEntry, (, k]
[;, j, <, max, ;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;]
[-, np, ;, j, <, max, ;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO]
[;, j, <, max, ;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;]
[;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }, int, ipt]
[<, max, ;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }]
[;, j, ++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }, int, ipt]
[), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }, int, ipt, =, 0, ;]
[++, ), {, zMatrix, ., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }, int, ipt, =, 0]
[;, }, }, int, ipt, =, 0, ;, int, jpt, =, 0, ;, double, fbeg, =, Double, ., NaN, ;]
[., setEntry, (, k, ,, j, ,, ZERO, ), ;, }, }, int, ipt, =, 0, ;, int, jpt, =]
[,, j, ,, ZERO, ), ;, }, }, int, ipt, =, 0, ;, int, jpt, =, 0, ;, double, fbeg]
[,, ZERO, ), ;, }, }, int, ipt, =, 0, ;, int, jpt, =, 0, ;, double, fbeg, =, Double]
[), ;, }, }, int, ipt, =, 0, ;, int, jpt, =, 0, ;, double, fbeg, =, Double, ., NaN]
[;, int, jpt, =, 0, ;, double, fbeg, =, Double, ., NaN, ;, do, {, final, int, nfm, =, getEvaluations]
[;, double, fbeg, =, Double, ., NaN, ;, do, {, final, int, nfm, =, getEvaluations, (, ), ;, final, int]
[;, do, {, final, int, nfm, =, getEvaluations, (, ), ;, final, int, nfx, =, nfm, -, n, ;, final]
[., NaN, ;, do, {, final, int, nfm, =, getEvaluations, (, ), ;, final, int, nfx, =, nfm, -, n]
[;, final, int, nfx, =, nfm, -, n, ;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm]
[;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =]
[-, n, ;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm, =, nfx, -, 1, ;, double]
[;, final, int, nfmm, =, nfm, -, 1, ;, final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =]
[;, final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if]
[-, 1, ;, final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0]
[;, final, int, nfxm, =, nfx, -, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if]
[;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {]
[-, 1, ;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n]
[;, double, stepa, =, 0, ;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {]
[;, double, stepb, =, 0, ;, if, (, nfm, <=, 2, *, n, ), {, if, (, nfm, >=, 1]
[;, if, (, nfm, <=, 2, *, n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, )]
[), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference]
[<=, 2, *, n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius]
[), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference]
[*, n, ), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if]
[), {, if, (, nfm, >=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference]
[), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =]
[&&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO]
[>=, 1, &&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, )]
[&&, nfm, <=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO]
[), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =]
[<=, n, ), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {]
[), {, stepa, =, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =]
[=, initialTrustRegionRadius, ;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;]
[;, if, (, upperDifference, ., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;, }, interpolationPoints]
[), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }]
[==, ZERO, ), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, )]
[., getEntry, (, nfmm, ), ==, ZERO, ), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm]
[), ==, ZERO, ), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa]
[), {, stepa, =, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }]
[=, -, stepa, ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (]
[;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n]
[;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n]
[;, }, else, if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, )]
[., setEntry, (, nfm, ,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n, ), {, stepa]
[,, nfmm, ,, stepa, ), ;, }, else, if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry]
[,, stepa, ), ;, }, else, if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx]
[), ;, }, else, if, (, nfm, >, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm]
[), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (]
[>, n, ), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;]
[), {, stepa, =, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (]
[=, interpolationPoints, ., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry]
[;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =]
[., getEntry, (, nfx, ,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm]
[,, nfxm, ), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, )]
[), ;, stepb, =, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb]
[=, -, initialTrustRegionRadius, ;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, .]
[;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO]
[;, if, (, lowerDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO]
[), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;]
[==, ZERO, ), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, )]
[., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference]
[), ==, ZERO, ), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm]
[), {, stepb, =, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;]
[=, Math, ., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (]
[;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (]
[., min, (, TWO, *, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, .]
[,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO]
[*, initialTrustRegionRadius, ,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, )]
[,, upperDifference, ., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO]
[), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max]
[., getEntry, (, nfxm, ), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {]
[), ), ;, }, if, (, upperDifference, ., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, .]
[), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), )]
[==, ZERO, ), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm]
[., getEntry, (, nfxm, ), ==, ZERO, ), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,]
[), ==, ZERO, ), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (]
[), {, stepb, =, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), )]
[=, Math, ., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints]
[;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1]
[., max, (, -, TWO, *, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry]
[,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, )]
[*, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,]
[*, initialTrustRegionRadius, ,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,]
[,, lowerDifference, ., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, )]
[), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int]
[., getEntry, (, nfxm, ), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }]
[), ), ;, }, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final]
[;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =, nfm]
[., setEntry, (, nfm, ,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (, nfm]
[,, nfxm, ,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /]
[,, stepb, ), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;]
[), ;, }, }, else, {, final, int, tmp1, =, (, nfm, -, np, ), /, n, ;, jpt, =]
[;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt]
[/, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if]
[), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;]
[-, np, ), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +]
[), /, n, ;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;]
[;, jpt, =, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt]
[=, nfm, -, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n]
[;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;]
[-, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =]
[-, tmp1, *, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {]
[-, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =]
[*, n, -, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int]
[-, n, ;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =]
[;, ipt, =, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;]
[=, jpt, +, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =]
[;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;]
[+, tmp1, ;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -]
[;, if, (, ipt, >, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;]
[), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;, ipt, =, tmp2, ;, }, final]
[>, n, ), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;, ipt, =, tmp2, ;]
[), {, final, int, tmp2, =, jpt, ;, jpt, =, ipt, -, n, ;, ipt, =, tmp2, ;, }, final]
[;, jpt, =, ipt, -, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;]
[=, ipt, -, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int]
[;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -]
[-, n, ;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =]
[;, ipt, =, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -]
[=, tmp2, ;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;]
[;, }, final, int, iptMinus1, =, ipt, -, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, .]
[;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry]
[-, 1, ;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints]
[;, final, int, jptMinus1, =, jpt, -, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry]
[;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints]
[-, 1, ;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), )]
[;, interpolationPoints, ., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints]
[;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }]
[., setEntry, (, nfm, ,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry]
[,, iptMinus1, ,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1]
[,, interpolationPoints, ., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints]
[), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;]
[., getEntry, (, ipt, ,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry]
[,, iptMinus1, ), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1]
[), ), ;, interpolationPoints, ., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), )]
[;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, currentBest, ., setEntry]
[., setEntry, (, nfm, ,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (]
[,, jptMinus1, ,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0]
[,, interpolationPoints, ., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j]
[), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, currentBest, .]
[., getEntry, (, jpt, ,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n]
[,, jptMinus1, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, )]
[), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, currentBest]
[;, j, <, n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math]
[;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound]
[<, n, ;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max]
[;, j, ++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound]
[), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, [, j, ]]
[++, ), {, currentBest, ., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, [, j]
[;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {]
[., setEntry, (, j, ,, Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,, originShift, .]
[,, Math, ., min, (, Math, ., max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (, j, )]
[), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), )]
[., min, (, Math, ., max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints]
[,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference]
[., max, (, lowerBound, [, j, ], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm]
[,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, []
[[, j, ], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), )]
[], ,, originShift, ., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound]
[), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==]
[+, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (]
[., getEntry, (, j, ), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, [, j, ]]
[), +, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if]
[), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==]
[., getEntry, (, nfm, ,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, .]
[,, j, ), ), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,]
[), ), ,, upperBound, [, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, )]
[), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, )]
[[, j, ], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry]
[], ), ), ;, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j]
[), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry]
[==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], )]
[., getEntry, (, nfm, ,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (]
[,, j, ), ==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, []
[), ==, lowerDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ]]
[), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry]
[., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }]
[), ), {, currentBest, ., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, .]
[;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, ), )]
[., setEntry, (, j, ,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,]
[,, lowerBound, [, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference]
[), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, )]
[[, j, ], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry]
[], ), ;, }, if, (, interpolationPoints, ., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j]
[), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue, =]
[==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], )]
[., getEntry, (, nfm, ,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (]
[,, j, ), ==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, upperBound, []
[), ==, upperDifference, ., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ]]
[), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue, =]
[., getEntry, (, j, ), ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }]
[), ), {, currentBest, ., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue]
[;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double, f, =]
[., setEntry, (, j, ,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest]
[,, upperBound, [, j, ], ), ;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, )]
[), ;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double, f]
[[, j, ], ), ;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;]
[], ), ;, }, }, final, double, objectiveValue, =, computeObjectiveValue, (, currentBest, ., toArray, (, ), ), ;, final, double]
[;, final, double, f, =, isMinimize, ?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, ), ;]
[), ;, final, double, f, =, isMinimize, ?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, )]
[., toArray, (, ), ), ;, final, double, f, =, isMinimize, ?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval]
[;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (]
[?, objectiveValue, :, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,]
[:, -, objectiveValue, ;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, )]
[;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (]
[;, final, int, numEval, =, getEvaluations, (, ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (]
[;, fAtInterpolationPoints, ., setEntry, (, nfm, ,, f, ), ;, if, (, numEval, ==, 1, ), {, fbeg, =, f]
[;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (]
[., setEntry, (, nfm, ,, f, ), ;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex]
[,, f, ), ;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }]
[), ;, if, (, numEval, ==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if]
[), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (]
[==, 1, ), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, .]
[), {, fbeg, =, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (]
[=, f, ;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), )]
[;, trustRegionCenterInterpolationPointIndex, =, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex]
[=, 0, ;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm]
[;, }, else, if, (, f, <, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }]
[), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (]
[<, fAtInterpolationPoints, ., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *]
[), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (]
[., getEntry, (, trustRegionCenterInterpolationPointIndex, ), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +]
[), ), {, trustRegionCenterInterpolationPointIndex, =, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if]
[=, nfm, ;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2]
[;, }, if, (, numEval, <=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval]
[), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm]
[<=, 2, *, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, )]
[), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm]
[+, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry]
[*, n, +, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter]
[+, 1, ), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry]
[), {, if, (, numEval, >=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt]
[&&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /]
[>=, 2, &&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg]
[&&, numEval, <=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt]
[<=, n, +, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, )]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt]
[+, 1, ), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if]
[), {, gradientAtTrustRegionCenter, ., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt]
[;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, .]
[., setEntry, (, nfmm, ,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt, <, numEval, +]
[,, (, f, -, fbeg, ), /, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final]
[), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix]
[/, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa]
[), /, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /]
[-, fbeg, ), /, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =]
[), /, stepa, ), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /]
[), ;, if, (, npt, <, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix]
[), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA]
[<, numEval, +, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,]
[), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA]
[+, n, ), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,]
[), {, final, double, oneOverStepA, =, ONE, /, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA]
[;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm]
[/, stepa, ;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm]
[;, bMatrix, ., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm]
[;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,]
[., setEntry, (, 0, ,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA]
[,, nfmm, ,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, .]
[,, -, oneOverStepA, ), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (]
[), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm]
[), ;, bMatrix, ., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm]
[;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else]
[., setEntry, (, nfm, ,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,]
[,, nfmm, ,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq]
[,, oneOverStepA, ), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;]
[), ;, bMatrix, ., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }]
[;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *, (]
[., setEntry, (, npt, +, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (]
[,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, )]
[+, nfmm, ,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +]
[,, nfmm, ,, -, HALF, *, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, )]
[,, -, HALF, *, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final]
[), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *]
[*, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =]
[*, rhosq, ), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =]
[), ;, }, }, else, if, (, numEval, >=, n, +, 2, ), {, final, int, ih, =, nfx, *]
[), {, final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double]
[>=, n, +, 2, ), {, final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -]
[), {, final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double]
[+, 2, ), {, final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;]
[), {, final, int, ih, =, nfx, *, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double]
[;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa]
[-, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb]
[/, 2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff]
[*, (, nfx, +, 1, ), /, 2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, )]
[/, 2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff]
[), /, 2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double]
[+, 1, ), /, 2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;]
[), /, 2, -, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double]
[-, 1, ;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb]
[;, final, double, tmp, =, (, f, -, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa]
[;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -]
[/, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (]
[), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *]
[-, fbeg, ), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,]
[), /, stepb, ;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *]
[;, final, double, diff, =, stepb, -, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -]
[;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /]
[-, stepa, ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, )]
[;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /]
[;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa]
[., setEntry, (, ih, ,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, )]
[,, TWO, *, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry]
[), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *]
[/, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -]
[*, (, tmp, -, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm]
[/, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -]
[), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb]
[-, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter]
[), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb]
[., getEntry, (, nfxm, ), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry]
[), ), /, diff, ), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *]
[), ;, gradientAtTrustRegionCenter, ., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *]
[;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), )]
[., setEntry, (, nfxm, ,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /]
[,, (, gradientAtTrustRegionCenter, ., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if]
[), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, )]
[/, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -]
[), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm]
[-, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints]
[*, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f]
[., getEntry, (, nfxm, ), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *]
[), *, stepb, -, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&]
[-, tmp, *, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints]
[), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm]
[*, stepa, ), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry]
[), /, diff, ), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm]
[), ;, if, (, stepa, *, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, )]
[), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, .]
[&&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints]
[<, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm]
[*, stepb, <, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry]
[<, ZERO, &&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm]
[&&, f, <, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints]
[), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, .]
[<, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry]
[), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, .]
[., getEntry, (, nfm, -, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm]
[), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints]
[-, n, ), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), )]
[), ), {, fAtInterpolationPoints, ., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints]
[;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex]
[., setEntry, (, nfm, ,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm]
[,, fAtInterpolationPoints, ., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f]
[), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {]
[., getEntry, (, nfm, -, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;]
[), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, )]
[-, n, ), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==]
[), ), ;, fAtInterpolationPoints, ., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, )]
[;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm]
[., setEntry, (, nfm, -, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm]
[,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, .]
[-, n, ,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }]
[,, f, ), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, .]
[), ;, if, (, trustRegionCenterInterpolationPointIndex, ==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (]
[), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb]
[==, nfm, ), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm]
[), {, trustRegionCenterInterpolationPointIndex, =, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb]
[=, nfm, -, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints]
[;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm]
[-, n, ;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry]
[;, }, interpolationPoints, ., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm]
[;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm]
[., setEntry, (, nfm, -, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,]
[,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, .]
[-, n, ,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }]
[,, nfxm, ,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, .]
[,, stepb, ), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (]
[), ;, interpolationPoints, ., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,]
[;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa, *]
[., setEntry, (, nfm, ,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -]
[,, nfxm, ,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb]
[,, stepa, ), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /]
[), ;, }, bMatrix, ., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa]
[;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,]
[., setEntry, (, 0, ,, nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa, *, stepb, ), )]
[,, nfxm, ,, -, (, stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry]
[,, -, (, stepa, +, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm]
[), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n]
[/, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints]
[/, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints]
[), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /]
[+, stepb, ), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -]
[), /, (, stepa, *, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /]
[), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n]
[), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -]
[*, stepb, ), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (]
[), ), ;, bMatrix, ., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -]
[;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, )]
[., setEntry, (, nfm, ,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, )]
[,, nfxm, ,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, .]
[,, -, HALF, /, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (]
[), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm]
[/, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n]
[/, interpolationPoints, ., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n]
[), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm]
[., getEntry, (, nfm, -, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm]
[,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (]
[-, n, ,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, .]
[,, nfxm, ), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (]
[), ), ;, bMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,]
[;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb]
[., setEntry, (, nfm, -, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix]
[,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm]
[-, n, ,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm]
[,, nfxm, ,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm]
[,, -, bMatrix, ., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), )]
[), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *]
[-, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math]
[-, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math]
[., getEntry, (, 0, ,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, .]
[,, nfxm, ), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,]
[), -, bMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,]
[), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *]
[., getEntry, (, nfm, ,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt]
[,, nfxm, ), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /]
[), ), ;, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa]
[;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix]
[., setEntry, (, 0, ,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), )]
[,, nfxm, ,, Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry]
[,, Math, ., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm]
[), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;]
[/, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (]
[., sqrt, (, TWO, ), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm]
[), /, (, stepa, *, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt]
[), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;]
[), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, )]
[*, stepb, ), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /]
[), ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, )]
[;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, )]
[., setEntry, (, nfm, ,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry]
[,, nfxm, ,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n]
[,, Math, ., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm]
[), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm]
[/, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0]
[., sqrt, (, HALF, ), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -]
[), /, rhosq, ), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (]
[), ;, zMatrix, ., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm]
[;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (]
[., setEntry, (, nfm, -, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -, zMatrix]
[,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,, nfxm]
[-, n, ,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm]
[,, nfxm, ,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,, nfxm]
[,, -, zMatrix, ., getEntry, (, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), )]
[), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry]
[-, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0]
[-, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0]
[., getEntry, (, 0, ,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }]
[,, nfxm, ), -, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, .]
[), -, zMatrix, ., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (]
[), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry]
[., getEntry, (, nfm, ,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm]
[,, nfxm, ), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;]
[), ), ;, }, }, else, {, zMatrix, ., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, .]
[;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,]
[., setEntry, (, 0, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, )]
[,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry]
[,, recip, ), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt]
[), ;, zMatrix, ., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm]
[;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm]
[., setEntry, (, nfm, ,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip]
[,, nfxm, ,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, .]
[,, recip, ), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (]
[), ;, zMatrix, ., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,]
[;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (]
[., setEntry, (, ipt, ,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -]
[,, nfxm, ,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final]
[,, -, recip, ), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih]
[), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *]
[), ;, zMatrix, ., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *]
[;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;, final]
[., setEntry, (, jpt, ,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (, ipt, -]
[,, nfxm, ,, -, recip, ), ;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /, 2]
[,, -, recip, ), ;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt]
[), ;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;]
[), ;, final, int, ih, =, ipt, *, (, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;]
[;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (]
[-, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, .]
[+, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *]
[/, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1]
[*, (, ipt, -, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry]
[/, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1]
[), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -]
[-, 1, ), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,]
[), /, 2, +, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -]
[+, jpt, -, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *]
[-, 1, ;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, .]
[;, final, double, tmp, =, interpolationPoints, ., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (]
[;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry]
[*, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg]
[., getEntry, (, nfm, ,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, )]
[,, ipt, -, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry]
[), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (]
[-, 1, ), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih]
[), *, interpolationPoints, ., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (]
[;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry]
[., getEntry, (, nfm, ,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints]
[,, jpt, -, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt]
[), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, .]
[-, 1, ), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -]
[), ;, modelSecondDerivativesValues, ., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, .]
[;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private, double, [, ], trsbox, (, double]
[., setEntry, (, ih, ,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt]
[,, (, fbeg, -, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, )]
[), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private, double, [, ], trsbox, (]
[/, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private, double, [, ]]
[), /, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private, double, []
[+, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private]
[-, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations, (]
[-, fAtInterpolationPoints, ., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /, tmp, )]
[-, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations, (]
[., getEntry, (, ipt, ), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }]
[), -, fAtInterpolationPoints, ., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations]
[+, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private]
[., getEntry, (, jpt, ), +, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <]
[), +, f, ), /, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }]
[), /, tmp, ), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private, double, []
[), ;, }, }, while, (, getEvaluations, (, ), <, npt, ), ;, }, private, double, [, ], trsbox, (]
[), ;, }, private, double, [, ], trsbox, (, double, delta, ,, ArrayRealVector, gnew, ,, ArrayRealVector, xbdi, ,, ArrayRealVector, s]
[<, npt, ), ;, }, private, double, [, ], trsbox, (, double, delta, ,, ArrayRealVector, gnew, ,, ArrayRealVector, xbdi, ,]
[), ;, }, private, double, [, ], trsbox, (, double, delta, ,, ArrayRealVector, gnew, ,, ArrayRealVector, xbdi, ,, ArrayRealVector, s]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, double, dsq, =]
[;, final, int, npt, =, numberOfInterpolationPoints, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN]
[., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, double, dsq, =, Double, ., NaN, ;, double, crvmin]
[;, double, dsq, =, Double, ., NaN, ;, double, crvmin, =, Double, ., NaN, ;, double, ds, ;, int, iu]
[;, double, crvmin, =, Double, ., NaN, ;, double, ds, ;, int, iu, ;, double, dhd, ,, dhs, ,, cth]
[., NaN, ;, double, crvmin, =, Double, ., NaN, ;, double, ds, ;, int, iu, ;, double, dhd, ,, dhs]
[;, double, ds, ;, int, iu, ;, double, dhd, ,, dhs, ,, cth, ,, shs, ,, sth, ,, ssq, ,]
[., NaN, ;, double, ds, ;, int, iu, ;, double, dhd, ,, dhs, ,, cth, ,, shs, ,, sth, ,]
[,, sdec, ,, blen, ;, int, iact, =, -, 1, ;, int, nact, =, 0, ;, double, angt, =, 0]
[;, int, nact, =, 0, ;, double, angt, =, 0, ,, qred, ;, int, isav, ;, double, temp, =, 0]
[;, int, nact, =, 0, ;, double, angt, =, 0, ,, qred, ;, int, isav, ;, double, temp, =, 0]
[;, double, angt, =, 0, ,, qred, ;, int, isav, ;, double, temp, =, 0, ,, xsav, =, 0, ,]
[,, qred, ;, int, isav, ;, double, temp, =, 0, ,, xsav, =, 0, ,, xsum, =, 0, ,, angbd]
[,, xsav, =, 0, ,, xsum, =, 0, ,, angbd, =, 0, ,, dredg, =, 0, ,, sredg, =, 0]
[,, xsum, =, 0, ,, angbd, =, 0, ,, dredg, =, 0, ,, sredg, =, 0, ;, int, iterc, ;]
[,, angbd, =, 0, ,, dredg, =, 0, ,, sredg, =, 0, ;, int, iterc, ;, double, resid, =, 0]
[,, dredg, =, 0, ,, sredg, =, 0, ;, int, iterc, ;, double, resid, =, 0, ,, delsq, =, 0]
[,, sredg, =, 0, ;, int, iterc, ;, double, resid, =, 0, ,, delsq, =, 0, ,, ggsav, =, 0]
[;, int, iterc, ;, double, resid, =, 0, ,, delsq, =, 0, ,, ggsav, =, 0, ,, tempa, =, 0]
[,, delsq, =, 0, ,, ggsav, =, 0, ,, tempa, =, 0, ,, tempb, =, 0, ,, redmax, =, 0]
[,, ggsav, =, 0, ,, tempa, =, 0, ,, tempb, =, 0, ,, redmax, =, 0, ,, dredsq, =, 0]
[,, tempa, =, 0, ,, tempb, =, 0, ,, redmax, =, 0, ,, dredsq, =, 0, ,, redsav, =, 0]
[,, tempb, =, 0, ,, redmax, =, 0, ,, dredsq, =, 0, ,, redsav, =, 0, ,, gredsq, =, 0]
[,, redmax, =, 0, ,, dredsq, =, 0, ,, redsav, =, 0, ,, gredsq, =, 0, ,, rednew, =, 0]
[,, dredsq, =, 0, ,, redsav, =, 0, ,, gredsq, =, 0, ,, rednew, =, 0, ;, int, itcsav, =]
[,, redsav, =, 0, ,, gredsq, =, 0, ,, rednew, =, 0, ;, int, itcsav, =, 0, ;, double, rdprev]
[,, gredsq, =, 0, ,, rednew, =, 0, ;, int, itcsav, =, 0, ;, double, rdprev, =, 0, ,, rdnext]
[,, rednew, =, 0, ;, int, itcsav, =, 0, ;, double, rdprev, =, 0, ,, rdnext, =, 0, ,, stplen]
[;, int, itcsav, =, 0, ;, double, rdprev, =, 0, ,, rdnext, =, 0, ,, stplen, =, 0, ,, stepsq]
[;, double, rdprev, =, 0, ,, rdnext, =, 0, ,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax]
[,, rdnext, =, 0, ,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax, =, 0, ;, iterc, =]
[,, stplen, =, 0, ,, stepsq, =, 0, ;, int, itermax, =, 0, ;, iterc, =, 0, ;, nact, =]
[,, stepsq, =, 0, ;, int, itermax, =, 0, ;, iterc, =, 0, ;, nact, =, 0, ;, for, (]
[;, int, itermax, =, 0, ;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0]
[;, iterc, =, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, 0, ;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, nact, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, xbdi, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, xbdi, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (]
[;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (]
[<, n, ;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, .]
[;, i, ++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (]
[), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=]
[++, ), {, xbdi, ., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, )]
[;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (]
[., setEntry, (, i, ,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry]
[,, ZERO, ), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), )]
[), ;, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if]
[), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,]
[<=, lowerDifference, ., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, )]
[., getEntry, (, i, ), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (]
[), <=, lowerDifference, ., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO]
[), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {, xbdi]
[), ), {, if, (, gradientAtTrustRegionCenter, ., getEntry, (, i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i]
[), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (]
[>=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, .]
[., getEntry, (, i, ), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }]
[), >=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset]
[), {, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (]
[;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, ), &&]
[., setEntry, (, i, ,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=]
[,, MINUS_ONE, ), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (]
[), ;, }, }, else, if, (, trustRegionCenterOffset, ., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, )]
[), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, )]
[&&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;]
[>=, upperDifference, ., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi, .]
[., getEntry, (, i, ), >=, upperDifference, ., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=]
[), >=, upperDifference, ., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi]
[&&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;]
[., getEntry, (, i, ), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (]
[), &&, gradientAtTrustRegionCenter, ., getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, )]
[), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, )]
[<=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (]
[., getEntry, (, i, ), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if]
[), <=, ZERO, ), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry]
[), {, xbdi, ., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, )]
[;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, .]
[., setEntry, (, i, ,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, )]
[,, ONE, ), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;]
[), ;, }, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint]
[), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i]
[!=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry]
[., getEntry, (, i, ), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO]
[), !=, ZERO, ), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, .]
[), {, ++, nact, ;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i]
[;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry]
[;, }, trialStepPoint, ., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry]
[;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta, *]
[., setEntry, (, i, ,, ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, )]
[,, ZERO, ), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq]
[), ;, gnew, ., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta]
[;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =, 20]
[., setEntry, (, i, ,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta, *, delta, ;]
[,, gradientAtTrustRegionCenter, ., getEntry, (, i, ), ), ;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;]
[), ;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =]
[., getEntry, (, i, ), ), ;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;, crvmin, =]
[), ), ;, }, delsq, =, delta, *, delta, ;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state]
[=, delta, *, delta, ;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =, 20, ;, for, (]
[;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;, ), {]
[*, delta, ;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;]
[;, qred, =, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;, ), {]
[=, ZERO, ;, crvmin, =, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;, ), {, switch, (]
[;, crvmin, =, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;, ), {, switch, (, state, )]
[=, MINUS_ONE, ;, int, state, =, 20, ;, for, (, ;, ;, ), {, switch, (, state, ), {, case]
[;, int, state, =, 20, ;, for, (, ;, ;, ), {, switch, (, state, ), {, case, 20, :]
[;, for, (, ;, ;, ), {, switch, (, state, ), {, case, 20, :, {, printState, (, 20, )]
[), {, case, 20, :, {, printState, (, 20, ), ;, beta, =, ZERO, ;, }, case, 30, :, {]
[:, {, printState, (, 20, ), ;, beta, =, ZERO, ;, }, case, 30, :, {, printState, (, 30, )]
[;, beta, =, ZERO, ;, }, case, 30, :, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for]
[), ;, beta, =, ZERO, ;, }, case, 30, :, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;]
[=, ZERO, ;, }, case, 30, :, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int]
[;, }, case, 30, :, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =]
[:, {, printState, (, 30, ), ;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), ;, stepsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, .]
[;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, )]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, s, ., setEntry]
[<, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, s]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, s, ., setEntry]
[), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, s, ., setEntry, (, i, ,]
[++, ), {, if, (, xbdi, ., getEntry, (, i, ), !=, ZERO, ), {, s, ., setEntry, (, i]
[), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {]
[!=, ZERO, ), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO]
[., getEntry, (, i, ), !=, ZERO, ), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else]
[), !=, ZERO, ), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==]
[), {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {]
[;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (, i, ,, -, gnew, ., getEntry]
[., setEntry, (, i, ,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry]
[,, ZERO, ), ;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (, i, ,, -]
[), ;, }, else, if, (, beta, ==, ZERO, ), {, s, ., setEntry, (, i, ,, -, gnew, .]
[), {, s, ., setEntry, (, i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {]
[==, ZERO, ), {, s, ., setEntry, (, i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }]
[), {, s, ., setEntry, (, i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {]
[;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, ), -, gnew]
[., setEntry, (, i, ,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry]
[,, -, gnew, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, beta]
[), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, ), -]
[), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, .]
[), ), ;, }, else, {, s, ., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, )]
[;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;, }]
[., setEntry, (, i, ,, beta, *, s, ., getEntry, (, i, ), -, gnew, ., getEntry, (, i, )]
[,, beta, *, s, ., getEntry, (, i, ), -, gnew, ., getEntry, (, i, ), ), ;, }, final]
[), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;]
[-, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, )]
[*, s, ., getEntry, (, i, ), -, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1]
[-, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, )]
[., getEntry, (, i, ), -, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, s]
[), -, gnew, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i]
[), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;]
[., getEntry, (, i, ), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq]
[), ), ;, }, final, double, d1, =, s, ., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1]
[;, stepsq, +=, d1, *, d1, ;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break]
[., getEntry, (, i, ), ;, stepsq, +=, d1, *, d1, ;, }, if, (, stepsq, ==, ZERO, ), {]
[), ;, stepsq, +=, d1, *, d1, ;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;]
[+=, d1, *, d1, ;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }]
[;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (, beta, ==]
[*, d1, ;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (]
[;, }, if, (, stepsq, ==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (, beta, ==]
[), {, state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;]
[==, ZERO, ), {, state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =]
[), {, state, =, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;]
[=, 190, ;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc]
[;, break, ;, }, if, (, beta, ==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n]
[), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq]
[==, ZERO, ), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq]
[), {, gredsq, =, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq]
[=, stepsq, ;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *]
[;, itermax, =, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *]
[=, iterc, +, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, )]
[;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break]
[-, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190]
[+, n, -, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state]
[-, nact, ;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190]
[;, }, if, (, gredsq, *, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break]
[), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {]
[<=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break]
[*, delsq, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, state, =, 210]
[<=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break]
[), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {]
[*, qred, ), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50]
[*, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }]
[*, qred, ), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50]
[), {, state, =, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {]
[=, 190, ;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {, printState, (, 50]
[;, break, ;, }, state, =, 210, ;, break, ;, }, case, 50, :, {, printState, (, 50, ), ;]
[=, 210, ;, break, ;, }, case, 50, :, {, printState, (, 50, ), ;, resid, =, delsq, ;, ds]
[;, break, ;, }, case, 50, :, {, printState, (, 50, ), ;, resid, =, delsq, ;, ds, =, ZERO]
[:, {, printState, (, 50, ), ;, resid, =, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for]
[;, resid, =, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;]
[), ;, resid, =, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0]
[=, delsq, ;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, ds, =, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, shs, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, .]
[;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, )]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1]
[<, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, .]
[++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, trialStepPoint]
[), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds]
[==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1]
[., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;]
[), ==, ZERO, ), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *]
[), {, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds]
[;, resid, -=, d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (]
[., getEntry, (, i, ), ;, resid, -=, d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, )]
[), ;, resid, -=, d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry]
[-=, d1, *, d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, )]
[;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s]
[*, d1, ;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs]
[;, ds, +=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s]
[+=, s, ., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry]
[;, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if]
[*, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry]
[., getEntry, (, i, ), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (, i]
[), *, trialStepPoint, ., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (, i, ), *, hs, .]
[;, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if]
[., getEntry, (, i, ), ;, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i]
[), ;, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }]
[+=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if, (, resid]
[;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math]
[*, hs, ., getEntry, (, i, ), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90]
[., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, }, }, if, (, resid, <=, ZERO]
[), *, hs, ., getEntry, (, i, ), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =]
[;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math]
[., getEntry, (, i, ), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break]
[), ;, }, }, if, (, resid, <=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =]
[), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds]
[<=, ZERO, ), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid]
[), {, state, =, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds]
[=, 90, ;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds, *, ds, )]
[;, break, ;, }, temp, =, Math, ., sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if]
[=, Math, ., sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, )]
[;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else]
[., sqrt, (, stepsq, *, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen]
[), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }]
[+, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, )]
[*, resid, +, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -]
[+, ds, *, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, )]
[), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }]
[*, ds, ), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq]
[), ;, if, (, ds, <, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }]
[), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (]
[<, ZERO, ), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid]
[), {, blen, =, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (]
[=, (, temp, -, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +, ds]
[;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if]
[/, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen]
[), /, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =]
[-, ds, ), /, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }]
[), /, stepsq, ;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =]
[;, }, else, {, blen, =, resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if]
[=, resid, /, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, )]
[;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen]
[/, (, temp, +, ds, ), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen]
[;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen]
[), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (]
[+, ds, ), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, .]
[), ;, }, stplen, =, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (]
[=, blen, ;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /]
[;, if, (, shs, >, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /, shs, )]
[), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =, -, 1]
[>, ZERO, ), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =]
[), {, stplen, =, Math, ., min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =, -, 1]
[=, Math, ., min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =, -, 1, ;, for, (]
[;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[., min, (, blen, ,, gredsq, /, shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i]
[,, gredsq, /, shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i]
[), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[/, shs, ), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n]
[), ;, }, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[=, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, s, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, s, .]
[;, i, <, n, ;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, )]
[;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset]
[<, n, ;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum]
[;, i, ++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset]
[), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (]
[++, ), {, if, (, s, ., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry]
[), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (]
[!=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, .]
[), !=, ZERO, ), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, )]
[), {, xsum, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (]
[=, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (, s, ., getEntry]
[;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (]
[+, trialStepPoint, ., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {]
[., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i]
[), +, trialStepPoint, ., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, )]
[;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (]
[., getEntry, (, i, ), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =]
[), ;, if, (, s, ., getEntry, (, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry]
[), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i]
[>, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry]
[., getEntry, (, i, ), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum]
[), >, ZERO, ), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /, s, .]
[), {, temp, =, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i]
[=, (, upperDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }]
[;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry]
[/, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, )]
[), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i]
[-, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry]
[., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp]
[), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, .]
[), /, s, ., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i]
[;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry]
[., getEntry, (, i, ), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -, xsum]
[), ;, }, else, {, temp, =, (, lowerDifference, ., getEntry, (, i, ), -, xsum, ), /, s, .]
[=, (, lowerDifference, ., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }]
[;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }]
[/, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;]
[), /, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen, =, temp]
[-, xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen]
[., getEntry, (, i, ), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (, temp]
[), -, xsum, ), /, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {]
[), /, s, ., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen, =, temp]
[;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }]
[., getEntry, (, i, ), ;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;, iact, =]
[), ;, }, if, (, temp, <, stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }]
[), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen]
[<, stplen, ), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if]
[), {, stplen, =, temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen]
[=, temp, ;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, )]
[;, iact, =, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++]
[=, i, ;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;]
[;, }, }, }, sdec, =, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =]
[=, ZERO, ;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if]
[;, if, (, stplen, >, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact]
[), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >]
[>, ZERO, ), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&]
[), {, ++, iterc, ;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >]
[;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin]
[;, temp, =, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin]
[=, shs, /, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =, Math]
[;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin]
[/, stepsq, ;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min]
[;, if, (, iact, ==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin]
[), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {]
[&&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin]
[==, -, 1, &&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;]
[&&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin]
[&&, temp, >, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin]
[), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {]
[>, ZERO, ), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE]
[), {, crvmin, =, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {]
[=, Math, ., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp]
[;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =]
[., min, (, crvmin, ,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }]
[,, temp, ), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq]
[), ;, if, (, crvmin, ==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq]
[), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i]
[==, MINUS_ONE, ), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (]
[), {, crvmin, =, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i]
[=, temp, ;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;]
[;, }, }, ggsav, =, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[=, gredsq, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i]
[;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *]
[<, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *]
[), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, ., getEntry]
[++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, .]
[;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry]
[., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, ., getEntry, (, i, )]
[,, gnew, ., getEntry, (, i, ), +, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, .]
[+, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==]
[., getEntry, (, i, ), +, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, .]
[), +, stplen, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, )]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, .]
[*, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, )]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, .]
[., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final]
[), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew]
[), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }]
[==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1]
[., getEntry, (, i, ), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;]
[), ==, ZERO, ), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *]
[), {, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }]
[;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, )]
[., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint]
[), ;, gredsq, +=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i]
[+=, d1, *, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen]
[;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *, s, ., getEntry]
[*, d1, ;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *, s]
[;, }, trialStepPoint, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *, s, ., getEntry]
[;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec, =]
[., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *, s, ., getEntry, (, i, )]
[,, trialStepPoint, ., getEntry, (, i, ), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final]
[), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec]
[+, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav]
[., getEntry, (, i, ), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1]
[), +, stplen, *, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (]
[), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec]
[*, s, ., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF]
[), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec]
[., getEntry, (, i, ), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen]
[), ), ;, }, final, double, d1, =, stplen, *, (, ggsav, -, HALF, *, stplen, *, shs, ), ;]
[;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact]
[*, (, ggsav, -, HALF, *, stplen, *, shs, ), ;, sdec, =, Math, ., max, (, d1, ,, ZERO]
[;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact]
[), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (]
[-, HALF, *, stplen, *, shs, ), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred]
[), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (]
[*, shs, ), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }]
[*, stplen, *, shs, ), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec]
[*, shs, ), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }]
[), ;, sdec, =, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (]
[=, Math, ., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0]
[;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (]
[., max, (, d1, ,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {]
[,, ZERO, ), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;, xbdi]
[), ;, qred, +=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry]
[+=, sdec, ;, }, if, (, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,]
[;, }, if, (, iact, >=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, )]
[), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (]
[>=, 0, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (, s, .]
[), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (]
[;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO]
[;, xbdi, ., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO]
[;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE]
[., setEntry, (, iact, ,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {]
[,, ONE, ), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {, xbdi, ., setEntry, (]
[), ;, if, (, s, ., getEntry, (, iact, ), <, ZERO, ), {, xbdi, ., setEntry, (, iact, ,]
[), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (]
[<, ZERO, ), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, .]
[., getEntry, (, iact, ), <, ZERO, ), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final]
[), <, ZERO, ), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint]
[), {, xbdi, ., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (]
[;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;, if]
[., setEntry, (, iact, ,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;]
[,, MINUS_ONE, ), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *]
[), ;, }, final, double, d1, =, trialStepPoint, ., getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;]
[;, delsq, -=, d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break, ;]
[., getEntry, (, iact, ), ;, delsq, -=, d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {, state]
[), ;, delsq, -=, d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break]
[-=, d1, *, d1, ;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, state]
[;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break]
[*, d1, ;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, state, =, 20]
[;, if, (, delsq, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break]
[), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <]
[<=, ZERO, ), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break, ;, }, if, (]
[), {, state, =, 190, ;, break, ;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <]
[=, 190, ;, break, ;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <, blen, ), {]
[;, break, ;, }, state, =, 20, ;, break, ;, }, if, (, stplen, <, blen, ), {, if, (]
[=, 20, ;, break, ;, }, if, (, stplen, <, blen, ), {, if, (, iterc, ==, itermax, ), {]
[;, break, ;, }, if, (, stplen, <, blen, ), {, if, (, iterc, ==, itermax, ), {, state, =]
[), {, if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=]
[<, blen, ), {, if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (]
[), {, if, (, iterc, ==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=]
[), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =]
[==, itermax, ), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {]
[), {, state, =, 190, ;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =]
[=, 190, ;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =, 190, ;, break]
[;, break, ;, }, if, (, sdec, <=, qred, *, .01, ), {, state, =, 190, ;, break, ;, }]
[), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break]
[<=, qred, *, .01, ), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state]
[), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break]
[*, .01, ), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30]
[), {, state, =, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break]
[=, 190, ;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break, ;, }, }]
[;, break, ;, }, beta, =, gredsq, /, ggsav, ;, state, =, 30, ;, break, ;, }, }, case, 90]
[=, gredsq, /, ggsav, ;, state, =, 30, ;, break, ;, }, }, case, 90, :, {, printState, (, 90]
[;, state, =, 30, ;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;, crvmin, =]
[/, ggsav, ;, state, =, 30, ;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;]
[;, state, =, 30, ;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;, crvmin, =]
[=, 30, ;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;, crvmin, =, ZERO, ;]
[;, break, ;, }, }, case, 90, :, {, printState, (, 90, ), ;, crvmin, =, ZERO, ;, }, case]
[:, {, printState, (, 90, ), ;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, )]
[;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=, n]
[), ;, crvmin, =, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=]
[=, ZERO, ;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=, n, -, 1]
[;, }, case, 100, :, {, printState, (, 100, ), ;, if, (, nact, >=, n, -, 1, ), {]
[:, {, printState, (, 100, ), ;, if, (, nact, >=, n, -, 1, ), {, state, =, 190, ;]
[;, if, (, nact, >=, n, -, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO]
[), ;, if, (, nact, >=, n, -, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =]
[), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO]
[>=, n, -, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO]
[), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO]
[-, 1, ), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq]
[), {, state, =, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO]
[=, 190, ;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (]
[;, break, ;, }, dredsq, =, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i]
[=, ZERO, ;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, .]
[;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, )]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =]
[<, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry]
[++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, .]
[), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=]
[==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;]
[., getEntry, (, i, ), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq]
[), ==, ZERO, ), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1]
[), {, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=]
[;, dredsq, +=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (]
[., getEntry, (, i, ), ;, dredsq, +=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, )]
[), ;, dredsq, +=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry]
[+=, d1, *, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, )]
[;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew]
[*, d1, ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1]
[;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew]
[+=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry]
[;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (]
[*, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1]
[., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i]
[), *, gnew, ., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=]
[;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (]
[., getEntry, (, i, ), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1]
[), ;, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry]
[=, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (, i, ,]
[;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), )]
[., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, .]
[), ;, gredsq, +=, d1, *, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, )]
[+=, d1, *, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }]
[;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {, s, .]
[*, d1, ;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {]
[;, s, ., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {, s, .]
[;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, itcsav, =, iterc, ;, state]
[., setEntry, (, i, ,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (]
[,, trialStepPoint, ., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, )]
[), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, itcsav, =, iterc, ;]
[., getEntry, (, i, ), ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }]
[), ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, itcsav, =, iterc]
[;, }, }, itcsav, =, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState, (]
[., setEntry, (, i, ,, ZERO, ), ;, }, }, itcsav, =, iterc, ;, state, =, 210, ;, break, ;]
[,, ZERO, ), ;, }, }, itcsav, =, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :]
[), ;, }, }, itcsav, =, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState]
[=, iterc, ;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++]
[;, state, =, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;]
[=, 210, ;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =]
[;, break, ;, }, case, 120, :, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *]
[:, {, printState, (, 120, ), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;]
[;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *]
[), ;, ++, iterc, ;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred]
[;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred]
[;, temp, =, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred]
[=, gredsq, *, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {]
[;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp]
[-, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;]
[*, dredsq, -, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =]
[-, dredg, *, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;]
[;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp]
[*, dredg, ;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;]
[;, if, (, temp, <=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp]
[), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (]
[<=, qred, *, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt]
[), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (]
[*, qred, ), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;]
[*, 1e-4, *, qred, ), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp]
[*, qred, ), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;]
[), {, state, =, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (]
[=, 190, ;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =]
[;, break, ;, }, temp, =, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;]
[=, Math, ., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, .]
[., sqrt, (, temp, ), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[), ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi]
[;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, )]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry]
[<, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,]
[++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i]
[), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *]
[==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, .]
[), ==, ZERO, ), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, )]
[), {, s, ., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *]
[;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp, ;]
[., setEntry, (, i, ,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *, gnew, ., getEntry]
[,, (, dredg, *, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *, gnew, ., getEntry, (, i, ), )]
[), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp]
[/, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =]
[), /, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg]
[-, dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {, s, ., setEntry]
[*, trialStepPoint, ., getEntry, (, i, ), -, dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, )]
[-, dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {, s, ., setEntry]
[., getEntry, (, i, ), -, dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }]
[), -, dredsq, *, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {, s, .]
[), /, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg]
[*, gnew, ., getEntry, (, i, ), ), /, temp, ), ;, }, else, {, s, ., setEntry, (, i]
[), /, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg]
[., getEntry, (, i, ), ), /, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO]
[), ), /, temp, ), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }]
[), ;, }, else, {, s, ., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp]
[;, }, }, sredg, =, -, temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int]
[., setEntry, (, i, ,, ZERO, ), ;, }, }, sredg, =, -, temp, ;, angbd, =, ONE, ;, iact]
[,, ZERO, ), ;, }, }, sredg, =, -, temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;]
[), ;, }, }, sredg, =, -, temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (]
[=, -, temp, ;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;]
[;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n]
[;, angbd, =, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n]
[=, ONE, ;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i]
[;, iact, =, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[=, -, 1, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, .]
[;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, )]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset]
[<, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (]
[++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry]
[), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, .]
[==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, .]
[), ==, ZERO, ), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, )]
[), {, tempa, =, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, .]
[=, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i]
[;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry]
[-, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[+, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry]
[., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;]
[), +, trialStepPoint, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, .]
[-, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i]
[), -, lowerDifference, ., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry]
[., getEntry, (, i, ), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[), ;, tempb, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, .]
[=, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i]
[;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;]
[-, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, .]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=]
[-, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, .]
[., getEntry, (, i, ), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {]
[), -, trialStepPoint, ., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi]
[;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;]
[., getEntry, (, i, ), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (]
[), ;, if, (, tempa, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, )]
[), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;]
[<=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;]
[), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;]
[;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (]
[;, xbdi, ., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (]
[;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;, xbdi]
[., setEntry, (, i, ,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=]
[,, MINUS_ONE, ), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++]
[), ;, state, =, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;]
[=, 100, ;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry]
[;, break, ;, }, else, if, (, tempb, <=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i]
[), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;, break, ;]
[<=, ZERO, ), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;]
[), {, ++, nact, ;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;, break, ;]
[;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;, break, ;, }, double, d1, =]
[;, xbdi, ., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;, break, ;, }, double, d1, =]
[;, state, =, 100, ;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double, d2]
[., setEntry, (, i, ,, ONE, ), ;, state, =, 100, ;, break, ;, }, double, d1, =, trialStepPoint, .]
[,, ONE, ), ;, state, =, 100, ;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, )]
[), ;, state, =, 100, ;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double]
[=, 100, ;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =, s]
[;, break, ;, }, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry]
[;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *, d2]
[., getEntry, (, i, ), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *]
[), ;, double, d2, =, s, ., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *]
[;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -]
[., getEntry, (, i, ), ;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, .]
[), ;, ssq, =, d1, *, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, )]
[=, d1, *, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, .]
[;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq]
[+, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, )]
[*, d1, +, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (]
[+, d2, *, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, )]
[;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq]
[*, d2, ;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp]
[;, d1, =, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq]
[=, trustRegionCenterOffset, ., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1]
[;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, .]
[-, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >]
[., getEntry, (, i, ), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1]
[), -, lowerDifference, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp]
[;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, .]
[., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, )]
[), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math]
[=, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (]
[;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry]
[-, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, )]
[;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry]
[*, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -, s]
[;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry]
[), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (]
[>, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;]
[), {, temp, =, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (]
[=, Math, ., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp]
[;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;]
[-, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa]
[., sqrt, (, temp, ), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa]
[), -, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =]
[;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;]
[., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp]
[), ;, if, (, angbd, *, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i]
[), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =]
[>, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }]
[*, temp, >, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;]
[>, tempa, ), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }]
[), {, angbd, =, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =]
[=, tempa, /, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry]
[;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -]
[/, temp, ;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i]
[;, iact, =, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -]
[=, i, ;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, .]
[;, xsav, =, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[=, MINUS_ONE, ;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, )]
[;, }, }, d1, =, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp]
[=, upperDifference, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1]
[;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, .]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp]
[;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, .]
[., getEntry, (, i, ), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, )]
[), ;, temp, =, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math]
[=, ssq, -, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (]
[;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry]
[-, d1, *, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, )]
[;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry]
[*, d1, ;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +, s]
[;, if, (, temp, >, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry]
[), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (]
[>, ZERO, ), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;]
[), {, temp, =, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (]
[=, Math, ., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp]
[;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;]
[+, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb]
[., sqrt, (, temp, ), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb]
[), +, s, ., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =]
[;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;]
[., getEntry, (, i, ), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp]
[), ;, if, (, angbd, *, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i]
[), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }]
[>, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }]
[*, temp, >, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;]
[>, tempb, ), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }]
[), {, angbd, =, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }]
[=, tempb, /, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }, state, =, 210]
[;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }]
[/, temp, ;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }, state, =, 210, ;, break]
[;, iact, =, i, ;, xsav, =, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }]
[=, i, ;, xsav, =, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }, case, 150]
[;, xsav, =, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }, case, 150, :, {]
[=, ONE, ;, }, }, }, }, state, =, 210, ;, break, ;, }, case, 150, :, {, printState, (]
[;, }, }, }, }, state, =, 210, ;, break, ;, }, case, 150, :, {, printState, (, 150, )]
[=, 210, ;, break, ;, }, case, 150, :, {, printState, (, 150, ), ;, shs, =, ZERO, ;, dhs]
[;, break, ;, }, case, 150, :, {, printState, (, 150, ), ;, shs, =, ZERO, ;, dhs, =, ZERO]
[:, {, printState, (, 150, ), ;, shs, =, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for]
[;, shs, =, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;]
[), ;, shs, =, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0]
[=, ZERO, ;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, dhs, =, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, ZERO, ;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, dhd, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, if, (, xbdi, .]
[;, i, <, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, )]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s]
[<, n, ;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs]
[;, i, ++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s]
[), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s, ., getEntry, (]
[++, ), {, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s, ., getEntry]
[), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=]
[==, ZERO, ), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), ==, ZERO, ), {, shs, +=, s, ., getEntry, (, i, ), *, hs, .]
[), ==, ZERO, ), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, )]
[), {, shs, +=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=]
[+=, s, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry]
[;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint]
[*, hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry]
[., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i]
[), *, hs, ., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, .]
[;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint]
[., getEntry, (, i, ), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i]
[), ;, dhs, +=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=]
[+=, trialStepPoint, ., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry]
[;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax]
[*, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry]
[., getEntry, (, i, ), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (, i]
[), *, hs, ., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, .]
[;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax]
[., getEntry, (, i, ), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i]
[), ;, dhd, +=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }]
[+=, trialStepPoint, ., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO]
[;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int]
[*, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav]
[., getEntry, (, i, ), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav]
[), *, hred, ., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;]
[;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int]
[., getEntry, (, i, ), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO]
[), ;, }, }, redmax, =, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (]
[=, ZERO, ;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (, angbd, *]
[;, isav, =, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (, angbd, *, 17., +]
[=, -, 1, ;, redsav, =, ZERO, ;, iu, =, (, int, ), (, angbd, *, 17., +, 3.1, )]
[;, redsav, =, ZERO, ;, iu, =, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (]
[;, redsav, =, ZERO, ;, iu, =, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (]
[=, ZERO, ;, iu, =, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i]
[;, iu, =, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =, 0]
[=, (, int, ), (, angbd, *, 17., +, 3.1, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *]
[;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *]
[), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd]
[+, 3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt]
[*, 17., +, 3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, )]
[+, 3.1, ), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt]
[), ;, for, (, int, i, =, 0, ;, i, <, iu, ;, i, ++, ), {, angt, =, angbd]
[;, i, <, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (]
[;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, )]
[<, iu, ;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +]
[;, i, ++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, )]
[), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE]
[++, ), {, angt, =, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (]
[=, angbd, *, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *]
[;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs]
[/, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp]
[*, i, /, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, )]
[/, iu, ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp]
[;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs]
[=, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt]
[;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth]
[/, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -]
[), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd]
[+, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt]
[), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd]
[;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =]
[+, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =]
[*, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (]
[;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if]
[+, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *]
[;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if]
[*, (, angt, *, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -]
[;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if]
[), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;]
[-, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp]
[-, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth]
[*, dhd, -, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF]
[-, dhs, -, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth]
[-, dhs, ), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp]
[), ;, rednew, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;]
[=, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew]
[;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;]
[*, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax]
[;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;]
[), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav]
[-, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav]
[-, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew]
[*, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax]
[-, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew]
[-, HALF, *, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav]
[), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav]
[*, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev]
[*, sth, *, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i]
[*, temp, ), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev]
[), ;, if, (, rednew, >, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav]
[), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==]
[>, redmax, ), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (]
[), {, redmax, =, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==]
[=, rednew, ;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +, 1]
[;, isav, =, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {]
[=, i, ;, rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {, rdnext, =]
[;, rdprev, =, redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {, rdnext, =, rednew, ;]
[=, redsav, ;, }, else, if, (, i, ==, isav, +, 1, ), {, rdnext, =, rednew, ;, }, redsav]
[;, }, else, if, (, i, ==, isav, +, 1, ), {, rdnext, =, rednew, ;, }, redsav, =, rednew]
[), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, ), {, state]
[==, isav, +, 1, ), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <]
[), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, ), {, state]
[+, 1, ), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, )]
[), {, rdnext, =, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, ), {, state]
[=, rednew, ;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, ), {, state, =, 190, ;]
[;, }, redsav, =, rednew, ;, }, if, (, isav, <, 0, ), {, state, =, 190, ;, break, ;]
[=, rednew, ;, }, if, (, isav, <, 0, ), {, state, =, 190, ;, break, ;, }, if, (]
[;, }, if, (, isav, <, 0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <]
[), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext]
[<, 0, ), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =]
[), {, state, =, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext]
[=, 190, ;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, )]
[;, break, ;, }, if, (, isav, <, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (]
[), {, temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;]
[<, iu, ), {, temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext]
[), {, temp, =, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;]
[=, (, rdnext, -, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd]
[;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE]
[/, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *]
[), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF]
[-, rdprev, ), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav]
[), /, (, redmax, +, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF]
[;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE]
[), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (]
[-, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth]
[-, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;]
[+, redmax, -, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /]
[-, rdprev, -, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;]
[-, rdnext, ), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth]
[), ;, angt, =, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (]
[=, angbd, *, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt]
[;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;]
[/, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt]
[*, (, isav, +, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt]
[/, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt]
[), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *]
[+, HALF, *, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (]
[), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *]
[*, temp, ), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +]
[), /, iu, ;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *]
[;, }, cth, =, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;]
[=, (, ONE, -, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (]
[;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs]
[/, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +]
[), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE]
[-, angt, *, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt]
[), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE]
[*, angt, ), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /]
[), /, (, ONE, +, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE]
[;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs]
[), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =]
[+, angt, *, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt]
[), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =]
[*, angt, ), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;]
[), ;, sth, =, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =]
[=, (, angt, +, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt]
[;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth]
[/, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -]
[), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd]
[+, angt, ), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt]
[), /, (, ONE, +, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd]
[;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =]
[+, angt, *, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =]
[*, angt, ), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;]
[), ;, temp, =, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =]
[=, shs, +, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (]
[;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if]
[+, angt, *, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *]
[;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if]
[*, (, angt, *, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -]
[;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if]
[), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;]
[-, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp]
[-, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth]
[*, dhd, -, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF]
[-, dhs, -, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth]
[-, dhs, ), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp]
[), ;, sdec, =, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;]
[=, sth, *, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec]
[;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq]
[*, (, angt, *, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO]
[;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq]
[), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;]
[-, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break]
[-, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190]
[*, dredg, -, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state]
[-, sredg, -, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190]
[-, HALF, *, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break]
[), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;]
[*, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =]
[*, sth, *, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }]
[*, temp, ), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =]
[), ;, if, (, sdec, <=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;]
[), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int]
[<=, ZERO, ), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for]
[), {, state, =, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int]
[=, 190, ;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0]
[;, break, ;, }, dredg, =, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i]
[=, ZERO, ;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++]
[;, gredsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, .]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (]
[;, i, <, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i]
[;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth]
[<, n, ;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +]
[;, i, ++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth]
[), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, )]
[++, ), {, gnew, ., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth, -, ONE]
[;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth]
[., setEntry, (, i, ,, gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, .]
[,, gnew, ., getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, )]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,]
[+, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==]
[+, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (]
[., getEntry, (, i, ), +, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +, sth]
[), +, (, cth, -, ONE, ), *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry]
[+, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==]
[*, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (]
[), *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if]
[-, ONE, ), *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), )]
[), *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if]
[+, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==]
[., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, .]
[), +, sth, *, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, )]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,]
[*, hs, ., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, )]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,]
[., getEntry, (, i, ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint]
[), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i]
[), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s]
[==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth]
[., getEntry, (, i, ), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry]
[), ==, ZERO, ), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +]
[), {, trialStepPoint, ., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s]
[;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double, d1]
[., setEntry, (, i, ,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (]
[,, cth, *, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;]
[), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double]
[+, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *]
[*, trialStepPoint, ., getEntry, (, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=]
[+, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *]
[., getEntry, (, i, ), +, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, .]
[), +, sth, *, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, )]
[), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double]
[*, s, ., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, .]
[), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double]
[., getEntry, (, i, ), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (]
[), ), ;, dredg, +=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final]
[+=, trialStepPoint, ., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew]
[;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred]
[*, gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq]
[., getEntry, (, i, ), *, gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry]
[), *, gnew, ., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;]
[;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred]
[., getEntry, (, i, ), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1]
[), ;, final, double, d1, =, gnew, ., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }]
[;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (]
[., getEntry, (, i, ), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth]
[), ;, gredsq, +=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry]
[+=, d1, *, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, )]
[;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +, sth, *, hs]
[*, d1, ;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +, sth]
[;, }, hred, ., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +, sth, *, hs]
[;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact, ;]
[., setEntry, (, i, ,, cth, *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (]
[,, cth, *, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;]
[), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact]
[+, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=]
[*, hred, ., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred]
[+, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=]
[., getEntry, (, i, ), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec]
[), +, sth, *, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact]
[), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact]
[*, hs, ., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&]
[), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact]
[., getEntry, (, i, ), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==]
[), ), ;, }, qred, +=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++]
[+=, sdec, ;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry]
[;, if, (, iact, >=, 0, &&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact]
[), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;]
[&&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =]
[>=, 0, &&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;]
[&&, isav, ==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =]
[), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;]
[==, iu, ), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;]
[), {, ++, nact, ;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;]
[;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec]
[;, xbdi, ., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec]
[;, state, =, 100, ;, break, ;, }, if, (, sdec, >, qred, *, .01, ), {, state, =, 120]
[., setEntry, (, iact, ,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >, qred]
[,, xsav, ), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >, qred, *, .01, ), {]
[), ;, state, =, 100, ;, break, ;, }, if, (, sdec, >, qred, *, .01, ), {, state, =]
[=, 100, ;, break, ;, }, if, (, sdec, >, qred, *, .01, ), {, state, =, 120, ;, break]
[;, break, ;, }, if, (, sdec, >, qred, *, .01, ), {, state, =, 120, ;, break, ;, }]
[), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (, 190, ), ;, dsq]
[>, qred, *, .01, ), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (]
[), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (, 190, ), ;, dsq]
[*, .01, ), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (, 190, )]
[), {, state, =, 120, ;, break, ;, }, }, case, 190, :, {, printState, (, 190, ), ;, dsq]
[=, 120, ;, break, ;, }, }, case, 190, :, {, printState, (, 190, ), ;, dsq, =, ZERO, ;]
[;, break, ;, }, }, case, 190, :, {, printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (]
[:, {, printState, (, 190, ), ;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <]
[;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), ;, dsq, =, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[=, ZERO, ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double]
[;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, min, =]
[;, i, <, n, ;, i, ++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry]
[;, i, ++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[<, n, ;, i, ++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i]
[;, i, ++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +]
[), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry]
[++, ), {, final, double, min, =, Math, ., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, .]
[;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), )]
[., min, (, trustRegionCenterOffset, ., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry]
[,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min]
[+, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (]
[., getEntry, (, i, ), +, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), )]
[), +, trialStepPoint, ., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry]
[,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min]
[., getEntry, (, i, ), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,]
[), ,, upperDifference, ., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (]
[), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i, )]
[., getEntry, (, i, ), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min, ,, lowerDifference]
[), ), ;, newPoint, ., setEntry, (, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i]
[;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference]
[., setEntry, (, i, ,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;]
[,, Math, ., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (, xbdi, .]
[), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,]
[., max, (, min, ,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (, xbdi, ., getEntry, (]
[,, lowerDifference, ., getEntry, (, i, ), ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE]
[), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i]
[., getEntry, (, i, ), ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {]
[), ), ), ;, if, (, xbdi, ., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (]
[), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (, xbdi]
[==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if]
[., getEntry, (, i, ), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i]
[), ==, MINUS_ONE, ), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }]
[), {, newPoint, ., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (, xbdi]
[;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,]
[., setEntry, (, i, ,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (, xbdi, ., getEntry, (]
[,, lowerDifference, ., getEntry, (, i, ), ), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE]
[), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (, i]
[., getEntry, (, i, ), ), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {]
[), ), ;, }, if, (, xbdi, ., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (]
[), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry]
[==, ONE, ), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint]
[., getEntry, (, i, ), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i]
[), ==, ONE, ), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }]
[), {, newPoint, ., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry]
[;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i]
[., setEntry, (, i, ,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,]
[,, upperDifference, ., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (]
[), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (]
[., getEntry, (, i, ), ), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, )]
[), ), ;, }, trialStepPoint, ., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry]
[;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }, return]
[., setEntry, (, i, ,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;]
[,, newPoint, ., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =]
[), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }]
[-, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;]
[., getEntry, (, i, ), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, .]
[), -, trustRegionCenterOffset, ., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, )]
[), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }]
[., getEntry, (, i, ), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=]
[), ), ;, final, double, d1, =, trialStepPoint, ., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;]
[;, dsq, +=, d1, *, d1, ;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }]
[., getEntry, (, i, ), ;, dsq, +=, d1, *, d1, ;, }, return, new, double, [, ], {, dsq]
[), ;, dsq, +=, d1, *, d1, ;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;]
[+=, d1, *, d1, ;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }, case, 210]
[;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }, case, 210, :, {, printState, (]
[*, d1, ;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }, case, 210, :, {]
[;, }, return, new, double, [, ], {, dsq, ,, crvmin, }, ;, }, case, 210, :, {, printState, (]
[;, }, case, 210, :, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int, j]
[;, }, case, 210, :, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int, j]
[,, crvmin, }, ;, }, case, 210, :, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for]
[}, ;, }, case, 210, :, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int]
[:, {, printState, (, 210, ), ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j]
[;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, )]
[), ;, int, ih, =, 0, ;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++]
[;, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, hs, ., setEntry, (]
[;, j, <, n, ;, j, ++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (]
[;, j, ++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0]
[<, n, ;, j, ++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i]
[;, j, ++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0]
[), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=]
[++, ), {, hs, ., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i]
[;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i, <]
[., setEntry, (, j, ,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i]
[,, ZERO, ), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if]
[), ;, for, (, int, i, =, 0, ;, i, <=, j, ;, i, ++, ), {, if, (, i]
[;, i, <=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (]
[;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, .]
[<=, j, ;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,]
[;, i, ++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, .]
[), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j]
[++, ), {, if, (, i, <, j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (]
[), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[<, j, ), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry]
[), {, hs, ., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih]
[., setEntry, (, j, ,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s]
[,, hs, ., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, i]
[), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[+, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry]
[., getEntry, (, j, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, i, ), )]
[), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }, hs, .]
[), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[*, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (]
[., getEntry, (, ih, ), *, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i]
[), *, s, ., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry]
[), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (]
[., getEntry, (, i, ), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, )]
[), ), ;, }, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry]
[;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters]
[., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s]
[,, hs, ., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, j]
[), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (]
[+, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, j, ), ), ;, ih, ++, ;, }]
[., getEntry, (, i, ), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, j, ), )]
[), +, modelSecondDerivativesValues, ., getEntry, (, ih, ), *, s, ., getEntry, (, j, ), ), ;, ih, ++, ;]
[), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (]
[*, s, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, .]
[., getEntry, (, ih, ), *, s, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final]
[), *, s, ., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints]
[), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (]
[., getEntry, (, j, ), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (]
[), ), ;, ih, ++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply]
[;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for]
[++, ;, }, }, final, RealVector, tmp, =, interpolationPoints, ., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, modelSecondDerivativesParameters, .]
[., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[., operate, (, s, ), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <]
[), ., ebeMultiply, (, modelSecondDerivativesParameters, ), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[), ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, if, (, modelSecondDerivativesParameters]
[;, k, <, npt, ;, k, ++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, )]
[;, k, ++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int]
[<, npt, ;, k, ++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for]
[;, k, ++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int]
[), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =, 0]
[++, ), {, if, (, modelSecondDerivativesParameters, ., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hs, ., setEntry]
[!=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hs]
[., getEntry, (, k, ), !=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;]
[), !=, ZERO, ), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[), {, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hs, ., setEntry]
[;, i, <, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i]
[;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, .]
[<, n, ;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +]
[;, i, ++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, .]
[), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (, k]
[++, ), {, hs, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (]
[;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if, (]
[., setEntry, (, i, ,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (, k, ), *, interpolationPoints]
[,, hs, ., getEntry, (, i, ), +, tmp, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k]
[), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if]
[+, tmp, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }]
[., getEntry, (, i, ), +, tmp, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, i]
[), +, tmp, ., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }]
[), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if]
[*, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, crvmin, !=, ZERO, )]
[., getEntry, (, k, ), *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if]
[), *, interpolationPoints, ., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, crvmin, !=, ZERO]
[), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }, if]
[., getEntry, (, k, ,, i, ), ), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state]
[,, i, ), ), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break]
[), ), ;, }, }, }, if, (, crvmin, !=, ZERO, ), {, state, =, 50, ;, break, ;, }]
[), {, state, =, 50, ;, break, ;, }, if, (, iterc, >, itcsav, ), {, state, =, 150, ;]
[!=, ZERO, ), {, state, =, 50, ;, break, ;, }, if, (, iterc, >, itcsav, ), {, state, =]
[), {, state, =, 50, ;, break, ;, }, if, (, iterc, >, itcsav, ), {, state, =, 150, ;]
[=, 50, ;, break, ;, }, if, (, iterc, >, itcsav, ), {, state, =, 150, ;, break, ;, }]
[;, break, ;, }, if, (, iterc, >, itcsav, ), {, state, =, 150, ;, break, ;, }, for, (]
[), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[>, itcsav, ), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <]
[), {, state, =, 150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;]
[=, 150, ;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, )]
[;, break, ;, }, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, hred]
[;, i, <, n, ;, i, ++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i]
[;, i, ++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), ), ;, }]
[<, n, ;, i, ++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), )]
[;, i, ++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), ), ;, }]
[), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), ), ;, }, state, =, 120]
[++, ), {, hred, ., setEntry, (, i, ,, hs, ., getEntry, (, i, ), ), ;, }, state, =]
[;, }, state, =, 120, ;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,]
[., setEntry, (, i, ,, hs, ., getEntry, (, i, ), ), ;, }, state, =, 120, ;, break, ;]
[,, hs, ., getEntry, (, i, ), ), ;, }, state, =, 120, ;, break, ;, }, default, :, {]
[), ;, }, state, =, 120, ;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE]
[., getEntry, (, i, ), ), ;, }, state, =, 120, ;, break, ;, }, default, :, {, throw, new]
[), ), ;, }, state, =, 120, ;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, .]
[=, 120, ;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,, "trsbox", ), ;]
[;, break, ;, }, default, :, {, throw, new, MathIllegalStateException, (, LocalizedFormats, ., SIMPLE_MESSAGE, ,, "trsbox", ), ;, }, }]
[;, }, }, }, }, private, void, update, (, double, beta, ,, double, denom, ,, int, knew, ), {, printMethod]
[,, "trsbox", ), ;, }, }, }, }, private, void, update, (, double, beta, ,, double, denom, ,, int, knew]
[., SIMPLE_MESSAGE, ,, "trsbox", ), ;, }, }, }, }, private, void, update, (, double, beta, ,, double, denom, ,]
[), ;, }, }, }, }, private, void, update, (, double, beta, ,, double, denom, ,, int, knew, ), {]
[;, final, int, n, =, currentBest, ., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm]
[;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =, npt, -, n, -, 1, ;, final, ArrayRealVector, work]
[., getDimension, (, ), ;, final, int, npt, =, numberOfInterpolationPoints, ;, final, int, nptm, =, npt, -, n, -, 1]
[;, final, int, nptm, =, npt, -, n, -, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +]
[;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =, ZERO, ;, for, (]
[-, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =, ZERO, ;]
[-, n, -, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =]
[-, 1, ;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =, ZERO, ;]
[;, final, ArrayRealVector, work, =, new, ArrayRealVector, (, npt, +, n, ), ;, double, ztest, =, ZERO, ;, for, (]
[;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, )]
[), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[+, n, ), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;]
[), ;, double, ztest, =, ZERO, ;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++]
[;, for, (, int, k, =, 0, ;, k, <, npt, ;, k, ++, ), {, for, (, int, j]
[;, k, <, npt, ;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;]
[;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {]
[<, npt, ;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++]
[;, k, ++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {]
[), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, ztest, =, Math]
[++, ), {, for, (, int, j, =, 0, ;, j, <, nptm, ;, j, ++, ), {, ztest, =]
[;, j, <, nptm, ;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs]
[;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry]
[<, nptm, ;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix]
[;, j, ++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry]
[), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry, (, k, ,]
[++, ), {, ztest, =, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry, (, k]
[=, Math, ., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry, (, k, ,, j, ), )]
[;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <, nptm, ;, j, ++]
[., max, (, ztest, ,, Math, ., abs, (, zMatrix, ., getEntry, (, k, ,, j, ), ), ), ;]
[,, Math, ., abs, (, zMatrix, ., getEntry, (, k, ,, j, ), ), ), ;, }, }, ztest, *=]
[), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <, nptm, ;, j]
[., abs, (, zMatrix, ., getEntry, (, k, ,, j, ), ), ), ;, }, }, ztest, *=, 1e-20, ;]
[), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <, nptm, ;]
[., getEntry, (, k, ,, j, ), ), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j]
[,, j, ), ), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j]
[), ), ), ;, }, }, ztest, *=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <, nptm]
[*=, 1e-20, ;, for, (, int, j, =, 1, ;, j, <, nptm, ;, j, ++, ), {, final, double]
[;, for, (, int, j, =, 1, ;, j, <, nptm, ;, j, ++, ), {, final, double, d1, =]
[;, j, <, nptm, ;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j]
[;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (]
[<, nptm, ;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;]
[;, j, ++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (]
[), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (, Math, ., abs]
[++, ), {, final, double, d1, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, if, (, Math, .]
[;, if, (, Math, ., abs, (, d1, ), >, ztest, ), {, final, double, d2, =, zMatrix, ., getEntry]
[., getEntry, (, knew, ,, j, ), ;, if, (, Math, ., abs, (, d1, ), >, ztest, ), {]
[,, j, ), ;, if, (, Math, ., abs, (, d1, ), >, ztest, ), {, final, double, d2, =]
[), ;, if, (, Math, ., abs, (, d1, ), >, ztest, ), {, final, double, d2, =, zMatrix, .]
[), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double, d3, =, zMatrix]
[>, ztest, ), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double, d3]
[., abs, (, d1, ), >, ztest, ), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0]
[), >, ztest, ), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double]
[), {, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), ;, final, double, d3, =, zMatrix]
[;, final, double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, .]
[., getEntry, (, knew, ,, 0, ), ;, final, double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, )]
[,, 0, ), ;, final, double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4]
[), ;, final, double, d3, =, zMatrix, ., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math]
[;, final, double, d4, =, Math, ., sqrt, (, d2, *, d2, +, d3, *, d3, ), ;, final, double]
[., getEntry, (, knew, ,, j, ), ;, final, double, d4, =, Math, ., sqrt, (, d2, *, d2, +]
[,, j, ), ;, final, double, d4, =, Math, ., sqrt, (, d2, *, d2, +, d3, *, d3, )]
[), ;, final, double, d4, =, Math, ., sqrt, (, d2, *, d2, +, d3, *, d3, ), ;, final]
[;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6, =]
[., sqrt, (, d2, *, d2, +, d3, *, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (]
[), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6]
[+, d3, *, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4]
[*, d2, +, d3, *, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, )]
[+, d3, *, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4]
[), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6]
[*, d3, ), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final]
[), ;, final, double, d5, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6]
[;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i]
[/, d4, ;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for, (]
[., getEntry, (, knew, ,, 0, ), /, d4, ;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,]
[,, 0, ), /, d4, ;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4]
[), /, d4, ;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for]
[;, final, double, d6, =, zMatrix, ., getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =]
[/, d4, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double]
[., getEntry, (, knew, ,, j, ), /, d4, ;, for, (, int, i, =, 0, ;, i, <, npt]
[,, j, ), /, d4, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, )]
[), /, d4, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, final, double, d7, =]
[;, i, <, npt, ;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i]
[;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +]
[<, npt, ;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0]
[;, i, ++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +]
[), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *, zMatrix]
[++, ), {, final, double, d7, =, d5, *, zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *]
[;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -]
[+, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,]
[*, zMatrix, ., getEntry, (, i, ,, 0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, )]
[+, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,]
[., getEntry, (, i, ,, 0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix]
[,, 0, ), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i]
[), +, d6, *, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j]
[;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -]
[*, zMatrix, ., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *]
[;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -]
[., getEntry, (, i, ,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, .]
[,, j, ), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,]
[), ;, zMatrix, ., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, )]
[;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew, ,]
[., setEntry, (, i, ,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *]
[,, j, ,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (]
[,, d5, *, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,]
[), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew]
[-, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0]
[*, zMatrix, ., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, )]
[-, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0]
[., getEntry, (, i, ,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;]
[,, j, ), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (]
[), -, d6, *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,]
[), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew]
[*, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7]
[), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew]
[., getEntry, (, i, ,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;]
[,, 0, ), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, .]
[), ), ;, zMatrix, ., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (]
[;, }, }, zMatrix, ., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =]
[., setEntry, (, i, ,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew, ,, j, ,]
[,, 0, ,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }]
[,, d7, ), ;, }, }, zMatrix, ., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (]
[), ;, }, }, zMatrix, ., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i]
[;, }, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, work, ., setEntry]
[., setEntry, (, knew, ,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[,, j, ,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++]
[,, ZERO, ), ;, }, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, work, .]
[;, i, <, npt, ;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew]
[;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *]
[<, npt, ;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0]
[;, i, ++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *]
[), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *, zMatrix, ., getEntry]
[++, ), {, work, ., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *, zMatrix, .]
[;, }, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry]
[., setEntry, (, i, ,, zMatrix, ., getEntry, (, knew, ,, 0, ), *, zMatrix, ., getEntry, (, i, ,]
[,, zMatrix, ., getEntry, (, knew, ,, 0, ), *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;]
[), ;, }, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, .]
[*, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, }, final, double, alpha, =, work, ., getEntry, (]
[., getEntry, (, knew, ,, 0, ), *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, }, final]
[,, 0, ), *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, }, final, double, alpha, =, work]
[), *, zMatrix, ., getEntry, (, i, ,, 0, ), ), ;, }, final, double, alpha, =, work, ., getEntry]
[), ;, }, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, .]
[., getEntry, (, i, ,, 0, ), ), ;, }, final, double, alpha, =, work, ., getEntry, (, knew, )]
[,, 0, ), ), ;, }, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau]
[), ), ;, }, final, double, alpha, =, work, ., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint]
[;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, .]
[., getEntry, (, knew, ), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry]
[), ;, final, double, tau, =, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint]
[;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE, ), ;, final, double, sqrtDenom]
[., getEntry, (, knew, ), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE]
[), ;, lagrangeValuesAtNewPoint, ., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE, ), ;, final, double]
[;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom, ;]
[., setEntry, (, knew, ,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE, ), ;, final, double, sqrtDenom, =, Math]
[,, lagrangeValuesAtNewPoint, ., getEntry, (, knew, ), -, ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom]
[), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom]
[-, ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau]
[., getEntry, (, knew, ), -, ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;]
[), -, ONE, ), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =]
[), ;, final, double, sqrtDenom, =, Math, ., sqrt, (, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom]
[;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0]
[., sqrt, (, denom, ), ;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =, zMatrix, .]
[), ;, final, double, d1, =, tau, /, sqrtDenom, ;, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,]
[;, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i]
[/, sqrtDenom, ;, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (]
[;, final, double, d2, =, zMatrix, ., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (]
[/, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, .]
[., getEntry, (, knew, ,, 0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt]
[,, 0, ), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, )]
[), /, sqrtDenom, ;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix]
[;, for, (, int, i, =, 0, ;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (]
[;, i, <, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix]
[;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i]
[<, npt, ;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry]
[;, i, ++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i]
[), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, )]
[++, ), {, zMatrix, ., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0]
[;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int, jp]
[., setEntry, (, i, ,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -, d2, *]
[,, 0, ,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (]
[,, d1, *, zMatrix, ., getEntry, (, i, ,, 0, ), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, )]
[), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int]
[-, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;, j]
[*, zMatrix, ., getEntry, (, i, ,, 0, ), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;]
[-, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;, j]
[., getEntry, (, i, ,, 0, ), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for]
[,, 0, ), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =]
[), -, d2, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;]
[), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n]
[), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final, int]
[., getEntry, (, i, ), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j]
[), ), ;, }, for, (, int, j, =, 0, ;, j, <, n, ;, j, ++, ), {, final]
[;, j, <, n, ;, j, ++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry]
[;, j, ++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,, bMatrix]
[<, n, ;, j, ++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp]
[;, j, ++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,, bMatrix]
[), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (]
[++, ), {, final, int, jp, =, npt, +, j, ;, work, ., setEntry, (, jp, ,, bMatrix, ., getEntry]
[;, work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3]
[+, j, ;, work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final]
[;, work, ., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3]
[;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *, work, ., getEntry]
[., setEntry, (, jp, ,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (]
[,, bMatrix, ., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, .]
[), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *, work, .]
[., getEntry, (, knew, ,, j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (]
[,, j, ), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau]
[), ), ;, final, double, d3, =, (, alpha, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *, work]
[;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau, *, lagrangeValuesAtNewPoint, .]
[/, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau, *]
[), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau]
[-, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -, beta]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;]
[-, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -, beta]
[., getEntry, (, jp, ), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double]
[), -, tau, *, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -]
[), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau]
[*, work, ., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -, beta, *, work]
[), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau]
[., getEntry, (, jp, ), ), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry]
[), ), /, denom, ;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -]
[;, final, double, d4, =, (, -, beta, *, work, ., getEntry, (, jp, ), -, tau, *, lagrangeValuesAtNewPoint, .]
[;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (]
[/, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, .]
[), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix]
[-, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;]
[*, work, ., getEntry, (, jp, ), -, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;]
[*, work, ., getEntry, (, jp, ), -, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;]
[-, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;]
[., getEntry, (, jp, ), -, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (]
[), -, tau, *, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0]
[), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=]
[), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix]
[., getEntry, (, jp, ), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;]
[), ), /, denom, ;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (]
[;, i, <=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry]
[;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j]
[<=, jp, ;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i]
[;, i, ++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j]
[), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3]
[++, ), {, bMatrix, ., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +]
[;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,]
[., setEntry, (, i, ,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, .]
[,, j, ,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, )]
[,, bMatrix, ., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4]
[), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, )]
[+, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, .]
[+, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;]
[., getEntry, (, i, ,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work]
[,, j, ), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i]
[), +, d3, *, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i, ), )]
[+, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, .]
[*, lagrangeValuesAtNewPoint, ., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (]
[+, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, .]
[., getEntry, (, i, ), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=]
[), +, d4, *, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix]
[), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, )]
[*, work, ., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (]
[), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, )]
[., getEntry, (, i, ), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,]
[), ), ;, if, (, i, >=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt]
[), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,, bMatrix, ., getEntry, (, i, ,]
[>=, npt, ), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,, bMatrix, ., getEntry, (]
[), {, bMatrix, ., setEntry, (, jp, ,, (, i, -, npt, ), ,, bMatrix, ., getEntry, (, i, ,]
[;, }, }, }, }, private, void, setup, (, double, [, ], lowerBound, ,, double, [, ], upperBound, ), {]
[., setEntry, (, jp, ,, (, i, -, npt, ), ,, bMatrix, ., getEntry, (, i, ,, j, ), )]
[,, (, i, -, npt, ), ,, bMatrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }]
[,, bMatrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, }, private, void, setup, (, double]
[), ,, bMatrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, }, private, void, setup, (]
[-, npt, ), ,, bMatrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, }, private, void]
[), ,, bMatrix, ., getEntry, (, i, ,, j, ), ), ;, }, }, }, }, private, void, setup, (]
[), ;, }, }, }, }, private, void, setup, (, double, [, ], lowerBound, ,, double, [, ], upperBound, )]
[., getEntry, (, i, ,, j, ), ), ;, }, }, }, }, private, void, setup, (, double, [, ]]
[,, j, ), ), ;, }, }, }, }, private, void, setup, (, double, [, ], lowerBound, ,, double, []
[), ), ;, }, }, }, }, private, void, setup, (, double, [, ], lowerBound, ,, double, [, ], upperBound]
[;, double, [, ], init, =, getStartPoint, (, ), ;, final, int, dimension, =, init, ., length, ;, if, (]
[;, final, int, dimension, =, init, ., length, ;, if, (, dimension, <, MINIMUM_PROBLEM_DIMENSION, ), {, throw, new, NumberIsTooSmallException, (]
[;, if, (, dimension, <, MINIMUM_PROBLEM_DIMENSION, ), {, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }]
[., length, ;, if, (, dimension, <, MINIMUM_PROBLEM_DIMENSION, ), {, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, )]
[), {, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =]
[<, MINIMUM_PROBLEM_DIMENSION, ), {, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ]]
[), {, throw, new, NumberIsTooSmallException, (, dimension, ,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =]
[;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2, ), *, (]
[,, MINIMUM_PROBLEM_DIMENSION, ,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension]
[,, true, ), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2]
[), ;, }, final, int, [, ], nPointsInterval, =, {, dimension, +, 2, ,, (, dimension, +, 2, ), *]
[;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new]
[,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <]
[+, 2, ,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (]
[,, (, dimension, +, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <]
[}, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw]
[/, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], )]
[*, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints]
[), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||]
[+, 2, ), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0]
[), *, (, dimension, +, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||]
[/, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], )]
[), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ]]
[+, 1, ), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, []
[), /, 2, }, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ]]
[}, ;, if, (, numberOfInterpolationPoints, <, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1]
[||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval]
[<, nPointsInterval, [, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, .]
[||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval]
[[, 0, ], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,]
[], ||, numberOfInterpolationPoints, >, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1]
[>, nPointsInterval, [, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0]
[), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1]
[[, 1, ], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,]
[], ), {, throw, new, OutOfRangeException, (, LocalizedFormats, ., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, []
[;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =]
[,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, []
[., NUMBER_OF_INTERPOLATION_POINTS, ,, numberOfInterpolationPoints, ,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new]
[,, nPointsInterval, [, 0, ], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ]]
[,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2]
[[, 0, ], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double]
[], ,, nPointsInterval, [, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =]
[), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff]
[[, 1, ], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius]
[], ), ;, }, boundDifference, =, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double]
[=, new, double, [, dimension, ], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY]
[;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =]
[], ;, double, requiredMinDiff, =, 2, *, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i]
[;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i]
[*, initialTrustRegionRadius, ;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension]
[;, double, minDiff, =, Double, ., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ]]
[., POSITIVE_INFINITY, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, boundDifference, []
[;, i, <, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound]
[;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;]
[<, dimension, ;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i]
[;, i, ++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;]
[), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math]
[++, ), {, boundDifference, [, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =]
[=, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference]
[[, i, ], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (]
[], =, upperBound, [, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,]
[;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <]
[-, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;]
[[, i, ], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i]
[], -, lowerBound, [, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], )]
[;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <]
[[, i, ], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if]
[], ;, minDiff, =, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff]
[=, Math, ., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, )]
[;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix]
[., min, (, minDiff, ,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius]
[,, boundDifference, [, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0]
[), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new]
[[, i, ], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }]
[], ), ;, }, if, (, minDiff, <, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =]
[), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, )]
[<, requiredMinDiff, ), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,]
[), {, initialTrustRegionRadius, =, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, )]
[=, minDiff, /, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =]
[;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints]
[/, 3.0, ;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix]
[;, }, bMatrix, =, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints]
[=, new, Array2DRowRealMatrix, (, dimension, +, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -]
[;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (]
[,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =]
[+, numberOfInterpolationPoints, ,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;]
[,, dimension, ), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =]
[), ;, zMatrix, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix]
[=, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,]
[;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints]
[,, numberOfInterpolationPoints, -, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =]
[), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;]
[-, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension]
[-, dimension, -, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector]
[-, 1, ), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension]
[), ;, interpolationPoints, =, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;]
[=, new, Array2DRowRealMatrix, (, numberOfInterpolationPoints, ,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new]
[;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new]
[,, dimension, ), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;]
[), ;, originShift, =, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =]
[=, new, ArrayRealVector, (, dimension, ), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (]
[;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new]
[), ;, fAtInterpolationPoints, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =]
[=, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (]
[;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new]
[), ;, trustRegionCenterOffset, =, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =]
[=, new, ArrayRealVector, (, dimension, ), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (]
[;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new]
[), ;, gradientAtTrustRegionCenter, =, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =]
[=, new, ArrayRealVector, (, dimension, ), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (]
[;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new]
[), ;, lowerDifference, =, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =]
[=, new, ArrayRealVector, (, dimension, ), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (]
[;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new]
[), ;, upperDifference, =, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =]
[=, new, ArrayRealVector, (, dimension, ), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (]
[;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new]
[), ;, modelSecondDerivativesParameters, =, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =]
[=, new, ArrayRealVector, (, numberOfInterpolationPoints, ), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (]
[;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new]
[), ;, newPoint, =, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =]
[=, new, ArrayRealVector, (, dimension, ), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (]
[;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new]
[), ;, alternativeNewPoint, =, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =]
[=, new, ArrayRealVector, (, dimension, ), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (]
[;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues]
[), ;, trialStepPoint, =, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;]
[=, new, ArrayRealVector, (, dimension, ), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new]
[;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension]
[), ;, lagrangeValuesAtNewPoint, =, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (]
[=, new, ArrayRealVector, (, dimension, +, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension, +, 1]
[;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension, +, 1, ), /, 2, ), ;, }, private, static]
[), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension, +, 1, ), /, 2, ), ;, }, private]
[+, numberOfInterpolationPoints, ), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension, +, 1, ), /, 2, ), ;]
[), ;, modelSecondDerivativesValues, =, new, ArrayRealVector, (, dimension, *, (, dimension, +, 1, ), /, 2, ), ;, }, private]
[=, new, ArrayRealVector, (, dimension, *, (, dimension, +, 1, ), /, 2, ), ;, }, private, static, String, caller]
[;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =, new, Throwable, (, ), ;]
[), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =, new, Throwable, (, )]
[/, 2, ), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =, new, Throwable]
[*, (, dimension, +, 1, ), /, 2, ), ;, }, private, static, String, caller, (, int, n, ), {]
[/, 2, ), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =, new, Throwable]
[), /, 2, ), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =, new]
[+, 1, ), /, 2, ), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t]
[), /, 2, ), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =, new]
[), ;, }, private, static, String, caller, (, int, n, ), {, final, Throwable, t, =, new, Throwable, (, )]
[;, final, StackTraceElement, [, ], elements, =, t, ., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n]
[;, final, StackTraceElement, e, =, elements, [, n, ], ;, return, e, ., getMethodName, (, ), +, " (at line ", +, e]
[., getStackTrace, (, ), ;, final, StackTraceElement, e, =, elements, [, n, ], ;, return, e, ., getMethodName, (, )]
[;, return, e, ., getMethodName, (, ), +, " (at line ", +, e, ., getLineNumber, (, ), +, ")", ;, }, private]
[[, n, ], ;, return, e, ., getMethodName, (, ), +, " (at line ", +, e, ., getLineNumber, (, ), +, ")"]
[], ;, return, e, ., getMethodName, (, ), +, " (at line ", +, e, ., getLineNumber, (, ), +, ")", ;, }]
[;, }, private, static, void, printState, (, int, s, ), {, }, private, static, void, printMethod, (, ), {, }]
[+, ")", ;, }, private, static, void, printState, (, int, s, ), {, }, private, static, void, printMethod, (, )]
[+, e, ., getLineNumber, (, ), +, ")", ;, }, private, static, void, printState, (, int, s, ), {, }]
[+, " (at line ", +, e, ., getLineNumber, (, ), +, ")", ;, }, private, static, void, printState, (, int, s, )]
[., getMethodName, (, ), +, " (at line ", +, e, ., getLineNumber, (, ), +, ")", ;, }, private, static, void, printState]
[+, e, ., getLineNumber, (, ), +, ")", ;, }, private, static, void, printState, (, int, s, ), {, }]
[+, ")", ;, }, private, static, void, printState, (, int, s, ), {, }, private, static, void, printMethod, (, )]
[., getLineNumber, (, ), +, ")", ;, }, private, static, void, printState, (, int, s, ), {, }, private, static]
[;, }, private, static, void, printState, (, int, s, ), {, }, private, static, void, printMethod, (, ), {, }]
[;, private, static, final, String, PATH_IS_EXPLORED, =, "If this exception is thrown, just remove it from the code", ;, PathIsExploredException, (, ), {, super, (, PATH_IS_EXPLORED, +, " ", +, BOBYQAOptimizer]
[;, PathIsExploredException, (, ), {, super, (, PATH_IS_EXPLORED, +, " ", +, BOBYQAOptimizer, ., caller, (, 3, ), ), ;, }]
[), ;, }, }, }]
[+, BOBYQAOptimizer, ., caller, (, 3, ), ), ;, }, }, }]
[+, " ", +, BOBYQAOptimizer, ., caller, (, 3, ), ), ;, }, }, }]
[+, BOBYQAOptimizer, ., caller, (, 3, ), ), ;, }, }, }]
[), ;, }, }, }]
[., caller, (, 3, ), ), ;, }, }, }]
[), ), ;, }, }, }]
