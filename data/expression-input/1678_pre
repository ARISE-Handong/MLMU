[., math3, ., util, ., Precision, ;, @, Deprecated, class, SimplexTableau, implements, Serializable, {, private, static, final, String, NEGATIVE_VAR_COLUMN_LABEL, =]
[Deprecated, class, SimplexTableau, implements, Serializable, {, private, static, final, String, NEGATIVE_VAR_COLUMN_LABEL, =, "x-", ;, private, static, final, int, DEFAULT_ULPS, =]
[final, String, NEGATIVE_VAR_COLUMN_LABEL, =, "x-", ;, private, static, final, int, DEFAULT_ULPS, =, 10, ;, private, static, final, double, CUTOFF_THRESHOLD, =]
[final, int, DEFAULT_ULPS, =, 10, ;, private, static, final, double, CUTOFF_THRESHOLD, =, 1e-12, ;, private, static, final, long, serialVersionUID, =]
[int, DEFAULT_ULPS, =, 10, ;, private, static, final, double, CUTOFF_THRESHOLD, =, 1e-12, ;, private, static, final, long, serialVersionUID, =, -]
[final, List, <, LinearConstraint, >, constraints, ;, private, final, boolean, restrictToNonNegative, ;, private, final, List, <, String, >, columnLabels, =]
[<, LinearConstraint, >, constraints, ,, final, GoalType, goalType, ,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ), {, this, (]
[>, constraints, ,, final, GoalType, goalType, ,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ), {, this, (, f, ,]
[,, final, GoalType, goalType, ,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ), {, this, (, f, ,, constraints, ,]
[GoalType, goalType, ,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ), {, this, (, f, ,, constraints, ,, goalType, ,]
[,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ), {, this, (, f, ,, constraints, ,, goalType, ,, restrictToNonNegative, ,]
[boolean, restrictToNonNegative, ,, final, double, epsilon, ), {, this, (, f, ,, constraints, ,, goalType, ,, restrictToNonNegative, ,, epsilon, ,]
[>, constraints, ,, final, GoalType, goalType, ,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ,, final, int, maxUlps, ), {]
[>, constraints, ,, final, GoalType, goalType, ,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ,, final, int, maxUlps, ), {]
[GoalType, goalType, ,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., f, =]
[,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., f, =, f, ;]
[,, final, boolean, restrictToNonNegative, ,, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., f, =, f, ;]
[,, final, double, epsilon, ,, final, int, maxUlps, ), {, this, ., f, =, f, ;, this, ., constraints, =]
[double, epsilon, ,, final, int, maxUlps, ), {, this, ., f, =, f, ;, this, ., constraints, =, normalizeConstraints, (]
[final, int, maxUlps, ), {, this, ., f, =, f, ;, this, ., constraints, =, normalizeConstraints, (, constraints, ), ;]
[final, int, maxUlps, ), {, this, ., f, =, f, ;, this, ., constraints, =, normalizeConstraints, (, constraints, ), ;]
[{, this, ., f, =, f, ;, this, ., constraints, =, normalizeConstraints, (, constraints, ), ;, this, ., restrictToNonNegative, =]
[., f, =, f, ;, this, ., constraints, =, normalizeConstraints, (, constraints, ), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;]
[., f, =, f, ;, this, ., constraints, =, normalizeConstraints, (, constraints, ), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;]
[;, this, ., constraints, =, normalizeConstraints, (, constraints, ), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =]
[., constraints, =, normalizeConstraints, (, constraints, ), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;]
[., constraints, =, normalizeConstraints, (, constraints, ), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;]
[(, constraints, ), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =]
[), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =, maxUlps, ;]
[), ;, this, ., restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =, maxUlps, ;]
[restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =, maxUlps, ;, this, ., numDecisionVariables, =]
[restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =, maxUlps, ;, this, ., numDecisionVariables, =]
[restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =, maxUlps, ;, this, ., numDecisionVariables, =]
[restrictToNonNegative, =, restrictToNonNegative, ;, this, ., epsilon, =, epsilon, ;, this, ., maxUlps, =, maxUlps, ;, this, ., numDecisionVariables, =]
[this, ., maxUlps, =, maxUlps, ;, this, ., numDecisionVariables, =, f, ., getCoefficients, (, ), ., getDimension, (, ), +]
[., maxUlps, =, maxUlps, ;, this, ., numDecisionVariables, =, f, ., getCoefficients, (, ), ., getDimension, (, ), +, (]
[., maxUlps, =, maxUlps, ;, this, ., numDecisionVariables, =, f, ., getCoefficients, (, ), ., getDimension, (, ), +, (]
[=, maxUlps, ;, this, ., numDecisionVariables, =, f, ., getCoefficients, (, ), ., getDimension, (, ), +, (, restrictToNonNegative, ?]
[;, this, ., numDecisionVariables, =, f, ., getCoefficients, (, ), ., getDimension, (, ), +, (, restrictToNonNegative, ?, 0, :]
[numDecisionVariables, =, f, ., getCoefficients, (, ), ., getDimension, (, ), +, (, restrictToNonNegative, ?, 0, :, 1, ), ;]
[numDecisionVariables, =, f, ., getCoefficients, (, ), ., getDimension, (, ), +, (, restrictToNonNegative, ?, 0, :, 1, ), ;]
[getCoefficients, (, ), ., getDimension, (, ), +, (, restrictToNonNegative, ?, 0, :, 1, ), ;, this, ., numSlackVariables, =]
[getCoefficients, (, ), ., getDimension, (, ), +, (, restrictToNonNegative, ?, 0, :, 1, ), ;, this, ., numSlackVariables, =]
[), ., getDimension, (, ), +, (, restrictToNonNegative, ?, 0, :, 1, ), ;, this, ., numSlackVariables, =, getConstraintTypeCounts, (]
[), ., getDimension, (, ), +, (, restrictToNonNegative, ?, 0, :, 1, ), ;, this, ., numSlackVariables, =, getConstraintTypeCounts, (]
[+, (, restrictToNonNegative, ?, 0, :, 1, ), ;, this, ., numSlackVariables, =, getConstraintTypeCounts, (, Relationship, ., LEQ, ), +]
[restrictToNonNegative, ?, 0, :, 1, ), ;, this, ., numSlackVariables, =, getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (]
[restrictToNonNegative, ?, 0, :, 1, ), ;, this, ., numSlackVariables, =, getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (]
[), ;, this, ., numSlackVariables, =, getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;]
[), ;, this, ., numSlackVariables, =, getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;]
[numSlackVariables, =, getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., numArtificialVariables, =]
[numSlackVariables, =, getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., numArtificialVariables, =]
[getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., numArtificialVariables, =, getConstraintTypeCounts, (]
[getConstraintTypeCounts, (, Relationship, ., LEQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., numArtificialVariables, =, getConstraintTypeCounts, (]
[), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., numArtificialVariables, =, getConstraintTypeCounts, (, Relationship, ., EQ, ), +]
[getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., numArtificialVariables, =, getConstraintTypeCounts, (, Relationship, ., EQ, ), +, getConstraintTypeCounts, (]
[getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., numArtificialVariables, =, getConstraintTypeCounts, (, Relationship, ., EQ, ), +, getConstraintTypeCounts, (]
[), ;, this, ., numArtificialVariables, =, getConstraintTypeCounts, (, Relationship, ., EQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;]
[), ;, this, ., numArtificialVariables, =, getConstraintTypeCounts, (, Relationship, ., EQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;]
[numArtificialVariables, =, getConstraintTypeCounts, (, Relationship, ., EQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., tableau, =]
[getConstraintTypeCounts, (, Relationship, ., EQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., tableau, =, createTableau, (]
[getConstraintTypeCounts, (, Relationship, ., EQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., tableau, =, createTableau, (]
[Relationship, ., EQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., tableau, =, createTableau, (, goalType, ==]
[Relationship, ., EQ, ), +, getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., tableau, =, createTableau, (, goalType, ==]
[getConstraintTypeCounts, (, Relationship, ., GEQ, ), ;, this, ., tableau, =, createTableau, (, goalType, ==, GoalType, ., MAXIMIZE, ), ;]
[goalType, ==, GoalType, ., MAXIMIZE, ), ;, initializeColumnLabels, (, ), ;, }, protected, void, initializeColumnLabels, (, ), {, if, (]
[goalType, ==, GoalType, ., MAXIMIZE, ), ;, initializeColumnLabels, (, ), ;, }, protected, void, initializeColumnLabels, (, ), {, if, (]
[MAXIMIZE, ), ;, initializeColumnLabels, (, ), ;, }, protected, void, initializeColumnLabels, (, ), {, if, (, getNumObjectiveFunctions, (, ), ==]
[initializeColumnLabels, (, ), ;, }, protected, void, initializeColumnLabels, (, ), {, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {]
[initializeColumnLabels, (, ), ;, }, protected, void, initializeColumnLabels, (, ), {, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {]
[}, protected, void, initializeColumnLabels, (, ), {, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {, columnLabels, ., add, (]
[(, ), {, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {, columnLabels, ., add, (, "W", ), ;, }]
[(, ), {, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {, columnLabels, ., add, (, "W", ), ;, }]
[(, getNumObjectiveFunctions, (, ), ==, 2, ), {, columnLabels, ., add, (, "W", ), ;, }, columnLabels, ., add, (]
[columnLabels, ., add, (, "W", ), ;, }, columnLabels, ., add, (, "Z", ), ;, for, (, int, i, =]
[add, (, "W", ), ;, }, columnLabels, ., add, (, "Z", ), ;, for, (, int, i, =, 0, ;]
[add, (, "W", ), ;, }, columnLabels, ., add, (, "Z", ), ;, for, (, int, i, =, 0, ;]
["W", ), ;, }, columnLabels, ., add, (, "Z", ), ;, for, (, int, i, =, 0, ;, i, <]
[columnLabels, ., add, (, "Z", ), ;, for, (, int, i, =, 0, ;, i, <, getOriginalNumDecisionVariables, (, ), ;]
[columnLabels, ., add, (, "Z", ), ;, for, (, int, i, =, 0, ;, i, <, getOriginalNumDecisionVariables, (, ), ;]
["Z", ), ;, for, (, int, i, =, 0, ;, i, <, getOriginalNumDecisionVariables, (, ), ;, i, ++, ), {]
["Z", ), ;, for, (, int, i, =, 0, ;, i, <, getOriginalNumDecisionVariables, (, ), ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, getOriginalNumDecisionVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (]
[(, int, i, =, 0, ;, i, <, getOriginalNumDecisionVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (]
[i, =, 0, ;, i, <, getOriginalNumDecisionVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (, "x", +]
[getOriginalNumDecisionVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (, "x", +, i, ), ;, }, if, (]
[(, ), ;, i, ++, ), {, columnLabels, ., add, (, "x", +, i, ), ;, }, if, (, !]
[i, ++, ), {, columnLabels, ., add, (, "x", +, i, ), ;, }, if, (, !, restrictToNonNegative, ), {]
[i, ++, ), {, columnLabels, ., add, (, "x", +, i, ), ;, }, if, (, !, restrictToNonNegative, ), {]
[columnLabels, ., add, (, "x", +, i, ), ;, }, if, (, !, restrictToNonNegative, ), {, columnLabels, ., add, (]
[}, if, (, !, restrictToNonNegative, ), {, columnLabels, ., add, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, }, for, (, int, i, =]
[(, !, restrictToNonNegative, ), {, columnLabels, ., add, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, }, for, (, int, i, =, 0, ;]
[(, !, restrictToNonNegative, ), {, columnLabels, ., add, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, }, for, (, int, i, =, 0, ;]
[restrictToNonNegative, ), {, columnLabels, ., add, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[., add, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, }, for, (, int, i, =, 0, ;, i, <, getNumSlackVariables, (, ), ;]
[., add, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, }, for, (, int, i, =, 0, ;, i, <, getNumSlackVariables, (, ), ;]
[), ;, }, for, (, int, i, =, 0, ;, i, <, getNumSlackVariables, (, ), ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, getNumSlackVariables, (, ), ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, getNumSlackVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (]
[(, int, i, =, 0, ;, i, <, getNumSlackVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (]
[i, =, 0, ;, i, <, getNumSlackVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (, "s", +]
[;, i, ++, ), {, columnLabels, ., add, (, "s", +, i, ), ;, }, for, (, int, i, =]
[++, ), {, columnLabels, ., add, (, "s", +, i, ), ;, }, for, (, int, i, =, 0, ;]
[++, ), {, columnLabels, ., add, (, "s", +, i, ), ;, }, for, (, int, i, =, 0, ;]
[{, columnLabels, ., add, (, "s", +, i, ), ;, }, for, (, int, i, =, 0, ;, i, <]
[(, "s", +, i, ), ;, }, for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;]
[(, "s", +, i, ), ;, }, for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;]
[), ;, }, for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {]
[), ;, }, for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (]
[(, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (]
[i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (, "a", +]
[i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (, "a", +, i, ), ;, }]
[i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, columnLabels, ., add, (, "a", +, i, ), ;, }]
[), ;, i, ++, ), {, columnLabels, ., add, (, "a", +, i, ), ;, }, columnLabels, ., add, (]
[columnLabels, ., add, (, "RHS", ), ;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =]
[columnLabels, ., add, (, "RHS", ), ;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =]
[columnLabels, ., add, (, "RHS", ), ;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =]
[columnLabels, ., add, (, "RHS", ), ;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =]
[columnLabels, ., add, (, "RHS", ), ;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =]
[add, (, "RHS", ), ;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =, numDecisionVariables, +]
["RHS", ), ;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =, numDecisionVariables, +, numSlackVariables, +]
[;, }, protected, RealMatrix, createTableau, (, final, boolean, maximize, ), {, int, width, =, numDecisionVariables, +, numSlackVariables, +, numArtificialVariables, +]
[createTableau, (, final, boolean, maximize, ), {, int, width, =, numDecisionVariables, +, numSlackVariables, +, numArtificialVariables, +, getNumObjectiveFunctions, (, ), +]
[), {, int, width, =, numDecisionVariables, +, numSlackVariables, +, numArtificialVariables, +, getNumObjectiveFunctions, (, ), +, 1, ;, int, height, =]
[), {, int, width, =, numDecisionVariables, +, numSlackVariables, +, numArtificialVariables, +, getNumObjectiveFunctions, (, ), +, 1, ;, int, height, =]
[), {, int, width, =, numDecisionVariables, +, numSlackVariables, +, numArtificialVariables, +, getNumObjectiveFunctions, (, ), +, 1, ;, int, height, =]
[+, numSlackVariables, +, numArtificialVariables, +, getNumObjectiveFunctions, (, ), +, 1, ;, int, height, =, constraints, ., size, (, ), +]
[), +, 1, ;, int, height, =, constraints, ., size, (, ), +, getNumObjectiveFunctions, (, ), ;, Array2DRowRealMatrix, matrix, =]
[;, int, height, =, constraints, ., size, (, ), +, getNumObjectiveFunctions, (, ), ;, Array2DRowRealMatrix, matrix, =, new, Array2DRowRealMatrix, (]
[height, =, constraints, ., size, (, ), +, getNumObjectiveFunctions, (, ), ;, Array2DRowRealMatrix, matrix, =, new, Array2DRowRealMatrix, (, height, ,]
[(, ), +, getNumObjectiveFunctions, (, ), ;, Array2DRowRealMatrix, matrix, =, new, Array2DRowRealMatrix, (, height, ,, width, ), ;, if, (]
[(, ), +, getNumObjectiveFunctions, (, ), ;, Array2DRowRealMatrix, matrix, =, new, Array2DRowRealMatrix, (, height, ,, width, ), ;, if, (]
[(, ), ;, Array2DRowRealMatrix, matrix, =, new, Array2DRowRealMatrix, (, height, ,, width, ), ;, if, (, getNumObjectiveFunctions, (, ), ==]
[Array2DRowRealMatrix, matrix, =, new, Array2DRowRealMatrix, (, height, ,, width, ), ;, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {]
[Array2DRowRealMatrix, matrix, =, new, Array2DRowRealMatrix, (, height, ,, width, ), ;, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {]
[Array2DRowRealMatrix, (, height, ,, width, ), ;, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {, matrix, ., setEntry, (]
[height, ,, width, ), ;, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {, matrix, ., setEntry, (, 0, ,]
[width, ), ;, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {, matrix, ., setEntry, (, 0, ,, 0, ,]
[), ;, if, (, getNumObjectiveFunctions, (, ), ==, 2, ), {, matrix, ., setEntry, (, 0, ,, 0, ,, -]
[==, 2, ), {, matrix, ., setEntry, (, 0, ,, 0, ,, -, 1, ), ;, }, int, zIndex, =]
[==, 2, ), {, matrix, ., setEntry, (, 0, ,, 0, ,, -, 1, ), ;, }, int, zIndex, =]
[2, ), {, matrix, ., setEntry, (, 0, ,, 0, ,, -, 1, ), ;, }, int, zIndex, =, (]
[2, ), {, matrix, ., setEntry, (, 0, ,, 0, ,, -, 1, ), ;, }, int, zIndex, =, (]
[., setEntry, (, 0, ,, 0, ,, -, 1, ), ;, }, int, zIndex, =, (, getNumObjectiveFunctions, (, ), ==]
[0, ,, 0, ,, -, 1, ), ;, }, int, zIndex, =, (, getNumObjectiveFunctions, (, ), ==, 1, ), ?]
[0, ,, -, 1, ), ;, }, int, zIndex, =, (, getNumObjectiveFunctions, (, ), ==, 1, ), ?, 0, :]
[-, 1, ), ;, }, int, zIndex, =, (, getNumObjectiveFunctions, (, ), ==, 1, ), ?, 0, :, 1, ;]
[-, 1, ), ;, }, int, zIndex, =, (, getNumObjectiveFunctions, (, ), ==, 1, ), ?, 0, :, 1, ;]
[}, int, zIndex, =, (, getNumObjectiveFunctions, (, ), ==, 1, ), ?, 0, :, 1, ;, matrix, ., setEntry, (]
[zIndex, =, (, getNumObjectiveFunctions, (, ), ==, 1, ), ?, 0, :, 1, ;, matrix, ., setEntry, (, zIndex, ,]
[(, getNumObjectiveFunctions, (, ), ==, 1, ), ?, 0, :, 1, ;, matrix, ., setEntry, (, zIndex, ,, zIndex, ,]
[(, getNumObjectiveFunctions, (, ), ==, 1, ), ?, 0, :, 1, ;, matrix, ., setEntry, (, zIndex, ,, zIndex, ,]
[(, ), ==, 1, ), ?, 0, :, 1, ;, matrix, ., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?]
[==, 1, ), ?, 0, :, 1, ;, matrix, ., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?, 1, :]
[1, ), ?, 0, :, 1, ;, matrix, ., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?, 1, :, -]
[;, matrix, ., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?, 1, :, -, 1, ), ;, RealVector, objectiveCoefficients, =]
[;, matrix, ., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?, 1, :, -, 1, ), ;, RealVector, objectiveCoefficients, =]
[., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?, 1, :, -, 1, ), ;, RealVector, objectiveCoefficients, =, maximize, ?]
[., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?, 1, :, -, 1, ), ;, RealVector, objectiveCoefficients, =, maximize, ?]
[., setEntry, (, zIndex, ,, zIndex, ,, maximize, ?, 1, :, -, 1, ), ;, RealVector, objectiveCoefficients, =, maximize, ?]
[?, 1, :, -, 1, ), ;, RealVector, objectiveCoefficients, =, maximize, ?, f, ., getCoefficients, (, ), ., mapMultiply, (]
[1, :, -, 1, ), ;, RealVector, objectiveCoefficients, =, maximize, ?, f, ., getCoefficients, (, ), ., mapMultiply, (, -]
[1, ), ;, RealVector, objectiveCoefficients, =, maximize, ?, f, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), :]
[1, ), ;, RealVector, objectiveCoefficients, =, maximize, ?, f, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), :]
[maximize, ?, f, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), :, f, ., getCoefficients, (, ), ;]
[f, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), :, f, ., getCoefficients, (, ), ;, copyArray, (]
[f, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), :, f, ., getCoefficients, (, ), ;, copyArray, (]
[mapMultiply, (, -, 1, ), :, f, ., getCoefficients, (, ), ;, copyArray, (, objectiveCoefficients, ., toArray, (, ), ,]
[mapMultiply, (, -, 1, ), :, f, ., getCoefficients, (, ), ;, copyArray, (, objectiveCoefficients, ., toArray, (, ), ,]
[mapMultiply, (, -, 1, ), :, f, ., getCoefficients, (, ), ;, copyArray, (, objectiveCoefficients, ., toArray, (, ), ,]
[f, ., getCoefficients, (, ), ;, copyArray, (, objectiveCoefficients, ., toArray, (, ), ,, matrix, ., getDataRef, (, ), []
[), ;, copyArray, (, objectiveCoefficients, ., toArray, (, ), ,, matrix, ., getDataRef, (, ), [, zIndex, ], ), ;]
[), ;, copyArray, (, objectiveCoefficients, ., toArray, (, ), ,, matrix, ., getDataRef, (, ), [, zIndex, ], ), ;]
[objectiveCoefficients, ., toArray, (, ), ,, matrix, ., getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (]
[toArray, (, ), ,, matrix, ., getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (, zIndex, ,]
[toArray, (, ), ,, matrix, ., getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (, zIndex, ,]
[), ,, matrix, ., getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (, zIndex, ,, width, -]
[matrix, ., getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (, zIndex, ,, width, -, 1, ,]
[matrix, ., getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (, zIndex, ,, width, -, 1, ,]
[getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (, zIndex, ,, width, -, 1, ,, maximize, ?]
[getDataRef, (, ), [, zIndex, ], ), ;, matrix, ., setEntry, (, zIndex, ,, width, -, 1, ,, maximize, ?]
[), ;, matrix, ., setEntry, (, zIndex, ,, width, -, 1, ,, maximize, ?, f, ., getConstantTerm, (, ), :]
[), ;, matrix, ., setEntry, (, zIndex, ,, width, -, 1, ,, maximize, ?, f, ., getConstantTerm, (, ), :]
[;, matrix, ., setEntry, (, zIndex, ,, width, -, 1, ,, maximize, ?, f, ., getConstantTerm, (, ), :, -]
[., setEntry, (, zIndex, ,, width, -, 1, ,, maximize, ?, f, ., getConstantTerm, (, ), :, -, 1, *]
[., setEntry, (, zIndex, ,, width, -, 1, ,, maximize, ?, f, ., getConstantTerm, (, ), :, -, 1, *]
[maximize, ?, f, ., getConstantTerm, (, ), :, -, 1, *, f, ., getConstantTerm, (, ), ), ;, if, (]
[?, f, ., getConstantTerm, (, ), :, -, 1, *, f, ., getConstantTerm, (, ), ), ;, if, (, !]
[getConstantTerm, (, ), :, -, 1, *, f, ., getConstantTerm, (, ), ), ;, if, (, !, restrictToNonNegative, ), {]
[getConstantTerm, (, ), :, -, 1, *, f, ., getConstantTerm, (, ), ), ;, if, (, !, restrictToNonNegative, ), {]
[-, 1, *, f, ., getConstantTerm, (, ), ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (]
[*, f, ., getConstantTerm, (, ), ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, zIndex, ,]
[*, f, ., getConstantTerm, (, ), ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, zIndex, ,]
[(, ), ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, zIndex, ,, getSlackVariableOffset, (, ), -]
[), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, zIndex, ,, getSlackVariableOffset, (, ), -, 1, ,]
[if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, zIndex, ,, getSlackVariableOffset, (, ), -, 1, ,, getInvertedCoefficientSum, (]
[setEntry, (, zIndex, ,, getSlackVariableOffset, (, ), -, 1, ,, getInvertedCoefficientSum, (, objectiveCoefficients, ), ), ;, }, int, slackVar, =]
[(, ), -, 1, ,, getInvertedCoefficientSum, (, objectiveCoefficients, ), ), ;, }, int, slackVar, =, 0, ;, int, artificialVar, =]
[objectiveCoefficients, ), ), ;, }, int, slackVar, =, 0, ;, int, artificialVar, =, 0, ;, for, (, int, i, =]
[), ;, }, int, slackVar, =, 0, ;, int, artificialVar, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, }, int, slackVar, =, 0, ;, int, artificialVar, =, 0, ;, for, (, int, i, =, 0, ;]
[}, int, slackVar, =, 0, ;, int, artificialVar, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[}, int, slackVar, =, 0, ;, int, artificialVar, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[int, artificialVar, =, 0, ;, for, (, int, i, =, 0, ;, i, <, constraints, ., size, (, ), ;]
[int, artificialVar, =, 0, ;, for, (, int, i, =, 0, ;, i, <, constraints, ., size, (, ), ;]
[int, i, =, 0, ;, i, <, constraints, ., size, (, ), ;, i, ++, ), {, LinearConstraint, constraint, =]
[int, i, =, 0, ;, i, <, constraints, ., size, (, ), ;, i, ++, ), {, LinearConstraint, constraint, =]
[;, i, <, constraints, ., size, (, ), ;, i, ++, ), {, LinearConstraint, constraint, =, constraints, ., get, (]
[(, ), ;, i, ++, ), {, LinearConstraint, constraint, =, constraints, ., get, (, i, ), ;, int, row, =]
[(, ), ;, i, ++, ), {, LinearConstraint, constraint, =, constraints, ., get, (, i, ), ;, int, row, =]
[++, ), {, LinearConstraint, constraint, =, constraints, ., get, (, i, ), ;, int, row, =, getNumObjectiveFunctions, (, ), +]
[{, LinearConstraint, constraint, =, constraints, ., get, (, i, ), ;, int, row, =, getNumObjectiveFunctions, (, ), +, i, ;]
[constraint, =, constraints, ., get, (, i, ), ;, int, row, =, getNumObjectiveFunctions, (, ), +, i, ;, copyArray, (]
[constraint, =, constraints, ., get, (, i, ), ;, int, row, =, getNumObjectiveFunctions, (, ), +, i, ;, copyArray, (]
[constraint, =, constraints, ., get, (, i, ), ;, int, row, =, getNumObjectiveFunctions, (, ), +, i, ;, copyArray, (]
[row, =, getNumObjectiveFunctions, (, ), +, i, ;, copyArray, (, constraint, ., getCoefficients, (, ), ., toArray, (, ), ,]
[row, =, getNumObjectiveFunctions, (, ), +, i, ;, copyArray, (, constraint, ., getCoefficients, (, ), ., toArray, (, ), ,]
[row, =, getNumObjectiveFunctions, (, ), +, i, ;, copyArray, (, constraint, ., getCoefficients, (, ), ., toArray, (, ), ,]
[i, ;, copyArray, (, constraint, ., getCoefficients, (, ), ., toArray, (, ), ,, matrix, ., getDataRef, (, ), []
[getCoefficients, (, ), ., toArray, (, ), ,, matrix, ., getDataRef, (, ), [, row, ], ), ;, if, (]
[(, ), ., toArray, (, ), ,, matrix, ., getDataRef, (, ), [, row, ], ), ;, if, (, !]
[toArray, (, ), ,, matrix, ., getDataRef, (, ), [, row, ], ), ;, if, (, !, restrictToNonNegative, ), {]
[toArray, (, ), ,, matrix, ., getDataRef, (, ), [, row, ], ), ;, if, (, !, restrictToNonNegative, ), {]
[matrix, ., getDataRef, (, ), [, row, ], ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (]
[getDataRef, (, ), [, row, ], ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, row, ,]
[getDataRef, (, ), [, row, ], ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, row, ,]
[row, ], ), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), -]
[), ;, if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), -, 1, ,]
[if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), -, 1, ,, getInvertedCoefficientSum, (]
[if, (, !, restrictToNonNegative, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), -, 1, ,, getInvertedCoefficientSum, (]
[(, row, ,, getSlackVariableOffset, (, ), -, 1, ,, getInvertedCoefficientSum, (, constraint, ., getCoefficients, (, ), ), ), ;, }]
[(, row, ,, getSlackVariableOffset, (, ), -, 1, ,, getInvertedCoefficientSum, (, constraint, ., getCoefficients, (, ), ), ), ;, }]
[(, ), -, 1, ,, getInvertedCoefficientSum, (, constraint, ., getCoefficients, (, ), ), ), ;, }, matrix, ., setEntry, (]
[-, 1, ,, getInvertedCoefficientSum, (, constraint, ., getCoefficients, (, ), ), ), ;, }, matrix, ., setEntry, (, row, ,]
[-, 1, ,, getInvertedCoefficientSum, (, constraint, ., getCoefficients, (, ), ), ), ;, }, matrix, ., setEntry, (, row, ,]
[,, getInvertedCoefficientSum, (, constraint, ., getCoefficients, (, ), ), ), ;, }, matrix, ., setEntry, (, row, ,, width, -]
[(, constraint, ., getCoefficients, (, ), ), ), ;, }, matrix, ., setEntry, (, row, ,, width, -, 1, ,]
[(, constraint, ., getCoefficients, (, ), ), ), ;, }, matrix, ., setEntry, (, row, ,, width, -, 1, ,]
[}, matrix, ., setEntry, (, row, ,, width, -, 1, ,, constraint, ., getValue, (, ), ), ;, if, (]
[}, matrix, ., setEntry, (, row, ,, width, -, 1, ,, constraint, ., getValue, (, ), ), ;, if, (]
[}, matrix, ., setEntry, (, row, ,, width, -, 1, ,, constraint, ., getValue, (, ), ), ;, if, (]
[,, width, -, 1, ,, constraint, ., getValue, (, ), ), ;, if, (, constraint, ., getRelationship, (, ), ==]
[,, width, -, 1, ,, constraint, ., getValue, (, ), ), ;, if, (, constraint, ., getRelationship, (, ), ==]
[constraint, ., getValue, (, ), ), ;, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., LEQ, ), {]
[constraint, ., getValue, (, ), ), ;, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., LEQ, ), {]
[), ), ;, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., LEQ, ), {, matrix, ., setEntry, (]
[;, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., LEQ, ), {, matrix, ., setEntry, (, row, ,]
[;, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., LEQ, ), {, matrix, ., setEntry, (, row, ,]
[., getRelationship, (, ), ==, Relationship, ., LEQ, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +]
[., getRelationship, (, ), ==, Relationship, ., LEQ, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +]
[), ==, Relationship, ., LEQ, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,]
[matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, 1, ), ;, }, else, if, (]
[matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, 1, ), ;, }, else, if, (]
[matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, 1, ), ;, }, else, if, (]
[getSlackVariableOffset, (, ), +, slackVar, ++, ,, 1, ), ;, }, else, if, (, constraint, ., getRelationship, (, ), ==]
[getSlackVariableOffset, (, ), +, slackVar, ++, ,, 1, ), ;, }, else, if, (, constraint, ., getRelationship, (, ), ==]
[++, ,, 1, ), ;, }, else, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), {]
[++, ,, 1, ), ;, }, else, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), {]
[;, }, else, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), {, matrix, ., setEntry, (]
[else, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), {, matrix, ., setEntry, (, row, ,]
[else, if, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), {, matrix, ., setEntry, (, row, ,]
[., getRelationship, (, ), ==, Relationship, ., GEQ, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +]
[., getRelationship, (, ), ==, Relationship, ., GEQ, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +]
[), ==, Relationship, ., GEQ, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,]
[==, Relationship, ., GEQ, ), {, matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, -]
[matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, -, 1, ), ;, }, if, (]
[matrix, ., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, -, 1, ), ;, }, if, (]
[., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, -, 1, ), ;, }, if, (, (]
[., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, -, 1, ), ;, }, if, (, (]
[., setEntry, (, row, ,, getSlackVariableOffset, (, ), +, slackVar, ++, ,, -, 1, ), ;, }, if, (, (]
[(, ), +, slackVar, ++, ,, -, 1, ), ;, }, if, (, (, constraint, ., getRelationship, (, ), ==]
[(, ), +, slackVar, ++, ,, -, 1, ), ;, }, if, (, (, constraint, ., getRelationship, (, ), ==]
[,, -, 1, ), ;, }, if, (, (, constraint, ., getRelationship, (, ), ==, Relationship, ., EQ, ), ||]
[-, 1, ), ;, }, if, (, (, constraint, ., getRelationship, (, ), ==, Relationship, ., EQ, ), ||, (]
[-, 1, ), ;, }, if, (, (, constraint, ., getRelationship, (, ), ==, Relationship, ., EQ, ), ||, (]
[-, 1, ), ;, }, if, (, (, constraint, ., getRelationship, (, ), ==, Relationship, ., EQ, ), ||, (]
[(, (, constraint, ., getRelationship, (, ), ==, Relationship, ., EQ, ), ||, (, constraint, ., getRelationship, (, ), ==]
[(, (, constraint, ., getRelationship, (, ), ==, Relationship, ., EQ, ), ||, (, constraint, ., getRelationship, (, ), ==]
[), ==, Relationship, ., EQ, ), ||, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), ), {]
[), ==, Relationship, ., EQ, ), ||, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), ), {]
[EQ, ), ||, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), ), {, matrix, ., setEntry, (]
[||, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), ), {, matrix, ., setEntry, (, 0, ,]
[||, (, constraint, ., getRelationship, (, ), ==, Relationship, ., GEQ, ), ), {, matrix, ., setEntry, (, 0, ,]
[getRelationship, (, ), ==, Relationship, ., GEQ, ), ), {, matrix, ., setEntry, (, 0, ,, getArtificialVariableOffset, (, ), +]
[), ==, Relationship, ., GEQ, ), ), {, matrix, ., setEntry, (, 0, ,, getArtificialVariableOffset, (, ), +, artificialVar, ,]
[., GEQ, ), ), {, matrix, ., setEntry, (, 0, ,, getArtificialVariableOffset, (, ), +, artificialVar, ,, 1, ), ;]
[., GEQ, ), ), {, matrix, ., setEntry, (, 0, ,, getArtificialVariableOffset, (, ), +, artificialVar, ,, 1, ), ;]
[{, matrix, ., setEntry, (, 0, ,, getArtificialVariableOffset, (, ), +, artificialVar, ,, 1, ), ;, matrix, ., setEntry, (]
[., setEntry, (, 0, ,, getArtificialVariableOffset, (, ), +, artificialVar, ,, 1, ), ;, matrix, ., setEntry, (, row, ,]
[., setEntry, (, 0, ,, getArtificialVariableOffset, (, ), +, artificialVar, ,, 1, ), ;, matrix, ., setEntry, (, row, ,]
[,, getArtificialVariableOffset, (, ), +, artificialVar, ,, 1, ), ;, matrix, ., setEntry, (, row, ,, getArtificialVariableOffset, (, ), +]
[,, getArtificialVariableOffset, (, ), +, artificialVar, ,, 1, ), ;, matrix, ., setEntry, (, row, ,, getArtificialVariableOffset, (, ), +]
[), +, artificialVar, ,, 1, ), ;, matrix, ., setEntry, (, row, ,, getArtificialVariableOffset, (, ), +, artificialVar, ++, ,]
[,, 1, ), ;, matrix, ., setEntry, (, row, ,, getArtificialVariableOffset, (, ), +, artificialVar, ++, ,, 1, ), ;]
[,, 1, ), ;, matrix, ., setEntry, (, row, ,, getArtificialVariableOffset, (, ), +, artificialVar, ++, ,, 1, ), ;]
[matrix, ., setEntry, (, row, ,, getArtificialVariableOffset, (, ), +, artificialVar, ++, ,, 1, ), ;, matrix, ., setRowVector, (]
[setEntry, (, row, ,, getArtificialVariableOffset, (, ), +, artificialVar, ++, ,, 1, ), ;, matrix, ., setRowVector, (, 0, ,]
[setEntry, (, row, ,, getArtificialVariableOffset, (, ), +, artificialVar, ++, ,, 1, ), ;, matrix, ., setRowVector, (, 0, ,]
[setEntry, (, row, ,, getArtificialVariableOffset, (, ), +, artificialVar, ++, ,, 1, ), ;, matrix, ., setRowVector, (, 0, ,]
[getArtificialVariableOffset, (, ), +, artificialVar, ++, ,, 1, ), ;, matrix, ., setRowVector, (, 0, ,, matrix, ., getRowVector, (]
[++, ,, 1, ), ;, matrix, ., setRowVector, (, 0, ,, matrix, ., getRowVector, (, 0, ), ., subtract, (]
[++, ,, 1, ), ;, matrix, ., setRowVector, (, 0, ,, matrix, ., getRowVector, (, 0, ), ., subtract, (]
[;, matrix, ., setRowVector, (, 0, ,, matrix, ., getRowVector, (, 0, ), ., subtract, (, matrix, ., getRowVector, (]
[., getRowVector, (, 0, ), ., subtract, (, matrix, ., getRowVector, (, row, ), ), ), ;, }, }, return]
[public, List, <, LinearConstraint, >, normalizeConstraints, (, Collection, <, LinearConstraint, >, originalConstraints, ), {, List, <, LinearConstraint, >, normalized, =]
[(, Collection, <, LinearConstraint, >, originalConstraints, ), {, List, <, LinearConstraint, >, normalized, =, new, ArrayList, <, LinearConstraint, >, (]
[(, Collection, <, LinearConstraint, >, originalConstraints, ), {, List, <, LinearConstraint, >, normalized, =, new, ArrayList, <, LinearConstraint, >, (]
[normalized, =, new, ArrayList, <, LinearConstraint, >, (, originalConstraints, ., size, (, ), ), ;, for, (, LinearConstraint, constraint, :]
[ArrayList, <, LinearConstraint, >, (, originalConstraints, ., size, (, ), ), ;, for, (, LinearConstraint, constraint, :, originalConstraints, ), {]
[ArrayList, <, LinearConstraint, >, (, originalConstraints, ., size, (, ), ), ;, for, (, LinearConstraint, constraint, :, originalConstraints, ), {]
[(, originalConstraints, ., size, (, ), ), ;, for, (, LinearConstraint, constraint, :, originalConstraints, ), {, normalized, ., add, (]
[., size, (, ), ), ;, for, (, LinearConstraint, constraint, :, originalConstraints, ), {, normalized, ., add, (, normalize, (]
[for, (, LinearConstraint, constraint, :, originalConstraints, ), {, normalized, ., add, (, normalize, (, constraint, ), ), ;, }, return]
[constraint, ), ), ;, }, return, normalized, ;, }, private, LinearConstraint, normalize, (, final, LinearConstraint, constraint, ), {, if, (]
[constraint, ), ), ;, }, return, normalized, ;, }, private, LinearConstraint, normalize, (, final, LinearConstraint, constraint, ), {, if, (]
[constraint, ), ), ;, }, return, normalized, ;, }, private, LinearConstraint, normalize, (, final, LinearConstraint, constraint, ), {, if, (]
[normalized, ;, }, private, LinearConstraint, normalize, (, final, LinearConstraint, constraint, ), {, if, (, constraint, ., getValue, (, ), <]
[LinearConstraint, normalize, (, final, LinearConstraint, constraint, ), {, if, (, constraint, ., getValue, (, ), <, 0, ), {, return]
[final, LinearConstraint, constraint, ), {, if, (, constraint, ., getValue, (, ), <, 0, ), {, return, new, LinearConstraint, (]
[final, LinearConstraint, constraint, ), {, if, (, constraint, ., getValue, (, ), <, 0, ), {, return, new, LinearConstraint, (]
[final, LinearConstraint, constraint, ), {, if, (, constraint, ., getValue, (, ), <, 0, ), {, return, new, LinearConstraint, (]
[., getValue, (, ), <, 0, ), {, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ., mapMultiply, (]
[getValue, (, ), <, 0, ), {, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ., mapMultiply, (, -]
[<, 0, ), {, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), ,]
[<, 0, ), {, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), ,]
[<, 0, ), {, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ., mapMultiply, (, -, 1, ), ,]
[getCoefficients, (, ), ., mapMultiply, (, -, 1, ), ,, constraint, ., getRelationship, (, ), ., oppositeRelationship, (, ), ,]
[getCoefficients, (, ), ., mapMultiply, (, -, 1, ), ,, constraint, ., getRelationship, (, ), ., oppositeRelationship, (, ), ,]
[(, ), ., mapMultiply, (, -, 1, ), ,, constraint, ., getRelationship, (, ), ., oppositeRelationship, (, ), ,, -]
[., mapMultiply, (, -, 1, ), ,, constraint, ., getRelationship, (, ), ., oppositeRelationship, (, ), ,, -, 1, *]
[., mapMultiply, (, -, 1, ), ,, constraint, ., getRelationship, (, ), ., oppositeRelationship, (, ), ,, -, 1, *]
[getRelationship, (, ), ., oppositeRelationship, (, ), ,, -, 1, *, constraint, ., getValue, (, ), ), ;, }, return]
[., oppositeRelationship, (, ), ,, -, 1, *, constraint, ., getValue, (, ), ), ;, }, return, new, LinearConstraint, (]
[., oppositeRelationship, (, ), ,, -, 1, *, constraint, ., getValue, (, ), ), ;, }, return, new, LinearConstraint, (]
[1, *, constraint, ., getValue, (, ), ), ;, }, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ,]
[1, *, constraint, ., getValue, (, ), ), ;, }, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ,]
[), ), ;, }, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ,, constraint, ., getRelationship, (, ), ,]
[), ), ;, }, return, new, LinearConstraint, (, constraint, ., getCoefficients, (, ), ,, constraint, ., getRelationship, (, ), ,]
[getRelationship, (, ), ,, constraint, ., getValue, (, ), ), ;, }, protected, final, int, getNumObjectiveFunctions, (, ), {, return]
[getRelationship, (, ), ,, constraint, ., getValue, (, ), ), ;, }, protected, final, int, getNumObjectiveFunctions, (, ), {, return]
[getRelationship, (, ), ,, constraint, ., getValue, (, ), ), ;, }, protected, final, int, getNumObjectiveFunctions, (, ), {, return]
[getRelationship, (, ), ,, constraint, ., getValue, (, ), ), ;, }, protected, final, int, getNumObjectiveFunctions, (, ), {, return]
[constraint, ., getValue, (, ), ), ;, }, protected, final, int, getNumObjectiveFunctions, (, ), {, return, this, ., numArtificialVariables, >]
[getValue, (, ), ), ;, }, protected, final, int, getNumObjectiveFunctions, (, ), {, return, this, ., numArtificialVariables, >, 0, ?]
[), ), ;, }, protected, final, int, getNumObjectiveFunctions, (, ), {, return, this, ., numArtificialVariables, >, 0, ?, 2, :]
[>, 0, ?, 2, :, 1, ;, }, private, int, getConstraintTypeCounts, (, final, Relationship, relationship, ), {, int, count, =]
[private, int, getConstraintTypeCounts, (, final, Relationship, relationship, ), {, int, count, =, 0, ;, for, (, final, LinearConstraint, constraint, :]
[Relationship, relationship, ), {, int, count, =, 0, ;, for, (, final, LinearConstraint, constraint, :, constraints, ), {, if, (]
[Relationship, relationship, ), {, int, count, =, 0, ;, for, (, final, LinearConstraint, constraint, :, constraints, ), {, if, (]
[Relationship, relationship, ), {, int, count, =, 0, ;, for, (, final, LinearConstraint, constraint, :, constraints, ), {, if, (]
[=, 0, ;, for, (, final, LinearConstraint, constraint, :, constraints, ), {, if, (, constraint, ., getRelationship, (, ), ==]
[for, (, final, LinearConstraint, constraint, :, constraints, ), {, if, (, constraint, ., getRelationship, (, ), ==, relationship, ), {]
[(, final, LinearConstraint, constraint, :, constraints, ), {, if, (, constraint, ., getRelationship, (, ), ==, relationship, ), {, ++]
[constraints, ), {, if, (, constraint, ., getRelationship, (, ), ==, relationship, ), {, ++, count, ;, }, }, return]
[;, }, }, return, count, ;, }, protected, static, double, getInvertedCoefficientSum, (, final, RealVector, coefficients, ), {, double, sum, =]
[protected, static, double, getInvertedCoefficientSum, (, final, RealVector, coefficients, ), {, double, sum, =, 0, ;, for, (, double, coefficient, :]
[protected, static, double, getInvertedCoefficientSum, (, final, RealVector, coefficients, ), {, double, sum, =, 0, ;, for, (, double, coefficient, :]
[coefficients, ), {, double, sum, =, 0, ;, for, (, double, coefficient, :, coefficients, ., toArray, (, ), ), {]
[{, double, sum, =, 0, ;, for, (, double, coefficient, :, coefficients, ., toArray, (, ), ), {, sum, -=]
[0, ;, for, (, double, coefficient, :, coefficients, ., toArray, (, ), ), {, sum, -=, coefficient, ;, }, return]
[-=, coefficient, ;, }, return, sum, ;, }, protected, Integer, getBasicRow, (, final, int, col, ), {, Integer, row, =]
[}, protected, Integer, getBasicRow, (, final, int, col, ), {, Integer, row, =, null, ;, for, (, int, i, =]
[Integer, getBasicRow, (, final, int, col, ), {, Integer, row, =, null, ;, for, (, int, i, =, 0, ;]
[Integer, getBasicRow, (, final, int, col, ), {, Integer, row, =, null, ;, for, (, int, i, =, 0, ;]
[(, final, int, col, ), {, Integer, row, =, null, ;, for, (, int, i, =, 0, ;, i, <]
[), {, Integer, row, =, null, ;, for, (, int, i, =, 0, ;, i, <, getHeight, (, ), ;]
[), {, Integer, row, =, null, ;, for, (, int, i, =, 0, ;, i, <, getHeight, (, ), ;]
[(, int, i, =, 0, ;, i, <, getHeight, (, ), ;, i, ++, ), {, final, double, entry, =]
[i, =, 0, ;, i, <, getHeight, (, ), ;, i, ++, ), {, final, double, entry, =, getEntry, (]
[0, ;, i, <, getHeight, (, ), ;, i, ++, ), {, final, double, entry, =, getEntry, (, i, ,]
[(, ), ;, i, ++, ), {, final, double, entry, =, getEntry, (, i, ,, col, ), ;, if, (]
[(, ), ;, i, ++, ), {, final, double, entry, =, getEntry, (, i, ,, col, ), ;, if, (]
[(, ), ;, i, ++, ), {, final, double, entry, =, getEntry, (, i, ,, col, ), ;, if, (]
[++, ), {, final, double, entry, =, getEntry, (, i, ,, col, ), ;, if, (, Precision, ., equals, (]
[{, final, double, entry, =, getEntry, (, i, ,, col, ), ;, if, (, Precision, ., equals, (, entry, ,]
[double, entry, =, getEntry, (, i, ,, col, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,]
[getEntry, (, i, ,, col, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&]
[(, i, ,, col, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, (]
[(, i, ,, col, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, (]
[,, col, ), ;, if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, (, row, ==]
[if, (, Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, (, row, ==, null, ), ), {]
[Precision, ., equals, (, entry, ,, 1d, ,, maxUlps, ), &&, (, row, ==, null, ), ), {, row, =]
[1d, ,, maxUlps, ), &&, (, row, ==, null, ), ), {, row, =, i, ;, }, else, if, (]
[,, maxUlps, ), &&, (, row, ==, null, ), ), {, row, =, i, ;, }, else, if, (, !]
[,, maxUlps, ), &&, (, row, ==, null, ), ), {, row, =, i, ;, }, else, if, (, !]
[(, row, ==, null, ), ), {, row, =, i, ;, }, else, if, (, !, Precision, ., equals, (]
[==, null, ), ), {, row, =, i, ;, }, else, if, (, !, Precision, ., equals, (, entry, ,]
[), ), {, row, =, i, ;, }, else, if, (, !, Precision, ., equals, (, entry, ,, 0d, ,]
[i, ;, }, else, if, (, !, Precision, ., equals, (, entry, ,, 0d, ,, maxUlps, ), ), {, return]
[(, !, Precision, ., equals, (, entry, ,, 0d, ,, maxUlps, ), ), {, return, null, ;, }, }, return]
[), ), {, return, null, ;, }, }, return, row, ;, }, protected, void, dropPhase1Objective, (, ), {, if, (]
[), ), {, return, null, ;, }, }, return, row, ;, }, protected, void, dropPhase1Objective, (, ), {, if, (]
[null, ;, }, }, return, row, ;, }, protected, void, dropPhase1Objective, (, ), {, if, (, getNumObjectiveFunctions, (, ), ==]
[), {, if, (, getNumObjectiveFunctions, (, ), ==, 1, ), {, return, ;, }, Set, <, Integer, >, columnsToDrop, =]
[1, ), {, return, ;, }, Set, <, Integer, >, columnsToDrop, =, new, TreeSet, <, Integer, >, (, ), ;]
[1, ), {, return, ;, }, Set, <, Integer, >, columnsToDrop, =, new, TreeSet, <, Integer, >, (, ), ;]
[;, }, Set, <, Integer, >, columnsToDrop, =, new, TreeSet, <, Integer, >, (, ), ;, columnsToDrop, ., add, (]
[new, TreeSet, <, Integer, >, (, ), ;, columnsToDrop, ., add, (, 0, ), ;, for, (, int, i, =]
[>, (, ), ;, columnsToDrop, ., add, (, 0, ), ;, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;]
[>, (, ), ;, columnsToDrop, ., add, (, 0, ), ;, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;]
[), ;, columnsToDrop, ., add, (, 0, ), ;, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <]
[add, (, 0, ), ;, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <, getArtificialVariableOffset, (, ), ;]
[add, (, 0, ), ;, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <, getArtificialVariableOffset, (, ), ;]
[i, =, getNumObjectiveFunctions, (, ), ;, i, <, getArtificialVariableOffset, (, ), ;, i, ++, ), {, final, double, entry, =]
[i, =, getNumObjectiveFunctions, (, ), ;, i, <, getArtificialVariableOffset, (, ), ;, i, ++, ), {, final, double, entry, =]
[), ;, i, <, getArtificialVariableOffset, (, ), ;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (]
[i, <, getArtificialVariableOffset, (, ), ;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[{, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (]
[double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,]
[=, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,]
[getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, epsilon, ), >]
[,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, epsilon, ), >, 0, ), {]
[,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, epsilon, ), >, 0, ), {]
[if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, epsilon, ), >, 0, ), {, columnsToDrop, ., add, (]
[epsilon, ), >, 0, ), {, columnsToDrop, ., add, (, i, ), ;, }, }, for, (, int, i, =]
[>, 0, ), {, columnsToDrop, ., add, (, i, ), ;, }, }, for, (, int, i, =, 0, ;]
[>, 0, ), {, columnsToDrop, ., add, (, i, ), ;, }, }, for, (, int, i, =, 0, ;]
[), {, columnsToDrop, ., add, (, i, ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[add, (, i, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;]
[add, (, i, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;]
[for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, int, col, =]
[for, (, int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, int, col, =]
[int, i, =, 0, ;, i, <, getNumArtificialVariables, (, ), ;, i, ++, ), {, int, col, =, i, +]
[<, getNumArtificialVariables, (, ), ;, i, ++, ), {, int, col, =, i, +, getArtificialVariableOffset, (, ), ;, if, (]
[<, getNumArtificialVariables, (, ), ;, i, ++, ), {, int, col, =, i, +, getArtificialVariableOffset, (, ), ;, if, (]
[(, ), ;, i, ++, ), {, int, col, =, i, +, getArtificialVariableOffset, (, ), ;, if, (, getBasicRow, (]
[i, ++, ), {, int, col, =, i, +, getArtificialVariableOffset, (, ), ;, if, (, getBasicRow, (, col, ), ==]
[{, int, col, =, i, +, getArtificialVariableOffset, (, ), ;, if, (, getBasicRow, (, col, ), ==, null, ), {]
[{, int, col, =, i, +, getArtificialVariableOffset, (, ), ;, if, (, getBasicRow, (, col, ), ==, null, ), {]
[i, +, getArtificialVariableOffset, (, ), ;, if, (, getBasicRow, (, col, ), ==, null, ), {, columnsToDrop, ., add, (]
[==, null, ), {, columnsToDrop, ., add, (, col, ), ;, }, }, double, [, ], [, ], matrix, =]
[{, columnsToDrop, ., add, (, col, ), ;, }, }, double, [, ], [, ], matrix, =, new, double, []
[{, columnsToDrop, ., add, (, col, ), ;, }, }, double, [, ], [, ], matrix, =, new, double, []
[(, col, ), ;, }, }, double, [, ], [, ], matrix, =, new, double, [, getHeight, (, ), -]
[;, }, }, double, [, ], [, ], matrix, =, new, double, [, getHeight, (, ), -, 1, ], []
[;, }, }, double, [, ], [, ], matrix, =, new, double, [, getHeight, (, ), -, 1, ], []
[[, ], [, ], matrix, =, new, double, [, getHeight, (, ), -, 1, ], [, getWidth, (, ), -]
[[, ], [, ], matrix, =, new, double, [, getHeight, (, ), -, 1, ], [, getWidth, (, ), -]
[-, 1, ], [, getWidth, (, ), -, columnsToDrop, ., size, (, ), ], ;, for, (, int, i, =]
[], [, getWidth, (, ), -, columnsToDrop, ., size, (, ), ], ;, for, (, int, i, =, 1, ;]
[], [, getWidth, (, ), -, columnsToDrop, ., size, (, ), ], ;, for, (, int, i, =, 1, ;]
[getWidth, (, ), -, columnsToDrop, ., size, (, ), ], ;, for, (, int, i, =, 1, ;, i, <]
[columnsToDrop, ., size, (, ), ], ;, for, (, int, i, =, 1, ;, i, <, getHeight, (, ), ;]
[columnsToDrop, ., size, (, ), ], ;, for, (, int, i, =, 1, ;, i, <, getHeight, (, ), ;]
[for, (, int, i, =, 1, ;, i, <, getHeight, (, ), ;, i, ++, ), {, int, col, =]
[i, <, getHeight, (, ), ;, i, ++, ), {, int, col, =, 0, ;, for, (, int, j, =]
[getHeight, (, ), ;, i, ++, ), {, int, col, =, 0, ;, for, (, int, j, =, 0, ;]
[getHeight, (, ), ;, i, ++, ), {, int, col, =, 0, ;, for, (, int, j, =, 0, ;]
[), ;, i, ++, ), {, int, col, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[), {, int, col, =, 0, ;, for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;]
[), {, int, col, =, 0, ;, for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;]
[;, for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, if, (]
[for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, if, (, !]
[for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, if, (, !]
[=, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, if, (, !, columnsToDrop, ., contains, (]
[<, getWidth, (, ), ;, j, ++, ), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {]
[<, getWidth, (, ), ;, j, ++, ), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {]
[<, getWidth, (, ), ;, j, ++, ), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {]
[(, ), ;, j, ++, ), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {, matrix, []
[(, ), ;, j, ++, ), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {, matrix, []
[;, j, ++, ), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {, matrix, [, i, -]
[), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {, matrix, [, i, -, 1, ], []
[), {, if, (, !, columnsToDrop, ., contains, (, j, ), ), {, matrix, [, i, -, 1, ], []
[!, columnsToDrop, ., contains, (, j, ), ), {, matrix, [, i, -, 1, ], [, col, ++, ], =]
[!, columnsToDrop, ., contains, (, j, ), ), {, matrix, [, i, -, 1, ], [, col, ++, ], =]
[(, j, ), ), {, matrix, [, i, -, 1, ], [, col, ++, ], =, tableau, ., getEntry, (]
[), ), {, matrix, [, i, -, 1, ], [, col, ++, ], =, tableau, ., getEntry, (, i, ,]
[++, ], =, tableau, ., getEntry, (, i, ,, j, ), ;, }, }, }, Integer, [, ], drop, =]
[++, ], =, tableau, ., getEntry, (, i, ,, j, ), ;, }, }, }, Integer, [, ], drop, =]
[., getEntry, (, i, ,, j, ), ;, }, }, }, Integer, [, ], drop, =, columnsToDrop, ., toArray, (]
[i, ,, j, ), ;, }, }, }, Integer, [, ], drop, =, columnsToDrop, ., toArray, (, new, Integer, []
[i, ,, j, ), ;, }, }, }, Integer, [, ], drop, =, columnsToDrop, ., toArray, (, new, Integer, []
[columnsToDrop, ., toArray, (, new, Integer, [, columnsToDrop, ., size, (, ), ], ), ;, for, (, int, i, =]
[columnsToDrop, ., toArray, (, new, Integer, [, columnsToDrop, ., size, (, ), ], ), ;, for, (, int, i, =]
[columnsToDrop, ., toArray, (, new, Integer, [, columnsToDrop, ., size, (, ), ], ), ;, for, (, int, i, =]
[new, Integer, [, columnsToDrop, ., size, (, ), ], ), ;, for, (, int, i, =, drop, ., length, -]
[[, columnsToDrop, ., size, (, ), ], ), ;, for, (, int, i, =, drop, ., length, -, 1, ;]
[[, columnsToDrop, ., size, (, ), ], ), ;, for, (, int, i, =, drop, ., length, -, 1, ;]
[., size, (, ), ], ), ;, for, (, int, i, =, drop, ., length, -, 1, ;, i, >=]
[(, ), ], ), ;, for, (, int, i, =, drop, ., length, -, 1, ;, i, >=, 0, ;]
[(, ), ], ), ;, for, (, int, i, =, drop, ., length, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, drop, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, for, (, int, i, =, drop, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[i, =, drop, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, columnLabels, ., remove, (]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, columnLabels, ., remove, (, (, int, )]
[., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, columnLabels, ., remove, (, (, int, )]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, columnLabels, ., remove, (, (, int, ), drop, []
[0, ;, i, --, ), {, columnLabels, ., remove, (, (, int, ), drop, [, i, ], ), ;, }]
[0, ;, i, --, ), {, columnLabels, ., remove, (, (, int, ), drop, [, i, ], ), ;, }]
[), {, columnLabels, ., remove, (, (, int, ), drop, [, i, ], ), ;, }, this, ., tableau, =]
[., remove, (, (, int, ), drop, [, i, ], ), ;, }, this, ., tableau, =, new, Array2DRowRealMatrix, (]
[(, int, ), drop, [, i, ], ), ;, }, this, ., tableau, =, new, Array2DRowRealMatrix, (, matrix, ), ;]
[(, int, ), drop, [, i, ], ), ;, }, this, ., tableau, =, new, Array2DRowRealMatrix, (, matrix, ), ;]
[[, i, ], ), ;, }, this, ., tableau, =, new, Array2DRowRealMatrix, (, matrix, ), ;, this, ., numArtificialVariables, =]
[0, ;, }, private, void, copyArray, (, final, double, [, ], src, ,, final, double, [, ], dest, ), {]
[0, ;, }, private, void, copyArray, (, final, double, [, ], src, ,, final, double, [, ], dest, ), {]
[void, copyArray, (, final, double, [, ], src, ,, final, double, [, ], dest, ), {, System, ., arraycopy, (]
[(, final, double, [, ], src, ,, final, double, [, ], dest, ), {, System, ., arraycopy, (, src, ,]
[double, [, ], src, ,, final, double, [, ], dest, ), {, System, ., arraycopy, (, src, ,, 0, ,]
[], src, ,, final, double, [, ], dest, ), {, System, ., arraycopy, (, src, ,, 0, ,, dest, ,]
[double, [, ], dest, ), {, System, ., arraycopy, (, src, ,, 0, ,, dest, ,, getNumObjectiveFunctions, (, ), ,]
[double, [, ], dest, ), {, System, ., arraycopy, (, src, ,, 0, ,, dest, ,, getNumObjectiveFunctions, (, ), ,]
[getNumObjectiveFunctions, (, ), ,, src, ., length, ), ;, }, boolean, isOptimal, (, ), {, for, (, int, i, =]
[src, ., length, ), ;, }, boolean, isOptimal, (, ), {, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;]
[src, ., length, ), ;, }, boolean, isOptimal, (, ), {, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;]
[length, ), ;, }, boolean, isOptimal, (, ), {, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <]
[length, ), ;, }, boolean, isOptimal, (, ), {, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <]
[boolean, isOptimal, (, ), {, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <, getWidth, (, ), -]
[(, ), {, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <, getWidth, (, ), -, 1, ;]
[(, ), {, for, (, int, i, =, getNumObjectiveFunctions, (, ), ;, i, <, getWidth, (, ), -, 1, ;]
[getNumObjectiveFunctions, (, ), ;, i, <, getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =]
[getNumObjectiveFunctions, (, ), ;, i, <, getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =]
[i, <, getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (]
[getWidth, (, ), -, 1, ;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[;, i, ++, ), {, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (]
[{, final, double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (]
[double, entry, =, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,]
[=, tableau, ., getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,]
[getEntry, (, 0, ,, i, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, epsilon, ), <]
[i, ), ;, if, (, Precision, ., compareTo, (, entry, ,, 0d, ,, epsilon, ), <, 0, ), {, return]
[Precision, ., compareTo, (, entry, ,, 0d, ,, epsilon, ), <, 0, ), {, return, false, ;, }, }, return]
[), {, return, false, ;, }, }, return, true, ;, }, protected, PointValuePair, getSolution, (, ), {, int, negativeVarColumn, =]
[), {, return, false, ;, }, }, return, true, ;, }, protected, PointValuePair, getSolution, (, ), {, int, negativeVarColumn, =]
[;, }, }, return, true, ;, }, protected, PointValuePair, getSolution, (, ), {, int, negativeVarColumn, =, columnLabels, ., indexOf, (]
[}, protected, PointValuePair, getSolution, (, ), {, int, negativeVarColumn, =, columnLabels, ., indexOf, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =]
[}, protected, PointValuePair, getSolution, (, ), {, int, negativeVarColumn, =, columnLabels, ., indexOf, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =]
[}, protected, PointValuePair, getSolution, (, ), {, int, negativeVarColumn, =, columnLabels, ., indexOf, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =]
[PointValuePair, getSolution, (, ), {, int, negativeVarColumn, =, columnLabels, ., indexOf, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =, negativeVarColumn, >]
[(, ), {, int, negativeVarColumn, =, columnLabels, ., indexOf, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =, negativeVarColumn, >, 0, ?]
[{, int, negativeVarColumn, =, columnLabels, ., indexOf, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =, negativeVarColumn, >, 0, ?, getBasicRow, (]
[=, columnLabels, ., indexOf, (, NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =, negativeVarColumn, >, 0, ?, getBasicRow, (, negativeVarColumn, ), :]
[NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =, negativeVarColumn, >, 0, ?, getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =]
[NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =, negativeVarColumn, >, 0, ?, getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =]
[NEGATIVE_VAR_COLUMN_LABEL, ), ;, Integer, negativeVarBasicRow, =, negativeVarColumn, >, 0, ?, getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =]
[;, Integer, negativeVarBasicRow, =, negativeVarColumn, >, 0, ?, getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =, negativeVarBasicRow, ==]
[negativeVarBasicRow, =, negativeVarColumn, >, 0, ?, getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =, negativeVarBasicRow, ==, null, ?]
[negativeVarColumn, >, 0, ?, getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =, negativeVarBasicRow, ==, null, ?, 0, :]
[0, ?, getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =, negativeVarBasicRow, ==, null, ?, 0, :, getEntry, (]
[getBasicRow, (, negativeVarColumn, ), :, null, ;, double, mostNegative, =, negativeVarBasicRow, ==, null, ?, 0, :, getEntry, (, negativeVarBasicRow, ,]
[==, null, ?, 0, :, getEntry, (, negativeVarBasicRow, ,, getRhsOffset, (, ), ), ;, Set, <, Integer, >, basicRows, =]
[;, Set, <, Integer, >, basicRows, =, new, HashSet, <, Integer, >, (, ), ;, double, [, ], coefficients, =]
[Integer, >, basicRows, =, new, HashSet, <, Integer, >, (, ), ;, double, [, ], coefficients, =, new, double, []
[), ;, double, [, ], coefficients, =, new, double, [, getOriginalNumDecisionVariables, (, ), ], ;, for, (, int, i, =]
[double, [, ], coefficients, =, new, double, [, getOriginalNumDecisionVariables, (, ), ], ;, for, (, int, i, =, 0, ;]
[double, [, ], coefficients, =, new, double, [, getOriginalNumDecisionVariables, (, ), ], ;, for, (, int, i, =, 0, ;]
[], coefficients, =, new, double, [, getOriginalNumDecisionVariables, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[], coefficients, =, new, double, [, getOriginalNumDecisionVariables, (, ), ], ;, for, (, int, i, =, 0, ;, i, <]
[double, [, getOriginalNumDecisionVariables, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;]
[double, [, getOriginalNumDecisionVariables, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, int, colIndex, =]
[for, (, int, i, =, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, int, colIndex, =]
[=, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, int, colIndex, =, columnLabels, ., indexOf, (]
[=, 0, ;, i, <, coefficients, ., length, ;, i, ++, ), {, int, colIndex, =, columnLabels, ., indexOf, (]
[;, i, <, coefficients, ., length, ;, i, ++, ), {, int, colIndex, =, columnLabels, ., indexOf, (, "x", +]
[length, ;, i, ++, ), {, int, colIndex, =, columnLabels, ., indexOf, (, "x", +, i, ), ;, if, (]
[length, ;, i, ++, ), {, int, colIndex, =, columnLabels, ., indexOf, (, "x", +, i, ), ;, if, (]
[i, ++, ), {, int, colIndex, =, columnLabels, ., indexOf, (, "x", +, i, ), ;, if, (, colIndex, <]
[{, int, colIndex, =, columnLabels, ., indexOf, (, "x", +, i, ), ;, if, (, colIndex, <, 0, ), {]
[{, int, colIndex, =, columnLabels, ., indexOf, (, "x", +, i, ), ;, if, (, colIndex, <, 0, ), {]
[colIndex, =, columnLabels, ., indexOf, (, "x", +, i, ), ;, if, (, colIndex, <, 0, ), {, coefficients, []
[., indexOf, (, "x", +, i, ), ;, if, (, colIndex, <, 0, ), {, coefficients, [, i, ], =]
[if, (, colIndex, <, 0, ), {, coefficients, [, i, ], =, 0, ;, continue, ;, }, Integer, basicRow, =]
[colIndex, <, 0, ), {, coefficients, [, i, ], =, 0, ;, continue, ;, }, Integer, basicRow, =, getBasicRow, (]
[coefficients, [, i, ], =, 0, ;, continue, ;, }, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (]
[coefficients, [, i, ], =, 0, ;, continue, ;, }, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (]
[coefficients, [, i, ], =, 0, ;, continue, ;, }, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (]
[i, ], =, 0, ;, continue, ;, }, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (, basicRow, !=]
[=, 0, ;, continue, ;, }, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (, basicRow, !=, null, &&]
[=, 0, ;, continue, ;, }, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (, basicRow, !=, null, &&]
[;, continue, ;, }, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (, basicRow, !=, null, &&, basicRow, ==]
[}, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (, basicRow, !=, null, &&, basicRow, ==, 0, ), {]
[}, Integer, basicRow, =, getBasicRow, (, colIndex, ), ;, if, (, basicRow, !=, null, &&, basicRow, ==, 0, ), {]
[basicRow, =, getBasicRow, (, colIndex, ), ;, if, (, basicRow, !=, null, &&, basicRow, ==, 0, ), {, coefficients, []
[(, colIndex, ), ;, if, (, basicRow, !=, null, &&, basicRow, ==, 0, ), {, coefficients, [, i, ], =]
[basicRow, !=, null, &&, basicRow, ==, 0, ), {, coefficients, [, i, ], =, 0, ;, }, else, if, (]
[basicRow, !=, null, &&, basicRow, ==, 0, ), {, coefficients, [, i, ], =, 0, ;, }, else, if, (]
[basicRow, ==, 0, ), {, coefficients, [, i, ], =, 0, ;, }, else, if, (, basicRows, ., contains, (]
[{, coefficients, [, i, ], =, 0, ;, }, else, if, (, basicRows, ., contains, (, basicRow, ), ), {]
[{, coefficients, [, i, ], =, 0, ;, }, else, if, (, basicRows, ., contains, (, basicRow, ), ), {]
[[, i, ], =, 0, ;, }, else, if, (, basicRows, ., contains, (, basicRow, ), ), {, coefficients, []
[=, 0, ;, }, else, if, (, basicRows, ., contains, (, basicRow, ), ), {, coefficients, [, i, ], =]
[=, 0, ;, }, else, if, (, basicRows, ., contains, (, basicRow, ), ), {, coefficients, [, i, ], =]
[;, }, else, if, (, basicRows, ., contains, (, basicRow, ), ), {, coefficients, [, i, ], =, 0, -]
[}, else, if, (, basicRows, ., contains, (, basicRow, ), ), {, coefficients, [, i, ], =, 0, -, (]
[}, else, if, (, basicRows, ., contains, (, basicRow, ), ), {, coefficients, [, i, ], =, 0, -, (]
[if, (, basicRows, ., contains, (, basicRow, ), ), {, coefficients, [, i, ], =, 0, -, (, restrictToNonNegative, ?]
[basicRows, ., contains, (, basicRow, ), ), {, coefficients, [, i, ], =, 0, -, (, restrictToNonNegative, ?, 0, :]
[), {, coefficients, [, i, ], =, 0, -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, else, {]
[), {, coefficients, [, i, ], =, 0, -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, else, {]
[i, ], =, 0, -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, else, {, basicRows, ., add, (]
[0, -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;]
[0, -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;]
[(, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, []
[0, :, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =]
[0, :, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =]
[:, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =, (]
[:, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =, (]
[:, mostNegative, ), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =, (]
[), ;, }, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =, (, basicRow, ==]
[}, else, {, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =, (, basicRow, ==, null, ?]
[{, basicRows, ., add, (, basicRow, ), ;, coefficients, [, i, ], =, (, basicRow, ==, null, ?, 0, :]
[., add, (, basicRow, ), ;, coefficients, [, i, ], =, (, basicRow, ==, null, ?, 0, :, getEntry, (]
[(, basicRow, ), ;, coefficients, [, i, ], =, (, basicRow, ==, null, ?, 0, :, getEntry, (, basicRow, ,]
[i, ], =, (, basicRow, ==, null, ?, 0, :, getEntry, (, basicRow, ,, getRhsOffset, (, ), ), ), -]
[], =, (, basicRow, ==, null, ?, 0, :, getEntry, (, basicRow, ,, getRhsOffset, (, ), ), ), -, (]
[], =, (, basicRow, ==, null, ?, 0, :, getEntry, (, basicRow, ,, getRhsOffset, (, ), ), ), -, (]
[(, basicRow, ==, null, ?, 0, :, getEntry, (, basicRow, ,, getRhsOffset, (, ), ), ), -, (, restrictToNonNegative, ?]
[==, null, ?, 0, :, getEntry, (, basicRow, ,, getRhsOffset, (, ), ), ), -, (, restrictToNonNegative, ?, 0, :]
[(, basicRow, ,, getRhsOffset, (, ), ), ), -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, }, return]
[getRhsOffset, (, ), ), ), -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, }, return, new, PointValuePair, (]
[), ), ), -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, }, return, new, PointValuePair, (, coefficients, ,]
[), ), ), -, (, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, }, return, new, PointValuePair, (, coefficients, ,]
[(, restrictToNonNegative, ?, 0, :, mostNegative, ), ;, }, }, return, new, PointValuePair, (, coefficients, ,, f, ., getValue, (]
[;, }, protected, void, divideRow, (, final, int, dividendRow, ,, final, double, divisor, ), {, for, (, int, j, =]
[protected, void, divideRow, (, final, int, dividendRow, ,, final, double, divisor, ), {, for, (, int, j, =, 0, ;]
[protected, void, divideRow, (, final, int, dividendRow, ,, final, double, divisor, ), {, for, (, int, j, =, 0, ;]
[divideRow, (, final, int, dividendRow, ,, final, double, divisor, ), {, for, (, int, j, =, 0, ;, j, <]
[dividendRow, ,, final, double, divisor, ), {, for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;]
[dividendRow, ,, final, double, divisor, ), {, for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;]
[divisor, ), {, for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {]
[divisor, ), {, for, (, int, j, =, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {]
[(, int, j, =, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, tableau, ., setEntry, (]
[j, =, 0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, tableau, ., setEntry, (, dividendRow, ,]
[0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, tableau, ., setEntry, (, dividendRow, ,, j, ,]
[0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, tableau, ., setEntry, (, dividendRow, ,, j, ,]
[0, ;, j, <, getWidth, (, ), ;, j, ++, ), {, tableau, ., setEntry, (, dividendRow, ,, j, ,]
[getWidth, (, ), ;, j, ++, ), {, tableau, ., setEntry, (, dividendRow, ,, j, ,, tableau, ., getEntry, (]
[), ;, j, ++, ), {, tableau, ., setEntry, (, dividendRow, ,, j, ,, tableau, ., getEntry, (, dividendRow, ,]
[++, ), {, tableau, ., setEntry, (, dividendRow, ,, j, ,, tableau, ., getEntry, (, dividendRow, ,, j, ), /]
[subtractRow, (, final, int, minuendRow, ,, final, int, subtrahendRow, ,, final, double, multiple, ), {, for, (, int, i, =]
[final, int, minuendRow, ,, final, int, subtrahendRow, ,, final, double, multiple, ), {, for, (, int, i, =, 0, ;]
[final, int, minuendRow, ,, final, int, subtrahendRow, ,, final, double, multiple, ), {, for, (, int, i, =, 0, ;]
[minuendRow, ,, final, int, subtrahendRow, ,, final, double, multiple, ), {, for, (, int, i, =, 0, ;, i, <]
[subtrahendRow, ,, final, double, multiple, ), {, for, (, int, i, =, 0, ;, i, <, getWidth, (, ), ;]
[subtrahendRow, ,, final, double, multiple, ), {, for, (, int, i, =, 0, ;, i, <, getWidth, (, ), ;]
[for, (, int, i, =, 0, ;, i, <, getWidth, (, ), ;, i, ++, ), {, double, result, =]
[for, (, int, i, =, 0, ;, i, <, getWidth, (, ), ;, i, ++, ), {, double, result, =]
[for, (, int, i, =, 0, ;, i, <, getWidth, (, ), ;, i, ++, ), {, double, result, =]
[=, 0, ;, i, <, getWidth, (, ), ;, i, ++, ), {, double, result, =, tableau, ., getEntry, (]
[;, i, <, getWidth, (, ), ;, i, ++, ), {, double, result, =, tableau, ., getEntry, (, minuendRow, ,]
[getWidth, (, ), ;, i, ++, ), {, double, result, =, tableau, ., getEntry, (, minuendRow, ,, i, ), -]
[getWidth, (, ), ;, i, ++, ), {, double, result, =, tableau, ., getEntry, (, minuendRow, ,, i, ), -]
[getWidth, (, ), ;, i, ++, ), {, double, result, =, tableau, ., getEntry, (, minuendRow, ,, i, ), -]
[i, ++, ), {, double, result, =, tableau, ., getEntry, (, minuendRow, ,, i, ), -, tableau, ., getEntry, (]
[), {, double, result, =, tableau, ., getEntry, (, minuendRow, ,, i, ), -, tableau, ., getEntry, (, subtrahendRow, ,]
[result, =, tableau, ., getEntry, (, minuendRow, ,, i, ), -, tableau, ., getEntry, (, subtrahendRow, ,, i, ), *]
[getEntry, (, minuendRow, ,, i, ), -, tableau, ., getEntry, (, subtrahendRow, ,, i, ), *, multiple, ;, if, (]
[getEntry, (, minuendRow, ,, i, ), -, tableau, ., getEntry, (, subtrahendRow, ,, i, ), *, multiple, ;, if, (]
[getEntry, (, minuendRow, ,, i, ), -, tableau, ., getEntry, (, subtrahendRow, ,, i, ), *, multiple, ;, if, (]
[i, ), -, tableau, ., getEntry, (, subtrahendRow, ,, i, ), *, multiple, ;, if, (, FastMath, ., abs, (]
[tableau, ., getEntry, (, subtrahendRow, ,, i, ), *, multiple, ;, if, (, FastMath, ., abs, (, result, ), <]
[(, subtrahendRow, ,, i, ), *, multiple, ;, if, (, FastMath, ., abs, (, result, ), <, CUTOFF_THRESHOLD, ), {]
[,, i, ), *, multiple, ;, if, (, FastMath, ., abs, (, result, ), <, CUTOFF_THRESHOLD, ), {, result, =]
[*, multiple, ;, if, (, FastMath, ., abs, (, result, ), <, CUTOFF_THRESHOLD, ), {, result, =, 0.0, ;, }]
[*, multiple, ;, if, (, FastMath, ., abs, (, result, ), <, CUTOFF_THRESHOLD, ), {, result, =, 0.0, ;, }]
[(, FastMath, ., abs, (, result, ), <, CUTOFF_THRESHOLD, ), {, result, =, 0.0, ;, }, tableau, ., setEntry, (]
[., abs, (, result, ), <, CUTOFF_THRESHOLD, ), {, result, =, 0.0, ;, }, tableau, ., setEntry, (, minuendRow, ,]
[(, result, ), <, CUTOFF_THRESHOLD, ), {, result, =, 0.0, ;, }, tableau, ., setEntry, (, minuendRow, ,, i, ,]
[., setEntry, (, minuendRow, ,, i, ,, result, ), ;, }, }, protected, final, int, getWidth, (, ), {, return]
[., setEntry, (, minuendRow, ,, i, ,, result, ), ;, }, }, protected, final, int, getWidth, (, ), {, return]
[getWidth, (, ), {, return, tableau, ., getColumnDimension, (, ), ;, }, protected, final, int, getHeight, (, ), {, return]
[getWidth, (, ), {, return, tableau, ., getColumnDimension, (, ), ;, }, protected, final, int, getHeight, (, ), {, return]
[getRowDimension, (, ), ;, }, protected, final, double, getEntry, (, final, int, row, ,, final, int, column, ), {, return]
[getRowDimension, (, ), ;, }, protected, final, double, getEntry, (, final, int, row, ,, final, int, column, ), {, return]
[}, protected, final, double, getEntry, (, final, int, row, ,, final, int, column, ), {, return, tableau, ., getEntry, (]
[final, double, getEntry, (, final, int, row, ,, final, int, column, ), {, return, tableau, ., getEntry, (, row, ,]
[;, }, protected, final, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[;, }, protected, final, void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {]
[void, setEntry, (, final, int, row, ,, final, int, column, ,, final, double, value, ), {, tableau, ., setEntry, (]
[(, final, int, row, ,, final, int, column, ,, final, double, value, ), {, tableau, ., setEntry, (, row, ,]
[int, row, ,, final, int, column, ,, final, double, value, ), {, tableau, ., setEntry, (, row, ,, column, ,]
[tableau, ., setEntry, (, row, ,, column, ,, value, ), ;, }, protected, final, int, getSlackVariableOffset, (, ), {, return]
[tableau, ., setEntry, (, row, ,, column, ,, value, ), ;, }, protected, final, int, getSlackVariableOffset, (, ), {, return]
[row, ,, column, ,, value, ), ;, }, protected, final, int, getSlackVariableOffset, (, ), {, return, getNumObjectiveFunctions, (, ), +]
[getSlackVariableOffset, (, ), {, return, getNumObjectiveFunctions, (, ), +, numDecisionVariables, ;, }, protected, final, int, getArtificialVariableOffset, (, ), {, return]
[getSlackVariableOffset, (, ), {, return, getNumObjectiveFunctions, (, ), +, numDecisionVariables, ;, }, protected, final, int, getArtificialVariableOffset, (, ), {, return]
[getSlackVariableOffset, (, ), {, return, getNumObjectiveFunctions, (, ), +, numDecisionVariables, ;, }, protected, final, int, getArtificialVariableOffset, (, ), {, return]
[return, getNumObjectiveFunctions, (, ), +, numDecisionVariables, ;, }, protected, final, int, getArtificialVariableOffset, (, ), {, return, getNumObjectiveFunctions, (, ), +]
[(, ), +, numDecisionVariables, ;, }, protected, final, int, getArtificialVariableOffset, (, ), {, return, getNumObjectiveFunctions, (, ), +, numDecisionVariables, +]
[), {, return, getNumObjectiveFunctions, (, ), +, numDecisionVariables, +, numSlackVariables, ;, }, protected, final, int, getRhsOffset, (, ), {, return]
[), {, return, getNumObjectiveFunctions, (, ), +, numDecisionVariables, +, numSlackVariables, ;, }, protected, final, int, getRhsOffset, (, ), {, return]
[(, ), +, numDecisionVariables, +, numSlackVariables, ;, }, protected, final, int, getRhsOffset, (, ), {, return, getWidth, (, ), -]
[getRhsOffset, (, ), {, return, getWidth, (, ), -, 1, ;, }, protected, final, int, getNumDecisionVariables, (, ), {, return]
[}, protected, final, int, getNumDecisionVariables, (, ), {, return, numDecisionVariables, ;, }, protected, final, int, getOriginalNumDecisionVariables, (, ), {, return]
[}, protected, final, int, getNumDecisionVariables, (, ), {, return, numDecisionVariables, ;, }, protected, final, int, getOriginalNumDecisionVariables, (, ), {, return]
[}, protected, final, int, getNumDecisionVariables, (, ), {, return, numDecisionVariables, ;, }, protected, final, int, getOriginalNumDecisionVariables, (, ), {, return]
[return, f, ., getCoefficients, (, ), ., getDimension, (, ), ;, }, protected, final, int, getNumSlackVariables, (, ), {, return]
[}, protected, final, int, getNumSlackVariables, (, ), {, return, numSlackVariables, ;, }, protected, final, int, getNumArtificialVariables, (, ), {, return]
[getNumArtificialVariables, (, ), {, return, numArtificialVariables, ;, }, protected, final, double, [, ], [, ], getData, (, ), {, return]
[getNumArtificialVariables, (, ), {, return, numArtificialVariables, ;, }, protected, final, double, [, ], [, ], getData, (, ), {, return]
[return, tableau, ., getData, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[return, tableau, ., getData, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[., getData, (, ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return, true, ;, }, if, (]
[(, this, ==, other, ), {, return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =]
[other, ), {, return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, )]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[return, true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return]
[true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (]
[true, ;, }, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (]
[}, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (, restrictToNonNegative, ==]
[}, if, (, other, instanceof, SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (, restrictToNonNegative, ==]
[SimplexTableau, ), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&]
[), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (]
[), {, SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (]
[SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (, numDecisionVariables, ==]
[SimplexTableau, rhs, =, (, SimplexTableau, ), other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (, numDecisionVariables, ==]
[), other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&]
[other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (]
[other, ;, return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (]
[return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (, numSlackVariables, ==]
[return, (, restrictToNonNegative, ==, rhs, ., restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (, numSlackVariables, ==]
[., restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&]
[restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (]
[restrictToNonNegative, ), &&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (]
[&&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (, numArtificialVariables, ==]
[&&, (, numDecisionVariables, ==, rhs, ., numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (, numArtificialVariables, ==]
[., numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&]
[numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (]
[numDecisionVariables, ), &&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (]
[&&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (, epsilon, ==]
[&&, (, numSlackVariables, ==, rhs, ., numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (, epsilon, ==]
[., numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (, epsilon, ==, rhs, ., epsilon, ), &&]
[numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (, epsilon, ==, rhs, ., epsilon, ), &&, (]
[numSlackVariables, ), &&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (, epsilon, ==, rhs, ., epsilon, ), &&, (]
[&&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (, epsilon, ==, rhs, ., epsilon, ), &&, (, maxUlps, ==]
[&&, (, numArtificialVariables, ==, rhs, ., numArtificialVariables, ), &&, (, epsilon, ==, rhs, ., epsilon, ), &&, (, maxUlps, ==]
[., numArtificialVariables, ), &&, (, epsilon, ==, rhs, ., epsilon, ), &&, (, maxUlps, ==, rhs, ., maxUlps, ), &&]
[., numArtificialVariables, ), &&, (, epsilon, ==, rhs, ., epsilon, ), &&, (, maxUlps, ==, rhs, ., maxUlps, ), &&]
[(, epsilon, ==, rhs, ., epsilon, ), &&, (, maxUlps, ==, rhs, ., maxUlps, ), &&, f, ., equals, (]
[(, epsilon, ==, rhs, ., epsilon, ), &&, (, maxUlps, ==, rhs, ., maxUlps, ), &&, f, ., equals, (]
[epsilon, ), &&, (, maxUlps, ==, rhs, ., maxUlps, ), &&, f, ., equals, (, rhs, ., f, ), &&]
[epsilon, ), &&, (, maxUlps, ==, rhs, ., maxUlps, ), &&, f, ., equals, (, rhs, ., f, ), &&]
[maxUlps, ==, rhs, ., maxUlps, ), &&, f, ., equals, (, rhs, ., f, ), &&, constraints, ., equals, (]
[maxUlps, ==, rhs, ., maxUlps, ), &&, f, ., equals, (, rhs, ., f, ), &&, constraints, ., equals, (]
[), &&, f, ., equals, (, rhs, ., f, ), &&, constraints, ., equals, (, rhs, ., constraints, ), &&]
[), &&, f, ., equals, (, rhs, ., f, ), &&, constraints, ., equals, (, rhs, ., constraints, ), &&]
[equals, (, rhs, ., f, ), &&, constraints, ., equals, (, rhs, ., constraints, ), &&, tableau, ., equals, (]
[equals, (, rhs, ., f, ), &&, constraints, ., equals, (, rhs, ., constraints, ), &&, tableau, ., equals, (]
[constraints, ., equals, (, rhs, ., constraints, ), &&, tableau, ., equals, (, rhs, ., tableau, ), ;, }, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, rhs, ., tableau, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, Boolean, ., valueOf, (]
[@, Override, public, int, hashCode, (, ), {, return, Boolean, ., valueOf, (, restrictToNonNegative, ), ., hashCode, (, ), ^]
[public, int, hashCode, (, ), {, return, Boolean, ., valueOf, (, restrictToNonNegative, ), ., hashCode, (, ), ^, numDecisionVariables, ^]
[hashCode, (, ), {, return, Boolean, ., valueOf, (, restrictToNonNegative, ), ., hashCode, (, ), ^, numDecisionVariables, ^, numSlackVariables, ^]
[), {, return, Boolean, ., valueOf, (, restrictToNonNegative, ), ., hashCode, (, ), ^, numDecisionVariables, ^, numSlackVariables, ^, numArtificialVariables, ^]
[), {, return, Boolean, ., valueOf, (, restrictToNonNegative, ), ., hashCode, (, ), ^, numDecisionVariables, ^, numSlackVariables, ^, numArtificialVariables, ^]
[), {, return, Boolean, ., valueOf, (, restrictToNonNegative, ), ., hashCode, (, ), ^, numDecisionVariables, ^, numSlackVariables, ^, numArtificialVariables, ^]
[., valueOf, (, restrictToNonNegative, ), ., hashCode, (, ), ^, numDecisionVariables, ^, numSlackVariables, ^, numArtificialVariables, ^, Double, ., valueOf, (]
[(, ), ^, numDecisionVariables, ^, numSlackVariables, ^, numArtificialVariables, ^, Double, ., valueOf, (, epsilon, ), ., hashCode, (, ), ^]
[^, numDecisionVariables, ^, numSlackVariables, ^, numArtificialVariables, ^, Double, ., valueOf, (, epsilon, ), ., hashCode, (, ), ^, maxUlps, ^]
[^, numDecisionVariables, ^, numSlackVariables, ^, numArtificialVariables, ^, Double, ., valueOf, (, epsilon, ), ., hashCode, (, ), ^, maxUlps, ^]
[^, Double, ., valueOf, (, epsilon, ), ., hashCode, (, ), ^, maxUlps, ^, f, ., hashCode, (, ), ^]
[^, Double, ., valueOf, (, epsilon, ), ., hashCode, (, ), ^, maxUlps, ^, f, ., hashCode, (, ), ^]
[), ., hashCode, (, ), ^, maxUlps, ^, f, ., hashCode, (, ), ^, constraints, ., hashCode, (, ), ^]
[), ., hashCode, (, ), ^, maxUlps, ^, f, ., hashCode, (, ), ^, constraints, ., hashCode, (, ), ^]
[(, ), ^, tableau, ., hashCode, (, ), ;, }, private, void, writeObject, (, ObjectOutputStream, oos, ), throws, IOException, {]
[(, ), ^, tableau, ., hashCode, (, ), ;, }, private, void, writeObject, (, ObjectOutputStream, oos, ), throws, IOException, {]
[(, ), ;, }, private, void, writeObject, (, ObjectOutputStream, oos, ), throws, IOException, {, oos, ., defaultWriteObject, (, ), ;]
[(, ), ;, }, private, void, writeObject, (, ObjectOutputStream, oos, ), throws, IOException, {, oos, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, oos, ), throws, IOException, {, oos, ., defaultWriteObject, (, ), ;, MatrixUtils, ., serializeRealMatrix, (]
[writeObject, (, ObjectOutputStream, oos, ), throws, IOException, {, oos, ., defaultWriteObject, (, ), ;, MatrixUtils, ., serializeRealMatrix, (, tableau, ,]
[serializeRealMatrix, (, tableau, ,, oos, ), ;, }, private, void, readObject, (, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {]
[serializeRealMatrix, (, tableau, ,, oos, ), ;, }, private, void, readObject, (, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {]
[;, }, private, void, readObject, (, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, ois, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, ois, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, ois, ., defaultReadObject, (, ), ;, MatrixUtils, ., deserializeRealMatrix, (]
[ObjectInputStream, ois, ), throws, ClassNotFoundException, ,, IOException, {, ois, ., defaultReadObject, (, ), ;, MatrixUtils, ., deserializeRealMatrix, (, this, ,]
[), throws, ClassNotFoundException, ,, IOException, {, ois, ., defaultReadObject, (, ), ;, MatrixUtils, ., deserializeRealMatrix, (, this, ,, "tableau", ,]
