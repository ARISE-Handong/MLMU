[;, private, int, currentPreOrderIndex, =, 0, ;, private, List, <, Name, >, globalNames, =, new, ArrayList, <, Name, >, (]
[;, private, List, <, Name, >, globalNames, =, new, ArrayList, <, Name, >, (, ), ;, private, Map, <, String]
[;, private, Map, <, String, ,, Name, >, nameMap, =, new, HashMap, <, String, ,, Name, >, (, ), ;]
[;, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, root, ), {, this, (, compiler, ,, null, ,, root, ), ;, }]
[,, null, ,, root, ), ;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {, this]
[,, root, ), ;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler]
[), ;, }, GlobalNamespace, (, AbstractCompiler, compiler, ,, Node, externsRoot, ,, Node, root, ), {, this, ., compiler, =, compiler]
[=, compiler, ;, this, ., externsRoot, =, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, )]
[., compiler, =, compiler, ;, this, ., externsRoot, =, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot]
[;, this, ., externsRoot, =, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return]
[=, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return, externsRoot, !=, null, ;]
[., externsRoot, =, externsRoot, ;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return, externsRoot, !=]
[;, this, ., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return, externsRoot, !=, null, ;, }, @]
[=, root, ;, }, boolean, hasExternsRoot, (, ), {, return, externsRoot, !=, null, ;, }, @, Override, public, Node, getRootNode]
[., root, =, root, ;, }, boolean, hasExternsRoot, (, ), {, return, externsRoot, !=, null, ;, }, @, Override, public]
[;, }, boolean, hasExternsRoot, (, ), {, return, externsRoot, !=, null, ;, }, @, Override, public, Node, getRootNode, (, )]
[;, }, @, Override, public, Node, getRootNode, (, ), {, return, root, ., getParent, (, ), ;, }, @, Override]
[!=, null, ;, }, @, Override, public, Node, getRootNode, (, ), {, return, root, ., getParent, (, ), ;, }]
[;, }, @, Override, public, Node, getRootNode, (, ), {, return, root, ., getParent, (, ), ;, }, @, Override]
[;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return, null, ;, }, @, Override, public]
[., getParent, (, ), ;, }, @, Override, public, StaticScope, <, JSType, >, getParentScope, (, ), {, return, null, ;]
[;, }, @, Override, public, Name, getSlot, (, String, name, ), {, return, getOwnSlot, (, name, ), ;, }, @]
[;, }, @, Override, public, Name, getOwnSlot, (, String, name, ), {, ensureGenerated, (, ), ;, return, nameMap, ., get]
[), ;, }, @, Override, public, Name, getOwnSlot, (, String, name, ), {, ensureGenerated, (, ), ;, return, nameMap, .]
[;, return, nameMap, ., get, (, name, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, compiler]
[;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeObjectType, (, GLOBAL_THIS]
[., get, (, name, ), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, compiler, ., getTypeRegistry, (]
[), ;, }, @, Override, public, JSType, getTypeOfThis, (, ), {, return, compiler, ., getTypeRegistry, (, ), ., getNativeObjectType, (]
[;, }, @, Override, public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {, ensureGenerated, (, ), ;, return]
[., getNativeObjectType, (, GLOBAL_THIS, ), ;, }, @, Override, public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {]
[., getTypeRegistry, (, ), ., getNativeObjectType, (, GLOBAL_THIS, ), ;, }, @, Override, public, Iterable, <, Ref, >, getReferences, (]
[), ;, }, @, Override, public, Iterable, <, Ref, >, getReferences, (, Name, slot, ), {, ensureGenerated, (, ), ;]
[;, return, Collections, ., unmodifiableList, (, slot, ., getRefs, (, ), ), ;, }, @, Override, public, StaticScope, <, JSType]
[;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Name, slot, ), {, return, this, ;, }, @]
[., unmodifiableList, (, slot, ., getRefs, (, ), ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (]
[), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Name, slot, ), {, return, this, ;, }]
[., getRefs, (, ), ), ;, }, @, Override, public, StaticScope, <, JSType, >, getScope, (, Name, slot, ), {]
[;, }, @, Override, public, Iterable, <, Name, >, getAllSymbols, (, ), {, ensureGenerated, (, ), ;, return, Collections, .]
[;, return, Collections, ., unmodifiableCollection, (, getNameIndex, (, ), ., values, (, ), ), ;, }, private, void, ensureGenerated, (]
[;, }, private, void, ensureGenerated, (, ), {, if, (, !, generated, ), {, process, (, ), ;, }, }]
[., unmodifiableCollection, (, getNameIndex, (, ), ., values, (, ), ), ;, }, private, void, ensureGenerated, (, ), {, if]
[), ;, }, private, void, ensureGenerated, (, ), {, if, (, !, generated, ), {, process, (, ), ;, }]
[., values, (, ), ), ;, }, private, void, ensureGenerated, (, ), {, if, (, !, generated, ), {, process]
[), {, process, (, ), ;, }, }, List, <, Name, >, getNameForest, (, ), {, ensureGenerated, (, ), ;]
[), {, process, (, ), ;, }, }, List, <, Name, >, getNameForest, (, ), {, ensureGenerated, (, ), ;]
[;, }, }, List, <, Name, >, getNameForest, (, ), {, ensureGenerated, (, ), ;, return, globalNames, ;, }, Map]
[;, return, globalNames, ;, }, Map, <, String, ,, Name, >, getNameIndex, (, ), {, ensureGenerated, (, ), ;, return]
[;, }, Map, <, String, ,, Name, >, getNameIndex, (, ), {, ensureGenerated, (, ), ;, return, nameMap, ;, }]
[;, return, nameMap, ;, }, void, scanNewNodes, (, Scope, scope, ,, Set, <, Node, >, newNodes, ), {, NodeTraversal, t]
[;, }, void, scanNewNodes, (, Scope, scope, ,, Set, <, Node, >, newNodes, ), {, NodeTraversal, t, =, new, NodeTraversal]
[;, t, ., traverseAtScope, (, scope, ), ;, }, private, static, class, NodeFilter, implements, Predicate, <, Node, >, {, private]
[,, new, BuildGlobalNamespace, (, new, NodeFilter, (, newNodes, ), ), ), ;, t, ., traverseAtScope, (, scope, ), ;, }]
[), ;, t, ., traverseAtScope, (, scope, ), ;, }, private, static, class, NodeFilter, implements, Predicate, <, Node, >, {]
[), ), ;, t, ., traverseAtScope, (, scope, ), ;, }, private, static, class, NodeFilter, implements, Predicate, <, Node, >]
[), ), ), ;, t, ., traverseAtScope, (, scope, ), ;, }, private, static, class, NodeFilter, implements, Predicate, <, Node]
[;, }, private, static, class, NodeFilter, implements, Predicate, <, Node, >, {, private, final, Set, <, Node, >, newNodes, ;]
[., traverseAtScope, (, scope, ), ;, }, private, static, class, NodeFilter, implements, Predicate, <, Node, >, {, private, final, Set]
[), ;, }, private, static, class, NodeFilter, implements, Predicate, <, Node, >, {, private, final, Set, <, Node, >, newNodes]
[=, newNodes, ;, }, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, !, n, ., isQualifiedName]
[., newNodes, =, newNodes, ;, }, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, !, n]
[;, }, @, Override, public, boolean, apply, (, Node, n, ), {, if, (, !, n, ., isQualifiedName, (, )]
[), {, return, false, ;, }, Node, current, ;, for, (, current, =, n, ;, current, ., isGetProp, (, )]
[), {, return, false, ;, }, Node, current, ;, for, (, current, =, n, ;, current, ., isGetProp, (, )]
[., isQualifiedName, (, ), ), {, return, false, ;, }, Node, current, ;, for, (, current, =, n, ;, current]
[;, }, Node, current, ;, for, (, current, =, n, ;, current, ., isGetProp, (, ), ;, current, =, current]
[=, n, ;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (]
[;, current, ., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (, newNodes, .]
[;, current, =, current, ., getFirstChild, (, ), ), {, if, (, newNodes, ., contains, (, current, ), ), {]
[., isGetProp, (, ), ;, current, =, current, ., getFirstChild, (, ), ), {, if, (, newNodes, ., contains, (]
[=, current, ., getFirstChild, (, ), ), {, if, (, newNodes, ., contains, (, current, ), ), {, return, true]
[), {, if, (, newNodes, ., contains, (, current, ), ), {, return, true, ;, }, }, return, current, .]
[., getFirstChild, (, ), ), {, if, (, newNodes, ., contains, (, current, ), ), {, return, true, ;, }]
[), {, return, true, ;, }, }, return, current, ., isName, (, ), &&, newNodes, ., contains, (, current, )]
[., contains, (, current, ), ), {, return, true, ;, }, }, return, current, ., isName, (, ), &&, newNodes]
[), ), {, return, true, ;, }, }, return, current, ., isName, (, ), &&, newNodes, ., contains, (, current]
[;, }, }, return, current, ., isName, (, ), &&, newNodes, ., contains, (, current, ), ;, }, }, private]
[;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =, true, ;]
[&&, newNodes, ., contains, (, current, ), ;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=]
[., isName, (, ), &&, newNodes, ., contains, (, current, ), ;, }, }, private, void, process, (, ), {]
[;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =, true, ;]
[., contains, (, current, ), ;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, )]
[), ;, }, }, private, void, process, (, ), {, if, (, externsRoot, !=, null, ), {, inExterns, =, true]
[), {, inExterns, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;]
[!=, null, ), {, inExterns, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, )]
[), {, inExterns, =, true, ;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;]
[=, true, ;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =]
[;, NodeTraversal, ., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;]
[;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), ), ;]
[., traverse, (, compiler, ,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;, NodeTraversal, .]
[,, externsRoot, ,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,]
[,, new, BuildGlobalNamespace, (, ), ), ;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[), ;, }, inExterns, =, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), )]
[=, false, ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), ), ;, generated, =, true]
[;, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), ), ;, generated, =, true, ;, }]
[;, generated, =, true, ;, }, private, boolean, isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName, =]
[., traverse, (, compiler, ,, root, ,, new, BuildGlobalNamespace, (, ), ), ;, generated, =, true, ;, }, private, boolean]
[,, root, ,, new, BuildGlobalNamespace, (, ), ), ;, generated, =, true, ;, }, private, boolean, isGlobalNameReference, (, String, name]
[,, new, BuildGlobalNamespace, (, ), ), ;, generated, =, true, ;, }, private, boolean, isGlobalNameReference, (, String, name, ,, Scope]
[), ;, generated, =, true, ;, }, private, boolean, isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName]
[=, true, ;, }, private, boolean, isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName, =, getTopVarName, (]
[;, }, private, boolean, isGlobalNameReference, (, String, name, ,, Scope, s, ), {, String, topVarName, =, getTopVarName, (, name, )]
[;, return, isGlobalVarReference, (, topVarName, ,, s, ), ;, }, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex]
[), ;, return, isGlobalVarReference, (, topVarName, ,, s, ), ;, }, private, String, getTopVarName, (, String, name, ), {, int]
[;, }, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', ), ;]
[,, s, ), ;, }, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (]
[), ;, }, private, String, getTopVarName, (, String, name, ), {, int, firstDotIndex, =, name, ., indexOf, (, '.', )]
[;, return, firstDotIndex, ==, -, 1, ?, name, :, name, ., substring, (, 0, ,, firstDotIndex, ), ;, }, private]
[., indexOf, (, '.', ), ;, return, firstDotIndex, ==, -, 1, ?, name, :, name, ., substring, (, 0, ,]
[), ;, return, firstDotIndex, ==, -, 1, ?, name, :, name, ., substring, (, 0, ,, firstDotIndex, ), ;, }]
[;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {, Scope, ., Var, v, =, s, .]
[?, name, :, name, ., substring, (, 0, ,, firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,]
[==, -, 1, ?, name, :, name, ., substring, (, 0, ,, firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (]
[?, name, :, name, ., substring, (, 0, ,, firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,]
[?, name, :, name, ., substring, (, 0, ,, firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,]
[:, name, ., substring, (, 0, ,, firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s]
[;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {, Scope, ., Var, v, =, s, .]
[., substring, (, 0, ,, firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {]
[,, firstDotIndex, ), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {, Scope, ., Var, v]
[), ;, }, private, boolean, isGlobalVarReference, (, String, name, ,, Scope, s, ), {, Scope, ., Var, v, =, s]
[;, if, (, v, ==, null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, )]
[., getVar, (, name, ), ;, if, (, v, ==, null, &&, externsScope, !=, null, ), {, v, =, externsScope]
[), ;, if, (, v, ==, null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name]
[), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&, !, v, .]
[&&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null]
[==, null, &&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v]
[&&, externsScope, !=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null]
[), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&, !, v, .]
[!=, null, ), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&, !]
[), {, v, =, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&, !, v, .]
[=, externsScope, ., getVar, (, name, ), ;, }, return, v, !=, null, &&, !, v, ., isLocal, (, )]
[;, }, return, v, !=, null, &&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope]
[., getVar, (, name, ), ;, }, return, v, !=, null, &&, !, v, ., isLocal, (, ), ;, }]
[), ;, }, return, v, !=, null, &&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (]
[;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return, s, ., getParent, (, ), ==, null, ;, }]
[&&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return, s, .]
[!=, null, &&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return]
[&&, !, v, ., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return, s, .]
[;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return, s, ., getParent, (, ), ==, null, ;, }]
[;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return, s, ., getParent, (, ), ==, null, ;, }]
[., isLocal, (, ), ;, }, private, boolean, isGlobalScope, (, Scope, s, ), {, return, s, ., getParent, (, )]
[;, }, private, class, BuildGlobalNamespace, implements, NodeTraversal, ., Callback, {, private, final, Predicate, <, Node, >, nodeFilter, ;, BuildGlobalNamespace, (]
[==, null, ;, }, private, class, BuildGlobalNamespace, implements, NodeTraversal, ., Callback, {, private, final, Predicate, <, Node, >, nodeFilter, ;]
[., getParent, (, ), ==, null, ;, }, private, class, BuildGlobalNamespace, implements, NodeTraversal, ., Callback, {, private, final, Predicate, <]
[;, }, private, class, BuildGlobalNamespace, implements, NodeTraversal, ., Callback, {, private, final, Predicate, <, Node, >, nodeFilter, ;, BuildGlobalNamespace, (]
[), ;, }, BuildGlobalNamespace, (, Predicate, <, Node, >, nodeFilter, ), {, this, ., nodeFilter, =, nodeFilter, ;, }, @]
[=, nodeFilter, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., nodeFilter, =, nodeFilter, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, }, @]
[;, return, true, ;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if]
[,, n, ,, parent, ), ;, return, true, ;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,]
[,, parent, ), ;, return, true, ;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[), ;, return, true, ;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[;, }, public, void, collect, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, nodeFilter, !=]
[), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, ), {, externsScope, =, t, .]
[&&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n]
[!=, null, &&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null]
[&&, !, nodeFilter, ., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n]
[), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, ), {, externsScope, =, t, .]
[), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, ), {, externsScope, =, t, .]
[., apply, (, n, ), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, )]
[), ), {, return, ;, }, if, (, externsRoot, !=, null, &&, n, ==, externsRoot, ), {, externsScope, =, t]
[), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name]
[&&, n, ==, externsRoot, ), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet]
[!=, null, &&, n, ==, externsRoot, ), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;]
[&&, n, ==, externsRoot, ), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet]
[), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name]
[==, externsRoot, ), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false]
[), {, externsScope, =, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name]
[=, t, ., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name, ., Type, type]
[;, }, String, name, ;, boolean, isSet, =, false, ;, Name, ., Type, type, =, Name, ., Type, ., OTHER]
[., getScope, (, ), ;, }, String, name, ;, boolean, isSet, =, false, ;, Name, ., Type, type, =, Name]
[;, Name, ., Type, type, =, Name, ., Type, ., OTHER, ;, boolean, isPropAssign, =, false, ;, switch, (, n]
[;, boolean, isPropAssign, =, false, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :]
[., OTHER, ;, boolean, isPropAssign, =, false, ;, switch, (, n, ., getType, (, ), ), {, case, Token, .]
[., Type, ., OTHER, ;, boolean, isPropAssign, =, false, ;, switch, (, n, ., getType, (, ), ), {, case]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :]
[), {, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null]
[., getType, (, ), ), {, case, Token, ., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY]
[:, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (, parent, !=, null]
[., GETTER_DEF, :, case, Token, ., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (, parent]
[:, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (]
[., SETTER_DEF, :, case, Token, ., STRING_KEY, :, name, =, null, ;, if, (, parent, !=, null, &&, parent, .]
[:, name, =, null, ;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =]
[., STRING_KEY, :, name, =, null, ;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (, ), ), {]
[=, null, ;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (]
[;, if, (, parent, !=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, )]
[), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, ), return, ;, isSet, =]
[&&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==]
[!=, null, &&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (]
[&&, parent, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==]
[), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, ), return, ;, isSet, =]
[., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, )]
[=, getNameForObjLitKey, (, n, ), ;, }, if, (, name, ==, null, ), return, ;, isSet, =, true, ;, switch]
[;, }, if, (, name, ==, null, ), return, ;, isSet, =, true, ;, switch, (, n, ., getType, (]
[), ;, }, if, (, name, ==, null, ), return, ;, isSet, =, true, ;, switch, (, n, ., getType]
[), return, ;, isSet, =, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY]
[==, null, ), return, ;, isSet, =, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token]
[), return, ;, isSet, =, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY]
[=, true, ;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, type, =, getValueType]
[;, switch, (, n, ., getType, (, ), ), {, case, Token, ., STRING_KEY, :, type, =, getValueType, (, n]
[), {, case, Token, ., STRING_KEY, :, type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;]
[., getType, (, ), ), {, case, Token, ., STRING_KEY, :, type, =, getValueType, (, n, ., getFirstChild, (, )]
[:, type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF, :, type]
[., STRING_KEY, :, type, =, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF]
[=, getValueType, (, n, ., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =, Name]
[;, break, ;, case, Token, ., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case, Token]
[), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case]
[., getFirstChild, (, ), ), ;, break, ;, case, Token, ., GETTER_DEF, :, type, =, Name, ., Type, ., GET]
[:, type, =, Name, ., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =, Name, .]
[., GETTER_DEF, :, type, =, Name, ., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =]
[=, Name, ., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =, Name, ., Type, .]
[;, break, ;, case, Token, ., SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;, break, ;, default, :]
[., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;, break, ;]
[., Type, ., GET, ;, break, ;, case, Token, ., SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;]
[:, type, =, Name, ., Type, ., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +, n]
[., SETTER_DEF, :, type, =, Name, ., Type, ., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:"]
[=, Name, ., Type, ., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;]
[;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break, ;, case, Token, .]
[., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break, ;, case]
[., Type, ., SET, ;, break, ;, default, :, throw, new, IllegalStateException, (, "unexpected:", +, n, ), ;, }, break]
[;, }, break, ;, case, Token, ., NAME, :, if, (, parent, !=, null, ), {, switch, (, parent, .]
[), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, !=, null, ), {, switch, (, parent]
[+, n, ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, !=, null, ), {, switch]
[), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, !=, null, ), {, switch, (, parent]
[:, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, .]
[., NAME, :, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, isSet, =, true, ;]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, isSet, =]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., VAR, :, isSet, =, true, ;]
[), {, case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;]
[., getType, (, ), ), {, case, Token, ., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, .]
[:, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?]
[., VAR, :, isSet, =, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==]
[=, true, ;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?, Name, .]
[;, Node, rvalue, =, n, ., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?, Name, ., Type, .]
[;, type, =, rvalue, ==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;]
[., getFirstChild, (, ), ;, type, =, rvalue, ==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue]
[=, rvalue, ==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet]
[?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if]
[==, null, ?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN]
[?, Name, ., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if]
[:, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, )]
[., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild]
[., Type, ., OTHER, :, getValueType, (, rvalue, ), ;, break, ;, case, Token, ., ASSIGN, :, if, (, parent]
[;, break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet]
[), ;, break, ;, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {]
[:, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (]
[., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;]
[==, n, ), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, }]
[., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (]
[), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;]
[=, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;, case, Token, .]
[;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., GETPROP, :]
[=, getValueType, (, n, ., getNext, (, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, return, ;]
[;, }, break, ;, case, Token, ., GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =, parent]
[), ;, }, break, ;, case, Token, ., GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =]
[., getNext, (, ), ), ;, }, break, ;, case, Token, ., GETPROP, :, return, ;, case, Token, ., FUNCTION]
[:, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps]
[., GETPROP, :, return, ;, case, Token, ., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if]
[:, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (]
[., FUNCTION, :, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ||, NodeUtil, .]
[;, if, (, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;]
[., getParent, (, ), ;, if, (, gramps, ==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;]
[), return, ;, isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, .]
[||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;, type, =, Name, ., Type, .]
[==, null, ||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;, type, =, Name, .]
[||, NodeUtil, ., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;, type, =, Name, ., Type, .]
[), return, ;, isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, .]
[., isFunctionExpression, (, parent, ), ), return, ;, isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;]
[), ), return, ;, isSet, =, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token]
[=, true, ;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token]
[;, type, =, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC]
[=, Name, ., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet]
[;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =, Name]
[., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type]
[., Type, ., FUNCTION, ;, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true]
[:, case, Token, ., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;]
[., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;]
[:, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil]
[., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if]
[=, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp]
[;, type, =, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent]
[=, Name, ., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&]
[;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (]
[., Type, ., OTHER, ;, break, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, .]
[), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, .]
[., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type]
[), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type]
[), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n]
[==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name]
[., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;]
[), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n]
[=, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getString, (]
[;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getString, (, ), ;]
[=, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getString, (, ), ;, break, ;]
[;, }, }, }, name, =, n, ., getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if]
[., OTHER, ;, }, }, }, name, =, n, ., getString, (, ), ;, break, ;, case, Token, ., GETPROP]
[., Type, ., OTHER, ;, }, }, }, name, =, n, ., getString, (, ), ;, break, ;, case, Token]
[=, n, ., getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, !=, null, )]
[;, break, ;, case, Token, ., GETPROP, :, if, (, parent, !=, null, ), {, switch, (, parent, ., getType]
[., getString, (, ), ;, break, ;, case, Token, ., GETPROP, :, if, (, parent, !=, null, ), {, switch]
[:, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, .]
[., GETPROP, :, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, parent, .]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, parent, .]
[), {, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =]
[., getType, (, ), ), {, case, Token, ., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n]
[:, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (]
[., ASSIGN, :, if, (, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =]
[), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =, true]
[==, n, ), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign]
[., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (]
[), {, isSet, =, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =, true]
[=, true, ;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break]
[;, type, =, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break, ;, case]
[=, getValueType, (, n, ., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break, ;, case, Token, .]
[;, isPropAssign, =, true, ;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =]
[), ;, isPropAssign, =, true, ;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet]
[., getNext, (, ), ), ;, isPropAssign, =, true, ;, }, break, ;, case, Token, ., INC, :, case, Token]
[=, true, ;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;]
[;, }, break, ;, case, Token, ., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =]
[:, case, Token, ., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;]
[., INC, :, case, Token, ., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;]
[:, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :]
[., DEC, :, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, case, Token, .]
[=, true, ;, type, =, Name, ., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;]
[;, type, =, Name, ., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :]
[=, Name, ., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (]
[;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, )]
[., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (]
[., Type, ., OTHER, ;, break, ;, case, Token, ., GETPROP, :, return, ;, default, :, if, (, NodeUtil, .]
[:, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==]
[., GETPROP, :, return, ;, default, :, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (]
[), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, .]
[., isAssignmentOp, (, parent, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type]
[), &&, parent, ., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type]
[), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n]
[==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name]
[., getFirstChild, (, ), ==, n, ), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;]
[), {, isSet, =, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n]
[=, true, ;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (]
[;, type, =, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;]
[=, Name, ., Type, ., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;, if, (]
[;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, ), return, ;]
[., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, )]
[., Type, ., OTHER, ;, }, }, }, name, =, n, ., getQualifiedName, (, ), ;, if, (, name, ==]
[=, n, ., getQualifiedName, (, ), ;, if, (, name, ==, null, ), return, ;, break, ;, default, :, return]
[;, if, (, name, ==, null, ), return, ;, break, ;, default, :, return, ;, }, Scope, scope, =, t]
[., getQualifiedName, (, ), ;, if, (, name, ==, null, ), return, ;, break, ;, default, :, return, ;, }]
[), return, ;, break, ;, default, :, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if]
[==, null, ), return, ;, break, ;, default, :, return, ;, }, Scope, scope, =, t, ., getScope, (, )]
[), return, ;, break, ;, default, :, return, ;, }, Scope, scope, =, t, ., getScope, (, ), ;, if]
[;, if, (, !, isGlobalNameReference, (, name, ,, scope, ), ), {, return, ;, }, if, (, isSet, ), {]
[., getScope, (, ), ;, if, (, !, isGlobalNameReference, (, name, ,, scope, ), ), {, return, ;, }, if]
[), {, return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (]
[), {, return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (]
[,, scope, ), ), {, return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), )]
[), ), {, return, ;, }, if, (, isSet, ), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal]
[), {, if, (, isGlobalScope, (, scope, ), ), {, handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,]
[), {, handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {]
[), ), {, handleSetFromGlobal, (, t, ,, n, ,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else]
[;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, ), ;, }, }, else, {, handleGet]
[,, n, ,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,, n]
[,, parent, ,, name, ,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent]
[,, name, ,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name]
[,, isPropAssign, ,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, ), ;]
[,, type, ), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, ), ;, }, }]
[), ;, }, else, {, handleSetFromLocal, (, t, ,, n, ,, parent, ,, name, ), ;, }, }, else, {]
[;, }, }, else, {, handleGet, (, t, ,, n, ,, parent, ,, name, ), ;, }, }, String, getNameForObjLitKey]
[,, n, ,, parent, ,, name, ), ;, }, }, else, {, handleGet, (, t, ,, n, ,, parent, ,]
[,, parent, ,, name, ), ;, }, }, else, {, handleGet, (, t, ,, n, ,, parent, ,, name, )]
[,, name, ), ;, }, }, else, {, handleGet, (, t, ,, n, ,, parent, ,, name, ), ;, }]
[), ;, }, }, else, {, handleGet, (, t, ,, n, ,, parent, ,, name, ), ;, }, }, String]
[;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;, Preconditions]
[,, n, ,, parent, ,, name, ), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =]
[,, parent, ,, name, ), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, .]
[,, name, ), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, ., getParent, (]
[), ;, }, }, String, getNameForObjLitKey, (, Node, n, ), {, Node, parent, =, n, ., getParent, (, ), ;]
[;, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, Node, gramps, =, parent, ., getParent, (, )]
[., getParent, (, ), ;, Preconditions, ., checkState, (, parent, ., isObjectLit, (, ), ), ;, Node, gramps, =, parent]
[;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ), {, return, null, ;]
[., checkState, (, parent, ., isObjectLit, (, ), ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if]
[), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null, ), {, return, null]
[., isObjectLit, (, ), ), ;, Node, gramps, =, parent, ., getParent, (, ), ;, if, (, gramps, ==, null]
[;, if, (, gramps, ==, null, ), {, return, null, ;, }, Node, greatGramps, =, gramps, ., getParent, (, )]
[., getParent, (, ), ;, if, (, gramps, ==, null, ), {, return, null, ;, }, Node, greatGramps, =, gramps]
[), {, return, null, ;, }, Node, greatGramps, =, gramps, ., getParent, (, ), ;, String, name, ;, switch, (]
[==, null, ), {, return, null, ;, }, Node, greatGramps, =, gramps, ., getParent, (, ), ;, String, name, ;]
[), {, return, null, ;, }, Node, greatGramps, =, gramps, ., getParent, (, ), ;, String, name, ;, switch, (]
[;, }, Node, greatGramps, =, gramps, ., getParent, (, ), ;, String, name, ;, switch, (, gramps, ., getType, (]
[;, String, name, ;, switch, (, gramps, ., getType, (, ), ), {, case, Token, ., NAME, :, if, (]
[., getParent, (, ), ;, String, name, ;, switch, (, gramps, ., getType, (, ), ), {, case, Token, .]
[), {, case, Token, ., NAME, :, if, (, greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, ), )]
[., getType, (, ), ), {, case, Token, ., NAME, :, if, (, greatGramps, ==, null, ||, !, greatGramps, .]
[:, if, (, greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;, }, name]
[., NAME, :, if, (, greatGramps, ==, null, ||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;]
[), {, return, null, ;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case, Token, ., ASSIGN]
[||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;, }, name, =, gramps, ., getString, (, )]
[==, null, ||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;, }, name, =, gramps, ., getString]
[||, !, greatGramps, ., isVar, (, ), ), {, return, null, ;, }, name, =, gramps, ., getString, (, )]
[), {, return, null, ;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case, Token, ., ASSIGN]
[), {, return, null, ;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case, Token, ., ASSIGN]
[., isVar, (, ), ), {, return, null, ;, }, name, =, gramps, ., getString, (, ), ;, break, ;]
[;, }, name, =, gramps, ., getString, (, ), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =]
[=, gramps, ., getString, (, ), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =, gramps, ., getFirstChild]
[;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =, gramps, ., getFirstChild, (, ), ;, name, =, lvalue]
[., getString, (, ), ;, break, ;, case, Token, ., ASSIGN, :, Node, lvalue, =, gramps, ., getFirstChild, (, )]
[:, Node, lvalue, =, gramps, ., getFirstChild, (, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;]
[., ASSIGN, :, Node, lvalue, =, gramps, ., getFirstChild, (, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;]
[;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=]
[., getFirstChild, (, ), ;, name, =, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :]
[=, lvalue, ., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=, null, &&]
[;, break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=, null, &&, greatGramps, ., isObjectLit, (, ), )]
[., getQualifiedName, (, ), ;, break, ;, case, Token, ., STRING_KEY, :, if, (, greatGramps, !=, null, &&, greatGramps, .]
[:, if, (, greatGramps, !=, null, &&, greatGramps, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, gramps, )]
[., STRING_KEY, :, if, (, greatGramps, !=, null, &&, greatGramps, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (]
[), {, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return, null, ;, }, break, ;, default, :]
[&&, greatGramps, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return, null]
[!=, null, &&, greatGramps, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {]
[&&, greatGramps, ., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return, null]
[), {, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return, null, ;, }, break, ;, default, :]
[., isObjectLit, (, ), ), {, name, =, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return, null, ;, }]
[=, getNameForObjLitKey, (, gramps, ), ;, }, else, {, return, null, ;, }, break, ;, default, :, return, null, ;]
[;, }, else, {, return, null, ;, }, break, ;, default, :, return, null, ;, }, if, (, name, !=]
[), ;, }, else, {, return, null, ;, }, break, ;, default, :, return, null, ;, }, if, (, name]
[;, }, break, ;, default, :, return, null, ;, }, if, (, name, !=, null, ), {, String, key, =]
[;, }, if, (, name, !=, null, ), {, String, key, =, n, ., getString, (, ), ;, if, (]
[), {, String, key, =, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), )]
[!=, null, ), {, String, key, =, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key]
[), {, String, key, =, n, ., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), )]
[;, if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return, name, +, '.', +, key, ;, }, }]
[., getString, (, ), ;, if, (, TokenStream, ., isJSIdentifier, (, key, ), ), {, return, name, +, '.', +]
[), {, return, name, +, '.', +, key, ;, }, }, return, null, ;, }, Name, ., Type, getValueType, (]
[., isJSIdentifier, (, key, ), ), {, return, name, +, '.', +, key, ;, }, }, return, null, ;, }]
[), ), {, return, name, +, '.', +, key, ;, }, }, return, null, ;, }, Name, ., Type, getValueType]
[;, }, }, return, null, ;, }, Name, ., Type, getValueType, (, Node, n, ), {, switch, (, n, .]
[+, key, ;, }, }, return, null, ;, }, Name, ., Type, getValueType, (, Node, n, ), {, switch, (]
[+, '.', +, key, ;, }, }, return, null, ;, }, Name, ., Type, getValueType, (, Node, n, ), {]
[+, key, ;, }, }, return, null, ;, }, Name, ., Type, getValueType, (, Node, n, ), {, switch, (]
[;, }, }, return, null, ;, }, Name, ., Type, getValueType, (, Node, n, ), {, switch, (, n, .]
[;, }, Name, ., Type, getValueType, (, Node, n, ), {, switch, (, n, ., getType, (, ), ), {]
[), {, case, Token, ., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return]
[., getType, (, ), ), {, case, Token, ., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case, Token]
[:, return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;]
[., OBJECTLIT, :, return, Name, ., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return, Name, ., Type, .]
[;, case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType]
[., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case, Token, ., OR, :]
[., Type, ., OBJECTLIT, ;, case, Token, ., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case, Token, .]
[:, return, Name, ., Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (, n, ., getLastChild, (]
[., FUNCTION, :, return, Name, ., Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (, n, .]
[;, case, Token, ., OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case, Token, ., HOOK]
[., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case, Token]
[., Type, ., FUNCTION, ;, case, Token, ., OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;]
[:, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case, Token, ., HOOK, :, Node, second, =, n]
[., OR, :, return, getValueType, (, n, ., getLastChild, (, ), ), ;, case, Token, ., HOOK, :, Node, second]
[;, case, Token, ., HOOK, :, Node, second, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Name]
[), ;, case, Token, ., HOOK, :, Node, second, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;]
[., getLastChild, (, ), ), ;, case, Token, ., HOOK, :, Node, second, =, n, ., getFirstChild, (, ), .]
[:, Node, second, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType]
[., HOOK, :, Node, second, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, Name, ., Type, t]
[;, Name, ., Type, t, =, getValueType, (, second, ), ;, if, (, t, !=, Name, ., Type, ., OTHER]
[., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (, second, ), ;, if, (, t, !=, Name]
[., getFirstChild, (, ), ., getNext, (, ), ;, Name, ., Type, t, =, getValueType, (, second, ), ;, if]
[;, if, (, t, !=, Name, ., Type, ., OTHER, ), return, t, ;, Node, third, =, second, ., getNext]
[), ;, if, (, t, !=, Name, ., Type, ., OTHER, ), return, t, ;, Node, third, =, second, .]
[), return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (, third, ), ;, }]
[!=, Name, ., Type, ., OTHER, ), return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return]
[), return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (, third, ), ;, }]
[., OTHER, ), return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (, third, )]
[., Type, ., OTHER, ), return, t, ;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (]
[;, Node, third, =, second, ., getNext, (, ), ;, return, getValueType, (, third, ), ;, }, return, Name, .]
[;, return, getValueType, (, third, ), ;, }, return, Name, ., Type, ., OTHER, ;, }, void, handleSetFromGlobal, (, NodeTraversal]
[., getNext, (, ), ;, return, getValueType, (, third, ), ;, }, return, Name, ., Type, ., OTHER, ;, }]
[;, }, return, Name, ., Type, ., OTHER, ;, }, void, handleSetFromGlobal, (, NodeTraversal, t, ,, Node, n, ,, Node]
[), ;, }, return, Name, ., Type, ., OTHER, ;, }, void, handleSetFromGlobal, (, NodeTraversal, t, ,, Node, n, ,]
[;, }, void, handleSetFromGlobal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ,, boolean, isPropAssign, ,]
[., OTHER, ;, }, void, handleSetFromGlobal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ,, boolean]
[., Type, ., OTHER, ;, }, void, handleSetFromGlobal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name]
[), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., type, =, type, ;, Ref, set, =]
[,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, .]
[,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., type, =]
[,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., type, =, type, ;]
[), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, nameObj, ., type, =, type, ;, Ref, set]
[;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref]
[), ;, nameObj, ., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,]
[=, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL]
[., type, =, type, ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type]
[;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex]
[;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new]
[,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set]
[,, nameObj, ,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;]
[,, Ref, ., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (]
[,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {]
[., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, )]
[., Type, ., SET_FROM_GLOBAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (]
[), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =]
[++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get]
[;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj]
[., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (]
[), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,]
[), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,]
[), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET]
[;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else, if]
[,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get]
[,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;]
[,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, .]
[,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, )]
[., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,]
[., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (]
[), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else]
[++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }]
[;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration, (, n, ,, parent, )]
[., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration]
[), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration, (, n, ,, parent]
[;, }, else, if, (, isTypeDeclaration, (, n, ,, parent, ), ), {, nameObj, ., setDeclaredType, (, ), ;, }]
[., markTwins, (, set, ,, get, ), ;, }, else, if, (, isTypeDeclaration, (, n, ,, parent, ), ), {]
[,, get, ), ;, }, else, if, (, isTypeDeclaration, (, n, ,, parent, ), ), {, nameObj, ., setDeclaredType, (]
[), ;, }, else, if, (, isTypeDeclaration, (, n, ,, parent, ), ), {, nameObj, ., setDeclaredType, (, ), ;]
[), {, nameObj, ., setDeclaredType, (, ), ;, }, }, private, boolean, isTypeDeclaration, (, Node, n, ,, Node, parent, )]
[,, parent, ), ), {, nameObj, ., setDeclaredType, (, ), ;, }, }, private, boolean, isTypeDeclaration, (, Node, n, ,]
[), ), {, nameObj, ., setDeclaredType, (, ), ;, }, }, private, boolean, isTypeDeclaration, (, Node, n, ,, Node, parent]
[;, }, }, private, boolean, isTypeDeclaration, (, Node, n, ,, Node, parent, ), {, Node, valueNode, =, NodeUtil, ., getRValueOfLValue]
[., setDeclaredType, (, ), ;, }, }, private, boolean, isTypeDeclaration, (, Node, n, ,, Node, parent, ), {, Node, valueNode]
[;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&]
[., getRValueOfLValue, (, n, ), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null]
[), ;, JSDocInfo, info, =, NodeUtil, ., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null]
[;, return, info, !=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction]
[., getBestJSDocInfo, (, n, ), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (]
[), ;, return, info, !=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, .]
[;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (]
[&&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&]
[&&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, .]
[!=, null, &&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||]
[&&, valueNode, !=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, .]
[&&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&]
[!=, null, &&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (]
[&&, (, info, ., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&]
[;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if, (]
[), ;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if]
[||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), ), ;, }, void, handleSetFromLocal, (, NodeTraversal, t]
[||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode]
[&&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info]
[., isConstructor, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction]
[||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode]
[., isFunction, (, ), ||, info, ., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType]
[||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), ), ;, }, void, handleSetFromLocal, (, NodeTraversal, t]
[&&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), ), ;]
[., isInterface, (, ), &&, valueNode, ., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit]
[||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), ), ;, }, void, handleSetFromLocal, (, NodeTraversal, t]
[., isFunction, (, ), ||, info, ., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), ), ;, }, void]
[), ;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if]
[&&, valueNode, ., isObjectLit, (, ), ), ;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., hasEnumParameterType, (, ), &&, valueNode, ., isObjectLit, (, ), ), ;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node]
[), ;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if]
[., isObjectLit, (, ), ), ;, }, void, handleSetFromLocal, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String]
[), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (, t, ,, n]
[,, n, ,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set]
[,, parent, ,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new]
[,, name, ), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (]
[), ), return, ;, Name, nameObj, =, getOrCreateName, (, name, ), ;, Ref, set, =, new, Ref, (, t, ,]
[;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex]
[), ;, Ref, set, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,]
[;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new]
[,, n, ,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set]
[,, nameObj, ,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;]
[,, Ref, ., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (]
[,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {]
[., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, )]
[., Type, ., SET_FROM_LOCAL, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (]
[), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =]
[++, ), ;, nameObj, ., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get]
[;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj]
[., addRef, (, set, ), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (]
[), ;, if, (, isNestedAssign, (, parent, ), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,]
[), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,]
[), ), {, Ref, get, =, new, Ref, (, t, ,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET]
[;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, }, void]
[,, n, ,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get]
[,, nameObj, ,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;]
[,, Ref, ., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, .]
[,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, )]
[., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,]
[., Type, ., ALIASING_GET, ,, currentPreOrderIndex, ++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (]
[), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, }]
[++, ), ;, nameObj, ., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }]
[;, Ref, ., markTwins, (, set, ,, get, ), ;, }, }, void, handleGet, (, NodeTraversal, t, ,, Node, n]
[., addRef, (, get, ), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, }, void, handleGet, (]
[), ;, Ref, ., markTwins, (, set, ,, get, ), ;, }, }, void, handleGet, (, NodeTraversal, t, ,, Node]
[;, }, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, if]
[., markTwins, (, set, ,, get, ), ;, }, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node]
[,, get, ), ;, }, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name]
[), ;, }, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {]
[), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (, parent, !=, null, )]
[,, n, ,, parent, ,, name, ), ), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET]
[,, parent, ,, name, ), ), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if]
[,, name, ), ), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (, parent]
[), ), return, ;, Ref, ., Type, type, =, Ref, ., Type, ., DIRECT_GET, ;, if, (, parent, !=, null]
[;, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, .]
[., DIRECT_GET, ;, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case]
[., Type, ., DIRECT_GET, ;, if, (, parent, !=, null, ), {, switch, (, parent, ., getType, (, ), )]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., TYPEOF]
[!=, null, ), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token]
[), {, switch, (, parent, ., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., TYPEOF]
[), {, case, Token, ., IF, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., IF, :, case, Token, ., TYPEOF, :, case, Token, ., VOID]
[:, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT]
[., IF, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token]
[:, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS]
[., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token]
[:, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG]
[., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token]
[:, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token]
[., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;]
[:, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =]
[., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :]
[:, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild]
[., POS, :, case, Token, ., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==, parent]
[:, break, ;, case, Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, .]
[., NEG, :, break, ;, case, Token, ., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[:, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type]
[., CALL, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref]
[=, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET]
[;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, .]
[?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :]
[==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break]
[?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :]
[., getFirstChild, (, ), ?, Ref, ., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case]
[:, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, .]
[., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==]
[., Type, ., CALL_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =]
[;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, .]
[., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?]
[., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., NEW, :, type, =, n, ==, parent, ., getFirstChild, (]
[:, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type]
[., NEW, :, type, =, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref]
[=, n, ==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET]
[;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent]
[?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :]
[==, parent, ., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break]
[?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :]
[., getFirstChild, (, ), ?, Ref, ., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case]
[:, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type]
[., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND]
[., Type, ., DIRECT_GET, :, Ref, ., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token]
[;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent]
[., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t]
[., Type, ., ALIASING_GET, ;, break, ;, case, Token, ., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr]
[:, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case]
[., OR, :, case, Token, ., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break]
[:, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK, :, if]
[., AND, :, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK]
[=, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK, :, if, (, n]
[;, break, ;, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, type]
[,, parent, ,, name, ), ;, break, ;, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild]
[,, name, ), ;, break, ;, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, )]
[), ;, break, ;, case, Token, ., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {]
[:, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,]
[., HOOK, :, if, (, n, !=, parent, ., getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,]
[), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP]
[!=, parent, ., getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }]
[), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP]
[., getFirstChild, (, ), ), {, type, =, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;]
[=, determineGetTypeForHookOrBooleanExpr, (, t, ,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP, :, type, =]
[;, }, break, ;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default]
[,, parent, ,, name, ), ;, }, break, ;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, .]
[,, name, ), ;, }, break, ;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;]
[), ;, }, break, ;, case, Token, ., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;]
[:, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET]
[., DELPROP, :, type, =, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default, :, type, =, Ref, ., Type]
[=, Ref, ., Type, ., DELETE_PROP, ;, break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break]
[;, break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t]
[., DELETE_PROP, ;, break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet]
[., Type, ., DELETE_PROP, ;, break, ;, default, :, type, =, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }]
[=, Ref, ., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t, ,, n, ,, parent, ,, name]
[;, break, ;, }, }, handleGet, (, t, ,, n, ,, parent, ,, name, ,, type, ), ;, }, Ref]
[., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t, ,, n, ,, parent, ,, name, ,, type, ), ;]
[., Type, ., ALIASING_GET, ;, break, ;, }, }, handleGet, (, t, ,, n, ,, parent, ,, name, ,, type]
[;, }, Ref, ., Type, determineGetTypeForHookOrBooleanExpr, (, NodeTraversal, t, ,, Node, parent, ,, String, name, ), {, Node, prev, =]
[,, n, ,, parent, ,, name, ,, type, ), ;, }, Ref, ., Type, determineGetTypeForHookOrBooleanExpr, (, NodeTraversal, t, ,, Node]
[,, parent, ,, name, ,, type, ), ;, }, Ref, ., Type, determineGetTypeForHookOrBooleanExpr, (, NodeTraversal, t, ,, Node, parent, ,]
[,, name, ,, type, ), ;, }, Ref, ., Type, determineGetTypeForHookOrBooleanExpr, (, NodeTraversal, t, ,, Node, parent, ,, String, name]
[,, type, ), ;, }, Ref, ., Type, determineGetTypeForHookOrBooleanExpr, (, NodeTraversal, t, ,, Node, parent, ,, String, name, ), {]
[), ;, }, Ref, ., Type, determineGetTypeForHookOrBooleanExpr, (, NodeTraversal, t, ,, Node, parent, ,, String, name, ), {, Node, prev]
[;, for, (, Node, anc, :, parent, ., getAncestors, (, ), ), {, switch, (, anc, ., getType, (, )]
[), {, switch, (, anc, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., VAR]
[., getAncestors, (, ), ), {, switch, (, anc, ., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :]
[), {, case, Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case, Token, ., IF, :, case, Token, .]
[., getType, (, ), ), {, case, Token, ., EXPR_RESULT, :, case, Token, ., VAR, :, case, Token, ., IF]
[:, case, Token, ., VAR, :, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR]
[., EXPR_RESULT, :, case, Token, ., VAR, :, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token]
[:, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF]
[., VAR, :, case, Token, ., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR, :, case, Token]
[:, case, Token, ., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID]
[., IF, :, case, Token, ., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token]
[:, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT]
[., WHILE, :, case, Token, ., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token]
[:, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT]
[., FOR, :, case, Token, ., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token]
[:, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS]
[., TYPEOF, :, case, Token, ., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token]
[:, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG]
[., VOID, :, case, Token, ., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token]
[:, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return, Ref, ., Type]
[., NOT, :, case, Token, ., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return, Ref]
[:, case, Token, ., POS, :, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token]
[., BITNOT, :, case, Token, ., POS, :, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;]
[:, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (]
[., POS, :, case, Token, ., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :]
[:, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, )]
[., NEG, :, return, Ref, ., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild]
[;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==, prev, ), {, return, Ref, .]
[., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==, prev, ), {, return]
[., Type, ., DIRECT_GET, ;, case, Token, ., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==, prev, )]
[:, if, (, anc, ., getFirstChild, (, ), ==, prev, ), {, return, Ref, ., Type, ., DIRECT_GET, ;, }]
[., HOOK, :, if, (, anc, ., getFirstChild, (, ), ==, prev, ), {, return, Ref, ., Type, ., DIRECT_GET]
[), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !]
[==, prev, ), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if]
[., getFirstChild, (, ), ==, prev, ), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case, Token]
[), {, return, Ref, ., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !]
[;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !, name, ., equals, (, anc, ., getFirstChild, (]
[., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !, name, ., equals, (, anc, .]
[., Type, ., DIRECT_GET, ;, }, break, ;, case, Token, ., ASSIGN, :, if, (, !, name, ., equals, (]
[:, if, (, !, name, ., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {]
[., ASSIGN, :, if, (, !, name, ., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), )]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !]
[., equals, (, anc, ., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, return, Ref, ., Type, .]
[), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (]
[., getQualifiedName, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, .]
[., getFirstChild, (, ), ., getQualifiedName, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break]
[;, }, break, ;, case, Token, ., NAME, :, if, (, !, name, ., equals, (, anc, ., getString, (]
[., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !, name, ., equals, (, anc, .]
[., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., NAME, :, if, (, !, name, ., equals, (]
[:, if, (, !, name, ., equals, (, anc, ., getString, (, ), ), ), {, return, Ref, ., Type]
[., NAME, :, if, (, !, name, ., equals, (, anc, ., getString, (, ), ), ), {, return, Ref]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (, anc]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (, anc]
[., equals, (, anc, ., getString, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break]
[), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (]
[., getString, (, ), ), ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, .]
[;, }, break, ;, case, Token, ., CALL, :, if, (, anc, ., getFirstChild, (, ), !=, prev, ), {]
[., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (, anc, ., getFirstChild, (, ), !=, prev]
[., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., CALL, :, if, (, anc, ., getFirstChild, (, )]
[:, if, (, anc, ., getFirstChild, (, ), !=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }]
[., CALL, :, if, (, anc, ., getFirstChild, (, ), !=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return, Ref, .]
[!=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return]
[., getFirstChild, (, ), !=, prev, ), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token]
[), {, return, Ref, ., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return, Ref, .]
[;, }, break, ;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev, =, anc]
[., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev]
[., Type, ., ALIASING_GET, ;, }, break, ;, case, Token, ., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;]
[:, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev, =, anc, ;, }, return, Ref, ., Type, ., ALIASING_GET]
[., DELPROP, :, return, Ref, ., Type, ., DELETE_PROP, ;, }, prev, =, anc, ;, }, return, Ref, ., Type]
[;, }, prev, =, anc, ;, }, return, Ref, ., Type, ., ALIASING_GET, ;, }, void, handleGet, (, NodeTraversal, t]
[., DELETE_PROP, ;, }, prev, =, anc, ;, }, return, Ref, ., Type, ., ALIASING_GET, ;, }, void, handleGet, (]
[., Type, ., DELETE_PROP, ;, }, prev, =, anc, ;, }, return, Ref, ., Type, ., ALIASING_GET, ;, }, void]
[=, anc, ;, }, return, Ref, ., Type, ., ALIASING_GET, ;, }, void, handleGet, (, NodeTraversal, t, ,, Node, n]
[;, }, return, Ref, ., Type, ., ALIASING_GET, ;, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node]
[;, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ,, Ref, ., Type]
[., ALIASING_GET, ;, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ,, Ref]
[., Type, ., ALIASING_GET, ;, }, void, handleGet, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name]
[;, nameObj, ., addRef, (, new, Ref, (, t, ,, n, ,, nameObj, ,, type, ,, currentPreOrderIndex, ++, ), )]
[), ;, nameObj, ., addRef, (, new, Ref, (, t, ,, n, ,, nameObj, ,, type, ,, currentPreOrderIndex, ++, )]
[;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, int, numLevelsToRemove]
[., addRef, (, new, Ref, (, t, ,, n, ,, nameObj, ,, type, ,, currentPreOrderIndex, ++, ), ), ;, }]
[), ;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {, int]
[,, n, ,, nameObj, ,, type, ,, currentPreOrderIndex, ++, ), ), ;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node]
[,, nameObj, ,, type, ,, currentPreOrderIndex, ++, ), ), ;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node, n, ,]
[,, type, ,, currentPreOrderIndex, ++, ), ), ;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[,, currentPreOrderIndex, ++, ), ), ;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String]
[), ), ;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, ), {]
[++, ), ), ;, }, boolean, maybeHandlePrototypePrefix, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ,, String, name, )]
[), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (, 0, ,, name, ., length, (, ), -]
[., endsWith, (, ".prototype", ), ), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (, 0, ,, name]
[), ), {, numLevelsToRemove, =, 1, ;, prefix, =, name, ., substring, (, 0, ,, name, ., length, (, )]
[=, 1, ;, prefix, =, name, ., substring, (, 0, ,, name, ., length, (, ), -, 10, ), ;]
[;, prefix, =, name, ., substring, (, 0, ,, name, ., length, (, ), -, 10, ), ;, }, else]
[=, name, ., substring, (, 0, ,, name, ., length, (, ), -, 10, ), ;, }, else, {, int]
[;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -, 1]
[., substring, (, 0, ,, name, ., length, (, ), -, 10, ), ;, }, else, {, int, i, =]
[,, name, ., length, (, ), -, 10, ), ;, }, else, {, int, i, =, name, ., indexOf, (]
[), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -]
[-, 10, ), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (, i]
[., length, (, ), -, 10, ), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", )]
[), ;, }, else, {, int, i, =, name, ., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -]
[;, if, (, i, ==, -, 1, ), {, return, false, ;, }, prefix, =, name, ., substring, (, 0]
[., indexOf, (, ".prototype.", ), ;, if, (, i, ==, -, 1, ), {, return, false, ;, }, prefix, =]
[), ;, if, (, i, ==, -, 1, ), {, return, false, ;, }, prefix, =, name, ., substring, (]
[), {, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2]
[==, -, 1, ), {, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;]
[), {, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2]
[), {, return, false, ;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2]
[;, }, prefix, =, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name]
[=, name, ., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (]
[;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (]
[., substring, (, 0, ,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,]
[,, i, ), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, )]
[), ;, numLevelsToRemove, =, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while]
[=, 2, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=]
[;, i, =, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, )]
[=, name, ., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove]
[;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i]
[., indexOf, (, '.', ,, i, +, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;]
[,, i, +, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, .]
[), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,]
[+, 11, ), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (]
[), ;, while, (, i, >=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,]
[), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }]
[>=, 0, ), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;]
[), {, numLevelsToRemove, ++, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }]
[;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (, parent, !=]
[++, ;, i, =, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (, parent]
[=, name, ., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (, parent, !=, null, &&]
[;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return]
[., indexOf, (, '.', ,, i, +, 1, ), ;, }, }, if, (, parent, !=, null, &&, NodeUtil, .]
[,, i, +, 1, ), ;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,]
[), ;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {]
[+, 1, ), ;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, )]
[), ;, }, }, if, (, parent, !=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {]
[), {, return, true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, )]
[&&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, for, (, int, i, =]
[!=, null, &&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, for, (, int]
[&&, NodeUtil, ., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, for, (, int, i, =]
[), {, return, true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, )]
[., isObjectLitKey, (, n, ,, parent, ), ), {, return, true, ;, }, for, (, int, i, =, 0, ;]
[,, parent, ), ), {, return, true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;]
[), ), {, return, true, ;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++]
[;, }, for, (, int, i, =, 0, ;, i, <, numLevelsToRemove, ;, i, ++, ), {, parent, =, n]
[;, i, <, numLevelsToRemove, ;, i, ++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, )]
[;, i, ++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (]
[<, numLevelsToRemove, ;, i, ++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }]
[;, i, ++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (]
[), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n]
[++, ), {, parent, =, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,]
[=, n, ;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,]
[;, n, =, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,]
[=, n, ., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,, Ref, .]
[;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return]
[., getFirstChild, (, ), ;, }, handleGet, (, t, ,, n, ,, parent, ,, prefix, ,, Ref, ., Type, .]
[;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (, ), &&, !]
[,, n, ,, parent, ,, prefix, ,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign]
[,, parent, ,, prefix, ,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node]
[,, prefix, ,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, )]
[,, Ref, ., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return]
[), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (, ), &&]
[., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (]
[., Type, ., PROTOTYPE_GET, ), ;, return, true, ;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, .]
[;, }, boolean, isNestedAssign, (, Node, parent, ), {, return, parent, ., isAssign, (, ), &&, !, parent, ., getParent]
[;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (, name, ), ;, if]
[&&, !, parent, ., getParent, (, ), ., isExprResult, (, ), ;, }, Name, getOrCreateName, (, String, name, ), {]
[., isAssign, (, ), &&, !, parent, ., getParent, (, ), ., isExprResult, (, ), ;, }, Name, getOrCreateName, (]
[;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (, name, ), ;, if]
[;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (, name, ), ;, if]
[., isExprResult, (, ), ;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =, nameMap, ., get, (]
[., getParent, (, ), ., isExprResult, (, ), ;, }, Name, getOrCreateName, (, String, name, ), {, Name, node, =]
[;, if, (, node, ==, null, ), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (]
[., get, (, name, ), ;, if, (, node, ==, null, ), {, int, i, =, name, ., lastIndexOf, (]
[), ;, if, (, node, ==, null, ), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if]
[), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (, i, >=, 0, ), {, String]
[==, null, ), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (, i, >=, 0, )]
[), {, int, i, =, name, ., lastIndexOf, (, '.', ), ;, if, (, i, >=, 0, ), {, String]
[;, if, (, i, >=, 0, ), {, String, parentName, =, name, ., substring, (, 0, ,, i, ), ;]
[., lastIndexOf, (, '.', ), ;, if, (, i, >=, 0, ), {, String, parentName, =, name, ., substring, (]
[), ;, if, (, i, >=, 0, ), {, String, parentName, =, name, ., substring, (, 0, ,, i, )]
[), {, String, parentName, =, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName]
[>=, 0, ), {, String, parentName, =, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName]
[), {, String, parentName, =, name, ., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName]
[;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (, name, ., substring, (, i]
[., substring, (, 0, ,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, .]
[,, i, ), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (, name, .]
[), ;, Name, parent, =, getOrCreateName, (, parentName, ), ;, node, =, parent, ., addProperty, (, name, ., substring, (]
[;, node, =, parent, ., addProperty, (, name, ., substring, (, i, +, 1, ), ,, inExterns, ), ;, }]
[), ;, node, =, parent, ., addProperty, (, name, ., substring, (, i, +, 1, ), ,, inExterns, ), ;]
[=, parent, ., addProperty, (, name, ., substring, (, i, +, 1, ), ,, inExterns, ), ;, }, else, {]
[;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;, globalNames, ., add, (]
[., addProperty, (, name, ., substring, (, i, +, 1, ), ,, inExterns, ), ;, }, else, {, node, =]
[,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;, globalNames]
[., substring, (, i, +, 1, ), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name]
[), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;]
[+, 1, ), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns]
[), ,, inExterns, ), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;]
[), ;, }, else, {, node, =, new, Name, (, name, ,, null, ,, inExterns, ), ;, globalNames, ., add]
[=, new, Name, (, name, ,, null, ,, inExterns, ), ;, globalNames, ., add, (, node, ), ;, }, nameMap]
[;, globalNames, ., add, (, node, ), ;, }, nameMap, ., put, (, name, ,, node, ), ;, }, return]
[,, null, ,, inExterns, ), ;, globalNames, ., add, (, node, ), ;, }, nameMap, ., put, (, name, ,]
[,, inExterns, ), ;, globalNames, ., add, (, node, ), ;, }, nameMap, ., put, (, name, ,, node, )]
[), ;, globalNames, ., add, (, node, ), ;, }, nameMap, ., put, (, name, ,, node, ), ;, }]
[;, }, nameMap, ., put, (, name, ,, node, ), ;, }, return, node, ;, }, }, static, class, Name]
[., add, (, node, ), ;, }, nameMap, ., put, (, name, ,, node, ), ;, }, return, node, ;]
[), ;, }, nameMap, ., put, (, name, ,, node, ), ;, }, return, node, ;, }, }, static, class]
[;, }, return, node, ;, }, }, static, class, Name, implements, StaticSlot, <, JSType, >, {, enum, Type, {, OBJECTLIT]
[., put, (, name, ,, node, ), ;, }, return, node, ;, }, }, static, class, Name, implements, StaticSlot, <]
[,, node, ), ;, }, return, node, ;, }, }, static, class, Name, implements, StaticSlot, <, JSType, >, {, enum]
[), ;, }, return, node, ;, }, }, static, class, Name, implements, StaticSlot, <, JSType, >, {, enum, Type, {]
[;, }, }, static, class, Name, implements, StaticSlot, <, JSType, >, {, enum, Type, {, OBJECTLIT, ,, FUNCTION, ,, GET]
[;, private, boolean, hasDeclaredTypeDescendant, =, false, ;, int, globalSets, =, 0, ;, int, localSets, =, 0, ;, int, aliasingGets, =]
[;, int, globalSets, =, 0, ;, int, localSets, =, 0, ;, int, aliasingGets, =, 0, ;, int, totalGets, =, 0]
[;, int, localSets, =, 0, ;, int, aliasingGets, =, 0, ;, int, totalGets, =, 0, ;, int, callGets, =, 0]
[;, int, aliasingGets, =, 0, ;, int, totalGets, =, 0, ;, int, callGets, =, 0, ;, int, deleteProps, =, 0]
[;, int, totalGets, =, 0, ;, int, callGets, =, 0, ;, int, deleteProps, =, 0, ;, final, boolean, inExterns, ;]
[;, int, callGets, =, 0, ;, int, deleteProps, =, 0, ;, final, boolean, inExterns, ;, JSDocInfo, docInfo, =, null, ;]
[;, int, deleteProps, =, 0, ;, final, boolean, inExterns, ;, JSDocInfo, docInfo, =, null, ;, Name, (, String, name, ,]
[;, final, boolean, inExterns, ;, JSDocInfo, docInfo, =, null, ;, Name, (, String, name, ,, Name, parent, ,, boolean, inExterns]
[;, Name, (, String, name, ,, Name, parent, ,, boolean, inExterns, ), {, this, ., baseName, =, name, ;, this]
[=, name, ;, this, ., parent, =, parent, ;, this, ., type, =, Type, ., OTHER, ;, this, ., inExterns]
[., baseName, =, name, ;, this, ., parent, =, parent, ;, this, ., type, =, Type, ., OTHER, ;, this]
[;, this, ., parent, =, parent, ;, this, ., type, =, Type, ., OTHER, ;, this, ., inExterns, =, inExterns]
[=, parent, ;, this, ., type, =, Type, ., OTHER, ;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty]
[., parent, =, parent, ;, this, ., type, =, Type, ., OTHER, ;, this, ., inExterns, =, inExterns, ;, }]
[;, this, ., type, =, Type, ., OTHER, ;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty, (, String]
[=, Type, ., OTHER, ;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns]
[., type, =, Type, ., OTHER, ;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,]
[;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (]
[., OTHER, ;, this, ., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {]
[=, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (, props, ==, null, )]
[., inExterns, =, inExterns, ;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (, props, ==]
[;, }, Name, addProperty, (, String, name, ,, boolean, inExterns, ), {, if, (, props, ==, null, ), {, props]
[), {, props, =, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =, new, Name, (, name]
[==, null, ), {, props, =, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =, new, Name]
[), {, props, =, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =, new, Name, (, name]
[=, new, ArrayList, <, Name, >, (, ), ;, }, Name, node, =, new, Name, (, name, ,, this, ,]
[;, }, Name, node, =, new, Name, (, name, ,, this, ,, inExterns, ), ;, props, ., add, (, node]
[;, props, ., add, (, node, ), ;, return, node, ;, }, String, getBaseName, (, ), {, return, baseName, ;]
[,, this, ,, inExterns, ), ;, props, ., add, (, node, ), ;, return, node, ;, }, String, getBaseName, (]
[,, inExterns, ), ;, props, ., add, (, node, ), ;, return, node, ;, }, String, getBaseName, (, ), {]
[), ;, props, ., add, (, node, ), ;, return, node, ;, }, String, getBaseName, (, ), {, return, baseName]
[;, return, node, ;, }, String, getBaseName, (, ), {, return, baseName, ;, }, @, Override, public, String, getName, (]
[., add, (, node, ), ;, return, node, ;, }, String, getBaseName, (, ), {, return, baseName, ;, }, @]
[), ;, return, node, ;, }, String, getBaseName, (, ), {, return, baseName, ;, }, @, Override, public, String, getName]
[;, }, String, getBaseName, (, ), {, return, baseName, ;, }, @, Override, public, String, getName, (, ), {, return]
[;, }, @, Override, public, String, getName, (, ), {, return, getFullName, (, ), ;, }, String, getFullName, (, )]
[;, }, String, getFullName, (, ), {, return, parent, ==, null, ?, baseName, :, parent, ., getFullName, (, ), +]
[;, }, @, Override, public, Ref, getDeclaration, (, ), {, return, declaration, ;, }, @, Override, public, boolean, isTypeInferred, (]
[?, baseName, :, parent, ., getFullName, (, ), +, '.', +, baseName, ;, }, @, Override, public, Ref, getDeclaration, (]
[==, null, ?, baseName, :, parent, ., getFullName, (, ), +, '.', +, baseName, ;, }, @, Override, public, Ref]
[?, baseName, :, parent, ., getFullName, (, ), +, '.', +, baseName, ;, }, @, Override, public, Ref, getDeclaration, (]
[:, parent, ., getFullName, (, ), +, '.', +, baseName, ;, }, @, Override, public, Ref, getDeclaration, (, ), {]
[;, }, @, Override, public, Ref, getDeclaration, (, ), {, return, declaration, ;, }, @, Override, public, boolean, isTypeInferred, (]
[+, baseName, ;, }, @, Override, public, Ref, getDeclaration, (, ), {, return, declaration, ;, }, @, Override, public, boolean]
[+, '.', +, baseName, ;, }, @, Override, public, Ref, getDeclaration, (, ), {, return, declaration, ;, }, @, Override]
[., getFullName, (, ), +, '.', +, baseName, ;, }, @, Override, public, Ref, getDeclaration, (, ), {, return, declaration]
[+, baseName, ;, }, @, Override, public, Ref, getDeclaration, (, ), {, return, declaration, ;, }, @, Override, public, boolean]
[;, }, @, Override, public, Ref, getDeclaration, (, ), {, return, declaration, ;, }, @, Override, public, boolean, isTypeInferred, (]
[;, }, @, Override, public, boolean, isTypeInferred, (, ), {, return, false, ;, }, @, Override, public, JSType, getType, (]
[;, }, @, Override, public, JSType, getType, (, ), {, return, null, ;, }, void, addRef, (, Ref, ref, )]
[;, }, void, addRef, (, Ref, ref, ), {, addRefInternal, (, ref, ), ;, switch, (, ref, ., type, )]
[;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration, =]
[), ;, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration]
[), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (]
[., type, ), {, case, SET_FROM_GLOBAL, :, if, (, declaration, ==, null, ), {, declaration, =, ref, ;, docInfo, =]
[:, if, (, declaration, ==, null, ), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }]
[), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case]
[==, null, ), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break]
[), {, declaration, =, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case]
[=, ref, ;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets]
[;, docInfo, =, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;]
[=, getDocInfoForDeclaration, (, ref, ), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;]
[;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET]
[), ;, }, globalSets, ++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case]
[;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;]
[++, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++]
[:, localSets, ++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :]
[;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;]
[++, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++]
[:, case, DIRECT_GET, :, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;]
[:, totalGets, ++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :]
[;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;]
[++, ;, break, ;, case, ALIASING_GET, :, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++]
[:, aliasingGets, ++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;]
[;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :]
[++, ;, totalGets, ++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP]
[;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :, deleteProps, ++, ;]
[++, ;, break, ;, case, CALL_GET, :, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :, deleteProps, ++]
[:, callGets, ++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :, deleteProps, ++, ;, break, ;, default, :, throw]
[;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :, deleteProps, ++, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[++, ;, totalGets, ++, ;, break, ;, case, DELETE_PROP, :, deleteProps, ++, ;, break, ;, default, :, throw, new, IllegalStateException]
[;, break, ;, case, DELETE_PROP, :, deleteProps, ++, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }]
[++, ;, break, ;, case, DELETE_PROP, :, deleteProps, ++, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;]
[:, deleteProps, ++, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref]
[;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, ), {]
[++, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, void, removeRef, (, Ref, ref, )]
[;, }, }, void, removeRef, (, Ref, ref, ), {, if, (, refs, !=, null, &&, refs, ., remove, (]
[), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;, if, (, refs, !=, null, ), {]
[&&, refs, ., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;]
[!=, null, &&, refs, ., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =]
[&&, refs, ., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;]
[), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;, if, (, refs, !=, null, ), {]
[., remove, (, ref, ), ), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;, if, (]
[), ), {, if, (, ref, ==, declaration, ), {, declaration, =, null, ;, if, (, refs, !=, null, )]
[), {, declaration, =, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, )]
[==, declaration, ), {, declaration, =, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :]
[), {, declaration, =, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, )]
[=, null, ;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (]
[;, if, (, refs, !=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, .]
[), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==, Ref, ., Type, .]
[!=, null, ), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==, Ref, .]
[), {, for, (, Ref, maybeNewDecl, :, refs, ), {, if, (, maybeNewDecl, ., type, ==, Ref, ., Type, .]
[), {, if, (, maybeNewDecl, ., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ), {, declaration, =, maybeNewDecl, ;, break]
[), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, ., type, ), {, case]
[==, Ref, ., Type, ., SET_FROM_GLOBAL, ), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (]
[., type, ==, Ref, ., Type, ., SET_FROM_GLOBAL, ), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }]
[), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, ., type, ), {, case]
[., SET_FROM_GLOBAL, ), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, ., type, )]
[., Type, ., SET_FROM_GLOBAL, ), {, declaration, =, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, .]
[=, maybeNewDecl, ;, break, ;, }, }, }, }, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, globalSets]
[;, break, ;, }, }, }, }, switch, (, ref, ., type, ), {, case, SET_FROM_GLOBAL, :, globalSets, --, ;]
[), {, case, SET_FROM_GLOBAL, :, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET]
[., type, ), {, case, SET_FROM_GLOBAL, :, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;]
[:, globalSets, --, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :]
[;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;]
[--, ;, break, ;, case, SET_FROM_LOCAL, :, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --]
[:, localSets, --, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :]
[;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;]
[--, ;, break, ;, case, PROTOTYPE_GET, :, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --]
[:, case, DIRECT_GET, :, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;]
[:, totalGets, --, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :]
[;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;]
[--, ;, break, ;, case, ALIASING_GET, :, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --]
[:, aliasingGets, --, ;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;]
[;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :]
[--, ;, totalGets, --, ;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP]
[;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :, deleteProps, --, ;]
[--, ;, break, ;, case, CALL_GET, :, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :, deleteProps, --]
[:, callGets, --, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :, deleteProps, --, ;, break, ;, default, :, throw]
[;, totalGets, --, ;, break, ;, case, DELETE_PROP, :, deleteProps, --, ;, break, ;, default, :, throw, new, IllegalStateException, (]
[--, ;, totalGets, --, ;, break, ;, case, DELETE_PROP, :, deleteProps, --, ;, break, ;, default, :, throw, new, IllegalStateException]
[;, break, ;, case, DELETE_PROP, :, deleteProps, --, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }]
[--, ;, break, ;, case, DELETE_PROP, :, deleteProps, --, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;]
[:, deleteProps, --, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, }, List, <, Ref]
[;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs, (]
[--, ;, break, ;, default, :, throw, new, IllegalStateException, (, ), ;, }, }, }, List, <, Ref, >, getRefs]
[;, }, }, }, List, <, Ref, >, getRefs, (, ), {, return, refs, ==, null, ?, ImmutableList, ., <]
[;, }, void, addRefInternal, (, Ref, ref, ), {, if, (, refs, ==, null, ), {, refs, =, Lists, .]
[?, ImmutableList, ., <, Ref, >, of, (, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {]
[==, null, ?, ImmutableList, ., <, Ref, >, of, (, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref]
[?, ImmutableList, ., <, Ref, >, of, (, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {]
[:, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (, refs, ==, null, ), {, refs, =]
[., <, Ref, >, of, (, ), :, refs, ;, }, void, addRefInternal, (, Ref, ref, ), {, if, (]
[;, }, void, addRefInternal, (, Ref, ref, ), {, if, (, refs, ==, null, ), {, refs, =, Lists, .]
[), {, refs, =, Lists, ., newArrayList, (, ), ;, }, refs, ., add, (, ref, ), ;, }, boolean]
[==, null, ), {, refs, =, Lists, ., newArrayList, (, ), ;, }, refs, ., add, (, ref, ), ;]
[), {, refs, =, Lists, ., newArrayList, (, ), ;, }, refs, ., add, (, ref, ), ;, }, boolean]
[=, Lists, ., newArrayList, (, ), ;, }, refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, )]
[;, }, refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (]
[., newArrayList, (, ), ;, }, refs, ., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if]
[;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >, 0, ), {, return]
[., add, (, ref, ), ;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets]
[), ;, }, boolean, canEliminate, (, ), {, if, (, !, canCollapseUnannotatedChildNames, (, ), ||, totalGets, >, 0, ), {]
[), {, return, false, ;, }, if, (, props, !=, null, ), {, for, (, Name, n, :, props, )]
[||, totalGets, >, 0, ), {, return, false, ;, }, if, (, props, !=, null, ), {, for, (, Name]
[||, totalGets, >, 0, ), {, return, false, ;, }, if, (, props, !=, null, ), {, for, (, Name]
[), {, return, false, ;, }, if, (, props, !=, null, ), {, for, (, Name, n, :, props, )]
[>, 0, ), {, return, false, ;, }, if, (, props, !=, null, ), {, for, (, Name, n, :]
[), {, return, false, ;, }, if, (, props, !=, null, ), {, for, (, Name, n, :, props, )]
[;, }, if, (, props, !=, null, ), {, for, (, Name, n, :, props, ), {, if, (, !]
[), {, for, (, Name, n, :, props, ), {, if, (, !, n, ., canCollapse, (, ), ), {]
[!=, null, ), {, for, (, Name, n, :, props, ), {, if, (, !, n, ., canCollapse, (, )]
[), {, for, (, Name, n, :, props, ), {, if, (, !, n, ., canCollapse, (, ), ), {]
[), {, if, (, !, n, ., canCollapse, (, ), ), {, return, false, ;, }, }, }, return, true]
[), {, return, false, ;, }, }, }, return, true, ;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (, getRefs]
[), {, return, false, ;, }, }, }, return, true, ;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (, getRefs]
[., canCollapse, (, ), ), {, return, false, ;, }, }, }, return, true, ;, }, boolean, isSimpleStubDeclaration, (, )]
[;, }, }, }, return, true, ;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (, getRefs, (, ), ., size]
[;, }, boolean, isSimpleStubDeclaration, (, ), {, if, (, getRefs, (, ), ., size, (, ), ==, 1, ), {]
[), {, Ref, ref, =, refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo]
[==, 1, ), {, Ref, ref, =, refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node]
[., size, (, ), ==, 1, ), {, Ref, ref, =, refs, ., get, (, 0, ), ;, JSDocInfo, info]
[), {, Ref, ref, =, refs, ., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo]
[;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (]
[., get, (, 0, ), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref]
[), ;, JSDocInfo, info, =, ref, ., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent]
[;, if, (, ref, ., node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, )]
[., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (, ), !=, null, &&, ref, ., node]
[., node, ., getJSDocInfo, (, ), ;, if, (, ref, ., node, ., getParent, (, ), !=, null, &&, ref]
[), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&]
[&&, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), {, return, true, ;, }, }, return]
[!=, null, &&, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), {, return, true, ;, }]
[., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), {]
[., node, ., getParent, (, ), !=, null, &&, ref, ., node, ., getParent, (, ), ., isExprResult, (, )]
[&&, ref, ., node, ., getParent, (, ), ., isExprResult, (, ), ), {, return, true, ;, }, }, return]
[), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&]
[., isExprResult, (, ), ), {, return, true, ;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {]
[., getParent, (, ), ., isExprResult, (, ), ), {, return, true, ;, }, }, return, false, ;, }, boolean]
[., node, ., getParent, (, ), ., isExprResult, (, ), ), {, return, true, ;, }, }, return, false, ;]
[;, }, }, return, false, ;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, )]
[;, }, boolean, canCollapse, (, ), {, return, !, inExterns, &&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (]
[;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type, ==]
[&&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0]
[&&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), )]
[&&, !, isGetOrSetDefinition, (, ), &&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), )]
[&&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0]
[&&, (, declaredType, ||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0]
[;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type, ==]
[), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type]
[||, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >]
[), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type]
[&&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET]
[&&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (]
[), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition]
[||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==]
[==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&]
[||, parent, ., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==]
[), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition]
[., canCollapseUnannotatedChildNames, (, ), ), &&, (, globalSets, >, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, )]
[&&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET]
[), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, .]
[||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, .]
[>, 0, ||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return]
[||, localSets, >, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, .]
[), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, .]
[>, 0, ), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==]
[), &&, deleteProps, ==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, .]
[), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type]
[==, 0, ), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this]
[), ;, }, boolean, isGetOrSetDefinition, (, ), {, return, this, ., type, ==, Type, ., GET, ||, this, ., type]
[;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets]
[||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type]
[==, Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if]
[., type, ==, Type, ., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, )]
[||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type]
[., GET, ||, this, ., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type]
[;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets]
[==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition]
[., type, ==, Type, ., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER]
[;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets]
[., SET, ;, }, boolean, canCollapseUnannotatedChildNames, (, ), {, if, (, type, ==, Type, ., OTHER, ||, isGetOrSetDefinition, (, )]
[), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin, (, )]
[||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration]
[||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, )]
[||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, .]
[||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false]
[==, Type, ., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0]
[||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false]
[., OTHER, ||, isGetOrSetDefinition, (, ), ||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {]
[||, globalSets, !=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, .]
[||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, )]
[!=, 1, ||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (]
[||, localSets, !=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, )]
[||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration]
[!=, 0, ||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if]
[||, deleteProps, !=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration]
[), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin, (, )]
[!=, 0, ), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin]
[), {, return, false, ;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin, (, )]
[;, }, Preconditions, ., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin, (, ), !=, null, ), {]
[;, if, (, declaration, ., getTwin, (, ), !=, null, ), {, return, false, ;, }, if, (, declaredType, )]
[., checkNotNull, (, declaration, ), ;, if, (, declaration, ., getTwin, (, ), !=, null, ), {, return, false, ;]
[), ;, if, (, declaration, ., getTwin, (, ), !=, null, ), {, return, false, ;, }, if, (, declaredType]
[), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (, parent, !=, null]
[!=, null, ), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (, parent]
[., getTwin, (, ), !=, null, ), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;]
[), {, return, false, ;, }, if, (, declaredType, ), {, return, true, ;, }, if, (, parent, !=, null]
[;, }, if, (, declaredType, ), {, return, true, ;, }, if, (, parent, !=, null, &&, parent, ., shouldKeepKeys]
[), {, return, true, ;, }, if, (, parent, !=, null, &&, parent, ., shouldKeepKeys, (, ), ), {, return]
[;, }, if, (, parent, !=, null, &&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if]
[), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (, parent]
[&&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return]
[!=, null, &&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, )]
[&&, parent, ., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return]
[), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (, parent]
[., shouldKeepKeys, (, ), ), {, return, false, ;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;]
[;, }, if, (, aliasingGets, >, 0, ), {, return, false, ;, }, return, (, parent, ==, null, ||, parent]
[), {, return, false, ;, }, return, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }]
[>, 0, ), {, return, false, ;, }, return, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), )]
[), {, return, false, ;, }, return, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }]
[;, }, return, (, parent, ==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, )]
[;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean]
[), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }]
[||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT]
[==, null, ||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type]
[||, parent, ., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT]
[), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }]
[., canCollapseUnannotatedChildNames, (, ), ), ;, }, boolean, shouldKeepKeys, (, ), {, return, type, ==, Type, ., OBJECTLIT, &&, aliasingGets]
[;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;, }, void, setDeclaredType, (]
[&&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;]
[==, Type, ., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&]
[&&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;]
[., OBJECTLIT, &&, aliasingGets, >, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >]
[;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;, }, void, setDeclaredType, (]
[>, 0, ;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;, }, void]
[;, }, boolean, needsToBeStubbed, (, ), {, return, globalSets, ==, 0, &&, localSets, >, 0, ;, }, void, setDeclaredType, (]
[;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=]
[&&, localSets, >, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =]
[==, 0, &&, localSets, >, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name]
[&&, localSets, >, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =]
[;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=]
[>, 0, ;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;]
[;, }, void, setDeclaredType, (, ), {, declaredType, =, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=]
[=, true, ;, for, (, Name, ancestor, =, parent, ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., parent, )]
[;, for, (, Name, ancestor, =, parent, ;, ancestor, !=, null, ;, ancestor, =, ancestor, ., parent, ), {, ancestor]
[;, ancestor, !=, null, ;, ancestor, =, ancestor, ., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }]
[;, ancestor, =, ancestor, ., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType, (, )]
[!=, null, ;, ancestor, =, ancestor, ., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType]
[;, ancestor, =, ancestor, ., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType, (, )]
[=, ancestor, ., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType, (, ), {, return]
[), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean]
[., parent, ), {, ancestor, ., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;]
[=, true, ;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return]
[., hasDeclaredTypeDescendant, =, true, ;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, )]
[;, }, }, boolean, isDeclaredType, (, ), {, return, declaredType, ;, }, boolean, isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&]
[;, }, boolean, isNamespace, (, ), {, return, hasDeclaredTypeDescendant, &&, type, ==, Type, ., OBJECTLIT, ;, }, boolean, isSimpleName, (]
[;, }, boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, )]
[&&, type, ==, Type, ., OBJECTLIT, ;, }, boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @]
[;, }, boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, )]
[==, Type, ., OBJECTLIT, ;, }, boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public]
[;, }, boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString, (, )]
[., OBJECTLIT, ;, }, boolean, isSimpleName, (, ), {, return, parent, ==, null, ;, }, @, Override, public, String, toString]
[;, }, @, Override, public, String, toString, (, ), {, return, getFullName, (, ), +, " (", +, type, +, "): globalSets="]
[==, null, ;, }, @, Override, public, String, toString, (, ), {, return, getFullName, (, ), +, " (", +, type]
[;, }, @, Override, public, String, toString, (, ), {, return, getFullName, (, ), +, " (", +, type, +, "): globalSets="]
[;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration, (, Ref]
[+, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration]
[+, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static]
[+, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }]
[+, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo]
[+, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {]
[+, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (]
[+, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo]
[+, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override]
[+, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }]
[+, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets]
[+, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets="]
[+, " (", +, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets]
[+, type, +, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets="]
[+, "): globalSets=", +, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets]
[+, globalSets, +, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }]
[+, ", localSets=", +, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override]
[+, localSets, +, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo]
[+, ", totalGets=", +, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (]
[+, totalGets, +, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {]
[+, ", aliasingGets=", +, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo]
[+, aliasingGets, +, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }]
[+, ", callGets=", +, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static]
[+, callGets, ;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration]
[;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, docInfo, ;, }, private, static, JSDocInfo, getDocInfoForDeclaration, (, Ref]
[;, }, private, static, JSDocInfo, getDocInfoForDeclaration, (, Ref, ref, ), {, if, (, ref, ., node, !=, null, ), {]
[), {, Node, refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (, refParent, ., getType, (, )]
[!=, null, ), {, Node, refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (, refParent, ., getType]
[., node, !=, null, ), {, Node, refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (, refParent]
[), {, Node, refParent, =, ref, ., node, ., getParent, (, ), ;, switch, (, refParent, ., getType, (, )]
[;, switch, (, refParent, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :]
[., getParent, (, ), ;, switch, (, refParent, ., getType, (, ), ), {, case, Token, ., FUNCTION, :, case]
[., node, ., getParent, (, ), ;, switch, (, refParent, ., getType, (, ), ), {, case, Token, ., FUNCTION]
[), {, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case]
[., getType, (, ), ), {, case, Token, ., FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo]
[:, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref]
[., FUNCTION, :, case, Token, ., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :]
[:, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref, ., node, ==, refParent, .]
[., ASSIGN, :, return, refParent, ., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref, ., node, ==]
[;, case, Token, ., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo]
[., getJSDocInfo, (, ), ;, case, Token, ., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, )]
[:, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :, ref, .]
[., VAR, :, return, ref, ., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :]
[;, }, }, return, null, ;, }, }, static, class, Ref, implements, StaticReference, <, JSType, >, {, enum, Type, {]
[?, refParent, ., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo, (, ), ;, }, }, return, null, ;]
[==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo, (, )]
[., node, ==, refParent, ., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo]
[?, refParent, ., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo, (, ), ;, }, }, return, null, ;]
[., getFirstChild, (, ), ?, refParent, ., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo, (, ), ;, }]
[:, ref, ., node, ., getJSDocInfo, (, ), ;, }, }, return, null, ;, }, }, static, class, Ref, implements]
[., getJSDocInfo, (, ), :, ref, ., node, ., getJSDocInfo, (, ), ;, }, }, return, null, ;, }, }]
[;, }, }, return, null, ;, }, }, static, class, Ref, implements, StaticReference, <, JSType, >, {, enum, Type, {]
[., getJSDocInfo, (, ), ;, }, }, return, null, ;, }, }, static, class, Ref, implements, StaticReference, <, JSType, >]
[., node, ., getJSDocInfo, (, ), ;, }, }, return, null, ;, }, }, static, class, Ref, implements, StaticReference, <]
[;, }, }, static, class, Ref, implements, StaticReference, <, JSType, >, {, enum, Type, {, SET_FROM_GLOBAL, ,, SET_FROM_LOCAL, ,, PROTOTYPE_GET]
[;, Ref, (, NodeTraversal, t, ,, Node, node, ,, Name, name, ,, Type, type, ,, int, index, ), {, this]
[=, node, ;, this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null]
[., node, =, node, ;, this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, )]
[;, this, ., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null, ?, null]
[=, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null, ?, null, :, t, ., getInput]
[., name, =, name, ;, this, ., module, =, t, ., getInput, (, ), ==, null, ?, null, :, t]
[;, this, ., module, =, t, ., getInput, (, ), ==, null, ?, null, :, t, ., getInput, (, )]
[=, t, ., getInput, (, ), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, )]
[., module, =, t, ., getInput, (, ), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule]
[;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope]
[?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile]
[==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =, node]
[., getInput, (, ), ==, null, ?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;, this]
[?, null, :, t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile]
[:, t, ., getInput, (, ), ., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, )]
[;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope]
[., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type]
[., getInput, (, ), ., getModule, (, ), ;, this, ., source, =, node, ., getStaticSourceFile, (, ), ;, this]
[=, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope, =, t, ., getScope]
[., source, =, node, ., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope, =, t]
[;, this, ., type, =, type, ;, this, ., scope, =, t, ., getScope, (, ), ;, this, ., preOrderIndex]
[., getStaticSourceFile, (, ), ;, this, ., type, =, type, ;, this, ., scope, =, t, ., getScope, (, )]
[=, type, ;, this, ., scope, =, t, ., getScope, (, ), ;, this, ., preOrderIndex, =, index, ;, }]
[., type, =, type, ;, this, ., scope, =, t, ., getScope, (, ), ;, this, ., preOrderIndex, =, index]
[;, this, ., scope, =, t, ., getScope, (, ), ;, this, ., preOrderIndex, =, index, ;, }, private, Ref]
[=, t, ., getScope, (, ), ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Ref, original, ,]
[., scope, =, t, ., getScope, (, ), ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Ref]
[;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, )]
[., getScope, (, ), ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Ref, original, ,, Type, type]
[=, index, ;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {, this, ., node]
[., preOrderIndex, =, index, ;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {, this]
[;, }, private, Ref, (, Ref, original, ,, Type, type, ,, int, index, ), {, this, ., node, =, original]
[=, original, ., node, ;, this, ., name, =, original, ., name, ;, this, ., module, =, original, ., module]
[., node, =, original, ., node, ;, this, ., name, =, original, ., name, ;, this, ., module, =, original]
[;, this, ., name, =, original, ., name, ;, this, ., module, =, original, ., module, ;, this, ., source]
[., node, ;, this, ., name, =, original, ., name, ;, this, ., module, =, original, ., module, ;, this]
[=, original, ., name, ;, this, ., module, =, original, ., module, ;, this, ., source, =, original, ., source]
[., name, =, original, ., name, ;, this, ., module, =, original, ., module, ;, this, ., source, =, original]
[;, this, ., module, =, original, ., module, ;, this, ., source, =, original, ., source, ;, this, ., type]
[., name, ;, this, ., module, =, original, ., module, ;, this, ., source, =, original, ., source, ;, this]
[=, original, ., module, ;, this, ., source, =, original, ., source, ;, this, ., type, =, type, ;, this]
[., module, =, original, ., module, ;, this, ., source, =, original, ., source, ;, this, ., type, =, type]
[;, this, ., source, =, original, ., source, ;, this, ., type, =, type, ;, this, ., scope, =, original]
[., module, ;, this, ., source, =, original, ., source, ;, this, ., type, =, type, ;, this, ., scope]
[=, original, ., source, ;, this, ., type, =, type, ;, this, ., scope, =, original, ., scope, ;, this]
[., source, =, original, ., source, ;, this, ., type, =, type, ;, this, ., scope, =, original, ., scope]
[;, this, ., type, =, type, ;, this, ., scope, =, original, ., scope, ;, this, ., preOrderIndex, =, index]
[., source, ;, this, ., type, =, type, ;, this, ., scope, =, original, ., scope, ;, this, ., preOrderIndex]
[=, type, ;, this, ., scope, =, original, ., scope, ;, this, ., preOrderIndex, =, index, ;, }, private, Ref]
[., type, =, type, ;, this, ., scope, =, original, ., scope, ;, this, ., preOrderIndex, =, index, ;, }]
[;, this, ., scope, =, original, ., scope, ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Type]
[=, original, ., scope, ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,, int, index]
[., scope, =, original, ., scope, ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,]
[;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {, this, .]
[., scope, ;, this, ., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {]
[=, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {, this, ., type, =, type, ;]
[., preOrderIndex, =, index, ;, }, private, Ref, (, Type, type, ,, int, index, ), {, this, ., type, =]
[;, }, private, Ref, (, Type, type, ,, int, index, ), {, this, ., type, =, type, ;, this, .]
[=, type, ;, this, ., module, =, null, ;, this, ., source, =, null, ;, this, ., scope, =, null]
[., type, =, type, ;, this, ., module, =, null, ;, this, ., source, =, null, ;, this, ., scope]
[;, this, ., module, =, null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;, this]
[=, null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;, this, ., name, =, null]
[., module, =, null, ;, this, ., source, =, null, ;, this, ., scope, =, null, ;, this, ., name]
[;, this, ., source, =, null, ;, this, ., scope, =, null, ;, this, ., name, =, null, ;, this]
[=, null, ;, this, ., scope, =, null, ;, this, ., name, =, null, ;, this, ., preOrderIndex, =, index]
[., source, =, null, ;, this, ., scope, =, null, ;, this, ., name, =, null, ;, this, ., preOrderIndex]
[;, this, ., scope, =, null, ;, this, ., name, =, null, ;, this, ., preOrderIndex, =, index, ;, }]
[=, null, ;, this, ., name, =, null, ;, this, ., preOrderIndex, =, index, ;, }, @, Override, public, Node]
[., scope, =, null, ;, this, ., name, =, null, ;, this, ., preOrderIndex, =, index, ;, }, @, Override]
[;, this, ., name, =, null, ;, this, ., preOrderIndex, =, index, ;, }, @, Override, public, Node, getNode, (]
[=, null, ;, this, ., preOrderIndex, =, index, ;, }, @, Override, public, Node, getNode, (, ), {, return, node]
[., name, =, null, ;, this, ., preOrderIndex, =, index, ;, }, @, Override, public, Node, getNode, (, ), {]
[;, this, ., preOrderIndex, =, index, ;, }, @, Override, public, Node, getNode, (, ), {, return, node, ;, }]
[=, index, ;, }, @, Override, public, Node, getNode, (, ), {, return, node, ;, }, @, Override, public, StaticSourceFile]
[., preOrderIndex, =, index, ;, }, @, Override, public, Node, getNode, (, ), {, return, node, ;, }, @, Override]
[;, }, @, Override, public, Node, getNode, (, ), {, return, node, ;, }, @, Override, public, StaticSourceFile, getSourceFile, (]
[;, }, @, Override, public, StaticSourceFile, getSourceFile, (, ), {, return, source, ;, }, @, Override, public, StaticSlot, <, JSType]
[;, }, @, Override, public, StaticSlot, <, JSType, >, getSymbol, (, ), {, return, name, ;, }, JSModule, getModule, (]
[;, }, JSModule, getModule, (, ), {, return, module, ;, }, String, getSourceName, (, ), {, return, source, ==, null]
[;, }, String, getSourceName, (, ), {, return, source, ==, null, ?, "", :, source, ., getName, (, ), ;]
[;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==, Type]
[?, "", :, source, ., getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean]
[==, null, ?, "", :, source, ., getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;]
[?, "", :, source, ., getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean]
[:, source, ., getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (]
[;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {, return, type, ==, Type]
[., getName, (, ), ;, }, Ref, getTwin, (, ), {, return, twin, ;, }, boolean, isSet, (, ), {]
[;, }, boolean, isSet, (, ), {, return, type, ==, Type, ., SET_FROM_GLOBAL, ||, type, ==, Type, ., SET_FROM_LOCAL, ;]
[;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, .]
[||, type, ==, Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions]
[==, Type, ., SET_FROM_GLOBAL, ||, type, ==, Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref]
[||, type, ==, Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions]
[., SET_FROM_GLOBAL, ||, type, ==, Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, )]
[;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, .]
[==, Type, ., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument]
[;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (, a, .]
[., SET_FROM_LOCAL, ;, }, static, void, markTwins, (, Ref, a, ,, Ref, b, ), {, Preconditions, ., checkArgument, (, (]
[;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, )]
[., checkArgument, (, (, a, ., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, )]
[), ;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type]
[&&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, .]
[), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b]
[||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a]
[==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type]
[., type, ==, Type, ., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type]
[||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a]
[., ALIASING_GET, ||, b, ., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL]
[), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b]
[==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type]
[., type, ==, Type, ., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type]
[), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b]
[., ALIASING_GET, ), &&, (, a, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL]
[), ;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type]
[), ), ;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type]
[||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b, ., twin]
[||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a]
[||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type]
[==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL]
[., type, ==, Type, ., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type]
[||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type]
[., SET_FROM_GLOBAL, ||, a, ., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b]
[||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a]
[==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL]
[., type, ==, Type, ., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type]
[||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a]
[., SET_FROM_LOCAL, ||, b, ., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), )]
[||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b, ., twin]
[==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b]
[., type, ==, Type, ., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin]
[||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b, ., twin]
[., SET_FROM_GLOBAL, ||, b, ., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b]
[), ), ;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type]
[==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }]
[., type, ==, Type, ., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b, ., twin, =, a]
[), ), ;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type]
[., SET_FROM_LOCAL, ), ), ;, a, ., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify]
[=, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref]
[., twin, =, b, ;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return]
[;, b, ., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (, this]
[=, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (, this, ,, type, ,, this]
[., twin, =, a, ;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (, this, ,, type]
[;, }, Ref, cloneAndReclassify, (, Type, type, ), {, return, new, Ref, (, this, ,, type, ,, this, ., preOrderIndex]
[;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref, (, type, ,, -, 1, ), ;]
[,, type, ,, this, ., preOrderIndex, ), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref]
[,, this, ., preOrderIndex, ), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref, (, type]
[), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref, (, type, ,, -, 1, )]
[., preOrderIndex, ), ;, }, static, Ref, createRefForTesting, (, Type, type, ), {, return, new, Ref, (, type, ,, -]
[;, }, }, static, class, Tracker, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, PrintStream, stream, ;, private]
[,, -, 1, ), ;, }, }, static, class, Tracker, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final]
[), ;, }, }, static, class, Tracker, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, PrintStream, stream, ;]
[), ;, }, }, static, class, Tracker, implements, CompilerPass, {, private, final, AbstractCompiler, compiler, ;, private, final, PrintStream, stream, ;]
[;, Tracker, (, AbstractCompiler, compiler, ,, PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {, this, ., compiler, =]
[., of, (, ), ;, Tracker, (, AbstractCompiler, compiler, ,, PrintStream, stream, ,, Predicate, <, String, >, isInterestingSymbol, ), {]
[=, compiler, ;, this, ., stream, =, stream, ;, this, ., isInterestingSymbol, =, isInterestingSymbol, ;, }, @, Override, public, void]
[., compiler, =, compiler, ;, this, ., stream, =, stream, ;, this, ., isInterestingSymbol, =, isInterestingSymbol, ;, }, @, Override]
[;, this, ., stream, =, stream, ;, this, ., isInterestingSymbol, =, isInterestingSymbol, ;, }, @, Override, public, void, process, (]
[=, stream, ;, this, ., isInterestingSymbol, =, isInterestingSymbol, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node]
[., stream, =, stream, ;, this, ., isInterestingSymbol, =, isInterestingSymbol, ;, }, @, Override, public, void, process, (, Node, externs]
[;, this, ., isInterestingSymbol, =, isInterestingSymbol, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[=, isInterestingSymbol, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, =]
[., isInterestingSymbol, =, isInterestingSymbol, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, GlobalNamespace, namespace, =, new, GlobalNamespace]
[;, Set, <, String, >, currentSymbols, =, Sets, ., newTreeSet, (, ), ;, for, (, String, name, :, namespace, .]
[,, externs, ,, root, ), ;, Set, <, String, >, currentSymbols, =, Sets, ., newTreeSet, (, ), ;, for, (]
[,, root, ), ;, Set, <, String, >, currentSymbols, =, Sets, ., newTreeSet, (, ), ;, for, (, String, name]
[), ;, Set, <, String, >, currentSymbols, =, Sets, ., newTreeSet, (, ), ;, for, (, String, name, :, namespace]
[;, for, (, String, name, :, namespace, ., getNameIndex, (, ), ., keySet, (, ), ), {, if, (, isInterestingSymbol]
[., newTreeSet, (, ), ;, for, (, String, name, :, namespace, ., getNameIndex, (, ), ., keySet, (, ), )]
[), {, if, (, isInterestingSymbol, ., apply, (, name, ), ), {, currentSymbols, ., add, (, name, ), ;, }]
[., keySet, (, ), ), {, if, (, isInterestingSymbol, ., apply, (, name, ), ), {, currentSymbols, ., add, (]
[., getNameIndex, (, ), ., keySet, (, ), ), {, if, (, isInterestingSymbol, ., apply, (, name, ), ), {]
[), {, currentSymbols, ., add, (, name, ), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;]
[., apply, (, name, ), ), {, currentSymbols, ., add, (, name, ), ;, }, }, String, passName, =, compiler]
[), ), {, currentSymbols, ., add, (, name, ), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, )]
[;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (, passName, ==, null, ), {, passName]
[., add, (, name, ), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (, passName]
[), ;, }, }, String, passName, =, compiler, ., getLastPassName, (, ), ;, if, (, passName, ==, null, ), {]
[;, if, (, passName, ==, null, ), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, )]
[., getLastPassName, (, ), ;, if, (, passName, ==, null, ), {, passName, =, "[Unknown pass]", ;, }, for, (, String]
[), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, .]
[==, null, ), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !]
[), {, passName, =, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, .]
[=, "[Unknown pass]", ;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, ., contains, (, sym]
[;, }, for, (, String, sym, :, currentSymbols, ), {, if, (, !, previousSymbolsInTree, ., contains, (, sym, ), )]
[), {, if, (, !, previousSymbolsInTree, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format]
[), {, stream, ., println, (, String, ., format, (, "%s: Added by %s", ,, sym, ,, passName, ), ), ;, }, }]
[), {, stream, ., println, (, String, ., format, (, "%s: Added by %s", ,, sym, ,, passName, ), ), ;, }, }]
[., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (, "%s: Added by %s", ,, sym, ,, passName]
[), ), {, stream, ., println, (, String, ., format, (, "%s: Added by %s", ,, sym, ,, passName, ), ), ;, }]
[;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (, sym, )]
[., println, (, String, ., format, (, "%s: Added by %s", ,, sym, ,, passName, ), ), ;, }, }, for, (, String]
[), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (, sym]
[., format, (, "%s: Added by %s", ,, sym, ,, passName, ), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, )]
[,, sym, ,, passName, ), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !]
[,, passName, ), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, .]
[), ), ;, }, }, for, (, String, sym, :, previousSymbolsInTree, ), {, if, (, !, currentSymbols, ., contains, (]
[), {, if, (, !, currentSymbols, ., contains, (, sym, ), ), {, stream, ., println, (, String, ., format]
[), {, stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), ), ;, }, }]
[), {, stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), ), ;, }, }]
[., contains, (, sym, ), ), {, stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName]
[), ), {, stream, ., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), ), ;, }]
[;, }, }, previousSymbolsInTree, =, currentSymbols, ;, }, }, }]
[., println, (, String, ., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), ), ;, }, }, previousSymbolsInTree, =, currentSymbols]
[), ;, }, }, previousSymbolsInTree, =, currentSymbols, ;, }, }, }]
[., format, (, "%s: Removed by %s", ,, sym, ,, passName, ), ), ;, }, }, previousSymbolsInTree, =, currentSymbols, ;, }, }, }]
[,, sym, ,, passName, ), ), ;, }, }, previousSymbolsInTree, =, currentSymbols, ;, }, }, }]
[,, passName, ), ), ;, }, }, previousSymbolsInTree, =, currentSymbols, ;, }, }, }]
[), ), ;, }, }, previousSymbolsInTree, =, currentSymbols, ;, }, }, }]
[=, currentSymbols, ;, }, }, }]
[;, }, }, }]
