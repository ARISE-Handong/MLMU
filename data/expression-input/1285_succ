[=, sourceFile, ;, this, ., doSanityChecks, =, doSanityChecks, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., sourceFile, =, sourceFile, ;, this, ., doSanityChecks, =, doSanityChecks, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, this, ., doSanityChecks, =, doSanityChecks, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[=, doSanityChecks, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., doSanityChecks, =, doSanityChecks, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[), {, Preconditions, ., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), ), ), ;, }, switch]
[&&, sourceFile, !=, null, ), {, Preconditions, ., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), )]
[), {, Preconditions, ., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), ), ), ;, }, switch]
[!=, null, ), {, Preconditions, ., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), ), ), ;]
[), {, Preconditions, ., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), ), ), ;, }, switch]
[;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =, n]
[., checkState, (, sourceFile, ., equals, (, n, ., getSourceFileName, (, ), ), ), ;, }, switch, (, n, .]
[), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =]
[., equals, (, n, ., getSourceFileName, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), )]
[), ), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode]
[., getSourceFileName, (, ), ), ), ;, }, switch, (, n, ., getType, (, ), ), {, case, Token, .]
[), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getLastChild, (, ), ;, setOriginalName, (, n, ,]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =, n, ., getLastChild, (, ), ;]
[:, Node, propNode, =, n, ., getLastChild, (, ), ;, setOriginalName, (, n, ,, propNode, ., getString, (, ), )]
[., GETPROP, :, Node, propNode, =, n, ., getLastChild, (, ), ;, setOriginalName, (, n, ,, propNode, ., getString, (]
[;, setOriginalName, (, n, ,, propNode, ., getString, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, String]
[., getLastChild, (, ), ;, setOriginalName, (, n, ,, propNode, ., getString, (, ), ), ;, break, ;, case, Token]
[;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (]
[,, propNode, ., getString, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, .]
[), ;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if]
[., getString, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (]
[:, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (, functionName, !=, null, ), {, setOriginalName, (]
[., FUNCTION, :, String, functionName, =, NodeUtil, ., getNearestFunctionName, (, n, ), ;, if, (, functionName, !=, null, ), {]
[;, if, (, functionName, !=, null, ), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token]
[., getNearestFunctionName, (, n, ), ;, if, (, functionName, !=, null, ), {, setOriginalName, (, n, ,, functionName, ), ;]
[), ;, if, (, functionName, !=, null, ), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case]
[), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (, n]
[!=, null, ), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName]
[), {, setOriginalName, (, n, ,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (, n]
[;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (, n, ,, n, ., getString, (, ), ), ;]
[,, functionName, ), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (, n, ,, n, ., getString, (]
[), ;, }, break, ;, case, Token, ., NAME, :, setOriginalName, (, n, ,, n, ., getString, (, ), )]
[:, setOriginalName, (, n, ,, n, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for]
[., NAME, :, setOriginalName, (, n, ,, n, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT]
[;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key]
[,, n, ., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[., getString, (, ), ), ;, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, .]
[:, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, .]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[!=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, )]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[=, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, setOriginalName, (]
[), {, if, (, !, key, ., isQuotedString, (, ), ), {, setOriginalName, (, key, ,, key, ., getString, (]
[., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, setOriginalName, (, key, ,]
[), {, setOriginalName, (, key, ,, key, ., getString, (, ), ), ;, }, }, break, ;, }, }, void]
[), {, setOriginalName, (, key, ,, key, ., getString, (, ), ), ;, }, }, break, ;, }, }, void]
[., isQuotedString, (, ), ), {, setOriginalName, (, key, ,, key, ., getString, (, ), ), ;, }, }, break]
[;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (, !]
[,, key, ., getString, (, ), ), ;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,]
[), ;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,, String, name, ), {, if, (]
[., getString, (, ), ), ;, }, }, break, ;, }, }, void, setOriginalName, (, Node, n, ,, String, name]
[), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[&&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP]
[&&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP]
[., isEmpty, (, ), &&, n, ., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp]
[), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[==, null, ), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[., getProp, (, Node, ., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name]
[), ==, null, ), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[., ORIGINALNAME_PROP, ), ==, null, ), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }]
[), {, n, ., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[;, }, }, }]
[., putProp, (, Node, ., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[,, name, ), ;, }, }, }]
[., ORIGINALNAME_PROP, ,, name, ), ;, }, }, }]
[), ;, }, }, }]
