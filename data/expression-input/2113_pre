[;, @, Deprecated, public, class, PowellOptimizer, extends, BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, static, final, double, MIN_RELATIVE_TOLERANCE, =]
[;, @, Deprecated, public, class, PowellOptimizer, extends, BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, static, final, double, MIN_RELATIVE_TOLERANCE, =]
[Deprecated, public, class, PowellOptimizer, extends, BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *]
[Deprecated, public, class, PowellOptimizer, extends, BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *]
[extends, BaseAbstractMultivariateOptimizer, <, MultivariateFunction, >, implements, MultivariateOptimizer, {, private, static, final, double, MIN_RELATIVE_TOLERANCE, =, 2, *, FastMath, ., ulp, (]
[line, ;, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (]
[public, PowellOptimizer, (, double, rel, ,, double, abs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, rel, ,]
[(, double, rel, ,, double, abs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, rel, ,, abs, ,]
[(, double, rel, ,, double, abs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, rel, ,, abs, ,]
[double, abs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, rel, ,, abs, ,, FastMath, ., sqrt, (]
[ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, rel, ,, abs, ,, FastMath, ., sqrt, (, rel, ), ,]
[ConvergenceChecker, <, PointValuePair, >, checker, ), {, this, (, rel, ,, abs, ,, FastMath, ., sqrt, (, rel, ), ,]
[checker, ), {, this, (, rel, ,, abs, ,, FastMath, ., sqrt, (, rel, ), ,, FastMath, ., sqrt, (]
[this, (, rel, ,, abs, ,, FastMath, ., sqrt, (, rel, ), ,, FastMath, ., sqrt, (, abs, ), ,]
[rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, super, (]
[double, lineRel, ,, double, lineAbs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (]
[double, lineRel, ,, double, lineAbs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (]
[,, double, lineAbs, ,, ConvergenceChecker, <, PointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (, rel, <]
[ConvergenceChecker, <, PointValuePair, >, checker, ), {, super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw]
[>, checker, ), {, super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (]
[), {, super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,]
[super, (, checker, ), ;, if, (, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,]
[(, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (]
[(, rel, <, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (]
[<, MIN_RELATIVE_TOLERANCE, ), {, throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=]
[throw, new, NumberIsTooSmallException, (, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw]
[(, rel, ,, MIN_RELATIVE_TOLERANCE, ,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[,, true, ), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }]
[), ;, }, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =]
[}, if, (, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;]
[(, abs, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;]
[), {, throw, new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, line, =]
[new, NotStrictlyPositiveException, (, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, line, =, new, LineSearch, (]
[(, abs, ), ;, }, relativeThreshold, =, rel, ;, absoluteThreshold, =, abs, ;, line, =, new, LineSearch, (, lineRel, ,]
[LineSearch, (, lineRel, ,, lineAbs, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ), {, this, (]
[lineRel, ,, lineAbs, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,]
[lineAbs, ), ;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ), {, this, (, rel, ,, abs, ,]
[;, }, public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ), {, this, (]
[public, PowellOptimizer, (, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ), {, this, (, rel, ,]
[(, double, rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ), {, this, (, rel, ,, abs, ,]
[rel, ,, double, abs, ,, double, lineRel, ,, double, lineAbs, ), {, this, (, rel, ,, abs, ,, lineRel, ,]
[double, abs, ,, double, lineRel, ,, double, lineAbs, ), {, this, (, rel, ,, abs, ,, lineRel, ,, lineAbs, ,]
[lineRel, ,, lineAbs, ,, null, ), ;, }, @, Override, protected, PointValuePair, doOptimize, (, ), {, final, GoalType, goal, =]
[protected, PointValuePair, doOptimize, (, ), {, final, GoalType, goal, =, getGoalType, (, ), ;, final, double, [, ], guess, =]
[goal, =, getGoalType, (, ), ;, final, double, [, ], guess, =, getStartPoint, (, ), ;, final, int, n, =]
[goal, =, getGoalType, (, ), ;, final, double, [, ], guess, =, getStartPoint, (, ), ;, final, int, n, =]
[getStartPoint, (, ), ;, final, int, n, =, guess, ., length, ;, final, double, [, ], [, ], direc, =]
[;, final, int, n, =, guess, ., length, ;, final, double, [, ], [, ], direc, =, new, double, []
[n, =, guess, ., length, ;, final, double, [, ], [, ], direc, =, new, double, [, n, ], []
[[, ], [, ], direc, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =]
[[, ], direc, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[[, ], direc, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;]
[direc, =, new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[new, double, [, n, ], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[], [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, direc, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, direc, [, i, ], []
[i, =, 0, ;, i, <, n, ;, i, ++, ), {, direc, [, i, ], [, i, ], =]
[), {, direc, [, i, ], [, i, ], =, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =]
[=, 1, ;, }, final, ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, [, ], x, =]
[ConvergenceChecker, <, PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, [, ], x, =, guess, ;, double, fVal, =]
[PointValuePair, >, checker, =, getConvergenceChecker, (, ), ;, double, [, ], x, =, guess, ;, double, fVal, =, computeObjectiveValue, (]
[double, [, ], x, =, guess, ;, double, fVal, =, computeObjectiveValue, (, x, ), ;, double, [, ], x1, =]
[double, [, ], x, =, guess, ;, double, fVal, =, computeObjectiveValue, (, x, ), ;, double, [, ], x1, =]
[=, computeObjectiveValue, (, x, ), ;, double, [, ], x1, =, x, ., clone, (, ), ;, int, iter, =]
[), ;, double, [, ], x1, =, x, ., clone, (, ), ;, int, iter, =, 0, ;, while, (]
[[, ], x1, =, x, ., clone, (, ), ;, int, iter, =, 0, ;, while, (, true, ), {]
[], x1, =, x, ., clone, (, ), ;, int, iter, =, 0, ;, while, (, true, ), {, ++]
[clone, (, ), ;, int, iter, =, 0, ;, while, (, true, ), {, ++, iter, ;, double, fX, =]
[iter, =, 0, ;, while, (, true, ), {, ++, iter, ;, double, fX, =, fVal, ;, double, fX2, =]
[(, true, ), {, ++, iter, ;, double, fX, =, fVal, ;, double, fX2, =, 0, ;, double, delta, =]
[iter, ;, double, fX, =, fVal, ;, double, fX2, =, 0, ;, double, delta, =, 0, ;, int, bigInd, =]
[fVal, ;, double, fX2, =, 0, ;, double, delta, =, 0, ;, int, bigInd, =, 0, ;, double, alphaMin, =]
[double, delta, =, 0, ;, int, bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i, =]
[=, 0, ;, int, bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i, =, 0, ;]
[=, 0, ;, int, bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i, =, 0, ;]
[;, int, bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[bigInd, =, 0, ;, double, alphaMin, =, 0, ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ], d, =]
[(, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ], d, =]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (]
[0, ;, i, <, n, ;, i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (]
[i, <, n, ;, i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, []
[i, ++, ), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, [, i, ], ), ;]
[), {, final, double, [, ], d, =, MathArrays, ., copyOf, (, direc, [, i, ], ), ;, fX2, =]
[d, =, MathArrays, ., copyOf, (, direc, [, i, ], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =]
[d, =, MathArrays, ., copyOf, (, direc, [, i, ], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =]
[copyOf, (, direc, [, i, ], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (]
[direc, [, i, ], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,]
[], ), ;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;]
[;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =]
[;, fX2, =, fVal, ;, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =]
[UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;]
[=, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =]
[=, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =]
[getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =]
[), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (]
[alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,]
[optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,]
[(, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;]
[;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =]
[;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =]
[double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, []
[result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (]
[result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (]
[=, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (, (]
[=, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (, (]
[(, x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (, (, fX2, -]
[d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >]
[), ;, x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {]
[x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =]
[x, =, result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =]
[result, [, 0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =, fX2, -]
[0, ], ;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =, fX2, -, fVal, ;]
[;, if, (, (, fX2, -, fVal, ), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =]
[), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =]
[), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =]
[), >, delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =]
[delta, ), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *]
[), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (]
[), {, delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (]
[delta, =, fX2, -, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -]
[-, fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=]
[fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (]
[fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (]
[fVal, ;, bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (]
[bigInd, =, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *]
[=, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (]
[=, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (]
[=, i, ;, }, }, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (]
[}, boolean, stop, =, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (, FastMath, ., abs, (]
[=, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +]
[=, 2, *, (, fX, -, fVal, ), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +]
[fX, -, fVal, ), <=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (]
[<=, (, relativeThreshold, *, (, FastMath, ., abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +]
[abs, (, fX, ), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =]
[), +, FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (]
[FastMath, ., abs, (, fVal, ), ), +, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,]
[+, absoluteThreshold, ), ;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =]
[;, final, PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (]
[PointValuePair, previous, =, new, PointValuePair, (, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,]
[(, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (]
[(, x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (]
[x1, ,, fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !]
[fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&]
[fX, ), ;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&]
[;, final, PointValuePair, current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&, checker, !=]
[current, =, new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&, checker, !=, null, ), {]
[new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&, checker, !=, null, ), {, stop, =]
[new, PointValuePair, (, x, ,, fVal, ), ;, if, (, !, stop, &&, checker, !=, null, ), {, stop, =]
[,, fVal, ), ;, if, (, !, stop, &&, checker, !=, null, ), {, stop, =, checker, ., converged, (]
[), ;, if, (, !, stop, &&, checker, !=, null, ), {, stop, =, checker, ., converged, (, iter, ,]
[if, (, !, stop, &&, checker, !=, null, ), {, stop, =, checker, ., converged, (, iter, ,, previous, ,]
[!=, null, ), {, stop, =, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (]
[=, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, ), {, if, (]
[=, checker, ., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, ), {, if, (]
[., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, ), {, if, (, goal, ==]
[., converged, (, iter, ,, previous, ,, current, ), ;, }, if, (, stop, ), {, if, (, goal, ==]
[,, current, ), ;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return]
[,, current, ), ;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return]
[current, ), ;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (]
[current, ), ;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (]
[;, }, if, (, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (, fVal, <]
[(, stop, ), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?]
[), {, if, (, goal, ==, GoalType, ., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :]
[GoalType, ., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return]
[GoalType, ., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return]
[., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return, (]
[., MINIMIZE, ), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return, (]
[), {, return, (, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return, (, fVal, >]
[(, fVal, <, fX, ), ?, current, :, previous, ;, }, else, {, return, (, fVal, >, fX, ), ?]
[<, fX, ), ?, current, :, previous, ;, }, else, {, return, (, fVal, >, fX, ), ?, current, :]
[{, return, (, fVal, >, fX, ), ?, current, :, previous, ;, }, }, final, double, [, ], d, =]
[fVal, >, fX, ), ?, current, :, previous, ;, }, }, final, double, [, ], d, =, new, double, []
[}, }, final, double, [, ], d, =, new, double, [, n, ], ;, final, double, [, ], x2, =]
[double, [, ], d, =, new, double, [, n, ], ;, final, double, [, ], x2, =, new, double, []
[n, ], ;, final, double, [, ], x2, =, new, double, [, n, ], ;, for, (, int, i, =]
[;, final, double, [, ], x2, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], x2, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], x2, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], x2, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], x2, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, d, [, i, ], =, x, []
[0, ;, i, <, n, ;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -]
[0, ;, i, <, n, ;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -]
[i, <, n, ;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -, x1, []
[;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;]
[;, i, ++, ), {, d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;]
[++, ), {, d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, []
[d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =]
[d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =]
[d, [, i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =]
[i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *]
[i, ], =, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *]
[=, x, [, i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, []
[i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, [, i, ], -]
[i, ], -, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, [, i, ], -]
[-, x1, [, i, ], ;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1, []
[], ;, x2, [, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }]
[x2, [, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }, x1, =]
[x2, [, i, ], =, 2, *, x, [, i, ], -, x1, [, i, ], ;, }, x1, =]
[*, x, [, i, ], -, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;]
[[, i, ], -, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =]
[], -, x1, [, i, ], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (]
[], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (]
[], ;, }, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (]
[}, x1, =, x, ., clone, (, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >]
[(, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =]
[(, ), ;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =]
[;, fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *]
[fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (]
[fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (]
[fX2, =, computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (]
[computeObjectiveValue, (, x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (, fX, +]
[x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (, fX, +, fX2, -]
[x2, ), ;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (, fX, +, fX2, -]
[;, if, (, fX, >, fX2, ), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *]
[), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =]
[), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =]
[), {, double, t, =, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =]
[double, t, =, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -]
[=, 2, *, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -]
[*, (, fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;]
[fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=]
[fX, +, fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=]
[fX2, -, 2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *]
[2, *, fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;]
[fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =]
[fVal, ), ;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =]
[;, double, temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -]
[temp, =, fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;]
[fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=]
[fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=]
[fX, -, fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=]
[fVal, -, delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *]
[delta, ;, t, *=, temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *]
[temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (]
[temp, *, temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (]
[temp, ;, temp, =, fX, -, fX2, ;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <]
[;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =]
[;, t, -=, delta, *, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =]
[*, temp, *, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (]
[*, temp, ;, if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,]
[if, (, t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;]
[t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =]
[t, <, 0.0, ), {, final, UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =]
[UnivariatePointValuePair, optimum, =, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;]
[=, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =]
[=, line, ., search, (, x, ,, d, ), ;, fVal, =, optimum, ., getValue, (, ), ;, alphaMin, =]
[getValue, (, ), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =]
[), ;, alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (]
[alphaMin, =, optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,]
[optimum, ., getPoint, (, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,]
[(, ), ;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;]
[;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =]
[;, final, double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =]
[double, [, ], [, ], result, =, newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, []
[newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =]
[newPointAndDirection, (, x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =]
[x, ,, d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -]
[d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;]
[d, ,, alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;]
[alphaMin, ), ;, x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, []
[x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =]
[x, =, result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =]
[result, [, 0, ], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc, []
[], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;]
[], ;, final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;]
[final, int, lastInd, =, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc, []
[=, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =]
[=, n, -, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =]
[-, 1, ;, direc, [, bigInd, ], =, direc, [, lastInd, ], ;, direc, [, lastInd, ], =, result, []
[newPointAndDirection, (, double, [, ], p, ,, double, [, ], d, ,, double, optimum, ), {, final, int, n, =]
[newPointAndDirection, (, double, [, ], p, ,, double, [, ], d, ,, double, optimum, ), {, final, int, n, =]
[d, ,, double, optimum, ), {, final, int, n, =, p, ., length, ;, final, double, [, ], nP, =]
[optimum, ), {, final, int, n, =, p, ., length, ;, final, double, [, ], nP, =, new, double, []
[length, ;, final, double, [, ], nP, =, new, double, [, n, ], ;, final, double, [, ], nD, =]
[double, [, ], nP, =, new, double, [, n, ], ;, final, double, [, ], nD, =, new, double, []
[n, ], ;, final, double, [, ], nD, =, new, double, [, n, ], ;, for, (, int, i, =]
[;, final, double, [, ], nD, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[;, final, double, [, ], nD, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], nD, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], nD, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], nD, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, nD, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, nD, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, nD, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, nD, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, nD, [, i, ], =, d, []
[0, ;, i, <, n, ;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *]
[i, <, n, ;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;]
[i, <, n, ;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;]
[n, ;, i, ++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, []
[++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =]
[++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =]
[++, ), {, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =]
[{, nD, [, i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p, []
[i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p, [, i, ], +]
[i, ], =, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p, [, i, ], +]
[=, d, [, i, ], *, optimum, ;, nP, [, i, ], =, p, [, i, ], +, nD, []
[=, p, [, i, ], +, nD, [, i, ], ;, }, final, double, [, ], [, ], result, =]
[i, ], +, nD, [, i, ], ;, }, final, double, [, ], [, ], result, =, new, double, []
[i, ], ;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ], [, ], ;]
[i, ], ;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ], [, ], ;]
[;, }, final, double, [, ], [, ], result, =, new, double, [, 2, ], [, ], ;, result, []
[double, [, ], [, ], result, =, new, double, [, 2, ], [, ], ;, result, [, 0, ], =]
[], [, ], result, =, new, double, [, 2, ], [, ], ;, result, [, 0, ], =, nP, ;]
[], [, ], result, =, new, double, [, 2, ], [, ], ;, result, [, 0, ], =, nP, ;]
[], result, =, new, double, [, 2, ], [, ], ;, result, [, 0, ], =, nP, ;, result, []
[new, double, [, 2, ], [, ], ;, result, [, 0, ], =, nP, ;, result, [, 1, ], =]
[2, ], [, ], ;, result, [, 0, ], =, nP, ;, result, [, 1, ], =, nD, ;, return]
[], =, nD, ;, return, result, ;, }, private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double, REL_TOL_UNUSED, =]
[private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double, REL_TOL_UNUSED, =, 1e-15, ;, private, static, final, double, ABS_TOL_UNUSED, =]
[private, class, LineSearch, extends, BrentOptimizer, {, private, static, final, double, REL_TOL_UNUSED, =, 1e-15, ;, private, static, final, double, ABS_TOL_UNUSED, =]
[double, REL_TOL_UNUSED, =, 1e-15, ;, private, static, final, double, ABS_TOL_UNUSED, =, Double, ., MIN_VALUE, ;, private, final, BracketFinder, bracket, =]
[final, BracketFinder, bracket, =, new, BracketFinder, (, ), ;, LineSearch, (, double, rel, ,, double, abs, ), {, super, (]
[bracket, =, new, BracketFinder, (, ), ;, LineSearch, (, double, rel, ,, double, abs, ), {, super, (, REL_TOL_UNUSED, ,]
[new, BracketFinder, (, ), ;, LineSearch, (, double, rel, ,, double, abs, ), {, super, (, REL_TOL_UNUSED, ,, ABS_TOL_UNUSED, ,]
[), ;, LineSearch, (, double, rel, ,, double, abs, ), {, super, (, REL_TOL_UNUSED, ,, ABS_TOL_UNUSED, ,, new, SimpleUnivariateValueChecker, (]
[LineSearch, (, double, rel, ,, double, abs, ), {, super, (, REL_TOL_UNUSED, ,, ABS_TOL_UNUSED, ,, new, SimpleUnivariateValueChecker, (, rel, ,]
[UnivariatePointValuePair, search, (, final, double, [, ], p, ,, final, double, [, ], d, ), {, final, int, n, =]
[UnivariatePointValuePair, search, (, final, double, [, ], p, ,, final, double, [, ], d, ), {, final, int, n, =]
[,, final, double, [, ], d, ), {, final, int, n, =, p, ., length, ;, final, UnivariateFunction, f, =]
[=, new, UnivariateFunction, (, ), {, public, double, value, (, double, alpha, ), {, final, double, [, ], x, =]
[(, ), {, public, double, value, (, double, alpha, ), {, final, double, [, ], x, =, new, double, []
[alpha, ), {, final, double, [, ], x, =, new, double, [, n, ], ;, for, (, int, i, =]
[{, final, double, [, ], x, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[{, final, double, [, ], x, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;]
[double, [, ], x, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <]
[], x, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[], x, =, new, double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[double, [, n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {]
[n, ], ;, for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, []
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ], =]
[for, (, int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ], =]
[int, i, =, 0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ], =, p, []
[0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +]
[0, ;, i, <, n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +]
[i, <, n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *]
[i, <, n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *]
[n, ;, i, ++, ), {, x, [, i, ], =, p, [, i, ], +, alpha, *, d, []
[i, ], =, p, [, i, ], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =]
[i, ], =, p, [, i, ], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =]
[], +, alpha, *, d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (]
[d, [, i, ], ;, }, final, double, obj, =, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return]
[=, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj, ;, }, }, ;, final, GoalType, goal, =]
[=, PowellOptimizer, ., this, ., computeObjectiveValue, (, x, ), ;, return, obj, ;, }, }, ;, final, GoalType, goal, =]
[), ;, return, obj, ;, }, }, ;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;]
[), ;, return, obj, ;, }, }, ;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;]
[;, }, }, ;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;, bracket, ., search, (]
[}, ;, final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;, bracket, ., search, (, f, ,]
[final, GoalType, goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;, bracket, ., search, (, f, ,, goal, ,]
[goal, =, PowellOptimizer, ., this, ., getGoalType, (, ), ;, bracket, ., search, (, f, ,, goal, ,, 0, ,]
[this, ., getGoalType, (, ), ;, bracket, ., search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return]
[getGoalType, (, ), ;, bracket, ., search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (]
[getGoalType, (, ), ;, bracket, ., search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (]
[bracket, ., search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,]
[search, (, f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,]
[f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,]
[f, ,, goal, ,, 0, ,, 1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,]
[1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,]
[1, ), ;, return, optimize, (, Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,]
[Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,, bracket, ., getHi, (, ), ,]
[Integer, ., MAX_VALUE, ,, f, ,, goal, ,, bracket, ., getLo, (, ), ,, bracket, ., getHi, (, ), ,]
