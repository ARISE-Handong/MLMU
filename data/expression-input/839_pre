[., jfree, ., data, ., Range, ;, public, class, ShortTextTitle, extends, TextTitle, {, public, ShortTextTitle, (, String, text, ), {]
[., data, ., Range, ;, public, class, ShortTextTitle, extends, TextTitle, {, public, ShortTextTitle, (, String, text, ), {, setText, (]
[setText, (, text, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =]
[text, ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (]
[arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =]
[arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =]
[RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =]
[getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (]
[getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (]
[), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==]
[), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==]
[getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==]
[{, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[}, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (]
[LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,]
[LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,]
[NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (]
[NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (]
[{, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==]
[{, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==]
[g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =]
[getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (]
[), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,]
[), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,]
[(, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (]
[(, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (]
[,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==]
[,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==]
[,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[getHeightRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[}, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (]
[LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,]
[LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,]
[NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (]
[NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (]
[{, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==]
[{, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==]
[,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (]
[LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=]
[FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||]
[FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||]
[FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||, contentSize, ., height, <=]
[), ;, }, }, if, (, contentSize, ., width, <=, 0.0, ||, contentSize, ., height, <=, 0.0, ), {, return]
[}, if, (, contentSize, ., width, <=, 0.0, ||, contentSize, ., height, <=, 0.0, ), {, return, new, Size2D, (]
[(, contentSize, ., width, <=, 0.0, ||, contentSize, ., height, <=, 0.0, ), {, return, new, Size2D, (, 0.0, ,]
[contentSize, ., height, <=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return]
[<=, 0.0, ), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new, Size2D, (]
[), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (]
[), {, return, new, Size2D, (, 0.0, ,, 0.0, ), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (]
[,, 0.0, ), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,]
[), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, calculateTotalHeight, (]
[), ;, }, else, {, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, calculateTotalHeight, (]
[., getHeight, (, ), ), ), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =]
[), ), ), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (]
[), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,]
[), ;, }, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,]
[arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return]
[Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return, arrangeRR, (]
[), {, Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return, arrangeRR, (, g2, ,]
[Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return, arrangeRR, (, g2, ,, max, ,]
[max, ,, max, ), ;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =]
[max, ), ;, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (]
[Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (]
[Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (]
[g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (, widthRange, ., contains, (]
[g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (, widthRange, ., contains, (]
[arrangeNN, (, g2, ), ;, if, (, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return]
[(, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =]
[(, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =]
[(, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =, widthRange, ., constrain, (]
[(, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =, widthRange, ., constrain, (]
[{, return, s, ;, }, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;, return]
[s, ;, }, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;, return, arrangeFN, (]
[}, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;, return, arrangeFN, (, g2, ,]
[return, arrangeFN, (, g2, ,, ww, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {]
[return, arrangeFN, (, g2, ,, ww, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {]
[,, ww, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, g2, ., setFont, (]
[(, Graphics2D, g2, ,, double, w, ), {, g2, ., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =]
[(, Graphics2D, g2, ,, double, w, ), {, g2, ., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =]
[double, w, ), {, g2, ., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =]
[getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,]
[getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=]
[(, ), ,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return]
[g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return, new, Size2D, (]
[fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return, new, Size2D, (, w, ,]
[fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, w, ), {, return, new, Size2D, (, w, ,]
[w, ), {, return, new, Size2D, (, w, ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return]
[return, new, Size2D, (, w, ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (]
[Size2D, (, w, ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (, 0.0, ,]
[,, 0.0, ), ;, }, }, protected, Size2D, arrangeRR, (, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {]
[,, 0.0, ), ;, }, }, protected, Size2D, arrangeRR, (, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {]
[}, }, protected, Size2D, arrangeRR, (, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {, g2, ., setFont, (]
[,, Range, widthRange, ,, Range, heightRange, ), {, g2, ., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =]
[,, Range, widthRange, ,, Range, heightRange, ), {, g2, ., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =]
[Range, heightRange, ), {, g2, ., setFont, (, getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =]
[getFont, (, ), ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (]
[g2, ., getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,]
[getFontMetrics, (, getFont, (, ), ), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[), ;, Rectangle2D, bounds, =, TextUtilities, ., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=]
[., getTextBounds, (, getText, (, ), ,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=]
[,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&]
[,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&]
[,, g2, ,, fm, ), ;, if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&]
[if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&, bounds, ., getHeight, (, ), <=]
[if, (, bounds, ., getWidth, (, ), <=, widthRange, ., getUpperBound, (, ), &&, bounds, ., getHeight, (, ), <=]
[widthRange, ., getUpperBound, (, ), &&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {, return]
[(, ), &&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (]
[(, ), &&, bounds, ., getHeight, (, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (]
[(, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (, bounds, ., getWidth, (, ), ,]
[(, ), <=, heightRange, ., getUpperBound, (, ), ), {, return, new, Size2D, (, bounds, ., getWidth, (, ), ,]
[new, Size2D, (, bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return]
[bounds, ., getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (]
[getWidth, (, ), ,, bounds, ., getHeight, (, ), ), ;, }, else, {, return, new, Size2D, (, 0.0, ,]
[), ;, }, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (]
[), ;, }, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (]
[Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (, area, ., isEmpty, (, ), ), {, return]
[Rectangle2D, area, ,, Object, params, ), {, if, (, area, ., isEmpty, (, ), ), {, return, null, ;, }]
[,, Object, params, ), {, if, (, area, ., isEmpty, (, ), ), {, return, null, ;, }, area, =]
[params, ), {, if, (, area, ., isEmpty, (, ), ), {, return, null, ;, }, area, =, trimMargin, (]
[if, (, area, ., isEmpty, (, ), ), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;]
[area, ., isEmpty, (, ), ), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (]
[isEmpty, (, ), ), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,]
[), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;]
[return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, area, =]
[;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (]
[=, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;]
[(, area, ), ;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;, area, =]
[), ;, drawBorder, (, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (]
[(, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (, area, ), ;]
[(, g2, ,, area, ), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (, area, ), ;]
[), ;, area, =, trimBorder, (, area, ), ;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (]
[(, area, ), ;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont, (, ), ), ;]
[(, area, ), ;, area, =, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont, (, ), ), ;]
[area, =, trimPadding, (, area, ), ;, g2, ., setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (]
[), ;, g2, ., setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (, getPaint, (, ), ), ;]
[), ;, g2, ., setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (, getPaint, (, ), ), ;]
[setFont, (, getFont, (, ), ), ;, g2, ., setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (]
[), ), ;, g2, ., setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,]
[;, g2, ., setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,]
[setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, )]
[setPaint, (, getPaint, (, ), ), ;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, )]
[;, TextUtilities, ., drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, ), area, ., getMinX, (, ), ,]
[drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, ), area, ., getMinX, (, ), ,, (, float, )]
[drawAlignedString, (, getText, (, ), ,, g2, ,, (, float, ), area, ., getMinX, (, ), ,, (, float, )]
[g2, ,, (, float, ), area, ., getMinX, (, ), ,, (, float, ), area, ., getMinY, (, ), ,]
[g2, ,, (, float, ), area, ., getMinX, (, ), ,, (, float, ), area, ., getMinY, (, ), ,]
[., getMinX, (, ), ,, (, float, ), area, ., getMinY, (, ), ,, TextAnchor, ., TOP_LEFT, ), ;, return]
