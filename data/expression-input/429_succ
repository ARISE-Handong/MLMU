[;, private, List, <, Node, >, candidates, =, Lists, ., newArrayList, (, ), ;, RemoveUnusedClassProperties, (, AbstractCompiler, compiler, ), {]
[., newHashSet, (, ), ;, private, List, <, Node, >, candidates, =, Lists, ., newArrayList, (, ), ;, RemoveUnusedClassProperties, (]
[;, RemoveUnusedClassProperties, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (]
[., newArrayList, (, ), ;, RemoveUnusedClassProperties, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, @, Override]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverseRoots, (, compiler]
[;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :, candidates, ), {]
[., traverseRoots, (, compiler, ,, this, ,, externs, ,, root, ), ;, removeUnused, (, ), ;, }, private, void, removeUnused]
[,, this, ,, externs, ,, root, ), ;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for]
[,, externs, ,, root, ), ;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for, (, Node]
[,, root, ), ;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :]
[), ;, removeUnused, (, ), ;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :, candidates, )]
[;, }, private, void, removeUnused, (, ), {, for, (, Node, n, :, candidates, ), {, Preconditions, ., checkState, (]
[), {, Preconditions, ., checkState, (, n, ., isGetProp, (, ), ), ;, if, (, !, used, ., contains, (]
[;, if, (, !, used, ., contains, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {]
[., checkState, (, n, ., isGetProp, (, ), ), ;, if, (, !, used, ., contains, (, n, ., getLastChild]
[), ;, if, (, !, used, ., contains, (, n, ., getLastChild, (, ), ., getString, (, ), ), )]
[., isGetProp, (, ), ), ;, if, (, !, used, ., contains, (, n, ., getLastChild, (, ), ., getString]
[), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), )]
[), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), )]
[., contains, (, n, ., getLastChild, (, ), ., getString, (, ), ), ), {, Node, parent, =, n, .]
[), ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, parent, )]
[., getString, (, ), ), ), {, Node, parent, =, n, ., getParent, (, ), ;, if, (, NodeUtil, .]
[., getLastChild, (, ), ., getString, (, ), ), ), {, Node, parent, =, n, ., getParent, (, ), ;]
[;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (]
[., getParent, (, ), ;, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;]
[), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign]
[., isAssignmentOp, (, parent, ), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&]
[), ), {, Node, assign, =, parent, ;, Preconditions, ., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (]
[;, Preconditions, ., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (]
[;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (, )]
[., checkState, (, assign, !=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==]
[), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (]
[&&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,]
[&&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent]
[!=, null, &&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign]
[&&, NodeUtil, ., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent]
[&&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,]
[., isAssignmentOp, (, assign, ), &&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, )]
[), &&, assign, ., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign]
[), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (]
[==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), .]
[., getFirstChild, (, ), ==, n, ), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,, assign, .]
[), ;, assign, ., getParent, (, ), ., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (]
[;, }, else, if, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, parent, .]
[., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (]
[., getParent, (, ), ., replaceChild, (, assign, ,, assign, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;]
[,, assign, ., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (, parent, ., isInc, (]
[), ;, }, else, if, (, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, parent]
[., detachFromParent, (, ), ), ;, }, else, if, (, parent, ., isInc, (, ), ||, parent, ., isDec, (]
[., getLastChild, (, ), ., detachFromParent, (, ), ), ;, }, else, if, (, parent, ., isInc, (, ), ||]
[), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., number, (, 0, ), ), ;]
[||, parent, ., isDec, (, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, .]
[., isInc, (, ), ||, parent, ., isDec, (, ), ), {, parent, ., getParent, (, ), ., replaceChild, (]
[), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., number, (, 0, ), ), ;]
[., isDec, (, ), ), {, parent, ., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., number, (]
[;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +, parent, ), ;, }, compiler, ., reportCodeChange, (, ), ;]
[., replaceChild, (, parent, ,, IR, ., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (]
[., getParent, (, ), ., replaceChild, (, parent, ,, IR, ., number, (, 0, ), ), ;, }, else, {]
[,, IR, ., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +, parent, )]
[), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +, parent, ), ;, }, compiler, ., reportCodeChange, (, )]
[., number, (, 0, ), ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +, parent, ), ;, }]
[), ), ;, }, else, {, throw, new, IllegalStateException, (, "unexpected: ", +, parent, ), ;, }, compiler, ., reportCodeChange, (]
[;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t]
[+, parent, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t]
[;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., reportCodeChange, (, ), ;, }, }, }, @, Override, public, boolean, shouldTraverse, (, NodeTraversal, t, ,, Node, n, ,]
[), {, this, ., inExterns, =, n, ., getStaticSourceFile, (, ), ., isExtern, (, ), ;, }, return, true, ;]
[., isScript, (, ), ), {, this, ., inExterns, =, n, ., getStaticSourceFile, (, ), ., isExtern, (, ), ;]
[=, n, ., getStaticSourceFile, (, ), ., isExtern, (, ), ;, }, return, true, ;, }, @, Override, public, void]
[., inExterns, =, n, ., getStaticSourceFile, (, ), ., isExtern, (, ), ;, }, return, true, ;, }, @, Override]
[;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[., isExtern, (, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., getStaticSourceFile, (, ), ., isExtern, (, ), ;, }, return, true, ;, }, @, Override, public, void, visit, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., GETPROP, :, {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, )]
[., getType, (, ), ), {, case, Token, ., GETPROP, :, {, String, propName, =, n, ., getLastChild, (, )]
[:, {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, inExterns, ||, isPinningPropertyUse]
[., GETPROP, :, {, String, propName, =, n, ., getLastChild, (, ), ., getString, (, ), ;, if, (, inExterns]
[;, if, (, inExterns, ||, isPinningPropertyUse, (, n, ), ), {, used, ., add, (, propName, ), ;, }, else]
[., getString, (, ), ;, if, (, inExterns, ||, isPinningPropertyUse, (, n, ), ), {, used, ., add, (, propName]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, inExterns, ||, isPinningPropertyUse, (, n, ), ), {, used]
[), {, used, ., add, (, propName, ), ;, }, else, {, if, (, n, ., getFirstChild, (, ), .]
[||, isPinningPropertyUse, (, n, ), ), {, used, ., add, (, propName, ), ;, }, else, {, if, (, n]
[), {, used, ., add, (, propName, ), ;, }, else, {, if, (, n, ., getFirstChild, (, ), .]
[), ), {, used, ., add, (, propName, ), ;, }, else, {, if, (, n, ., getFirstChild, (, )]
[;, }, else, {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, candidates, ., add]
[., add, (, propName, ), ;, }, else, {, if, (, n, ., getFirstChild, (, ), ., isThis, (, )]
[), ;, }, else, {, if, (, n, ., getFirstChild, (, ), ., isThis, (, ), ), {, candidates, .]
[), {, candidates, ., add, (, n, ), ;, }, }, break, ;, }, case, Token, ., CALL, :, Node]
[., isThis, (, ), ), {, candidates, ., add, (, n, ), ;, }, }, break, ;, }, case, Token]
[., getFirstChild, (, ), ., isThis, (, ), ), {, candidates, ., add, (, n, ), ;, }, }, break]
[;, }, }, break, ;, }, case, Token, ., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;]
[., add, (, n, ), ;, }, }, break, ;, }, case, Token, ., CALL, :, Node, target, =, n]
[), ;, }, }, break, ;, }, case, Token, ., CALL, :, Node, target, =, n, ., getFirstChild, (, )]
[:, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&, target, .]
[., CALL, :, Node, target, =, n, ., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&]
[;, if, (, n, ., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&, target, ., getString, (, )]
[., getFirstChild, (, ), ;, if, (, n, ., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&, target]
[), {, Node, propName, =, target, ., getNext, (, ), ;, if, (, propName, ., isString, (, ), ), {]
[&&, target, ., getString, (, ), ., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =, target, .]
[&&, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), )]
[., hasMoreThanOneChild, (, ), &&, target, ., isName, (, ), &&, target, ., getString, (, ), ., equals, (, NodeUtil]
[&&, target, ., getString, (, ), ., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =, target, .]
[., isName, (, ), &&, target, ., getString, (, ), ., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node]
[), {, Node, propName, =, target, ., getNext, (, ), ;, if, (, propName, ., isString, (, ), ), {]
[., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =, target, ., getNext, (, ), ;, if, (]
[., getString, (, ), ., equals, (, NodeUtil, ., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =, target, ., getNext, (]
[), ), {, Node, propName, =, target, ., getNext, (, ), ;, if, (, propName, ., isString, (, ), )]
[., JSC_PROPERTY_NAME_FN, ), ), {, Node, propName, =, target, ., getNext, (, ), ;, if, (, propName, ., isString, (]
[;, if, (, propName, ., isString, (, ), ), {, used, ., add, (, propName, ., getString, (, ), )]
[., getNext, (, ), ;, if, (, propName, ., isString, (, ), ), {, used, ., add, (, propName, .]
[), {, used, ., add, (, propName, ., getString, (, ), ), ;, }, }, break, ;, }, }, private]
[., isString, (, ), ), {, used, ., add, (, propName, ., getString, (, ), ), ;, }, }, break]
[;, }, }, break, ;, }, }, private, boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =, n, .]
[., add, (, propName, ., getString, (, ), ), ;, }, }, break, ;, }, }, private, boolean, isPinningPropertyUse, (]
[), ;, }, }, break, ;, }, }, private, boolean, isPinningPropertyUse, (, Node, n, ), {, Node, parent, =, n]
[., getString, (, ), ), ;, }, }, break, ;, }, }, private, boolean, isPinningPropertyUse, (, Node, n, ), {]
[;, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, parent, ., isAssign, (, ), )]
[., getParent, (, ), ;, if, (, n, ==, parent, ., getFirstChild, (, ), ), {, if, (, parent, .]
[), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else, if, (, NodeUtil, .]
[==, parent, ., getFirstChild, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;]
[), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else, if, (, NodeUtil, .]
[., getFirstChild, (, ), ), {, if, (, parent, ., isAssign, (, ), ), {, return, false, ;, }, else]
[), {, return, false, ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ||, parent, ., isInc, (]
[., isAssign, (, ), ), {, return, false, ;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ||]
[;, }, else, if, (, NodeUtil, ., isAssignmentOp, (, parent, ), ||, parent, ., isInc, (, ), ||, parent, .]
[), {, return, NodeUtil, ., isExpressionResultUsed, (, parent, ), ;, }, }, return, true, ;, }, }]
[||, parent, ., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (, parent, ), ;, }, }, return, true]
[||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (, parent]
[., isAssignmentOp, (, parent, ), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, return]
[), ||, parent, ., isInc, (, ), ||, parent, ., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (]
[||, parent, ., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (, parent, ), ;, }, }, return, true]
[., isInc, (, ), ||, parent, ., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (, parent, ), ;]
[), {, return, NodeUtil, ., isExpressionResultUsed, (, parent, ), ;, }, }, return, true, ;, }, }]
[., isDec, (, ), ), {, return, NodeUtil, ., isExpressionResultUsed, (, parent, ), ;, }, }, return, true, ;, }]
[;, }, }, return, true, ;, }, }]
[., isExpressionResultUsed, (, parent, ), ;, }, }, return, true, ;, }, }]
[), ;, }, }, return, true, ;, }, }]
[;, }, }]
