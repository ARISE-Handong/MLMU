[;, MathUtils, ., checkNotNull, (, upper, ), ;, if, (, lower, ., length, !=, upper, ., length, ), {, throw]
[., checkNotNull, (, lower, ), ;, MathUtils, ., checkNotNull, (, upper, ), ;, if, (, lower, ., length, !=, upper]
[), ;, MathUtils, ., checkNotNull, (, upper, ), ;, if, (, lower, ., length, !=, upper, ., length, ), {]
[;, if, (, lower, ., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,]
[., checkNotNull, (, upper, ), ;, if, (, lower, ., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException]
[), ;, if, (, lower, ., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length]
[), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }, for, (, int, i]
[!=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }]
[., length, !=, upper, ., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, )]
[), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }, for, (, int, i]
[., length, ), {, throw, new, DimensionMismatchException, (, lower, ., length, ,, upper, ., length, ), ;, }, for, (]
[;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;, ++, i, ), {, if]
[,, upper, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;]
[., length, ,, upper, ., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, lower, .]
[), ;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;, ++, i, ), {]
[., length, ), ;, }, for, (, int, i, =, 0, ;, i, <, lower, ., length, ;, ++, i]
[;, i, <, lower, ., length, ;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=]
[;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), )]
[<, lower, ., length, ;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, []
[;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), )]
[., length, ;, ++, i, ), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ]]
[), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), ), {, throw, new]
[), {, if, (, !, (, upper, [, i, ], >=, lower, [, i, ], ), ), {, throw, new]
[), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;, }]
[), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;, }]
[), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;]
[>=, lower, [, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i]
[[, i, ], >=, lower, [, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,]
[], >=, lower, [, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, []
[), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, ), ;]
[[, i, ], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,]
[], ), ), {, throw, new, NumberIsTooSmallException, (, upper, [, i, ], ,, lower, [, i, ], ,, true, )]
[;, }, }, this, ., bounded, =, bounded, ;, this, ., mappers, =, new, Mapper, [, lower, ., length, ]]
[,, lower, [, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., mappers]
[[, i, ], ,, lower, [, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;]
[], ,, lower, [, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, .]
[,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., mappers, =, new, Mapper, [, lower]
[[, i, ], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., mappers, =, new]
[], ,, true, ), ;, }, }, this, ., bounded, =, bounded, ;, this, ., mappers, =, new, Mapper, []
[), ;, }, }, this, ., bounded, =, bounded, ;, this, ., mappers, =, new, Mapper, [, lower, ., length]
[=, bounded, ;, this, ., mappers, =, new, Mapper, [, lower, ., length, ], ;, for, (, int, i, =]
[., bounded, =, bounded, ;, this, ., mappers, =, new, Mapper, [, lower, ., length, ], ;, for, (, int]
[;, this, ., mappers, =, new, Mapper, [, lower, ., length, ], ;, for, (, int, i, =, 0, ;]
[=, new, Mapper, [, lower, ., length, ], ;, for, (, int, i, =, 0, ;, i, <, mappers, .]
[., mappers, =, new, Mapper, [, lower, ., length, ], ;, for, (, int, i, =, 0, ;, i, <]
[;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, ), {, if, (]
[], ;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, ), {, if]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, )]
[;, i, <, mappers, ., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (, lower, [, i]
[;, ++, i, ), {, if, (, Double, ., isInfinite, (, lower, [, i, ], ), ), {, if, (]
[<, mappers, ., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (, lower, [, i, ], )]
[;, ++, i, ), {, if, (, Double, ., isInfinite, (, lower, [, i, ], ), ), {, if, (]
[., length, ;, ++, i, ), {, if, (, Double, ., isInfinite, (, lower, [, i, ], ), ), {]
[), {, if, (, Double, ., isInfinite, (, lower, [, i, ], ), ), {, if, (, Double, ., isInfinite]
[), {, if, (, Double, ., isInfinite, (, lower, [, i, ], ), ), {, if, (, Double, ., isInfinite]
[), {, if, (, Double, ., isInfinite, (, upper, [, i, ], ), ), {, mappers, [, i, ], =]
[., isInfinite, (, lower, [, i, ], ), ), {, if, (, Double, ., isInfinite, (, upper, [, i, ]]
[), ), {, if, (, Double, ., isInfinite, (, upper, [, i, ], ), ), {, mappers, [, i, ]]
[[, i, ], ), ), {, if, (, Double, ., isInfinite, (, upper, [, i, ], ), ), {, mappers]
[], ), ), {, if, (, Double, ., isInfinite, (, upper, [, i, ], ), ), {, mappers, [, i]
[), {, mappers, [, i, ], =, new, NoBoundsMapper, (, ), ;, }, else, {, mappers, [, i, ], =]
[., isInfinite, (, upper, [, i, ], ), ), {, mappers, [, i, ], =, new, NoBoundsMapper, (, ), ;]
[), ), {, mappers, [, i, ], =, new, NoBoundsMapper, (, ), ;, }, else, {, mappers, [, i, ]]
[[, i, ], ), ), {, mappers, [, i, ], =, new, NoBoundsMapper, (, ), ;, }, else, {, mappers]
[], ), ), {, mappers, [, i, ], =, new, NoBoundsMapper, (, ), ;, }, else, {, mappers, [, i]
[=, new, NoBoundsMapper, (, ), ;, }, else, {, mappers, [, i, ], =, new, UpperBoundMapper, (, upper, [, i]
[[, i, ], =, new, NoBoundsMapper, (, ), ;, }, else, {, mappers, [, i, ], =, new, UpperBoundMapper, (]
[], =, new, NoBoundsMapper, (, ), ;, }, else, {, mappers, [, i, ], =, new, UpperBoundMapper, (, upper, []
[;, }, else, {, mappers, [, i, ], =, new, UpperBoundMapper, (, upper, [, i, ], ), ;, }, }]
[=, new, UpperBoundMapper, (, upper, [, i, ], ), ;, }, }, else, {, if, (, Double, ., isInfinite, (]
[[, i, ], =, new, UpperBoundMapper, (, upper, [, i, ], ), ;, }, }, else, {, if, (, Double]
[], =, new, UpperBoundMapper, (, upper, [, i, ], ), ;, }, }, else, {, if, (, Double, ., isInfinite]
[;, }, }, else, {, if, (, Double, ., isInfinite, (, upper, [, i, ], ), ), {, mappers, []
[), ;, }, }, else, {, if, (, Double, ., isInfinite, (, upper, [, i, ], ), ), {, mappers]
[[, i, ], ), ;, }, }, else, {, if, (, Double, ., isInfinite, (, upper, [, i, ], )]
[], ), ;, }, }, else, {, if, (, Double, ., isInfinite, (, upper, [, i, ], ), ), {]
[), {, mappers, [, i, ], =, new, LowerBoundMapper, (, lower, [, i, ], ), ;, }, else, {, mappers]
[., isInfinite, (, upper, [, i, ], ), ), {, mappers, [, i, ], =, new, LowerBoundMapper, (, lower, []
[), ), {, mappers, [, i, ], =, new, LowerBoundMapper, (, lower, [, i, ], ), ;, }, else, {]
[[, i, ], ), ), {, mappers, [, i, ], =, new, LowerBoundMapper, (, lower, [, i, ], ), ;]
[], ), ), {, mappers, [, i, ], =, new, LowerBoundMapper, (, lower, [, i, ], ), ;, }, else]
[=, new, LowerBoundMapper, (, lower, [, i, ], ), ;, }, else, {, mappers, [, i, ], =, new, LowerUpperBoundMapper]
[[, i, ], =, new, LowerBoundMapper, (, lower, [, i, ], ), ;, }, else, {, mappers, [, i, ]]
[], =, new, LowerBoundMapper, (, lower, [, i, ], ), ;, }, else, {, mappers, [, i, ], =, new]
[;, }, else, {, mappers, [, i, ], =, new, LowerUpperBoundMapper, (, lower, [, i, ], ,, upper, [, i]
[), ;, }, else, {, mappers, [, i, ], =, new, LowerUpperBoundMapper, (, lower, [, i, ], ,, upper, []
[[, i, ], ), ;, }, else, {, mappers, [, i, ], =, new, LowerUpperBoundMapper, (, lower, [, i, ]]
[], ), ;, }, else, {, mappers, [, i, ], =, new, LowerUpperBoundMapper, (, lower, [, i, ], ,, upper]
[=, new, LowerUpperBoundMapper, (, lower, [, i, ], ,, upper, [, i, ], ), ;, }, }, }, }, public]
[[, i, ], =, new, LowerUpperBoundMapper, (, lower, [, i, ], ,, upper, [, i, ], ), ;, }, }]
[], =, new, LowerUpperBoundMapper, (, lower, [, i, ], ,, upper, [, i, ], ), ;, }, }, }, }]
[;, }, }, }, }, public, double, [, ], unboundedToBounded, (, double, [, ], point, ), {, final, double, []
[,, upper, [, i, ], ), ;, }, }, }, }, public, double, [, ], unboundedToBounded, (, double, [, ]]
[[, i, ], ,, upper, [, i, ], ), ;, }, }, }, }, public, double, [, ], unboundedToBounded, (]
[], ,, upper, [, i, ], ), ;, }, }, }, }, public, double, [, ], unboundedToBounded, (, double, []
[), ;, }, }, }, }, public, double, [, ], unboundedToBounded, (, double, [, ], point, ), {, final, double]
[[, i, ], ), ;, }, }, }, }, public, double, [, ], unboundedToBounded, (, double, [, ], point, )]
[], ), ;, }, }, }, }, public, double, [, ], unboundedToBounded, (, double, [, ], point, ), {, final]
[;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, ), {, mapped, []
[], ;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, ), {, mapped]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, )]
[;, i, <, mappers, ., length, ;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ]]
[;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., unboundedToBounded, (, point, [, i]
[<, mappers, ., length, ;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., unboundedToBounded]
[;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., unboundedToBounded, (, point, [, i]
[., length, ;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., unboundedToBounded, (, point]
[), {, mapped, [, i, ], =, mappers, [, i, ], ., unboundedToBounded, (, point, [, i, ], ), ;]
[), {, mapped, [, i, ], =, mappers, [, i, ], ., unboundedToBounded, (, point, [, i, ], ), ;]
[=, mappers, [, i, ], ., unboundedToBounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public]
[[, i, ], =, mappers, [, i, ], ., unboundedToBounded, (, point, [, i, ], ), ;, }, return, mapped]
[], =, mappers, [, i, ], ., unboundedToBounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }]
[;, }, return, mapped, ;, }, public, double, [, ], boundedToUnbounded, (, double, [, ], point, ), {, final, double]
[., unboundedToBounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public, double, [, ], boundedToUnbounded, (]
[[, i, ], ., unboundedToBounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public, double, []
[], ., unboundedToBounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public, double, [, ], boundedToUnbounded]
[), ;, }, return, mapped, ;, }, public, double, [, ], boundedToUnbounded, (, double, [, ], point, ), {, final]
[[, i, ], ), ;, }, return, mapped, ;, }, public, double, [, ], boundedToUnbounded, (, double, [, ], point]
[], ), ;, }, return, mapped, ;, }, public, double, [, ], boundedToUnbounded, (, double, [, ], point, ), {]
[;, }, public, double, [, ], boundedToUnbounded, (, double, [, ], point, ), {, final, double, [, ], mapped, =]
[;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, ), {, mapped, []
[], ;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, ), {, mapped]
[., length, ], ;, for, (, int, i, =, 0, ;, i, <, mappers, ., length, ;, ++, i, )]
[;, i, <, mappers, ., length, ;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ]]
[;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., boundedToUnbounded, (, point, [, i]
[<, mappers, ., length, ;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., boundedToUnbounded]
[;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., boundedToUnbounded, (, point, [, i]
[., length, ;, ++, i, ), {, mapped, [, i, ], =, mappers, [, i, ], ., boundedToUnbounded, (, point]
[), {, mapped, [, i, ], =, mappers, [, i, ], ., boundedToUnbounded, (, point, [, i, ], ), ;]
[), {, mapped, [, i, ], =, mappers, [, i, ], ., boundedToUnbounded, (, point, [, i, ], ), ;]
[=, mappers, [, i, ], ., boundedToUnbounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public]
[[, i, ], =, mappers, [, i, ], ., boundedToUnbounded, (, point, [, i, ], ), ;, }, return, mapped]
[], =, mappers, [, i, ], ., boundedToUnbounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }]
[;, }, return, mapped, ;, }, public, double, value, (, double, [, ], point, ), {, return, bounded, ., value]
[., boundedToUnbounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public, double, value, (, double, []
[[, i, ], ., boundedToUnbounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public, double, value]
[], ., boundedToUnbounded, (, point, [, i, ], ), ;, }, return, mapped, ;, }, public, double, value, (, double]
[), ;, }, return, mapped, ;, }, public, double, value, (, double, [, ], point, ), {, return, bounded, .]
[[, i, ], ), ;, }, return, mapped, ;, }, public, double, value, (, double, [, ], point, ), {]
[], ), ;, }, return, mapped, ;, }, public, double, value, (, double, [, ], point, ), {, return, bounded]
[;, }, public, double, value, (, double, [, ], point, ), {, return, bounded, ., value, (, unboundedToBounded, (, point]
[;, }, private, interface, Mapper, {, double, unboundedToBounded, (, double, y, ), ;, double, boundedToUnbounded, (, double, x, ), ;]
[., value, (, unboundedToBounded, (, point, ), ), ;, }, private, interface, Mapper, {, double, unboundedToBounded, (, double, y, )]
[), ;, }, private, interface, Mapper, {, double, unboundedToBounded, (, double, y, ), ;, double, boundedToUnbounded, (, double, x, )]
[), ), ;, }, private, interface, Mapper, {, double, unboundedToBounded, (, double, y, ), ;, double, boundedToUnbounded, (, double, x]
[;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, x, ;, }, }, private, static, class, LowerBoundMapper]
[;, }, }, private, static, class, LowerBoundMapper, implements, Mapper, {, private, final, double, lower, ;, public, LowerBoundMapper, (, final, double]
[=, lower, ;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, lower, +, FastMath, ., exp, (]
[., lower, =, lower, ;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, lower, +, FastMath, .]
[;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, lower, +, FastMath, ., exp, (, y, )]
[;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, FastMath, ., log, (, x, -, lower, )]
[+, FastMath, ., exp, (, y, ), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, FastMath]
[;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, FastMath, ., log, (, x, -, lower, )]
[., exp, (, y, ), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, FastMath, ., log]
[), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, FastMath, ., log, (, x, -, lower]
[;, }, }, private, static, class, UpperBoundMapper, implements, Mapper, {, private, final, double, upper, ;, public, UpperBoundMapper, (, final, double]
[., log, (, x, -, lower, ), ;, }, }, private, static, class, UpperBoundMapper, implements, Mapper, {, private, final, double]
[), ;, }, }, private, static, class, UpperBoundMapper, implements, Mapper, {, private, final, double, upper, ;, public, UpperBoundMapper, (, final]
[-, lower, ), ;, }, }, private, static, class, UpperBoundMapper, implements, Mapper, {, private, final, double, upper, ;, public, UpperBoundMapper]
[), ;, }, }, private, static, class, UpperBoundMapper, implements, Mapper, {, private, final, double, upper, ;, public, UpperBoundMapper, (, final]
[=, upper, ;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, upper, -, FastMath, ., exp, (]
[., upper, =, upper, ;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, upper, -, FastMath, .]
[;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, upper, -, FastMath, ., exp, (, -, y]
[;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, -, FastMath, ., log, (, upper, -, x]
[-, FastMath, ., exp, (, -, y, ), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return]
[;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, -, FastMath, ., log, (, upper, -, x]
[., exp, (, -, y, ), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, -, FastMath]
[), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, -, FastMath, ., log, (, upper, -]
[), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, -, FastMath, ., log, (, upper, -]
[;, }, }, private, static, class, LowerUpperBoundMapper, implements, Mapper, {, private, final, UnivariateFunction, boundingFunction, ;, private, final, UnivariateFunction, unboundingFunction, ;]
[;, }, }, private, static, class, LowerUpperBoundMapper, implements, Mapper, {, private, final, UnivariateFunction, boundingFunction, ;, private, final, UnivariateFunction, unboundingFunction, ;]
[., log, (, upper, -, x, ), ;, }, }, private, static, class, LowerUpperBoundMapper, implements, Mapper, {, private, final, UnivariateFunction]
[), ;, }, }, private, static, class, LowerUpperBoundMapper, implements, Mapper, {, private, final, UnivariateFunction, boundingFunction, ;, private, final, UnivariateFunction, unboundingFunction]
[-, x, ), ;, }, }, private, static, class, LowerUpperBoundMapper, implements, Mapper, {, private, final, UnivariateFunction, boundingFunction, ;, private, final]
[), ;, }, }, private, static, class, LowerUpperBoundMapper, implements, Mapper, {, private, final, UnivariateFunction, boundingFunction, ;, private, final, UnivariateFunction, unboundingFunction]
[=, new, Sigmoid, (, lower, ,, upper, ), ;, unboundingFunction, =, new, Logit, (, lower, ,, upper, ), ;, }]
[;, unboundingFunction, =, new, Logit, (, lower, ,, upper, ), ;, }, public, double, unboundedToBounded, (, final, double, y, )]
[,, upper, ), ;, unboundingFunction, =, new, Logit, (, lower, ,, upper, ), ;, }, public, double, unboundedToBounded, (, final]
[), ;, unboundingFunction, =, new, Logit, (, lower, ,, upper, ), ;, }, public, double, unboundedToBounded, (, final, double, y]
[=, new, Logit, (, lower, ,, upper, ), ;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return]
[;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, boundingFunction, ., value, (, y, ), ;, }]
[,, upper, ), ;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, boundingFunction, ., value, (, y]
[), ;, }, public, double, unboundedToBounded, (, final, double, y, ), {, return, boundingFunction, ., value, (, y, ), ;]
[;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, unboundingFunction, ., value, (, x, ), ;, }]
[., value, (, y, ), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, unboundingFunction, ., value]
[), ;, }, public, double, boundedToUnbounded, (, final, double, x, ), {, return, unboundingFunction, ., value, (, x, ), ;]
[;, }, }, }]
[., value, (, x, ), ;, }, }, }]
[), ;, }, }, }]
