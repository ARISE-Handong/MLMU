[Map, ;, public, class, SourceMapConsumerV2, implements, SourceMapConsumer, {, private, Map, <, Integer, ,, List, <, Integer, >, >, characterMap, =]
[SourceMapConsumer, {, private, Map, <, Integer, ,, List, <, Integer, >, >, characterMap, =, null, ;, private, JSONArray, lineMaps, =]
[), {, }, @, Override, public, void, parse, (, String, contents, ), throws, SourceMapParseException, {, try, {, JSONObject, sourceMapRoot, =]
[@, Override, public, void, parse, (, String, contents, ), throws, SourceMapParseException, {, try, {, JSONObject, sourceMapRoot, =, new, JSONObject, (]
[void, parse, (, String, contents, ), throws, SourceMapParseException, {, try, {, JSONObject, sourceMapRoot, =, new, JSONObject, (, contents, ), ;]
[(, String, contents, ), throws, SourceMapParseException, {, try, {, JSONObject, sourceMapRoot, =, new, JSONObject, (, contents, ), ;, parse, (]
[=, new, JSONObject, (, contents, ), ;, parse, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw]
[(, contents, ), ;, parse, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw, new, SourceMapParseException, (]
[(, contents, ), ;, parse, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw, new, SourceMapParseException, (]
[), ;, parse, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw, new, SourceMapParseException, (, "JSON parse exception: ", +]
[(, "JSON parse exception: ", +, ex, ), ;, }, }, public, void, parse, (, JSONObject, sourceMapRoot, ), throws, SourceMapParseException, {, try, {]
[+, ex, ), ;, }, }, public, void, parse, (, JSONObject, sourceMapRoot, ), throws, SourceMapParseException, {, try, {, parseInternal, (]
[sourceMapRoot, ), throws, SourceMapParseException, {, try, {, parseInternal, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw]
[SourceMapParseException, {, try, {, parseInternal, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw, new, SourceMapParseException, (]
[SourceMapParseException, {, try, {, parseInternal, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw, new, SourceMapParseException, (]
[try, {, parseInternal, (, sourceMapRoot, ), ;, }, catch, (, JSONException, ex, ), {, throw, new, SourceMapParseException, (, "JSON parse exception: ", +]
[ex, ), ;, }, }, private, void, parseInternal, (, JSONObject, sourceMapRoot, ), throws, JSONException, ,, SourceMapParseException, {, int, version, =]
[ex, ), ;, }, }, private, void, parseInternal, (, JSONObject, sourceMapRoot, ), throws, JSONException, ,, SourceMapParseException, {, int, version, =]
[}, private, void, parseInternal, (, JSONObject, sourceMapRoot, ), throws, JSONException, ,, SourceMapParseException, {, int, version, =, sourceMapRoot, ., getInt, (]
[JSONObject, sourceMapRoot, ), throws, JSONException, ,, SourceMapParseException, {, int, version, =, sourceMapRoot, ., getInt, (, "version", ), ;, if, (]
[JSONObject, sourceMapRoot, ), throws, JSONException, ,, SourceMapParseException, {, int, version, =, sourceMapRoot, ., getInt, (, "version", ), ;, if, (]
[), throws, JSONException, ,, SourceMapParseException, {, int, version, =, sourceMapRoot, ., getInt, (, "version", ), ;, if, (, version, !=]
[SourceMapParseException, {, int, version, =, sourceMapRoot, ., getInt, (, "version", ), ;, if, (, version, !=, 2, ), {, throw]
[version, =, sourceMapRoot, ., getInt, (, "version", ), ;, if, (, version, !=, 2, ), {, throw, new, SourceMapParseException, (]
[version, =, sourceMapRoot, ., getInt, (, "version", ), ;, if, (, version, !=, 2, ), {, throw, new, SourceMapParseException, (]
[sourceMapRoot, ., getInt, (, "version", ), ;, if, (, version, !=, 2, ), {, throw, new, SourceMapParseException, (, "Unknown version: ", +]
[if, (, version, !=, 2, ), {, throw, new, SourceMapParseException, (, "Unknown version: ", +, version, ), ;, }, String, file, =]
[if, (, version, !=, 2, ), {, throw, new, SourceMapParseException, (, "Unknown version: ", +, version, ), ;, }, String, file, =]
[2, ), {, throw, new, SourceMapParseException, (, "Unknown version: ", +, version, ), ;, }, String, file, =, sourceMapRoot, ., getString, (]
[SourceMapParseException, (, "Unknown version: ", +, version, ), ;, }, String, file, =, sourceMapRoot, ., getString, (, "file", ), ;, if, (]
[SourceMapParseException, (, "Unknown version: ", +, version, ), ;, }, String, file, =, sourceMapRoot, ., getString, (, "file", ), ;, if, (]
[String, file, =, sourceMapRoot, ., getString, (, "file", ), ;, if, (, file, ., isEmpty, (, ), ), {, throw]
[sourceMapRoot, ., getString, (, "file", ), ;, if, (, file, ., isEmpty, (, ), ), {, throw, new, SourceMapParseException, (]
[if, (, file, ., isEmpty, (, ), ), {, throw, new, SourceMapParseException, (, "File entry is missing or empty", ), ;, }, int, lineCount, =]
[if, (, file, ., isEmpty, (, ), ), {, throw, new, SourceMapParseException, (, "File entry is missing or empty", ), ;, }, int, lineCount, =]
[isEmpty, (, ), ), {, throw, new, SourceMapParseException, (, "File entry is missing or empty", ), ;, }, int, lineCount, =, sourceMapRoot, ., getInt, (]
[), {, throw, new, SourceMapParseException, (, "File entry is missing or empty", ), ;, }, int, lineCount, =, sourceMapRoot, ., getInt, (, "lineCount", ), ;]
[throw, new, SourceMapParseException, (, "File entry is missing or empty", ), ;, }, int, lineCount, =, sourceMapRoot, ., getInt, (, "lineCount", ), ;, lineMaps, =]
[throw, new, SourceMapParseException, (, "File entry is missing or empty", ), ;, }, int, lineCount, =, sourceMapRoot, ., getInt, (, "lineCount", ), ;, lineMaps, =]
["File entry is missing or empty", ), ;, }, int, lineCount, =, sourceMapRoot, ., getInt, (, "lineCount", ), ;, lineMaps, =, sourceMapRoot, ., getJSONArray, (]
[lineCount, =, sourceMapRoot, ., getInt, (, "lineCount", ), ;, lineMaps, =, sourceMapRoot, ., getJSONArray, (, "lineMaps", ), ;, if, (]
[lineCount, =, sourceMapRoot, ., getInt, (, "lineCount", ), ;, lineMaps, =, sourceMapRoot, ., getJSONArray, (, "lineMaps", ), ;, if, (]
[sourceMapRoot, ., getInt, (, "lineCount", ), ;, lineMaps, =, sourceMapRoot, ., getJSONArray, (, "lineMaps", ), ;, if, (, lineCount, !=]
[sourceMapRoot, ., getInt, (, "lineCount", ), ;, lineMaps, =, sourceMapRoot, ., getJSONArray, (, "lineMaps", ), ;, if, (, lineCount, !=]
[=, sourceMapRoot, ., getJSONArray, (, "lineMaps", ), ;, if, (, lineCount, !=, lineMaps, ., length, (, ), ), {, throw]
[getJSONArray, (, "lineMaps", ), ;, if, (, lineCount, !=, lineMaps, ., length, (, ), ), {, throw, new, SourceMapParseException, (]
[;, if, (, lineCount, !=, lineMaps, ., length, (, ), ), {, throw, new, SourceMapParseException, (, "lineMaps length does not match lineCount", ), ;, }]
[(, lineCount, !=, lineMaps, ., length, (, ), ), {, throw, new, SourceMapParseException, (, "lineMaps length does not match lineCount", ), ;, }, characterMap, =]
[(, lineCount, !=, lineMaps, ., length, (, ), ), {, throw, new, SourceMapParseException, (, "lineMaps length does not match lineCount", ), ;, }, characterMap, =]
[{, throw, new, SourceMapParseException, (, "lineMaps length does not match lineCount", ), ;, }, characterMap, =, Maps, ., newHashMap, (, ), ;, JSONArray, sources, =]
[{, throw, new, SourceMapParseException, (, "lineMaps length does not match lineCount", ), ;, }, characterMap, =, Maps, ., newHashMap, (, ), ;, JSONArray, sources, =]
[(, "lineMaps length does not match lineCount", ), ;, }, characterMap, =, Maps, ., newHashMap, (, ), ;, JSONArray, sources, =, sourceMapRoot, ., getJSONArray, (]
[=, Maps, ., newHashMap, (, ), ;, JSONArray, sources, =, sourceMapRoot, ., getJSONArray, (, "sources", ), ;, JSONArray, names, =]
[=, Maps, ., newHashMap, (, ), ;, JSONArray, sources, =, sourceMapRoot, ., getJSONArray, (, "sources", ), ;, JSONArray, names, =]
[=, Maps, ., newHashMap, (, ), ;, JSONArray, sources, =, sourceMapRoot, ., getJSONArray, (, "sources", ), ;, JSONArray, names, =]
[(, ), ;, JSONArray, sources, =, sourceMapRoot, ., getJSONArray, (, "sources", ), ;, JSONArray, names, =, sourceMapRoot, ., has, (]
[JSONArray, sources, =, sourceMapRoot, ., getJSONArray, (, "sources", ), ;, JSONArray, names, =, sourceMapRoot, ., has, (, "names", ), ?]
[JSONArray, sources, =, sourceMapRoot, ., getJSONArray, (, "sources", ), ;, JSONArray, names, =, sourceMapRoot, ., has, (, "names", ), ?]
[., getJSONArray, (, "sources", ), ;, JSONArray, names, =, sourceMapRoot, ., has, (, "names", ), ?, sourceMapRoot, ., getJSONArray, (]
["sources", ), ;, JSONArray, names, =, sourceMapRoot, ., has, (, "names", ), ?, sourceMapRoot, ., getJSONArray, (, "names", ), :]
[=, sourceMapRoot, ., has, (, "names", ), ?, sourceMapRoot, ., getJSONArray, (, "names", ), :, null, ;, JSONArray, jsonMappings, =]
[=, sourceMapRoot, ., has, (, "names", ), ?, sourceMapRoot, ., getJSONArray, (, "names", ), :, null, ;, JSONArray, jsonMappings, =]
[(, "names", ), ?, sourceMapRoot, ., getJSONArray, (, "names", ), :, null, ;, JSONArray, jsonMappings, =, sourceMapRoot, ., getJSONArray, (]
[?, sourceMapRoot, ., getJSONArray, (, "names", ), :, null, ;, JSONArray, jsonMappings, =, sourceMapRoot, ., getJSONArray, (, "mappings", ), ;]
[., getJSONArray, (, "names", ), :, null, ;, JSONArray, jsonMappings, =, sourceMapRoot, ., getJSONArray, (, "mappings", ), ;, mappings, =]
[., getJSONArray, (, "names", ), :, null, ;, JSONArray, jsonMappings, =, sourceMapRoot, ., getJSONArray, (, "mappings", ), ;, mappings, =]
[), :, null, ;, JSONArray, jsonMappings, =, sourceMapRoot, ., getJSONArray, (, "mappings", ), ;, mappings, =, Lists, ., newArrayListWithCapacity, (]
[., getJSONArray, (, "mappings", ), ;, mappings, =, Lists, ., newArrayListWithCapacity, (, lineCount, ), ;, for, (, int, i, =]
[(, "mappings", ), ;, mappings, =, Lists, ., newArrayListWithCapacity, (, lineCount, ), ;, for, (, int, i, =, 0, ;]
[(, "mappings", ), ;, mappings, =, Lists, ., newArrayListWithCapacity, (, lineCount, ), ;, for, (, int, i, =, 0, ;]
[), ;, mappings, =, Lists, ., newArrayListWithCapacity, (, lineCount, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, mappings, =, Lists, ., newArrayListWithCapacity, (, lineCount, ), ;, for, (, int, i, =, 0, ;, i, <]
[newArrayListWithCapacity, (, lineCount, ), ;, for, (, int, i, =, 0, ;, i, <, jsonMappings, ., length, (, ), ;]
[newArrayListWithCapacity, (, lineCount, ), ;, for, (, int, i, =, 0, ;, i, <, jsonMappings, ., length, (, ), ;]
[int, i, =, 0, ;, i, <, jsonMappings, ., length, (, ), ;, i, ++, ), {, JSONArray, entry, =]
[int, i, =, 0, ;, i, <, jsonMappings, ., length, (, ), ;, i, ++, ), {, JSONArray, entry, =]
[;, i, <, jsonMappings, ., length, (, ), ;, i, ++, ), {, JSONArray, entry, =, jsonMappings, ., getJSONArray, (]
[(, ), ;, i, ++, ), {, JSONArray, entry, =, jsonMappings, ., getJSONArray, (, i, ), ;, String, name, =]
[(, ), ;, i, ++, ), {, JSONArray, entry, =, jsonMappings, ., getJSONArray, (, i, ), ;, String, name, =]
[++, ), {, JSONArray, entry, =, jsonMappings, ., getJSONArray, (, i, ), ;, String, name, =, entry, ., optString, (]
[{, JSONArray, entry, =, jsonMappings, ., getJSONArray, (, i, ), ;, String, name, =, entry, ., optString, (, 3, ,]
[., getJSONArray, (, i, ), ;, String, name, =, entry, ., optString, (, 3, ,, "", ), ;, if, (]
[., getJSONArray, (, i, ), ;, String, name, =, entry, ., optString, (, 3, ,, "", ), ;, if, (]
[(, i, ), ;, String, name, =, entry, ., optString, (, 3, ,, "", ), ;, if, (, names, !=]
[., optString, (, 3, ,, "", ), ;, if, (, names, !=, null, ), {, try, {, int, nameIndex, =]
[., optString, (, 3, ,, "", ), ;, if, (, names, !=, null, ), {, try, {, int, nameIndex, =]
[,, "", ), ;, if, (, names, !=, null, ), {, try, {, int, nameIndex, =, entry, ., getInt, (]
[;, if, (, names, !=, null, ), {, try, {, int, nameIndex, =, entry, ., getInt, (, 3, ), ;]
[(, names, !=, null, ), {, try, {, int, nameIndex, =, entry, ., getInt, (, 3, ), ;, name, =]
[(, names, !=, null, ), {, try, {, int, nameIndex, =, entry, ., getInt, (, 3, ), ;, name, =]
[), {, try, {, int, nameIndex, =, entry, ., getInt, (, 3, ), ;, name, =, names, ., getString, (]
[=, names, ., getString, (, nameIndex, ), ;, }, catch, (, JSONException, e, ), {, }, }, String, sourceFile, =]
[=, names, ., getString, (, nameIndex, ), ;, }, catch, (, JSONException, e, ), {, }, }, String, sourceFile, =]
[(, nameIndex, ), ;, }, catch, (, JSONException, e, ), {, }, }, String, sourceFile, =, sources, ., getString, (]
[(, nameIndex, ), ;, }, catch, (, JSONException, e, ), {, }, }, String, sourceFile, =, sources, ., getString, (]
[}, catch, (, JSONException, e, ), {, }, }, String, sourceFile, =, sources, ., getString, (, entry, ., getInt, (]
[}, }, String, sourceFile, =, sources, ., getString, (, entry, ., getInt, (, 0, ), ), ;, int, lineNumber, =]
[}, }, String, sourceFile, =, sources, ., getString, (, entry, ., getInt, (, 0, ), ), ;, int, lineNumber, =]
[=, sources, ., getString, (, entry, ., getInt, (, 0, ), ), ;, int, lineNumber, =, entry, ., getInt, (]
[., getInt, (, 0, ), ), ;, int, lineNumber, =, entry, ., getInt, (, 1, ), ;, int, column, =]
[., getInt, (, 0, ), ), ;, int, lineNumber, =, entry, ., getInt, (, 1, ), ;, int, column, =]
[), ), ;, int, lineNumber, =, entry, ., getInt, (, 1, ), ;, int, column, =, entry, ., getInt, (]
[getInt, (, 1, ), ;, int, column, =, entry, ., getInt, (, 2, ), ;, OriginalMapping, ., Builder, builder, =]
[getInt, (, 1, ), ;, int, column, =, entry, ., getInt, (, 2, ), ;, OriginalMapping, ., Builder, builder, =]
[getInt, (, 1, ), ;, int, column, =, entry, ., getInt, (, 2, ), ;, OriginalMapping, ., Builder, builder, =]
[getInt, (, 1, ), ;, int, column, =, entry, ., getInt, (, 2, ), ;, OriginalMapping, ., Builder, builder, =]
[getInt, (, 1, ), ;, int, column, =, entry, ., getInt, (, 2, ), ;, OriginalMapping, ., Builder, builder, =]
[getInt, (, 1, ), ;, int, column, =, entry, ., getInt, (, 2, ), ;, OriginalMapping, ., Builder, builder, =]
[entry, ., getInt, (, 2, ), ;, OriginalMapping, ., Builder, builder, =, OriginalMapping, ., newBuilder, (, ), ., setOriginalFile, (]
[), ;, OriginalMapping, ., Builder, builder, =, OriginalMapping, ., newBuilder, (, ), ., setOriginalFile, (, sourceFile, ), ., setLineNumber, (]
[builder, =, OriginalMapping, ., newBuilder, (, ), ., setOriginalFile, (, sourceFile, ), ., setLineNumber, (, lineNumber, ), ., setColumnPosition, (]
[(, ), ., setOriginalFile, (, sourceFile, ), ., setLineNumber, (, lineNumber, ), ., setColumnPosition, (, column, ), ., setIdentifier, (]
[setOriginalFile, (, sourceFile, ), ., setLineNumber, (, lineNumber, ), ., setColumnPosition, (, column, ), ., setIdentifier, (, name, ), ;]
[setOriginalFile, (, sourceFile, ), ., setLineNumber, (, lineNumber, ), ., setColumnPosition, (, column, ), ., setIdentifier, (, name, ), ;]
[., setLineNumber, (, lineNumber, ), ., setColumnPosition, (, column, ), ., setIdentifier, (, name, ), ;, mappings, ., add, (]
[., setLineNumber, (, lineNumber, ), ., setColumnPosition, (, column, ), ., setIdentifier, (, name, ), ;, mappings, ., add, (]
[build, (, ), ), ;, }, }, @, Override, public, OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {]
[build, (, ), ), ;, }, }, @, Override, public, OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {]
[), ;, }, }, @, Override, public, OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {, lineNumber, --, ;]
[), ;, }, }, @, Override, public, OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {, lineNumber, --, ;]
[Override, public, OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {, lineNumber, --, ;, columnIndex, --, ;, if, (]
[Override, public, OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {, lineNumber, --, ;, columnIndex, --, ;, if, (]
[OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {, lineNumber, --, ;, columnIndex, --, ;, if, (, lineNumber, >=]
[OriginalMapping, getMappingForLine, (, int, lineNumber, ,, int, columnIndex, ), {, lineNumber, --, ;, columnIndex, --, ;, if, (, lineNumber, >=]
[), {, lineNumber, --, ;, columnIndex, --, ;, if, (, lineNumber, >=, lineMaps, ., length, (, ), ), {, return]
[--, ;, columnIndex, --, ;, if, (, lineNumber, >=, lineMaps, ., length, (, ), ), {, return, null, ;, }]
[--, ;, columnIndex, --, ;, if, (, lineNumber, >=, lineMaps, ., length, (, ), ), {, return, null, ;, }]
[;, if, (, lineNumber, >=, lineMaps, ., length, (, ), ), {, return, null, ;, }, Preconditions, ., checkState, (]
[;, if, (, lineNumber, >=, lineMaps, ., length, (, ), ), {, return, null, ;, }, Preconditions, ., checkState, (]
[(, lineNumber, >=, lineMaps, ., length, (, ), ), {, return, null, ;, }, Preconditions, ., checkState, (, lineNumber, >=]
[>=, lineMaps, ., length, (, ), ), {, return, null, ;, }, Preconditions, ., checkState, (, lineNumber, >=, 0, ,]
[length, (, ), ), {, return, null, ;, }, Preconditions, ., checkState, (, lineNumber, >=, 0, ,, "Line number must be >= 0", ), ;]
[length, (, ), ), {, return, null, ;, }, Preconditions, ., checkState, (, lineNumber, >=, 0, ,, "Line number must be >= 0", ), ;]
[{, return, null, ;, }, Preconditions, ., checkState, (, lineNumber, >=, 0, ,, "Line number must be >= 0", ), ;, Preconditions, ., checkState, (]
[{, return, null, ;, }, Preconditions, ., checkState, (, lineNumber, >=, 0, ,, "Line number must be >= 0", ), ;, Preconditions, ., checkState, (]
[null, ;, }, Preconditions, ., checkState, (, lineNumber, >=, 0, ,, "Line number must be >= 0", ), ;, Preconditions, ., checkState, (, columnIndex, >=]
[}, Preconditions, ., checkState, (, lineNumber, >=, 0, ,, "Line number must be >= 0", ), ;, Preconditions, ., checkState, (, columnIndex, >=, 0, ,]
[lineNumber, >=, 0, ,, "Line number must be >= 0", ), ;, Preconditions, ., checkState, (, columnIndex, >=, 0, ,, "Column index must be >= 0", ), ;, if, (]
[>=, 0, ,, "Line number must be >= 0", ), ;, Preconditions, ., checkState, (, columnIndex, >=, 0, ,, "Column index must be >= 0", ), ;, if, (, !]
[>=, 0, ,, "Line number must be >= 0", ), ;, Preconditions, ., checkState, (, columnIndex, >=, 0, ,, "Column index must be >= 0", ), ;, if, (, !]
[), ;, Preconditions, ., checkState, (, columnIndex, >=, 0, ,, "Column index must be >= 0", ), ;, if, (, !, characterMap, ., containsKey, (]
[columnIndex, >=, 0, ,, "Column index must be >= 0", ), ;, if, (, !, characterMap, ., containsKey, (, lineNumber, ), ), {, try, {]
[columnIndex, >=, 0, ,, "Column index must be >= 0", ), ;, if, (, !, characterMap, ., containsKey, (, lineNumber, ), ), {, try, {]
["Column index must be >= 0", ), ;, if, (, !, characterMap, ., containsKey, (, lineNumber, ), ), {, try, {, characterMap, ., put, (]
[;, if, (, !, characterMap, ., containsKey, (, lineNumber, ), ), {, try, {, characterMap, ., put, (, lineNumber, ,]
[;, if, (, !, characterMap, ., containsKey, (, lineNumber, ), ), {, try, {, characterMap, ., put, (, lineNumber, ,]
[characterMap, ., containsKey, (, lineNumber, ), ), {, try, {, characterMap, ., put, (, lineNumber, ,, SourceMapLineDecoder, ., decodeLine, (]
[characterMap, ., containsKey, (, lineNumber, ), ), {, try, {, characterMap, ., put, (, lineNumber, ,, SourceMapLineDecoder, ., decodeLine, (]
[lineNumber, ), ), {, try, {, characterMap, ., put, (, lineNumber, ,, SourceMapLineDecoder, ., decodeLine, (, lineMaps, ., getString, (]
[., decodeLine, (, lineMaps, ., getString, (, lineNumber, ), ), ), ;, }, catch, (, JSONException, jse, ), {, throw]
[lineMaps, ., getString, (, lineNumber, ), ), ), ;, }, catch, (, JSONException, jse, ), {, throw, new, IllegalStateException, (]
[getString, (, lineNumber, ), ), ), ;, }, catch, (, JSONException, jse, ), {, throw, new, IllegalStateException, (, "JSON exception when retrieving line map", ,]
[jse, ), {, throw, new, IllegalStateException, (, "JSON exception when retrieving line map", ,, jse, ), ;, }, }, List, <, Integer, >, map, =]
[jse, ), {, throw, new, IllegalStateException, (, "JSON exception when retrieving line map", ,, jse, ), ;, }, }, List, <, Integer, >, map, =]
[new, IllegalStateException, (, "JSON exception when retrieving line map", ,, jse, ), ;, }, }, List, <, Integer, >, map, =, characterMap, ., get, (]
[jse, ), ;, }, }, List, <, Integer, >, map, =, characterMap, ., get, (, lineNumber, ), ;, if, (]
[jse, ), ;, }, }, List, <, Integer, >, map, =, characterMap, ., get, (, lineNumber, ), ;, if, (]
[jse, ), ;, }, }, List, <, Integer, >, map, =, characterMap, ., get, (, lineNumber, ), ;, if, (]
[;, }, }, List, <, Integer, >, map, =, characterMap, ., get, (, lineNumber, ), ;, if, (, map, ==]
[}, List, <, Integer, >, map, =, characterMap, ., get, (, lineNumber, ), ;, if, (, map, ==, null, ||]
[}, List, <, Integer, >, map, =, characterMap, ., get, (, lineNumber, ), ;, if, (, map, ==, null, ||]
[}, List, <, Integer, >, map, =, characterMap, ., get, (, lineNumber, ), ;, if, (, map, ==, null, ||]
[=, characterMap, ., get, (, lineNumber, ), ;, if, (, map, ==, null, ||, map, ., size, (, ), <=]
[(, lineNumber, ), ;, if, (, map, ==, null, ||, map, ., size, (, ), <=, columnIndex, ), {, return]
[map, ==, null, ||, map, ., size, (, ), <=, columnIndex, ), {, return, null, ;, }, int, index, =]
[map, ==, null, ||, map, ., size, (, ), <=, columnIndex, ), {, return, null, ;, }, int, index, =]
[map, ., size, (, ), <=, columnIndex, ), {, return, null, ;, }, int, index, =, map, ., get, (]
[<=, columnIndex, ), {, return, null, ;, }, int, index, =, map, ., get, (, columnIndex, ), ;, if, (]
[<=, columnIndex, ), {, return, null, ;, }, int, index, =, map, ., get, (, columnIndex, ), ;, if, (]
[), {, return, null, ;, }, int, index, =, map, ., get, (, columnIndex, ), ;, if, (, index, ==]
[{, return, null, ;, }, int, index, =, map, ., get, (, columnIndex, ), ;, if, (, index, ==, -]
[}, int, index, =, map, ., get, (, columnIndex, ), ;, if, (, index, ==, -, 1, ), {, return]
[=, map, ., get, (, columnIndex, ), ;, if, (, index, ==, -, 1, ), {, return, null, ;, }]
[=, map, ., get, (, columnIndex, ), ;, if, (, index, ==, -, 1, ), {, return, null, ;, }]
[(, columnIndex, ), ;, if, (, index, ==, -, 1, ), {, return, null, ;, }, Preconditions, ., checkState, (]
[(, columnIndex, ), ;, if, (, index, ==, -, 1, ), {, return, null, ;, }, Preconditions, ., checkState, (]
[), ;, if, (, index, ==, -, 1, ), {, return, null, ;, }, Preconditions, ., checkState, (, index, <]
[), ;, if, (, index, ==, -, 1, ), {, return, null, ;, }, Preconditions, ., checkState, (, index, <]
[-, 1, ), {, return, null, ;, }, Preconditions, ., checkState, (, index, <, mappings, ., size, (, ), ,]
[return, null, ;, }, Preconditions, ., checkState, (, index, <, mappings, ., size, (, ), ,, "Invalid mapping reference", ), ;, return]
[return, null, ;, }, Preconditions, ., checkState, (, index, <, mappings, ., size, (, ), ,, "Invalid mapping reference", ), ;, return]
[Preconditions, ., checkState, (, index, <, mappings, ., size, (, ), ,, "Invalid mapping reference", ), ;, return, mappings, ., get, (]
