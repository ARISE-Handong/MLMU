[., util, ., FastMath, ;, public, class, Dfp, implements, RealFieldElement, <, Dfp, >, {, public, static, final, int, RADIX, =]
[implements, RealFieldElement, <, Dfp, >, {, public, static, final, int, RADIX, =, 10000, ;, public, static, final, int, MIN_EXP, =]
[RealFieldElement, <, Dfp, >, {, public, static, final, int, RADIX, =, 10000, ;, public, static, final, int, MIN_EXP, =, -]
[int, RADIX, =, 10000, ;, public, static, final, int, MIN_EXP, =, -, 32767, ;, public, static, final, int, MAX_EXP, =]
[int, MIN_EXP, =, -, 32767, ;, public, static, final, int, MAX_EXP, =, 32768, ;, public, static, final, int, ERR_SCALE, =]
[final, int, MAX_EXP, =, 32768, ;, public, static, final, int, ERR_SCALE, =, 32760, ;, public, static, final, byte, FINITE, =]
[final, int, ERR_SCALE, =, 32760, ;, public, static, final, byte, FINITE, =, 0, ;, public, static, final, byte, INFINITE, =]
[final, byte, FINITE, =, 0, ;, public, static, final, byte, INFINITE, =, 1, ;, public, static, final, byte, SNAN, =]
[final, byte, INFINITE, =, 1, ;, public, static, final, byte, SNAN, =, 2, ;, public, static, final, byte, QNAN, =]
[final, byte, SNAN, =, 2, ;, public, static, final, byte, QNAN, =, 3, ;, private, static, final, String, NAN_STRING, =]
[final, byte, QNAN, =, 3, ;, private, static, final, String, NAN_STRING, =, "NaN", ;, private, static, final, String, POS_INFINITY_STRING, =]
[final, String, NAN_STRING, =, "NaN", ;, private, static, final, String, POS_INFINITY_STRING, =, "Infinity", ;, private, static, final, String, NEG_INFINITY_STRING, =]
[final, String, POS_INFINITY_STRING, =, "Infinity", ;, private, static, final, String, NEG_INFINITY_STRING, =, "-Infinity", ;, private, static, final, String, ADD_TRAP, =]
[final, String, NEG_INFINITY_STRING, =, "-Infinity", ;, private, static, final, String, ADD_TRAP, =, "add", ;, private, static, final, String, MULTIPLY_TRAP, =]
[final, String, ADD_TRAP, =, "add", ;, private, static, final, String, MULTIPLY_TRAP, =, "multiply", ;, private, static, final, String, DIVIDE_TRAP, =]
[final, String, MULTIPLY_TRAP, =, "multiply", ;, private, static, final, String, DIVIDE_TRAP, =, "divide", ;, private, static, final, String, SQRT_TRAP, =]
[final, String, DIVIDE_TRAP, =, "divide", ;, private, static, final, String, SQRT_TRAP, =, "sqrt", ;, private, static, final, String, ALIGN_TRAP, =]
[final, String, SQRT_TRAP, =, "sqrt", ;, private, static, final, String, ALIGN_TRAP, =, "align", ;, private, static, final, String, TRUNC_TRAP, =]
[final, String, ALIGN_TRAP, =, "align", ;, private, static, final, String, TRUNC_TRAP, =, "trunc", ;, private, static, final, String, NEXT_AFTER_TRAP, =]
[final, String, TRUNC_TRAP, =, "trunc", ;, private, static, final, String, NEXT_AFTER_TRAP, =, "nextAfter", ;, private, static, final, String, LESS_THAN_TRAP, =]
[final, String, NEXT_AFTER_TRAP, =, "nextAfter", ;, private, static, final, String, LESS_THAN_TRAP, =, "lessThan", ;, private, static, final, String, GREATER_THAN_TRAP, =]
[final, String, LESS_THAN_TRAP, =, "lessThan", ;, private, static, final, String, GREATER_THAN_TRAP, =, "greaterThan", ;, private, static, final, String, NEW_INSTANCE_TRAP, =]
[int, exp, ;, protected, byte, nans, ;, private, final, DfpField, field, ;, protected, Dfp, (, final, DfpField, field, ), {]
[;, protected, byte, nans, ;, private, final, DfpField, field, ;, protected, Dfp, (, final, DfpField, field, ), {, mant, =]
[nans, ;, private, final, DfpField, field, ;, protected, Dfp, (, final, DfpField, field, ), {, mant, =, new, int, []
[nans, ;, private, final, DfpField, field, ;, protected, Dfp, (, final, DfpField, field, ), {, mant, =, new, int, []
[protected, Dfp, (, final, DfpField, field, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;]
[(, final, DfpField, field, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =]
[DfpField, field, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;]
[), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =]
[mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;]
[new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =]
[[, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;]
[[, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;]
[(, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =]
[this, ., field, =, field, ;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, ), {, this, (]
[field, =, field, ;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, ), {, this, (, field, ,]
[;, }, protected, Dfp, (, final, DfpField, field, ,, byte, x, ), {, this, (, field, ,, (, long, )]
[(, long, ), x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, int, x, ), {, this, (]
[), x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, int, x, ), {, this, (, field, ,]
[;, }, protected, Dfp, (, final, DfpField, field, ,, int, x, ), {, this, (, field, ,, (, long, )]
[field, ,, (, long, ), x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, long, x, ), {]
[(, long, ), x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, long, x, ), {, mant, =]
[x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, long, x, ), {, mant, =, new, int, []
[x, ), ;, }, protected, Dfp, (, final, DfpField, field, ,, long, x, ), {, mant, =, new, int, []
[final, DfpField, field, ,, long, x, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;]
[field, ,, long, x, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, nans, =]
[long, x, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, nans, =, FINITE, ;]
[long, x, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, nans, =, FINITE, ;]
[mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, nans, =, FINITE, ;, this, ., field, =]
[field, ., getRadixDigits, (, ), ], ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =]
[), ], ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (]
[), ], ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (]
[;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==]
[;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==]
[this, ., field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, ), {]
[field, =, field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =]
[field, ;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;]
[;, boolean, isLongMin, =, false, ;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++]
[;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (]
[;, if, (, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (]
[(, x, ==, Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <]
[Long, ., MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {]
[MIN_VALUE, ), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =]
[), {, isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -]
[isLongMin, =, true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -, 1, ;]
[true, ;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -, 1, ;, x, =]
[;, ++, x, ;, }, if, (, x, <, 0, ), {, sign, =, -, 1, ;, x, =, -]
[if, (, x, <, 0, ), {, sign, =, -, 1, ;, x, =, -, x, ;, }, else, {]
[x, <, 0, ), {, sign, =, -, 1, ;, x, =, -, x, ;, }, else, {, sign, =]
[), {, sign, =, -, 1, ;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }]
[sign, =, -, 1, ;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =]
[;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (]
[;, x, =, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (]
[=, -, x, ;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (, x, !=]
[;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {]
[;, }, else, {, sign, =, 1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {]
[sign, =, 1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (]
[1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,]
[1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,]
[1, ;, }, exp, =, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,]
[=, 0, ;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -]
[;, while, (, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,]
[(, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,]
[(, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,]
[(, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,]
[(, x, !=, 0, ), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,]
[), {, System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -]
[System, ., arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -]
[arraycopy, (, mant, ,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,]
[,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;]
[,, mant, ., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;]
[., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, []
[., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, []
[., length, -, exp, ,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, []
[,, mant, ,, mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -]
[mant, ., length, -, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =]
[-, 1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, )]
[1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (]
[1, -, exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (]
[exp, ,, exp, ), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x, %]
[), ;, mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;]
[mant, [, mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;, x, /=]
[mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;]
[mant, ., length, -, 1, ], =, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;]
[=, (, int, ), (, x, %, RADIX, ), ;, x, /=, RADIX, ;, exp, ++, ;, }, if, (]
[), ;, x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =]
[x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;]
[x, /=, RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;]
[RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <]
[RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <]
[RADIX, ;, exp, ++, ;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <]
[;, }, if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -]
[if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;]
[if, (, isLongMin, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;]
[(, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, if, (]
[i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, if, (, mant, []
[;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=]
[mant, ., length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {]
[mant, ., length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {]
[mant, ., length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {]
[length, -, 1, ;, i, ++, ), {, if, (, mant, [, i, ], !=, 0, ), {, mant, []
[], ++, ;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x, ), {]
[;, break, ;, }, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x, ), {, mant, =]
[}, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x, ), {, mant, =, new, int, []
[}, }, }, }, protected, Dfp, (, final, DfpField, field, ,, double, x, ), {, mant, =, new, int, []
[final, DfpField, field, ,, double, x, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;]
[field, ,, double, x, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =]
[double, x, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;]
[), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =]
[mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;]
[new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =]
[[, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;]
[[, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;]
[(, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =]
[=, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, long, bits, =]
[=, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, long, bits, =]
[=, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (]
[;, this, ., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =]
[;, this, ., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =]
[., field, =, field, ;, long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &]
[long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =]
[long, bits, =, Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =]
[Double, ., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, )]
[., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (]
[., doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (]
[doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (]
[doubleToLongBits, (, x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (]
[x, ), ;, long, mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (, bits, &]
[mantissa, =, bits, &, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >]
[&, 0x000fffffffffffffL, ;, int, exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -]
[exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;, if, (]
[exponent, =, (, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;, if, (]
[(, int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;, if, (, exponent, ==]
[int, ), (, (, bits, &, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;, if, (, exponent, ==, -]
[&, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (]
[&, 0x7ff0000000000000L, ), >, >, 52, ), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (]
[), >, >, 52, ), -, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==]
[-, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (]
[-, 1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (]
[1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (, (]
[1023, ;, if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (, (]
[if, (, exponent, ==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (, (, bits, &]
[==, -, 1023, ), {, if, (, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=]
[), {, if, (, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {]
[if, (, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, sign, =]
[(, x, ==, 0, ), {, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, sign, =, -]
[if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }]
[if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }]
[0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (]
[0x8000000000000000L, ), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (]
[), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (]
[), !=, 0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (]
[0, ), {, sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &]
[sign, =, -, 1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==]
[1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {]
[1, ;, }, return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {]
[return, ;, }, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent, --, ;]
[}, exponent, ++, ;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent, --, ;, mantissa, <<=]
[;, while, (, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }]
[(, (, mantissa, &, 0x0010000000000000L, ), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=]
[), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (]
[), ==, 0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (]
[0, ), {, exponent, --, ;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==]
[;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (]
[;, mantissa, <<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (]
[<<=, 1, ;, }, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (, x, !=]
[}, mantissa, &=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (, x, !=, x, ), {]
[&=, 0x000fffffffffffffL, ;, }, if, (, exponent, ==, 1024, ), {, if, (, x, !=, x, ), {, sign, =]
[}, if, (, exponent, ==, 1024, ), {, if, (, x, !=, x, ), {, sign, =, (, byte, )]
[(, exponent, ==, 1024, ), {, if, (, x, !=, x, ), {, sign, =, (, byte, ), 1, ;]
[==, 1024, ), {, if, (, x, !=, x, ), {, sign, =, (, byte, ), 1, ;, nans, =]
[x, !=, x, ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (]
[x, !=, x, ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (]
[x, ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (, x, <]
[sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (, x, <, 0, ), {]
[(, byte, ), 1, ;, nans, =, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign, =]
[1, ;, nans, =, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, )]
[;, nans, =, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, ), -]
[=, QNAN, ;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, ), -, 1, ;]
[;, }, else, if, (, x, <, 0, ), {, sign, =, (, byte, ), -, 1, ;, nans, =]
[x, <, 0, ), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {]
[0, ), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign, =]
[sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign, =, (, byte, )]
[(, byte, ), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign, =, (, byte, ), 1, ;]
[), -, 1, ;, nans, =, INFINITE, ;, }, else, {, sign, =, (, byte, ), 1, ;, nans, =]
[else, {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =]
[=, (, byte, ), 1, ;, nans, =, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (]
[byte, ), 1, ;, nans, =, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,]
[;, nans, =, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;]
[=, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =]
[=, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =]
[=, INFINITE, ;, }, return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =]
[return, ;, }, Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =, xdfp, ., divide, (]
[Dfp, xdfp, =, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =, xdfp, ., divide, (, new, Dfp, (]
[=, new, Dfp, (, field, ,, mantissa, ), ;, xdfp, =, xdfp, ., divide, (, new, Dfp, (, field, ,]
[mantissa, ), ;, xdfp, =, xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (]
[mantissa, ), ;, xdfp, =, xdfp, ., divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (]
[divide, (, new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), ), ;]
[new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), ), ;, xdfp, =]
[new, Dfp, (, field, ,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), ), ;, xdfp, =]
[,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (]
[,, 4503599627370496l, ), ), ., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (]
[., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow, (]
[., add, (, field, ., getOne, (, ), ), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow, (]
[(, ), ), ;, xdfp, =, xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,]
[xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (]
[xdfp, ., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (]
[., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (, (]
[., multiply, (, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (, (]
[(, DfpMath, ., pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (, (, bits, &]
[pow, (, field, ., getTwo, (, ), ,, exponent, ), ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=]
[., getTwo, (, ), ,, exponent, ), ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {]
[(, ), ,, exponent, ), ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =]
[(, ), ,, exponent, ), ), ;, if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =]
[if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }]
[if, (, (, bits, &, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }]
[&, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (]
[&, 0x8000000000000000L, ), !=, 0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (]
[0, ), {, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,]
[{, xdfp, =, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,]
[=, xdfp, ., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,]
[., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,]
[., negate, (, ), ;, }, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,]
[}, System, ., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;]
[., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =]
[., arraycopy, (, xdfp, ., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =]
[., mant, ,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;]
[,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =]
[,, 0, ,, mant, ,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =]
[,, 0, ,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;]
[,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;, nans, =]
[,, mant, ., length, ), ;, sign, =, xdfp, ., sign, ;, exp, =, xdfp, ., exp, ;, nans, =]
[=, xdfp, ., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {]
[., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =]
[., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =]
[., exp, ;, nans, =, xdfp, ., nans, ;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =]
[;, }, public, Dfp, (, final, Dfp, d, ), {, mant, =, d, ., mant, ., clone, (, ), ;]
[public, Dfp, (, final, Dfp, d, ), {, mant, =, d, ., mant, ., clone, (, ), ;, sign, =]
[public, Dfp, (, final, Dfp, d, ), {, mant, =, d, ., mant, ., clone, (, ), ;, sign, =]
[Dfp, d, ), {, mant, =, d, ., mant, ., clone, (, ), ;, sign, =, d, ., sign, ;]
[), {, mant, =, d, ., mant, ., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =]
[), {, mant, =, d, ., mant, ., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =]
[d, ., mant, ., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =, d, ., exp, ;]
[mant, ., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =]
[mant, ., clone, (, ), ;, sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =]
[), ;, sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =, d, ., nans, ;]
[sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =, d, ., nans, ;, field, =]
[sign, =, d, ., sign, ;, exp, =, d, ., exp, ;, nans, =, d, ., nans, ;, field, =]
[;, field, =, d, ., field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {]
[=, d, ., field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {, mant, =]
[field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {, mant, =, new, int, []
[field, ;, }, protected, Dfp, (, final, DfpField, field, ,, final, String, s, ), {, mant, =, new, int, []
[DfpField, field, ,, final, String, s, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;]
[,, final, String, s, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =]
[String, s, ), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;]
[), {, mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =]
[mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;]
[new, int, [, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =]
[[, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;]
[[, field, ., getRadixDigits, (, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;]
[(, ), ], ;, sign, =, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =]
[=, 1, ;, exp, =, 0, ;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, decimalFound, =]
[;, nans, =, FINITE, ;, this, ., field, =, field, ;, boolean, decimalFound, =, false, ;, final, int, rsize, =]
[., field, =, field, ;, boolean, decimalFound, =, false, ;, final, int, rsize, =, 4, ;, final, int, offset, =]
[false, ;, final, int, rsize, =, 4, ;, final, int, offset, =, 4, ;, final, char, [, ], striped, =]
[int, rsize, =, 4, ;, final, int, offset, =, 4, ;, final, char, [, ], striped, =, new, char, []
[int, rsize, =, 4, ;, final, int, offset, =, 4, ;, final, char, [, ], striped, =, new, char, []
[int, rsize, =, 4, ;, final, int, offset, =, 4, ;, final, char, [, ], striped, =, new, char, []
[;, final, int, offset, =, 4, ;, final, char, [, ], striped, =, new, char, [, getRadixDigits, (, ), *]
[int, offset, =, 4, ;, final, char, [, ], striped, =, new, char, [, getRadixDigits, (, ), *, rsize, +]
[int, offset, =, 4, ;, final, char, [, ], striped, =, new, char, [, getRadixDigits, (, ), *, rsize, +]
[=, 4, ;, final, char, [, ], striped, =, new, char, [, getRadixDigits, (, ), *, rsize, +, offset, *]
[[, ], striped, =, new, char, [, getRadixDigits, (, ), *, rsize, +, offset, *, 2, ], ;, if, (]
[[, ], striped, =, new, char, [, getRadixDigits, (, ), *, rsize, +, offset, *, 2, ], ;, if, (]
[new, char, [, getRadixDigits, (, ), *, rsize, +, offset, *, 2, ], ;, if, (, s, ., equals, (]
[(, ), *, rsize, +, offset, *, 2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {]
[*, rsize, +, offset, *, 2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =]
[offset, *, 2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, )]
[2, ], ;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;]
[;, if, (, s, ., equals, (, POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans, =]
[POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (]
[POS_INFINITY_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (]
[sign, =, (, byte, ), 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (]
[), 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {]
[;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =]
[INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =, (, byte, )]
[;, return, ;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =, (, byte, ), -]
[;, }, if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =, (, byte, ), -, 1, ;]
[if, (, s, ., equals, (, NEG_INFINITY_STRING, ), ), {, sign, =, (, byte, ), -, 1, ;, nans, =]
[), ), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (]
[), ), {, sign, =, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (]
[=, (, byte, ), -, 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (]
[-, 1, ;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {]
[;, nans, =, INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =]
[INFINITE, ;, return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =, (, byte, )]
[return, ;, }, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =, (, byte, ), 1, ;]
[}, if, (, s, ., equals, (, NAN_STRING, ), ), {, sign, =, (, byte, ), 1, ;, nans, =]
[), ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, return, ;, }, int, p, =]
[), ), {, sign, =, (, byte, ), 1, ;, nans, =, QNAN, ;, return, ;, }, int, p, =]
[=, (, byte, ), 1, ;, nans, =, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (]
[;, nans, =, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (]
[;, nans, =, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (]
[=, QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (, p, ==]
[QNAN, ;, return, ;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (, p, ==, -]
[;, }, int, p, =, s, ., indexOf, (, "e", ), ;, if, (, p, ==, -, 1, ), {]
[int, p, =, s, ., indexOf, (, "e", ), ;, if, (, p, ==, -, 1, ), {, p, =]
[int, p, =, s, ., indexOf, (, "e", ), ;, if, (, p, ==, -, 1, ), {, p, =]
[., indexOf, (, "e", ), ;, if, (, p, ==, -, 1, ), {, p, =, s, ., indexOf, (]
[1, ), {, p, =, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =]
[=, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (]
[=, s, ., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (]
[., indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=]
[indexOf, (, "E", ), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=, -]
[), ;, }, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=, -, 1, ), {]
[}, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=, -, 1, ), {, fpdecimal, =]
[}, final, String, fpdecimal, ;, int, sciexp, =, 0, ;, if, (, p, !=, -, 1, ), {, fpdecimal, =]
[;, int, sciexp, =, 0, ;, if, (, p, !=, -, 1, ), {, fpdecimal, =, s, ., substring, (]
[sciexp, =, 0, ;, if, (, p, !=, -, 1, ), {, fpdecimal, =, s, ., substring, (, 0, ,]
[p, !=, -, 1, ), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =]
[p, !=, -, 1, ), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =]
[), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (]
[), {, fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (]
[fpdecimal, =, s, ., substring, (, 0, ,, p, ), ;, String, fpexp, =, s, ., substring, (, p, +]
[0, ,, p, ), ;, String, fpexp, =, s, ., substring, (, p, +, 1, ), ;, boolean, negative, =]
[=, s, ., substring, (, p, +, 1, ), ;, boolean, negative, =, false, ;, for, (, int, i, =]
[., substring, (, p, +, 1, ), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;]
[., substring, (, p, +, 1, ), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;]
[(, p, +, 1, ), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[(, p, +, 1, ), ;, boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <, fpexp, ., length, (, ), ;]
[boolean, negative, =, false, ;, for, (, int, i, =, 0, ;, i, <, fpexp, ., length, (, ), ;]
[(, int, i, =, 0, ;, i, <, fpexp, ., length, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, fpexp, ., length, (, ), ;, i, ++, ), {, if, (]
[(, int, i, =, 0, ;, i, <, fpexp, ., length, (, ), ;, i, ++, ), {, if, (]
[0, ;, i, <, fpexp, ., length, (, ), ;, i, ++, ), {, if, (, fpexp, ., charAt, (]
[<, fpexp, ., length, (, ), ;, i, ++, ), {, if, (, fpexp, ., charAt, (, i, ), ==]
[length, (, ), ;, i, ++, ), {, if, (, fpexp, ., charAt, (, i, ), ==, '-', ), {]
[), ;, i, ++, ), {, if, (, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =]
[(, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (]
[(, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (]
[(, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (]
[(, fpexp, ., charAt, (, i, ), ==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (]
[(, i, ), ==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (]
[==, '-', ), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=]
[), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&]
[), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&]
[), {, negative, =, true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&]
[true, ;, continue, ;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (]
[;, }, if, (, fpexp, ., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=]
[(, fpexp, ., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {]
[., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =]
[., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =]
[., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =]
[., charAt, (, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =]
[(, i, ), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *]
[), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +]
[), >=, '0', &&, fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +]
[fpexp, ., charAt, (, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (]
[(, i, ), <=, '9', ), {, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -]
[{, sciexp, =, sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (]
[sciexp, *, 10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, ), {]
[10, +, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, ), {, sciexp, =]
[+, fpexp, ., charAt, (, i, ), -, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -]
[), -, '0', ;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {]
['0', ;, }, }, if, (, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =]
[(, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =, s, ;, }, if, (]
[(, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =, s, ;, }, if, (]
[(, negative, ), {, sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =, s, ;, }, if, (]
[sciexp, =, -, sciexp, ;, }, }, else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (]
[sciexp, ;, }, }, else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=]
[;, }, }, else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -]
[else, {, fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -, 1, ), {]
[fpdecimal, =, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -, 1, ), {, sign, =]
[=, s, ;, }, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -, 1, ), {, sign, =, -]
[}, if, (, fpdecimal, ., indexOf, (, "-", ), !=, -, 1, ), {, sign, =, -, 1, ;, }]
[(, fpdecimal, ., indexOf, (, "-", ), !=, -, 1, ), {, sign, =, -, 1, ;, }, p, =]
["-", ), !=, -, 1, ), {, sign, =, -, 1, ;, }, p, =, 0, ;, int, decimalPos, =]
[1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (]
[1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (]
[1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (]
[1, ;, }, p, =, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (]
[=, 0, ;, int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (]
[int, decimalPos, =, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (, p, ), >=]
[=, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (, p, ), >=, '1', &&]
[=, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (, p, ), >=, '1', &&]
[=, 0, ;, for, (, ;, ;, ), {, if, (, fpdecimal, ., charAt, (, p, ), >=, '1', &&]
[(, ;, ;, ), {, if, (, fpdecimal, ., charAt, (, p, ), >=, '1', &&, fpdecimal, ., charAt, (]
[), {, if, (, fpdecimal, ., charAt, (, p, ), >=, '1', &&, fpdecimal, ., charAt, (, p, ), <=]
[p, ), >=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (]
[p, ), >=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (]
[>=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&]
[>=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&]
[>=, '1', &&, fpdecimal, ., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&]
[., charAt, (, p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (]
[p, ), <=, '9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==]
['9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {]
['9', ), {, break, ;, }, if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {]
[if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos, --, ;, }, if, (]
[if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos, --, ;, }, if, (]
[if, (, decimalFound, &&, fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos, --, ;, }, if, (]
[fpdecimal, ., charAt, (, p, ), ==, '0', ), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (]
[(, p, ), ==, '0', ), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==]
[==, '0', ), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {]
[), {, decimalPos, --, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =]
[--, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }]
[--, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }]
[fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }, p, ++, ;, if, (]
[fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }, p, ++, ;, if, (]
[charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }, p, ++, ;, if, (, p, ==]
[charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, }, p, ++, ;, if, (, p, ==]
[++, ;, if, (, p, ==, fpdecimal, ., length, (, ), ), {, break, ;, }, }, int, q, =]
[if, (, p, ==, fpdecimal, ., length, (, ), ), {, break, ;, }, }, int, q, =, offset, ;]
[if, (, p, ==, fpdecimal, ., length, (, ), ), {, break, ;, }, }, int, q, =, offset, ;]
[p, ==, fpdecimal, ., length, (, ), ), {, break, ;, }, }, int, q, =, offset, ;, striped, []
[., length, (, ), ), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0, ], =]
[(, ), ), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;]
[(, ), ), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;]
[), {, break, ;, }, }, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;, striped, []
[;, }, }, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;, striped, [, 1, ], =]
[}, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;]
[}, int, q, =, offset, ;, striped, [, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;]
[q, =, offset, ;, striped, [, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, []
[;, striped, [, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =]
[[, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;]
[[, 0, ], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;]
[], =, '0', ;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;, striped, []
[;, striped, [, 1, ], =, '0', ;, striped, [, 2, ], =, '0', ;, striped, [, 3, ], =]
[=, '0', ;, striped, [, 2, ], =, '0', ;, striped, [, 3, ], =, '0', ;, int, significantDigits, =]
[striped, [, 3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (]
[striped, [, 3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (]
[3, ], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (, p, ==]
[], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (, p, ==, (]
[], =, '0', ;, int, significantDigits, =, 0, ;, for, (, ;, ;, ), {, if, (, p, ==, (]
[), {, if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (]
[), {, if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (]
[if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (, q, ==]
[if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (, q, ==]
[if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (, q, ==]
[if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (, q, ==]
[if, (, p, ==, (, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (, q, ==]
[(, fpdecimal, ., length, (, ), ), ), {, break, ;, }, if, (, q, ==, mant, ., length, *]
[., length, (, ), ), ), {, break, ;, }, if, (, q, ==, mant, ., length, *, rsize, +]
[(, ), ), ), {, break, ;, }, if, (, q, ==, mant, ., length, *, rsize, +, offset, +]
[if, (, q, ==, mant, ., length, *, rsize, +, offset, +, 1, ), {, break, ;, }, if, (]
[if, (, q, ==, mant, ., length, *, rsize, +, offset, +, 1, ), {, break, ;, }, if, (]
[if, (, q, ==, mant, ., length, *, rsize, +, offset, +, 1, ), {, break, ;, }, if, (]
[mant, ., length, *, rsize, +, offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (]
[*, rsize, +, offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==]
[offset, +, 1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {]
[1, ), {, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =]
[{, break, ;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;]
[;, }, if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, decimalPos, =]
[if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;]
[if, (, fpdecimal, ., charAt, (, p, ), ==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;]
[==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (]
[==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (]
[==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (]
[==, '.', ), {, decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (]
[decimalFound, =, true, ;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (]
[;, decimalPos, =, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <]
[=, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||]
[=, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||]
[=, significantDigits, ;, p, ++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||]
[++, ;, continue, ;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (]
[;, }, if, (, fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (, p, ), >]
[(, fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {]
[(, fpdecimal, ., charAt, (, p, ), <, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {]
[), <, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }]
[), <, '0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }]
['0', ||, fpdecimal, ., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }, striped, []
[., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q, ], =]
[., charAt, (, p, ), >, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q, ], =]
[), >, '9', ), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (]
[), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;]
[), {, p, ++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;]
[++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;]
[++, ;, continue, ;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;]
[;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p, ++, ;]
[;, }, striped, [, q, ], =, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p, ++, ;]
[=, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (]
[=, fpdecimal, ., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (]
[., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&]
[., charAt, (, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&]
[(, p, ), ;, q, ++, ;, p, ++, ;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=]
[;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {]
[;, significantDigits, ++, ;, }, if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {]
[if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {, q, --, ;, if, (]
[if, (, decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {, q, --, ;, if, (]
[decimalFound, &&, q, !=, offset, ), {, for, (, ;, ;, ), {, q, --, ;, if, (, q, ==]
[(, ;, ;, ), {, q, --, ;, if, (, q, ==, offset, ), {, break, ;, }, if, (]
[(, ;, ;, ), {, q, --, ;, if, (, q, ==, offset, ), {, break, ;, }, if, (]
[(, ;, ;, ), {, q, --, ;, if, (, q, ==, offset, ), {, break, ;, }, if, (]
[;, ), {, q, --, ;, if, (, q, ==, offset, ), {, break, ;, }, if, (, striped, []
[q, --, ;, if, (, q, ==, offset, ), {, break, ;, }, if, (, striped, [, q, ], ==]
[if, (, q, ==, offset, ), {, break, ;, }, if, (, striped, [, q, ], ==, '0', ), {]
[if, (, q, ==, offset, ), {, break, ;, }, if, (, striped, [, q, ], ==, '0', ), {]
[[, q, ], ==, '0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (]
[[, q, ], ==, '0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (]
[], ==, '0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&]
[], ==, '0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&]
['0', ), {, significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits, ==]
[significantDigits, --, ;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits, ==, 0, ), {]
[;, }, else, {, break, ;, }, }, }, if, (, decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos, =]
[;, }, }, }, if, (, decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos, =, 0, ;, }, if, (]
[}, }, }, if, (, decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos, =, 0, ;, }, if, (, !]
[if, (, decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {]
[decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =]
[decimalFound, &&, significantDigits, ==, 0, ), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =]
[significantDigits, ==, 0, ), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -]
[), {, decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }]
[decimalPos, =, 0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =]
[0, ;, }, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;]
[}, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p, =]
[}, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p, =]
[}, if, (, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p, =]
[(, !, decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -]
[decimalFound, ), {, decimalPos, =, q, -, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +]
[=, q, -, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (]
[=, q, -, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (]
[-, offset, ;, }, q, =, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >]
[=, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (]
[=, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (]
[=, offset, ;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (]
[;, p, =, significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (, striped, []
[significantDigits, -, 1, +, offset, ;, while, (, p, >, q, ), {, if, (, striped, [, p, ], !=]
[while, (, p, >, q, ), {, if, (, striped, [, p, ], !=, '0', ), {, break, ;, }]
[while, (, p, >, q, ), {, if, (, striped, [, p, ], !=, '0', ), {, break, ;, }]
[if, (, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =]
[if, (, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =]
[(, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (]
[(, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (]
[(, striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (]
[striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (, (]
[striped, [, p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (, (]
[p, ], !=, '0', ), {, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *]
['0', ), {, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100, ), -]
[{, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos, -]
[{, break, ;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos, -]
[;, }, p, --, ;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %]
[--, ;, }, int, i, =, (, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %]
[}, int, i, =, (, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;]
[i, =, (, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=]
[(, (, rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;]
[rsize, *, 100, ), -, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=]
[-, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (]
[-, decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (]
[decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (]
[decimalPos, -, sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (]
[sciexp, %, rsize, ), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -]
[), %, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <]
[%, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (]
[%, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (]
[%, rsize, ;, q, -=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (]
[-=, i, ;, decimalPos, +=, i, ;, while, (, (, p, -, q, ), <, (, mant, ., length, *]
[;, while, (, (, p, -, q, ), <, (, mant, ., length, *, rsize, ), ), {, for, (]
[(, (, p, -, q, ), <, (, mant, ., length, *, rsize, ), ), {, for, (, i, =]
[p, -, q, ), <, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;]
[p, -, q, ), <, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;]
[q, ), <, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <]
[<, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;]
[<, (, mant, ., length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;]
[length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {]
[length, *, rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {]
[rsize, ), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, []
[), ), {, for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, [, ++]
[for, (, i, =, 0, ;, i, <, rsize, ;, i, ++, ), {, striped, [, ++, p, ], =]
[i, <, rsize, ;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (]
[rsize, ;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =]
[rsize, ;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =]
[rsize, ;, i, ++, ), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =]
[), {, striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant, ., length, -]
[striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;]
[striped, [, ++, p, ], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;]
[++, p, ], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=]
[], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[], =, '0', ;, }, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[}, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[}, }, for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[for, (, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, []
[=, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =]
[=, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =]
[=, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =]
[=, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =]
[=, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =]
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (]
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (]
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (]
[length, -, 1, ;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (, striped, []
[;, i, >=, 0, ;, i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -]
[0, ;, i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *]
[i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +]
[i, --, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +]
[--, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (]
[--, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (]
[--, ), {, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (]
[{, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, []
[{, mant, [, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, []
[[, i, ], =, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +]
[=, (, striped, [, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -]
[[, q, ], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *]
[], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +]
[], -, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +]
[-, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (]
[-, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (]
[-, '0', ), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (]
[), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, []
[), *, 1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, []
[1000, +, (, striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +]
[striped, [, q, +, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -]
[+, 1, ], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *]
[], -, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +]
[-, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (]
[-, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (]
[-, '0', ), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (]
[), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, []
[), *, 100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, []
[100, +, (, striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +]
[striped, [, q, +, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -]
[+, 2, ], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;]
[], -, '0', ), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=]
[), *, 10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }]
[10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =]
[10, +, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =]
[+, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (]
[+, (, striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (]
[striped, [, q, +, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +]
[+, 3, ], -, '0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /]
['0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (]
['0', ), ;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (]
[;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <]
[;, q, +=, 4, ;, }, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <]
[}, exp, =, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {]
[=, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (]
[=, (, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (]
[(, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (]
[(, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (]
[(, decimalPos, +, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (]
[+, sciexp, ), /, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, []
[/, rsize, ;, if, (, q, <, striped, ., length, ), {, round, (, (, striped, [, q, ], -]
[if, (, q, <, striped, ., length, ), {, round, (, (, striped, [, q, ], -, '0', ), *]
[), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {]
[), ;, }, }, protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {]
[protected, Dfp, (, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {, this, ., field, =]
[(, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {, this, ., field, =, field, ;]
[(, final, DfpField, field, ,, final, byte, sign, ,, final, byte, nans, ), {, this, ., field, =, field, ;]
[,, final, byte, sign, ,, final, byte, nans, ), {, this, ., field, =, field, ;, this, ., mant, =]
[sign, ,, final, byte, nans, ), {, this, ., field, =, field, ;, this, ., mant, =, new, int, []
[sign, ,, final, byte, nans, ), {, this, ., field, =, field, ;, this, ., mant, =, new, int, []
[this, ., field, =, field, ;, this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;]
[this, ., field, =, field, ;, this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;]
[field, ;, this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =]
[this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;]
[this, ., mant, =, new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;]
[new, int, [, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;, this, ., exp, =]
[[, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;, this, ., exp, =, 0, ;]
[[, field, ., getRadixDigits, (, ), ], ;, this, ., sign, =, sign, ;, this, ., exp, =, 0, ;]
[(, ), ], ;, this, ., sign, =, sign, ;, this, ., exp, =, 0, ;, this, ., nans, =]
[this, ., exp, =, 0, ;, this, ., nans, =, nans, ;, }, public, Dfp, newInstance, (, ), {, return]
[=, 0, ;, this, ., nans, =, nans, ;, }, public, Dfp, newInstance, (, ), {, return, new, Dfp, (]
[return, new, Dfp, (, getField, (, ), ), ;, }, public, Dfp, newInstance, (, final, byte, x, ), {, return]
[(, getField, (, ), ), ;, }, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, Dfp, (]
[), ;, }, public, Dfp, newInstance, (, final, byte, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[Dfp, (, getField, (, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, int, x, ), {, return]
[(, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, int, x, ), {, return, new, Dfp, (]
[), ;, }, public, Dfp, newInstance, (, final, int, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[Dfp, (, getField, (, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, long, x, ), {, return]
[(, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, long, x, ), {, return, new, Dfp, (]
[), ;, }, public, Dfp, newInstance, (, final, long, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[Dfp, (, getField, (, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, double, x, ), {, return]
[(, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, double, x, ), {, return, new, Dfp, (]
[), ;, }, public, Dfp, newInstance, (, final, double, x, ), {, return, new, Dfp, (, getField, (, ), ,]
[(, getField, (, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (]
[(, getField, (, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (]
[(, getField, (, ), ,, x, ), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (]
[), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[), ;, }, public, Dfp, newInstance, (, final, Dfp, d, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[d, ), {, if, (, field, ., getRadixDigits, (, ), !=, d, ., field, ., getRadixDigits, (, ), ), {]
[d, ), {, if, (, field, ., getRadixDigits, (, ), !=, d, ., field, ., getRadixDigits, (, ), ), {]
[(, field, ., getRadixDigits, (, ), !=, d, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[(, field, ., getRadixDigits, (, ), !=, d, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,]
[), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,]
[nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, ), ;, }, return]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEW_INSTANCE_TRAP, ,, d, ,, result, ), ;, }, return, new, Dfp, (]
[;, }, return, new, Dfp, (, d, ), ;, }, public, Dfp, newInstance, (, final, String, s, ), {, return]
[new, Dfp, (, d, ), ;, }, public, Dfp, newInstance, (, final, String, s, ), {, return, new, Dfp, (]
[(, d, ), ;, }, public, Dfp, newInstance, (, final, String, s, ), {, return, new, Dfp, (, field, ,]
[field, ,, s, ), ;, }, public, Dfp, newInstance, (, final, byte, sig, ,, final, byte, code, ), {, return]
[field, ,, s, ), ;, }, public, Dfp, newInstance, (, final, byte, sig, ,, final, byte, code, ), {, return]
[;, }, public, Dfp, newInstance, (, final, byte, sig, ,, final, byte, code, ), {, return, field, ., newDfp, (]
[public, Dfp, newInstance, (, final, byte, sig, ,, final, byte, code, ), {, return, field, ., newDfp, (, sig, ,]
[), {, return, field, ., newDfp, (, sig, ,, code, ), ;, }, public, DfpField, getField, (, ), {, return]
[), ;, }, public, DfpField, getField, (, ), {, return, field, ;, }, public, int, getRadixDigits, (, ), {, return]
[), ;, }, public, DfpField, getField, (, ), {, return, field, ;, }, public, int, getRadixDigits, (, ), {, return]
[int, getRadixDigits, (, ), {, return, field, ., getRadixDigits, (, ), ;, }, public, Dfp, getZero, (, ), {, return]
[int, getRadixDigits, (, ), {, return, field, ., getRadixDigits, (, ), ;, }, public, Dfp, getZero, (, ), {, return]
[Dfp, getZero, (, ), {, return, field, ., getZero, (, ), ;, }, public, Dfp, getOne, (, ), {, return]
[Dfp, getZero, (, ), {, return, field, ., getZero, (, ), ;, }, public, Dfp, getOne, (, ), {, return]
[Dfp, getOne, (, ), {, return, field, ., getOne, (, ), ;, }, public, Dfp, getTwo, (, ), {, return]
[Dfp, getOne, (, ), {, return, field, ., getOne, (, ), ;, }, public, Dfp, getTwo, (, ), {, return]
[{, return, field, ., getTwo, (, ), ;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =]
[{, return, field, ., getTwo, (, ), ;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =]
[{, return, field, ., getTwo, (, ), ;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =]
[getTwo, (, ), ;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length, -]
[), ;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length, -, 1, ;]
[), ;, }, protected, void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length, -, 1, ;]
[}, protected, void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length, -, 1, ;, i, >]
[void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length, -, 1, ;, i, >, 0, ;]
[void, shiftLeft, (, ), {, for, (, int, i, =, mant, ., length, -, 1, ;, i, >, 0, ;]
[{, for, (, int, i, =, mant, ., length, -, 1, ;, i, >, 0, ;, i, --, ), {]
[{, for, (, int, i, =, mant, ., length, -, 1, ;, i, >, 0, ;, i, --, ), {]
[(, int, i, =, mant, ., length, -, 1, ;, i, >, 0, ;, i, --, ), {, mant, []
[=, mant, ., length, -, 1, ;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =]
[=, mant, ., length, -, 1, ;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =]
[., length, -, 1, ;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =, mant, []
[., length, -, 1, ;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =, mant, []
[-, 1, ;, i, >, 0, ;, i, --, ), {, mant, [, i, ], =, mant, [, i, -]
[>, 0, ;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }]
[>, 0, ;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }]
[;, i, --, ), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, []
[), {, mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, [, 0, ], =]
[mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, [, 0, ], =, 0, ;]
[mant, [, i, ], =, mant, [, i, -, 1, ], ;, }, mant, [, 0, ], =, 0, ;]
[0, ], =, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =]
[=, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;]
[=, 0, ;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;]
[;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <]
[;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <]
[;, exp, --, ;, }, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <]
[}, protected, void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -]
[void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;]
[void, shiftRight, (, ), {, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;]
[{, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {]
[{, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, mant, []
[=, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =]
[=, 0, ;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =]
[;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, []
[;, i, <, mant, ., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, []
[<, mant, ., length, -, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +]
[-, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }]
[-, 1, ;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }]
[;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, []
[;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, []
[;, i, ++, ), {, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, []
[{, mant, [, i, ], =, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length, -]
[i, ], =, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length, -, 1, ], =]
[=, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;]
[=, mant, [, i, +, 1, ], ;, }, mant, [, mant, ., length, -, 1, ], =, 0, ;]
[1, ], =, 0, ;, exp, ++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =]
[exp, ++, ;, }, protected, int, align, (, int, e, ), {, int, lostdigit, =, 0, ;, boolean, inexact, =]
[int, align, (, int, e, ), {, int, lostdigit, =, 0, ;, boolean, inexact, =, false, ;, int, diff, =]
[int, align, (, int, e, ), {, int, lostdigit, =, 0, ;, boolean, inexact, =, false, ;, int, diff, =]
[(, int, e, ), {, int, lostdigit, =, 0, ;, boolean, inexact, =, false, ;, int, diff, =, exp, -]
[int, lostdigit, =, 0, ;, boolean, inexact, =, false, ;, int, diff, =, exp, -, e, ;, int, adiff, =]
[;, boolean, inexact, =, false, ;, int, diff, =, exp, -, e, ;, int, adiff, =, diff, ;, if, (]
[;, boolean, inexact, =, false, ;, int, diff, =, exp, -, e, ;, int, adiff, =, diff, ;, if, (]
[inexact, =, false, ;, int, diff, =, exp, -, e, ;, int, adiff, =, diff, ;, if, (, adiff, <]
[;, int, diff, =, exp, -, e, ;, int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {]
[diff, =, exp, -, e, ;, int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {, adiff, =]
[=, exp, -, e, ;, int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {, adiff, =, -]
[int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {, adiff, =, -, adiff, ;, }, if, (]
[int, adiff, =, diff, ;, if, (, adiff, <, 0, ), {, adiff, =, -, adiff, ;, }, if, (]
[=, diff, ;, if, (, adiff, <, 0, ), {, adiff, =, -, adiff, ;, }, if, (, diff, ==]
[(, adiff, <, 0, ), {, adiff, =, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return]
[{, adiff, =, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (]
[{, adiff, =, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (]
[=, -, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >]
[-, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >, (]
[-, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >, (]
[-, adiff, ;, }, if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >, (]
[if, (, diff, ==, 0, ), {, return, 0, ;, }, if, (, adiff, >, (, mant, ., length, +]
[0, ), {, return, 0, ;, }, if, (, adiff, >, (, mant, ., length, +, 1, ), ), {]
[0, ), {, return, 0, ;, }, if, (, adiff, >, (, mant, ., length, +, 1, ), ), {]
[0, ;, }, if, (, adiff, >, (, mant, ., length, +, 1, ), ), {, Arrays, ., fill, (]
[}, if, (, adiff, >, (, mant, ., length, +, 1, ), ), {, Arrays, ., fill, (, mant, ,]
[adiff, >, (, mant, ., length, +, 1, ), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;]
[(, mant, ., length, +, 1, ), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =]
[., length, +, 1, ), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;]
[., length, +, 1, ), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;]
[), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (]
[), ), {, Arrays, ., fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (]
[fill, (, mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (]
[mant, ,, 0, ), ;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (]
[;, exp, =, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[=, e, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,]
[;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,]
[(, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return]
[DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =]
[FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;]
[FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;]
[ALIGN_TRAP, ,, this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <]
[this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;]
[this, ,, this, ), ;, return, 0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;]
[0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;, i, ++, ), {, if, (]
[0, ;, }, for, (, int, i, =, 0, ;, i, <, adiff, ;, i, ++, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, adiff, ;, i, ++, ), {, if, (, diff, <]
[=, 0, ;, i, <, adiff, ;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (]
[=, 0, ;, i, <, adiff, ;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (]
[;, i, <, adiff, ;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=]
[adiff, ;, i, ++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {]
[i, ++, ), {, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =]
[{, if, (, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }]
[(, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }, lostdigit, =]
[(, diff, <, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }, lostdigit, =]
[<, 0, ), {, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }, lostdigit, =, mant, []
[{, if, (, lostdigit, !=, 0, ), {, inexact, =, true, ;, }, lostdigit, =, mant, [, 0, ], ;]
[{, inexact, =, true, ;, }, lostdigit, =, mant, [, 0, ], ;, shiftRight, (, ), ;, }, else, {]
[mant, [, 0, ], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (]
[], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact, ), {]
[], ;, shiftRight, (, ), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact, ), {]
[), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact, ), {, field, ., setIEEEFlagsBits, (]
[), ;, }, else, {, shiftLeft, (, ), ;, }, }, if, (, inexact, ), {, field, ., setIEEEFlagsBits, (]
[shiftLeft, (, ), ;, }, }, if, (, inexact, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[), ;, }, }, if, (, inexact, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (]
[), ;, }, }, if, (, inexact, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (]
[if, (, inexact, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[inexact, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,]
[DfpField, ., FLAG_INEXACT, ), ;, dotrap, (, DfpField, ., FLAG_INEXACT, ,, ALIGN_TRAP, ,, this, ,, this, ), ;, }, return]
[,, this, ), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (]
[,, this, ), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (]
[,, this, ), ;, }, return, lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (]
[lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[lostdigit, ;, }, public, boolean, lessThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (]
[=, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,]
[result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||]
[result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {]
[result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {]
[false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, LESS_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (]
[,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,, x, ), <]
[(, this, ,, x, ), <, 0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (]
[(, this, ,, x, ), <, 0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (]
[(, this, ,, x, ), <, 0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (]
[0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[0, ;, }, public, boolean, greaterThan, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (]
[;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (]
[=, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,]
[result, ., nans, =, QNAN, ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (]
[., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||]
[., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||]
[result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {]
[result, ), ;, return, false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {]
[false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[false, ;, }, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[isNaN, (, ), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[), ||, x, ., isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[., FLAG_INVALID, ,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[,, GREATER_THAN_TRAP, ,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (]
[,, x, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, compare, (, this, ,, x, ), >]
[}, return, compare, (, this, ,, x, ), >, 0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (]
[,, x, ), >, 0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {]
[,, x, ), >, 0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {]
[0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[0, ;, }, public, boolean, negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[negativeOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (]
[(, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (, mant, []
[;, return, false, ;, }, return, (, sign, <, 0, ), ||, (, (, mant, [, mant, ., length, -]
[;, }, return, (, sign, <, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==]
[(, sign, <, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&]
[sign, <, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !]
[], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (]
[!, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {]
[!, isInfinite, (, ), ), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {]
[), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), ;, }, public, boolean, strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[strictlyNegative, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (]
[(, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (, mant, []
[;, return, false, ;, }, return, (, sign, <, 0, ), &&, (, (, mant, [, mant, ., length, -]
[;, }, return, (, sign, <, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=]
[(, sign, <, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||]
[1, ], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (]
[||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {]
[||, isInfinite, (, ), ), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {]
[), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), ;, }, public, boolean, positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[positiveOrNull, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (]
[(, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (, mant, []
[;, return, false, ;, }, return, (, sign, >, 0, ), ||, (, (, mant, [, mant, ., length, -]
[;, }, return, (, sign, >, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==]
[(, sign, >, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&]
[sign, >, 0, ), ||, (, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !]
[], ==, 0, ), &&, !, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (]
[!, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {]
[!, isInfinite, (, ), ), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {]
[), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), ;, }, public, boolean, strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[strictlyPositive, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >]
[,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (]
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (]
[(, getZero, (, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (]
[(, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (, mant, []
[(, ), ), ), ;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (, mant, []
[;, return, false, ;, }, return, (, sign, >, 0, ), &&, (, (, mant, [, mant, ., length, -]
[;, }, return, (, sign, >, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=]
[(, sign, >, 0, ), &&, (, (, mant, [, mant, ., length, -, 1, ], !=, 0, ), ||]
[], !=, 0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =]
[0, ), ||, isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (]
[isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;]
[isInfinite, (, ), ), ;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;]
[;, }, public, Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[Dfp, abs, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =, 1, ;, return]
[this, ), ;, result, ., sign, =, 1, ;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return]
[this, ), ;, result, ., sign, =, 1, ;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return]
[;, result, ., sign, =, 1, ;, return, result, ;, }, public, boolean, isInfinite, (, ), {, return, nans, ==]
[}, public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return]
[}, public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return]
[public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (]
[public, boolean, isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (]
[isInfinite, (, ), {, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==]
[{, return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==, QNAN, ), ||]
[return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==, QNAN, ), ||, (]
[return, nans, ==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==, QNAN, ), ||, (]
[==, INFINITE, ;, }, public, boolean, isNaN, (, ), {, return, (, nans, ==, QNAN, ), ||, (, nans, ==]
[nans, ==, QNAN, ), ||, (, nans, ==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (]
[(, nans, ==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {]
[(, nans, ==, SNAN, ), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {]
[), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[), ;, }, public, boolean, isZero, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (]
[isZero, (, ), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[), {, if, (, isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (]
[isNaN, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (]
[;, dotrap, (, DfpField, ., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[., FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[FLAG_INVALID, ,, LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (]
[LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, mant, []
[LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, mant, []
[LESS_THAN_TRAP, ,, this, ,, newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, mant, []
[newInstance, (, getZero, (, ), ), ), ;, return, false, ;, }, return, (, mant, [, mant, ., length, -]
[(, ), ), ), ;, return, false, ;, }, return, (, mant, [, mant, ., length, -, 1, ], ==]
[), ;, return, false, ;, }, return, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&]
[;, return, false, ;, }, return, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), &&, !]
[&&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[&&, !, isInfinite, (, ), ;, }, @, Override, public, boolean, equals, (, final, Object, other, ), {, if, (]
[public, boolean, equals, (, final, Object, other, ), {, if, (, other, instanceof, Dfp, ), {, final, Dfp, x, =]
[(, final, Object, other, ), {, if, (, other, instanceof, Dfp, ), {, final, Dfp, x, =, (, Dfp, )]
[), {, if, (, other, instanceof, Dfp, ), {, final, Dfp, x, =, (, Dfp, ), other, ;, if, (]
[), {, if, (, other, instanceof, Dfp, ), {, final, Dfp, x, =, (, Dfp, ), other, ;, if, (]
[), {, if, (, other, instanceof, Dfp, ), {, final, Dfp, x, =, (, Dfp, ), other, ;, if, (]
[other, instanceof, Dfp, ), {, final, Dfp, x, =, (, Dfp, ), other, ;, if, (, isNaN, (, ), ||]
[other, instanceof, Dfp, ), {, final, Dfp, x, =, (, Dfp, ), other, ;, if, (, isNaN, (, ), ||]
[Dfp, x, =, (, Dfp, ), other, ;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||]
[Dfp, x, =, (, Dfp, ), other, ;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||]
[Dfp, x, =, (, Dfp, ), other, ;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||]
[other, ;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=]
[other, ;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=]
[other, ;, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=]
[isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return]
[getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, compare, (]
[), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, compare, (, this, ,]
[., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, compare, (, this, ,, x, ), ==]
[(, ), ), {, return, false, ;, }, return, compare, (, this, ,, x, ), ==, 0, ;, }, return]
[,, x, ), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[,, x, ), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[,, x, ), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[,, x, ), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[,, x, ), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +]
[==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (]
[==, 0, ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<]
[false, ;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<, 8, ), +]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<, 8, ), +, (]
[;, }, @, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<, 8, ), +, (]
[@, Override, public, int, hashCode, (, ), {, return, 17, +, (, sign, <<, 8, ), +, (, nans, <<]
[int, hashCode, (, ), {, return, 17, +, (, sign, <<, 8, ), +, (, nans, <<, 16, ), +]
[(, ), {, return, 17, +, (, sign, <<, 8, ), +, (, nans, <<, 16, ), +, exp, +]
[(, ), {, return, 17, +, (, sign, <<, 8, ), +, (, nans, <<, 16, ), +, exp, +]
[17, +, (, sign, <<, 8, ), +, (, nans, <<, 16, ), +, exp, +, Arrays, ., hashCode, (]
[+, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (]
[+, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (]
[+, Arrays, ., hashCode, (, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (]
[(, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||]
[(, mant, ), ;, }, public, boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||]
[boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||]
[boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||]
[boolean, unequal, (, final, Dfp, x, ), {, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||]
[), {, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=]
[), {, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=]
[), {, if, (, isNaN, (, ), ||, x, ., isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=]
[isNaN, (, ), ||, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return]
[field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return]
[getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, greaterThan, (]
[!=, x, ., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, greaterThan, (, x, ), ||]
[., field, ., getRadixDigits, (, ), ), {, return, false, ;, }, return, greaterThan, (, x, ), ||, lessThan, (]
[x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (]
[x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (]
[x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (]
[x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (]
[x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (]
[x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (]
[x, ), ;, }, private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (]
[private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (, a, ., mant, []
[private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (, a, ., mant, []
[private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (, a, ., mant, []
[private, static, int, compare, (, final, Dfp, a, ,, final, Dfp, b, ), {, if, (, a, ., mant, []
[Dfp, a, ,, final, Dfp, b, ), {, if, (, a, ., mant, [, a, ., mant, ., length, -]
[final, Dfp, b, ), {, if, (, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==]
[b, ), {, if, (, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&]
[b, ), {, if, (, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&]
[b, ), {, if, (, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&]
[b, ), {, if, (, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&]
[(, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, []
[(, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, []
[(, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, []
[(, a, ., mant, [, a, ., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, []
[., mant, ., length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -]
[length, -, 1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==]
[1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&]
[1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&]
[1, ], ==, 0, &&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&]
[&&, b, ., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==]
[., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&]
[., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&]
[., mant, [, b, ., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&]
[., mant, ., length, -, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==]
[-, 1, ], ==, 0, &&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return]
[&&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (]
[&&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (]
[&&, a, ., nans, ==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (]
[==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=]
[==, FINITE, &&, b, ., nans, ==, FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=]
[FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (]
[FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (]
[FINITE, ), {, return, 0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (]
[0, ;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (, a, ., sign, ==]
[;, }, if, (, a, ., sign, !=, b, ., sign, ), {, if, (, a, ., sign, ==, -]
[a, ., sign, !=, b, ., sign, ), {, if, (, a, ., sign, ==, -, 1, ), {, return]
[., sign, !=, b, ., sign, ), {, if, (, a, ., sign, ==, -, 1, ), {, return, -]
[), {, if, (, a, ., sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return]
[sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (]
[sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (]
[sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (]
[sign, ==, -, 1, ), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (]
[), {, return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==]
[return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&]
[return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&]
[return, -, 1, ;, }, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&]
[}, else, {, return, 1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==]
[1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return]
[1, ;, }, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return]
[., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (]
[., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (]
[., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (]
[., nans, ==, INFINITE, &&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (]
[&&, b, ., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==]
[., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&]
[., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&]
[., nans, ==, FINITE, ), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&]
[), {, return, a, ., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==]
[., sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return]
[sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -]
[sign, ;, }, if, (, a, ., nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -]
[nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (]
[nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (]
[nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (]
[nans, ==, FINITE, &&, b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (]
[b, ., nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==]
[nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&]
[nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&]
[nans, ==, INFINITE, ), {, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&]
[{, return, -, b, ., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==]
[., sign, ;, }, if, (, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return]
[(, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (]
[(, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (]
[(, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (]
[(, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (]
[(, a, ., nans, ==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (]
[==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, []
[==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, []
[==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, []
[==, INFINITE, &&, b, ., nans, ==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, []
[==, INFINITE, ), {, return, 0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -]
[{, return, 0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=]
[0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&]
[0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&]
[0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&]
[0, ;, }, if, (, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&]
[(, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, []
[(, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, []
[(, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, []
[(, b, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, []
[., mant, ., length, -, 1, ], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -]
[length, -, 1, ], !=, 0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=]
[0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (]
[0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (]
[0, &&, a, ., mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (]
[mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (, a, ., exp, <]
[mant, [, b, ., mant, ., length, -, 1, ], !=, 0, ), {, if, (, a, ., exp, <]
[length, -, 1, ], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {, return]
[-, 1, ], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -]
[-, 1, ], !=, 0, ), {, if, (, a, ., exp, <, b, ., exp, ), {, return, -]
[if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }, if, (]
[if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }, if, (]
[if, (, a, ., exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }, if, (]
[exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }, if, (, a, ., exp, >]
[exp, <, b, ., exp, ), {, return, -, a, ., sign, ;, }, if, (, a, ., exp, >]
[{, return, -, a, ., sign, ;, }, if, (, a, ., exp, >, b, ., exp, ), {, return]
[{, return, -, a, ., sign, ;, }, if, (, a, ., exp, >, b, ., exp, ), {, return]
[., exp, >, b, ., exp, ), {, return, a, ., sign, ;, }, }, for, (, int, i, =]
[., exp, >, b, ., exp, ), {, return, a, ., sign, ;, }, }, for, (, int, i, =]
[., exp, >, b, ., exp, ), {, return, a, ., sign, ;, }, }, for, (, int, i, =]
[., exp, >, b, ., exp, ), {, return, a, ., sign, ;, }, }, for, (, int, i, =]
[), {, return, a, ., sign, ;, }, }, for, (, int, i, =, a, ., mant, ., length, -]
[return, a, ., sign, ;, }, }, for, (, int, i, =, a, ., mant, ., length, -, 1, ;]
[return, a, ., sign, ;, }, }, for, (, int, i, =, a, ., mant, ., length, -, 1, ;]
[., sign, ;, }, }, for, (, int, i, =, a, ., mant, ., length, -, 1, ;, i, >=]
[;, }, }, for, (, int, i, =, a, ., mant, ., length, -, 1, ;, i, >=, 0, ;]
[;, }, }, for, (, int, i, =, a, ., mant, ., length, -, 1, ;, i, >=, 0, ;]
[i, =, a, ., mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[i, =, a, ., mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[i, =, a, ., mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[i, =, a, ., mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, []
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >]
[>=, 0, ;, i, --, ), {, if, (, a, ., mant, [, i, ], >, b, ., mant, []
[), {, if, (, a, ., mant, [, i, ], >, b, ., mant, [, i, ], ), {, return]
[), {, if, (, a, ., mant, [, i, ], >, b, ., mant, [, i, ], ), {, return]
[[, i, ], >, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (]
[[, i, ], >, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (]
[[, i, ], >, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (]
[[, i, ], >, b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (]
[b, ., mant, [, i, ], ), {, return, a, ., sign, ;, }, if, (, a, ., mant, []
[[, i, ], ), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <]
[[, i, ], ), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <]
[[, i, ], ), {, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <]
[{, return, a, ., sign, ;, }, if, (, a, ., mant, [, i, ], <, b, ., mant, []
[;, }, if, (, a, ., mant, [, i, ], <, b, ., mant, [, i, ], ), {, return]
[}, if, (, a, ., mant, [, i, ], <, b, ., mant, [, i, ], ), {, return, -]
[}, if, (, a, ., mant, [, i, ], <, b, ., mant, [, i, ], ), {, return, -]
[i, ], <, b, ., mant, [, i, ], ), {, return, -, a, ., sign, ;, }, }, return]
[{, return, -, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {, return]
[-, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {, return, trunc, (]
[-, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {, return, trunc, (]
[-, a, ., sign, ;, }, }, return, 0, ;, }, public, Dfp, rint, (, ), {, return, trunc, (]
[), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_HALF_EVEN, ), ;, }, public, Dfp, floor, (, ), {, return]
[return, trunc, (, DfpField, ., RoundingMode, ., ROUND_HALF_EVEN, ), ;, }, public, Dfp, floor, (, ), {, return, trunc, (]
[return, trunc, (, DfpField, ., RoundingMode, ., ROUND_HALF_EVEN, ), ;, }, public, Dfp, floor, (, ), {, return, trunc, (]
[return, trunc, (, DfpField, ., RoundingMode, ., ROUND_HALF_EVEN, ), ;, }, public, Dfp, floor, (, ), {, return, trunc, (]
[), {, return, trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, ), ;, }, public, Dfp, ceil, (, ), {, return]
[return, trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, ), ;, }, public, Dfp, ceil, (, ), {, return, trunc, (]
[return, trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, ), ;, }, public, Dfp, ceil, (, ), {, return, trunc, (]
[return, trunc, (, DfpField, ., RoundingMode, ., ROUND_FLOOR, ), ;, }, public, Dfp, ceil, (, ), {, return, trunc, (]
[., RoundingMode, ., ROUND_CEIL, ), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =]
[., RoundingMode, ., ROUND_CEIL, ), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =]
[), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, ., subtract, (]
[), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, ., subtract, (]
[), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, ., subtract, (]
[), ;, }, public, Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, ., subtract, (]
[Dfp, remainder, (, final, Dfp, d, ), {, final, Dfp, result, =, this, ., subtract, (, this, ., divide, (]
[Dfp, result, =, this, ., subtract, (, this, ., divide, (, d, ), ., rint, (, ), ., multiply, (]
[(, this, ., divide, (, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (]
[(, this, ., divide, (, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (]
[(, this, ., divide, (, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (]
[(, this, ., divide, (, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (]
[(, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (, result, ., mant, []
[(, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (, result, ., mant, []
[(, d, ), ., rint, (, ), ., multiply, (, d, ), ), ;, if, (, result, ., mant, []
[rint, (, ), ., multiply, (, d, ), ), ;, if, (, result, ., mant, [, mant, ., length, -]
[., multiply, (, d, ), ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[d, ), ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[d, ), ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., sign, =]
[mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., sign, =, sign, ;, }, return]
[;, }, return, result, ;, }, protected, Dfp, trunc, (, final, DfpField, ., RoundingMode, rmode, ), {, boolean, changed, =]
[;, }, protected, Dfp, trunc, (, final, DfpField, ., RoundingMode, rmode, ), {, boolean, changed, =, false, ;, if, (]
[final, DfpField, ., RoundingMode, rmode, ), {, boolean, changed, =, false, ;, if, (, isNaN, (, ), ), {, return]
[., RoundingMode, rmode, ), {, boolean, changed, =, false, ;, if, (, isNaN, (, ), ), {, return, newInstance, (]
[changed, =, false, ;, if, (, isNaN, (, ), ), {, return, newInstance, (, this, ), ;, }, if, (]
[changed, =, false, ;, if, (, isNaN, (, ), ), {, return, newInstance, (, this, ), ;, }, if, (]
[false, ;, if, (, isNaN, (, ), ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==]
[isNaN, (, ), ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, INFINITE, ), {, return]
[), ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (]
[this, ), ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (]
[this, ), ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (]
[this, ), ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (]
[;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (, mant, []
[;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (, mant, []
[;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (, mant, []
[nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, if, (, mant, [, mant, ., length, -]
[), {, return, newInstance, (, this, ), ;, }, if, (, mant, [, mant, ., length, -, 1, ], ==]
[(, this, ), ;, }, if, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return]
[), ;, }, if, (, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (]
[., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <]
[1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {]
[1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {]
[), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (]
[), {, return, newInstance, (, this, ), ;, }, if, (, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (]
[}, if, (, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =]
[(, exp, <, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =]
[(, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (]
[(, DfpField, ., FLAG_INEXACT, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,]
[=, newInstance, (, getZero, (, ), ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,]
[(, ), ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, if, (]
[=, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, if, (]
[(, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, if, (, exp, >=]
[(, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, if, (, exp, >=]
[,, this, ,, result, ), ;, return, result, ;, }, if, (, exp, >=, mant, ., length, ), {, return]
[,, result, ), ;, return, result, ;, }, if, (, exp, >=, mant, ., length, ), {, return, newInstance, (]
[}, if, (, exp, >=, mant, ., length, ), {, return, newInstance, (, this, ), ;, }, Dfp, result, =]
[(, exp, >=, mant, ., length, ), {, return, newInstance, (, this, ), ;, }, Dfp, result, =, newInstance, (]
[return, newInstance, (, this, ), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =]
[(, this, ), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;]
[(, this, ), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;]
[), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;, i, <]
[), ;, }, Dfp, result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;, i, <]
[result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, -]
[result, =, newInstance, (, this, ), ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, -]
[this, ), ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;]
[this, ), ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;]
[(, int, i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;, i, ++, ), {]
[i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;, i, ++, ), {, changed, |=]
[i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;, i, ++, ), {, changed, |=]
[i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;, i, ++, ), {, changed, |=]
[i, =, 0, ;, i, <, mant, ., length, -, result, ., exp, ;, i, ++, ), {, changed, |=]
[i, <, mant, ., length, -, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, []
[., length, -, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=]
[-, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;]
[-, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;]
[-, result, ., exp, ;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;]
[;, i, ++, ), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, []
[), {, changed, |=, result, ., mant, [, i, ], !=, 0, ;, result, ., mant, [, i, ], =]
[., mant, [, i, ], !=, 0, ;, result, ., mant, [, i, ], =, 0, ;, }, if, (]
[!=, 0, ;, result, ., mant, [, i, ], =, 0, ;, }, if, (, changed, ), {, switch, (]
[., mant, [, i, ], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case]
[], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (]
[], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (]
[], =, 0, ;, }, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (]
[}, if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result, ., sign, ==]
[if, (, changed, ), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result, ., sign, ==, -]
[), {, switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result, ., sign, ==, -, 1, ), {]
[switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result, ., sign, ==, -, 1, ), {, result, =]
[switch, (, rmode, ), {, case, ROUND_FLOOR, :, if, (, result, ., sign, ==, -, 1, ), {, result, =]
[{, case, ROUND_FLOOR, :, if, (, result, ., sign, ==, -, 1, ), {, result, =, result, ., add, (]
[ROUND_FLOOR, :, if, (, result, ., sign, ==, -, 1, ), {, result, =, result, ., add, (, newInstance, (]
[:, if, (, result, ., sign, ==, -, 1, ), {, result, =, result, ., add, (, newInstance, (, -]
[1, ), {, result, =, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case]
[=, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (]
[=, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (]
[=, result, ., add, (, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (]
[(, newInstance, (, -, 1, ), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==]
[-, 1, ), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {]
[), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {, result, =]
[), ), ;, }, break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {, result, =]
[break, ;, case, ROUND_CEIL, :, if, (, result, ., sign, ==, 1, ), {, result, =, result, ., add, (]
[sign, ==, 1, ), {, result, =, result, ., add, (, getOne, (, ), ), ;, }, break, ;, case]
[., add, (, getOne, (, ), ), ;, }, break, ;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp, half, =]
[(, getOne, (, ), ), ;, }, break, ;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp, half, =, newInstance, (]
[}, break, ;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp, a, =]
[;, case, ROUND_HALF_EVEN, :, default, :, final, Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp, a, =, subtract, (]
[:, default, :, final, Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp, a, =, subtract, (, result, ), ;]
[:, default, :, final, Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp, a, =, subtract, (, result, ), ;]
[Dfp, half, =, newInstance, (, "0.5", ), ;, Dfp, a, =, subtract, (, result, ), ;, a, ., sign, =]
[(, "0.5", ), ;, Dfp, a, =, subtract, (, result, ), ;, a, ., sign, =, 1, ;, if, (]
[(, "0.5", ), ;, Dfp, a, =, subtract, (, result, ), ;, a, ., sign, =, 1, ;, if, (]
[Dfp, a, =, subtract, (, result, ), ;, a, ., sign, =, 1, ;, if, (, a, ., greaterThan, (]
[(, result, ), ;, a, ., sign, =, 1, ;, if, (, a, ., greaterThan, (, half, ), ), {]
[), ;, a, ., sign, =, 1, ;, if, (, a, ., greaterThan, (, half, ), ), {, a, =]
[a, ., sign, =, 1, ;, if, (, a, ., greaterThan, (, half, ), ), {, a, =, newInstance, (]
[;, if, (, a, ., greaterThan, (, half, ), ), {, a, =, newInstance, (, getOne, (, ), ), ;]
[;, if, (, a, ., greaterThan, (, half, ), ), {, a, =, newInstance, (, getOne, (, ), ), ;]
[., greaterThan, (, half, ), ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =]
[(, half, ), ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;]
[), ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =]
[), ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =]
[=, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (]
[), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (]
[), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (]
[), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (]
[), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (]
[sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, if, (, a, ., equals, (]
[;, result, =, result, ., add, (, a, ), ;, }, if, (, a, ., equals, (, half, ), &&]
[;, result, =, result, ., add, (, a, ), ;, }, if, (, a, ., equals, (, half, ), &&]
[;, result, =, result, ., add, (, a, ), ;, }, if, (, a, ., equals, (, half, ), &&]
[., add, (, a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >]
[(, a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&]
[(, a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&]
[a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (]
[a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (]
[a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (]
[a, ), ;, }, if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (]
[if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, ., mant, []
[if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, ., mant, []
[if, (, a, ., equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, ., mant, []
[equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, ., mant, [, mant, ., length, -]
[equals, (, half, ), &&, result, ., exp, >, 0, &&, (, result, ., mant, [, mant, ., length, -]
[result, ., exp, >, 0, &&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &]
[>, 0, &&, (, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=]
[(, result, ., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, ), {]
[., mant, [, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, ), {, a, =]
[[, mant, ., length, -, result, ., exp, ], &, 1, ), !=, 0, ), {, a, =, newInstance, (]
[result, ., exp, ], &, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;]
[result, ., exp, ], &, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;]
[&, 1, ), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =]
[), !=, 0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;]
[0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =]
[0, ), {, a, =, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =]
[=, newInstance, (, getOne, (, ), ), ;, a, ., sign, =, sign, ;, result, =, result, ., add, (]
[;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;, }]
[;, a, ., sign, =, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;, }]
[=, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (]
[=, sign, ;, result, =, result, ., add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (]
[result, ., add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[add, (, a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =]
[a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[a, ), ;, }, break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[break, ;, }, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[}, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,]
[., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return]
[result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, TRUNC_TRAP, ,, this, ,, result, ), ;, return, result, ;, }, return]
[return, result, ;, }, return, result, ;, }, public, int, intValue, (, ), {, Dfp, rounded, ;, int, result, =]
[;, }, return, result, ;, }, public, int, intValue, (, ), {, Dfp, rounded, ;, int, result, =, 0, ;]
[return, result, ;, }, public, int, intValue, (, ), {, Dfp, rounded, ;, int, result, =, 0, ;, rounded, =]
[intValue, (, ), {, Dfp, rounded, ;, int, result, =, 0, ;, rounded, =, rint, (, ), ;, if, (]
[intValue, (, ), {, Dfp, rounded, ;, int, result, =, 0, ;, rounded, =, rint, (, ), ;, if, (]
[Dfp, rounded, ;, int, result, =, 0, ;, rounded, =, rint, (, ), ;, if, (, rounded, ., greaterThan, (]
[;, int, result, =, 0, ;, rounded, =, rint, (, ), ;, if, (, rounded, ., greaterThan, (, newInstance, (]
[rounded, =, rint, (, ), ;, if, (, rounded, ., greaterThan, (, newInstance, (, 2147483647, ), ), ), {, return]
[;, if, (, rounded, ., greaterThan, (, newInstance, (, 2147483647, ), ), ), {, return, 2147483647, ;, }, if, (]
[;, if, (, rounded, ., greaterThan, (, newInstance, (, 2147483647, ), ), ), {, return, 2147483647, ;, }, if, (]
[., greaterThan, (, newInstance, (, 2147483647, ), ), ), {, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (]
[(, newInstance, (, 2147483647, ), ), ), {, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (, newInstance, (]
[newInstance, (, 2147483647, ), ), ), {, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (, newInstance, (, -]
[{, return, 2147483647, ;, }, if, (, rounded, ., lessThan, (, newInstance, (, -, 2147483648, ), ), ), {, return]
[return, 2147483647, ;, }, if, (, rounded, ., lessThan, (, newInstance, (, -, 2147483648, ), ), ), {, return, -]
[lessThan, (, newInstance, (, -, 2147483648, ), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =]
[lessThan, (, newInstance, (, -, 2147483648, ), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =]
[lessThan, (, newInstance, (, -, 2147483648, ), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =]
[-, 2147483648, ), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -]
[), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;]
[), ), ), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;]
[), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[), {, return, -, 2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, mant, ., length, -]
[2147483648, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, mant, ., length, -]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;]
[mant, ., length, -, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {]
[length, -, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =]
[length, -, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =]
[length, -, 1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =]
[1, ;, i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *]
[i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX, +]
[i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX, +]
[i, >=, mant, ., length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX, +]
[length, -, rounded, ., exp, ;, i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, []
[i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (]
[i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (]
[i, --, ), {, result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (]
[result, =, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==]
[=, result, *, RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -]
[RADIX, +, rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {]
[rounded, ., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =]
[., mant, [, i, ], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =, -]
[], ;, }, if, (, rounded, ., sign, ==, -, 1, ), {, result, =, -, result, ;, }, return]
[1, ), {, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K, (, ), {, return]
[1, ), {, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K, (, ), {, return]
[{, result, =, -, result, ;, }, return, result, ;, }, public, int, log10K, (, ), {, return, exp, -]
[), {, return, exp, -, 1, ;, }, public, Dfp, power10K, (, final, int, e, ), {, Dfp, d, =]
[return, exp, -, 1, ;, }, public, Dfp, power10K, (, final, int, e, ), {, Dfp, d, =, newInstance, (]
[}, public, Dfp, power10K, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;]
[}, public, Dfp, power10K, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;]
[(, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, d, ., exp, =]
[(, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, d, ., exp, =]
[int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, d, ., exp, =, e, +]
[{, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, d, ., exp, =, e, +, 1, ;, return]
[d, ., exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (]
[d, ., exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (]
[d, ., exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (]
[exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, []
[exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, []
[exp, =, e, +, 1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, []
[1, ;, return, d, ;, }, public, int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -]
[d, ;, }, public, int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -, 1, ], >]
[int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -, 1, ], >, 1000, ), {, return]
[int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -, 1, ], >, 1000, ), {, return]
[int, intLog10, (, ), {, if, (, mant, [, mant, ., length, -, 1, ], >, 1000, ), {, return]
[(, ), {, if, (, mant, [, mant, ., length, -, 1, ], >, 1000, ), {, return, exp, *]
[{, if, (, mant, [, mant, ., length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -]
[mant, ., length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (]
[mant, ., length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (]
[mant, ., length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (]
[length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, []
[length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, []
[length, -, 1, ], >, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, []
[>, 1000, ), {, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant, ., length, -]
[{, return, exp, *, 4, -, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >]
[4, -, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return]
[4, -, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return]
[4, -, 1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return]
[1, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return, exp, *]
[}, if, (, mant, [, mant, ., length, -, 1, ], >, 100, ), {, return, exp, *, 4, -]
[mant, ., length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (]
[mant, ., length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (]
[mant, ., length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (]
[length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, []
[length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, []
[length, -, 1, ], >, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, []
[>, 100, ), {, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant, ., length, -]
[{, return, exp, *, 4, -, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >]
[4, -, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return]
[4, -, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return]
[4, -, 2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return]
[2, ;, }, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *]
[}, if, (, mant, [, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *, 4, -]
[[, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return]
[[, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return]
[[, mant, ., length, -, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return]
[., length, -, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return, exp, *]
[-, 1, ], >, 10, ), {, return, exp, *, 4, -, 3, ;, }, return, exp, *, 4, -]
[return, exp, *, 4, -, 4, ;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp, d, =]
[*, 4, -, 4, ;, }, public, Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (]
[Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, if, (]
[Dfp, power10, (, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, if, (]
[(, final, int, e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, if, (, e, >=]
[e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, if, (, e, >=, 0, ), {]
[e, ), {, Dfp, d, =, newInstance, (, getOne, (, ), ), ;, if, (, e, >=, 0, ), {]
[d, =, newInstance, (, getOne, (, ), ), ;, if, (, e, >=, 0, ), {, d, ., exp, =]
[d, =, newInstance, (, getOne, (, ), ), ;, if, (, e, >=, 0, ), {, d, ., exp, =]
[d, =, newInstance, (, getOne, (, ), ), ;, if, (, e, >=, 0, ), {, d, ., exp, =]
[newInstance, (, getOne, (, ), ), ;, if, (, e, >=, 0, ), {, d, ., exp, =, e, /]
[getOne, (, ), ), ;, if, (, e, >=, 0, ), {, d, ., exp, =, e, /, 4, +]
[if, (, e, >=, 0, ), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {]
[if, (, e, >=, 0, ), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {]
[0, ), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =]
[0, ), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =]
[), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (]
[), {, d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (]
[d, ., exp, =, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (, e, +]
[=, e, /, 4, +, 1, ;, }, else, {, d, ., exp, =, (, e, +, 1, ), /]
[1, ;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (]
[1, ;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (]
[;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (]
[;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (]
[;, }, else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (]
[else, {, d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (, e, %]
[d, ., exp, =, (, e, +, 1, ), /, 4, ;, }, switch, (, (, e, %, 4, +]
[=, (, e, +, 1, ), /, 4, ;, }, switch, (, (, e, %, 4, +, 4, ), %]
[1, ), /, 4, ;, }, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {, case]
[}, switch, (, (, e, %, 4, +, 4, ), %, 4, ), {, case, 0, :, break, ;, case]
[(, (, e, %, 4, +, 4, ), %, 4, ), {, case, 0, :, break, ;, case, 1, :]
[e, %, 4, +, 4, ), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =]
[e, %, 4, +, 4, ), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =]
[4, ), %, 4, ), {, case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply, (]
[case, 0, :, break, ;, case, 1, :, d, =, d, ., multiply, (, 10, ), ;, break, ;, case]
[:, break, ;, case, 1, :, d, =, d, ., multiply, (, 10, ), ;, break, ;, case, 2, :]
[;, case, 1, :, d, =, d, ., multiply, (, 10, ), ;, break, ;, case, 2, :, d, =]
[;, case, 1, :, d, =, d, ., multiply, (, 10, ), ;, break, ;, case, 2, :, d, =]
[d, =, d, ., multiply, (, 10, ), ;, break, ;, case, 2, :, d, =, d, ., multiply, (]
[), ;, break, ;, case, 2, :, d, =, d, ., multiply, (, 100, ), ;, break, ;, default, :]
[break, ;, case, 2, :, d, =, d, ., multiply, (, 100, ), ;, break, ;, default, :, d, =]
[break, ;, case, 2, :, d, =, d, ., multiply, (, 100, ), ;, break, ;, default, :, d, =]
[:, d, =, d, ., multiply, (, 100, ), ;, break, ;, default, :, d, =, d, ., multiply, (]
[multiply, (, 100, ), ;, break, ;, default, :, d, =, d, ., multiply, (, 1000, ), ;, }, return]
[d, ., multiply, (, 1000, ), ;, }, return, d, ;, }, protected, int, complement, (, int, extra, ), {]
[multiply, (, 1000, ), ;, }, return, d, ;, }, protected, int, complement, (, int, extra, ), {, extra, =]
[multiply, (, 1000, ), ;, }, return, d, ;, }, protected, int, complement, (, int, extra, ), {, extra, =]
[1000, ), ;, }, return, d, ;, }, protected, int, complement, (, int, extra, ), {, extra, =, RADIX, -]
[}, protected, int, complement, (, int, extra, ), {, extra, =, RADIX, -, extra, ;, for, (, int, i, =]
[int, complement, (, int, extra, ), {, extra, =, RADIX, -, extra, ;, for, (, int, i, =, 0, ;]
[int, complement, (, int, extra, ), {, extra, =, RADIX, -, extra, ;, for, (, int, i, =, 0, ;]
[(, int, extra, ), {, extra, =, RADIX, -, extra, ;, for, (, int, i, =, 0, ;, i, <]
[(, int, extra, ), {, extra, =, RADIX, -, extra, ;, for, (, int, i, =, 0, ;, i, <]
[{, extra, =, RADIX, -, extra, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[{, extra, =, RADIX, -, extra, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[-, extra, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[-, extra, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, []
[int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =]
[int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =]
[int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =]
[=, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =, RADIX, -]
[=, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =, RADIX, -]
[;, i, <, mant, ., length, ;, i, ++, ), {, mant, [, i, ], =, RADIX, -, mant, []
[mant, ., length, ;, i, ++, ), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -]
[), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =]
[), {, mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =]
[mant, [, i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /]
[i, ], =, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;]
[=, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =]
[=, RADIX, -, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =]
[-, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -]
[-, mant, [, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -]
[[, i, ], -, 1, ;, }, int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *]
[int, rh, =, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =]
[=, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;]
[=, extra, /, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;]
[/, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <]
[/, RADIX, ;, extra, =, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <]
[=, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[=, extra, -, rh, *, RADIX, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, []
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[{, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, []
[r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =]
[r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =]
[mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -]
[mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -]
[i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *]
[;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, return]
[rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (]
[rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (]
[rh, *, RADIX, ;, }, return, extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (]
[extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[extra, ;, }, public, Dfp, add, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,]
[), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (]
[=, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (]
[;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=, FINITE, ||]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=, FINITE, ||]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=, FINITE, ||]
[FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, if, (, nans, !=, FINITE, ||, x, ., nans, !=]
[,, result, ), ;, }, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (]
[(, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return]
[x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[(, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return]
[{, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (]
[{, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (]
[{, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (]
[this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==]
[}, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&]
[}, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&]
[}, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&]
[., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==]
[), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return]
[}, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (]
[}, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (]
[}, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (]
[}, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (]
[==, INFINITE, &&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==]
[&&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[&&, x, ., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[., nans, ==, FINITE, ), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[), {, return, this, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return]
[}, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (]
[}, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (]
[}, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (]
[}, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (]
[}, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (]
[., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==]
[==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[==, INFINITE, &&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[&&, nans, ==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&]
[==, FINITE, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==]
[if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return]
[==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (]
[==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (]
[==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (]
[==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (]
[==, INFINITE, &&, nans, ==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (]
[==, INFINITE, &&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==]
[&&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[&&, sign, ==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[==, x, ., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&]
[., sign, ), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=]
[), {, return, x, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=]
[}, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {]
[}, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {]
[., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (]
[., nans, ==, INFINITE, &&, nans, ==, INFINITE, &&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (]
[&&, sign, !=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =]
[!=, x, ., sign, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[(, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,]
[nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, return]
[(, DfpField, ., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, Dfp, a, =]
[., FLAG_INVALID, ,, ADD_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (]
[,, result, ), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (, this, ), ;, Dfp, b, =]
[), ;, return, result, ;, }, }, Dfp, a, =, newInstance, (, this, ), ;, Dfp, b, =, newInstance, (]
[}, Dfp, a, =, newInstance, (, this, ), ;, Dfp, b, =, newInstance, (, x, ), ;, Dfp, result, =]
[a, =, newInstance, (, this, ), ;, Dfp, b, =, newInstance, (, x, ), ;, Dfp, result, =, newInstance, (]
[=, newInstance, (, x, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, final, byte, asign, =]
[=, newInstance, (, x, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, final, byte, asign, =]
[=, newInstance, (, getZero, (, ), ), ;, final, byte, asign, =, a, ., sign, ;, final, byte, bsign, =]
[=, newInstance, (, getZero, (, ), ), ;, final, byte, asign, =, a, ., sign, ;, final, byte, bsign, =]
[(, ), ), ;, final, byte, asign, =, a, ., sign, ;, final, byte, bsign, =, b, ., sign, ;]
[(, ), ), ;, final, byte, asign, =, a, ., sign, ;, final, byte, bsign, =, b, ., sign, ;]
[final, byte, asign, =, a, ., sign, ;, final, byte, bsign, =, b, ., sign, ;, a, ., sign, =]
[asign, =, a, ., sign, ;, final, byte, bsign, =, b, ., sign, ;, a, ., sign, =, 1, ;]
[asign, =, a, ., sign, ;, final, byte, bsign, =, b, ., sign, ;, a, ., sign, =, 1, ;]
[sign, ;, final, byte, bsign, =, b, ., sign, ;, a, ., sign, =, 1, ;, b, ., sign, =]
[=, b, ., sign, ;, a, ., sign, =, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =]
[;, a, ., sign, =, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (]
[;, a, ., sign, =, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (]
[., sign, =, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (]
[=, 1, ;, b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,]
[b, ., sign, =, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,, b, ), >]
[=, 1, ;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,, b, ), >, 0, ), {]
[;, byte, rsign, =, bsign, ;, if, (, compare, (, a, ,, b, ), >, 0, ), {, rsign, =]
[;, if, (, compare, (, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (]
[;, if, (, compare, (, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (]
[;, if, (, compare, (, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (]
[;, if, (, compare, (, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (]
[(, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (, b, ., mant, []
[(, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (, b, ., mant, []
[(, a, ,, b, ), >, 0, ), {, rsign, =, asign, ;, }, if, (, b, ., mant, []
[), >, 0, ), {, rsign, =, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -]
[), {, rsign, =, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -, 1, ], ==]
[=, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[=, asign, ;, }, if, (, b, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, b, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, b, ., exp, =]
[if, (, b, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, b, ., exp, =]
[., length, -, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (]
[., length, -, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (]
[., length, -, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (]
[., length, -, 1, ], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (]
[], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, []
[], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, []
[], ==, 0, ), {, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, []
[{, b, ., exp, =, a, ., exp, ;, }, if, (, a, ., mant, [, mant, ., length, -]
[exp, =, a, ., exp, ;, }, if, (, a, ., mant, [, mant, ., length, -, 1, ], ==]
[., exp, ;, }, if, (, a, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[., exp, ;, }, if, (, a, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, a, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, a, ., exp, =]
[if, (, a, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, a, ., exp, =]
[length, -, 1, ], ==, 0, ), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =]
[0, ), {, a, ., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =]
[., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (]
[., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (]
[., exp, =, b, ., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (]
[., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <]
[., exp, ;, }, int, aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <]
[aextradigit, =, 0, ;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <, b, ., exp, ), {]
[0, ;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <, b, ., exp, ), {, aextradigit, =]
[0, ;, int, bextradigit, =, 0, ;, if, (, a, ., exp, <, b, ., exp, ), {, aextradigit, =]
[=, 0, ;, if, (, a, ., exp, <, b, ., exp, ), {, aextradigit, =, a, ., align, (]
[=, 0, ;, if, (, a, ., exp, <, b, ., exp, ), {, aextradigit, =, a, ., align, (]
[<, b, ., exp, ), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {]
[., exp, ), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =]
[., exp, ), {, aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =]
[aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =, b, ., align, (]
[aextradigit, =, a, ., align, (, b, ., exp, ), ;, }, else, {, bextradigit, =, b, ., align, (]
[exp, ), ;, }, else, {, bextradigit, =, b, ., align, (, a, ., exp, ), ;, }, if, (]
[exp, ), ;, }, else, {, bextradigit, =, b, ., align, (, a, ., exp, ), ;, }, if, (]
[;, }, else, {, bextradigit, =, b, ., align, (, a, ., exp, ), ;, }, if, (, asign, !=]
[=, b, ., align, (, a, ., exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (]
[=, b, ., align, (, a, ., exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (]
[., align, (, a, ., exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==]
[a, ., exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==, rsign, ), {]
[exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==, rsign, ), {, bextradigit, =]
[exp, ), ;, }, if, (, asign, !=, bsign, ), {, if, (, asign, ==, rsign, ), {, bextradigit, =]
[if, (, asign, !=, bsign, ), {, if, (, asign, ==, rsign, ), {, bextradigit, =, b, ., complement, (]
[{, if, (, asign, ==, rsign, ), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else, {]
[(, asign, ==, rsign, ), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =]
[(, asign, ==, rsign, ), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =]
[), {, bextradigit, =, b, ., complement, (, bextradigit, ), ;, }, else, {, aextradigit, =, a, ., complement, (]
[bextradigit, ), ;, }, else, {, aextradigit, =, a, ., complement, (, aextradigit, ), ;, }, }, int, rh, =]
[=, a, ., complement, (, aextradigit, ), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =]
[., complement, (, aextradigit, ), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[., complement, (, aextradigit, ), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[(, aextradigit, ), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[(, aextradigit, ), ;, }, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[}, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[}, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, a, ., mant, []
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +]
[;, i, ++, ), {, final, int, r, =, a, ., mant, [, i, ], +, b, ., mant, []
[), {, final, int, r, =, a, ., mant, [, i, ], +, b, ., mant, [, i, ], +]
[final, int, r, =, a, ., mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;]
[r, =, a, ., mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =]
[r, =, a, ., mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =]
[a, ., mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /]
[mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[mant, [, i, ], +, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[+, b, ., mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, []
[mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =]
[mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =]
[i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -]
[i, ], +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -]
[+, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *]
[rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }]
[rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }]
[RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =]
[RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =]
[mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp, ;]
[mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp, ;]
[=, r, -, rh, *, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =]
[*, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (]
[*, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (]
[*, RADIX, ;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (]
[;, }, result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=]
[result, ., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&]
[., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (]
[., exp, =, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (]
[=, a, ., exp, ;, result, ., sign, =, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==]
[=, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =]
[=, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =]
[=, rsign, ;, if, (, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =]
[(, rh, !=, 0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =, result, ., mant, []
[0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;]
[0, &&, (, asign, ==, bsign, ), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;]
[), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[), ), {, final, int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, []
[int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, []
[int, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, []
[., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -]
[0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =]
[(, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, final, int, excp, =]
[(, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, final, int, excp, =]
[., mant, [, mant, ., length, -, 1, ], =, rh, ;, final, int, excp, =, result, ., round, (]
[length, -, 1, ], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (]
[length, -, 1, ], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (]
[1, ], =, rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=]
[rh, ;, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {]
[final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =]
[excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,]
[lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,]
[result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int, i, =]
[dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;]
[dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;]
[excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;, i, <]
[x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[x, ,, result, ), ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[}, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, if, (]
[}, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, if, (]
[i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, if, (, result, ., mant, []
[i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, if, (, result, ., mant, []
[i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, if, (, result, ., mant, []
[i, <, mant, ., length, ;, i, ++, ), {, if, (, result, ., mant, [, mant, ., length, -]
[., length, ;, i, ++, ), {, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=]
[{, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, break, ;, }]
[{, if, (, result, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, break, ;, }]
[., length, -, 1, ], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (]
[., length, -, 1, ], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (]
[-, 1, ], !=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==]
[!=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {]
[!=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {]
[!=, 0, ), {, break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {]
[break, ;, }, result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {, result, ., mant, []
[result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {, result, ., mant, [, 0, ], =]
[result, ., shiftLeft, (, ), ;, if, (, i, ==, 0, ), {, result, ., mant, [, 0, ], =]
[shiftLeft, (, ), ;, if, (, i, ==, 0, ), {, result, ., mant, [, 0, ], =, aextradigit, +]
[), ;, if, (, i, ==, 0, ), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;]
[if, (, i, ==, 0, ), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =]
[i, ==, 0, ), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;]
[0, ), {, result, ., mant, [, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =]
[[, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (]
[[, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (]
[[, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (]
[[, 0, ], =, aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (]
[aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, []
[aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, []
[aextradigit, +, bextradigit, ;, aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, []
[aextradigit, =, 0, ;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, [, mant, ., length, -]
[;, bextradigit, =, 0, ;, }, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[0, ;, }, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[0, ;, }, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =]
[mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (]
[mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (]
[mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {]
[0, ), {, result, ., exp, =, 0, ;, if, (, asign, !=, bsign, ), {, result, ., sign, =]
[;, if, (, asign, !=, bsign, ), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =]
[;, if, (, asign, !=, bsign, ), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =]
[!=, bsign, ), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =, result, ., round, (]
[!=, bsign, ), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =, result, ., round, (]
[), {, result, ., sign, =, 1, ;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +]
[=, 1, ;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (]
[=, 1, ;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (]
[;, }, }, final, int, excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (, excp, !=]
[final, int, excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (, excp, !=, 0, ), {]
[excp, =, result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (, excp, !=, 0, ), {, result, =]
[result, ., round, (, aextradigit, +, bextradigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[round, (, aextradigit, +, bextradigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[aextradigit, +, bextradigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,]
[bextradigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,]
[excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, ADD_TRAP, ,, x, ,, result, ), ;, }, return]
[,, x, ,, result, ), ;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (]
[;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;]
[;, }, return, result, ;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;]
[;, }, public, Dfp, negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[Dfp, negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, )]
[negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), -]
[negate, (, ), {, Dfp, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), -]
[result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), -, result, ., sign, ;, return]
[), -, result, ., sign, ;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return]
[result, ., sign, ;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return, add, (]
[result, ., sign, ;, return, result, ;, }, public, Dfp, subtract, (, final, Dfp, x, ), {, return, add, (]
[(, x, ., negate, (, ), ), ;, }, protected, int, round, (, int, n, ), {, boolean, inc, =]
[(, ), ), ;, }, protected, int, round, (, int, n, ), {, boolean, inc, =, false, ;, switch, (]
[(, ), ), ;, }, protected, int, round, (, int, n, ), {, boolean, inc, =, false, ;, switch, (]
[(, int, n, ), {, boolean, inc, =, false, ;, switch, (, field, ., getRoundingMode, (, ), ), {, case]
[n, ), {, boolean, inc, =, false, ;, switch, (, field, ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :]
[{, boolean, inc, =, false, ;, switch, (, field, ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =]
[;, switch, (, field, ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case]
[(, field, ., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :]
[., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =]
[., getRoundingMode, (, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =]
[(, ), ), {, case, ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=]
[ROUND_DOWN, :, inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case]
[inc, =, false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :]
[false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =]
[false, ;, break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =]
[break, ;, case, ROUND_UP, :, inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=]
[inc, =, n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case]
[n, !=, 0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :]
[0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =]
[0, ;, break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =]
[break, ;, case, ROUND_HALF_UP, :, inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >]
[inc, =, n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case]
[n, >=, 5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :]
[5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =]
[5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =]
[5000, ;, break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =]
[break, ;, case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >]
[case, ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||]
[ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (]
[ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (]
[ROUND_HALF_DOWN, :, inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (]
[inc, =, n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==]
[n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&]
[n, >, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&]
[>, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (]
[>, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (]
[>, 5000, ;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (]
[;, break, ;, case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, []
[case, ROUND_HALF_EVEN, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &]
[inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==]
[(, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case]
[==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :]
[&&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[&&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[&&, (, mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =]
[mant, [, 0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >]
[0, ], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||]
[], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (]
[], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (]
[], &, 1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (]
[1, ), ==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==]
[==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&]
[==, 1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&]
[1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (]
[1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (]
[1, ), ;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (]
[;, break, ;, case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, []
[case, ROUND_HALF_ODD, :, inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &]
[inc, =, n, >, 5000, ||, (, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==]
[(, n, ==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case]
[==, 5000, &&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :]
[&&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =]
[&&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =]
[&&, (, mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =]
[mant, [, 0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==]
[0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&]
[0, ], &, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&]
[&, 1, ), ==, 0, ), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=]
[), ;, break, ;, case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case]
[case, ROUND_CEIL, :, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :]
[:, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =]
[:, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =]
[:, inc, =, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =]
[=, sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==]
[sign, ==, 1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -]
[1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&]
[1, &&, n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&]
[n, !=, 0, ;, break, ;, case, ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n, !=]
[ROUND_FLOOR, :, default, :, inc, =, sign, ==, -, 1, &&, n, !=, 0, ;, break, ;, }, if, (]
[sign, ==, -, 1, &&, n, !=, 0, ;, break, ;, }, if, (, inc, ), {, int, rh, =]
[0, ;, break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =]
[break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =, 0, ;]
[break, ;, }, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =, 0, ;]
[}, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[}, if, (, inc, ), {, int, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[), {, int, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[), {, int, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, []
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[++, ), {, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[{, final, int, r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, []
[r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =]
[r, =, mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =]
[mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -]
[mant, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -]
[i, ], +, rh, ;, rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *]
[rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (]
[rh, =, r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (]
[r, /, RADIX, ;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=]
[;, mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {]
[], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;]
[], =, r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;]
[r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, []
[r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, []
[r, -, rh, *, RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, []
[RADIX, ;, }, if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -]
[if, (, rh, !=, 0, ), {, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =]
[{, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (]
[{, shiftRight, (, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (]
[(, ), ;, mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <]
[mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {]
[mant, [, mant, ., length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {]
[length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (]
[length, -, 1, ], =, rh, ;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (]
[;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return]
[;, }, }, if, (, exp, <, MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return]
[MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (]
[MIN_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >]
[setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {]
[setIEEEFlagsBits, (, DfpField, ., FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {]
[FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (]
[FLAG_UNDERFLOW, ), ;, return, DfpField, ., FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (]
[FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return]
[FLAG_UNDERFLOW, ;, }, if, (, exp, >, MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return]
[MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (]
[MAX_EXP, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=]
[setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {]
[setIEEEFlagsBits, (, DfpField, ., FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {]
[FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (]
[FLAG_OVERFLOW, ), ;, return, DfpField, ., FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (]
[FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return]
[FLAG_OVERFLOW, ;, }, if, (, n, !=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return]
[!=, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, return, DfpField, ., FLAG_INEXACT, ;, }, return]
[DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (]
[DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (]
[DfpField, ., FLAG_INEXACT, ;, }, return, 0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (]
[0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[0, ;, }, public, Dfp, multiply, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,]
[), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,]
[QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =]
[return, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =, newInstance, (]
[MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (]
[MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (]
[MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (]
[x, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=]
[result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||]
[result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||]
[result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, x, ., nans, !=]
[getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (]
[(, nans, !=, FINITE, ||, x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return]
[x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[x, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[(, isNaN, (, ), ), {, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return]
[{, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (]
[{, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (]
[{, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (]
[{, return, this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (]
[this, ;, }, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==]
[}, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&]
[}, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&]
[}, if, (, x, ., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&]
[., isNaN, (, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==]
[(, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[(, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[(, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[(, ), ), {, return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[return, x, ;, }, if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[if, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -]
[==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=]
[x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {]
[nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =]
[FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (]
[., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;]
[., mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;]
[., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[1, ], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, )]
[], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[], !=, 0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[0, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[(, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==]
[(, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[(, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[*, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&]
[., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&]
[., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&]
[), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[(, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=]
[nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {]
[INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =]
[nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (]
[&&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;]
[&&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;]
[., length, -, 1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =]
[1, ], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, )]
[], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (]
[], !=, 0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (]
[0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[0, ), {, result, =, newInstance, (, x, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[(, x, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==]
[(, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[(, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&]
[*, x, ., sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[sign, ), ;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {]
[;, return, result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =]
[result, ;, }, if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =, newInstance, (]
[if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;]
[if, (, x, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;]
[nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[&&, nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, )]
[nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[nans, ==, INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[INFINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[(, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (]
[sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (]
[sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (]
[sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (]
[sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (]
[sign, =, (, byte, ), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (]
[), (, sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==]
[sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&]
[sign, *, x, ., sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&]
[x, ., sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==]
[sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&]
[sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&]
[sign, ), ;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&]
[;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[;, return, result, ;, }, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, []
[}, if, (, (, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[(, x, ., nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==]
[nans, ==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||]
[==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (]
[==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (]
[==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (]
[==, INFINITE, &&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (]
[&&, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&]
[==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&]
[[, mant, ., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==]
[., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[., length, -, 1, ], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&]
[], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[], ==, 0, ), ||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, []
[||, (, nans, ==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -]
[==, INFINITE, &&, x, ., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==]
[., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {]
[., nans, ==, FINITE, &&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {]
[&&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (]
[&&, x, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (]
[mant, ., length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[length, -, 1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =]
[1, ], ==, 0, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,]
[nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, return]
[., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, int, [, ], product, =]
[MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, int, [, ], product, =, new, int, []
[MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, int, [, ], product, =, new, int, []
[MULTIPLY_TRAP, ,, x, ,, result, ), ;, return, result, ;, }, }, int, [, ], product, =, new, int, []
[result, ), ;, return, result, ;, }, }, int, [, ], product, =, new, int, [, mant, ., length, *]
[int, [, ], product, =, new, int, [, mant, ., length, *, 2, ], ;, for, (, int, i, =]
[], product, =, new, int, [, mant, ., length, *, 2, ], ;, for, (, int, i, =, 0, ;]
[], product, =, new, int, [, mant, ., length, *, 2, ], ;, for, (, int, i, =, 0, ;]
[=, new, int, [, mant, ., length, *, 2, ], ;, for, (, int, i, =, 0, ;, i, <]
[=, new, int, [, mant, ., length, *, 2, ], ;, for, (, int, i, =, 0, ;, i, <]
[mant, ., length, *, 2, ], ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[mant, ., length, *, 2, ], ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, int, rh, =]
[i, <, mant, ., length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =]
[mant, ., length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;]
[mant, ., length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;]
[length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[length, ;, i, ++, ), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <]
[), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mant, ., length, ;]
[), {, int, rh, =, 0, ;, for, (, int, j, =, 0, ;, j, <, mant, ., length, ;]
[for, (, int, j, =, 0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =]
[for, (, int, j, =, 0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =]
[for, (, int, j, =, 0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =]
[int, j, =, 0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =, mant, []
[0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =, mant, [, i, ], *]
[0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =, mant, [, i, ], *]
[0, ;, j, <, mant, ., length, ;, j, ++, ), {, int, r, =, mant, [, i, ], *]
[mant, ., length, ;, j, ++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, []
[;, j, ++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;]
[++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =]
[++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =]
[++, ), {, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =]
[{, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =, r, +]
[{, int, r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =, r, +]
[r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =, r, +, product, []
[r, =, mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =, r, +, product, []
[mant, [, i, ], *, x, ., mant, [, j, ], ;, r, =, r, +, product, [, i, +]
[], *, x, ., mant, [, j, ], ;, r, =, r, +, product, [, i, +, j, ], +]
[x, ., mant, [, j, ], ;, r, =, r, +, product, [, i, +, j, ], +, rh, ;]
[mant, [, j, ], ;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =]
[mant, [, j, ], ;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =]
[j, ], ;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /]
[;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[;, r, =, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[=, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, []
[=, r, +, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, []
[+, product, [, i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +]
[i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =]
[i, +, j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =]
[j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -]
[j, ], +, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -]
[+, rh, ;, rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *]
[rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }]
[rh, =, r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }]
[r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, []
[r, /, RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, []
[RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i, +]
[RADIX, ;, product, [, i, +, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i, +]
[+, j, ], =, r, -, rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =]
[rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =]
[rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =]
[rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =]
[rh, *, RADIX, ;, }, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =]
[}, product, [, i, +, mant, ., length, ], =, rh, ;, }, int, md, =, mant, ., length, *]
[[, i, +, mant, ., length, ], =, rh, ;, }, int, md, =, mant, ., length, *, 2, -]
[=, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =]
[=, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =]
[=, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =]
[=, rh, ;, }, int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =]
[int, md, =, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =, mant, ., length, *]
[=, mant, ., length, *, 2, -, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -]
[., length, *, 2, -, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;]
[., length, *, 2, -, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;]
[*, 2, -, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=]
[-, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;]
[-, 1, ;, for, (, int, i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;]
[i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[i, =, mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[mant, ., length, *, 2, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, product, []
[*, 2, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=]
[1, ;, i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=, 0, ), {]
[i, >=, 0, ;, i, --, ), {, if, (, product, [, i, ], !=, 0, ), {, md, =]
[[, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =]
[], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;]
[], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;]
[0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[=, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[=, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -]
[i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -]
[., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =]
[., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =]
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, product, []
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, product, []
[++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, product, [, md, -]
[., mant, [, mant, ., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }]
[., mant, [, mant, ., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }]
[., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =]
[., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =]
[., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =]
[., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =]
[., length, -, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =]
[-, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +]
[-, i, -, 1, ], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +]
[], =, product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +]
[product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -]
[product, [, md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -]
[md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *]
[md, -, i, ], ;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *]
[;, }, result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +]
[result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +, 1, ;]
[result, ., exp, =, exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +, 1, ;]
[exp, +, x, ., exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =]
[., exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, )]
[exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (]
[exp, +, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (]
[+, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (]
[+, md, -, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (]
[-, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==]
[-, 2, *, mant, ., length, +, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==]
[length, +, 1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?]
[1, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :]
[;, result, ., sign, =, (, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -]
[(, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, byte, ), (, (, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, []
[(, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, []
[(, sign, ==, x, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, []
[., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -]
[?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[-, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[-, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (]
[-, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >]
[==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (]
[==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (]
[==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (]
[result, ., exp, =, 0, ;, }, final, int, excp, ;, if, (, md, >, (, mant, ., length, -]
[0, ;, }, final, int, excp, ;, if, (, md, >, (, mant, ., length, -, 1, ), ), {]
[}, final, int, excp, ;, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =]
[}, final, int, excp, ;, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =]
[;, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (]
[;, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (]
[(, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, product, []
[(, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, product, []
[>, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, product, [, md, -]
[>, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, product, [, md, -]
[{, excp, =, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }, else, {]
[=, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =]
[=, result, ., round, (, product, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =]
[(, product, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =, result, ., round, (]
[., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (]
[., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (]
[], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=]
[}, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {]
[{, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =]
[=, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[(, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,]
[), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,]
[excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, x, ,, result, ), ;, }, return]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (]
[,, result, ), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (]
[), ;, }, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (, x, >=]
[}, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (, x, >=, 0, &&]
[}, return, result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (, x, >=, 0, &&]
[result, ;, }, public, Dfp, multiply, (, final, int, x, ), {, if, (, x, >=, 0, &&, x, <]
[Dfp, multiply, (, final, int, x, ), {, if, (, x, >=, 0, &&, x, <, RADIX, ), {, return]
[(, final, int, x, ), {, if, (, x, >=, 0, &&, x, <, RADIX, ), {, return, multiplyFast, (]
[(, x, >=, 0, &&, x, <, RADIX, ), {, return, multiplyFast, (, x, ), ;, }, else, {, return]
[>=, 0, &&, x, <, RADIX, ), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (]
[&&, x, <, RADIX, ), {, return, multiplyFast, (, x, ), ;, }, else, {, return, multiply, (, newInstance, (]
[newInstance, (, x, ), ), ;, }, }, private, Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =]
[x, ), ), ;, }, }, private, Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =, newInstance, (]
[}, private, Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =, newInstance, (, this, ), ;, if, (]
[}, private, Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =, newInstance, (, this, ), ;, if, (]
[Dfp, multiplyFast, (, final, int, x, ), {, Dfp, result, =, newInstance, (, this, ), ;, if, (, nans, !=]
[x, ), {, Dfp, result, =, newInstance, (, this, ), ;, if, (, nans, !=, FINITE, ), {, if, (]
[newInstance, (, this, ), ;, if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return]
[if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==]
[FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&]
[FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&]
[{, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&, x, !=]
[isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&, x, !=, 0, ), {]
[), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, &&, x, !=, 0, ), {, result, =]
[{, return, this, ;, }, if, (, nans, ==, INFINITE, &&, x, !=, 0, ), {, result, =, newInstance, (]
[}, if, (, nans, ==, INFINITE, &&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return]
[INFINITE, &&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (]
[INFINITE, &&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (]
[INFINITE, &&, x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (]
[x, !=, 0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==]
[0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&]
[0, ), {, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&]
[{, result, =, newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==]
[newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {]
[newInstance, (, this, ), ;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {]
[;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (]
[;, return, result, ;, }, if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (]
[if, (, nans, ==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[nans, ==, INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =]
[INFINITE, &&, x, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (]
[=, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,]
[=, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return]
[,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (]
[,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (]
[,, MULTIPLY_TRAP, ,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (]
[,, newInstance, (, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (, x, <]
[(, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (, x, <, 0, ||]
[(, getZero, (, ), ), ,, result, ), ;, return, result, ;, }, }, if, (, x, <, 0, ||]
[(, ), ), ,, result, ), ;, return, result, ;, }, }, if, (, x, <, 0, ||, x, >=]
[,, result, ), ;, return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {]
[,, result, ), ;, return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {]
[return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (]
[return, result, ;, }, }, if, (, x, <, 0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (]
[if, (, x, <, 0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[x, <, 0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =]
[0, ||, x, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,]
[nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, return]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, int, rh, =]
[,, result, ,, result, ), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =]
[,, result, ), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[,, result, ), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[), ;, return, result, ;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, }, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =]
[i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, []
[;, i, <, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], *]
[<, mant, ., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +]
[., length, ;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =]
[;, i, ++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =]
[++, ), {, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =, r, /]
[{, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =, r, /, RADIX, ;]
[{, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =, r, /, RADIX, ;]
[{, final, int, r, =, mant, [, i, ], *, x, +, rh, ;, rh, =, r, /, RADIX, ;]
[=, mant, [, i, ], *, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, []
[i, ], *, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =]
[i, ], *, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =]
[*, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -]
[*, x, +, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -]
[+, rh, ;, rh, =, r, /, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *]
[/, RADIX, ;, result, ., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =]
[., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (]
[., mant, [, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=]
[=, r, -, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {]
[-, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =]
[-, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =]
[-, rh, *, RADIX, ;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =]
[;, }, int, lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =, result, ., mant, []
[lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =, result, ., mant, [, 0, ], ;]
[lostdigit, =, 0, ;, if, (, rh, !=, 0, ), {, lostdigit, =, result, ., mant, [, 0, ], ;]
[rh, !=, 0, ), {, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[rh, !=, 0, ), {, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[rh, !=, 0, ), {, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;]
[{, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, []
[{, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, []
[{, lostdigit, =, result, ., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, []
[., mant, [, 0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -]
[0, ], ;, result, ., shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =]
[shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (]
[shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (]
[shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (]
[shiftRight, (, ), ;, result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (]
[result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant, []
[result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant, []
[result, ., mant, [, mant, ., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant, []
[mant, ., length, -, 1, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -]
[-, 1, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[=, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[=, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =]
[., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =]
[., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =]
[], ==, 0, ), {, result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (]
[result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (]
[result, ., exp, =, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (]
[exp, =, 0, ;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=]
[;, }, final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {]
[final, int, excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =]
[excp, =, result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[result, ., round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[round, (, lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,]
[lostdigit, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,]
[excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, MULTIPLY_TRAP, ,, result, ,, result, ), ;, }, return]
[;, int, quotient, [, ], ;, int, remainder, [, ], ;, int, qd, ;, int, nsqd, ;, int, trial, =]
[int, qd, ;, int, nsqd, ;, int, trial, =, 0, ;, int, minadj, ;, boolean, trialgood, ;, int, md, =]
[trial, =, 0, ;, int, minadj, ;, boolean, trialgood, ;, int, md, =, 0, ;, int, excp, ;, if, (]
[trial, =, 0, ;, int, minadj, ;, boolean, trialgood, ;, int, md, =, 0, ;, int, excp, ;, if, (]
[trial, =, 0, ;, int, minadj, ;, boolean, trialgood, ;, int, md, =, 0, ;, int, excp, ;, if, (]
[;, boolean, trialgood, ;, int, md, =, 0, ;, int, excp, ;, if, (, field, ., getRadixDigits, (, ), !=]
[;, boolean, trialgood, ;, int, md, =, 0, ;, int, excp, ;, if, (, field, ., getRadixDigits, (, ), !=]
[;, boolean, trialgood, ;, int, md, =, 0, ;, int, excp, ;, if, (, field, ., getRadixDigits, (, ), !=]
[int, excp, ;, if, (, field, ., getRadixDigits, (, ), !=, divisor, ., field, ., getRadixDigits, (, ), ), {]
[int, excp, ;, if, (, field, ., getRadixDigits, (, ), !=, divisor, ., field, ., getRadixDigits, (, ), ), {]
[(, field, ., getRadixDigits, (, ), !=, divisor, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[(, field, ., getRadixDigits, (, ), !=, divisor, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,]
[), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,]
[QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =]
[return, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (]
[DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (]
[DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (]
[DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (]
[divisor, ,, result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=]
[result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||]
[result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||]
[result, ), ;, }, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, divisor, ., nans, !=]
[getZero, (, ), ), ;, if, (, nans, !=, FINITE, ||, divisor, ., nans, !=, FINITE, ), {, if, (]
[(, nans, !=, FINITE, ||, divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return]
[divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[divisor, ., nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[(, isNaN, (, ), ), {, return, this, ;, }, if, (, divisor, ., isNaN, (, ), ), {, return]
[{, return, this, ;, }, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (]
[{, return, this, ;, }, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (]
[{, return, this, ;, }, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (]
[this, ;, }, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (, nans, ==]
[}, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&]
[}, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&]
[}, if, (, divisor, ., isNaN, (, ), ), {, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&]
[., isNaN, (, ), ), {, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==]
[), ), {, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {]
[{, return, divisor, ;, }, if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result, =]
[divisor, ;, }, if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (]
[if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;]
[if, (, nans, ==, INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;]
[INFINITE, &&, divisor, ., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =]
[., nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, )]
[nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[nans, ==, FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (]
[FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[FINITE, ), {, result, =, newInstance, (, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[(, this, ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==]
[(, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&]
[(, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&]
[*, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==]
[sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {]
[;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =]
[result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =, newInstance, (]
[divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;]
[divisor, ., nans, ==, INFINITE, &&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;]
[INFINITE, &&, nans, ==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =]
[==, FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, )]
[FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (]
[FINITE, ), {, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (]
[{, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[{, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[(, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (]
[byte, ), (, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==]
[(, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&]
[(, sign, *, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&]
[*, divisor, ., sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==]
[sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {]
[sign, ), ;, return, result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {]
[result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (]
[result, ;, }, if, (, divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (]
[divisor, ., nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[nans, ==, INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =]
[INFINITE, &&, nans, ==, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[FLAG_INVALID, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,]
[nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (]
[FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant, []
[FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant, []
[FLAG_INVALID, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant, []
[divisor, ,, result, ), ;, return, result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length, -]
[), ;, return, result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==]
[result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[result, ;, }, }, if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (]
[if, (, divisor, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;]
[., length, -, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =]
[-, 1, ], ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;]
[setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =]
[., FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, )]
[FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (]
[FLAG_DIV_ZERO, ), ;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[;, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *]
[getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;]
[getZero, (, ), ), ;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;]
[;, result, ., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =]
[., sign, =, (, byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;]
[=, (, byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =]
[byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (]
[byte, ), (, sign, *, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (]
[*, divisor, ., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,]
[., sign, ), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,]
[), ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,]
[nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return]
[;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }]
[=, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =]
[DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =, new, int, []
[DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =, new, int, []
[DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =, new, int, []
[DIVIDE_TRAP, ,, divisor, ,, result, ), ;, return, result, ;, }, dividend, =, new, int, [, mant, ., length, +]
[,, result, ), ;, return, result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;]
[), ;, return, result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;, quotient, =]
[result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;, quotient, =, new, int, []
[result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;, quotient, =, new, int, []
[result, ;, }, dividend, =, new, int, [, mant, ., length, +, 1, ], ;, quotient, =, new, int, []
[=, new, int, [, mant, ., length, +, 1, ], ;, quotient, =, new, int, [, mant, ., length, +]
[[, mant, ., length, +, 1, ], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;]
[., length, +, 1, ], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =]
[1, ], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, []
[1, ], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, []
[1, ], ;, quotient, =, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, []
[=, new, int, [, mant, ., length, +, 2, ], ;, remainder, =, new, int, [, mant, ., length, +]
[[, mant, ., length, +, 2, ], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;]
[[, mant, ., length, +, 2, ], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;]
[., length, +, 2, ], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, []
[., length, +, 2, ], ;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, []
[;, remainder, =, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ], =]
[=, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;]
[=, new, int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;]
[int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, []
[int, [, mant, ., length, +, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, []
[+, 1, ], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =]
[], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;]
[], ;, dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;]
[dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, []
[dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, []
[dividend, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, []
[length, ], =, 0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +]
[0, ;, quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =]
[quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;]
[quotient, [, mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;]
[mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder, []
[mant, ., length, ], =, 0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder, []
[0, ;, quotient, [, mant, ., length, +, 1, ], =, 0, ;, remainder, [, mant, ., length, ], =]
[+, 1, ], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =]
[], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;]
[], =, 0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;]
[0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[0, ;, remainder, [, mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[mant, ., length, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, []
[int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =]
[int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =]
[=, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =, mant, []
[i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;]
[i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;]
[mant, ., length, ;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, []
[;, i, ++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =]
[++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;]
[++, ), {, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;]
[{, dividend, [, i, ], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;, remainder, []
[i, ], =, mant, [, i, ], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =]
[mant, [, i, ], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;, }]
[i, ], ;, quotient, [, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =]
[[, i, ], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (]
[], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =]
[], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =]
[], =, 0, ;, remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =]
[remainder, [, i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +]
[i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;]
[i, ], =, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;]
[=, 0, ;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;, qd, >=]
[;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;]
[;, }, nsqd, =, 0, ;, for, (, qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;]
[qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =]
[qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =]
[qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =]
[qd, =, mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =]
[mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, []
[mant, ., length, +, 1, ;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, []
[;, qd, >=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *]
[>=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +]
[>=, 0, ;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +]
[;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, []
[;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, []
[;, qd, --, ), {, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, []
[{, final, int, divMsb, =, dividend, [, mant, ., length, ], *, RADIX, +, dividend, [, mant, ., length, -]
[[, mant, ., length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =]
[[, mant, ., length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =]
[., length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /]
[length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (]
[length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (]
[length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (]
[length, ], *, RADIX, +, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (]
[+, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, []
[+, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, []
[+, dividend, [, mant, ., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, []
[., length, -, 1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -]
[1, ], ;, int, min, =, divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +]
[divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =]
[divMsb, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =]
[/, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (]
[/, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (]
[divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +]
[[, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /]
[[, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /]
[[, mant, ., length, -, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /]
[-, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, []
[-, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, []
[-, 1, ], +, 1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, []
[1, ), ;, int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -]
[int, max, =, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1, ], ;]
[=, (, divMsb, +, 1, ), /, divisor, ., mant, [, mant, ., length, -, 1, ], ;, trialgood, =]
[1, ), /, divisor, ., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (]
[), /, divisor, ., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !]
[., mant, [, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {]
[[, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =]
[[, mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =]
[mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (]
[mant, ., length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (]
[length, -, 1, ], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +]
[], ;, trialgood, =, false, ;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /]
[;, while, (, !, trialgood, ), {, trial, =, (, min, +, max, ), /, 2, ;, int, rh, =]
[trial, =, (, min, +, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =]
[(, min, +, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[(, min, +, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;]
[+, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[+, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[+, max, ), /, 2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[2, ;, int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +]
[int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;]
[int, rh, =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;]
[int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =]
[int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =]
[i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =, (]
[i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =, (]
[0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <]
[0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <]
[., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?]
[., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?]
[., length, +, 1, ;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?]
[;, i, ++, ), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, ., mant, []
[), {, int, dm, =, (, i, <, mant, ., length, ), ?, divisor, ., mant, [, i, ], :]
[i, <, mant, ., length, ), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =]
[i, <, mant, ., length, ), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =]
[<, mant, ., length, ), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (]
[<, mant, ., length, ), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (]
[., length, ), ?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *]
[?, divisor, ., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +]
[., mant, [, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;]
[[, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =]
[[, i, ], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =]
[], :, 0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /]
[0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;]
[0, ;, final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;]
[final, int, r, =, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, []
[=, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =]
[=, (, dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =]
[dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -]
[dm, *, trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -]
[trial, ), +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *]
[rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }]
[rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, rh, =]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =]
[], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;]
[], =, r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;]
[r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[r, -, rh, *, RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <]
[RADIX, ;, }, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +]
[}, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;]
[}, rh, =, 1, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, +, 1, ;]
[i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =]
[i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =]
[i, =, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =]
[=, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =, (]
[=, 0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =, (]
[0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (]
[0, ;, i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (]
[i, <, mant, ., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX, -]
[., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -]
[., length, +, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -]
[+, 1, ;, i, ++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, []
[++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +]
[++, ), {, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +]
[{, final, int, r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend, []
[r, =, (, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend, [, i, ], +]
[(, (, RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;]
[RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =]
[RADIX, -, 1, ), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =]
[1, ), -, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /]
[-, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[-, remainder, [, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;]
[[, i, ], ), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, []
[), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =]
[), +, dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =]
[dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -]
[dividend, [, i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -]
[i, ], +, rh, ;, rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *]
[rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (]
[rh, =, r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (]
[r, /, RADIX, ;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==]
[;, remainder, [, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =]
[[, i, ], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =]
[], =, r, -, rh, *, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =, trial, -]
[*, RADIX, ;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }]
[;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =]
[;, }, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =]
[}, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (]
[}, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (]
[}, if, (, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (]
[(, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, []
[(, rh, ==, 0, ), {, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, []
[{, max, =, trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *]
[trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +]
[trial, -, 1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +]
[1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, []
[1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, []
[1, ;, continue, ;, }, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, []
[}, minadj, =, (, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -]
[(, remainder, [, mant, ., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;]
[[, mant, ., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =]
[[, mant, ., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =]
[., length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /]
[length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (]
[length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (]
[length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (]
[length, ], *, RADIX, ), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (]
[), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, []
[), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, []
[), +, remainder, [, mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, []
[mant, ., length, -, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -]
[-, 1, ], ;, minadj, =, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +]
[=, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, if, (]
[=, minadj, /, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, if, (]
[/, (, divisor, ., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=]
[., mant, [, mant, ., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {]
[[, mant, ., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =]
[[, mant, ., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =]
[., length, -, 1, ], +, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +]
[+, 1, ), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }]
[), ;, if, (, minadj, >=, 2, ), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =]
[), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =]
[), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =]
[), {, min, =, trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =]
[trial, +, minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -]
[minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;]
[minadj, ;, continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;]
[continue, ;, }, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[}, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[}, trialgood, =, false, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, []
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >]
[;, i, >=, 0, ;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, []
[;, i, --, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {]
[--, ), {, if, (, divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =]
[divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (]
[divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (]
[divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (]
[divisor, ., mant, [, i, ], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (]
[i, ], >, remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, []
[remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ], <]
[remainder, [, i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ], <]
[i, ], ), {, trialgood, =, true, ;, }, if, (, divisor, ., mant, [, i, ], <, remainder, []
[(, divisor, ., mant, [, i, ], <, remainder, [, i, ], ), {, break, ;, }, }, if, (]
[(, divisor, ., mant, [, i, ], <, remainder, [, i, ], ), {, break, ;, }, }, if, (]
[(, divisor, ., mant, [, i, ], <, remainder, [, i, ], ), {, break, ;, }, }, if, (]
[., mant, [, i, ], <, remainder, [, i, ], ), {, break, ;, }, }, if, (, remainder, []
[., mant, [, i, ], <, remainder, [, i, ], ), {, break, ;, }, }, if, (, remainder, []
[<, remainder, [, i, ], ), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=]
[i, ], ), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=, 0, ), {]
[), {, break, ;, }, }, if, (, remainder, [, mant, ., length, ], !=, 0, ), {, trialgood, =]
[}, if, (, remainder, [, mant, ., length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (]
[}, if, (, remainder, [, mant, ., length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (]
[(, remainder, [, mant, ., length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==]
[mant, ., length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {]
[length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =]
[length, ], !=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =]
[!=, 0, ), {, trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +]
[trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;, }, }]
[trialgood, =, false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;, }, }]
[false, ;, }, if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;, }, }, quotient, []
[if, (, trialgood, ==, false, ), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =]
[false, ), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (]
[false, ), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (]
[false, ), {, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (]
[{, min, =, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=]
[=, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||]
[=, trial, +, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||]
[+, 1, ;, }, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=]
[}, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {]
[}, }, quotient, [, qd, ], =, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {]
[=, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (]
[=, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (]
[=, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (]
[=, trial, ;, if, (, trial, !=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (]
[!=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==]
[!=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==]
[!=, 0, ||, nsqd, !=, 0, ), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==]
[), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&]
[), {, nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&]
[nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==]
[nsqd, ++, ;, }, if, (, field, ., getRoundingMode, (, ), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==]
[), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (]
[), ==, DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (]
[DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (, nsqd, >]
[DfpField, ., RoundingMode, ., ROUND_DOWN, &&, nsqd, ==, mant, ., length, ), {, break, ;, }, if, (, nsqd, >]
[mant, ., length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }]
[mant, ., length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }]
[length, ), {, break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }, dividend, []
[break, ;, }, if, (, nsqd, >, mant, ., length, ), {, break, ;, }, dividend, [, 0, ], =]
[mant, ., length, ), {, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =]
[length, ), {, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;]
[length, ), {, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;]
[{, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[{, break, ;, }, dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[dividend, [, 0, ], =, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[=, 0, ;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, []
[;, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, []
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, +]
[=, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, +, 1, ], =]
[=, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, +, 1, ], =]
[;, i, <, mant, ., length, ;, i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, []
[length, ;, i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }, }]
[i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }, }, md, =]
[i, ++, ), {, dividend, [, i, +, 1, ], =, remainder, [, i, ], ;, }, }, md, =]
[], =, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =]
[], =, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =]
[], =, remainder, [, i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =]
[i, ], ;, }, }, md, =, mant, ., length, ;, for, (, int, i, =, mant, ., length, +]
[;, }, }, md, =, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;]
[;, }, }, md, =, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;]
[}, md, =, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;, i, >=]
[=, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;]
[=, mant, ., length, ;, for, (, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;]
[(, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[(, int, i, =, mant, ., length, +, 1, ;, i, >=, 0, ;, i, --, ), {, if, (]
[i, =, mant, ., length, +, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, quotient, []
[., length, +, 1, ;, i, >=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=]
[1, ;, i, >=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, ), {]
[i, >=, 0, ;, i, --, ), {, if, (, quotient, [, i, ], !=, 0, ), {, md, =]
[[, i, ], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =]
[], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;]
[], !=, 0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;]
[0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[0, ), {, md, =, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <]
[=, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[=, i, ;, break, ;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;]
[;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[;, }, }, for, (, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {]
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[(, int, i, =, 0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, []
[0, ;, i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -]
[i, <, mant, ., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -]
[., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =]
[., length, ;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =]
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, []
[;, i, ++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, []
[++, ), {, result, ., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, [, md, -]
[., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }]
[., mant, [, mant, ., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }]
[., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =]
[., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =]
[., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =]
[., length, -, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =]
[-, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -]
[-, i, -, 1, ], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -]
[], =, quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +]
[quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -]
[quotient, [, md, -, i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -]
[i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;]
[i, ], ;, }, result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;]
[result, ., exp, =, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =]
[=, exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, )]
[exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (]
[exp, -, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (]
[-, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (]
[-, divisor, ., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (]
[., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==]
[., exp, +, md, -, mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==]
[mant, ., length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?]
[length, ;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :]
[;, result, ., sign, =, (, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -]
[(, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, byte, ), (, (, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (]
[(, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, []
[(, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, []
[(, sign, ==, divisor, ., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, []
[., sign, ), ?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -]
[?, 1, :, -, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[-, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[-, 1, ), ;, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (]
[., length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >]
[length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (]
[length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (]
[length, -, 1, ], ==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (]
[==, 0, ), {, result, ., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -]
[result, ., exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -, 1, ), ), {]
[exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =]
[exp, =, 0, ;, }, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =]
[}, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (]
[}, if, (, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (]
[(, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, quotient, []
[(, md, >, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, quotient, []
[>, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, quotient, [, md, -]
[>, (, mant, ., length, -, 1, ), ), {, excp, =, result, ., round, (, quotient, [, md, -]
[{, excp, =, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }, else, {]
[=, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =]
[=, result, ., round, (, quotient, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =]
[(, quotient, [, md, -, mant, ., length, ], ), ;, }, else, {, excp, =, result, ., round, (]
[., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (]
[., length, ], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (]
[], ), ;, }, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=]
[}, else, {, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {]
[{, excp, =, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =]
[=, result, ., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[., round, (, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[(, 0, ), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,]
[), ;, }, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,]
[excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, divisor, ,, result, ), ;, }, return]
[divisor, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if, (]
[divisor, ,, result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if, (]
[result, ), ;, }, return, result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if, (, nans, !=]
[result, ;, }, public, Dfp, divide, (, int, divisor, ), {, if, (, nans, !=, FINITE, ), {, if, (]
[(, int, divisor, ), {, if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return]
[if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[if, (, nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (]
[nans, !=, FINITE, ), {, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==]
[{, if, (, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, ), {, return]
[(, isNaN, (, ), ), {, return, this, ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (]
[this, ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, }, if, (]
[this, ;, }, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, }, if, (]
[}, if, (, nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==]
[nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==, 0, ), {]
[nans, ==, INFINITE, ), {, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==, 0, ), {]
[{, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits, (]
[{, return, newInstance, (, this, ), ;, }, }, if, (, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits, (]
[}, if, (, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =]
[(, divisor, ==, 0, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[(, DfpField, ., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =]
[., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, sign, ;]
[., FLAG_DIV_ZERO, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, sign, ;]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, sign, ;, result, ., nans, =]
[=, newInstance, (, getZero, (, ), ), ;, result, ., sign, =, sign, ;, result, ., nans, =, INFINITE, ;]
[(, getZero, (, ), ), ;, result, ., sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =]
[(, ), ), ;, result, ., sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (]
[(, ), ), ;, result, ., sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (]
[result, ., sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,]
[sign, =, sign, ;, result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,]
[result, ., nans, =, INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,]
[INFINITE, ;, result, =, dotrap, (, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return]
[(, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (]
[(, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (]
[(, DfpField, ., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (]
[., FLAG_DIV_ZERO, ,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (, divisor, <]
[,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||]
[,, DIVIDE_TRAP, ,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||]
[,, getZero, (, ), ,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=]
[), ,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {]
[), ,, result, ), ;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {]
[;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (]
[;, return, result, ;, }, if, (, divisor, <, 0, ||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (]
[<, 0, ||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =]
[||, divisor, >=, RADIX, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[(, DfpField, ., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[., FLAG_INVALID, ), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;]
[), ;, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[(, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, ), ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,]
[nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, Dfp, result, =]
[DfpField, ., FLAG_INVALID, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, return, result, ;, }, Dfp, result, =, newInstance, (]
[result, ,, result, ), ;, return, result, ;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =]
[;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =, 0, ;, for, (, int, i, =]
[;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =, 0, ;, for, (, int, i, =]
[;, }, Dfp, result, =, newInstance, (, this, ), ;, int, rl, =, 0, ;, for, (, int, i, =]
[=, newInstance, (, this, ), ;, int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -]
[(, this, ), ;, int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;]
[(, this, ), ;, int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;]
[), ;, int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[int, rl, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =]
[i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =]
[i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =]
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *]
[length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +]
[length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +]
[length, -, 1, ;, i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +]
[i, >=, 0, ;, i, --, ), {, final, int, r, =, rl, *, RADIX, +, result, ., mant, []
[{, final, int, r, =, rl, *, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh, =]
[{, final, int, r, =, rl, *, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh, =]
[int, r, =, rl, *, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh, =, r, /]
[=, rl, *, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;]
[*, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =]
[*, RADIX, +, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =]
[+, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -]
[+, result, ., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -]
[., mant, [, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *]
[[, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;]
[[, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;]
[[, i, ], ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;]
[final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, []
[=, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =]
[rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (]
[rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (]
[rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (]
[rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (]
[rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, []
[rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, []
[rh, *, divisor, ;, result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, []
[result, ., mant, [, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -]
[[, i, ], =, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==]
[=, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[=, rh, ;, }, if, (, result, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[mant, ., length, -, 1, ], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =]
[mant, ., length, -, 1, ], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =]
[length, -, 1, ], ==, 0, ), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *]
[), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =]
[), {, result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =]
[result, ., shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /]
[shiftLeft, (, ), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;]
[), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =]
[), ;, final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =]
[final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -]
[final, int, r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -]
[r, =, rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *]
[rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;]
[rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;]
[rl, *, RADIX, ;, final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;]
[final, int, rh, =, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, []
[=, r, /, divisor, ;, rl, =, r, -, rh, *, divisor, ;, result, ., mant, [, 0, ], =]
[r, -, rh, *, divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =]
[r, -, rh, *, divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =]
[divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (]
[divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (]
[divisor, ;, result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (]
[result, ., mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl, *]
[mant, [, 0, ], =, rh, ;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX, /]
[rh, ;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX, /, divisor, ), ;, if, (]
[rh, ;, }, final, int, excp, =, result, ., round, (, rl, *, RADIX, /, divisor, ), ;, if, (]
[}, final, int, excp, =, result, ., round, (, rl, *, RADIX, /, divisor, ), ;, if, (, excp, !=]
[excp, =, result, ., round, (, rl, *, RADIX, /, divisor, ), ;, if, (, excp, !=, 0, ), {]
[result, ., round, (, rl, *, RADIX, /, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =]
[round, (, rl, *, RADIX, /, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (]
[rl, *, RADIX, /, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,]
[RADIX, /, divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,]
[divisor, ), ;, if, (, excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,]
[excp, !=, 0, ), {, result, =, dotrap, (, excp, ,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return]
[,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return]
[,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return]
[,, DIVIDE_TRAP, ,, result, ,, result, ), ;, }, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return]
[}, return, result, ;, }, public, Dfp, reciprocal, (, ), {, return, field, ., getOne, (, ), ., divide, (]
[field, ., getOne, (, ), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (]
[field, ., getOne, (, ), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (]
[field, ., getOne, (, ), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (]
[getOne, (, ), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==]
[), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&]
[), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&]
[), ., divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&]
[divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant, []
[divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant, []
[divide, (, this, ), ;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant, []
[;, }, public, Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[Dfp, sqrt, (, ), {, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==]
[{, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return]
[(, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (]
[., length, -, 1, ], ==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=]
[==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (]
[==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (]
[==, 0, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (]
[), {, return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==]
[return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, &&]
[return, newInstance, (, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, &&]
[(, this, ), ;, }, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, &&, sign, ==]
[}, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {, return]
[(, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (]
[if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (]
[if, (, nans, ==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (]
[nans, ==, INFINITE, &&, sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==]
[sign, ==, 1, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {, return]
[1, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (]
[this, ), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (]
[this, ), ;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (]
[;, }, if, (, nans, ==, QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==]
[QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;]
[QNAN, ), {, return, newInstance, (, this, ), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;]
[newInstance, (, this, ), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (]
[newInstance, (, this, ), ;, }, if, (, nans, ==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (]
[}, if, (, nans, ==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[(, nans, ==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =]
[==, SNAN, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (]
[{, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;]
[result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, =]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (]
[DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,]
[;, result, =, newInstance, (, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,]
[(, this, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, }, if, (]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, }, if, (]
[DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, }, if, (, sign, ==]
[., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, }, if, (, sign, ==, -]
[,, result, ), ;, return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;]
[,, result, ), ;, return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;]
[return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (]
[return, result, ;, }, }, if, (, sign, ==, -, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (]
[if, (, sign, ==, -, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;]
[sign, ==, -, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =]
[-, 1, ), {, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (]
[{, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;]
[{, Dfp, result, ;, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =]
[setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;]
[DfpField, ., FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =]
[FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[FLAG_INVALID, ), ;, result, =, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (]
[=, newInstance, (, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[(, this, ), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,]
[), ;, result, ., nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,]
[nans, =, QNAN, ;, result, =, dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return]
[dotrap, (, DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =]
[DfpField, ., FLAG_INVALID, ,, SQRT_TRAP, ,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (]
[,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (]
[,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (]
[,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (]
[,, null, ,, result, ), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (]
[), ;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <]
[;, return, result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <, -]
[result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <, -, 1, ||]
[result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <, -, 1, ||]
[result, ;, }, Dfp, x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <, -, 1, ||]
[x, =, newInstance, (, this, ), ;, if, (, x, ., exp, <, -, 1, ||, x, ., exp, >]
[(, this, ), ;, if, (, x, ., exp, <, -, 1, ||, x, ., exp, >, 1, ), {]
[(, this, ), ;, if, (, x, ., exp, <, -, 1, ||, x, ., exp, >, 1, ), {]
[if, (, x, ., exp, <, -, 1, ||, x, ., exp, >, 1, ), {, x, ., exp, =]
[if, (, x, ., exp, <, -, 1, ||, x, ., exp, >, 1, ), {, x, ., exp, =]
[if, (, x, ., exp, <, -, 1, ||, x, ., exp, >, 1, ), {, x, ., exp, =]
[exp, <, -, 1, ||, x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /]
[x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (]
[x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (]
[x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (]
[x, ., exp, >, 1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (]
[1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, []
[1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, []
[1, ), {, x, ., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, []
[., exp, =, this, ., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant, ., length, -]
[this, ., exp, /, 2, ;, }, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /]
[2, ;, }, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case]
[}, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :]
[}, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :]
[}, switch, (, x, ., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :]
[., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, []
[., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, []
[., mant, [, mant, ., length, -, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, []
[., length, -, 1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -]
[1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[1, ], /, 2000, ), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x, ., mant, []
[), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x, ., mant, []
[), {, case, 0, :, x, ., mant, [, mant, ., length, -, 1, ], =, x, ., mant, []
[:, x, ., mant, [, mant, ., length, -, 1, ], =, x, ., mant, [, mant, ., length, -]
[mant, [, mant, ., length, -, 1, ], =, x, ., mant, [, mant, ., length, -, 1, ], /]
[mant, ., length, -, 1, ], =, x, ., mant, [, mant, ., length, -, 1, ], /, 2, +]
[], =, x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case]
[x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :]
[x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :]
[x, ., mant, [, mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :]
[mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, []
[mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, []
[mant, ., length, -, 1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, []
[1, ], /, 2, +, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -]
[2, +, 1, ;, break, ;, case, 2, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[;, case, 2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case]
[2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :]
[2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :]
[2, :, x, ., mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :]
[mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant, []
[mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant, []
[mant, [, mant, ., length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant, []
[length, -, 1, ], =, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant, ., length, -]
[], =, 1500, ;, break, ;, case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :]
[case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :]
[case, 3, :, x, ., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :]
[., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, []
[., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, []
[., mant, [, mant, ., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, []
[., length, -, 1, ], =, 2200, ;, break, ;, default, :, x, ., mant, [, mant, ., length, -]
[1, ], =, 2200, ;, break, ;, default, :, x, ., mant, [, mant, ., length, -, 1, ], =]
[;, default, :, x, ., mant, [, mant, ., length, -, 1, ], =, 3000, ;, }, Dfp, dx, =]
[:, x, ., mant, [, mant, ., length, -, 1, ], =, 3000, ;, }, Dfp, dx, =, newInstance, (]
[., length, -, 1, ], =, 3000, ;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =]
[;, }, Dfp, dx, =, newInstance, (, x, ), ;, Dfp, px, =, getZero, (, ), ;, Dfp, ppx, =]
[(, x, ), ;, Dfp, px, =, getZero, (, ), ;, Dfp, ppx, =, getZero, (, ), ;, while, (]
[(, x, ), ;, Dfp, px, =, getZero, (, ), ;, Dfp, ppx, =, getZero, (, ), ;, while, (]
[Dfp, px, =, getZero, (, ), ;, Dfp, ppx, =, getZero, (, ), ;, while, (, x, ., unequal, (]
[(, ), ;, Dfp, ppx, =, getZero, (, ), ;, while, (, x, ., unequal, (, px, ), ), {]
[;, Dfp, ppx, =, getZero, (, ), ;, while, (, x, ., unequal, (, px, ), ), {, dx, =]
[ppx, =, getZero, (, ), ;, while, (, x, ., unequal, (, px, ), ), {, dx, =, newInstance, (]
[(, ), ;, while, (, x, ., unequal, (, px, ), ), {, dx, =, newInstance, (, x, ), ;]
[(, ), ;, while, (, x, ., unequal, (, px, ), ), {, dx, =, newInstance, (, x, ), ;]
[(, x, ., unequal, (, px, ), ), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =]
[x, ., unequal, (, px, ), ), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -]
[unequal, (, px, ), ), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;]
[px, ), ), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;, dx, =]
[px, ), ), {, dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;, dx, =]
[dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;, dx, =, dx, ., add, (]
[dx, =, newInstance, (, x, ), ;, dx, ., sign, =, -, 1, ;, dx, =, dx, ., add, (]
[x, ), ;, dx, ., sign, =, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (]
[., sign, =, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;]
[=, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;, dx, =]
[=, -, 1, ;, dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;, dx, =]
[dx, =, dx, ., add, (, this, ., divide, (, x, ), ), ;, dx, =, dx, ., divide, (]
[., add, (, this, ., divide, (, x, ), ), ;, dx, =, dx, ., divide, (, 2, ), ;]
[(, this, ., divide, (, x, ), ), ;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =]
[., divide, (, x, ), ), ;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;]
[(, x, ), ), ;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =]
[), ), ;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;]
[;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;, x, =]
[;, dx, =, dx, ., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;, x, =]
[., divide, (, 2, ), ;, ppx, =, px, ;, px, =, x, ;, x, =, x, ., add, (]
[;, ppx, =, px, ;, px, =, x, ;, x, =, x, ., add, (, dx, ), ;, if, (]
[;, ppx, =, px, ;, px, =, x, ;, x, =, x, ., add, (, dx, ), ;, if, (]
[;, px, =, x, ;, x, =, x, ., add, (, dx, ), ;, if, (, x, ., equals, (]
[add, (, dx, ), ;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (]
[add, (, dx, ), ;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (]
[add, (, dx, ), ;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (]
[add, (, dx, ), ;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (]
[;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (, dx, ., mant, []
[;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (, dx, ., mant, []
[;, if, (, x, ., equals, (, ppx, ), ), {, break, ;, }, if, (, dx, ., mant, []
[., equals, (, ppx, ), ), {, break, ;, }, if, (, dx, ., mant, [, mant, ., length, -]
[ppx, ), ), {, break, ;, }, if, (, dx, ., mant, [, mant, ., length, -, 1, ], ==]
[(, dx, ., mant, [, mant, ., length, -, 1, ], ==, 0, ), {, break, ;, }, }, return]
[), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, ), {, if, (]
[), {, break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, ), {, if, (]
[break, ;, }, }, return, x, ;, }, @, Override, public, String, toString, (, ), {, if, (, nans, !=]
[x, ;, }, @, Override, public, String, toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (]
[x, ;, }, @, Override, public, String, toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (]
[}, @, Override, public, String, toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (, nans, ==]
[String, toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return]
[String, toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return]
[toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return, (]
[toString, (, ), {, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return, (]
[), {, if, (, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return, (, sign, <]
[(, nans, !=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return, (, sign, <, 0, ), ?]
[!=, FINITE, ), {, if, (, nans, ==, INFINITE, ), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :]
[nans, ==, INFINITE, ), {, return, (, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return]
[(, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (]
[(, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (]
[(, sign, <, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (]
[<, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >]
[<, 0, ), ?, NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >]
[NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||]
[NEG_INFINITY_STRING, :, POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||]
[POS_INFINITY_STRING, ;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||, exp, <]
[;, }, else, {, return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||, exp, <, -]
[return, NAN_STRING, ;, }, }, if, (, exp, >, mant, ., length, ||, exp, <, -, 1, ), {, return]
[(, exp, >, mant, ., length, ||, exp, <, -, 1, ), {, return, dfp2sci, (, ), ;, }, return]
[), ;, }, return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {, char, rawdigits, [, ], =]
[return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {, char, rawdigits, [, ], =, new, char, []
[return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {, char, rawdigits, [, ], =, new, char, []
[return, dfp2string, (, ), ;, }, protected, String, dfp2sci, (, ), {, char, rawdigits, [, ], =, new, char, []
[;, }, protected, String, dfp2sci, (, ), {, char, rawdigits, [, ], =, new, char, [, mant, ., length, *]
[char, rawdigits, [, ], =, new, char, [, mant, ., length, *, 4, ], ;, char, outputbuffer, [, ], =]
[], =, new, char, [, mant, ., length, *, 4, ], ;, char, outputbuffer, [, ], =, new, char, []
[], =, new, char, [, mant, ., length, *, 4, ], ;, char, outputbuffer, [, ], =, new, char, []
[], =, new, char, [, mant, ., length, *, 4, ], ;, char, outputbuffer, [, ], =, new, char, []
[], =, new, char, [, mant, ., length, *, 4, ], ;, char, outputbuffer, [, ], =, new, char, []
[[, mant, ., length, *, 4, ], ;, char, outputbuffer, [, ], =, new, char, [, mant, ., length, *]
[., length, *, 4, ], ;, char, outputbuffer, [, ], =, new, char, [, mant, ., length, *, 4, +]
[4, +, 20, ], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf, ;]
[20, ], ;, int, p, ;, int, q, ;, int, e, ;, int, ae, ;, int, shf, ;, p, =]
[q, ;, int, e, ;, int, ae, ;, int, shf, ;, p, =, 0, ;, for, (, int, i, =]
[q, ;, int, e, ;, int, ae, ;, int, shf, ;, p, =, 0, ;, for, (, int, i, =]
[q, ;, int, e, ;, int, ae, ;, int, shf, ;, p, =, 0, ;, for, (, int, i, =]
[;, int, ae, ;, int, shf, ;, p, =, 0, ;, for, (, int, i, =, mant, ., length, -]
[ae, ;, int, shf, ;, p, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;]
[ae, ;, int, shf, ;, p, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;]
[int, shf, ;, p, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[;, p, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[;, p, =, 0, ;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[;, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, []
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, []
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, )]
[1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (]
[1, ;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (]
[;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[;, i, >=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[>=, 0, ;, i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, []
[i, --, ), {, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /]
[{, rawdigits, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +]
[p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;]
[p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;]
[], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, rawdigits, []
[], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, rawdigits, []
[), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =]
[mant, [, i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, )]
[[, i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[[, i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[i, ], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[], /, 1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[1000, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, []
['0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /]
[rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %]
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +]
[(, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;]
[(, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;]
[), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;, rawdigits, []
[), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;, rawdigits, []
[mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =]
[], /, 100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, )]
[/, 100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[/, 100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[100, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, []
['0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /]
[rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %]
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +]
[(, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;]
[(, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;]
[), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;, rawdigits, []
[), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;, rawdigits, []
[mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =]
[], /, 10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, )]
[/, 10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[/, 10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (]
[10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[10, ), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[), %, 10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (]
[10, ), +, '0', ), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, []
[), ;, rawdigits, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +]
[char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, }, for, (]
[(, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, }, for, (, p, =]
[(, mant, [, i, ], ), %, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;]
[(, mant, [, i, ], ), %, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;]
[[, i, ], ), %, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <]
[[, i, ], ), %, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <]
[%, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;]
[%, 10, ), +, '0', ), ;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;]
[;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (]
[;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (]
[;, }, for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (]
[for, (, p, =, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (, rawdigits, []
[=, 0, ;, p, <, rawdigits, ., length, ;, p, ++, ), {, if, (, rawdigits, [, p, ], !=]
[length, ;, p, ++, ), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }]
[p, ++, ), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }, shf, =]
[), {, if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }, shf, =, p, ;]
[if, (, rawdigits, [, p, ], !=, '0', ), {, break, ;, }, }, shf, =, p, ;, q, =]
[p, ], !=, '0', ), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (]
[p, ], !=, '0', ), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (]
[!=, '0', ), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==]
['0', ), {, break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==, -]
[break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==, -, 1, ), {]
[break, ;, }, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==, -, 1, ), {]
[}, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==, -, 1, ), {, outputbuffer, []
[}, }, shf, =, p, ;, q, =, 0, ;, if, (, sign, ==, -, 1, ), {, outputbuffer, []
[p, ;, q, =, 0, ;, if, (, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =]
[;, if, (, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (]
[;, if, (, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (]
[(, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=]
[(, sign, ==, -, 1, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {]
[outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, []
[outputbuffer, [, q, ++, ], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, []
[], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =]
[], =, '-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =]
['-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, []
['-', ;, }, if, (, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, []
[(, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;]
[(, p, !=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;]
[!=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, []
[!=, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, []
[), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =]
[q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (]
[q, ++, ], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (]
[], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <]
[], =, rawdigits, [, p, ++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <]
[++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {]
[++, ], ;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {]
[;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, []
[;, outputbuffer, [, q, ++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, []
[++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =]
[++, ], =, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =]
[=, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, []
[=, '.', ;, while, (, p, <, rawdigits, ., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, []
[., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {]
[., length, ), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {]
[), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, []
[), {, outputbuffer, [, q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, []
[q, ++, ], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =]
[], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;]
[], =, rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;]
[rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, []
[rawdigits, [, p, ++, ], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, []
[], ;, }, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =]
[}, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;]
[}, }, else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;]
[else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, []
[else, {, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, []
[q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =]
[], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;]
[], =, '0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;]
['0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, []
['0', ;, outputbuffer, [, q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, []
[q, ++, ], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =]
[], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;]
[], =, '.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;]
['.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, []
['.', ;, outputbuffer, [, q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, []
[q, ++, ], =, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =]
[=, '0', ;, outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return]
[outputbuffer, [, q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (]
[q, ++, ], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,]
[], =, 'e', ;, outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,]
[outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }]
[outputbuffer, [, q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }]
[q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, []
[q, ++, ], =, '0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, []
['0', ;, return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =]
[return, new, String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;]
[String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =]
[String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =]
[String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =]
[String, (, outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =]
[outputbuffer, ,, 0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *]
[0, ,, 5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -]
[5, ), ;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -, shf, -]
[;, }, outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;]
[outputbuffer, [, q, ++, ], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =]
[], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (]
[], =, 'e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (]
['e', ;, e, =, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e, <]
[=, exp, *, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {]
[*, 4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =]
[4, -, shf, -, 1, ;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -]
[;, ae, =, e, ;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (]
[=, e, ;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (, p, =]
[;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;]
[;, if, (, e, <, 0, ), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;]
[(, e, <, 0, ), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;, p, >]
[<, 0, ), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;]
[), {, ae, =, -, e, ;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=]
[;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (]
[;, }, for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (]
[for, (, p, =, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (, e, <]
[=, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {]
[=, 1000000000, ;, p, >, ae, ;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {]
[;, p, >, ae, ;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, []
[;, p, >, ae, ;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, []
[;, p, /=, 10, ), {, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =]
[{, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (]
[{, }, if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (]
[if, (, e, <, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >]
[<, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {]
[<, 0, ), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {]
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, []
[), {, outputbuffer, [, q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, []
[q, ++, ], =, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =]
[=, '-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, )]
['-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (]
['-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (]
['-', ;, }, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (]
[}, while, (, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /]
[(, p, >, 0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /, p, +]
[0, ), {, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;]
[{, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =]
[{, outputbuffer, [, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =]
[[, q, ++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %]
[++, ], =, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %, p, ;]
[=, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %, p, ;, p, =]
[=, (, char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %, p, ;, p, =]
[char, ), (, ae, /, p, +, '0', ), ;, ae, =, ae, %, p, ;, p, =, p, /]
[/, p, +, '0', ), ;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return]
['0', ), ;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (]
[;, ae, =, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,]
[=, ae, %, p, ;, p, =, p, /, 10, ;, }, return, new, String, (, outputbuffer, ,, 0, ,]
[(, outputbuffer, ,, 0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =]
[0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, []
[0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, []
[0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, []
[0, ,, q, ), ;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, []
[;, }, protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, [, mant, ., length, *]
[protected, String, dfp2string, (, ), {, char, buffer, [, ], =, new, char, [, mant, ., length, *, 4, +]
[char, buffer, [, ], =, new, char, [, mant, ., length, *, 4, +, 20, ], ;, int, p, =]
[mant, ., length, *, 4, +, 20, ], ;, int, p, =, 1, ;, int, q, ;, int, e, =]
[+, 20, ], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =]
[], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;]
[], ;, int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;]
[int, p, =, 1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;, buffer, []
[1, ;, int, q, ;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =]
[;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (]
[;, int, e, =, exp, ;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (]
[e, =, exp, ;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (, e, <=]
[;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {]
[;, boolean, pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {]
[pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, []
[pointInserted, =, false, ;, buffer, [, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, []
[buffer, [, 0, ], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =]
[0, ], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;]
[0, ], =, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;]
[=, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[=, ' ', ;, if, (, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[(, e, <=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =]
[<=, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (]
[=, '0', ;, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <]
[buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {]
[buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {]
[p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, []
[p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, []
['.', ;, pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =]
[pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =, '0', ;]
[pointInserted, =, true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =, '0', ;]
[true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[true, ;, }, while, (, e, <, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[(, e, <, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =]
[<, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[<, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
['0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
['0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =]
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =]
[=, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =]
[[, p, ++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -]
[++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;]
[++, ], =, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;]
[=, '0', ;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=]
[;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[;, e, ++, ;, }, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;]
[}, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[}, for, (, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {]
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, buffer, []
[(, int, i, =, mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, buffer, []
[mant, ., length, -, 1, ;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =]
[-, 1, ;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, )]
[1, ;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (]
[1, ;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (]
[;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (]
[;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (]
[;, i, >=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (]
[>=, 0, ;, i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (, mant, []
[i, --, ), {, buffer, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /]
[{, buffer, [, p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +]
[p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;]
[p, ++, ], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;]
[], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, buffer, []
[], =, (, char, ), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, buffer, []
[), (, (, mant, [, i, ], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =]
[mant, [, i, ], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, )]
[[, i, ], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[[, i, ], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[i, ], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (]
[i, ], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (]
[], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[], /, 1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[1000, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, []
['0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /]
[buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %]
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +]
[(, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;]
[(, char, ), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;]
[), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;, buffer, []
[), (, (, (, mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;, buffer, []
[mant, [, i, ], /, 100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =]
[], /, 100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, )]
[/, 100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[/, 100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (]
[100, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, []
['0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /]
[buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %]
[++, ], =, (, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +]
[(, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;]
[(, char, ), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;]
[), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;, buffer, []
[), (, (, (, mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;, buffer, []
[mant, [, i, ], /, 10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =]
[], /, 10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, )]
[/, 10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[/, 10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (]
[10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (]
[10, ), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[), %, 10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (]
[10, ), +, '0', ), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, []
[), ;, buffer, [, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %]
[[, p, ++, ], =, (, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +]
[(, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, if, (]
[(, char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, if, (]
[char, ), (, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, if, (, --]
[(, (, (, mant, [, i, ], ), %, 10, ), +, '0', ), ;, if, (, --, e, ==]
[mant, [, i, ], ), %, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {]
[mant, [, i, ], ), %, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {]
[i, ], ), %, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, []
[i, ], ), %, 10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, []
[10, ), +, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =]
[+, '0', ), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.', ;]
[), ;, if, (, --, e, ==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =]
[==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (]
[==, 0, ), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (]
[), {, buffer, [, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >]
[[, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {]
[[, p, ++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {]
[++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {, buffer, []
[++, ], =, '.', ;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {, buffer, []
[;, pointInserted, =, true, ;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =]
[=, true, ;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =, '0', ;]
[=, true, ;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =, '0', ;]
[;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[;, }, }, while, (, e, >, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, []
[(, e, >, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =]
[>, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[>, 0, ), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[), {, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
['0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
['0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, []
[p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;]
[p, ++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (]
[++, ], =, '0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !]
['0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {]
['0', ;, buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {]
[buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, []
[buffer, [, p, ++, ], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, []
[], =, '0', ;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =]
[;, e, --, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }]
[--, ;, }, if, (, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }, q, =]
[(, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (]
[(, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (]
[(, !, pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (]
[pointInserted, ), {, buffer, [, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, []
[buffer, [, p, ++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==]
[++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {]
[++, ], =, '.', ;, }, q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {]
[q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }, if, (]
[q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }, if, (]
[q, =, 1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }, if, (]
[1, ;, while, (, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }, if, (, buffer, []
[(, buffer, [, q, ], ==, '0', ), {, q, ++, ;, }, if, (, buffer, [, q, ], ==]
[q, ], ==, '0', ), {, q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {]
[q, ], ==, '0', ), {, q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {]
[q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (]
[q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (]
[q, ++, ;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (]
[;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (, buffer, []
[;, }, if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (, buffer, []
[if, (, buffer, [, q, ], ==, '.', ), {, q, --, ;, }, while, (, buffer, [, p, -]
[[, q, ], ==, '.', ), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==]
[==, '.', ), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {]
[==, '.', ), {, q, --, ;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {]
[;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if, (]
[;, }, while, (, buffer, [, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if, (]
[while, (, buffer, [, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if, (, sign, <]
[[, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {]
[[, p, -, 1, ], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {]
[-, 1, ], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, []
[1, ], ==, '0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, [, --]
['0', ), {, p, --, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q, ], =]
[--, ;, }, if, (, sign, <, 0, ), {, buffer, [, --, q, ], =, '-', ;, }, return]
[if, (, sign, <, 0, ), {, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (]
[sign, <, 0, ), {, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,]
[0, ), {, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,]
[0, ), {, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,]
[{, buffer, [, --, q, ], =, '-', ;, }, return, new, String, (, buffer, ,, q, ,, p, -]
[public, Dfp, dotrap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, result, ), {, Dfp, def, =]
[int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, result, ), {, Dfp, def, =, result, ;, switch, (]
[what, ,, Dfp, oper, ,, Dfp, result, ), {, Dfp, def, =, result, ;, switch, (, type, ), {, case]
[what, ,, Dfp, oper, ,, Dfp, result, ), {, Dfp, def, =, result, ;, switch, (, type, ), {, case]
[,, Dfp, result, ), {, Dfp, def, =, result, ;, switch, (, type, ), {, case, DfpField, ., FLAG_INVALID, :]
[result, ), {, Dfp, def, =, result, ;, switch, (, type, ), {, case, DfpField, ., FLAG_INVALID, :, def, =]
[{, Dfp, def, =, result, ;, switch, (, type, ), {, case, DfpField, ., FLAG_INVALID, :, def, =, newInstance, (]
[;, switch, (, type, ), {, case, DfpField, ., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;]
[;, switch, (, type, ), {, case, DfpField, ., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;]
[), {, case, DfpField, ., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[), {, case, DfpField, ., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;]
[., FLAG_INVALID, :, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;]
[=, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =]
[), ), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case]
[), ), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case]
[=, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (]
[=, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (]
[=, result, ., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (]
[., sign, ;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==]
[;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&]
[;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&]
[;, def, ., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&]
[., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, []
[., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, []
[., nans, =, QNAN, ;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, []
[;, break, ;, case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[case, DfpField, ., FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=]
[FLAG_DIV_ZERO, :, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {]
[if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, def, =]
[nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (]
[[, mant, ., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[[, mant, ., length, -, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[-, 1, ], !=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[!=, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, )]
[0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (]
[0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (]
[{, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign, *]
[{, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign, *]
[getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign, *, oper, ., sign, ), ;]
[getZero, (, ), ), ;, def, ., sign, =, (, byte, ), (, sign, *, oper, ., sign, ), ;]
[;, def, ., sign, =, (, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans, =]
[(, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (]
[(, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (]
[(, byte, ), (, sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (]
[), (, sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==]
[sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&]
[sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&]
[sign, *, oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&]
[oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, []
[oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, []
[oper, ., sign, ), ;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, []
[;, def, ., nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -]
[nans, =, INFINITE, ;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==]
[;, }, if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {]
[if, (, nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, def, =]
[nans, ==, FINITE, &&, mant, [, mant, ., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (]
[[, mant, ., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[[, mant, ., length, -, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[-, 1, ], ==, 0, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==]
[newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||]
[newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||]
[getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==]
[), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {]
[def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def, =]
[nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance, (]
[if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[if, (, nans, ==, INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[INFINITE, ||, nans, ==, QNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (]
[def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==]
[newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||]
[newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||]
[getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==]
[), ;, def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {]
[def, ., nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def, =]
[nans, =, QNAN, ;, }, if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance, (]
[if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[if, (, nans, ==, INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[INFINITE, ||, nans, ==, SNAN, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =]
[{, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case]
[{, def, =, newInstance, (, getZero, (, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case]
[(, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (]
[(, ), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (]
[), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (]
[), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (]
[), ), ;, def, ., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (]
[., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +]
[., nans, =, QNAN, ;, }, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +]
[}, break, ;, case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +, mant, ., length, ), <]
[case, DfpField, ., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +, mant, ., length, ), <, MIN_EXP, ), {]
[., FLAG_UNDERFLOW, :, if, (, (, result, ., exp, +, mant, ., length, ), <, MIN_EXP, ), {, def, =]
[:, if, (, (, result, ., exp, +, mant, ., length, ), <, MIN_EXP, ), {, def, =, newInstance, (]
[., exp, +, mant, ., length, ), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[., exp, +, mant, ., length, ), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;]
[., length, ), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[., length, ), <, MIN_EXP, ), {, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, }, else, {]
[newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, }, else, {, def, =]
[getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, }, else, {, def, =, newInstance, (]
[;, def, ., sign, =, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }]
[;, def, ., sign, =, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }]
[=, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, ., exp, =]
[=, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, ., exp, =]
[=, result, ., sign, ;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, ., exp, =]
[;, }, else, {, def, =, newInstance, (, result, ), ;, }, result, ., exp, =, result, ., exp, +]
[=, newInstance, (, result, ), ;, }, result, ., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case]
[=, newInstance, (, result, ), ;, }, result, ., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case]
[), ;, }, result, ., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :]
[), ;, }, result, ., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :]
[., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =]
[., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =]
[., exp, =, result, ., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =]
[., exp, +, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -]
[+, ERR_SCALE, ;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;]
[;, break, ;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =]
[;, case, DfpField, ., FLAG_OVERFLOW, :, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (]
[:, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;]
[:, result, ., exp, =, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;]
[=, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[=, result, ., exp, -, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =]
[-, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;]
[-, ERR_SCALE, ;, def, =, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;]
[=, newInstance, (, getZero, (, ), ), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =]
[), ;, def, ., sign, =, result, ., sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :]
[def, ., sign, =, result, ., sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :, def, =]
[sign, ;, def, ., nans, =, INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }, return]
[def, ., nans, =, INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }, return, trap, (]
[nans, =, INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }, return, trap, (, type, ,]
[INFINITE, ;, break, ;, default, :, def, =, result, ;, break, ;, }, return, trap, (, type, ,, what, ,]
[break, ;, default, :, def, =, result, ;, break, ;, }, return, trap, (, type, ,, what, ,, oper, ,]
[default, :, def, =, result, ;, break, ;, }, return, trap, (, type, ,, what, ,, oper, ,, def, ,]
[Dfp, trap, (, int, type, ,, String, what, ,, Dfp, oper, ,, Dfp, def, ,, Dfp, result, ), {, return]
[oper, ,, Dfp, def, ,, Dfp, result, ), {, return, def, ;, }, public, int, classify, (, ), {, return]
[nans, ;, }, public, static, Dfp, copysign, (, final, Dfp, x, ,, final, Dfp, y, ), {, Dfp, result, =]
[nans, ;, }, public, static, Dfp, copysign, (, final, Dfp, x, ,, final, Dfp, y, ), {, Dfp, result, =]
[static, Dfp, copysign, (, final, Dfp, x, ,, final, Dfp, y, ), {, Dfp, result, =, x, ., newInstance, (]
[(, final, Dfp, x, ,, final, Dfp, y, ), {, Dfp, result, =, x, ., newInstance, (, x, ), ;]
[(, final, Dfp, x, ,, final, Dfp, y, ), {, Dfp, result, =, x, ., newInstance, (, x, ), ;]
[,, final, Dfp, y, ), {, Dfp, result, =, x, ., newInstance, (, x, ), ;, result, ., sign, =]
[,, final, Dfp, y, ), {, Dfp, result, =, x, ., newInstance, (, x, ), ;, result, ., sign, =]
[{, Dfp, result, =, x, ., newInstance, (, x, ), ;, result, ., sign, =, y, ., sign, ;, return]
[=, y, ., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (]
[=, y, ., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (]
[=, y, ., sign, ;, return, result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (]
[result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[result, ;, }, public, Dfp, nextAfter, (, final, Dfp, x, ), {, if, (, field, ., getRadixDigits, (, ), !=]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[x, ), {, if, (, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[(, field, ., getRadixDigits, (, ), !=, x, ., field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (]
[field, ., getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =]
[getRadixDigits, (, ), ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;]
[DfpField, ., FLAG_INVALID, ), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =]
[), ;, final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[final, Dfp, result, =, newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (]
[newInstance, (, getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,]
[getZero, (, ), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,]
[), ), ;, result, ., nans, =, QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,]
[QNAN, ;, return, dotrap, (, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up, =]
[(, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up, =, false, ;, if, (]
[(, DfpField, ., FLAG_INVALID, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up, =, false, ;, if, (]
[,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (]
[,, result, ), ;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (, x, ), ), {]
[), ;, }, boolean, up, =, false, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =]
[=, false, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (]
[=, false, ;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (]
[;, if, (, this, ., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, compare, (]
[(, this, ., lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, compare, (, this, ,]
[lessThan, (, x, ), ), {, up, =, true, ;, }, if, (, compare, (, this, ,, x, ), ==]
[), {, up, =, true, ;, }, if, (, compare, (, this, ,, x, ), ==, 0, ), {, return]
[up, =, true, ;, }, if, (, compare, (, this, ,, x, ), ==, 0, ), {, return, newInstance, (]
[(, compare, (, this, ,, x, ), ==, 0, ), {, return, newInstance, (, x, ), ;, }, if, (]
[(, this, ,, x, ), ==, 0, ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (]
[0, ), {, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {]
[{, return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =]
[return, newInstance, (, x, ), ;, }, if, (, lessThan, (, getZero, (, ), ), ), {, up, =, !]
[(, ), ), ), {, up, =, !, up, ;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (]
[), {, up, =, !, up, ;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {]
[up, =, !, up, ;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {, inc, =]
[!, up, ;, }, final, Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {, inc, =, newInstance, (]
[Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;]
[Dfp, inc, ;, Dfp, result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;]
[result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =]
[result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =]
[result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =]
[result, ;, if, (, up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =]
[up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, -]
[up, ), {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, -]
[=, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, -, mant, ., length, +]
[(, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;]
[(, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;]
[), ;, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =]
[), ;, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =]
[this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (]
[this, ., exp, -, mant, ., length, +, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (]
[mant, ., length, +, 1, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (]
[inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =]
[this, ., sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =]
[sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -]
[sign, ;, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -]
[., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }]
[(, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =]
[(, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, add, (]
[., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, add, (, inc, ), ;, }, else, {]
[=, MIN_EXP, -, mant, ., length, ;, }, result, =, add, (, inc, ), ;, }, else, {, inc, =]
[-, mant, ., length, ;, }, result, =, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (]
[}, result, =, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), ), ;]
[}, result, =, add, (, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), ), ;]
[(, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =]
[(, inc, ), ;, }, else, {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =]
[}, else, {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, ;]
[}, else, {, inc, =, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, ;]
[=, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, ;, inc, ., sign, =]
[=, newInstance, (, getOne, (, ), ), ;, inc, ., exp, =, this, ., exp, ;, inc, ., sign, =]
[), ;, inc, ., exp, =, this, ., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (]
[), ;, inc, ., exp, =, this, ., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (]
[exp, =, this, ., exp, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (]
[exp, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {]
[exp, ;, inc, ., sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {]
[sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =]
[sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =]
[sign, =, this, ., sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =]
[sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =, this, ., exp, -]
[sign, ;, if, (, this, ., equals, (, inc, ), ), {, inc, ., exp, =, this, ., exp, -]
[(, inc, ), ), {, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {]
[(, inc, ), ), {, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {]
[{, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =]
[{, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =]
[{, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =]
[{, inc, ., exp, =, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =]
[=, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =, this, ., exp, -]
[=, this, ., exp, -, mant, ., length, ;, }, else, {, inc, ., exp, =, this, ., exp, -]
[-, mant, ., length, ;, }, else, {, inc, ., exp, =, this, ., exp, -, mant, ., length, +]
[}, else, {, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, }, if, (]
[}, else, {, inc, ., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, }, if, (]
[., exp, =, this, ., exp, -, mant, ., length, +, 1, ;, }, if, (, this, ., equals, (]
[-, mant, ., length, +, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[-, mant, ., length, +, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {]
[+, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =]
[+, 1, ;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =]
[;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -]
[;, }, if, (, this, ., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -]
[., equals, (, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }]
[(, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =]
[(, getZero, (, ), ), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =]
[), ), {, inc, ., exp, =, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (]
[=, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (]
[=, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (]
[=, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (]
[=, MIN_EXP, -, mant, ., length, ;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (]
[;, }, result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==]
[result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&]
[result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&]
[result, =, this, ., subtract, (, inc, ), ;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&]
[inc, ), ;, }, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=]
[}, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {]
[}, if, (, result, ., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {]
[., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (]
[., classify, (, ), ==, INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (]
[INFINITE, &&, this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[this, ., classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =]
[classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[classify, (, ), !=, INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[INFINITE, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (]
[), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (]
[dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (]
[,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&]
[,, result, ), ;, }, if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (]
[if, (, result, ., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==]
[., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {]
[., equals, (, getZero, (, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {]
[(, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (]
[(, ), ), &&, this, ., equals, (, getZero, (, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (]
[., equals, (, getZero, (, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;]
[(, getZero, (, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =]
[(, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[(, ), ), ==, false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (]
[false, ), {, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,]
[{, field, ., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,]
[., setIEEEFlagsBits, (, DfpField, ., FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,]
[FLAG_INEXACT, ), ;, result, =, dotrap, (, DfpField, ., FLAG_INEXACT, ,, NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, return]
[NEXT_AFTER_TRAP, ,, x, ,, result, ), ;, }, return, result, ;, }, public, double, toDouble, (, ), {, if, (]
[}, return, result, ;, }, public, double, toDouble, (, ), {, if, (, isInfinite, (, ), ), {, if, (]
[result, ;, }, public, double, toDouble, (, ), {, if, (, isInfinite, (, ), ), {, if, (, lessThan, (]
[), {, if, (, isInfinite, (, ), ), {, if, (, lessThan, (, getZero, (, ), ), ), {, return]
[), {, if, (, isInfinite, (, ), ), {, if, (, lessThan, (, getZero, (, ), ), ), {, return]
[{, if, (, lessThan, (, getZero, (, ), ), ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, else, {, return]
[{, if, (, lessThan, (, getZero, (, ), ), ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, else, {, return]
[), ), {, return, Double, ., NEGATIVE_INFINITY, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (]
[NEGATIVE_INFINITY, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, isNaN, (, ), ), {, return]
[NEGATIVE_INFINITY, ;, }, else, {, return, Double, ., POSITIVE_INFINITY, ;, }, }, if, (, isNaN, (, ), ), {, return]
[POSITIVE_INFINITY, ;, }, }, if, (, isNaN, (, ), ), {, return, Double, ., NaN, ;, }, Dfp, y, =]
[(, isNaN, (, ), ), {, return, Double, ., NaN, ;, }, Dfp, y, =, this, ;, boolean, negate, =]
[{, return, Double, ., NaN, ;, }, Dfp, y, =, this, ;, boolean, negate, =, false, ;, int, cmp0, =]
[Double, ., NaN, ;, }, Dfp, y, =, this, ;, boolean, negate, =, false, ;, int, cmp0, =, compare, (]
[NaN, ;, }, Dfp, y, =, this, ;, boolean, negate, =, false, ;, int, cmp0, =, compare, (, this, ,]
[;, boolean, negate, =, false, ;, int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (]
[;, boolean, negate, =, false, ;, int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (]
[negate, =, false, ;, int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (, cmp0, ==]
[int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return]
[int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return]
[int, cmp0, =, compare, (, this, ,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return]
[=, compare, (, this, ,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return, sign, <]
[(, this, ,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return, sign, <, 0, ?]
[this, ,, getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return, sign, <, 0, ?, -]
[getZero, (, ), ), ;, if, (, cmp0, ==, 0, ), {, return, sign, <, 0, ?, -, 0.0, :]
[(, ), ), ;, if, (, cmp0, ==, 0, ), {, return, sign, <, 0, ?, -, 0.0, :, +]
[cmp0, ==, 0, ), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (]
[cmp0, ==, 0, ), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (]
[0, ), {, return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <]
[return, sign, <, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {]
[<, 0, ?, -, 0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =]
[0.0, :, +, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (, ), ;]
[+, 0.0, ;, }, else, if, (, cmp0, <, 0, ), {, y, =, negate, (, ), ;, negate, =]
[(, cmp0, <, 0, ), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =]
[0, ), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int, )]
[), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int, ), (]
[), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int, ), (]
[), {, y, =, negate, (, ), ;, negate, =, true, ;, }, int, exponent, =, (, int, ), (]
[), ;, negate, =, true, ;, }, int, exponent, =, (, int, ), (, y, ., intLog10, (, ), *]
[;, }, int, exponent, =, (, int, ), (, y, ., intLog10, (, ), *, 3.32, ), ;, if, (]
[;, }, int, exponent, =, (, int, ), (, y, ., intLog10, (, ), *, 3.32, ), ;, if, (]
[int, exponent, =, (, int, ), (, y, ., intLog10, (, ), *, 3.32, ), ;, if, (, exponent, <]
[(, int, ), (, y, ., intLog10, (, ), *, 3.32, ), ;, if, (, exponent, <, 0, ), {]
[(, int, ), (, y, ., intLog10, (, ), *, 3.32, ), ;, if, (, exponent, <, 0, ), {]
[(, ), *, 3.32, ), ;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =]
[(, ), *, 3.32, ), ;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =]
[), ;, if, (, exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (]
[exponent, <, 0, ), {, exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,]
[exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (]
[exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (]
[exponent, --, ;, }, Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (]
[Dfp, tempDfp, =, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (, tempDfp, ., lessThan, (]
[DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (, tempDfp, ., lessThan, (, y, ), ||]
[DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ;, while, (, tempDfp, ., lessThan, (, y, ), ||]
[getTwo, (, ), ,, exponent, ), ;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (]
[exponent, ), ;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), ), {]
[;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =]
[;, while, (, tempDfp, ., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =]
[., lessThan, (, y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (]
[y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;]
[y, ), ||, tempDfp, ., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;]
[., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }]
[., equals, (, y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }]
[y, ), ), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;]
[), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =]
[), {, tempDfp, =, tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =]
[tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =, y, ., divide, (]
[tempDfp, ., multiply, (, 2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =, y, ., divide, (]
[2, ), ;, exponent, ++, ;, }, exponent, --, ;, y, =, y, ., divide, (, DfpMath, ., pow, (]
[++, ;, }, exponent, --, ;, y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,]
[y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (]
[y, =, y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (]
[y, ., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent, >]
[., divide, (, DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent, >, -]
[DfpMath, ., pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent, >, -, 1023, ), {]
[pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent, >, -, 1023, ), {, y, =]
[pow, (, getTwo, (, ), ,, exponent, ), ), ;, if, (, exponent, >, -, 1023, ), {, y, =]
[), ,, exponent, ), ), ;, if, (, exponent, >, -, 1023, ), {, y, =, y, ., subtract, (]
[exponent, >, -, 1023, ), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (]
[exponent, >, -, 1023, ), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (]
[-, 1023, ), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <]
[1023, ), {, y, =, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <, -]
[=, y, ., subtract, (, getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074, ), {, return]
[getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074, ), {, return, 0, ;, }, if, (]
[getOne, (, ), ), ;, }, if, (, exponent, <, -, 1074, ), {, return, 0, ;, }, if, (]
[), ), ;, }, if, (, exponent, <, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >]
[if, (, exponent, <, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return]
[if, (, exponent, <, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return]
[exponent, <, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?]
[exponent, <, -, 1074, ), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?]
[), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :]
[), {, return, 0, ;, }, if, (, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :]
[}, if, (, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }]
[(, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =]
[(, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =]
[(, exponent, >, 1023, ), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =]
[), {, return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (]
[return, negate, ?, Double, ., NEGATIVE_INFINITY, :, Double, ., POSITIVE_INFINITY, ;, }, y, =, y, ., multiply, (, newInstance, (]
[}, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;, String, str, =]
[}, y, =, y, ., multiply, (, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;, String, str, =]
[(, newInstance, (, 4503599627370496l, ), ), ., rint, (, ), ;, String, str, =, y, ., toString, (, ), ;]
[(, 4503599627370496l, ), ), ., rint, (, ), ;, String, str, =, y, ., toString, (, ), ;, str, =]
[(, 4503599627370496l, ), ), ., rint, (, ), ;, String, str, =, y, ., toString, (, ), ;, str, =]
[., rint, (, ), ;, String, str, =, y, ., toString, (, ), ;, str, =, str, ., substring, (]
[(, ), ;, String, str, =, y, ., toString, (, ), ;, str, =, str, ., substring, (, 0, ,]
[(, ), ;, String, str, =, y, ., toString, (, ), ;, str, =, str, ., substring, (, 0, ,]
[(, ), ;, String, str, =, y, ., toString, (, ), ;, str, =, str, ., substring, (, 0, ,]
[y, ., toString, (, ), ;, str, =, str, ., substring, (, 0, ,, str, ., length, (, ), -]
[str, =, str, ., substring, (, 0, ,, str, ., length, (, ), -, 1, ), ;, long, mantissa, =]
[str, =, str, ., substring, (, 0, ,, str, ., length, (, ), -, 1, ), ;, long, mantissa, =]
[substring, (, 0, ,, str, ., length, (, ), -, 1, ), ;, long, mantissa, =, Long, ., parseLong, (]
[., length, (, ), -, 1, ), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (]
[., length, (, ), -, 1, ), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (]
[(, ), -, 1, ), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==]
[1, ), ;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {]
[;, long, mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =]
[mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;]
[mantissa, =, Long, ., parseLong, (, str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;]
[str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (]
[str, ), ;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (]
[;, if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=]
[if, (, mantissa, ==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=, -]
[==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {]
[==, 4503599627370496L, ), {, mantissa, =, 0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {]
[0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (]
[0, ;, exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (]
[exponent, ++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <]
[++, ;, }, if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <, -]
[if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {]
[if, (, exponent, <=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {]
[<=, -, 1023, ), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;]
[1023, ), {, exponent, --, ;, }, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=]
[}, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =]
[}, while, (, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =]
[(, exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |]
[exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (]
[exponent, <, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (]
[<, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (]
[<, -, 1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (]
[1023, ), {, exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +]
[exponent, ++, ;, mantissa, >>>=, 1, ;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L, ), <<]
[;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L, ), <<, 52, ), ;, double, x, =]
[;, }, long, bits, =, mantissa, |, (, (, exponent, +, 1023L, ), <<, 52, ), ;, double, x, =]
[=, mantissa, |, (, (, exponent, +, 1023L, ), <<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (]
[exponent, +, 1023L, ), <<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (]
[), <<, 52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {]
[52, ), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =]
[), ;, double, x, =, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =, -]
[=, Double, ., longBitsToDouble, (, bits, ), ;, if, (, negate, ), {, x, =, -, x, ;, }, return]
[x, ;, }, return, x, ;, }, public, double, [, ], toSplitDouble, (, ), {, double, split, [, ], =]
[return, x, ;, }, public, double, [, ], toSplitDouble, (, ), {, double, split, [, ], =, new, double, []
[[, ], toSplitDouble, (, ), {, double, split, [, ], =, new, double, [, 2, ], ;, long, mask, =]
[toSplitDouble, (, ), {, double, split, [, ], =, new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;]
[toSplitDouble, (, ), {, double, split, [, ], =, new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;]
[), {, double, split, [, ], =, new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;, split, []
[split, [, ], =, new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =]
[split, [, ], =, new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =]
[new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =, Double, ., longBitsToDouble, (]
[new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =, Double, ., longBitsToDouble, (]
[new, double, [, 2, ], ;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =, Double, ., longBitsToDouble, (]
[], ;, long, mask, =, 0xffffffffc0000000L, ;, split, [, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (]
[0xffffffffc0000000L, ;, split, [, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &]
[[, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;]
[[, 0, ], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;]
[], =, Double, ., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, []
[., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =]
[., longBitsToDouble, (, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =]
[(, Double, ., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =, subtract, (]
[., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =, subtract, (, newInstance, (]
[., doubleToLongBits, (, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =, subtract, (, newInstance, (]
[(, toDouble, (, ), ), &, mask, ), ;, split, [, 1, ], =, subtract, (, newInstance, (, split, []
[[, 1, ], =, subtract, (, newInstance, (, split, [, 0, ], ), ), ., toDouble, (, ), ;, return]
[0, ], ), ), ., toDouble, (, ), ;, return, split, ;, }, public, double, getReal, (, ), {, return]
[getReal, (, ), {, return, toDouble, (, ), ;, }, public, Dfp, add, (, final, double, a, ), {, return]
[), {, return, toDouble, (, ), ;, }, public, Dfp, add, (, final, double, a, ), {, return, add, (]
[return, toDouble, (, ), ;, }, public, Dfp, add, (, final, double, a, ), {, return, add, (, newInstance, (]
[return, add, (, newInstance, (, a, ), ), ;, }, public, Dfp, subtract, (, final, double, a, ), {, return]
[(, newInstance, (, a, ), ), ;, }, public, Dfp, subtract, (, final, double, a, ), {, return, subtract, (]
[(, a, ), ), ;, }, public, Dfp, subtract, (, final, double, a, ), {, return, subtract, (, newInstance, (]
[return, subtract, (, newInstance, (, a, ), ), ;, }, public, Dfp, multiply, (, final, double, a, ), {, return]
[(, newInstance, (, a, ), ), ;, }, public, Dfp, multiply, (, final, double, a, ), {, return, multiply, (]
[(, a, ), ), ;, }, public, Dfp, multiply, (, final, double, a, ), {, return, multiply, (, newInstance, (]
[return, multiply, (, newInstance, (, a, ), ), ;, }, public, Dfp, divide, (, final, double, a, ), {, return]
[(, newInstance, (, a, ), ), ;, }, public, Dfp, divide, (, final, double, a, ), {, return, divide, (]
[(, a, ), ), ;, }, public, Dfp, divide, (, final, double, a, ), {, return, divide, (, newInstance, (]
[return, divide, (, newInstance, (, a, ), ), ;, }, public, Dfp, remainder, (, final, double, a, ), {, return]
[(, newInstance, (, a, ), ), ;, }, public, Dfp, remainder, (, final, double, a, ), {, return, remainder, (]
[(, a, ), ), ;, }, public, Dfp, remainder, (, final, double, a, ), {, return, remainder, (, newInstance, (]
[a, ), {, return, remainder, (, newInstance, (, a, ), ), ;, }, public, long, round, (, ), {, return]
[a, ), {, return, remainder, (, newInstance, (, a, ), ), ;, }, public, long, round, (, ), {, return]
[remainder, (, newInstance, (, a, ), ), ;, }, public, long, round, (, ), {, return, FastMath, ., round, (]
[{, return, FastMath, ., round, (, toDouble, (, ), ), ;, }, public, Dfp, signum, (, ), {, if, (]
[{, return, FastMath, ., round, (, toDouble, (, ), ), ;, }, public, Dfp, signum, (, ), {, if, (]
[round, (, toDouble, (, ), ), ;, }, public, Dfp, signum, (, ), {, if, (, isNaN, (, ), ||]
[;, }, public, Dfp, signum, (, ), {, if, (, isNaN, (, ), ||, isZero, (, ), ), {, return]
[), {, if, (, isNaN, (, ), ||, isZero, (, ), ), {, return, this, ;, }, else, {, return]
[if, (, isNaN, (, ), ||, isZero, (, ), ), {, return, this, ;, }, else, {, return, newInstance, (]
[if, (, isNaN, (, ), ||, isZero, (, ), ), {, return, this, ;, }, else, {, return, newInstance, (]
[if, (, isNaN, (, ), ||, isZero, (, ), ), {, return, this, ;, }, else, {, return, newInstance, (]
[isNaN, (, ), ||, isZero, (, ), ), {, return, this, ;, }, else, {, return, newInstance, (, sign, >]
[), ||, isZero, (, ), ), {, return, this, ;, }, else, {, return, newInstance, (, sign, >, 0, ?]
[||, isZero, (, ), ), {, return, this, ;, }, else, {, return, newInstance, (, sign, >, 0, ?, +]
[(, ), ), {, return, this, ;, }, else, {, return, newInstance, (, sign, >, 0, ?, +, 1, :]
[), ), {, return, this, ;, }, else, {, return, newInstance, (, sign, >, 0, ?, +, 1, :, -]
[+, 1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (]
[+, 1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (]
[1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (]
[1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (]
[1, :, -, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (]
[-, 1, ), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=]
[), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&]
[), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&]
[), ;, }, }, public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&]
[public, Dfp, copySign, (, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&, s, ., sign, >=]
[(, final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||]
[final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (]
[final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (]
[final, Dfp, s, ), {, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (]
[s, ), {, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (, sign, <]
[{, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&]
[{, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&]
[{, if, (, (, sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&]
[sign, >=, 0, &&, s, ., sign, >=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <]
[., sign, >=, 0, ), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return]
[), ||, (, sign, <, 0, &&, s, ., sign, <, 0, ), ), {, return, this, ;, }, return]
[;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s, ), {, long, sb, =]
[;, }, return, negate, (, ), ;, }, public, Dfp, copySign, (, final, double, s, ), {, long, sb, =]
[(, ), ;, }, public, Dfp, copySign, (, final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (]
[Dfp, copySign, (, final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (]
[Dfp, copySign, (, final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (]
[copySign, (, final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (, (]
[copySign, (, final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (, (]
[copySign, (, final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (, (]
[final, double, s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=]
[s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&]
[s, ), {, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&]
[{, long, sb, =, Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=]
[=, Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||]
[Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (]
[Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (]
[Double, ., doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (]
[doubleToLongBits, (, s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign, <]
[s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&]
[s, ), ;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&]
[;, if, (, (, sign, >=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb, <]
[>=, 0, &&, sb, >=, 0, ), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return]
[>=, 0, ), ||, (, sign, <, 0, &&, sb, <, 0, ), ), {, return, this, ;, }, return]
[return, this, ;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n, ), {, return]
[;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n, ), {, return, multiply, (]
[;, }, return, negate, (, ), ;, }, public, Dfp, scalb, (, final, int, n, ), {, return, multiply, (]
[(, ), ;, }, public, Dfp, scalb, (, final, int, n, ), {, return, multiply, (, DfpMath, ., pow, (]
[public, Dfp, scalb, (, final, int, n, ), {, return, multiply, (, DfpMath, ., pow, (, getTwo, (, ), ,]
[(, getTwo, (, ), ,, n, ), ), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return]
[(, getTwo, (, ), ,, n, ), ), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return]
[(, getTwo, (, ), ,, n, ), ), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return]
[(, ), ,, n, ), ), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (]
[), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (, this, ), ., add, (]
[), ;, }, public, Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (, this, ), ., add, (]
[Dfp, hypot, (, final, Dfp, y, ), {, return, multiply, (, this, ), ., add, (, y, ., multiply, (]
[y, ., multiply, (, y, ), ), ., sqrt, (, ), ;, }, public, Dfp, cbrt, (, ), {, return]
[multiply, (, y, ), ), ., sqrt, (, ), ;, }, public, Dfp, cbrt, (, ), {, return, rootN, (]
[(, ), {, return, rootN, (, 3, ), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return]
[(, ), {, return, rootN, (, 3, ), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return]
[), {, return, rootN, (, 3, ), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return, (]
[), {, return, rootN, (, 3, ), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return, (]
[return, rootN, (, 3, ), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return, (, sign, >=]
[3, ), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return, (, sign, >=, 0, ), ?]
[3, ), ;, }, public, Dfp, rootN, (, final, int, n, ), {, return, (, sign, >=, 0, ), ?]
[public, Dfp, rootN, (, final, int, n, ), {, return, (, sign, >=, 0, ), ?, DfpMath, ., pow, (]
[rootN, (, final, int, n, ), {, return, (, sign, >=, 0, ), ?, DfpMath, ., pow, (, this, ,]
[rootN, (, final, int, n, ), {, return, (, sign, >=, 0, ), ?, DfpMath, ., pow, (, this, ,]
[{, return, (, sign, >=, 0, ), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (]
[>=, 0, ), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :]
[>=, 0, ), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :]
[>=, 0, ), ?, DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :]
[DfpMath, ., pow, (, this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, ., pow, (]
[this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, ., pow, (, negate, (, ), ,]
[this, ,, getOne, (, ), ., divide, (, n, ), ), :, DfpMath, ., pow, (, negate, (, ), ,]
[divide, (, n, ), ), :, DfpMath, ., pow, (, negate, (, ), ,, getOne, (, ), ., divide, (]
[(, n, ), ), ., negate, (, ), ;, }, public, Dfp, pow, (, final, double, p, ), {, return]
[(, n, ), ), ., negate, (, ), ;, }, public, Dfp, pow, (, final, double, p, ), {, return]
[., negate, (, ), ;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, ., pow, (]
[(, ), ;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, ., pow, (, this, ,]
[;, }, public, Dfp, pow, (, final, double, p, ), {, return, DfpMath, ., pow, (, this, ,, newInstance, (]
[(, this, ,, newInstance, (, p, ), ), ;, }, public, Dfp, pow, (, final, int, n, ), {, return]
[(, this, ,, newInstance, (, p, ), ), ;, }, public, Dfp, pow, (, final, int, n, ), {, return]
[(, p, ), ), ;, }, public, Dfp, pow, (, final, int, n, ), {, return, DfpMath, ., pow, (]
[), ), ;, }, public, Dfp, pow, (, final, int, n, ), {, return, DfpMath, ., pow, (, this, ,]
[DfpMath, ., pow, (, this, ,, n, ), ;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return]
[DfpMath, ., pow, (, this, ,, n, ), ;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return]
[this, ,, n, ), ;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return, DfpMath, ., pow, (]
[n, ), ;, }, public, Dfp, pow, (, final, Dfp, e, ), {, return, DfpMath, ., pow, (, this, ,]
[), {, return, DfpMath, ., pow, (, this, ,, e, ), ;, }, public, Dfp, exp, (, ), {, return]
[), {, return, DfpMath, ., pow, (, this, ,, e, ), ;, }, public, Dfp, exp, (, ), {, return]
[., pow, (, this, ,, e, ), ;, }, public, Dfp, exp, (, ), {, return, DfpMath, ., exp, (]
[exp, (, ), {, return, DfpMath, ., exp, (, this, ), ;, }, public, Dfp, expm1, (, ), {, return]
[exp, (, ), {, return, DfpMath, ., exp, (, this, ), ;, }, public, Dfp, expm1, (, ), {, return]
[exp, (, ), {, return, DfpMath, ., exp, (, this, ), ;, }, public, Dfp, expm1, (, ), {, return]
[return, DfpMath, ., exp, (, this, ), ;, }, public, Dfp, expm1, (, ), {, return, DfpMath, ., exp, (]
[this, ), ;, }, public, Dfp, expm1, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (]
[exp, (, this, ), ., subtract, (, getOne, (, ), ), ;, }, public, Dfp, log, (, ), {, return]
[exp, (, this, ), ., subtract, (, getOne, (, ), ), ;, }, public, Dfp, log, (, ), {, return]
[., subtract, (, getOne, (, ), ), ;, }, public, Dfp, log, (, ), {, return, DfpMath, ., log, (]
[log, (, ), {, return, DfpMath, ., log, (, this, ), ;, }, public, Dfp, log1p, (, ), {, return]
[log, (, ), {, return, DfpMath, ., log, (, this, ), ;, }, public, Dfp, log1p, (, ), {, return]
[return, DfpMath, ., log, (, this, ), ;, }, public, Dfp, log1p, (, ), {, return, DfpMath, ., log, (]
[return, DfpMath, ., log, (, this, ), ;, }, public, Dfp, log1p, (, ), {, return, DfpMath, ., log, (]
[(, this, ), ;, }, public, Dfp, log1p, (, ), {, return, DfpMath, ., log, (, this, ., add, (]
[this, ., add, (, getOne, (, ), ), ), ;, }, @, Deprecated, public, int, log10, (, ), {, return]
[Deprecated, public, int, log10, (, ), {, return, intLog10, (, ), ;, }, public, Dfp, cos, (, ), {, return]
[Deprecated, public, int, log10, (, ), {, return, intLog10, (, ), ;, }, public, Dfp, cos, (, ), {, return]
[(, ), {, return, intLog10, (, ), ;, }, public, Dfp, cos, (, ), {, return, DfpMath, ., cos, (]
[cos, (, ), {, return, DfpMath, ., cos, (, this, ), ;, }, public, Dfp, sin, (, ), {, return]
[cos, (, ), {, return, DfpMath, ., cos, (, this, ), ;, }, public, Dfp, sin, (, ), {, return]
[return, DfpMath, ., cos, (, this, ), ;, }, public, Dfp, sin, (, ), {, return, DfpMath, ., sin, (]
[sin, (, ), {, return, DfpMath, ., sin, (, this, ), ;, }, public, Dfp, tan, (, ), {, return]
[sin, (, ), {, return, DfpMath, ., sin, (, this, ), ;, }, public, Dfp, tan, (, ), {, return]
[return, DfpMath, ., sin, (, this, ), ;, }, public, Dfp, tan, (, ), {, return, DfpMath, ., tan, (]
[tan, (, ), {, return, DfpMath, ., tan, (, this, ), ;, }, public, Dfp, acos, (, ), {, return]
[tan, (, ), {, return, DfpMath, ., tan, (, this, ), ;, }, public, Dfp, acos, (, ), {, return]
[return, DfpMath, ., tan, (, this, ), ;, }, public, Dfp, acos, (, ), {, return, DfpMath, ., acos, (]
[acos, (, ), {, return, DfpMath, ., acos, (, this, ), ;, }, public, Dfp, asin, (, ), {, return]
[acos, (, ), {, return, DfpMath, ., acos, (, this, ), ;, }, public, Dfp, asin, (, ), {, return]
[return, DfpMath, ., acos, (, this, ), ;, }, public, Dfp, asin, (, ), {, return, DfpMath, ., asin, (]
[asin, (, ), {, return, DfpMath, ., asin, (, this, ), ;, }, public, Dfp, atan, (, ), {, return]
[asin, (, ), {, return, DfpMath, ., asin, (, this, ), ;, }, public, Dfp, atan, (, ), {, return]
[return, DfpMath, ., asin, (, this, ), ;, }, public, Dfp, atan, (, ), {, return, DfpMath, ., atan, (]
[(, this, ), ;, }, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =]
[(, this, ), ;, }, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =]
[(, this, ), ;, }, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =]
[(, this, ), ;, }, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =]
[}, public, Dfp, atan2, (, final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =, x, ., multiply, (]
[final, Dfp, x, ), throws, DimensionMismatchException, {, final, Dfp, r, =, x, ., multiply, (, x, ), ., add, (]
[x, ), throws, DimensionMismatchException, {, final, Dfp, r, =, x, ., multiply, (, x, ), ., add, (, multiply, (]
[., multiply, (, x, ), ., add, (, multiply, (, this, ), ), ., sqrt, (, ), ;, if, (]
[., multiply, (, x, ), ., add, (, multiply, (, this, ), ), ., sqrt, (, ), ;, if, (]
[., multiply, (, x, ), ., add, (, multiply, (, this, ), ), ., sqrt, (, ), ;, if, (]
[), ., add, (, multiply, (, this, ), ), ., sqrt, (, ), ;, if, (, x, ., sign, >=]
[multiply, (, this, ), ), ., sqrt, (, ), ;, if, (, x, ., sign, >=, 0, ), {, return]
[multiply, (, this, ), ), ., sqrt, (, ), ;, if, (, x, ., sign, >=, 0, ), {, return]
[sqrt, (, ), ;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply, (]
[sqrt, (, ), ;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply, (]
[), ;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply, (, divide, (]
[), ;, if, (, x, ., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply, (, divide, (]
[x, ., sign, >=, 0, ), {, return, getTwo, (, ), ., multiply, (, divide, (, r, ., add, (]
[r, ., add, (, x, ), ), ., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =]
[r, ., add, (, x, ), ), ., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =]
[), ., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (]
[), ., atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (]
[atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (, divide, (]
[atan, (, ), ), ;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (, divide, (]
[;, }, else, {, final, Dfp, tmp, =, getTwo, (, ), ., multiply, (, divide, (, r, ., subtract, (]
[(, divide, (, r, ., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =]
[(, r, ., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (]
[(, r, ., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (]
[r, ., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (]
[r, ., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (]
[r, ., subtract, (, x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (]
[x, ), ), ., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=]
[., atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?]
[atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?, -]
[atan, (, ), ), ;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?, -]
[;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI, :]
[;, final, Dfp, pmPi, =, newInstance, (, (, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI, :]
[(, (, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return]
[(, (, tmp, ., sign, <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return]
[sign, <=, 0, ), ?, -, FastMath, ., PI, :, FastMath, ., PI, ), ;, return, pmPi, ., subtract, (]
[PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return]
[PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return]
[PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return]
[PI, ), ;, return, pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return]
[pmPi, ., subtract, (, tmp, ), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath, ., exp, (]
[), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath, ., exp, (, this, ), ., add, (]
[), ;, }, }, public, Dfp, cosh, (, ), {, return, DfpMath, ., exp, (, this, ), ., add, (]
[public, Dfp, cosh, (, ), {, return, DfpMath, ., exp, (, this, ), ., add, (, DfpMath, ., exp, (]
[., exp, (, this, ), ., add, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (]
[(, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return]
[(, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return]
[(, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return]
[(, negate, (, ), ), ), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return]
[), ), ., divide, (, 2, ), ;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (]
[2, ), ;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (]
[2, ), ;, }, public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (]
[public, Dfp, sinh, (, ), {, return, DfpMath, ., exp, (, this, ), ., subtract, (, DfpMath, ., exp, (]
[., exp, (, this, ), ., subtract, (, DfpMath, ., exp, (, negate, (, ), ), ), ., divide, (]
[), ), ), ., divide, (, 2, ), ;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =]
[), ), ), ., divide, (, 2, ), ;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =]
[divide, (, 2, ), ;, }, public, Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath, ., exp, (]
[Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath, ., exp, (, this, ), ;, final, Dfp, eMinus, =]
[Dfp, tanh, (, ), {, final, Dfp, ePlus, =, DfpMath, ., exp, (, this, ), ;, final, Dfp, eMinus, =]
[{, final, Dfp, ePlus, =, DfpMath, ., exp, (, this, ), ;, final, Dfp, eMinus, =, DfpMath, ., exp, (]
[., exp, (, this, ), ;, final, Dfp, eMinus, =, DfpMath, ., exp, (, negate, (, ), ), ;, return]
[., exp, (, this, ), ;, final, Dfp, eMinus, =, DfpMath, ., exp, (, negate, (, ), ), ;, return]
[., exp, (, this, ), ;, final, Dfp, eMinus, =, DfpMath, ., exp, (, negate, (, ), ), ;, return]
[), ;, final, Dfp, eMinus, =, DfpMath, ., exp, (, negate, (, ), ), ;, return, ePlus, ., subtract, (]
[=, DfpMath, ., exp, (, negate, (, ), ), ;, return, ePlus, ., subtract, (, eMinus, ), ., divide, (]
[=, DfpMath, ., exp, (, negate, (, ), ), ;, return, ePlus, ., subtract, (, eMinus, ), ., divide, (]
[(, negate, (, ), ), ;, return, ePlus, ., subtract, (, eMinus, ), ., divide, (, ePlus, ., add, (]
[), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return]
[), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return]
[), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return]
[), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return]
[), ., divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return]
[divide, (, ePlus, ., add, (, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return, multiply, (]
[(, eMinus, ), ), ;, }, public, Dfp, acosh, (, ), {, return, multiply, (, this, ), ., subtract, (]
[{, return, multiply, (, this, ), ., subtract, (, getOne, (, ), ), ., sqrt, (, ), ., add, (]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return]
[., add, (, this, ), ., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return, multiply, (]
[., log, (, ), ;, }, public, Dfp, asinh, (, ), {, return, multiply, (, this, ), ., add, (]
[{, return, multiply, (, this, ), ., add, (, getOne, (, ), ), ., sqrt, (, ), ., add, (]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return]
[(, ), ., add, (, this, ), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return]
[), ., log, (, ), ;, }, public, Dfp, atanh, (, ), {, return, getOne, (, ), ., add, (]
[;, }, public, Dfp, atanh, (, ), {, return, getOne, (, ), ., add, (, this, ), ., divide, (]
[;, }, public, Dfp, atanh, (, ), {, return, getOne, (, ), ., add, (, this, ), ., divide, (]
[), {, return, getOne, (, ), ., add, (, this, ), ., divide, (, getOne, (, ), ., subtract, (]
[), ., divide, (, getOne, (, ), ., subtract, (, this, ), ), ., log, (, ), ., divide, (]
[Dfp, linearCombination, (, final, Dfp, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[Dfp, linearCombination, (, final, Dfp, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[Dfp, linearCombination, (, final, Dfp, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[Dfp, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[Dfp, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r, =]
[length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =]
[b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;]
[b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;]
[length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =]
[i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (]
[i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (]
[i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (]
[0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (, a, []
[., length, ;, ++, i, ), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (]
[., length, ;, ++, i, ), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (]
[;, ++, i, ), {, r, =, r, ., add, (, a, [, i, ], ., multiply, (, b, []
[r, ., add, (, a, [, i, ], ., multiply, (, b, [, i, ], ), ), ;, }, return]
[Dfp, linearCombination, (, final, double, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[Dfp, linearCombination, (, final, double, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[Dfp, linearCombination, (, final, double, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (]
[double, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[double, [, ], a, ,, final, Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=]
[Dfp, [, ], b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[b, ), throws, DimensionMismatchException, {, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[{, if, (, a, ., length, !=, b, ., length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,]
[length, ), {, throw, new, DimensionMismatchException, (, a, ., length, ,, b, ., length, ), ;, }, Dfp, r, =]
[length, ,, b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =]
[b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;]
[b, ., length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;]
[length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[length, ), ;, }, Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <]
[Dfp, r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;]
[r, =, getZero, (, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++]
[(, ), ;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =]
[;, for, (, int, i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =]
[i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (]
[i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (]
[i, =, 0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (]
[0, ;, i, <, a, ., length, ;, ++, i, ), {, r, =, r, ., add, (, b, []
[., length, ;, ++, i, ), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (]
[., length, ;, ++, i, ), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (]
[;, ++, i, ), {, r, =, r, ., add, (, b, [, i, ], ., multiply, (, a, []
[r, ., add, (, b, [, i, ], ., multiply, (, a, [, i, ], ), ), ;, }, return]
[linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ), {, return]
[linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ), {, return]
[linearCombination, (, final, Dfp, a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ), {, return]
[a1, ,, final, Dfp, b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ), {, return, a1, ., multiply, (]
[,, final, Dfp, a2, ,, final, Dfp, b2, ), {, return, a1, ., multiply, (, b1, ), ., add, (]
[,, final, Dfp, a2, ,, final, Dfp, b2, ), {, return, a1, ., multiply, (, b1, ), ., add, (]
[,, final, Dfp, b2, ), {, return, a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (]
[linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final, Dfp, b2, ), {, return]
[linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final, Dfp, b2, ), {, return]
[linearCombination, (, final, double, a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final, Dfp, b2, ), {, return]
[a1, ,, final, Dfp, b1, ,, final, double, a2, ,, final, Dfp, b2, ), {, return, b1, ., multiply, (]
[,, final, double, a2, ,, final, Dfp, b2, ), {, return, b1, ., multiply, (, a1, ), ., add, (]
[,, final, double, a2, ,, final, Dfp, b2, ), {, return, b1, ., multiply, (, a1, ), ., add, (]
[,, final, Dfp, b2, ), {, return, b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (]
[b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ), {, return]
[b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ), {, return]
[b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ), {, return]
[b1, ,, final, Dfp, a2, ,, final, Dfp, b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ), {, return]
[a2, ,, final, Dfp, b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ), {, return, a1, ., multiply, (]
[,, final, Dfp, a3, ,, final, Dfp, b3, ), {, return, a1, ., multiply, (, b1, ), ., add, (]
[,, final, Dfp, a3, ,, final, Dfp, b3, ), {, return, a1, ., multiply, (, b1, ), ., add, (]
[,, final, Dfp, b3, ), {, return, a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (]
[return, a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (]
[return, a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (]
[(, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (]
[b1, ,, final, double, a2, ,, final, Dfp, b2, ,, final, double, a3, ,, final, Dfp, b3, ), {, return]
[b1, ,, final, double, a2, ,, final, Dfp, b2, ,, final, double, a3, ,, final, Dfp, b3, ), {, return]
[b1, ,, final, double, a2, ,, final, Dfp, b2, ,, final, double, a3, ,, final, Dfp, b3, ), {, return]
[b1, ,, final, double, a2, ,, final, Dfp, b2, ,, final, double, a3, ,, final, Dfp, b3, ), {, return]
[a2, ,, final, Dfp, b2, ,, final, double, a3, ,, final, Dfp, b3, ), {, return, b1, ., multiply, (]
[,, final, double, a3, ,, final, Dfp, b3, ), {, return, b1, ., multiply, (, a1, ), ., add, (]
[,, final, double, a3, ,, final, Dfp, b3, ), {, return, b1, ., multiply, (, a1, ), ., add, (]
[,, final, Dfp, b3, ), {, return, b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (]
[return, b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (]
[return, b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (]
[(, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (]
[b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, Dfp, a3, ,, final, Dfp, b3, ,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return]
[a3, ,, final, Dfp, b3, ,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return, a1, ., multiply, (]
[,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return, a1, ., multiply, (, b1, ), ., add, (]
[,, final, Dfp, a4, ,, final, Dfp, b4, ), {, return, a1, ., multiply, (, b1, ), ., add, (]
[,, final, Dfp, b4, ), {, return, a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (]
[return, a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (]
[return, a1, ., multiply, (, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (]
[(, b1, ), ., add, (, a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (]
[a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), ), ., add, (]
[a2, ., multiply, (, b2, ), ), ., add, (, a3, ., multiply, (, b3, ), ), ., add, (]
[b2, ), ), ., add, (, a3, ., multiply, (, b3, ), ), ., add, (, a4, ., multiply, (]
[b2, ,, final, double, a3, ,, final, Dfp, b3, ,, final, double, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, double, a3, ,, final, Dfp, b3, ,, final, double, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, double, a3, ,, final, Dfp, b3, ,, final, double, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, double, a3, ,, final, Dfp, b3, ,, final, double, a4, ,, final, Dfp, b4, ), {, return]
[b2, ,, final, double, a3, ,, final, Dfp, b3, ,, final, double, a4, ,, final, Dfp, b4, ), {, return]
[a3, ,, final, Dfp, b3, ,, final, double, a4, ,, final, Dfp, b4, ), {, return, b1, ., multiply, (]
[,, final, double, a4, ,, final, Dfp, b4, ), {, return, b1, ., multiply, (, a1, ), ., add, (]
[,, final, double, a4, ,, final, Dfp, b4, ), {, return, b1, ., multiply, (, a1, ), ., add, (]
[,, final, Dfp, b4, ), {, return, b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (]
[return, b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (]
[return, b1, ., multiply, (, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (]
[(, a1, ), ., add, (, b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (]
[b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), ), ., add, (]
[b2, ., multiply, (, a2, ), ), ., add, (, b3, ., multiply, (, a3, ), ), ., add, (]
[a2, ), ), ., add, (, b3, ., multiply, (, a3, ), ), ., add, (, b4, ., multiply, (]
