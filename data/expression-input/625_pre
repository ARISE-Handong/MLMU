[., time, ., DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, PreciseDateTimeField, extends, PreciseDurationDateTimeField, {]
[DateTimeFieldType, ;, import, org, ., joda, ., time, ., DurationField, ;, public, class, PreciseDateTimeField, extends, PreciseDurationDateTimeField, {, @, SuppressWarnings, (]
[., DurationField, ;, public, class, PreciseDateTimeField, extends, PreciseDurationDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[DurationField, ;, public, class, PreciseDateTimeField, extends, PreciseDurationDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =, -]
[private, final, DurationField, iRangeField, ;, public, PreciseDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ,, DurationField, range, ), {, super, (]
[DurationField, iRangeField, ;, public, PreciseDateTimeField, (, DateTimeFieldType, type, ,, DurationField, unit, ,, DurationField, range, ), {, super, (, type, ,]
[(, DateTimeFieldType, type, ,, DurationField, unit, ,, DurationField, range, ), {, super, (, type, ,, unit, ), ;, if, (]
[DateTimeFieldType, type, ,, DurationField, unit, ,, DurationField, range, ), {, super, (, type, ,, unit, ), ;, if, (, !]
[DateTimeFieldType, type, ,, DurationField, unit, ,, DurationField, range, ), {, super, (, type, ,, unit, ), ;, if, (, !]
[), {, super, (, type, ,, unit, ), ;, if, (, !, range, ., isPrecise, (, ), ), {, throw]
[(, type, ,, unit, ), ;, if, (, !, range, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (]
[(, !, range, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =]
[(, !, range, ., isPrecise, (, ), ), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =]
[), ), {, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;]
[{, throw, new, IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange, =]
[IllegalArgumentException, (, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange, =, (, int, )]
[(, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange, =, (, int, ), (]
[(, "Range duration field must be precise", ), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange, =, (, int, ), (]
[), ;, }, long, rangeMillis, =, range, ., getUnitMillis, (, ), ;, iRange, =, (, int, ), (, rangeMillis, /]
[., getUnitMillis, (, ), ;, iRange, =, (, int, ), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (]
[., getUnitMillis, (, ), ;, iRange, =, (, int, ), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (]
[(, ), ;, iRange, =, (, int, ), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (, iRange, <]
[=, (, int, ), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (, iRange, <, 2, ), {, throw]
[), (, rangeMillis, /, getUnitMillis, (, ), ), ;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (]
[getUnitMillis, (, ), ), ;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }]
[), ), ;, if, (, iRange, <, 2, ), {, throw, new, IllegalArgumentException, (, "The effective range must be at least 2", ), ;, }, iRangeField, =]
[(, "The effective range must be at least 2", ), ;, }, iRangeField, =, range, ;, }, public, int, get, (, long, instant, ), {, if, (]
[(, "The effective range must be at least 2", ), ;, }, iRangeField, =, range, ;, }, public, int, get, (, long, instant, ), {, if, (]
[), ;, }, iRangeField, =, range, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=]
[=, range, ;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return]
[}, public, int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, (, int, )]
[public, int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, (, int, ), (]
[public, int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, (, int, ), (]
[int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, (, int, ), (, (]
[int, get, (, long, instant, ), {, if, (, instant, >=, 0, ), {, return, (, int, ), (, (]
[(, long, instant, ), {, if, (, instant, >=, 0, ), {, return, (, int, ), (, (, instant, /]
[if, (, instant, >=, 0, ), {, return, (, int, ), (, (, instant, /, getUnitMillis, (, ), ), %]
[return, (, int, ), (, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return]
[return, (, int, ), (, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return]
[return, (, int, ), (, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return]
[int, ), (, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return, iRange, -]
[(, (, instant, /, getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +]
[/, getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, )]
[getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (]
[getUnitMillis, (, ), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (]
[(, ), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (]
[(, ), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (]
[), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (]
[), ), %, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (]
[%, iRange, ), ;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant, +]
[;, }, else, {, return, iRange, -, 1, +, (, int, ), (, (, (, instant, +, 1, ), /]
[iRange, -, 1, +, (, int, ), (, (, (, instant, +, 1, ), /, getUnitMillis, (, ), ), %]
[%, iRange, ), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =]
[), ;, }, }, public, long, addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (]
[addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (, instant, ), ;, int, wrappedValue, =]
[addWrapField, (, long, instant, ,, int, amount, ), {, int, thisValue, =, get, (, instant, ), ;, int, wrappedValue, =]
[,, int, amount, ), {, int, thisValue, =, get, (, instant, ), ;, int, wrappedValue, =, FieldUtils, ., getWrappedValue, (]
[amount, ), {, int, thisValue, =, get, (, instant, ), ;, int, wrappedValue, =, FieldUtils, ., getWrappedValue, (, thisValue, ,]
[{, int, thisValue, =, get, (, instant, ), ;, int, wrappedValue, =, FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,]
[get, (, instant, ), ;, int, wrappedValue, =, FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,]
[wrappedValue, =, FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return]
[wrappedValue, =, FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return]
[FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +]
[FieldUtils, ., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +]
[., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (]
[., getWrappedValue, (, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (]
[(, thisValue, ,, amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, wrappedValue, -]
[amount, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, wrappedValue, -, thisValue, ), *]
[-, thisValue, ), *, getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[-, thisValue, ), *, getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[getUnitMillis, (, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (]
[), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[}, public, long, set, (, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,]
[(, long, instant, ,, int, value, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,]
[), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return]
[), {, FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +]
[FieldUtils, ., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +]
[., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (]
[., verifyValueBounds, (, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (]
[(, this, ,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, value, -]
[,, value, ,, getMinimumValue, (, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, value, -, get, (]
[(, ), ,, getMaximumValue, (, ), ), ;, return, instant, +, (, value, -, get, (, instant, ), ), *]
[+, (, value, -, get, (, instant, ), ), *, iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return]
[iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, ), {, return]
[iUnitMillis, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, ), {, return]
[}, public, DurationField, getRangeDurationField, (, ), {, return, iRangeField, ;, }, public, int, getMaximumValue, (, ), {, return, iRange, -]
[}, public, int, getMaximumValue, (, ), {, return, iRange, -, 1, ;, }, public, int, getRange, (, ), {, return]
