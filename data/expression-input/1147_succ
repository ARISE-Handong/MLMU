[), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }]
[==, null, ), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory]
[., wrappedFactory, ==, null, ), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder]
[), {, wrappedFactory, =, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }]
[=, Executors, ., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =, builder]
[;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder]
[., defaultThreadFactory, (, ), ;, }, else, {, wrappedFactory, =, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern]
[=, builder, ., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =]
[;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;]
[., wrappedFactory, ;, }, namingPattern, =, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, .]
[=, builder, ., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder]
[;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter]
[., namingPattern, ;, priority, =, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler]
[=, builder, ., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter, =, new]
[;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (, ), ;]
[., priority, ;, daemonFlag, =, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (]
[=, builder, ., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (, ), ;, }, public]
[;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (, ), ;, }, public, final, ThreadFactory, getWrappedFactory, (]
[., daemonFlag, ;, uncaughtExceptionHandler, =, builder, ., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (, ), ;, }, public, final, ThreadFactory]
[=, builder, ., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (, ), ;, }, public, final, ThreadFactory, getWrappedFactory, (, ), {]
[;, threadCounter, =, new, AtomicLong, (, ), ;, }, public, final, ThreadFactory, getWrappedFactory, (, ), {, return, wrappedFactory, ;, }]
[., exceptionHandler, ;, threadCounter, =, new, AtomicLong, (, ), ;, }, public, final, ThreadFactory, getWrappedFactory, (, ), {, return, wrappedFactory]
[=, new, AtomicLong, (, ), ;, }, public, final, ThreadFactory, getWrappedFactory, (, ), {, return, wrappedFactory, ;, }, public, final]
[;, }, public, final, ThreadFactory, getWrappedFactory, (, ), {, return, wrappedFactory, ;, }, public, final, String, getNamingPattern, (, ), {]
[;, }, public, final, String, getNamingPattern, (, ), {, return, namingPattern, ;, }, public, final, Boolean, getDaemonFlag, (, ), {]
[;, }, public, final, Boolean, getDaemonFlag, (, ), {, return, daemonFlag, ;, }, public, final, Integer, getPriority, (, ), {]
[;, }, public, final, Integer, getPriority, (, ), {, return, priority, ;, }, public, final, Thread, ., UncaughtExceptionHandler, getUncaughtExceptionHandler, (]
[;, }, public, final, Thread, ., UncaughtExceptionHandler, getUncaughtExceptionHandler, (, ), {, return, uncaughtExceptionHandler, ;, }, public, long, getThreadCount, (, )]
[;, }, public, long, getThreadCount, (, ), {, return, threadCounter, ., get, (, ), ;, }, @, Override, public, Thread]
[;, }, @, Override, public, Thread, newThread, (, final, Runnable, r, ), {, final, Thread, t, =, getWrappedFactory, (, )]
[., get, (, ), ;, }, @, Override, public, Thread, newThread, (, final, Runnable, r, ), {, final, Thread, t]
[;, initializeThread, (, t, ), ;, return, t, ;, }, private, void, initializeThread, (, final, Thread, t, ), {, if]
[., newThread, (, r, ), ;, initializeThread, (, t, ), ;, return, t, ;, }, private, void, initializeThread, (, final]
[), ;, initializeThread, (, t, ), ;, return, t, ;, }, private, void, initializeThread, (, final, Thread, t, ), {]
[;, return, t, ;, }, private, void, initializeThread, (, final, Thread, t, ), {, if, (, getNamingPattern, (, ), !=]
[), ;, return, t, ;, }, private, void, initializeThread, (, final, Thread, t, ), {, if, (, getNamingPattern, (, )]
[;, }, private, void, initializeThread, (, final, Thread, t, ), {, if, (, getNamingPattern, (, ), !=, null, ), {]
[), {, final, Long, count, =, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;, t, ., setName]
[!=, null, ), {, final, Long, count, =, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;, t]
[), {, final, Long, count, =, Long, ., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;, t, ., setName]
[;, t, ., setName, (, String, ., format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (]
[., valueOf, (, threadCounter, ., incrementAndGet, (, ), ), ;, t, ., setName, (, String, ., format, (, getNamingPattern, (]
[), ;, t, ., setName, (, String, ., format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if]
[., incrementAndGet, (, ), ), ;, t, ., setName, (, String, ., format, (, getNamingPattern, (, ), ,, count, )]
[;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;]
[., setName, (, String, ., format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (, getUncaughtExceptionHandler, (]
[), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), )]
[., format, (, getNamingPattern, (, ), ,, count, ), ), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, )]
[,, count, ), ), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler]
[), ), ;, }, if, (, getUncaughtExceptionHandler, (, ), !=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, )]
[), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=, null, )]
[!=, null, ), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=]
[), {, t, ., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=, null, )]
[;, }, if, (, getPriority, (, ), !=, null, ), {, t, ., setPriority, (, getPriority, (, ), ., intValue]
[., setUncaughtExceptionHandler, (, getUncaughtExceptionHandler, (, ), ), ;, }, if, (, getPriority, (, ), !=, null, ), {, t, .]
[), ;, }, if, (, getPriority, (, ), !=, null, ), {, t, ., setPriority, (, getPriority, (, ), .]
[), {, t, ., setPriority, (, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (]
[!=, null, ), {, t, ., setPriority, (, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (]
[), {, t, ., setPriority, (, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (]
[;, }, if, (, getDaemonFlag, (, ), !=, null, ), {, t, ., setDaemon, (, getDaemonFlag, (, ), ., booleanValue]
[., setPriority, (, getPriority, (, ), ., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (, ), !=, null]
[), ;, }, if, (, getDaemonFlag, (, ), !=, null, ), {, t, ., setDaemon, (, getDaemonFlag, (, ), .]
[., intValue, (, ), ), ;, }, if, (, getDaemonFlag, (, ), !=, null, ), {, t, ., setDaemon, (]
[), {, t, ., setDaemon, (, getDaemonFlag, (, ), ., booleanValue, (, ), ), ;, }, }, public, static, class]
[!=, null, ), {, t, ., setDaemon, (, getDaemonFlag, (, ), ., booleanValue, (, ), ), ;, }, }, public]
[), {, t, ., setDaemon, (, getDaemonFlag, (, ), ., booleanValue, (, ), ), ;, }, }, public, static, class]
[;, }, }, public, static, class, Builder, implements, org, ., apache, ., commons, ., lang3, ., builder, ., Builder, <]
[., setDaemon, (, getDaemonFlag, (, ), ., booleanValue, (, ), ), ;, }, }, public, static, class, Builder, implements, org]
[), ;, }, }, public, static, class, Builder, implements, org, ., apache, ., commons, ., lang3, ., builder, ., Builder]
[., booleanValue, (, ), ), ;, }, }, public, static, class, Builder, implements, org, ., apache, ., commons, ., lang3]
[), {, throw, new, NullPointerException, (, "Wrapped ThreadFactory must not be null!", ), ;, }, wrappedFactory, =, factory, ;, return, this, ;, }, public, Builder]
[==, null, ), {, throw, new, NullPointerException, (, "Wrapped ThreadFactory must not be null!", ), ;, }, wrappedFactory, =, factory, ;, return, this, ;, }]
[), {, throw, new, NullPointerException, (, "Wrapped ThreadFactory must not be null!", ), ;, }, wrappedFactory, =, factory, ;, return, this, ;, }, public, Builder]
[;, }, wrappedFactory, =, factory, ;, return, this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if]
[), ;, }, wrappedFactory, =, factory, ;, return, this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {]
[=, factory, ;, return, this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if, (, pattern, ==]
[;, return, this, ;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if, (, pattern, ==, null, )]
[;, }, public, Builder, namingPattern, (, final, String, pattern, ), {, if, (, pattern, ==, null, ), {, throw, new]
[), {, throw, new, NullPointerException, (, "Naming pattern must not be null!", ), ;, }, namingPattern, =, pattern, ;, return, this, ;, }, public, Builder]
[==, null, ), {, throw, new, NullPointerException, (, "Naming pattern must not be null!", ), ;, }, namingPattern, =, pattern, ;, return, this, ;, }]
[), {, throw, new, NullPointerException, (, "Naming pattern must not be null!", ), ;, }, namingPattern, =, pattern, ;, return, this, ;, }, public, Builder]
[;, }, namingPattern, =, pattern, ;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag]
[), ;, }, namingPattern, =, pattern, ;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {]
[=, pattern, ;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag, =, Boolean, .]
[;, return, this, ;, }, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag, =, Boolean, ., valueOf, (]
[;, }, public, Builder, daemon, (, final, boolean, f, ), {, daemonFlag, =, Boolean, ., valueOf, (, f, ), ;]
[=, Boolean, ., valueOf, (, f, ), ;, return, this, ;, }, public, Builder, priority, (, final, int, prio, )]
[;, return, this, ;, }, public, Builder, priority, (, final, int, prio, ), {, priority, =, Integer, ., valueOf, (]
[., valueOf, (, f, ), ;, return, this, ;, }, public, Builder, priority, (, final, int, prio, ), {, priority]
[), ;, return, this, ;, }, public, Builder, priority, (, final, int, prio, ), {, priority, =, Integer, ., valueOf]
[;, }, public, Builder, priority, (, final, int, prio, ), {, priority, =, Integer, ., valueOf, (, prio, ), ;]
[=, Integer, ., valueOf, (, prio, ), ;, return, this, ;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler]
[;, return, this, ;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (, handler, ==]
[., valueOf, (, prio, ), ;, return, this, ;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, )]
[), ;, return, this, ;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (, handler]
[;, }, public, Builder, uncaughtExceptionHandler, (, final, Thread, ., UncaughtExceptionHandler, handler, ), {, if, (, handler, ==, null, ), {]
[), {, throw, new, NullPointerException, (, "Uncaught exception handler must not be null!", ), ;, }, exceptionHandler, =, handler, ;, return, this, ;, }, public, void]
[==, null, ), {, throw, new, NullPointerException, (, "Uncaught exception handler must not be null!", ), ;, }, exceptionHandler, =, handler, ;, return, this, ;, }]
[), {, throw, new, NullPointerException, (, "Uncaught exception handler must not be null!", ), ;, }, exceptionHandler, =, handler, ;, return, this, ;, }, public, void]
[;, }, exceptionHandler, =, handler, ;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;]
[), ;, }, exceptionHandler, =, handler, ;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null]
[=, handler, ;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null]
[;, return, this, ;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;, namingPattern]
[;, }, public, void, reset, (, ), {, wrappedFactory, =, null, ;, exceptionHandler, =, null, ;, namingPattern, =, null, ;]
[=, null, ;, exceptionHandler, =, null, ;, namingPattern, =, null, ;, priority, =, null, ;, daemonFlag, =, null, ;, }]
[;, exceptionHandler, =, null, ;, namingPattern, =, null, ;, priority, =, null, ;, daemonFlag, =, null, ;, }, @, Override]
[=, null, ;, namingPattern, =, null, ;, priority, =, null, ;, daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory]
[;, namingPattern, =, null, ;, priority, =, null, ;, daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory, build, (]
[=, null, ;, priority, =, null, ;, daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory, build, (, ), {]
[;, priority, =, null, ;, daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory]
[=, null, ;, daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =]
[;, daemonFlag, =, null, ;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =, new, BasicThreadFactory]
[=, null, ;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =, new, BasicThreadFactory, (, this]
[;, }, @, Override, public, BasicThreadFactory, build, (, ), {, final, BasicThreadFactory, factory, =, new, BasicThreadFactory, (, this, ), ;]
[;, reset, (, ), ;, return, factory, ;, }, }, }]
[), ;, reset, (, ), ;, return, factory, ;, }, }, }]
[;, return, factory, ;, }, }, }]
[;, }, }, }]
