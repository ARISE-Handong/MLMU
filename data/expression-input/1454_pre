[Line, line, ;, private, final, IntervalsSet, remainingRegion, ;, public, SubLine, (, final, Line, line, ,, final, IntervalsSet, remainingRegion, ), {]
[Line, line, ;, private, final, IntervalsSet, remainingRegion, ;, public, SubLine, (, final, Line, line, ,, final, IntervalsSet, remainingRegion, ), {]
[final, IntervalsSet, remainingRegion, ;, public, SubLine, (, final, Line, line, ,, final, IntervalsSet, remainingRegion, ), {, this, ., line, =]
[remainingRegion, ;, public, SubLine, (, final, Line, line, ,, final, IntervalsSet, remainingRegion, ), {, this, ., line, =, line, ;]
[remainingRegion, ;, public, SubLine, (, final, Line, line, ,, final, IntervalsSet, remainingRegion, ), {, this, ., line, =, line, ;]
[(, final, Line, line, ,, final, IntervalsSet, remainingRegion, ), {, this, ., line, =, line, ;, this, ., remainingRegion, =]
[=, remainingRegion, ;, }, public, SubLine, (, final, Vector3D, start, ,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, this, (]
[}, public, SubLine, (, final, Vector3D, start, ,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, this, (, new, Line, (]
[SubLine, (, final, Vector3D, start, ,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, this, (, new, Line, (, start, ,]
[Vector3D, start, ,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, this, (, new, Line, (, start, ,, end, ), ,]
[,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, this, (, new, Line, (, start, ,, end, ), ,, buildIntervalSet, (]
[Vector3D, end, ), throws, MathIllegalArgumentException, {, this, (, new, Line, (, start, ,, end, ), ,, buildIntervalSet, (, start, ,]
[(, start, ,, end, ), ), ;, }, public, SubLine, (, final, Segment, segment, ), throws, MathIllegalArgumentException, {, this, (]
[(, start, ,, end, ), ), ;, }, public, SubLine, (, final, Segment, segment, ), throws, MathIllegalArgumentException, {, this, (]
[;, }, public, SubLine, (, final, Segment, segment, ), throws, MathIllegalArgumentException, {, this, (, segment, ., getLine, (, ), ,]
[public, SubLine, (, final, Segment, segment, ), throws, MathIllegalArgumentException, {, this, (, segment, ., getLine, (, ), ,, buildIntervalSet, (]
[public, SubLine, (, final, Segment, segment, ), throws, MathIllegalArgumentException, {, this, (, segment, ., getLine, (, ), ,, buildIntervalSet, (]
[), throws, MathIllegalArgumentException, {, this, (, segment, ., getLine, (, ), ,, buildIntervalSet, (, segment, ., getStart, (, ), ,]
[), throws, MathIllegalArgumentException, {, this, (, segment, ., getLine, (, ), ,, buildIntervalSet, (, segment, ., getStart, (, ), ,]
[), ), ;, }, public, List, <, Segment, >, getSegments, (, ), {, final, List, <, Interval, >, list, =]
[), ), ;, }, public, List, <, Segment, >, getSegments, (, ), {, final, List, <, Interval, >, list, =]
[final, List, <, Interval, >, list, =, remainingRegion, ., asList, (, ), ;, final, List, <, Segment, >, segments, =]
[=, remainingRegion, ., asList, (, ), ;, final, List, <, Segment, >, segments, =, new, ArrayList, <, Segment, >, (]
[=, remainingRegion, ., asList, (, ), ;, final, List, <, Segment, >, segments, =, new, ArrayList, <, Segment, >, (]
[=, new, ArrayList, <, Segment, >, (, list, ., size, (, ), ), ;, for, (, final, Interval, interval, :]
[list, ., size, (, ), ), ;, for, (, final, Interval, interval, :, list, ), {, final, Vector3D, start, =]
[list, ., size, (, ), ), ;, for, (, final, Interval, interval, :, list, ), {, final, Vector3D, start, =]
[), ), ;, for, (, final, Interval, interval, :, list, ), {, final, Vector3D, start, =, line, ., toSpace, (]
[for, (, final, Interval, interval, :, list, ), {, final, Vector3D, start, =, line, ., toSpace, (, new, Vector1D, (]
[for, (, final, Interval, interval, :, list, ), {, final, Vector3D, start, =, line, ., toSpace, (, new, Vector1D, (]
[=, line, ., toSpace, (, new, Vector1D, (, interval, ., getInf, (, ), ), ), ;, final, Vector3D, end, =]
[=, line, ., toSpace, (, new, Vector1D, (, interval, ., getInf, (, ), ), ), ;, final, Vector3D, end, =]
[(, new, Vector1D, (, interval, ., getInf, (, ), ), ), ;, final, Vector3D, end, =, line, ., toSpace, (]
[(, interval, ., getInf, (, ), ), ), ;, final, Vector3D, end, =, line, ., toSpace, (, new, Vector1D, (]
[(, interval, ., getInf, (, ), ), ), ;, final, Vector3D, end, =, line, ., toSpace, (, new, Vector1D, (]
[;, final, Vector3D, end, =, line, ., toSpace, (, new, Vector1D, (, interval, ., getSup, (, ), ), ), ;]
[;, final, Vector3D, end, =, line, ., toSpace, (, new, Vector1D, (, interval, ., getSup, (, ), ), ), ;]
[=, line, ., toSpace, (, new, Vector1D, (, interval, ., getSup, (, ), ), ), ;, segments, ., add, (]
[toSpace, (, new, Vector1D, (, interval, ., getSup, (, ), ), ), ;, segments, ., add, (, new, Segment, (]
[new, Vector1D, (, interval, ., getSup, (, ), ), ), ;, segments, ., add, (, new, Segment, (, start, ,]
[(, interval, ., getSup, (, ), ), ), ;, segments, ., add, (, new, Segment, (, start, ,, end, ,]
[), ), ;, segments, ., add, (, new, Segment, (, start, ,, end, ,, line, ), ), ;, }, return]
[return, segments, ;, }, public, Vector3D, intersection, (, final, SubLine, subLine, ,, final, boolean, includeEndPoints, ), {, Vector3D, v1D, =]
[return, segments, ;, }, public, Vector3D, intersection, (, final, SubLine, subLine, ,, final, boolean, includeEndPoints, ), {, Vector3D, v1D, =]
[public, Vector3D, intersection, (, final, SubLine, subLine, ,, final, boolean, includeEndPoints, ), {, Vector3D, v1D, =, line, ., intersection, (]
[public, Vector3D, intersection, (, final, SubLine, subLine, ,, final, boolean, includeEndPoints, ), {, Vector3D, v1D, =, line, ., intersection, (]
[,, final, boolean, includeEndPoints, ), {, Vector3D, v1D, =, line, ., intersection, (, subLine, ., line, ), ;, if, (]
[,, final, boolean, includeEndPoints, ), {, Vector3D, v1D, =, line, ., intersection, (, subLine, ., line, ), ;, if, (]
[boolean, includeEndPoints, ), {, Vector3D, v1D, =, line, ., intersection, (, subLine, ., line, ), ;, if, (, v1D, ==]
[Vector3D, v1D, =, line, ., intersection, (, subLine, ., line, ), ;, if, (, v1D, ==, null, ), {, return]
[(, subLine, ., line, ), ;, if, (, v1D, ==, null, ), {, return, null, ;, }, Location, loc1, =]
[(, subLine, ., line, ), ;, if, (, v1D, ==, null, ), {, return, null, ;, }, Location, loc1, =]
[), ;, if, (, v1D, ==, null, ), {, return, null, ;, }, Location, loc1, =, remainingRegion, ., checkPoint, (]
[), ;, if, (, v1D, ==, null, ), {, return, null, ;, }, Location, loc1, =, remainingRegion, ., checkPoint, (]
[v1D, ==, null, ), {, return, null, ;, }, Location, loc1, =, remainingRegion, ., checkPoint, (, line, ., toSubSpace, (]
[;, }, Location, loc1, =, remainingRegion, ., checkPoint, (, line, ., toSubSpace, (, v1D, ), ), ;, Location, loc2, =]
[;, }, Location, loc1, =, remainingRegion, ., checkPoint, (, line, ., toSubSpace, (, v1D, ), ), ;, Location, loc2, =]
[;, }, Location, loc1, =, remainingRegion, ., checkPoint, (, line, ., toSubSpace, (, v1D, ), ), ;, Location, loc2, =]
[., checkPoint, (, line, ., toSubSpace, (, v1D, ), ), ;, Location, loc2, =, subLine, ., remainingRegion, ., checkPoint, (]
[., checkPoint, (, line, ., toSubSpace, (, v1D, ), ), ;, Location, loc2, =, subLine, ., remainingRegion, ., checkPoint, (]
[., checkPoint, (, line, ., toSubSpace, (, v1D, ), ), ;, Location, loc2, =, subLine, ., remainingRegion, ., checkPoint, (]
[(, v1D, ), ), ;, Location, loc2, =, subLine, ., remainingRegion, ., checkPoint, (, subLine, ., line, ., toSubSpace, (]
[loc2, =, subLine, ., remainingRegion, ., checkPoint, (, subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (]
[remainingRegion, ., checkPoint, (, subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return]
[remainingRegion, ., checkPoint, (, subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return]
[., checkPoint, (, subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (]
[., checkPoint, (, subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (]
[checkPoint, (, subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (, (]
[checkPoint, (, subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (, (]
[subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (, (, loc1, !=]
[subLine, ., line, ., toSubSpace, (, v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (, (, loc1, !=]
[(, v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (, (, loc1, !=, Location, ., OUTSIDE, ), &&]
[v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (, (, loc1, !=, Location, ., OUTSIDE, ), &&, (]
[v1D, ), ), ;, if, (, includeEndPoints, ), {, return, (, (, loc1, !=, Location, ., OUTSIDE, ), &&, (]
[), ;, if, (, includeEndPoints, ), {, return, (, (, loc1, !=, Location, ., OUTSIDE, ), &&, (, loc2, !=]
[), ;, if, (, includeEndPoints, ), {, return, (, (, loc1, !=, Location, ., OUTSIDE, ), &&, (, loc2, !=]
[{, return, (, (, loc1, !=, Location, ., OUTSIDE, ), &&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?]
[(, (, loc1, !=, Location, ., OUTSIDE, ), &&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :]
[OUTSIDE, ), &&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return]
[OUTSIDE, ), &&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return]
[), &&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return, (]
[), &&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return, (]
[&&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return, (, (]
[&&, (, loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return, (, (]
[loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return, (, (, loc1, ==]
[loc2, !=, Location, ., OUTSIDE, ), ), ?, v1D, :, null, ;, }, else, {, return, (, (, loc1, ==]
[), ), ?, v1D, :, null, ;, }, else, {, return, (, (, loc1, ==, Location, ., INSIDE, ), &&]
[), ?, v1D, :, null, ;, }, else, {, return, (, (, loc1, ==, Location, ., INSIDE, ), &&, (]
[), ?, v1D, :, null, ;, }, else, {, return, (, (, loc1, ==, Location, ., INSIDE, ), &&, (]
[v1D, :, null, ;, }, else, {, return, (, (, loc1, ==, Location, ., INSIDE, ), &&, (, loc2, ==]
[v1D, :, null, ;, }, else, {, return, (, (, loc1, ==, Location, ., INSIDE, ), &&, (, loc2, ==]
[{, return, (, (, loc1, ==, Location, ., INSIDE, ), &&, (, loc2, ==, Location, ., INSIDE, ), ), ?]
[(, (, loc1, ==, Location, ., INSIDE, ), &&, (, loc2, ==, Location, ., INSIDE, ), ), ?, v1D, :]
[private, static, IntervalsSet, buildIntervalSet, (, final, Vector3D, start, ,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, final, Line, line, =]
[buildIntervalSet, (, final, Vector3D, start, ,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, final, Line, line, =, new, Line, (]
[final, Vector3D, start, ,, final, Vector3D, end, ), throws, MathIllegalArgumentException, {, final, Line, line, =, new, Line, (, start, ,]
[final, Vector3D, end, ), throws, MathIllegalArgumentException, {, final, Line, line, =, new, Line, (, start, ,, end, ), ;, return]
[), throws, MathIllegalArgumentException, {, final, Line, line, =, new, Line, (, start, ,, end, ), ;, return, new, IntervalsSet, (]
[), throws, MathIllegalArgumentException, {, final, Line, line, =, new, Line, (, start, ,, end, ), ;, return, new, IntervalsSet, (]
[), throws, MathIllegalArgumentException, {, final, Line, line, =, new, Line, (, start, ,, end, ), ;, return, new, IntervalsSet, (]
[final, Line, line, =, new, Line, (, start, ,, end, ), ;, return, new, IntervalsSet, (, line, ., toSubSpace, (]
[start, ,, end, ), ;, return, new, IntervalsSet, (, line, ., toSubSpace, (, start, ), ., getX, (, ), ,]
[start, ,, end, ), ;, return, new, IntervalsSet, (, line, ., toSubSpace, (, start, ), ., getX, (, ), ,]
[start, ,, end, ), ;, return, new, IntervalsSet, (, line, ., toSubSpace, (, start, ), ., getX, (, ), ,]
[;, return, new, IntervalsSet, (, line, ., toSubSpace, (, start, ), ., getX, (, ), ,, line, ., toSubSpace, (]
