[;, private, final, AbstractCompiler, compiler, ;, private, final, Map, <, Node, ,, ConcreteFunctionType, >, functionFromDeclaration, =, Maps, ., newHashMap, (]
[;, private, final, Map, <, FunctionType, ,, ConcreteFunctionType, >, functionFromJSType, =, Maps, ., newIdentityHashMap, (, ), ;, private, final, Map]
[., newHashMap, (, ), ;, private, final, Map, <, FunctionType, ,, ConcreteFunctionType, >, functionFromJSType, =, Maps, ., newIdentityHashMap, (, )]
[;, private, final, Map, <, ObjectType, ,, ConcreteInstanceType, >, instanceFromJSType, =, Maps, ., newHashMap, (, ), ;, private, final, Map]
[., newIdentityHashMap, (, ), ;, private, final, Map, <, ObjectType, ,, ConcreteInstanceType, >, instanceFromJSType, =, Maps, ., newHashMap, (, )]
[;, private, final, Map, <, ConcreteJSTypePair, ,, ConcreteType, >, typeIntersectionMemos, =, Maps, ., newHashMap, (, ), ;, private, ConcreteScope, topScope]
[., newHashMap, (, ), ;, private, final, Map, <, ConcreteJSTypePair, ,, ConcreteType, >, typeIntersectionMemos, =, Maps, ., newHashMap, (, )]
[;, private, ConcreteScope, topScope, ;, TightenTypes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, }, ConcreteScope, getTopScope]
[., newHashMap, (, ), ;, private, ConcreteScope, topScope, ;, TightenTypes, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler]
[=, compiler, ;, }, ConcreteScope, getTopScope, (, ), {, return, topScope, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, )]
[., compiler, =, compiler, ;, }, ConcreteScope, getTopScope, (, ), {, return, topScope, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry]
[;, }, ConcreteScope, getTopScope, (, ), {, return, topScope, ;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, return]
[;, }, @, Override, public, JSTypeRegistry, getTypeRegistry, (, ), {, return, compiler, ., getTypeRegistry, (, ), ;, }, private, Set]
[;, }, private, Set, <, ConcreteType, >, allInstantiatedTypes, =, Sets, ., newHashSet, (, ), ;, @, Override, public, void, process]
[., getTypeRegistry, (, ), ;, }, private, Set, <, ConcreteType, >, allInstantiatedTypes, =, Sets, ., newHashSet, (, ), ;, @]
[;, @, Override, public, void, process, (, Node, externRoot, ,, Node, jsRoot, ), {, topScope, =, new, ConcreteScope, (, null]
[., newHashSet, (, ), ;, @, Override, public, void, process, (, Node, externRoot, ,, Node, jsRoot, ), {, topScope, =]
[=, new, ConcreteScope, (, null, ), ;, topScope, ., initForExternRoot, (, externRoot, ), ;, topScope, ., initForScopeRoot, (, jsRoot, )]
[;, topScope, ., initForExternRoot, (, externRoot, ), ;, topScope, ., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =, 1000, ;]
[), ;, topScope, ., initForExternRoot, (, externRoot, ), ;, topScope, ., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =, 1000]
[;, topScope, ., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set, <]
[., initForExternRoot, (, externRoot, ), ;, topScope, ., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =, 1000, ;, long, iterations]
[), ;, topScope, ., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set]
[;, long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set, <, ConcreteScope, >, workSet, =, Sets, ., newHashSet]
[., initForScopeRoot, (, jsRoot, ), ;, long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set, <, ConcreteScope, >]
[), ;, long, maxIterations, =, 1000, ;, long, iterations, =, 0, ;, Set, <, ConcreteScope, >, workSet, =, Sets, .]
[;, long, iterations, =, 0, ;, Set, <, ConcreteScope, >, workSet, =, Sets, ., newHashSet, (, topScope, ), ;, List]
[;, Set, <, ConcreteScope, >, workSet, =, Sets, ., newHashSet, (, topScope, ), ;, List, <, ConcreteScope, >, workList, =]
[;, List, <, ConcreteScope, >, workList, =, Lists, ., newArrayList, (, topScope, ), ;, boolean, changed, ;, do, {, changed]
[., newHashSet, (, topScope, ), ;, List, <, ConcreteScope, >, workList, =, Lists, ., newArrayList, (, topScope, ), ;, boolean]
[), ;, List, <, ConcreteScope, >, workList, =, Lists, ., newArrayList, (, topScope, ), ;, boolean, changed, ;, do, {]
[;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =, 0, ;, i, <, workList]
[., newArrayList, (, topScope, ), ;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =]
[), ;, boolean, changed, ;, do, {, changed, =, false, ;, for, (, int, i, =, 0, ;, i, <]
[=, false, ;, for, (, int, i, =, 0, ;, i, <, workList, ., size, (, ), ;, ++, i]
[;, for, (, int, i, =, 0, ;, i, <, workList, ., size, (, ), ;, ++, i, ), {]
[;, i, <, workList, ., size, (, ), ;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (]
[;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (, i, ), ;, for, (, Action, action, :]
[<, workList, ., size, (, ), ;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (, i, )]
[;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (, i, ), ;, for, (, Action, action, :]
[., size, (, ), ;, ++, i, ), {, ConcreteScope, scope, =, workList, ., get, (, i, ), ;, for]
[), {, ConcreteScope, scope, =, workList, ., get, (, i, ), ;, for, (, Action, action, :, scope, ., getActions]
[), {, ConcreteScope, scope, =, workList, ., get, (, i, ), ;, for, (, Action, action, :, scope, ., getActions]
[;, for, (, Action, action, :, scope, ., getActions, (, ), ), {, for, (, Assignment, assign, :, action, .]
[., get, (, i, ), ;, for, (, Action, action, :, scope, ., getActions, (, ), ), {, for, (]
[), ;, for, (, Action, action, :, scope, ., getActions, (, ), ), {, for, (, Assignment, assign, :, action]
[), {, for, (, Assignment, assign, :, action, ., getAssignments, (, scope, ), ), {, if, (, assign, ., slot]
[., getActions, (, ), ), {, for, (, Assignment, assign, :, action, ., getAssignments, (, scope, ), ), {, if]
[), {, if, (, assign, ., slot, ., addConcreteType, (, assign, ., type, ), ), {, changed, =, true, ;]
[., getAssignments, (, scope, ), ), {, if, (, assign, ., slot, ., addConcreteType, (, assign, ., type, ), )]
[), ), {, if, (, assign, ., slot, ., addConcreteType, (, assign, ., type, ), ), {, changed, =, true]
[), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (]
[., addConcreteType, (, assign, ., type, ), ), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, .]
[., slot, ., addConcreteType, (, assign, ., type, ), ), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, .]
[), ), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (]
[., type, ), ), {, changed, =, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;]
[=, true, ;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (, varScope, !=, scope]
[;, ConcreteScope, varScope, =, assign, ., slot, ., getScope, (, ), ;, if, (, (, varScope, !=, scope, ), &&]
[;, if, (, (, varScope, !=, scope, ), &&, !, workSet, ., contains, (, varScope, ), ), {, workSet, .]
[., getScope, (, ), ;, if, (, (, varScope, !=, scope, ), &&, !, workSet, ., contains, (, varScope, )]
[., slot, ., getScope, (, ), ;, if, (, (, varScope, !=, scope, ), &&, !, workSet, ., contains, (]
[), {, workSet, ., add, (, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }]
[&&, !, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;, workList, ., add]
[), &&, !, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;, workList, .]
[!=, scope, ), &&, !, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;]
[), &&, !, workSet, ., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;, workList, .]
[), {, workSet, ., add, (, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }]
[), {, workSet, ., add, (, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }]
[., contains, (, varScope, ), ), {, workSet, ., add, (, varScope, ), ;, workList, ., add, (, varScope, )]
[), ), {, workSet, ., add, (, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }]
[;, workList, ., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (, ++, iterations, !=]
[., add, (, varScope, ), ;, workList, ., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, .]
[), ;, workList, ., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (, ++, iterations]
[;, }, }, }, }, }, Preconditions, ., checkState, (, ++, iterations, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, while]
[., add, (, varScope, ), ;, }, }, }, }, }, Preconditions, ., checkState, (, ++, iterations, !=, maxIterations, ,]
[), ;, }, }, }, }, }, Preconditions, ., checkState, (, ++, iterations, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }]
[;, }, while, (, changed, ), ;, }, class, ConcreteScope, implements, StaticScope, <, ConcreteType, >, {, private, final, ConcreteScope, parent]
[., checkState, (, ++, iterations, !=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, while, (, changed, ), ;, }, class, ConcreteScope]
[,, NON_HALTING_ERROR_MSG, ), ;, }, while, (, changed, ), ;, }, class, ConcreteScope, implements, StaticScope, <, ConcreteType, >, {, private]
[!=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, while, (, changed, ), ;, }, class, ConcreteScope, implements, StaticScope, <, ConcreteType, >]
[!=, maxIterations, ,, NON_HALTING_ERROR_MSG, ), ;, }, while, (, changed, ), ;, }, class, ConcreteScope, implements, StaticScope, <, ConcreteType, >]
[,, NON_HALTING_ERROR_MSG, ), ;, }, while, (, changed, ), ;, }, class, ConcreteScope, implements, StaticScope, <, ConcreteType, >, {, private]
[), ;, }, while, (, changed, ), ;, }, class, ConcreteScope, implements, StaticScope, <, ConcreteType, >, {, private, final, ConcreteScope]
[), ;, }, class, ConcreteScope, implements, StaticScope, <, ConcreteType, >, {, private, final, ConcreteScope, parent, ;, private, final, Map, <]
[=, parent, ;, this, ., slots, =, Maps, ., newHashMap, (, ), ;, this, ., actions, =, Lists, ., newArrayList]
[., parent, =, parent, ;, this, ., slots, =, Maps, ., newHashMap, (, ), ;, this, ., actions, =, Lists]
[;, this, ., slots, =, Maps, ., newHashMap, (, ), ;, this, ., actions, =, Lists, ., newArrayList, (, )]
[=, Maps, ., newHashMap, (, ), ;, this, ., actions, =, Lists, ., newArrayList, (, ), ;, }, @, Override]
[., slots, =, Maps, ., newHashMap, (, ), ;, this, ., actions, =, Lists, ., newArrayList, (, ), ;, }]
[;, this, ., actions, =, Lists, ., newArrayList, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {]
[., newHashMap, (, ), ;, this, ., actions, =, Lists, ., newArrayList, (, ), ;, }, @, Override, public, Node]
[=, Lists, ., newArrayList, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, null, ;, }]
[., actions, =, Lists, ., newArrayList, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, null]
[;, }, @, Override, public, Node, getRootNode, (, ), {, return, null, ;, }, @, Override, public, StaticScope, <, ConcreteType]
[., newArrayList, (, ), ;, }, @, Override, public, Node, getRootNode, (, ), {, return, null, ;, }, @, Override]
[;, }, @, Override, public, StaticScope, <, ConcreteType, >, getParentScope, (, ), {, return, parent, ;, }, @, Override, public]
[;, }, @, Override, public, StaticSlot, <, ConcreteType, >, getOwnSlot, (, String, name, ), {, return, slots, ., get, (]
[;, }, @, Override, public, StaticSlot, <, ConcreteType, >, getSlot, (, String, name, ), {, StaticSlot, <, ConcreteType, >, var]
[., get, (, name, ), ;, }, @, Override, public, StaticSlot, <, ConcreteType, >, getSlot, (, String, name, ), {]
[), ;, }, @, Override, public, StaticSlot, <, ConcreteType, >, getSlot, (, String, name, ), {, StaticSlot, <, ConcreteType, >]
[;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {]
[), ;, if, (, var, !=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, )]
[), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getSlot, (, name]
[!=, null, ), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getSlot]
[), {, return, var, ;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getSlot, (, name]
[;, }, else, if, (, parent, !=, null, ), {, return, parent, ., getSlot, (, name, ), ;, }, else]
[), {, return, parent, ., getSlot, (, name, ), ;, }, else, {, return, null, ;, }, }, Collection, <]
[!=, null, ), {, return, parent, ., getSlot, (, name, ), ;, }, else, {, return, null, ;, }, }]
[), {, return, parent, ., getSlot, (, name, ), ;, }, else, {, return, null, ;, }, }, Collection, <]
[;, }, else, {, return, null, ;, }, }, Collection, <, ConcreteSlot, >, getSlots, (, ), {, return, slots, .]
[., getSlot, (, name, ), ;, }, else, {, return, null, ;, }, }, Collection, <, ConcreteSlot, >, getSlots, (]
[), ;, }, else, {, return, null, ;, }, }, Collection, <, ConcreteSlot, >, getSlots, (, ), {, return, slots]
[;, }, }, Collection, <, ConcreteSlot, >, getSlots, (, ), {, return, slots, ., values, (, ), ;, }, @]
[;, }, @, Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME]
[., values, (, ), ;, }, @, Override, public, ConcreteType, getTypeOfThis, (, ), {, ConcreteSlot, thisVar, =, slots, ., get]
[;, return, (, thisVar, !=, null, ), ?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE, ;, }, void]
[., get, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ), ;, return, (, thisVar, !=, null, ), ?, thisVar, ., getType, (, )]
[), ;, return, (, thisVar, !=, null, ), ?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE, ;, }]
[., THIS_SLOT_NAME, ), ;, return, (, thisVar, !=, null, ), ?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE]
[;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (, name, ,, new, ConcreteSlot]
[?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration]
[), ?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node]
[!=, null, ), ?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name]
[), ?, thisVar, ., getType, (, ), :, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node]
[:, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (]
[., getType, (, ), :, ConcreteType, ., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {]
[;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (, name, ,, new, ConcreteSlot]
[., NONE, ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ), {, slots, ., put, (, name, ,]
[;, }, void, declareSlot, (, String, name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =, new, ConcreteSlot]
[., put, (, name, ,, new, ConcreteSlot, (, this, ,, name, ), ), ;, }, void, declareSlot, (, String, name]
[,, new, ConcreteSlot, (, this, ,, name, ), ), ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ,]
[), ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =, new]
[,, name, ), ), ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot]
[), ), ;, }, void, declareSlot, (, String, name, ,, Node, declaration, ,, ConcreteType, type, ), {, ConcreteSlot, var, =]
[;, var, ., addConcreteType, (, type, ), ;, slots, ., put, (, name, ,, var, ), ;, }, List, <]
[,, name, ), ;, var, ., addConcreteType, (, type, ), ;, slots, ., put, (, name, ,, var, ), ;]
[), ;, var, ., addConcreteType, (, type, ), ;, slots, ., put, (, name, ,, var, ), ;, }, List]
[;, slots, ., put, (, name, ,, var, ), ;, }, List, <, Action, >, getActions, (, ), {, return]
[., addConcreteType, (, type, ), ;, slots, ., put, (, name, ,, var, ), ;, }, List, <, Action, >]
[), ;, slots, ., put, (, name, ,, var, ), ;, }, List, <, Action, >, getActions, (, ), {]
[;, }, List, <, Action, >, getActions, (, ), {, return, actions, ;, }, void, initForScopeRoot, (, Node, decl, )]
[., put, (, name, ,, var, ), ;, }, List, <, Action, >, getActions, (, ), {, return, actions, ;]
[,, var, ), ;, }, List, <, Action, >, getActions, (, ), {, return, actions, ;, }, void, initForScopeRoot, (]
[), ;, }, List, <, Action, >, getActions, (, ), {, return, actions, ;, }, void, initForScopeRoot, (, Node, decl]
[;, }, void, initForScopeRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, if, (, decl, .]
[;, if, (, decl, ., isFunction, (, ), ), {, decl, =, decl, ., getLastChild, (, ), ;, }, Preconditions]
[., checkNotNull, (, decl, ), ;, if, (, decl, ., isFunction, (, ), ), {, decl, =, decl, ., getLastChild]
[), ;, if, (, decl, ., isFunction, (, ), ), {, decl, =, decl, ., getLastChild, (, ), ;, }]
[), {, decl, =, decl, ., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, )]
[., isFunction, (, ), ), {, decl, =, decl, ., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (, decl]
[=, decl, ., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal]
[;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl]
[., getLastChild, (, ), ;, }, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse]
[;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, false, ), ), ;, }, void]
[., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, false, ), ), ;, }]
[., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, false]
[;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument, (]
[., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, false, ), ), ;, }, void, initForExternRoot, (]
[,, decl, ,, new, CreateScope, (, this, ,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {]
[,, new, CreateScope, (, this, ,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, .]
[), ;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument]
[,, false, ), ), ;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;]
[), ), ;, }, void, initForExternRoot, (, Node, decl, ), {, Preconditions, ., checkNotNull, (, decl, ), ;, Preconditions, .]
[;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,]
[., checkNotNull, (, decl, ), ;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse]
[), ;, Preconditions, ., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl]
[;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, true, ), ), ;, }, void]
[., checkArgument, (, decl, ., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, true, ), ), ;, }]
[., isBlock, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, true]
[;, }, void, addAction, (, Action, action, ), {, actions, ., add, (, action, ), ;, }, @, Override, public]
[., traverse, (, compiler, ,, decl, ,, new, CreateScope, (, this, ,, true, ), ), ;, }, void, addAction, (]
[,, decl, ,, new, CreateScope, (, this, ,, true, ), ), ;, }, void, addAction, (, Action, action, ), {]
[,, new, CreateScope, (, this, ,, true, ), ), ;, }, void, addAction, (, Action, action, ), {, actions, .]
[), ;, }, void, addAction, (, Action, action, ), {, actions, ., add, (, action, ), ;, }, @, Override]
[,, true, ), ), ;, }, void, addAction, (, Action, action, ), {, actions, ., add, (, action, ), ;]
[), ), ;, }, void, addAction, (, Action, action, ), {, actions, ., add, (, action, ), ;, }, @]
[;, }, @, Override, public, String, toString, (, ), {, return, getTypeOfThis, (, ), ., toString, (, ), +, " "]
[., add, (, action, ), ;, }, @, Override, public, String, toString, (, ), {, return, getTypeOfThis, (, ), .]
[), ;, }, @, Override, public, String, toString, (, ), {, return, getTypeOfThis, (, ), ., toString, (, ), +]
[;, }, }, static, class, ConcreteSlot, implements, StaticSlot, <, ConcreteType, >, {, private, final, ConcreteScope, scope, ;, private, final, String]
[+, getSlots, (, ), ;, }, }, static, class, ConcreteSlot, implements, StaticSlot, <, ConcreteType, >, {, private, final, ConcreteScope, scope]
[+, " ", +, getSlots, (, ), ;, }, }, static, class, ConcreteSlot, implements, StaticSlot, <, ConcreteType, >, {, private, final]
[., toString, (, ), +, " ", +, getSlots, (, ), ;, }, }, static, class, ConcreteSlot, implements, StaticSlot, <, ConcreteType]
[+, getSlots, (, ), ;, }, }, static, class, ConcreteSlot, implements, StaticSlot, <, ConcreteType, >, {, private, final, ConcreteScope, scope]
[;, }, }, static, class, ConcreteSlot, implements, StaticSlot, <, ConcreteType, >, {, private, final, ConcreteScope, scope, ;, private, final, String]
[=, scope, ;, this, ., name, =, name, ;, this, ., type, =, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope]
[., scope, =, scope, ;, this, ., name, =, name, ;, this, ., type, =, ConcreteType, ., NONE, ;, }]
[;, this, ., name, =, name, ;, this, ., type, =, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope, (, )]
[=, name, ;, this, ., type, =, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope, (, ), {, return, scope, ;]
[., name, =, name, ;, this, ., type, =, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope, (, ), {, return]
[;, this, ., type, =, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope, (, ), {, return, scope, ;, }, @]
[=, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope, (, ), {, return, scope, ;, }, @, Override, public, String, getName]
[., type, =, ConcreteType, ., NONE, ;, }, ConcreteScope, getScope, (, ), {, return, scope, ;, }, @, Override, public]
[;, }, ConcreteScope, getScope, (, ), {, return, scope, ;, }, @, Override, public, String, getName, (, ), {, return]
[., NONE, ;, }, ConcreteScope, getScope, (, ), {, return, scope, ;, }, @, Override, public, String, getName, (, )]
[;, }, @, Override, public, String, getName, (, ), {, return, name, ;, }, @, Override, public, ConcreteType, getType, (]
[;, }, @, Override, public, ConcreteType, getType, (, ), {, return, type, ;, }, @, Override, public, boolean, isTypeInferred, (]
[;, }, @, Override, public, boolean, isTypeInferred, (, ), {, return, true, ;, }, @, Override, public, StaticReference, <, ConcreteType]
[;, }, @, Override, public, StaticReference, <, ConcreteType, >, getDeclaration, (, ), {, return, null, ;, }, @, Override, public]
[;, }, @, Override, public, JSDocInfo, getJSDocInfo, (, ), {, return, null, ;, }, boolean, addConcreteType, (, ConcreteType, type, )]
[;, }, boolean, addConcreteType, (, ConcreteType, type, ), {, ConcreteType, origType, =, this, ., type, ;, this, ., type, =]
[;, this, ., type, =, origType, ., unionWith, (, type, ), ;, return, !, this, ., type, ., equals, (]
[., type, ;, this, ., type, =, origType, ., unionWith, (, type, ), ;, return, !, this, ., type, .]
[=, origType, ., unionWith, (, type, ), ;, return, !, this, ., type, ., equals, (, origType, ), ;, }]
[., type, =, origType, ., unionWith, (, type, ), ;, return, !, this, ., type, ., equals, (, origType, )]
[;, return, !, this, ., type, ., equals, (, origType, ), ;, }, @, Override, public, String, toString, (, )]
[., unionWith, (, type, ), ;, return, !, this, ., type, ., equals, (, origType, ), ;, }, @, Override]
[), ;, return, !, this, ., type, ., equals, (, origType, ), ;, }, @, Override, public, String, toString, (]
[;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), +, ": ", +, getType, (, )]
[;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), +, ": ", +, getType, (, )]
[., equals, (, origType, ), ;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), +]
[., type, ., equals, (, origType, ), ;, }, @, Override, public, String, toString, (, ), {, return, getName, (]
[), ;, }, @, Override, public, String, toString, (, ), {, return, getName, (, ), +, ": ", +, getType, (]
[;, }, }, private, static, interface, Action, {, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), ;, }, private]
[+, getType, (, ), ;, }, }, private, static, interface, Action, {, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope]
[+, ": ", +, getType, (, ), ;, }, }, private, static, interface, Action, {, Collection, <, Assignment, >, getAssignments, (]
[+, getType, (, ), ;, }, }, private, static, interface, Action, {, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope]
[;, }, }, private, static, interface, Action, {, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), ;, }, private]
[=, slot, ;, this, ., type, =, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (]
[., slot, =, slot, ;, this, ., type, =, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, .]
[;, this, ., type, =, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, type, )]
[=, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, }, }, private]
[., type, =, type, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, }]
[;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, }, }, private, class, VariableAssignAction]
[;, Preconditions, ., checkNotNull, (, type, ), ;, }, }, private, class, VariableAssignAction, implements, Action, {, private, final, ConcreteSlot, slot]
[., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, type, ), ;, }, }, private, class, VariableAssignAction, implements, Action]
[), ;, Preconditions, ., checkNotNull, (, type, ), ;, }, }, private, class, VariableAssignAction, implements, Action, {, private, final, ConcreteSlot]
[;, }, }, private, class, VariableAssignAction, implements, Action, {, private, final, ConcreteSlot, slot, ;, private, final, Node, expression, ;, VariableAssignAction]
[., checkNotNull, (, type, ), ;, }, }, private, class, VariableAssignAction, implements, Action, {, private, final, ConcreteSlot, slot, ;, private]
[), ;, }, }, private, class, VariableAssignAction, implements, Action, {, private, final, ConcreteSlot, slot, ;, private, final, Node, expression, ;]
[=, slot, ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (]
[., slot, =, slot, ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, .]
[;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, expr, )]
[=, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override]
[., expression, =, expr, ;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }]
[;, Preconditions, ., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection]
[;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope]
[., checkNotNull, (, slot, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment]
[), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, Lists, ., newArrayList, (]
[., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {]
[), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, Lists, ., newArrayList]
[;, }, }, private, class, PropertyAssignAction, implements, Action, {, private, final, Node, receiver, ;, private, final, String, propName, ;, private]
[., newArrayList, (, new, Assignment, (, slot, ,, inferConcreteType, (, scope, ,, expression, ), ), ), ;, }, }, private]
[), ;, }, }, private, class, PropertyAssignAction, implements, Action, {, private, final, Node, receiver, ;, private, final, String, propName, ;]
[,, inferConcreteType, (, scope, ,, expression, ), ), ), ;, }, }, private, class, PropertyAssignAction, implements, Action, {, private, final]
[), ), ;, }, }, private, class, PropertyAssignAction, implements, Action, {, private, final, Node, receiver, ;, private, final, String, propName]
[,, expression, ), ), ), ;, }, }, private, class, PropertyAssignAction, implements, Action, {, private, final, Node, receiver, ;, private]
[), ), ), ;, }, }, private, class, PropertyAssignAction, implements, Action, {, private, final, Node, receiver, ;, private, final, String]
[=, receiver, ;, this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression]
[., receiver, =, receiver, ;, this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;, this]
[;, this, ., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression, =, expr]
[=, receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull]
[., propName, =, receiver, ., getNext, (, ), ., getString, (, ), ;, this, ., expression, =, expr, ;, Preconditions]
[;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, )]
[., getString, (, ), ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, .]
[., getNext, (, ), ., getString, (, ), ;, this, ., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver]
[=, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, ), ;, Preconditions, ., checkNotNull]
[., expression, =, expr, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, ), ;, Preconditions]
[;, Preconditions, ., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, ), ;, Preconditions, ., checkNotNull, (, expr]
[;, Preconditions, ., checkNotNull, (, propName, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection]
[., checkNotNull, (, receiver, ), ;, Preconditions, ., checkNotNull, (, propName, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;]
[), ;, Preconditions, ., checkNotNull, (, propName, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public]
[;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope]
[., checkNotNull, (, propName, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment]
[), ;, Preconditions, ., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, recvType, =, inferConcreteType, (]
[., checkNotNull, (, expr, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {]
[), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, recvType, =, inferConcreteType]
[;, ConcreteType, exprType, =, inferConcreteType, (, scope, ,, expression, ), ;, List, <, Assignment, >, assigns, =, Lists, ., newArrayList]
[,, receiver, ), ;, ConcreteType, exprType, =, inferConcreteType, (, scope, ,, expression, ), ;, List, <, Assignment, >, assigns, =]
[), ;, ConcreteType, exprType, =, inferConcreteType, (, scope, ,, expression, ), ;, List, <, Assignment, >, assigns, =, Lists, .]
[;, List, <, Assignment, >, assigns, =, Lists, ., newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >, prop]
[,, expression, ), ;, List, <, Assignment, >, assigns, =, Lists, ., newArrayList, (, ), ;, for, (, StaticSlot, <]
[), ;, List, <, Assignment, >, assigns, =, Lists, ., newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >]
[;, for, (, StaticSlot, <, ConcreteType, >, prop, :, recvType, ., getPropertySlots, (, propName, ), ), {, assigns, ., add]
[., newArrayList, (, ), ;, for, (, StaticSlot, <, ConcreteType, >, prop, :, recvType, ., getPropertySlots, (, propName, ), )]
[), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), prop, ,, exprType, ), ), ;, }, return]
[., getPropertySlots, (, propName, ), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), prop, ,, exprType]
[), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), prop, ,, exprType, ), ), ;, }]
[;, }, return, assigns, ;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =, false, ;, private, boolean, isCallFunction]
[., add, (, new, Assignment, (, (, ConcreteSlot, ), prop, ,, exprType, ), ), ;, }, return, assigns, ;, }]
[), ;, }, return, assigns, ;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =, false, ;, private, boolean]
[,, exprType, ), ), ;, }, return, assigns, ;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =, false]
[,, exprType, ), ), ;, }, return, assigns, ;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =, false]
[), ), ;, }, return, assigns, ;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =, false, ;, private]
[;, }, }, private, class, FunctionCallBuilder, {, private, boolean, isNewCall, =, false, ;, private, boolean, isCallFunction, =, false, ;, private]
[;, private, boolean, isCallFunction, =, false, ;, private, final, Node, receiver, ;, private, final, Node, firstArgument, ;, private, String, propName]
[;, private, final, Node, receiver, ;, private, final, Node, firstArgument, ;, private, String, propName, =, null, ;, FunctionCallBuilder, (, Node]
[;, FunctionCallBuilder, (, Node, receiver, ,, Node, firstArgument, ), {, this, ., receiver, =, receiver, ;, this, ., firstArgument, =]
[=, receiver, ;, this, ., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this, ., propName]
[., receiver, =, receiver, ;, this, ., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this]
[;, this, ., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this, ., propName, =, propName]
[=, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this, ., propName, =, propName, ;, return, this, ;]
[., firstArgument, =, firstArgument, ;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this, ., propName, =, propName, ;, return]
[;, }, FunctionCallBuilder, setPropName, (, String, propName, ), {, this, ., propName, =, propName, ;, return, this, ;, }, FunctionCallBuilder]
[=, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (]
[., propName, =, propName, ;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (]
[;, return, this, ;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (, isCallFunction, &&]
[;, }, FunctionCallBuilder, setIsNewCall, (, boolean, isNew, ), {, Preconditions, ., checkState, (, !, (, isCallFunction, &&, isNew, ), ,]
[;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall]
[., checkState, (, !, (, isCallFunction, &&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;]
[,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState]
[,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState]
[), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, .]
[&&, isNew, ), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {]
[), ,, "A function call cannot be of the form: new Object.call()", ), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, .]
[), ;, isNewCall, =, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !]
[=, isNew, ;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()"]
[;, return, this, ;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()", ), ;]
[;, }, FunctionCallBuilder, setIsCallFunction, (, ), {, Preconditions, ., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()", ), ;, isCallFunction, =, true]
[;, isCallFunction, =, true, ;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return]
[., checkState, (, !, isNewCall, ,, "A function call cannot be of the form: new Object.call()", ), ;, isCallFunction, =, true, ;, return, this, ;, }, Action, build, (]
[,, "A function call cannot be of the form: new Object.call()", ), ;, isCallFunction, =, true, ;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction]
[,, "A function call cannot be of the form: new Object.call()", ), ;, isCallFunction, =, true, ;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction]
[), ;, isCallFunction, =, true, ;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction, ), {]
[=, true, ;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return, new, NativeCallFunctionCall]
[;, return, this, ;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return, new, NativeCallFunctionCall, (, receiver]
[;, }, Action, build, (, ), {, if, (, isCallFunction, ), {, return, new, NativeCallFunctionCall, (, receiver, ,, propName, ,]
[), {, return, new, NativeCallFunctionCall, (, receiver, ,, propName, ,, firstArgument, ), ;, }, else, {, return, new, FunctionCall, (]
[;, }, else, {, return, new, FunctionCall, (, isNewCall, ,, receiver, ,, propName, ,, firstArgument, ), ;, }, }, }]
[,, propName, ,, firstArgument, ), ;, }, else, {, return, new, FunctionCall, (, isNewCall, ,, receiver, ,, propName, ,, firstArgument]
[,, firstArgument, ), ;, }, else, {, return, new, FunctionCall, (, isNewCall, ,, receiver, ,, propName, ,, firstArgument, ), ;]
[), ;, }, else, {, return, new, FunctionCall, (, isNewCall, ,, receiver, ,, propName, ,, firstArgument, ), ;, }, }]
[;, }, }, }, private, List, <, Assignment, >, getFunctionCallAssignments, (, ConcreteType, recvType, ,, ConcreteType, thisType, ,, List, <, ConcreteType]
[,, receiver, ,, propName, ,, firstArgument, ), ;, }, }, }, private, List, <, Assignment, >, getFunctionCallAssignments, (, ConcreteType, recvType]
[,, propName, ,, firstArgument, ), ;, }, }, }, private, List, <, Assignment, >, getFunctionCallAssignments, (, ConcreteType, recvType, ,, ConcreteType]
[,, firstArgument, ), ;, }, }, }, private, List, <, Assignment, >, getFunctionCallAssignments, (, ConcreteType, recvType, ,, ConcreteType, thisType, ,]
[), ;, }, }, }, private, List, <, Assignment, >, getFunctionCallAssignments, (, ConcreteType, recvType, ,, ConcreteType, thisType, ,, List, <]
[;, for, (, ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {, assigns, ., add, (, new, Assignment, (]
[., newArrayList, (, ), ;, for, (, ConcreteFunctionType, fType, :, recvType, ., getFunctions, (, ), ), {, assigns, ., add]
[), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, )]
[., getFunctions, (, ), ), {, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (]
[;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, ), )]
[., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getCallSlot, (, ), ,, fType, ), ), ;, assigns]
[), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, )]
[,, fType, ), ), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, )]
[,, fType, ), ), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, )]
[., getCallSlot, (, ), ,, fType, ), ), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType]
[), ), ;, assigns, ., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType]
[;, for, (, int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;, ++, i, ), {]
[., add, (, new, Assignment, (, (, ConcreteSlot, ), fType, ., getThisSlot, (, ), ,, thisType, ), ), ;, for]
[), ;, for, (, int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;, ++, i, )]
[,, thisType, ), ), ;, for, (, int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;]
[,, thisType, ), ), ;, for, (, int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;]
[., getThisSlot, (, ), ,, thisType, ), ), ;, for, (, int, i, =, 0, ;, i, <, argTypes, .]
[), ), ;, for, (, int, i, =, 0, ;, i, <, argTypes, ., size, (, ), ;, ++, i]
[;, i, <, argTypes, ., size, (, ), ;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType]
[;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (]
[<, argTypes, ., size, (, ), ;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot]
[;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (]
[., size, (, ), ;, ++, i, ), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i]
[), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (, variable, !=, null]
[), {, ConcreteSlot, variable, =, (, ConcreteSlot, ), fType, ., getParameterSlot, (, i, ), ;, if, (, variable, !=, null]
[;, if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, ., get]
[;, if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, ., get]
[., getParameterSlot, (, i, ), ;, if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (]
[), ;, if, (, variable, !=, null, ), {, assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, .]
[), {, assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, ., get, (, i, ), ), ), ;]
[!=, null, ), {, assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, ., get, (, i, ), )]
[), {, assigns, ., add, (, new, Assignment, (, variable, ,, argTypes, ., get, (, i, ), ), ), ;]
[;, }, }, }, return, assigns, ;, }, private, class, ExternFunctionCall, implements, Action, {, private, Node, receiver, ;, private, ConcreteType]
[., add, (, new, Assignment, (, variable, ,, argTypes, ., get, (, i, ), ), ), ;, }, }, }]
[), ;, }, }, }, return, assigns, ;, }, private, class, ExternFunctionCall, implements, Action, {, private, Node, receiver, ;, private]
[,, argTypes, ., get, (, i, ), ), ), ;, }, }, }, return, assigns, ;, }, private, class, ExternFunctionCall]
[), ), ;, }, }, }, return, assigns, ;, }, private, class, ExternFunctionCall, implements, Action, {, private, Node, receiver, ;]
[., get, (, i, ), ), ), ;, }, }, }, return, assigns, ;, }, private, class, ExternFunctionCall, implements, Action]
[), ), ), ;, }, }, }, return, assigns, ;, }, private, class, ExternFunctionCall, implements, Action, {, private, Node, receiver]
[;, }, private, class, ExternFunctionCall, implements, Action, {, private, Node, receiver, ;, private, ConcreteType, thisType, ;, private, List, <, ConcreteType]
[=, receiver, ;, this, ., thisType, =, thisType, ;, this, ., argTypes, =, argTypes, ;, }, @, Override, public, Collection]
[., receiver, =, receiver, ;, this, ., thisType, =, thisType, ;, this, ., argTypes, =, argTypes, ;, }, @, Override]
[;, this, ., thisType, =, thisType, ;, this, ., argTypes, =, argTypes, ;, }, @, Override, public, Collection, <, Assignment]
[=, thisType, ;, this, ., argTypes, =, argTypes, ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope]
[., thisType, =, thisType, ;, this, ., argTypes, =, argTypes, ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments]
[;, this, ., argTypes, =, argTypes, ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, )]
[=, argTypes, ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, getFunctionCallAssignments, (]
[., argTypes, =, argTypes, ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, return, getFunctionCallAssignments, (, inferConcreteType, (]
[;, }, }, private, class, FunctionCall, implements, Action, {, private, final, boolean, isNewCall, ;, private, final, Node, receiver, ;, private]
[,, thisType, ,, argTypes, ), ;, }, }, private, class, FunctionCall, implements, Action, {, private, final, boolean, isNewCall, ;, private]
[,, receiver, ), ,, thisType, ,, argTypes, ), ;, }, }, private, class, FunctionCall, implements, Action, {, private, final, boolean]
[), ,, thisType, ,, argTypes, ), ;, }, }, private, class, FunctionCall, implements, Action, {, private, final, boolean, isNewCall, ;]
[,, argTypes, ), ;, }, }, private, class, FunctionCall, implements, Action, {, private, final, boolean, isNewCall, ;, private, final, Node]
[), ;, }, }, private, class, FunctionCall, implements, Action, {, private, final, boolean, isNewCall, ;, private, final, Node, receiver, ;]
[=, isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument]
[., isNewCall, =, isNewCall, ;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument]
[;, this, ., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions]
[=, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver]
[., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull]
[;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;]
[=, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public]
[., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @]
[;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <]
[=, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (]
[., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >]
[;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, ConcreteType, .]
[., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {]
[), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, ConcreteType]
[;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=, null, ), {, thisType, =]
[., NONE, ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, propName, !=, null, ), {]
[;, if, (, propName, !=, null, ), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName, )]
[,, receiver, ), ;, if, (, propName, !=, null, ), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType]
[), ;, if, (, propName, !=, null, ), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName]
[), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (, recvType, .]
[!=, null, ), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (]
[), {, thisType, =, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (, recvType, .]
[=, recvType, ;, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (, recvType, ., isAll, (, )]
[;, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, if, (, recvType, ., isAll, (, ), ), {]
[=, thisType, ., getPropertyType, (, propName, ), ;, }, if, (, recvType, ., isAll, (, ), ), {, throw, new]
[;, }, if, (, recvType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }, if]
[., getPropertyType, (, propName, ), ;, }, if, (, recvType, ., isAll, (, ), ), {, throw, new, AssertionError, (]
[), ;, }, if, (, recvType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }]
[), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }, if, (, isNewCall, ), {, thisType, =, ConcreteType, ., NONE]
[., isAll, (, ), ), {, throw, new, AssertionError, (, "Found call on all type, which makes tighten types useless.", ), ;, }, if, (, isNewCall, ), {, thisType]
[;, }, if, (, isNewCall, ), {, thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, .]
[), ;, }, if, (, isNewCall, ), {, thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType]
[), {, thisType, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {]
[=, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =, thisType]
[;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =, thisType, ., unionWith, (, instType]
[., NONE, ;, for, (, ConcreteInstanceType, instType, :, recvType, ., getFunctionInstanceTypes, (, ), ), {, thisType, =, thisType, ., unionWith]
[), {, thisType, =, thisType, ., unionWith, (, instType, ), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType]
[., getFunctionInstanceTypes, (, ), ), {, thisType, =, thisType, ., unionWith, (, instType, ), ;, }, boolean, added, =, allInstantiatedTypes]
[=, thisType, ., unionWith, (, instType, ), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType, ), ;, if]
[;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType, ), ;, if, (, added, ), {, typeIntersectionMemos, ., clear]
[., unionWith, (, instType, ), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType, ), ;, if, (, added]
[), ;, }, boolean, added, =, allInstantiatedTypes, ., add, (, thisType, ), ;, if, (, added, ), {, typeIntersectionMemos, .]
[;, if, (, added, ), {, typeIntersectionMemos, ., clear, (, ), ;, }, }, List, <, ConcreteType, >, argTypes, =]
[., add, (, thisType, ), ;, if, (, added, ), {, typeIntersectionMemos, ., clear, (, ), ;, }, }, List]
[), ;, if, (, added, ), {, typeIntersectionMemos, ., clear, (, ), ;, }, }, List, <, ConcreteType, >, argTypes]
[), {, typeIntersectionMemos, ., clear, (, ), ;, }, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (]
[;, }, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =]
[., clear, (, ), ;, }, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for]
[;, for, (, Node, arg, =, firstArgument, ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), )]
[., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ;, arg, !=, null, ;, arg, =, arg, .]
[;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (]
[;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, )]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,]
[;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, )]
[=, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;]
[), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,]
[., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return]
[;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class, NativeCallFunctionCall, implements, Action, {]
[., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes]
[), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class, NativeCallFunctionCall, implements, Action]
[,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class]
[), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class, NativeCallFunctionCall, implements]
[;, }, }, private, class, NativeCallFunctionCall, implements, Action, {, private, final, Node, receiver, ;, private, final, String, propName, ;, private]
[,, thisType, ,, argTypes, ), ;, }, }, private, class, NativeCallFunctionCall, implements, Action, {, private, final, Node, receiver, ;, private]
[,, argTypes, ), ;, }, }, private, class, NativeCallFunctionCall, implements, Action, {, private, final, Node, receiver, ;, private, final, String]
[), ;, }, }, private, class, NativeCallFunctionCall, implements, Action, {, private, final, Node, receiver, ;, private, final, String, propName, ;]
[=, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver]
[., receiver, =, receiver, ;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull]
[;, this, ., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;]
[=, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public]
[., propName, =, propName, ;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @]
[;, this, ., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <]
[=, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (]
[., firstArgument, =, firstArgument, ;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >]
[;, Preconditions, ., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope]
[;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (, firstArgument]
[., checkNotNull, (, receiver, ), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {]
[), ;, }, @, Override, public, Collection, <, Assignment, >, getAssignments, (, ConcreteScope, scope, ), {, ConcreteType, thisType, =, (]
[;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType]
[?, inferConcreteType, (, scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType]
[), ?, inferConcreteType, (, scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =]
[!=, null, ), ?, inferConcreteType, (, scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType]
[), ?, inferConcreteType, (, scope, ,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =]
[:, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if]
[,, firstArgument, ), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver]
[), :, getTopScope, (, ), ., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;]
[;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType]
[., getTypeOfThis, (, ), ;, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType]
[;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {, recvType]
[,, receiver, ), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, )]
[), ;, if, (, recvType, instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {]
[), {, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType, >, argTypes, =, Lists, .]
[&&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {, recvType, =, thisType, ., getPropertyType, (, propName]
[instanceof, ConcreteInstanceType, &&, (, (, ConcreteInstanceType, ), recvType, ), ., isFunctionPrototype, (, ), ), {, recvType, =, thisType, ., getPropertyType]
[), {, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType, >, argTypes, =, Lists, .]
[., isFunctionPrototype, (, ), ), {, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType, >]
[), ., isFunctionPrototype, (, ), ), {, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType]
[), ., isFunctionPrototype, (, ), ), {, recvType, =, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType]
[=, thisType, ., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, )]
[;, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument]
[., getPropertyType, (, propName, ), ;, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for]
[), ;, }, List, <, ConcreteType, >, argTypes, =, Lists, ., newArrayList, (, ), ;, for, (, Node, arg, =]
[;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;, arg, !=, null, ;, arg, =, arg, .]
[., newArrayList, (, ), ;, for, (, Node, arg, =, firstArgument, ., getNext, (, ), ;, arg, !=, null, ;]
[;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (]
[., getNext, (, ), ;, arg, !=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, .]
[;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, )]
[!=, null, ;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,]
[;, arg, =, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, )]
[=, arg, ., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;]
[), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,]
[., getNext, (, ), ), {, argTypes, ., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return]
[;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class, CreateScope, extends, AbstractShallowCallback, {]
[., add, (, inferConcreteType, (, scope, ,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes]
[), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class, CreateScope, extends, AbstractShallowCallback]
[,, arg, ), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class]
[), ), ;, }, return, getFunctionCallAssignments, (, recvType, ,, thisType, ,, argTypes, ), ;, }, }, private, class, CreateScope, extends]
[;, }, }, private, class, CreateScope, extends, AbstractShallowCallback, {, private, final, ConcreteScope, scope, ;, private, final, boolean, inExterns, ;, CreateScope]
[,, thisType, ,, argTypes, ), ;, }, }, private, class, CreateScope, extends, AbstractShallowCallback, {, private, final, ConcreteScope, scope, ;, private]
[,, argTypes, ), ;, }, }, private, class, CreateScope, extends, AbstractShallowCallback, {, private, final, ConcreteScope, scope, ;, private, final, boolean]
[), ;, }, }, private, class, CreateScope, extends, AbstractShallowCallback, {, private, final, ConcreteScope, scope, ;, private, final, boolean, inExterns, ;]
[=, scope, ;, this, ., inExterns, =, inExterns, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node]
[., scope, =, scope, ;, this, ., inExterns, =, inExterns, ;, }, @, Override, public, void, visit, (, NodeTraversal, t]
[;, this, ., inExterns, =, inExterns, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,]
[=, inExterns, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {]
[., inExterns, =, inExterns, ;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[), {, case, Token, ., VAR, :, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;]
[., getType, (, ), ), {, case, Token, ., VAR, :, Node, name, ;, for, (, name, =, n, .]
[:, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =]
[., VAR, :, Node, name, ;, for, (, name, =, n, ., getFirstChild, (, ), ;, name, !=, null, ;]
[=, n, ., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {]
[;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {, scope]
[., getFirstChild, (, ), ;, name, !=, null, ;, name, =, name, ., getNext, (, ), ), {, if, (]
[;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (, name]
[!=, null, ;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot]
[;, name, =, name, ., getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (, name]
[=, name, ., getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (, name, ., getString]
[), {, if, (, inExterns, ), {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ,, createType]
[., getNext, (, ), ), {, if, (, inExterns, ), {, scope, ., declareSlot, (, name, ., getString, (, )]
[), {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ,, createType, (, name, ,, scope, )]
[;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if, (, name]
[., declareSlot, (, name, ., getString, (, ), ,, n, ,, createType, (, name, ,, scope, ), ), ;, }]
[,, n, ,, createType, (, name, ,, scope, ), ), ;, }, else, {, scope, ., declareSlot, (, name, .]
[., getString, (, ), ,, n, ,, createType, (, name, ,, scope, ), ), ;, }, else, {, scope, .]
[,, createType, (, name, ,, scope, ), ), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (]
[), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if, (]
[,, scope, ), ), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, )]
[), ), ;, }, else, {, scope, ., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if]
[;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (, name, ,, name, .]
[., declareSlot, (, name, ., getString, (, ), ,, n, ), ;, if, (, name, ., getFirstChild, (, ), !=]
[,, n, ), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (, name]
[., getString, (, ), ,, n, ), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions]
[), ;, if, (, name, ., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (, name, ,, name]
[), {, addActions, (, createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,, n, ), ), ;, }, }]
[!=, null, ), {, addActions, (, createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,, n, ), ), ;]
[., getFirstChild, (, ), !=, null, ), {, addActions, (, createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,]
[), {, addActions, (, createAssignmentActions, (, name, ,, name, ., getFirstChild, (, ), ,, n, ), ), ;, }, }]
[;, }, }, }, break, ;, case, Token, ., GETPROP, :, if, (, inExterns, ), {, ConcreteType, type, =, inferConcreteType]
[), ;, }, }, }, break, ;, case, Token, ., GETPROP, :, if, (, inExterns, ), {, ConcreteType, type, =]
[,, name, ., getFirstChild, (, ), ,, n, ), ), ;, }, }, }, break, ;, case, Token, ., GETPROP]
[,, n, ), ), ;, }, }, }, break, ;, case, Token, ., GETPROP, :, if, (, inExterns, ), {]
[., getFirstChild, (, ), ,, n, ), ), ;, }, }, }, break, ;, case, Token, ., GETPROP, :, if]
[), ), ;, }, }, }, break, ;, case, Token, ., GETPROP, :, if, (, inExterns, ), {, ConcreteType, type]
[:, if, (, inExterns, ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (]
[., GETPROP, :, if, (, inExterns, ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;]
[), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (, type, ., isNone, (]
[;, if, (, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType, (, getTopScope, (]
[,, n, ), ;, if, (, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType]
[), ;, if, (, type, ., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType, (, getTopScope]
[), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType, (, getTopScope, (, ), ,, n, ., getFirstChild, (, ), )]
[., isNone, (, ), ), {, ConcreteScope, scope, =, (, ConcreteScope, ), inferConcreteType, (, getTopScope, (, ), ,, n, .]
[;, if, (, scope, !=, null, ), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if]
[;, if, (, scope, !=, null, ), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if]
[., getScope, (, ), ;, if, (, scope, !=, null, ), {, type, =, createType, (, n, ., getJSType, (]
[,, n, ., getFirstChild, (, ), ), ., getScope, (, ), ;, if, (, scope, !=, null, ), {, type]
[), ., getScope, (, ), ;, if, (, scope, !=, null, ), {, type, =, createType, (, n, ., getJSType]
[., getFirstChild, (, ), ), ., getScope, (, ), ;, if, (, scope, !=, null, ), {, type, =, createType]
[), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (, type, ., isNone, (, )]
[!=, null, ), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (, type, ., isNone]
[), {, type, =, createType, (, n, ., getJSType, (, ), ), ;, if, (, type, ., isNone, (, )]
[=, createType, (, n, ., getJSType, (, ), ), ;, if, (, type, ., isNone, (, ), ||, type, .]
[;, if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, type]
[), ;, if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }]
[., getJSType, (, ), ), ;, if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), )]
[), {, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n, ., getLastChild, (, )]
[||, type, ., isAll, (, ), ), {, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode]
[., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, type, =, createUnionWithSubTypes, (, type]
[), {, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n, ., getLastChild, (, )]
[., isAll, (, ), ), {, break, ;, }, type, =, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n]
[=, createUnionWithSubTypes, (, type, ), ;, Node, nameNode, =, n, ., getLastChild, (, ), ;, scope, ., declareSlot, (, nameNode]
[;, Node, nameNode, =, n, ., getLastChild, (, ), ;, scope, ., declareSlot, (, nameNode, ., getString, (, ), ,]
[), ;, Node, nameNode, =, n, ., getLastChild, (, ), ;, scope, ., declareSlot, (, nameNode, ., getString, (, )]
[;, scope, ., declareSlot, (, nameNode, ., getString, (, ), ,, n, ,, type, ), ;, }, }, }, break]
[., getLastChild, (, ), ;, scope, ., declareSlot, (, nameNode, ., getString, (, ), ,, n, ,, type, ), ;]
[;, }, }, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), )]
[., declareSlot, (, nameNode, ., getString, (, ), ,, n, ,, type, ), ;, }, }, }, break, ;, case]
[,, n, ,, type, ), ;, }, }, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, .]
[., getString, (, ), ,, n, ,, type, ), ;, }, }, }, break, ;, case, Token, ., FUNCTION, :]
[,, type, ), ;, }, }, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (]
[), ;, }, }, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, )]
[:, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, if, (, !, n, ., getJSType, (, ), .]
[., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, if, (, !, n, ., getJSType, (]
[), {, if, (, !, n, ., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction]
[., isFunctionDeclaration, (, n, ), ), {, if, (, !, n, ., getJSType, (, ), ., isNoObjectType, (, ), )]
[), ), {, if, (, !, n, ., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =]
[), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;, scope, ., declareSlot, (, n, ., getFirstChild, (]
[), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;, scope, ., declareSlot, (, n, ., getFirstChild, (]
[., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;, scope, ., declareSlot, (]
[., getJSType, (, ), ., isNoObjectType, (, ), ), {, ConcreteFunctionType, type, =, createConcreteFunction, (, n, ,, scope, ), ;]
[;, scope, ., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;]
[,, scope, ), ;, scope, ., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,]
[), ;, scope, ., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, )]
[;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes, ., add, (, type, .]
[., declareSlot, (, n, ., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, if, (]
[,, n, ,, type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes]
[., getString, (, ), ,, n, ,, type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=]
[., getFirstChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, if, (, inExterns, &&, type, .]
[,, type, ), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes, ., add]
[), ;, if, (, inExterns, &&, type, ., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes, ., add, (, type]
[), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case, Token]
[&&, type, ., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), )]
[), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case, Token]
[!=, null, ), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;]
[., getInstanceType, (, ), !=, null, ), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), ), ;, }]
[), {, allInstantiatedTypes, ., add, (, type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case, Token]
[;, }, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;]
[., add, (, type, ., getInstanceType, (, ), ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :]
[), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, )]
[., getInstanceType, (, ), ), ;, }, }, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n]
[:, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, inExterns, ), {, ConcreteScope, scope, ;, if, (]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, inExterns, ), {, ConcreteScope, scope, ;]
[;, if, (, inExterns, ), {, ConcreteScope, scope, ;, if, (, lhs, ., isGetProp, (, ), ), {, ConcreteType, type]
[., getFirstChild, (, ), ;, if, (, inExterns, ), {, ConcreteScope, scope, ;, if, (, lhs, ., isGetProp, (, )]
[), {, ConcreteScope, scope, ;, if, (, lhs, ., isGetProp, (, ), ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope]
[), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, lhs, ., getFirstChild, (, ), ), ;, scope, =]
[., isGetProp, (, ), ), {, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, lhs, ., getFirstChild, (, )]
[;, scope, =, (, ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {, scope, =, getTopScope, (, )]
[,, lhs, ., getFirstChild, (, ), ), ;, scope, =, (, ConcreteScope, ), type, ., getScope, (, ), ;, }]
[), ;, scope, =, (, ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {, scope, =, getTopScope, (]
[., getFirstChild, (, ), ), ;, scope, =, (, ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {]
[=, (, ConcreteScope, ), type, ., getScope, (, ), ;, }, else, {, scope, =, getTopScope, (, ), ;, }]
[;, }, else, {, scope, =, getTopScope, (, ), ;, }, if, (, scope, ==, null, ), break, ;, ConcreteType]
[;, }, else, {, scope, =, getTopScope, (, ), ;, }, if, (, scope, ==, null, ), break, ;, ConcreteType]
[., getScope, (, ), ;, }, else, {, scope, =, getTopScope, (, ), ;, }, if, (, scope, ==, null]
[=, getTopScope, (, ), ;, }, if, (, scope, ==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope]
[;, }, if, (, scope, ==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n]
[), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (, type, ., isNone]
[==, null, ), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (, type]
[), break, ;, ConcreteType, type, =, inferConcreteType, (, getTopScope, (, ), ,, n, ), ;, if, (, type, ., isNone]
[;, if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, if]
[,, n, ), ;, if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break]
[), ;, if, (, type, ., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }]
[), {, break, ;, }, if, (, type, ., isFunction, (, ), ), {, JSType, lhsType, =, lhs, ., getJSType]
[||, type, ., isAll, (, ), ), {, break, ;, }, if, (, type, ., isFunction, (, ), ), {]
[., isNone, (, ), ||, type, ., isAll, (, ), ), {, break, ;, }, if, (, type, ., isFunction]
[), {, break, ;, }, if, (, type, ., isFunction, (, ), ), {, JSType, lhsType, =, lhs, ., getJSType]
[., isAll, (, ), ), {, break, ;, }, if, (, type, ., isFunction, (, ), ), {, JSType, lhsType]
[), {, JSType, lhsType, =, lhs, ., getJSType, (, ), ;, if, (, lhsType, ==, null, ), {, break, ;]
[., isFunction, (, ), ), {, JSType, lhsType, =, lhs, ., getJSType, (, ), ;, if, (, lhsType, ==, null]
[;, if, (, lhsType, ==, null, ), {, break, ;, }, FunctionType, funType, =, lhsType, ., restrictByNotNullOrUndefined, (, ), .]
[., getJSType, (, ), ;, if, (, lhsType, ==, null, ), {, break, ;, }, FunctionType, funType, =, lhsType, .]
[), {, break, ;, }, FunctionType, funType, =, lhsType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[==, null, ), {, break, ;, }, FunctionType, funType, =, lhsType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;]
[), {, break, ;, }, FunctionType, funType, =, lhsType, ., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (]
[;, if, (, funType, ==, null, ), {, break, ;, }, ConcreteType, retType, =, createType, (, funType, ., getReturnType, (]
[., toMaybeFunctionType, (, ), ;, if, (, funType, ==, null, ), {, break, ;, }, ConcreteType, retType, =, createType, (]
[., restrictByNotNullOrUndefined, (, ), ., toMaybeFunctionType, (, ), ;, if, (, funType, ==, null, ), {, break, ;, }, ConcreteType]
[), {, break, ;, }, ConcreteType, retType, =, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes]
[==, null, ), {, break, ;, }, ConcreteType, retType, =, createType, (, funType, ., getReturnType, (, ), ), ;, retType]
[), {, break, ;, }, ConcreteType, retType, =, createType, (, funType, ., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes]
[;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =, type, ., toFunction, (, ), ., getReturnSlot, (, )]
[), ;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =, type, ., toFunction, (, ), ., getReturnSlot, (]
[., getReturnType, (, ), ), ;, retType, =, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =, type, ., toFunction, (]
[=, createUnionWithSubTypes, (, retType, ), ;, ConcreteType, newret, =, type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType]
[;, ConcreteType, newret, =, type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (]
[), ;, ConcreteType, newret, =, type, ., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith]
[;, (, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,]
[., unionWith, (, retType, ), ;, (, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType]
[., getType, (, ), ., unionWith, (, retType, ), ;, (, (, ConcreteScope, ), type, ., getScope, (, ), )]
[., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, ), ;, (, (, ConcreteScope, ), type, .]
[., toFunction, (, ), ., getReturnSlot, (, ), ., getType, (, ), ., unionWith, (, retType, ), ;, (, (]
[), ;, (, (, ConcreteScope, ), type, ., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n]
[;, }, scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ,, type, )]
[., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, ., declareSlot, (, lhs, ., getLastChild]
[), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, ., declareSlot, (, lhs, .]
[), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, ., declareSlot, (, lhs, .]
[., getScope, (, ), ), ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, .]
[,, n, ,, newret, ), ;, }, scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, )]
[., RETURN_SLOT_NAME, ,, n, ,, newret, ), ;, }, scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString]
[,, newret, ), ;, }, scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n]
[), ;, }, scope, ., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ,, type]
[;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,, n, ), ), ;]
[., declareSlot, (, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, }, else]
[,, n, ,, type, ), ;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, )]
[., getString, (, ), ,, n, ,, type, ), ;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,, n]
[., getLastChild, (, ), ., getString, (, ), ,, n, ,, type, ), ;, }, else, {, addActions, (, createAssignmentActions]
[,, type, ), ;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,, n]
[), ;, }, else, {, addActions, (, createAssignmentActions, (, lhs, ,, n, ., getLastChild, (, ), ,, n, ), )]
[;, }, break, ;, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild]
[), ;, }, break, ;, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver, =, n, .]
[,, n, ., getLastChild, (, ), ,, n, ), ), ;, }, break, ;, case, Token, ., NEW, :, case]
[,, n, ), ), ;, }, break, ;, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver]
[., getLastChild, (, ), ,, n, ), ), ;, }, break, ;, case, Token, ., NEW, :, case, Token, .]
[), ), ;, }, break, ;, case, Token, ., NEW, :, case, Token, ., CALL, :, Node, receiver, =, n]
[:, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, receiver, ., isGetProp]
[., NEW, :, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, receiver]
[:, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, receiver, ., isGetProp, (, ), ), {, Node]
[., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, receiver, ., isGetProp, (, ), )]
[;, if, (, receiver, ., isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if]
[., getFirstChild, (, ), ;, if, (, receiver, ., isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild]
[), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if, (, "call", ., equals, (, first, ., getNext]
[., isGetProp, (, ), ), {, Node, first, =, receiver, ., getFirstChild, (, ), ;, if, (, "call", ., equals]
[;, if, (, "call", ., equals, (, first, ., getNext, (, ), ., getString, (, ), ), ), {, if]
[., getFirstChild, (, ), ;, if, (, "call", ., equals, (, first, ., getNext, (, ), ., getString, (, )]
[), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, .]
[., equals, (, first, ., getNext, (, ), ., getString, (, ), ), ), {, if, (, first, ., isGetProp]
[), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver]
[., getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {, addAction, (, new, FunctionCallBuilder]
[., getNext, (, ), ., getString, (, ), ), ), {, if, (, first, ., isGetProp, (, ), ), {]
[), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName, (, first, .]
[., isGetProp, (, ), ), {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), .]
[;, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setIsCallFunction, (]
[), ;, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setIsCallFunction]
[., build, (, ), ), ;, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (]
[., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,]
[., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ), ., setIsCallFunction, (]
[,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), .]
[), ., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ), ., setIsCallFunction]
[., getNext, (, ), ), ., setPropName, (, first, ., getFirstChild, (, ), ., getNext, (, ), ., getString, (]
[), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (, new, FunctionCallBuilder, (, first]
[., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, else, {, addAction, (]
[., getNext, (, ), ., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }]
[., getFirstChild, (, ), ., getNext, (, ), ., getString, (, ), ), ., setIsCallFunction, (, ), ., build, (]
[;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), ., setPropName]
[), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext, (, ), ), .]
[., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, first, ,, receiver, ., getNext]
[., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, first]
[,, receiver, ., getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else]
[), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (]
[., getNext, (, ), ), ., setIsCallFunction, (, ), ., build, (, ), ), ;, }, }, else, {, addAction]
[;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), ), ., setIsNewCall]
[), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext, (, ), ), .]
[., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,, receiver, ., getNext]
[., setPropName, (, first, ., getNext, (, ), ., getString, (, ), ), ., build, (, ), ), ;, }]
[,, receiver, ., getNext, (, ), ), ., setPropName, (, first, ., getNext, (, ), ., getString, (, ), )]
[), ., setPropName, (, first, ., getNext, (, ), ., getString, (, ), ), ., build, (, ), ), ;]
[., getNext, (, ), ), ., setPropName, (, first, ., getNext, (, ), ., getString, (, ), ), ., build]
[), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (, receiver, ,, receiver, .]
[., getString, (, ), ), ., build, (, ), ), ;, }, }, else, {, addAction, (, new, FunctionCallBuilder, (]
[., getNext, (, ), ., getString, (, ), ), ., build, (, ), ), ;, }, }, else, {, addAction]
[;, }, break, ;, case, Token, ., NAME, :, if, (, parent, ., isCatch, (, ), &&, parent, ., getFirstChild]
[), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, ., isCatch, (, ), &&, parent, .]
[., build, (, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, ., isCatch, (]
[., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case, Token]
[,, receiver, ., getNext, (, ), ), ., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, )]
[), ., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case]
[., getNext, (, ), ), ., setIsNewCall, (, n, ., isNew, (, ), ), ., build, (, ), ), ;]
[), ., build, (, ), ), ;, }, break, ;, case, Token, ., NAME, :, if, (, parent, ., isCatch]
[., isNew, (, ), ), ., build, (, ), ), ;, }, break, ;, case, Token, ., NAME, :, if]
[:, if, (, parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, scope, .]
[., NAME, :, if, (, parent, ., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {]
[), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (]
[&&, parent, ., getFirstChild, (, ), ==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,]
[., isCatch, (, ), &&, parent, ., getFirstChild, (, ), ==, n, ), {, scope, ., declareSlot, (, n, .]
[), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (]
[==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (]
[., getFirstChild, (, ), ==, n, ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,]
[), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (]
[;, }, break, ;, case, Token, ., RETURN, :, if, (, n, ., getFirstChild, (, ), !=, null, ), {]
[., declareSlot, (, n, ., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (, ), ., getType]
[,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (, ), ., getType, (, "Error", ), ), ., toInstance, (, )]
[., getString, (, ), ,, n, ,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (, ), ., getType, (, "Error", ), )]
[,, createUnionWithSubTypes, (, createType, (, getTypeRegistry, (, ), ., getType, (, "Error", ), ), ., toInstance, (, ), ), )]
[), ;, }, break, ;, case, Token, ., RETURN, :, if, (, n, ., getFirstChild, (, ), !=, null, )]
[), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (, n, ., getFirstChild, (, ), !=, null]
[., toInstance, (, ), ), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (, n, ., getFirstChild]
[), ., toInstance, (, ), ), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (, n, .]
[., getType, (, "Error", ), ), ., toInstance, (, ), ), ), ;, }, break, ;, case, Token, ., RETURN]
[), ), ., toInstance, (, ), ), ), ;, }, break, ;, case, Token, ., RETURN, :, if, (, n]
[:, if, (, n, ., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, )]
[., RETURN, :, if, (, n, ., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (, (]
[), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ), ,, n]
[!=, null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, )]
[., getFirstChild, (, ), !=, null, ), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (]
[), {, addAction, (, new, VariableAssignAction, (, (, ConcreteSlot, ), scope, ., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ), ,, n]
[;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (, n, ), ;, if, (, actions, !=]
[), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (, n, ), ;, if, (, actions]
[,, n, ., getFirstChild, (, ), ), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions]
[,, n, ., getFirstChild, (, ), ), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions]
[., getOwnSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ), ,, n, ., getFirstChild, (, ), ), ), ;, }, break, ;, }]
[), ,, n, ., getFirstChild, (, ), ), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =]
[., RETURN_SLOT_NAME, ), ,, n, ., getFirstChild, (, ), ), ), ;, }, break, ;, }, Collection, <, Action, >]
[), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (, n, ), ;, if, (]
[., getFirstChild, (, ), ), ), ;, }, break, ;, }, Collection, <, Action, >, actions, =, getImplicitActions, (, n]
[;, if, (, actions, !=, null, ), {, for, (, Action, action, :, actions, ), {, addAction, (, action, )]
[), ;, if, (, actions, !=, null, ), {, for, (, Action, action, :, actions, ), {, addAction, (, action]
[), {, for, (, Action, action, :, actions, ), {, addAction, (, action, ), ;, }, }, }, private, void]
[!=, null, ), {, for, (, Action, action, :, actions, ), {, addAction, (, action, ), ;, }, }, }]
[), {, for, (, Action, action, :, actions, ), {, addAction, (, action, ), ;, }, }, }, private, void]
[), {, addAction, (, action, ), ;, }, }, }, private, void, addAction, (, Action, action, ), {, Preconditions, .]
[;, }, }, }, private, void, addAction, (, Action, action, ), {, Preconditions, ., checkState, (, !, inExterns, ,, "Unexpected action in externs."]
[), ;, }, }, }, private, void, addAction, (, Action, action, ), {, Preconditions, ., checkState, (, !, inExterns, ,]
[;, scope, ., addAction, (, action, ), ;, }, private, void, addActions, (, List, <, Action, >, actions, ), {]
[., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;, scope, ., addAction, (, action, ), ;, }, private, void, addActions]
[,, "Unexpected action in externs.", ), ;, scope, ., addAction, (, action, ), ;, }, private, void, addActions, (, List, <, Action, >]
[,, "Unexpected action in externs.", ), ;, scope, ., addAction, (, action, ), ;, }, private, void, addActions, (, List, <, Action, >]
[), ;, scope, ., addAction, (, action, ), ;, }, private, void, addActions, (, List, <, Action, >, actions, )]
[;, }, private, void, addActions, (, List, <, Action, >, actions, ), {, Preconditions, ., checkState, (, !, inExterns, ,]
[., addAction, (, action, ), ;, }, private, void, addActions, (, List, <, Action, >, actions, ), {, Preconditions, .]
[), ;, }, private, void, addActions, (, List, <, Action, >, actions, ), {, Preconditions, ., checkState, (, !, inExterns]
[;, for, (, Action, action, :, actions, ), {, scope, ., addAction, (, action, ), ;, }, }, private, List]
[., checkState, (, !, inExterns, ,, "Unexpected action in externs.", ), ;, for, (, Action, action, :, actions, ), {, scope, ., addAction]
[,, "Unexpected action in externs.", ), ;, for, (, Action, action, :, actions, ), {, scope, ., addAction, (, action, ), ;, }]
[,, "Unexpected action in externs.", ), ;, for, (, Action, action, :, actions, ), {, scope, ., addAction, (, action, ), ;, }]
[), ;, for, (, Action, action, :, actions, ), {, scope, ., addAction, (, action, ), ;, }, }, private]
[), {, scope, ., addAction, (, action, ), ;, }, }, private, List, <, Action, >, createAssignmentActions, (, Node, lhs]
[;, }, }, private, List, <, Action, >, createAssignmentActions, (, Node, lhs, ,, Node, rhs, ,, Node, parent, ), {]
[., addAction, (, action, ), ;, }, }, private, List, <, Action, >, createAssignmentActions, (, Node, lhs, ,, Node, rhs]
[), ;, }, }, private, List, <, Action, >, createAssignmentActions, (, Node, lhs, ,, Node, rhs, ,, Node, parent, )]
[), {, case, Token, ., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString]
[., getType, (, ), ), {, case, Token, ., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot]
[:, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, .]
[., NAME, :, ConcreteSlot, var, =, (, ConcreteSlot, ), scope, ., getSlot, (, lhs, ., getString, (, ), ), ;]
[;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists]
[;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists]
[., getSlot, (, lhs, ., getString, (, ), ), ;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,]
[), ;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return]
[., getString, (, ), ), ;, Preconditions, ., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (]
[;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), ), ;, case, Token]
[., checkState, (, var, !=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists, ., <]
[,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction]
[!=, null, ,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (]
[,, "Type tightener could not find variable with name %s", ,, lhs, ., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction]
[,, lhs, ., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var]
[), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), ), ;, case]
[., getString, (, ), ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs]
[;, case, Token, ., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return, Lists, ., <, Action]
[., <, Action, >, newArrayList, (, new, VariableAssignAction, (, var, ,, rhs, ), ), ;, case, Token, ., GETPROP, :]
[), ;, case, Token, ., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return, Lists, ., <]
[,, rhs, ), ), ;, case, Token, ., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return]
[), ), ;, case, Token, ., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return, Lists, .]
[:, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction]
[., GETPROP, :, Node, receiver, =, lhs, ., getFirstChild, (, ), ;, return, Lists, ., <, Action, >, newArrayList, (]
[;, return, Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, ), ), ;, case, Token]
[., getFirstChild, (, ), ;, return, Lists, ., <, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, )]
[;, case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (, "Bad LHS for assignment: "]
[., <, Action, >, newArrayList, (, new, PropertyAssignAction, (, receiver, ,, rhs, ), ), ;, case, Token, ., GETELEM, :]
[), ;, case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (]
[,, rhs, ), ), ;, case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw]
[), ), ;, case, Token, ., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError]
[:, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (, "Bad LHS for assignment: ", +, parent, ., toStringTree, (]
[., GETELEM, :, return, Lists, ., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (, "Bad LHS for assignment: ", +, parent, .]
[;, default, :, throw, new, AssertionError, (, "Bad LHS for assignment: ", +, parent, ., toStringTree, (, ), ), ;, }, }, private, ExternFunctionCall]
[., newArrayList, (, ), ;, default, :, throw, new, AssertionError, (, "Bad LHS for assignment: ", +, parent, ., toStringTree, (, ), ), ;]
[;, }, }, private, ExternFunctionCall, createExternFunctionCall, (, Node, receiver, ,, JSType, jsThisType, ,, FunctionType, fun, ), {, List, <, ConcreteType]
[), ;, }, }, private, ExternFunctionCall, createExternFunctionCall, (, Node, receiver, ,, JSType, jsThisType, ,, FunctionType, fun, ), {, List, <]
[+, parent, ., toStringTree, (, ), ), ;, }, }, private, ExternFunctionCall, createExternFunctionCall, (, Node, receiver, ,, JSType, jsThisType, ,]
[), ;, }, }, private, ExternFunctionCall, createExternFunctionCall, (, Node, receiver, ,, JSType, jsThisType, ,, FunctionType, fun, ), {, List, <]
[., toStringTree, (, ), ), ;, }, }, private, ExternFunctionCall, createExternFunctionCall, (, Node, receiver, ,, JSType, jsThisType, ,, FunctionType, fun]
[;, ConcreteType, thisType, ;, if, (, fun, !=, null, ), {, thisType, =, createType, (, jsThisType, ), ;, for, (]
[., newArrayList, (, ), ;, ConcreteType, thisType, ;, if, (, fun, !=, null, ), {, thisType, =, createType, (, jsThisType]
[), {, thisType, =, createType, (, jsThisType, ), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), )]
[!=, null, ), {, thisType, =, createType, (, jsThisType, ), ;, for, (, Node, arg, :, fun, ., getParameters, (]
[), {, thisType, =, createType, (, jsThisType, ), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), )]
[=, createType, (, jsThisType, ), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), ), {, argTypes, .]
[;, for, (, Node, arg, :, fun, ., getParameters, (, ), ), {, argTypes, ., add, (, createType, (, arg]
[), ;, for, (, Node, arg, :, fun, ., getParameters, (, ), ), {, argTypes, ., add, (, createType, (]
[), {, argTypes, ., add, (, createType, (, arg, ,, scope, ), ), ;, }, }, else, {, thisType, =]
[., getParameters, (, ), ), {, argTypes, ., add, (, createType, (, arg, ,, scope, ), ), ;, }, }]
[;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (, receiver, ,, thisType, ,]
[., add, (, createType, (, arg, ,, scope, ), ), ;, }, }, else, {, thisType, =, ConcreteType, ., NONE]
[), ;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (, receiver, ,, thisType]
[,, scope, ), ), ;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (]
[), ), ;, }, }, else, {, thisType, =, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (, receiver, ,]
[=, ConcreteType, ., NONE, ;, }, return, new, ExternFunctionCall, (, receiver, ,, thisType, ,, argTypes, ), ;, }, private, JSType]
[;, }, return, new, ExternFunctionCall, (, receiver, ,, thisType, ,, argTypes, ), ;, }, private, JSType, getJSType, (, Node, n]
[., NONE, ;, }, return, new, ExternFunctionCall, (, receiver, ,, thisType, ,, argTypes, ), ;, }, private, JSType, getJSType, (]
[;, }, private, JSType, getJSType, (, Node, n, ), {, if, (, n, ., getJSType, (, ), !=, null, )]
[,, thisType, ,, argTypes, ), ;, }, private, JSType, getJSType, (, Node, n, ), {, if, (, n, ., getJSType]
[,, argTypes, ), ;, }, private, JSType, getJSType, (, Node, n, ), {, if, (, n, ., getJSType, (, )]
[), ;, }, private, JSType, getJSType, (, Node, n, ), {, if, (, n, ., getJSType, (, ), !=, null]
[), {, return, n, ., getJSType, (, ), ;, }, else, {, return, getTypeRegistry, (, ), ., getNativeType, (, UNKNOWN_TYPE]
[!=, null, ), {, return, n, ., getJSType, (, ), ;, }, else, {, return, getTypeRegistry, (, ), ., getNativeType]
[., getJSType, (, ), !=, null, ), {, return, n, ., getJSType, (, ), ;, }, else, {, return, getTypeRegistry]
[), {, return, n, ., getJSType, (, ), ;, }, else, {, return, getTypeRegistry, (, ), ., getNativeType, (, UNKNOWN_TYPE]
[;, }, else, {, return, getTypeRegistry, (, ), ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, Collection, <, Action]
[., getJSType, (, ), ;, }, else, {, return, getTypeRegistry, (, ), ., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }]
[;, }, }, private, Collection, <, Action, >, getImplicitActions, (, Node, n, ), {, switch, (, n, ., getType, (]
[., getNativeType, (, UNKNOWN_TYPE, ), ;, }, }, private, Collection, <, Action, >, getImplicitActions, (, Node, n, ), {, switch]
[), ;, }, }, private, Collection, <, Action, >, getImplicitActions, (, Node, n, ), {, switch, (, n, ., getType]
[), {, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns]
[., getType, (, ), ), {, case, Token, ., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;]
[:, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&, receiver, ., isGetProp, (, )]
[., CALL, :, Node, receiver, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&, receiver, ., isGetProp]
[;, if, (, !, inExterns, &&, receiver, ., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (, n, ,, receiver, .]
[., getFirstChild, (, ), ;, if, (, !, inExterns, &&, receiver, ., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (]
[), {, return, getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), ), ;, }, break, ;, case, Token, .]
[&&, receiver, ., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), ), ;]
[&&, receiver, ., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), ), ;]
[), {, return, getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), ), ;, }, break, ;, case, Token, .]
[., isGetProp, (, ), ), {, return, getImplicitActionsFromCall, (, n, ,, receiver, ., getJSType, (, ), ), ;, }, break]
[;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (]
[,, receiver, ., getJSType, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n]
[), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if]
[., getJSType, (, ), ), ;, }, break, ;, case, Token, ., ASSIGN, :, Node, lhs, =, n, ., getFirstChild]
[:, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&, lhs, ., isGetProp, (, )]
[., ASSIGN, :, Node, lhs, =, n, ., getFirstChild, (, ), ;, if, (, !, inExterns, &&, lhs, ., isGetProp]
[;, if, (, !, inExterns, &&, lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (]
[., getFirstChild, (, ), ;, if, (, !, inExterns, &&, lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (]
[), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,, lhs, ., getLastChild, (, )]
[&&, lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, )]
[&&, lhs, ., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, )]
[), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,, lhs, ., getLastChild, (, )]
[., isGetProp, (, ), ), {, return, getImplicitActionsFromProp, (, lhs, ., getFirstChild, (, ), ., getJSType, (, ), ,, lhs]
[;, }, break, ;, }, return, null, ;, }, private, Collection, <, Action, >, getImplicitActionsFromCall, (, Node, n, ,, JSType]
[,, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ., getLastChild, (, ), ), ;, }, break]
[., getJSType, (, ), ,, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n, ., getLastChild, (, )]
[., getFirstChild, (, ), ., getJSType, (, ), ,, lhs, ., getLastChild, (, ), ., getString, (, ), ,, n]
[,, n, ., getLastChild, (, ), ), ;, }, break, ;, }, return, null, ;, }, private, Collection, <, Action]
[., getString, (, ), ,, n, ., getLastChild, (, ), ), ;, }, break, ;, }, return, null, ;, }]
[., getLastChild, (, ), ., getString, (, ), ,, n, ., getLastChild, (, ), ), ;, }, break, ;, }]
[), ;, }, break, ;, }, return, null, ;, }, private, Collection, <, Action, >, getImplicitActionsFromCall, (, Node, n, ,]
[., getLastChild, (, ), ), ;, }, break, ;, }, return, null, ;, }, private, Collection, <, Action, >, getImplicitActionsFromCall]
[;, }, private, Collection, <, Action, >, getImplicitActionsFromCall, (, Node, n, ,, JSType, recvType, ), {, Node, receiver, =, n]
[;, if, (, recvType, ., isUnionType, (, ), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (]
[., getFirstChild, (, ), ;, if, (, recvType, ., isUnionType, (, ), ), {, List, <, Action, >, actions, =]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, alt, :, recvType]
[., isUnionType, (, ), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (]
[;, for, (, JSType, alt, :, recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll]
[., newArrayList, (, ), ;, for, (, JSType, alt, :, recvType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), )]
[), {, actions, ., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return, actions, ;, }, else]
[., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, )]
[;, }, return, actions, ;, }, else, if, (, !, (, recvType, ., isFunctionType, (, ), ), ), {, return]
[., addAll, (, getImplicitActionsFromCall, (, n, ,, alt, ), ), ;, }, return, actions, ;, }, else, if, (, !]
[), ;, }, return, actions, ;, }, else, if, (, !, (, recvType, ., isFunctionType, (, ), ), ), {]
[,, alt, ), ), ;, }, return, actions, ;, }, else, if, (, !, (, recvType, ., isFunctionType, (, )]
[), ), ;, }, return, actions, ;, }, else, if, (, !, (, recvType, ., isFunctionType, (, ), ), )]
[;, }, else, if, (, !, (, recvType, ., isFunctionType, (, ), ), ), {, return, Lists, ., <, Action]
[), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast, (]
[), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast, (]
[), ), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast]
[., isFunctionType, (, ), ), ), {, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType]
[;, }, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (, receiver, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (]
[., <, Action, >, newArrayList, (, ), ;, }, ObjectType, objType, =, ObjectType, ., cast, (, getJSType, (, receiver, .]
[;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=, null, &&]
[., cast, (, getJSType, (, receiver, ., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =]
[), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=, null]
[., restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;, if]
[), ., restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =, receiver, ., getLastChild, (, ), ., getString, (, ), ;]
[., getFirstChild, (, ), ), ., restrictByNotNullOrUndefined, (, ), ), ;, String, prop, =, receiver, ., getLastChild, (, ), .]
[;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&, (, recvType, ., toMaybeFunctionType]
[., getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&]
[., getLastChild, (, ), ., getString, (, ), ;, if, (, objType, !=, null, &&, (, objType, ., isPropertyInExterns, (]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =]
[&&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null, ), {, List, <, Action, >]
[&&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (]
[!=, null, &&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&, (, recvType, ., toMaybeFunctionType, (, ), ), .]
[&&, (, objType, ., isPropertyInExterns, (, prop, ), ), &&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (]
[&&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null, ), {, List, <, Action, >]
[), &&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null, ), {, List, <, Action]
[., isPropertyInExterns, (, prop, ), ), &&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null]
[), ), &&, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null, ), {, List, <]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =]
[!=, null, ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >]
[., getParameters, (, ), !=, null, ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;]
[), ., getParameters, (, ), !=, null, ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, )]
[., toMaybeFunctionType, (, ), ), ., getParameters, (, ), !=, null, ), {, List, <, Action, >, actions, =, Lists]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =]
[;, Iterator, <, Node, >, paramIter, =, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters, (, ), ., iterator]
[., newArrayList, (, ), ;, Iterator, <, Node, >, paramIter, =, (, recvType, ., toMaybeFunctionType, (, ), ), ., getParameters]
[;, Iterator, <, Node, >, argumentIter, =, n, ., children, (, ), ., iterator, (, ), ;, argumentIter, ., next]
[., iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =, n, ., children, (, ), ., iterator, (, )]
[., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =, n, ., children, (, )]
[), ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =, n, ., children, (]
[., toMaybeFunctionType, (, ), ), ., getParameters, (, ), ., iterator, (, ), ;, Iterator, <, Node, >, argumentIter, =]
[;, argumentIter, ., next, (, ), ;, while, (, paramIter, ., hasNext, (, ), &&, argumentIter, ., hasNext, (, )]
[., iterator, (, ), ;, argumentIter, ., next, (, ), ;, while, (, paramIter, ., hasNext, (, ), &&, argumentIter]
[., children, (, ), ., iterator, (, ), ;, argumentIter, ., next, (, ), ;, while, (, paramIter, ., hasNext]
[;, while, (, paramIter, ., hasNext, (, ), &&, argumentIter, ., hasNext, (, ), ), {, Node, arg, =, argumentIter]
[., next, (, ), ;, while, (, paramIter, ., hasNext, (, ), &&, argumentIter, ., hasNext, (, ), ), {]
[), {, Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =, paramIter, ., next, (, ), ;]
[&&, argumentIter, ., hasNext, (, ), ), {, Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =]
[., hasNext, (, ), &&, argumentIter, ., hasNext, (, ), ), {, Node, arg, =, argumentIter, ., next, (, )]
[), {, Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =, paramIter, ., next, (, ), ;]
[., hasNext, (, ), ), {, Node, arg, =, argumentIter, ., next, (, ), ;, Node, param, =, paramIter, .]
[;, Node, param, =, paramIter, ., next, (, ), ;, if, (, arg, ., getJSType, (, ), !=, null, &&]
[., next, (, ), ;, Node, param, =, paramIter, ., next, (, ), ;, if, (, arg, ., getJSType, (]
[;, if, (, arg, ., getJSType, (, ), !=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, )]
[., next, (, ), ;, if, (, arg, ., getJSType, (, ), !=, null, &&, arg, ., getJSType, (, )]
[), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), .]
[&&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[!=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (]
[., getJSType, (, ), !=, null, &&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, .]
[&&, arg, ., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,]
[), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), .]
[., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, arg, ., getJSType, (, ), .]
[., getJSType, (, ), ., isFunctionType, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, arg, .]
[;, }, }, return, actions, ;, }, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, private, Collection]
[., addAll, (, getImplicitActionsFromArgument, (, arg, ,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, )]
[), ;, }, }, return, actions, ;, }, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, private]
[,, arg, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, ), ,, param]
[,, param, ., getJSType, (, ), ), ), ;, }, }, return, actions, ;, }, return, Lists, ., <, Action]
[., toObjectType, (, ), ,, param, ., getJSType, (, ), ), ), ;, }, }, return, actions, ;, }, return]
[., getTypeOfThis, (, ), ., toObjectType, (, ), ,, param, ., getJSType, (, ), ), ), ;, }, }, return]
[., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, ), ,, param, ., getJSType, (, ), ), )]
[., getJSType, (, ), ., toMaybeFunctionType, (, ), ., getTypeOfThis, (, ), ., toObjectType, (, ), ,, param, ., getJSType]
[), ), ;, }, }, return, actions, ;, }, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }]
[., getJSType, (, ), ), ), ;, }, }, return, actions, ;, }, return, Lists, ., <, Action, >, newArrayList]
[;, }, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, private, Collection, <, Action, >, getImplicitActionsFromArgument, (]
[;, }, private, Collection, <, Action, >, getImplicitActionsFromArgument, (, Node, arg, ,, ObjectType, thisType, ,, JSType, paramType, ), {, if]
[., <, Action, >, newArrayList, (, ), ;, }, private, Collection, <, Action, >, getImplicitActionsFromArgument, (, Node, arg, ,, ObjectType]
[), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (, JSType, paramAlt, :, paramType]
[., isUnionType, (, ), ), {, List, <, Action, >, actions, =, Lists, ., newArrayList, (, ), ;, for, (]
[;, for, (, JSType, paramAlt, :, paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll]
[., newArrayList, (, ), ;, for, (, JSType, paramAlt, :, paramType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), )]
[), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, ), ), ;, }, return, actions, ;]
[., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, ), ), ;]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, actions, ., addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,]
[;, }, return, actions, ;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, return, Lists, ., <]
[., addAll, (, getImplicitActionsFromArgument, (, arg, ,, thisType, ,, paramAlt, ), ), ;, }, return, actions, ;, }, else, if]
[), ;, }, return, actions, ;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, return, Lists, .]
[,, thisType, ,, paramAlt, ), ), ;, }, return, actions, ;, }, else, if, (, paramType, ., isFunctionType, (, )]
[,, paramAlt, ), ), ;, }, return, actions, ;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {]
[), ), ;, }, return, actions, ;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, return, Lists]
[;, }, else, if, (, paramType, ., isFunctionType, (, ), ), {, return, Lists, ., <, Action, >, newArrayList, (]
[), {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, paramType, ., toMaybeFunctionType, (]
[., isFunctionType, (, ), ), {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,]
[;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, null, )]
[., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, paramType, ., toMaybeFunctionType, (, ), ), ), ;]
[), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, null]
[,, thisType, ,, paramType, ., toMaybeFunctionType, (, ), ), ), ;, }, else, {, return, Lists, ., <, Action, >]
[,, paramType, ., toMaybeFunctionType, (, ), ), ), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (]
[), ), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,]
[., toMaybeFunctionType, (, ), ), ), ;, }, else, {, return, Lists, ., <, Action, >, newArrayList, (, createExternFunctionCall, (]
[;, }, }, private, Collection, <, Action, >, getImplicitActionsFromProp, (, JSType, jsType, ,, String, prop, ,, Node, fnNode, ), {]
[., <, Action, >, newArrayList, (, createExternFunctionCall, (, arg, ,, thisType, ,, null, ), ), ;, }, }, private, Collection]
[), ;, }, }, private, Collection, <, Action, >, getImplicitActionsFromProp, (, JSType, jsType, ,, String, prop, ,, Node, fnNode, )]
[,, thisType, ,, null, ), ), ;, }, }, private, Collection, <, Action, >, getImplicitActionsFromProp, (, JSType, jsType, ,, String]
[,, null, ), ), ;, }, }, private, Collection, <, Action, >, getImplicitActionsFromProp, (, JSType, jsType, ,, String, prop, ,]
[), ), ;, }, }, private, Collection, <, Action, >, getImplicitActionsFromProp, (, JSType, jsType, ,, String, prop, ,, Node, fnNode]
[;, if, (, jsType, ., isUnionType, (, ), ), {, boolean, found, =, false, ;, for, (, JSType, alt, :]
[., newArrayList, (, ), ;, if, (, jsType, ., isUnionType, (, ), ), {, boolean, found, =, false, ;, for]
[), {, boolean, found, =, false, ;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (]
[., isUnionType, (, ), ), {, boolean, found, =, false, ;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (]
[;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ObjectType, altObj, =]
[), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (, altObj, !=, null, ), {, actions]
[., getAlternates, (, ), ), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;, if, (, altObj, !=]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ObjectType, altObj, =, ObjectType, ., cast, (, alt, ), ;]
[;, if, (, altObj, !=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, )]
[., cast, (, alt, ), ;, if, (, altObj, !=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj]
[), ;, if, (, altObj, !=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode]
[), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (, altObj, .]
[!=, null, ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (]
[), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (, altObj, .]
[;, if, (, altObj, ., hasProperty, (, prop, ), ), {, found, =, true, ;, }, }, }, if, (]
[., addAll, (, getImplicitActionsFromPropNonUnion, (, altObj, ,, prop, ,, fnNode, ), ), ;, if, (, altObj, ., hasProperty, (, prop]
[), ;, if, (, altObj, ., hasProperty, (, prop, ), ), {, found, =, true, ;, }, }, }, if]
[,, prop, ,, fnNode, ), ), ;, if, (, altObj, ., hasProperty, (, prop, ), ), {, found, =, true]
[,, fnNode, ), ), ;, if, (, altObj, ., hasProperty, (, prop, ), ), {, found, =, true, ;, }]
[), ), ;, if, (, altObj, ., hasProperty, (, prop, ), ), {, found, =, true, ;, }, }, }]
[), {, found, =, true, ;, }, }, }, if, (, found, ), {, return, actions, ;, }, }, else]
[., hasProperty, (, prop, ), ), {, found, =, true, ;, }, }, }, if, (, found, ), {, return]
[), ), {, found, =, true, ;, }, }, }, if, (, found, ), {, return, actions, ;, }, }]
[=, true, ;, }, }, }, if, (, found, ), {, return, actions, ;, }, }, else, {, ObjectType, objType]
[;, }, }, }, if, (, found, ), {, return, actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType]
[), {, return, actions, ;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if]
[;, }, }, else, {, ObjectType, objType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, objType, !=, null]
[;, if, (, objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, )]
[., cast, (, jsType, ), ;, if, (, objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&, objType]
[), ;, if, (, objType, !=, null, &&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop]
[), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry]
[&&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }]
[&&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType]
[!=, null, &&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion]
[&&, !, objType, ., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType]
[&&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }]
[&&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }]
[., isUnknownType, (, ), &&, objType, ., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,]
[), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry]
[., hasProperty, (, prop, ), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }, }, for]
[), ), {, return, getImplicitActionsFromPropNonUnion, (, objType, ,, prop, ,, fnNode, ), ;, }, }, for, (, ObjectType, type, :]
[;, }, }, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {, actions, .]
[,, prop, ,, fnNode, ), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop]
[,, fnNode, ), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), )]
[), ;, }, }, for, (, ObjectType, type, :, getTypeRegistry, (, ), ., getEachReferenceTypeWithProperty, (, prop, ), ), {, actions]
[), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,, fnNode, ), ), ;, }, return, actions, ;]
[., getEachReferenceTypeWithProperty, (, prop, ), ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,, fnNode, ), )]
[), ), {, actions, ., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,, fnNode, ), ), ;, }, return, actions]
[;, }, return, actions, ;, }, private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop, ,, Node]
[., addAll, (, getImplicitActionsFromPropNonUnion, (, type, ,, prop, ,, fnNode, ), ), ;, }, return, actions, ;, }, private, Collection]
[), ;, }, return, actions, ;, }, private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop, ,]
[,, prop, ,, fnNode, ), ), ;, }, return, actions, ;, }, private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType]
[,, fnNode, ), ), ;, }, return, actions, ;, }, private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,]
[), ), ;, }, return, actions, ;, }, private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop]
[;, }, private, Collection, <, Action, >, getImplicitActionsFromPropNonUnion, (, ObjectType, jsType, ,, String, prop, ,, Node, fnNode, ), {, JSType]
[;, if, (, jsType, ., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, ), ), {, ObjectType, thisType, =]
[., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, ), )]
[., getPropertyType, (, prop, ), ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isPropertyInExterns, (, prop, ), &&, propType]
[), ., restrictByNotNullOrUndefined, (, ), ;, if, (, jsType, ., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, )]
[), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {, thisType, =, thisType, .]
[&&, propType, ., isFunctionType, (, ), ), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, )]
[., isPropertyInExterns, (, prop, ), &&, propType, ., isFunctionType, (, ), ), {, ObjectType, thisType, =, jsType, ;, if, (]
[), &&, propType, ., isFunctionType, (, ), ), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (]
[), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {, thisType, =, thisType, .]
[., isFunctionType, (, ), ), {, ObjectType, thisType, =, jsType, ;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {]
[;, if, (, jsType, ., isFunctionPrototypeType, (, ), ), {, thisType, =, thisType, ., getOwnerFunction, (, ), ., getInstanceType, (]
[), {, thisType, =, thisType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, FunctionType, callType, =, propType, .]
[., isFunctionPrototypeType, (, ), ), {, thisType, =, thisType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, FunctionType]
[=, thisType, ., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, )]
[;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (, fnNode, ,, thisType, ,]
[., getInstanceType, (, ), ;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (]
[., getOwnerFunction, (, ), ., getInstanceType, (, ), ;, }, FunctionType, callType, =, propType, ., toMaybeFunctionType, (, ), ;, Action]
[;, Action, action, =, createExternFunctionCall, (, fnNode, ,, thisType, ,, callType, ), ;, return, Lists, ., <, Action, >, newArrayList]
[., toMaybeFunctionType, (, ), ;, Action, action, =, createExternFunctionCall, (, fnNode, ,, thisType, ,, callType, ), ;, return, Lists, .]
[;, return, Lists, ., <, Action, >, newArrayList, (, action, ), ;, }, return, Lists, ., <, Action, >, newArrayList]
[,, thisType, ,, callType, ), ;, return, Lists, ., <, Action, >, newArrayList, (, action, ), ;, }, return, Lists]
[,, callType, ), ;, return, Lists, ., <, Action, >, newArrayList, (, action, ), ;, }, return, Lists, ., <]
[), ;, return, Lists, ., <, Action, >, newArrayList, (, action, ), ;, }, return, Lists, ., <, Action, >]
[;, }, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, }, private, ConcreteType, createType, (, Node, name]
[., <, Action, >, newArrayList, (, action, ), ;, }, return, Lists, ., <, Action, >, newArrayList, (, ), ;]
[), ;, }, return, Lists, ., <, Action, >, newArrayList, (, ), ;, }, }, private, ConcreteType, createType, (, Node]
[;, }, }, private, ConcreteType, createType, (, Node, name, ,, ConcreteScope, scope, ), {, Preconditions, ., checkNotNull, (, name, )]
[., <, Action, >, newArrayList, (, ), ;, }, }, private, ConcreteType, createType, (, Node, name, ,, ConcreteScope, scope, )]
[;, Preconditions, ., checkArgument, (, name, ., isName, (, ), ), ;, if, (, name, ., getJSType, (, ), ==]
[., checkNotNull, (, name, ), ;, Preconditions, ., checkArgument, (, name, ., isName, (, ), ), ;, if, (, name]
[), ;, Preconditions, ., checkArgument, (, name, ., isName, (, ), ), ;, if, (, name, ., getJSType, (, )]
[;, if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (]
[., checkArgument, (, name, ., isName, (, ), ), ;, if, (, name, ., getJSType, (, ), ==, null, )]
[), ;, if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if]
[., isName, (, ), ), ;, if, (, name, ., getJSType, (, ), ==, null, ), {, return, ConcreteType, .]
[), {, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&]
[==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null]
[., getJSType, (, ), ==, null, ), {, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild]
[), {, return, ConcreteType, ., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&]
[;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&, (, name, ., getFirstChild, (, )]
[., ALL, ;, }, if, (, (, name, ., getFirstChild, (, ), !=, null, ), &&, (, name, ., getFirstChild]
[), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, return, createType, (, name, .]
[&&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (, name, ., getFirstChild]
[), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (, name, .]
[!=, null, ), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (]
[., getFirstChild, (, ), !=, null, ), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), )]
[), &&, (, name, ., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (, name, .]
[), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, return, createType, (, name, .]
[), ), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }, return, createType, (, name]
[., isFunction, (, ), ), ), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,, scope, ), ;, }]
[., getFirstChild, (, ), ., isFunction, (, ), ), ), {, return, createConcreteFunction, (, name, ., getFirstChild, (, ), ,]
[;, }, return, createType, (, name, ., getJSType, (, ), ), ;, }, private, ConcreteType, createType, (, JSType, jsType, )]
[,, scope, ), ;, }, return, createType, (, name, ., getJSType, (, ), ), ;, }, private, ConcreteType, createType, (]
[., getFirstChild, (, ), ,, scope, ), ;, }, return, createType, (, name, ., getJSType, (, ), ), ;, }]
[), ;, }, return, createType, (, name, ., getJSType, (, ), ), ;, }, private, ConcreteType, createType, (, JSType, jsType]
[;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (, jsType, ., isUnknownType, (, ), ||, jsType, .]
[), ;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (, jsType, ., isUnknownType, (, ), ||, jsType]
[., getJSType, (, ), ), ;, }, private, ConcreteType, createType, (, JSType, jsType, ), {, if, (, jsType, ., isUnknownType]
[), {, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =]
[||, jsType, ., isEmptyType, (, ), ), {, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isUnionType, (]
[., isUnknownType, (, ), ||, jsType, ., isEmptyType, (, ), ), {, return, ConcreteType, ., ALL, ;, }, if, (]
[), {, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =]
[., isEmptyType, (, ), ), {, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isUnionType, (, ), )]
[;, }, if, (, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =, ConcreteType, ., NONE, ;, for, (]
[., ALL, ;, }, if, (, jsType, ., isUnionType, (, ), ), {, ConcreteType, type, =, ConcreteType, ., NONE, ;]
[), {, ConcreteType, type, =, ConcreteType, ., NONE, ;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), .]
[., isUnionType, (, ), ), {, ConcreteType, type, =, ConcreteType, ., NONE, ;, for, (, JSType, alt, :, jsType, .]
[;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, type, =, type]
[., NONE, ;, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, type]
[), {, type, =, type, ., unionWith, (, createType, (, alt, ), ), ;, }, return, type, ;, }, if]
[., getAlternates, (, ), ), {, type, =, type, ., unionWith, (, createType, (, alt, ), ), ;, }, return]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, type, =, type, ., unionWith, (, createType, (, alt, )]
[=, type, ., unionWith, (, createType, (, alt, ), ), ;, }, return, type, ;, }, if, (, jsType, .]
[;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (, getConcreteFunction, (, jsType]
[., unionWith, (, createType, (, alt, ), ), ;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (]
[), ;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (, getConcreteFunction, (]
[), ), ;, }, return, type, ;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (, getConcreteFunction]
[;, }, if, (, jsType, ., isFunctionType, (, ), ), {, if, (, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, )]
[), {, if, (, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), !=, null, ), {, return, getConcreteFunction, (, jsType]
[., isFunctionType, (, ), ), {, if, (, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), !=, null, ), {]
[), {, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return, ConcreteType, ., ALL, ;, }, if]
[!=, null, ), {, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return, ConcreteType, ., ALL, ;]
[), !=, null, ), {, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return, ConcreteType, ., ALL]
[., toMaybeFunctionType, (, ), ), !=, null, ), {, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }]
[), {, return, getConcreteFunction, (, jsType, ., toMaybeFunctionType, (, ), ), ;, }, return, ConcreteType, ., ALL, ;, }, if]
[;, }, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isObject, (, ), ), {, return, createConcreteInstance, (]
[), ;, }, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isObject, (, ), ), {, return, createConcreteInstance]
[., toMaybeFunctionType, (, ), ), ;, }, return, ConcreteType, ., ALL, ;, }, if, (, jsType, ., isObject, (, )]
[;, }, if, (, jsType, ., isObject, (, ), ), {, return, createConcreteInstance, (, jsType, ., toObjectType, (, ), )]
[., ALL, ;, }, if, (, jsType, ., isObject, (, ), ), {, return, createConcreteInstance, (, jsType, ., toObjectType, (]
[), {, return, createConcreteInstance, (, jsType, ., toObjectType, (, ), ), ;, }, return, ConcreteType, ., NONE, ;, }, private]
[., isObject, (, ), ), {, return, createConcreteInstance, (, jsType, ., toObjectType, (, ), ), ;, }, return, ConcreteType, .]
[;, }, return, ConcreteType, ., NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =, ConcreteType]
[), ;, }, return, ConcreteType, ., NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =]
[., toObjectType, (, ), ), ;, }, return, ConcreteType, ., NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, )]
[;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =, ConcreteType, ., NONE, ;, if, (, jsType]
[., NONE, ;, }, private, ConcreteType, createTypeWithSubTypes, (, JSType, jsType, ), {, ConcreteType, ret, =, ConcreteType, ., NONE, ;, if]
[;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, )]
[., NONE, ;, if, (, jsType, ., isUnionType, (, ), ), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType]
[), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ret, =]
[., isUnionType, (, ), ), {, for, (, JSType, alt, :, jsType, ., toMaybeUnionType, (, ), ., getAlternates, (, )]
[), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, alt, ), ), ;, }, }, else, {, ObjectType, instType]
[., getAlternates, (, ), ), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, alt, ), ), ;, }, }]
[., toMaybeUnionType, (, ), ., getAlternates, (, ), ), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, alt, )]
[=, ret, ., unionWith, (, createTypeWithSubTypes, (, alt, ), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, .]
[;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, instType, !=, null]
[., unionWith, (, createTypeWithSubTypes, (, alt, ), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (]
[), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, instType, !=]
[), ), ;, }, }, else, {, ObjectType, instType, =, ObjectType, ., cast, (, jsType, ), ;, if, (, instType]
[;, if, (, instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null, &&, instType, ., getConstructor, (, )]
[., cast, (, jsType, ), ;, if, (, instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null, &&]
[), ;, if, (, instType, !=, null, &&, instType, ., getConstructor, (, ), !=, null, &&, instType, ., getConstructor, (]
[), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (, ), ., getDirectImplementors, (, instType, ), ;, for, (, FunctionType]
[&&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (]
[&&, instType, ., getConstructor, (, ), !=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[!=, null, &&, instType, ., getConstructor, (, ), !=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, )]
[&&, instType, ., getConstructor, (, ), !=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {]
[&&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (]
[!=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =]
[., getConstructor, (, ), !=, null, &&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <]
[&&, instType, ., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (]
[), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (, ), ., getDirectImplementors, (, instType, ), ;, for, (, FunctionType]
[., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (, ), ., getDirectImplementors, (, instType, )]
[., getConstructor, (, ), ., isInterface, (, ), ), {, Collection, <, FunctionType, >, implementors, =, getTypeRegistry, (, ), .]
[;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType]
[., getDirectImplementors, (, instType, ), ;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =, ret, ., unionWith, (]
[), ;, for, (, FunctionType, implementor, :, implementors, ), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, .]
[), {, ret, =, ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), ), ;, }, }]
[=, ret, ., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), ), ;, }, }, else, {, ret]
[;, }, }, else, {, ret, =, ret, ., unionWith, (, createUnionWithSubTypes, (, createType, (, jsType, ), ), ), ;]
[., unionWith, (, createTypeWithSubTypes, (, implementor, ., getInstanceType, (, ), ), ), ;, }, }, else, {, ret, =, ret]
[), ;, }, }, else, {, ret, =, ret, ., unionWith, (, createUnionWithSubTypes, (, createType, (, jsType, ), ), )]
[), ), ;, }, }, else, {, ret, =, ret, ., unionWith, (, createUnionWithSubTypes, (, createType, (, jsType, ), )]
[., getInstanceType, (, ), ), ), ;, }, }, else, {, ret, =, ret, ., unionWith, (, createUnionWithSubTypes, (, createType]
[=, ret, ., unionWith, (, createUnionWithSubTypes, (, createType, (, jsType, ), ), ), ;, }, }, return, ret, ;, }]
[;, }, }, return, ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions, ., checkNotNull]
[., unionWith, (, createUnionWithSubTypes, (, createType, (, jsType, ), ), ), ;, }, }, return, ret, ;, }, ConcreteType, inferConcreteType]
[), ;, }, }, return, ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions, .]
[), ), ;, }, }, return, ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions]
[), ), ), ;, }, }, return, ret, ;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {]
[;, }, ConcreteType, inferConcreteType, (, ConcreteScope, scope, ,, Node, expr, ), {, Preconditions, ., checkNotNull, (, scope, ), ;, Preconditions]
[;, Preconditions, ., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (, expr, ., getType, (, ), ), {]
[., checkNotNull, (, scope, ), ;, Preconditions, ., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (, expr, .]
[), ;, Preconditions, ., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (, expr, ., getType, (, ), )]
[;, ConcreteType, ret, ;, switch, (, expr, ., getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <]
[., checkNotNull, (, expr, ), ;, ConcreteType, ret, ;, switch, (, expr, ., getType, (, ), ), {, case, Token]
[), ;, ConcreteType, ret, ;, switch, (, expr, ., getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot]
[), {, case, Token, ., NAME, :, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot, (, expr, ., getString]
[., getType, (, ), ), {, case, Token, ., NAME, :, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot]
[:, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot, (, expr, ., getString, (, ), ), ;, if, (]
[., NAME, :, StaticSlot, <, ConcreteType, >, slot, =, scope, ., getSlot, (, expr, ., getString, (, ), ), ;]
[;, if, (, slot, !=, null, ), {, ret, =, slot, ., getType, (, ), ;, }, else, {, ret]
[., getSlot, (, expr, ., getString, (, ), ), ;, if, (, slot, !=, null, ), {, ret, =, slot]
[), ;, if, (, slot, !=, null, ), {, ret, =, slot, ., getType, (, ), ;, }, else, {]
[., getString, (, ), ), ;, if, (, slot, !=, null, ), {, ret, =, slot, ., getType, (, )]
[), {, ret, =, slot, ., getType, (, ), ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }]
[!=, null, ), {, ret, =, slot, ., getType, (, ), ;, }, else, {, ret, =, ConcreteType, ., ALL]
[), {, ret, =, slot, ., getType, (, ), ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }]
[=, slot, ., getType, (, ), ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case]
[;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., THIS, :, ret, =]
[., getType, (, ), ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, .]
[=, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., THIS, :, ret, =, scope, ., getTypeOfThis, (, )]
[;, }, break, ;, case, Token, ., THIS, :, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case]
[., ALL, ;, }, break, ;, case, Token, ., THIS, :, ret, =, scope, ., getTypeOfThis, (, ), ;, break]
[:, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =, inferConcreteType, (]
[., THIS, :, ret, =, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =]
[=, scope, ., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,]
[;, break, ;, case, Token, ., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[., getTypeOfThis, (, ), ;, break, ;, case, Token, ., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,, expr, .]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA]
[., ASSIGN, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token]
[=, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :, ret]
[;, break, ;, case, Token, ., COMMA, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :, ret, =, inferConcreteType, (, scope]
[), ;, break, ;, case, Token, ., COMMA, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, )]
[., getLastChild, (, ), ), ;, break, ;, case, Token, ., COMMA, :, ret, =, inferConcreteType, (, scope, ,, expr]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND]
[., COMMA, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token]
[=, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :, ret]
[;, break, ;, case, Token, ., AND, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :, ret, =, inferConcreteType, (, scope]
[), ;, break, ;, case, Token, ., AND, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, )]
[., getLastChild, (, ), ), ;, break, ;, case, Token, ., AND, :, ret, =, inferConcreteType, (, scope, ,, expr]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR]
[., AND, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token]
[=, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret]
[;, break, ;, case, Token, ., OR, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), )]
[,, expr, ., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret, =, inferConcreteType, (, scope]
[), ;, break, ;, case, Token, ., OR, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, )]
[., getLastChild, (, ), ), ;, break, ;, case, Token, ., OR, :, ret, =, inferConcreteType, (, scope, ,, expr]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,]
[., OR, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (]
[=, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, .]
[;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), .]
[., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, .]
[,, expr, ., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), )]
[), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token]
[., getFirstChild, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;]
[), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, )]
[,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (]
[), ), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., HOOK, :, ret, =, inferConcreteType, (, scope, ,]
[:, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (]
[., HOOK, :, ret, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), .]
[=, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (, inferConcreteType, (]
[;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, )]
[., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, .]
[,, expr, ., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, .]
[), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token]
[., getNext, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (, ), ), ), ;]
[., getFirstChild, (, ), ., getNext, (, ), ), ., unionWith, (, inferConcreteType, (, scope, ,, expr, ., getLastChild, (]
[), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (]
[,, expr, ., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType]
[), ), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild]
[., getLastChild, (, ), ), ), ;, break, ;, case, Token, ., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope]
[:, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, recvType, ., isAll]
[., GETPROP, :, ConcreteType, recvType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, recvType]
[;, if, (, recvType, ., isAll, (, ), ), {, ret, =, recvType, ;, break, ;, }, Node, prop, =]
[,, expr, ., getFirstChild, (, ), ), ;, if, (, recvType, ., isAll, (, ), ), {, ret, =, recvType]
[), ;, if, (, recvType, ., isAll, (, ), ), {, ret, =, recvType, ;, break, ;, }, Node, prop]
[., getFirstChild, (, ), ), ;, if, (, recvType, ., isAll, (, ), ), {, ret, =, recvType, ;, break]
[), {, ret, =, recvType, ;, break, ;, }, Node, prop, =, expr, ., getLastChild, (, ), ;, String, propName]
[., isAll, (, ), ), {, ret, =, recvType, ;, break, ;, }, Node, prop, =, expr, ., getLastChild, (]
[=, recvType, ;, break, ;, }, Node, prop, =, expr, ., getLastChild, (, ), ;, String, propName, =, prop, .]
[;, break, ;, }, Node, prop, =, expr, ., getLastChild, (, ), ;, String, propName, =, prop, ., getString, (]
[;, String, propName, =, prop, ., getString, (, ), ;, ConcreteType, type, =, recvType, ., getPropertyType, (, propName, ), ;]
[., getLastChild, (, ), ;, String, propName, =, prop, ., getString, (, ), ;, ConcreteType, type, =, recvType, ., getPropertyType]
[;, ConcreteType, type, =, recvType, ., getPropertyType, (, propName, ), ;, if, (, "prototype", ., equals, (, propName, ), )]
[., getString, (, ), ;, ConcreteType, type, =, recvType, ., getPropertyType, (, propName, ), ;, if, (, "prototype", ., equals]
[;, if, (, "prototype", ., equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (]
[., getPropertyType, (, propName, ), ;, if, (, "prototype", ., equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType]
[), ;, if, (, "prototype", ., equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions]
[), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {, type, =, type, ., unionWith, (]
[., equals, (, propName, ), ), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {, type]
[), ), {, for, (, ConcreteFunctionType, funType, :, recvType, ., getFunctions, (, ), ), {, type, =, type, ., unionWith]
[), {, type, =, type, ., unionWith, (, funType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (]
[., getFunctions, (, ), ), {, type, =, type, ., unionWith, (, funType, ., getPrototypeType, (, ), ), ;, }]
[=, type, ., unionWith, (, funType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (, compiler, ., getCodingConvention]
[;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isSuperClassReference, (, propName, ), ), {, for, (]
[., unionWith, (, funType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (, compiler, ., getCodingConvention, (, )]
[), ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isSuperClassReference, (, propName, ), ), {, for]
[., getPrototypeType, (, ), ), ;, }, }, else, if, (, compiler, ., getCodingConvention, (, ), ., isSuperClassReference, (, propName]
[), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {, type, =, type, ., unionWith, (]
[., isSuperClassReference, (, propName, ), ), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {, type]
[., getCodingConvention, (, ), ., isSuperClassReference, (, propName, ), ), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (]
[), ), {, for, (, ConcreteFunctionType, superType, :, recvType, ., getSuperclassTypes, (, ), ), {, type, =, type, ., unionWith]
[), {, type, =, type, ., unionWith, (, superType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (]
[., getSuperclassTypes, (, ), ), {, type, =, type, ., unionWith, (, superType, ., getPrototypeType, (, ), ), ;, }]
[=, type, ., unionWith, (, superType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (, "call", ., equals]
[;, }, }, else, if, (, "call", ., equals, (, propName, ), ), {, type, =, recvType, ;, }, ret]
[., unionWith, (, superType, ., getPrototypeType, (, ), ), ;, }, }, else, if, (, "call", ., equals, (, propName]
[), ;, }, }, else, if, (, "call", ., equals, (, propName, ), ), {, type, =, recvType, ;, }]
[., getPrototypeType, (, ), ), ;, }, }, else, if, (, "call", ., equals, (, propName, ), ), {, type]
[), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =]
[., equals, (, propName, ), ), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case, Token]
[), ), {, type, =, recvType, ;, }, ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret]
[=, recvType, ;, }, ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =, ConcreteType, ., ALL]
[;, }, ret, =, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break]
[=, type, ;, break, ;, case, Token, ., GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token]
[;, break, ;, case, Token, ., GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL]
[:, ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope]
[., GETELEM, :, ret, =, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType]
[=, ConcreteType, ., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,, expr]
[;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, )]
[., ALL, ;, break, ;, case, Token, ., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild]
[:, ConcreteType, targetType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, targetType, ., isAll]
[., CALL, :, ConcreteType, targetType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, targetType]
[;, if, (, targetType, ., isAll, (, ), ), {, ret, =, targetType, ;, break, ;, }, ret, =, ConcreteType]
[,, expr, ., getFirstChild, (, ), ), ;, if, (, targetType, ., isAll, (, ), ), {, ret, =, targetType]
[), ;, if, (, targetType, ., isAll, (, ), ), {, ret, =, targetType, ;, break, ;, }, ret, =]
[., getFirstChild, (, ), ), ;, if, (, targetType, ., isAll, (, ), ), {, ret, =, targetType, ;, break]
[), {, ret, =, targetType, ;, break, ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :]
[., isAll, (, ), ), {, ret, =, targetType, ;, break, ;, }, ret, =, ConcreteType, ., NONE, ;, for]
[=, targetType, ;, break, ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions]
[;, break, ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, )]
[=, ConcreteType, ., NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =, ret]
[;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (, funType]
[., NONE, ;, for, (, ConcreteFunctionType, funType, :, targetType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith]
[), {, ret, =, ret, ., unionWith, (, funType, ., getReturnSlot, (, ), ., getType, (, ), ), ;, }]
[., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (, funType, ., getReturnSlot, (, ), ., getType, (]
[=, ret, ., unionWith, (, funType, ., getReturnSlot, (, ), ., getType, (, ), ), ;, }, break, ;, case]
[;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (]
[., unionWith, (, funType, ., getReturnSlot, (, ), ., getType, (, ), ), ;, }, break, ;, case, Token, .]
[), ;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild]
[., getType, (, ), ), ;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope]
[., getReturnSlot, (, ), ., getType, (, ), ), ;, }, break, ;, case, Token, ., NEW, :, ConcreteType, constructorType]
[:, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, constructorType, ., isAll]
[., NEW, :, ConcreteType, constructorType, =, inferConcreteType, (, scope, ,, expr, ., getFirstChild, (, ), ), ;, if, (, constructorType]
[;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret, =]
[,, expr, ., getFirstChild, (, ), ), ;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError]
[), ;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret]
[., getFirstChild, (, ), ), ;, if, (, constructorType, ., isAll, (, ), ), {, throw, new, AssertionError, (, "Attempted new call on all type!"]
[), {, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType]
[., isAll, (, ), ), {, throw, new, AssertionError, (, "Attempted new call on all type!", ), ;, }, ret, =, ConcreteType, ., NONE, ;]
[;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {]
[), ;, }, ret, =, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), )]
[=, ConcreteType, ., NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =, ret]
[;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =, ret, ., unionWith, (, instType]
[., NONE, ;, for, (, ConcreteInstanceType, instType, :, constructorType, ., getFunctionInstanceTypes, (, ), ), {, ret, =, ret, ., unionWith]
[), {, ret, =, ret, ., unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break]
[., getFunctionInstanceTypes, (, ), ), {, ret, =, ret, ., unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (]
[=, ret, ., unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token]
[;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (]
[., unionWith, (, instType, ), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION]
[), ;, }, allInstantiatedTypes, ., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction]
[;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case]
[., add, (, ret, ), ;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope]
[), ;, break, ;, case, Token, ., FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;]
[:, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (]
[., FUNCTION, :, ret, =, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if]
[=, createConcreteFunction, (, expr, ,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, .]
[;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=, null, ), &&]
[,, scope, ), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=]
[), ;, break, ;, case, Token, ., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=, null, )]
[:, if, (, (, expr, ., getJSType, (, ), !=, null, ), &&, !, expr, ., getJSType, (, ), .]
[., OBJECTLIT, :, if, (, (, expr, ., getJSType, (, ), !=, null, ), &&, !, expr, ., getJSType, (]
[), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (]
[&&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =, expr, ., getJSType, (]
[), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =, expr, ., getJSType]
[!=, null, ), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =, expr]
[., getJSType, (, ), !=, null, ), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {]
[), &&, !, expr, ., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =, expr, ., getJSType]
[), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (]
[), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (]
[., isUnknownType, (, ), ), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType]
[., getJSType, (, ), ., isUnknownType, (, ), ), {, JSType, exprType, =, expr, ., getJSType, (, ), ., restrictByNotNullOrUndefined]
[;, ConcreteType, inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), ), ;, allInstantiatedTypes, ., add, (, inst, ), ;]
[., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), ), ;, allInstantiatedTypes, ., add]
[., getJSType, (, ), ., restrictByNotNullOrUndefined, (, ), ;, ConcreteType, inst, =, createConcreteInstance, (, exprType, ., toObjectType, (, ), )]
[;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, }, else, {, ret, =, ConcreteType, ., ALL]
[), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, }, else, {, ret, =, ConcreteType, .]
[., toObjectType, (, ), ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, }, else, {]
[;, ret, =, inst, ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, .]
[., add, (, inst, ), ;, ret, =, inst, ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }]
[), ;, ret, =, inst, ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token]
[=, inst, ;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., ARRAYLIT, :]
[;, }, else, {, ret, =, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType]
[=, ConcreteType, ., ALL, ;, }, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry]
[;, }, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry, (, ), ., getNativeType]
[., ALL, ;, }, break, ;, case, Token, ., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry, (, )]
[:, ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst]
[., ARRAYLIT, :, ObjectType, arrayType, =, (, ObjectType, ), getTypeRegistry, (, ), ., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;]
[;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;]
[;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;]
[., getNativeType, (, JSTypeNative, ., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (]
[), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst]
[., ARRAY_TYPE, ), ;, ConcreteInstanceType, inst, =, createConcreteInstance, (, arrayType, ), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret]
[;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, .]
[), ;, allInstantiatedTypes, ., add, (, inst, ), ;, ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType]
[;, ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (, ret]
[., add, (, inst, ), ;, ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;]
[), ;, ret, =, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (]
[=, inst, ;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (, ret, ,, expr]
[;, break, ;, default, :, ret, =, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (, ret, ,, expr, ., getJSType]
[=, ConcreteType, ., NONE, ;, }, return, createTypeIntersection, (, ret, ,, expr, ., getJSType, (, ), ), ;, }, private]
[;, }, return, createTypeIntersection, (, ret, ,, expr, ., getJSType, (, ), ), ;, }, private, ConcreteType, createTypeIntersection, (, ConcreteType]
[., NONE, ;, }, return, createTypeIntersection, (, ret, ,, expr, ., getJSType, (, ), ), ;, }, private, ConcreteType, createTypeIntersection]
[;, }, private, ConcreteType, createTypeIntersection, (, ConcreteType, concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key, =, new, ConcreteJSTypePair, (, concreteType]
[,, expr, ., getJSType, (, ), ), ;, }, private, ConcreteType, createTypeIntersection, (, ConcreteType, concreteType, ,, JSType, jsType, ), {]
[), ;, }, private, ConcreteType, createTypeIntersection, (, ConcreteType, concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key, =, new, ConcreteJSTypePair, (]
[., getJSType, (, ), ), ;, }, private, ConcreteType, createTypeIntersection, (, ConcreteType, concreteType, ,, JSType, jsType, ), {, ConcreteJSTypePair, key]
[;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, ), {, return, ret]
[,, jsType, ), ;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, )]
[), ;, ConcreteType, ret, =, typeIntersectionMemos, ., get, (, key, ), ;, if, (, ret, !=, null, ), {, return]
[;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (, jsType, ==, null, ||, jsType, .]
[., get, (, key, ), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (, jsType]
[), ;, if, (, ret, !=, null, ), {, return, ret, ;, }, if, (, jsType, ==, null, ||, jsType]
[), {, return, ret, ;, }, if, (, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||, concreteType, .]
[!=, null, ), {, return, ret, ;, }, if, (, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||]
[), {, return, ret, ;, }, if, (, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||, concreteType, .]
[;, }, if, (, jsType, ==, null, ||, jsType, ., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), )]
[), {, ret, =, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (]
[||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (]
[||, jsType, ., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else]
[==, null, ||, jsType, ., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;]
[||, jsType, ., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else]
[||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (]
[., isUnknownType, (, ), ||, concreteType, ., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (]
[), {, ret, =, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (]
[., isNone, (, ), ), {, ret, =, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (, ), ||]
[=, concreteType, ;, }, else, if, (, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {]
[;, }, else, if, (, concreteType, ., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {, ret, =]
[), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {, Preconditions, ., checkState]
[||, concreteType, ., isSingleton, (, ), ), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;]
[., isUnion, (, ), ||, concreteType, ., isSingleton, (, ), ), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (]
[), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {, Preconditions, ., checkState]
[., isSingleton, (, ), ), {, ret, =, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else]
[=, concreteType, ., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {, Preconditions, ., checkState, (, concreteType, .]
[;, }, else, {, Preconditions, ., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType]
[., intersectWith, (, createTypeWithSubTypes, (, jsType, ), ), ;, }, else, {, Preconditions, ., checkState, (, concreteType, ., isAll, (]
[), ;, }, else, {, Preconditions, ., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (]
[), ), ;, }, else, {, Preconditions, ., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes]
[;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes]
[., checkState, (, concreteType, ., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =]
[), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (]
[., isAll, (, ), ), ;, ret, =, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =, ret, ., intersectWith, (]
[=, createTypeWithSubTypes, (, jsType, ), ;, }, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), )]
[;, }, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType]
[), ;, }, ret, =, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType]
[=, ret, ., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, .]
[;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (, functionType]
[., intersectWith, (, ConcreteType, ., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (]
[), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (]
[., createForTypes, (, allInstantiatedTypes, ), ), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {, ret]
[), ), ;, for, (, ConcreteFunctionType, functionType, :, concreteType, ., getFunctions, (, ), ), {, ret, =, ret, ., unionWith]
[), {, ret, =, ret, ., unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes]
[., getFunctions, (, ), ), {, ret, =, ret, ., unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype]
[=, ret, ., unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), )]
[;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), ), {, ret, =, ret, ., unionWith, (]
[., unionWith, (, functionType, ), ;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), ), {, ret]
[), ;, }, for, (, ConcreteInstanceType, prototype, :, concreteType, ., getPrototypeTypes, (, ), ), {, ret, =, ret, ., unionWith]
[), {, ret, =, ret, ., unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances]
[., getPrototypeTypes, (, ), ), {, ret, =, ret, ., unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance]
[=, ret, ., unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), )]
[;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if, (, !, instance, ., instanceType]
[., unionWith, (, prototype, ), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if]
[), ;, }, for, (, ConcreteInstanceType, instance, :, concreteType, ., getInstances, (, ), ), {, if, (, !, instance, .]
[), {, if, (, !, instance, ., instanceType, ., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, ), )]
[., getInstances, (, ), ), {, if, (, !, instance, ., instanceType, ., isInstanceType, (, ), &&, !, instance, .]
[), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret]
[&&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }]
[&&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }]
[., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (, instance]
[., instanceType, ., isInstanceType, (, ), &&, !, instance, ., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith]
[), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret]
[), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret]
[., isFunctionPrototype, (, ), ), {, ret, =, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put]
[=, ret, ., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret, ), ;, return]
[;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret, ), ;, return, ret, ;, }, @, Override, public, ConcreteFunctionType]
[., unionWith, (, instance, ), ;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret, ), ;, return, ret, ;]
[), ;, }, }, typeIntersectionMemos, ., put, (, key, ,, ret, ), ;, return, ret, ;, }, @, Override, public]
[;, return, ret, ;, }, @, Override, public, ConcreteFunctionType, createConcreteFunction, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, )]
[., put, (, key, ,, ret, ), ;, return, ret, ;, }, @, Override, public, ConcreteFunctionType, createConcreteFunction, (, Node, decl]
[,, ret, ), ;, return, ret, ;, }, @, Override, public, ConcreteFunctionType, createConcreteFunction, (, Node, decl, ,, StaticScope, <, ConcreteType]
[), ;, return, ret, ;, }, @, Override, public, ConcreteFunctionType, createConcreteFunction, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent]
[;, }, @, Override, public, ConcreteFunctionType, createConcreteFunction, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, ), {, ConcreteFunctionType, funType]
[;, if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this]
[., get, (, decl, ), ;, if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType]
[), ;, if, (, funType, ==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (]
[), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), )]
[==, null, ), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent]
[), {, functionFromDeclaration, ., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), )]
[;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (, decl, ., getJSType, (]
[., put, (, decl, ,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), ), ;, if, (]
[,, funType, =, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), ), ;, if, (, decl, ., getJSType, (]
[=, new, ConcreteFunctionType, (, this, ,, decl, ,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=]
[), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (, decl, ., getJSType]
[,, decl, ,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, .]
[,, parent, ), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (]
[), ), ;, if, (, decl, ., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (, decl, .]
[), {, functionFromJSType, ., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ,, funType, ), ;, }]
[!=, null, ), {, functionFromJSType, ., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ,, funType, )]
[., getJSType, (, ), !=, null, ), {, functionFromJSType, ., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (]
[), {, functionFromJSType, ., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ,, funType, ), ;, }]
[;, }, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument]
[., put, (, decl, ., getJSType, (, ), ., toMaybeFunctionType, (, ), ,, funType, ), ;, }, }, return, funType]
[,, funType, ), ;, }, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {]
[., toMaybeFunctionType, (, ), ,, funType, ), ;, }, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (]
[., getJSType, (, ), ., toMaybeFunctionType, (, ), ,, funType, ), ;, }, }, return, funType, ;, }, @, Override]
[), ;, }, }, return, funType, ;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, .]
[;, }, @, Override, public, ConcreteInstanceType, createConcreteInstance, (, ObjectType, instanceType, ), {, Preconditions, ., checkArgument, (, !, instanceType, ., isFunctionType]
[;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType, .]
[., checkArgument, (, !, instanceType, ., isFunctionType, (, ), ||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, )]
[), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType]
[||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (]
[||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (]
[., isFunctionType, (, ), ||, instanceType, ==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =]
[), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType]
[==, getTypeRegistry, (, ), ., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, )]
[), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType]
[., getNativeType, (, U2U_CONSTRUCTOR_TYPE, ), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType]
[), ), ;, ConcreteInstanceType, instType, =, instanceFromJSType, ., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {]
[;, if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this]
[., get, (, instanceType, ), ;, if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,, instType]
[), ;, if, (, instType, ==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (]
[), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this, ,, instanceType, ), ), ;, }]
[==, null, ), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this, ,, instanceType, ), )]
[), {, instanceFromJSType, ., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this, ,, instanceType, ), ), ;, }]
[;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return, functionFromDeclaration, ., get, (, decl, )]
[., put, (, instanceType, ,, instType, =, new, ConcreteInstanceType, (, this, ,, instanceType, ), ), ;, }, return, instType, ;]
[,, instType, =, new, ConcreteInstanceType, (, this, ,, instanceType, ), ), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (]
[=, new, ConcreteInstanceType, (, this, ,, instanceType, ), ), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl]
[), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return, functionFromDeclaration, ., get, (, decl]
[,, instanceType, ), ), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return, functionFromDeclaration, .]
[), ), ;, }, return, instType, ;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return, functionFromDeclaration, ., get, (]
[;, }, ConcreteFunctionType, getConcreteFunction, (, Node, decl, ), {, return, functionFromDeclaration, ., get, (, decl, ), ;, }, @, Override]
[;, }, @, Override, public, ConcreteFunctionType, getConcreteFunction, (, FunctionType, functionType, ), {, return, functionFromJSType, ., get, (, functionType, ), ;]
[., get, (, decl, ), ;, }, @, Override, public, ConcreteFunctionType, getConcreteFunction, (, FunctionType, functionType, ), {, return, functionFromJSType, .]
[), ;, }, @, Override, public, ConcreteFunctionType, getConcreteFunction, (, FunctionType, functionType, ), {, return, functionFromJSType, ., get, (, functionType, )]
[;, }, @, Override, public, ConcreteInstanceType, getConcreteInstance, (, ObjectType, instanceType, ), {, return, instanceFromJSType, ., get, (, instanceType, ), ;]
[., get, (, functionType, ), ;, }, @, Override, public, ConcreteInstanceType, getConcreteInstance, (, ObjectType, instanceType, ), {, return, instanceFromJSType, .]
[), ;, }, @, Override, public, ConcreteInstanceType, getConcreteInstance, (, ObjectType, instanceType, ), {, return, instanceFromJSType, ., get, (, instanceType, )]
[;, }, @, Override, public, StaticScope, <, ConcreteType, >, createFunctionScope, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent, )]
[., get, (, instanceType, ), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, createFunctionScope, (, Node, decl, ,, StaticScope]
[), ;, }, @, Override, public, StaticScope, <, ConcreteType, >, createFunctionScope, (, Node, decl, ,, StaticScope, <, ConcreteType, >, parent]
[;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,]
[), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME]
[), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME]
[;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,]
[., declareSlot, (, ConcreteFunctionType, ., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, )]
[,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType]
[., CALL_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot]
[), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME]
[;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =, decl, ., getFirstChild]
[., declareSlot, (, ConcreteFunctionType, ., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, )]
[,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =]
[., THIS_SLOT_NAME, ,, decl, ), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node]
[), ;, scope, ., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =, decl, .]
[;, for, (, Node, n, =, decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;]
[., declareSlot, (, ConcreteFunctionType, ., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =, decl, ., getFirstChild, (, )]
[,, decl, ), ;, for, (, Node, n, =, decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild]
[., RETURN_SLOT_NAME, ,, decl, ), ;, for, (, Node, n, =, decl, ., getFirstChild, (, ), ., getNext, (, )]
[), ;, for, (, Node, n, =, decl, ., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, )]
[;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, scope, ., declareSlot, (, n, .]
[., getFirstChild, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, ), ), {, scope, .]
[., getNext, (, ), ., getFirstChild, (, ), ;, n, !=, null, ;, n, =, n, ., getNext, (, )]
[., getFirstChild, (, ), ., getNext, (, ), ., getFirstChild, (, ), ;, n, !=, null, ;, n, =, n]
[;, n, =, n, ., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,]
[!=, null, ;, n, =, n, ., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (]
[;, n, =, n, ., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,]
[=, n, ., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, )]
[), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ), ;, }, scope, ., initForScopeRoot, (]
[., getNext, (, ), ), {, scope, ., declareSlot, (, n, ., getString, (, ), ,, n, ), ;, }]
[;, }, scope, ., initForScopeRoot, (, decl, ., getLastChild, (, ), ), ;, return, scope, ;, }, @, Override, public]
[., declareSlot, (, n, ., getString, (, ), ,, n, ), ;, }, scope, ., initForScopeRoot, (, decl, ., getLastChild]
[,, n, ), ;, }, scope, ., initForScopeRoot, (, decl, ., getLastChild, (, ), ), ;, return, scope, ;, }]
[., getString, (, ), ,, n, ), ;, }, scope, ., initForScopeRoot, (, decl, ., getLastChild, (, ), ), ;]
[), ;, }, scope, ., initForScopeRoot, (, decl, ., getLastChild, (, ), ), ;, return, scope, ;, }, @, Override]
[;, return, scope, ;, }, @, Override, public, StaticScope, <, ConcreteType, >, createInstanceScope, (, ObjectType, instanceType, ), {, ConcreteScope, parentScope]
[., initForScopeRoot, (, decl, ., getLastChild, (, ), ), ;, return, scope, ;, }, @, Override, public, StaticScope, <, ConcreteType]
[), ;, return, scope, ;, }, @, Override, public, StaticScope, <, ConcreteType, >, createInstanceScope, (, ObjectType, instanceType, ), {, ConcreteScope]
[., getLastChild, (, ), ), ;, return, scope, ;, }, @, Override, public, StaticScope, <, ConcreteType, >, createInstanceScope, (, ObjectType]
[;, }, @, Override, public, StaticScope, <, ConcreteType, >, createInstanceScope, (, ObjectType, instanceType, ), {, ConcreteScope, parentScope, =, null, ;]
[;, ObjectType, implicitProto, =, instanceType, ., getImplicitPrototype, (, ), ;, if, (, implicitProto, !=, null, &&, !, implicitProto, ., isUnknownType]
[;, if, (, implicitProto, !=, null, &&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (]
[., getImplicitPrototype, (, ), ;, if, (, implicitProto, !=, null, &&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType]
[), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (, ConcreteScope, ), prototype, ., getScope, (, )]
[&&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (]
[!=, null, &&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope]
[&&, !, implicitProto, ., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (]
[), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (, ConcreteScope, ), prototype, ., getScope, (, )]
[), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (, ConcreteScope, ), prototype, ., getScope, (, )]
[., isUnknownType, (, ), ), {, ConcreteInstanceType, prototype, =, createConcreteInstance, (, implicitProto, ), ;, parentScope, =, (, ConcreteScope, ), prototype]
[;, parentScope, =, (, ConcreteScope, ), prototype, ., getScope, (, ), ;, }, ConcreteScope, scope, =, new, ConcreteScope, (, parentScope]
[), ;, parentScope, =, (, ConcreteScope, ), prototype, ., getScope, (, ), ;, }, ConcreteScope, scope, =, new, ConcreteScope, (]
[=, (, ConcreteScope, ), prototype, ., getScope, (, ), ;, }, ConcreteScope, scope, =, new, ConcreteScope, (, parentScope, ), ;]
[;, }, ConcreteScope, scope, =, new, ConcreteScope, (, parentScope, ), ;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (]
[;, }, ConcreteScope, scope, =, new, ConcreteScope, (, parentScope, ), ;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (]
[., getScope, (, ), ;, }, ConcreteScope, scope, =, new, ConcreteScope, (, parentScope, ), ;, for, (, String, propName, :]
[;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (, ), ), {, scope, ., declareSlot, (, propName, ,, null]
[), ;, for, (, String, propName, :, instanceType, ., getOwnPropertyNames, (, ), ), {, scope, ., declareSlot, (, propName, ,]
[), {, scope, ., declareSlot, (, propName, ,, null, ), ;, }, return, scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType]
[., getOwnPropertyNames, (, ), ), {, scope, ., declareSlot, (, propName, ,, null, ), ;, }, return, scope, ;, }]
[;, }, return, scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {, Set, <, ConcreteType, >, set, =, null]
[., declareSlot, (, propName, ,, null, ), ;, }, return, scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {]
[,, null, ), ;, }, return, scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {, Set, <, ConcreteType, >]
[), ;, }, return, scope, ;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {, Set, <, ConcreteType, >, set, =]
[;, }, ConcreteType, createUnionWithSubTypes, (, ConcreteType, type, ), {, Set, <, ConcreteType, >, set, =, null, ;, if, (, type]
[;, if, (, type, ., isInstance, (, ), ), {, set, =, getSubTypes, (, type, ., toInstance, (, ), )]
[), {, set, =, getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return, ConcreteType, ., createForTypes, (, set]
[., isInstance, (, ), ), {, set, =, getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return, ConcreteType]
[=, getSubTypes, (, type, ., toInstance, (, ), ), ;, }, return, ConcreteType, ., createForTypes, (, set, ), ., unionWith]
[;, }, return, ConcreteType, ., createForTypes, (, set, ), ., unionWith, (, type, ), ;, }, private, Set, <, ConcreteType]
[), ;, }, return, ConcreteType, ., createForTypes, (, set, ), ., unionWith, (, type, ), ;, }, private, Set, <]
[., toInstance, (, ), ), ;, }, return, ConcreteType, ., createForTypes, (, set, ), ., unionWith, (, type, ), ;]
[;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (, type, ., getConstructorType, (, )]
[., unionWith, (, type, ), ;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (]
[., createForTypes, (, set, ), ., unionWith, (, type, ), ;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType]
[), ., unionWith, (, type, ), ;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if]
[), ;, }, private, Set, <, ConcreteType, >, getSubTypes, (, ConcreteInstanceType, type, ), {, if, (, type, ., getConstructorType, (]
[), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;, getSubTypes, (]
[==, null, ), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;]
[., getConstructorType, (, ), ==, null, ), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, .]
[), {, return, null, ;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;, getSubTypes, (]
[;, }, Set, <, ConcreteType, >, set, =, Sets, ., newHashSet, (, ), ;, getSubTypes, (, type, ., getConstructorType, (]
[;, getSubTypes, (, type, ., getConstructorType, (, ), ., getJSType, (, ), ,, set, ), ;, return, set, ;, }]
[., newHashSet, (, ), ;, getSubTypes, (, type, ., getConstructorType, (, ), ., getJSType, (, ), ,, set, ), ;]
[;, return, set, ;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set, ), {, if]
[,, set, ), ;, return, set, ;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set]
[., getJSType, (, ), ,, set, ), ;, return, set, ;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set]
[., getConstructorType, (, ), ., getJSType, (, ), ,, set, ), ;, return, set, ;, }, private, boolean, getSubTypes, (]
[), ;, return, set, ;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set, ), {]
[;, }, private, boolean, getSubTypes, (, FunctionType, type, ,, Set, <, ConcreteType, >, set, ), {, if, (, type, .]
[), {, for, (, FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType, (, sub]
[!=, null, ), {, for, (, FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType]
[., getSubTypes, (, ), !=, null, ), {, for, (, FunctionType, sub, :, type, ., getSubTypes, (, ), ), {]
[), {, for, (, FunctionType, sub, :, type, ., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType, (, sub]
[), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (, concrete, ., isFunction, (, ), &&, concrete, .]
[., getSubTypes, (, ), ), {, ConcreteType, concrete, =, createType, (, sub, ), ;, if, (, concrete, ., isFunction, (]
[;, if, (, concrete, ., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null]
[), ;, if, (, concrete, ., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=]
[), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains]
[&&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null, ), {, concrete, =, concrete, ., toFunction, (]
[., isFunction, (, ), &&, concrete, ., toFunction, (, ), ., getInstanceType, (, ), !=, null, ), {, concrete, =]
[), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains]
[!=, null, ), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set]
[., getInstanceType, (, ), !=, null, ), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;]
[., toFunction, (, ), ., getInstanceType, (, ), !=, null, ), {, concrete, =, concrete, ., toFunction, (, ), .]
[), {, concrete, =, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains]
[=, concrete, ., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains, (, concrete, )]
[;, if, (, !, set, ., contains, (, concrete, ), ), {, set, ., add, (, concrete, ), ;, if]
[., getInstanceType, (, ), ;, if, (, !, set, ., contains, (, concrete, ), ), {, set, ., add, (]
[., toFunction, (, ), ., getInstanceType, (, ), ;, if, (, !, set, ., contains, (, concrete, ), ), {]
[), {, set, ., add, (, concrete, ), ;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {]
[), {, set, ., add, (, concrete, ), ;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {]
[., contains, (, concrete, ), ), {, set, ., add, (, concrete, ), ;, if, (, !, getSubTypes, (, sub]
[), ), {, set, ., add, (, concrete, ), ;, if, (, !, getSubTypes, (, sub, ,, set, ), )]
[;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {, return, false, ;, }, }, }, else, {]
[., add, (, concrete, ), ;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {, return, false, ;]
[), ;, if, (, !, getSubTypes, (, sub, ,, set, ), ), {, return, false, ;, }, }, }, else]
[), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;, set, ., add, (]
[), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;, set, ., add, (]
[,, set, ), ), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;, set]
[), ), {, return, false, ;, }, }, }, else, {, set, ., clear, (, ), ;, set, ., add]
[;, }, }, }, else, {, set, ., clear, (, ), ;, set, ., add, (, ConcreteType, ., ALL, )]
[;, set, ., add, (, ConcreteType, ., ALL, ), ;, return, false, ;, }, }, }, return, true, ;, }]
[., clear, (, ), ;, set, ., add, (, ConcreteType, ., ALL, ), ;, return, false, ;, }, }, }]
[;, return, false, ;, }, }, }, return, true, ;, }, static, class, ConcreteJSTypePair, {, final, ConcreteType, concrete, ;, final]
[., add, (, ConcreteType, ., ALL, ), ;, return, false, ;, }, }, }, return, true, ;, }, static, class]
[), ;, return, false, ;, }, }, }, return, true, ;, }, static, class, ConcreteJSTypePair, {, final, ConcreteType, concrete, ;]
[., ALL, ), ;, return, false, ;, }, }, }, return, true, ;, }, static, class, ConcreteJSTypePair, {, final, ConcreteType]
[;, }, }, }, return, true, ;, }, static, class, ConcreteJSTypePair, {, final, ConcreteType, concrete, ;, final, JSType, jstype, ;]
[;, }, static, class, ConcreteJSTypePair, {, final, ConcreteType, concrete, ;, final, JSType, jstype, ;, final, int, hashcode, ;, ConcreteJSTypePair, (]
[=, concrete, ;, this, ., jstype, =, jstype, ;, this, ., hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode]
[., concrete, =, concrete, ;, this, ., jstype, =, jstype, ;, this, ., hashcode, =, concrete, ., hashCode, (, )]
[;, this, ., jstype, =, jstype, ;, this, ., hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, )]
[=, jstype, ;, this, ., hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int]
[., jstype, =, jstype, ;, this, ., hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }]
[;, this, ., hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (]
[=, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype]
[., hashcode, =, concrete, ., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {]
[;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=, null, ?, jstype, ., hashCode, (, ), :, 0]
[+, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=, null, ?, jstype, ., hashCode]
[., hashCode, (, ), +, getJSTypeHashCode, (, ), ;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=, null]
[;, }, private, int, getJSTypeHashCode, (, ), {, return, jstype, !=, null, ?, jstype, ., hashCode, (, ), :, 0]
[;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||, jstype, ==, null, )]
[?, jstype, ., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (]
[!=, null, ?, jstype, ., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {]
[?, jstype, ., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (]
[:, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||, jstype, ==]
[., hashCode, (, ), :, 0, ;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==]
[;, }, private, boolean, equalsJSType, (, JSType, jsType, ), {, if, (, jsType, ==, null, ||, jstype, ==, null, )]
[), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (, this, ., jstype, ), ;]
[||, jstype, ==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (, this]
[==, null, ||, jstype, ==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals]
[||, jstype, ==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (, this]
[), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (, this, ., jstype, ), ;]
[==, null, ), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (, this, ., jstype]
[), {, return, jstype, ==, jsType, ;, }, else, {, return, jsType, ., equals, (, this, ., jstype, ), ;]
[;, }, else, {, return, jsType, ., equals, (, this, ., jstype, ), ;, }, }, @, Override, public, boolean]
[==, jsType, ;, }, else, {, return, jsType, ., equals, (, this, ., jstype, ), ;, }, }, @, Override]
[;, }, else, {, return, jsType, ., equals, (, this, ., jstype, ), ;, }, }, @, Override, public, boolean]
[;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, o, instanceof, ConcreteJSTypePair, ), {]
[., equals, (, this, ., jstype, ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {]
[), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, o, instanceof, ConcreteJSTypePair, )]
[., jstype, ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, o, instanceof]
[), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (, pair, ., concrete, ., equals, (, this]
[instanceof, ConcreteJSTypePair, ), {, ConcreteJSTypePair, pair, =, (, ConcreteJSTypePair, ), o, ;, if, (, (, pair, ., concrete, ., equals]
[;, if, (, (, pair, ., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype]
[;, if, (, (, pair, ., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {]
[&&, equalsJSType, (, pair, ., jstype, ), ), ), {, return, true, ;, }, }, return, false, ;, }, @]
[., equals, (, this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype, ), ), ), {, return, true, ;]
[., concrete, ., equals, (, this, ., concrete, ), &&, equalsJSType, (, pair, ., jstype, ), ), ), {, return]
[), &&, equalsJSType, (, pair, ., jstype, ), ), ), {, return, true, ;, }, }, return, false, ;, }]
[., concrete, ), &&, equalsJSType, (, pair, ., jstype, ), ), ), {, return, true, ;, }, }, return, false]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {]
[), ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, )]
[., jstype, ), ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, public, int, hashCode]
[;, }, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, return, hashcode, ;, }, }]
[;, }, @, Override, public, int, hashCode, (, ), {, return, hashcode, ;, }, }, }]
[;, }, }, }]
