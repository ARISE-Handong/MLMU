[;, private, static, long, convertByYear, (, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, return, to, ., getDateTimeMillis]
[;, private, static, long, convertByYear, (, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, return, to, ., getDateTimeMillis]
[;, }, private, static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, long, newInstant]
[., getDateTimeMillis, (, from, ., year, (, ), ., get, (, instant, ), ,, from, ., monthOfYear, (, ), .]
[,, from, ., monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get, (]
[., get, (, instant, ), ,, from, ., monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth]
[., year, (, ), ., get, (, instant, ), ,, from, ., monthOfYear, (, ), ., get, (, instant, )]
[), ,, from, ., monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get]
[,, from, ., dayOfMonth, (, ), ., get, (, instant, ), ,, from, ., millisOfDay, (, ), ., get, (]
[., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get, (, instant, ), ,, from, ., millisOfDay]
[., monthOfYear, (, ), ., get, (, instant, ), ,, from, ., dayOfMonth, (, ), ., get, (, instant, )]
[), ,, from, ., dayOfMonth, (, ), ., get, (, instant, ), ,, from, ., millisOfDay, (, ), ., get]
[,, from, ., millisOfDay, (, ), ., get, (, instant, ), ), ;, }, private, static, long, convertByWeekyear, (, final]
[., get, (, instant, ), ,, from, ., millisOfDay, (, ), ., get, (, instant, ), ), ;, }, private]
[., dayOfMonth, (, ), ., get, (, instant, ), ,, from, ., millisOfDay, (, ), ., get, (, instant, )]
[), ,, from, ., millisOfDay, (, ), ., get, (, instant, ), ), ;, }, private, static, long, convertByWeekyear, (]
[), ;, }, private, static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,, Chronology, to, ), {, long]
[., get, (, instant, ), ), ;, }, private, static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,]
[., millisOfDay, (, ), ., get, (, instant, ), ), ;, }, private, static, long, convertByWeekyear, (, final, long, instant]
[), ), ;, }, private, static, long, convertByWeekyear, (, final, long, instant, ,, Chronology, from, ,, Chronology, to, ), {]
[=, to, ., weekyear, (, ), ., set, (, 0, ,, from, ., weekyear, (, ), ., get, (, instant]
[;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get]
[., set, (, 0, ,, from, ., weekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to]
[., weekyear, (, ), ., set, (, 0, ,, from, ., weekyear, (, ), ., get, (, instant, ), )]
[,, from, ., weekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., weekOfWeekyear, (, )]
[), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), .]
[., get, (, instant, ), ), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,, from]
[., weekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set]
[), ), ;, newInstant, =, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, )]
[=, to, ., weekOfWeekyear, (, ), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (, instant]
[;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get]
[., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to]
[., weekOfWeekyear, (, ), ., set, (, newInstant, ,, from, ., weekOfWeekyear, (, ), ., get, (, instant, ), )]
[,, from, ., weekOfWeekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., dayOfWeek, (, )]
[), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), .]
[., get, (, instant, ), ), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,, from]
[., weekOfWeekyear, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set]
[), ), ;, newInstant, =, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,, from, ., dayOfWeek, (, )]
[=, to, ., dayOfWeek, (, ), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (, instant]
[;, newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,, from, ., millisOfDay, (, ), ., get]
[., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (, instant, ), ), ;, newInstant, =, to]
[., dayOfWeek, (, ), ., set, (, newInstant, ,, from, ., dayOfWeek, (, ), ., get, (, instant, ), )]
[,, from, ., dayOfWeek, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., millisOfDay, (, )]
[), ;, newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,, from, ., millisOfDay, (, ), .]
[., get, (, instant, ), ), ;, newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,, from]
[., dayOfWeek, (, ), ., get, (, instant, ), ), ;, newInstant, =, to, ., millisOfDay, (, ), ., set]
[), ), ;, newInstant, =, to, ., millisOfDay, (, ), ., set, (, newInstant, ,, from, ., millisOfDay, (, )]
[=, to, ., millisOfDay, (, ), ., set, (, newInstant, ,, from, ., millisOfDay, (, ), ., get, (, instant]
[;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =, new, Instant, (, -, 12219292800000L, ), ;, private, static, final]
[., set, (, newInstant, ,, from, ., millisOfDay, (, ), ., get, (, instant, ), ), ;, return, newInstant, ;]
[., millisOfDay, (, ), ., set, (, newInstant, ,, from, ., millisOfDay, (, ), ., get, (, instant, ), )]
[,, from, ., millisOfDay, (, ), ., get, (, instant, ), ), ;, return, newInstant, ;, }, static, final, Instant]
[), ;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =, new, Instant, (, -, 12219292800000L, ), ;, private, static]
[., get, (, instant, ), ), ;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =, new, Instant, (, -]
[., millisOfDay, (, ), ., get, (, instant, ), ), ;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =]
[), ), ;, return, newInstant, ;, }, static, final, Instant, DEFAULT_CUTOVER, =, new, Instant, (, -, 12219292800000L, ), ;, private]
[;, }, static, final, Instant, DEFAULT_CUTOVER, =, new, Instant, (, -, 12219292800000L, ), ;, private, static, final, Map, <, DateTimeZone]
[;, private, static, final, Map, <, DateTimeZone, ,, ArrayList, <, GJChronology, >, >, cCache, =, new, HashMap, <, DateTimeZone, ,]
[), ;, private, static, final, Map, <, DateTimeZone, ,, ArrayList, <, GJChronology, >, >, cCache, =, new, HashMap, <, DateTimeZone]
[), ;, private, static, final, Map, <, DateTimeZone, ,, ArrayList, <, GJChronology, >, >, cCache, =, new, HashMap, <, DateTimeZone]
[;, public, static, GJChronology, getInstanceUTC, (, ), {, return, getInstance, (, DateTimeZone, ., UTC, ,, DEFAULT_CUTOVER, ,, 4, ), ;]
[;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault, (, ), ,, DEFAULT_CUTOVER, ,]
[,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault]
[., UTC, ,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone]
[,, 4, ), ;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault, (, )]
[), ;, }, public, static, GJChronology, getInstance, (, ), {, return, getInstance, (, DateTimeZone, ., getDefault, (, ), ,, DEFAULT_CUTOVER]
[;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,, DEFAULT_CUTOVER, ,, 4, )]
[,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone]
[., getDefault, (, ), ,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {]
[,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,, DEFAULT_CUTOVER]
[), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ), {, return, getInstance, (, zone, ,, DEFAULT_CUTOVER, ,, 4]
[;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return, getInstance, (, zone, ,, gregorianCutover]
[,, DEFAULT_CUTOVER, ,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return]
[,, 4, ), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return, getInstance, (]
[), ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ), {, return, getInstance, (, zone, ,]
[;, }, public, static, synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, zone, =]
[,, gregorianCutover, ,, 4, ), ;, }, public, static, synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int]
[,, 4, ), ;, }, public, static, synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int, minDaysInFirstWeek, )]
[), ;, }, public, static, synchronized, GJChronology, getInstance, (, DateTimeZone, zone, ,, ReadableInstant, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, zone]
[=, DateTimeUtils, ., getZone, (, zone, ), ;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =]
[;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =]
[., getZone, (, zone, ), ;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =, DEFAULT_CUTOVER, ;]
[), ;, Instant, cutoverInstant, ;, if, (, gregorianCutover, ==, null, ), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant]
[), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =]
[==, null, ), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate]
[), {, cutoverInstant, =, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =]
[=, DEFAULT_CUTOVER, ;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (]
[;, }, else, {, cutoverInstant, =, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (, cutoverInstant, .]
[=, gregorianCutover, ., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,, GregorianChronology]
[;, LocalDate, cutoverDate, =, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,, GregorianChronology, ., getInstance, (, zone, ), )]
[., toInstant, (, ), ;, LocalDate, cutoverDate, =, new, LocalDate, (, cutoverInstant, ., getMillis, (, ), ,, GregorianChronology, ., getInstance]
[;, if, (, cutoverDate, ., getYear, (, ), <=, 0, ), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }]
[,, GregorianChronology, ., getInstance, (, zone, ), ), ;, if, (, cutoverDate, ., getYear, (, ), <=, 0, ), {]
[., getMillis, (, ), ,, GregorianChronology, ., getInstance, (, zone, ), ), ;, if, (, cutoverDate, ., getYear, (, )]
[), ;, if, (, cutoverDate, ., getYear, (, ), <=, 0, ), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", ), ;]
[., getInstance, (, zone, ), ), ;, if, (, cutoverDate, ., getYear, (, ), <=, 0, ), {, throw, new]
[), ), ;, if, (, cutoverDate, ., getYear, (, ), <=, 0, ), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", )]
[), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }, }, GJChronology, chrono, ;, synchronized, (, cCache, ), {, ArrayList]
[<=, 0, ), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }, }, GJChronology, chrono, ;, synchronized, (, cCache, )]
[., getYear, (, ), <=, 0, ), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }, }, GJChronology, chrono, ;]
[), {, throw, new, IllegalArgumentException, (, "Cutover too early. Must be on or after 0001-01-01.", ), ;, }, }, GJChronology, chrono, ;, synchronized, (, cCache, ), {, ArrayList]
[;, }, }, GJChronology, chrono, ;, synchronized, (, cCache, ), {, ArrayList, <, GJChronology, >, chronos, =, cCache, ., get]
[), ;, }, }, GJChronology, chrono, ;, synchronized, (, cCache, ), {, ArrayList, <, GJChronology, >, chronos, =, cCache, .]
[), {, ArrayList, <, GJChronology, >, chronos, =, cCache, ., get, (, zone, ), ;, if, (, chronos, ==, null]
[;, if, (, chronos, ==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;, cCache]
[., get, (, zone, ), ;, if, (, chronos, ==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >]
[), ;, if, (, chronos, ==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;]
[), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;, cCache, ., put, (, zone, ,, chronos]
[==, null, ), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;, cCache, ., put, (, zone]
[), {, chronos, =, new, ArrayList, <, GJChronology, >, (, 2, ), ;, cCache, ., put, (, zone, ,, chronos]
[=, new, ArrayList, <, GJChronology, >, (, 2, ), ;, cCache, ., put, (, zone, ,, chronos, ), ;, }]
[;, cCache, ., put, (, zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =, chronos, .]
[), ;, cCache, ., put, (, zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =, chronos]
[;, }, else, {, for, (, int, i, =, chronos, ., size, (, ), ;, --, i, >=, 0, ;]
[., put, (, zone, ,, chronos, ), ;, }, else, {, for, (, int, i, =, chronos, ., size, (]
[,, chronos, ), ;, }, else, {, for, (, int, i, =, chronos, ., size, (, ), ;, --, i]
[), ;, }, else, {, for, (, int, i, =, chronos, ., size, (, ), ;, --, i, >=, 0]
[;, --, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek]
[., size, (, ), ;, --, i, >=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, )]
[;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (]
[>=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, .]
[>=, 0, ;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, .]
[;, ), {, chrono, =, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (]
[=, chronos, ., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, .]
[;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, )]
[., get, (, i, ), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (]
[), ;, if, (, minDaysInFirstWeek, ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (]
[), {, return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new]
[&&, cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if]
[==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return]
[&&, cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if]
[., getMinimumDaysInFirstWeek, (, ), &&, cutoverInstant, ., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;]
[), {, return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new]
[., equals, (, chrono, ., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if, (, zone]
[), ), {, return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =]
[., getGregorianCutover, (, ), ), ), {, return, chrono, ;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC]
[;, }, }, }, if, (, zone, ==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (, JulianChronology, .]
[), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (]
[==, DateTimeZone, ., UTC, ), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,]
[), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (]
[., UTC, ), {, chrono, =, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, .]
[=, new, GJChronology, (, JulianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek]
[;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new]
[,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (]
[., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;]
[,, minDaysInFirstWeek, ), ,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono]
[), ,, GregorianChronology, ., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance]
[,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;]
[., getInstance, (, zone, ,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, .]
[,, minDaysInFirstWeek, ), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,]
[), ,, cutoverInstant, ), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, )]
[), ;, }, else, {, chrono, =, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =]
[=, getInstance, (, DateTimeZone, ., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance]
[;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono]
[,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,]
[., UTC, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone]
[,, minDaysInFirstWeek, ), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, .]
[), ;, chrono, =, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,]
[=, new, GJChronology, (, ZonedChronology, ., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology]
[;, }, chronos, ., add, (, chrono, ), ;, }, return, chrono, ;, }, public, static, GJChronology, getInstance, (, DateTimeZone]
[,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (, chrono]
[., getInstance, (, chrono, ,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, )]
[,, zone, ), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, .]
[), ,, chrono, ., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (]
[,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (, chrono, ), ;, }, return]
[., iJulianChronology, ,, chrono, ., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (, chrono, ), ;]
[,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (, chrono, ), ;, }, return, chrono, ;, }, public]
[., iGregorianChronology, ,, chrono, ., iCutoverInstant, ), ;, }, chronos, ., add, (, chrono, ), ;, }, return, chrono, ;]
[), ;, }, chronos, ., add, (, chrono, ), ;, }, return, chrono, ;, }, public, static, GJChronology, getInstance, (]
[., iCutoverInstant, ), ;, }, chronos, ., add, (, chrono, ), ;, }, return, chrono, ;, }, public, static, GJChronology]
[;, }, return, chrono, ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, long, gregorianCutover, ,, int, minDaysInFirstWeek, )]
[., add, (, chrono, ), ;, }, return, chrono, ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, long]
[), ;, }, return, chrono, ;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, long, gregorianCutover, ,, int, minDaysInFirstWeek]
[;, }, public, static, GJChronology, getInstance, (, DateTimeZone, zone, ,, long, gregorianCutover, ,, int, minDaysInFirstWeek, ), {, Instant, cutoverInstant, ;]
[), {, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance]
[==, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =, new, Instant, (]
[), {, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance]
[., getMillis, (, ), ), {, cutoverInstant, =, null, ;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, )]
[=, null, ;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance, (, zone, ,]
[;, }, else, {, cutoverInstant, =, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance, (, zone, ,, cutoverInstant, ,]
[=, new, Instant, (, gregorianCutover, ), ;, }, return, getInstance, (, zone, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, }, private]
[;, }, return, getInstance, (, zone, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, }, private, JulianChronology, iJulianChronology, ;, private, GregorianChronology, iGregorianChronology]
[), ;, }, return, getInstance, (, zone, ,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, }, private, JulianChronology, iJulianChronology, ;, private, GregorianChronology]
[;, }, private, JulianChronology, iJulianChronology, ;, private, GregorianChronology, iGregorianChronology, ;, private, Instant, iCutoverInstant, ;, private, long, iCutoverMillis, ;, private, long]
[,, cutoverInstant, ,, minDaysInFirstWeek, ), ;, }, private, JulianChronology, iJulianChronology, ;, private, GregorianChronology, iGregorianChronology, ;, private, Instant, iCutoverInstant, ;, private]
[,, minDaysInFirstWeek, ), ;, }, private, JulianChronology, iJulianChronology, ;, private, GregorianChronology, iGregorianChronology, ;, private, Instant, iCutoverInstant, ;, private, long, iCutoverMillis]
[), ;, }, private, JulianChronology, iJulianChronology, ;, private, GregorianChronology, iGregorianChronology, ;, private, Instant, iCutoverInstant, ;, private, long, iCutoverMillis, ;, private]
[,, new, Object, [, ], {, julian, ,, gregorian, ,, cutoverInstant, }, ), ;, }, private, GJChronology, (, Chronology, base]
[), ;, }, private, GJChronology, (, Chronology, base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super]
[), ;, }, private, GJChronology, (, Chronology, base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {, super]
[,, gregorian, ,, cutoverInstant, }, ), ;, }, private, GJChronology, (, Chronology, base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,]
[,, cutoverInstant, }, ), ;, }, private, GJChronology, (, Chronology, base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant]
[}, ), ;, }, private, GJChronology, (, Chronology, base, ,, JulianChronology, julian, ,, GregorianChronology, gregorian, ,, Instant, cutoverInstant, ), {]
[,, new, Object, [, ], {, julian, ,, gregorian, ,, cutoverInstant, }, ), ;, }, private, Object, readResolve, (, )]
[), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (, getZone, (, ), ,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (]
[), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (, getZone, (, ), ,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (]
[,, gregorian, ,, cutoverInstant, }, ), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (, getZone, (, )]
[,, cutoverInstant, }, ), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (, getZone, (, ), ,, iCutoverInstant]
[}, ), ;, }, private, Object, readResolve, (, ), {, return, getInstance, (, getZone, (, ), ,, iCutoverInstant, ,, getMinimumDaysInFirstWeek]
[;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (, (, base, =, getBase, (, ), )]
[,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (]
[,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (, (, base]
[), ;, }, public, DateTimeZone, getZone, (, ), {, Chronology, base, ;, if, (, (, base, =, getBase, (, )]
[), {, return, base, ., getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology, withUTC, (]
[!=, null, ), {, return, base, ., getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology]
[=, getBase, (, ), ), !=, null, ), {, return, base, ., getZone, (, ), ;, }, return, DateTimeZone, .]
[), !=, null, ), {, return, base, ., getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public]
[), {, return, base, ., getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology, withUTC, (]
[;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology, withUTC, (, ), {, return, withZone, (, DateTimeZone, ., UTC]
[., getZone, (, ), ;, }, return, DateTimeZone, ., UTC, ;, }, public, Chronology, withUTC, (, ), {, return, withZone]
[;, }, public, Chronology, withUTC, (, ), {, return, withZone, (, DateTimeZone, ., UTC, ), ;, }, public, Chronology, withZone]
[., UTC, ;, }, public, Chronology, withUTC, (, ), {, return, withZone, (, DateTimeZone, ., UTC, ), ;, }, public]
[;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {, zone, =, DateTimeZone]
[), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {, zone, =]
[., UTC, ), ;, }, public, Chronology, withZone, (, DateTimeZone, zone, ), {, if, (, zone, ==, null, ), {]
[), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {]
[==, null, ), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, )]
[), {, zone, =, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {]
[=, DateTimeZone, ., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;]
[;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (, zone, ,]
[., getDefault, (, ), ;, }, if, (, zone, ==, getZone, (, ), ), {, return, this, ;, }, return]
[), {, return, this, ;, }, return, getInstance, (, zone, ,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public]
[==, getZone, (, ), ), {, return, this, ;, }, return, getInstance, (, zone, ,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, )]
[), {, return, this, ;, }, return, getInstance, (, zone, ,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public]
[;, }, return, getInstance, (, zone, ,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, long, getDateTimeMillis, (, int]
[;, }, public, long, getDateTimeMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ,, int, millisOfDay, ), throws, IllegalArgumentException]
[,, iCutoverInstant, ,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, long, getDateTimeMillis, (, int, year, ,, int, monthOfYear, ,, int]
[,, getMinimumDaysInFirstWeek, (, ), ), ;, }, public, long, getDateTimeMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ,]
[), ;, }, public, long, getDateTimeMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ,, int, millisOfDay, ), throws]
[), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =]
[!=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long]
[=, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }]
[), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =]
[;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (]
[,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[,, dayOfMonth, ,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[,, millisOfDay, ), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, )]
[), ;, }, long, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if]
[;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant]
[,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis]
[,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year]
[,, millisOfDay, ), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear]
[), ;, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth]
[), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant]
[<, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if]
[), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant]
[=, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, )]
[;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw]
[,, monthOfYear, ,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist"]
[,, dayOfMonth, ,, millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;]
[,, millisOfDay, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }]
[), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant]
[), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;, }, public, long, getDateTimeMillis, (, int]
[>=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;, }, public, long, getDateTimeMillis]
[), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;, }, public, long, getDateTimeMillis, (, int]
[;, }, }, return, instant, ;, }, public, long, getDateTimeMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ,]
[), ;, }, }, return, instant, ;, }, public, long, getDateTimeMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth]
[;, }, public, long, getDateTimeMillis, (, int, year, ,, int, monthOfYear, ,, int, dayOfMonth, ,, int, hourOfDay, ,, int, minuteOfHour]
[), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond]
[!=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute]
[=, getBase, (, ), ), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[), !=, null, ), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,]
[), {, return, base, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond]
[;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long]
[,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {]
[,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =]
[,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, .]
[,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (]
[,, secondOfMinute, ,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,]
[,, millisOfSecond, ), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[), ;, }, long, instant, ;, try, {, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,]
[=, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;]
[;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29, ), {, throw]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch]
[,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, )]
[,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if]
[,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear]
[,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2]
[,, secondOfMinute, ,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth]
[,, millisOfSecond, ), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29]
[), ;, }, catch, (, IllegalFieldValueException, ex, ), {, if, (, monthOfYear, !=, 2, ||, dayOfMonth, !=, 29, ), {]
[), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,]
[||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[!=, 2, ||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,]
[||, dayOfMonth, !=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,]
[!=, 29, ), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,]
[), {, throw, ex, ;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,]
[;, }, instant, =, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,]
[=, iGregorianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;]
[;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (]
[,, monthOfYear, ,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, )]
[,, 28, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw]
[,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;]
[,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }]
[,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (]
[,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <]
[), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, )]
[), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (]
[>=, iCutoverMillis, ), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, .]
[), {, throw, ex, ;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (]
[;, }, }, if, (, instant, <, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,]
[), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,]
[<, iCutoverMillis, ), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,]
[), {, instant, =, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,]
[=, iJulianChronology, ., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;]
[;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;]
[., getDateTimeMillis, (, year, ,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (]
[,, monthOfYear, ,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, )]
[,, dayOfMonth, ,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw]
[,, hourOfDay, ,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException]
[,, minuteOfHour, ,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist"]
[,, secondOfMinute, ,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;]
[,, millisOfSecond, ), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }]
[), ;, if, (, instant, >=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant]
[), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;, }, public, Instant, getGregorianCutover, (, )]
[>=, iCutoverMillis, ), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;, }, public, Instant, getGregorianCutover]
[), {, throw, new, IllegalArgumentException, (, "Specified date does not exist", ), ;, }, }, return, instant, ;, }, public, Instant, getGregorianCutover, (, )]
[;, }, }, return, instant, ;, }, public, Instant, getGregorianCutover, (, ), {, return, iCutoverInstant, ;, }, public, int, getMinimumDaysInFirstWeek]
[), ;, }, }, return, instant, ;, }, public, Instant, getGregorianCutover, (, ), {, return, iCutoverInstant, ;, }, public, int]
[;, }, public, Instant, getGregorianCutover, (, ), {, return, iCutoverInstant, ;, }, public, int, getMinimumDaysInFirstWeek, (, ), {, return, iGregorianChronology]
[;, }, public, int, getMinimumDaysInFirstWeek, (, ), {, return, iGregorianChronology, ., getMinimumDaysInFirstWeek, (, ), ;, }, public, boolean, equals, (]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, ), {, return, true, ;]
[., getMinimumDaysInFirstWeek, (, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, this, ==, obj, )]
[), {, return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj]
[==, obj, ), {, return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology]
[), {, return, true, ;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj]
[;, }, if, (, obj, instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==]
[), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, )]
[instanceof, GJChronology, ), {, GJChronology, chrono, =, (, GJChronology, ), obj, ;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek]
[;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (]
[;, return, iCutoverMillis, ==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (]
[;, }, return, false, ;, }, public, int, hashCode, (, ), {, return, "GJ", ., hashCode, (, ), *, 11]
[&&, getZone, (, ), ., equals, (, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public]
[&&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (, chrono, ., getZone]
[==, chrono, ., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals]
[&&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (, chrono, ., getZone]
[., iCutoverMillis, &&, getMinimumDaysInFirstWeek, (, ), ==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (, chrono]
[&&, getZone, (, ), ., equals, (, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public]
[==, chrono, ., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (, chrono, ., getZone, (, ), ), ;]
[&&, getZone, (, ), ., equals, (, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public]
[., getMinimumDaysInFirstWeek, (, ), &&, getZone, (, ), ., equals, (, chrono, ., getZone, (, ), ), ;, }, return]
[;, }, return, false, ;, }, public, int, hashCode, (, ), {, return, "GJ", ., hashCode, (, ), *, 11]
[., equals, (, chrono, ., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, )]
[), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return, "GJ", ., hashCode, (, ), *]
[., getZone, (, ), ), ;, }, return, false, ;, }, public, int, hashCode, (, ), {, return, "GJ", .]
[;, }, public, int, hashCode, (, ), {, return, "GJ", ., hashCode, (, ), *, 11, +, getZone, (, )]
[;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;, sb, ., append]
[+, iCutoverInstant, ., hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (]
[+, getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant, ., hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb]
[+, getZone, (, ), ., hashCode, (, ), +, getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant, ., hashCode, (, ), ;, }]
[*, 11, +, getZone, (, ), ., hashCode, (, ), +, getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant, ., hashCode, (, )]
[., hashCode, (, ), *, 11, +, getZone, (, ), ., hashCode, (, ), +, getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant]
[+, getZone, (, ), ., hashCode, (, ), +, getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant, ., hashCode, (, ), ;, }]
[+, getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant, ., hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb]
[., hashCode, (, ), +, getMinimumDaysInFirstWeek, (, ), +, iCutoverInstant, ., hashCode, (, ), ;, }, public, String, toString, (]
[+, iCutoverInstant, ., hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (]
[;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, ), ;, sb, ., append]
[., hashCode, (, ), ;, }, public, String, toString, (, ), {, StringBuffer, sb, =, new, StringBuffer, (, 60, )]
[;, sb, ., append, (, "GJChronology", ), ;, sb, ., append, (, '[', ), ;, sb, ., append, (, getZone]
[), ;, sb, ., append, (, "GJChronology", ), ;, sb, ., append, (, '[', ), ;, sb, ., append, (]
[;, sb, ., append, (, '[', ), ;, sb, ., append, (, getZone, (, ), ., getID, (, ), )]
[., append, (, "GJChronology", ), ;, sb, ., append, (, '[', ), ;, sb, ., append, (, getZone, (, )]
[), ;, sb, ., append, (, '[', ), ;, sb, ., append, (, getZone, (, ), ., getID, (, )]
[;, sb, ., append, (, getZone, (, ), ., getID, (, ), ), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, .]
[., append, (, '[', ), ;, sb, ., append, (, getZone, (, ), ., getID, (, ), ), ;, if]
[), ;, sb, ., append, (, getZone, (, ), ., getID, (, ), ), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER]
[;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter]
[., append, (, getZone, (, ), ., getID, (, ), ), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, ., getMillis, (]
[), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;]
[., getID, (, ), ), ;, if, (, iCutoverMillis, !=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append]
[), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (, withUTC, (, ), ., dayOfYear, (]
[!=, DEFAULT_CUTOVER, ., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (]
[), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (, withUTC, (, ), ., dayOfYear, (]
[., getMillis, (, ), ), {, sb, ., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (, withUTC, (]
[;, DateTimeFormatter, printer, ;, if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder, (, iCutoverMillis, ), ==, 0]
[., append, (, ",cutover=", ), ;, DateTimeFormatter, printer, ;, if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder]
[), ;, DateTimeFormatter, printer, ;, if, (, withUTC, (, ), ., dayOfYear, (, ), ., remainder, (, iCutoverMillis, ), ==]
[), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, )]
[==, 0, ), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime]
[., remainder, (, iCutoverMillis, ), ==, 0, ), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {]
[., dayOfYear, (, ), ., remainder, (, iCutoverMillis, ), ==, 0, ), {, printer, =, ISODateTimeFormat, ., date, (, )]
[), ==, 0, ), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, .]
[), {, printer, =, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, )]
[=, ISODateTimeFormat, ., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }, printer]
[;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }, printer, ., withChronology, (, withUTC, (, )]
[., date, (, ), ;, }, else, {, printer, =, ISODateTimeFormat, ., dateTime, (, ), ;, }, printer, ., withChronology]
[=, ISODateTimeFormat, ., dateTime, (, ), ;, }, printer, ., withChronology, (, withUTC, (, ), ), ., printTo, (, sb]
[;, }, printer, ., withChronology, (, withUTC, (, ), ), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if]
[., dateTime, (, ), ;, }, printer, ., withChronology, (, withUTC, (, ), ), ., printTo, (, sb, ,, iCutoverMillis]
[;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, ., append, (, ",mdfw=", ), ;, sb, .]
[., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, .]
[., withChronology, (, withUTC, (, ), ), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (]
[), ., printTo, (, sb, ,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb]
[,, iCutoverMillis, ), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, ., append, (, ",mdfw=", )]
[), ;, }, if, (, getMinimumDaysInFirstWeek, (, ), !=, 4, ), {, sb, ., append, (, ",mdfw=", ), ;, sb]
[), {, sb, ., append, (, ",mdfw=", ), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb]
[!=, 4, ), {, sb, ., append, (, ",mdfw=", ), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;]
[), {, sb, ., append, (, ",mdfw=", ), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb]
[;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb, ., append, (, ']', ), ;, return, sb]
[., append, (, ",mdfw=", ), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb, ., append, (]
[), ;, sb, ., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb, ., append, (, ']', ), ;, return]
[;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, ), ;, }, protected, void, assemble]
[., append, (, getMinimumDaysInFirstWeek, (, ), ), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString]
[), ;, }, sb, ., append, (, ']', ), ;, return, sb, ., toString, (, ), ;, }, protected, void]
[;, return, sb, ., toString, (, ), ;, }, protected, void, assemble, (, Fields, fields, ), {, Object, [, ]]
[., append, (, ']', ), ;, return, sb, ., toString, (, ), ;, }, protected, void, assemble, (, Fields, fields]
[), ;, return, sb, ., toString, (, ), ;, }, protected, void, assemble, (, Fields, fields, ), {, Object, []
[;, }, protected, void, assemble, (, Fields, fields, ), {, Object, [, ], params, =, (, Object, [, ], )]
[., toString, (, ), ;, }, protected, void, assemble, (, Fields, fields, ), {, Object, [, ], params, =, (]
[;, JulianChronology, julian, =, (, JulianChronology, ), params, [, 0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, []
[;, JulianChronology, julian, =, (, JulianChronology, ), params, [, 0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, []
[;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params, []
[;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params, []
[[, 0, ], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant]
[], ;, GregorianChronology, gregorian, =, (, GregorianChronology, ), params, [, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params]
[;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;]
[;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;]
[[, 1, ], ;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis]
[], ;, Instant, cutoverInstant, =, (, Instant, ), params, [, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, )]
[;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant]
[;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant]
[[, 2, ], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;]
[], ;, iCutoverMillis, =, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =]
[=, cutoverInstant, ., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if]
[;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null]
[., getMillis, (, ), ;, iJulianChronology, =, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase]
[=, julian, ;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {]
[;, iGregorianChronology, =, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {, return, ;]
[=, gregorian, ;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {, return, ;, }, if]
[;, iCutoverInstant, =, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (, julian]
[=, cutoverInstant, ;, if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek]
[;, if, (, getBase, (, ), !=, null, ), {, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek, (, )]
[), {, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {]
[!=, null, ), {, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, )]
[), {, return, ;, }, if, (, julian, ., getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {]
[), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, .]
[!=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear]
[., getMinimumDaysInFirstWeek, (, ), !=, gregorian, ., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration]
[), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, .]
[., getMinimumDaysInFirstWeek, (, ), ), {, throw, new, IllegalArgumentException, (, ), ;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis]
[;, }, iGapDuration, =, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (]
[=, iCutoverMillis, -, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay]
[;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, )]
[-, julianToGregorianByYear, (, iCutoverMillis, ), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, )]
[;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, )]
[), ;, fields, ., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis]
[;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond]
[., copyFieldsFrom, (, gregorian, ), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0]
[), ;, if, (, gregorian, ., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {, fields, .]
[), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis]
[==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond]
[., get, (, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (]
[., millisOfDay, (, ), ., get, (, iCutoverMillis, ), ==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (]
[), ==, 0, ), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, .]
[), {, fields, ., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay]
[., millisOfSecond, =, new, CutoverField, (, julian, ., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, )]
[,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, )]
[., millisOfSecond, (, ), ,, fields, ., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay]
[., millisOfSecond, ,, iCutoverMillis, ), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields]
[), ;, fields, ., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute]
[., millisOfDay, =, new, CutoverField, (, julian, ., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, )]
[,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, )]
[., millisOfDay, (, ), ,, fields, ., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute]
[., millisOfDay, ,, iCutoverMillis, ), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields]
[), ;, fields, ., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay]
[., secondOfMinute, =, new, CutoverField, (, julian, ., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, )]
[,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, )]
[., secondOfMinute, (, ), ,, fields, ., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay]
[., secondOfMinute, ,, iCutoverMillis, ), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields]
[), ;, fields, ., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour]
[., secondOfDay, =, new, CutoverField, (, julian, ., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, )]
[,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, )]
[., secondOfDay, (, ), ,, fields, ., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour]
[., secondOfDay, ,, iCutoverMillis, ), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields]
[), ;, fields, ., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay]
[., minuteOfHour, =, new, CutoverField, (, julian, ., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, )]
[,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, )]
[., minuteOfHour, (, ), ,, fields, ., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay]
[., minuteOfHour, ,, iCutoverMillis, ), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields]
[), ;, fields, ., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay]
[., minuteOfDay, =, new, CutoverField, (, julian, ., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, )]
[,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, )]
[., minuteOfDay, (, ), ,, fields, ., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay]
[., minuteOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields]
[), ;, fields, ., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday]
[., hourOfDay, =, new, CutoverField, (, julian, ., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, )]
[,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, )]
[., hourOfDay, (, ), ,, fields, ., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday]
[., hourOfDay, ,, iCutoverMillis, ), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields]
[), ;, fields, ., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay]
[., hourOfHalfday, =, new, CutoverField, (, julian, ., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, )]
[,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, )]
[., hourOfHalfday, (, ), ,, fields, ., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay]
[., hourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields]
[), ;, fields, ., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday]
[., clockhourOfDay, =, new, CutoverField, (, julian, ., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, )]
[,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, )]
[., clockhourOfDay, (, ), ,, fields, ., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday]
[., clockhourOfDay, ,, iCutoverMillis, ), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields]
[), ;, fields, ., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay]
[., clockhourOfHalfday, =, new, CutoverField, (, julian, ., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, )]
[,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, )]
[., clockhourOfHalfday, (, ), ,, fields, ., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian]
[,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay]
[., clockhourOfHalfday, ,, iCutoverMillis, ), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields]
[), ;, fields, ., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis]
[=, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields]
[., halfdayOfDay, =, new, CutoverField, (, julian, ., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }]
[;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era, (, ), ,, fields, ., era, ,]
[,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era]
[., halfdayOfDay, (, ), ,, fields, ., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField]
[,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era, (, ), ,, fields]
[., halfdayOfDay, ,, iCutoverMillis, ), ;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era, (, )]
[), ;, }, {, fields, ., era, =, new, CutoverField, (, julian, ., era, (, ), ,, fields, ., era]
[=, new, CutoverField, (, julian, ., era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }, {, fields]
[., era, =, new, CutoverField, (, julian, ., era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }]
[;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,]
[,, fields, ., era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year]
[., era, (, ), ,, fields, ., era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField]
[,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields]
[., era, ,, iCutoverMillis, ), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, )]
[), ;, }, {, fields, ., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year]
[=, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years]
[., year, =, new, ImpreciseCutoverField, (, julian, ., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (]
[,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;]
[., year, (, ), ,, fields, ., year, ,, iCutoverMillis, ), ;, fields, ., years, =, fields, ., year, .]
[,, iCutoverMillis, ), ;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =]
[., year, ,, iCutoverMillis, ), ;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, .]
[), ;, fields, ., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField]
[=, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (]
[., years, =, fields, ., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, .]
[;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, .]
[., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, .]
[., year, ., getDurationField, (, ), ;, fields, ., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,]
[=, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, )]
[., yearOfEra, =, new, ImpreciseCutoverField, (, julian, ., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, ., years, ,]
[;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, )]
[,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian]
[., yearOfEra, (, ), ,, fields, ., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =]
[,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, )]
[., yearOfEra, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra]
[,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra]
[., years, ,, iCutoverMillis, ), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields]
[), ;, fields, ., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis]
[=, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries]
[., centuryOfEra, =, new, ImpreciseCutoverField, (, julian, ., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields]
[;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (]
[,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;]
[., centuryOfEra, (, ), ,, fields, ., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =, fields, ., centuryOfEra, .]
[,, iCutoverMillis, ), ;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =]
[., centuryOfEra, ,, iCutoverMillis, ), ;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, .]
[), ;, fields, ., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField]
[=, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (]
[., centuries, =, fields, ., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, .]
[;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, .]
[., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, .]
[., centuryOfEra, ., getDurationField, (, ), ;, fields, ., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,]
[=, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,, fields, .]
[., yearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,]
[;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,]
[,, fields, ., yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =]
[., yearOfCentury, (, ), ,, fields, ., yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;]
[,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian]
[., yearOfCentury, ,, fields, ., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField]
[,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, )]
[., years, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear]
[,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear]
[., centuries, ,, iCutoverMillis, ), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields]
[), ;, fields, ., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null]
[=, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,]
[., monthOfYear, =, new, ImpreciseCutoverField, (, julian, ., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,, fields, .]
[;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (]
[,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =, fields, .]
[., monthOfYear, (, ), ,, fields, ., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, .]
[,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (]
[., monthOfYear, ,, null, ,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, .]
[,, fields, ., years, ,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;]
[,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =]
[., years, ,, iCutoverMillis, ), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, .]
[), ;, fields, ., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField]
[=, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (]
[., months, =, fields, ., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, .]
[;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,]
[., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, .]
[., monthOfYear, ., getDurationField, (, ), ;, fields, ., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,]
[=, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, )]
[., weekyear, =, new, ImpreciseCutoverField, (, julian, ., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,]
[;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (]
[,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, .]
[., weekyear, (, ), ,, fields, ., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =]
[,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;]
[., weekyear, ,, null, ,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (]
[,, iCutoverMillis, ,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, .]
[,, true, ), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =]
[), ;, fields, ., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField]
[=, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (]
[., weekyears, =, fields, ., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, .]
[;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,, fields, .]
[., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, .]
[., weekyear, ., getDurationField, (, ), ;, fields, ., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,]
[=, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, .]
[., weekyearOfCentury, =, new, ImpreciseCutoverField, (, julian, ., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,]
[;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear]
[,, fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover]
[., weekyearOfCentury, (, ), ,, fields, ., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;]
[,, fields, ., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year]
[., weekyearOfCentury, ,, fields, ., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian]
[,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling]
[., weekyears, ,, fields, ., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year, (, )]
[,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;]
[., centuries, ,, iCutoverMillis, ), ;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis]
[), ;, }, {, long, cutover, =, gregorian, ., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, .]
[;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,, fields, .]
[., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields]
[., year, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear]
[), ;, fields, ., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,, fields]
[=, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,, fields, ., years, ,, cutover, ,]
[., dayOfYear, =, new, CutoverField, (, julian, ., dayOfYear, (, ), ,, fields, ., dayOfYear, ,, fields, ., years, ,]
[;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear]
[,, fields, ., dayOfYear, ,, fields, ., years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =, gregorian]
[., dayOfYear, (, ), ,, fields, ., dayOfYear, ,, fields, ., years, ,, cutover, ,, false, ), ;, }, {]
[,, fields, ., years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, )]
[., dayOfYear, ,, fields, ., years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear]
[,, cutover, ,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis]
[., years, ,, cutover, ,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling]
[,, false, ), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;]
[), ;, }, {, long, cutover, =, gregorian, ., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, .]
[;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,, fields, .]
[., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields]
[., weekyear, (, ), ., roundCeiling, (, iCutoverMillis, ), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear]
[), ;, fields, ., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,, fields]
[=, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,]
[., weekOfWeekyear, =, new, CutoverField, (, julian, ., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,, fields, ., weekyears, ,]
[;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis]
[,, fields, ., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new]
[., weekOfWeekyear, (, ), ,, fields, ., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,, true, ), ;, }, {]
[,, fields, ., weekyears, ,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, .]
[., weekOfWeekyear, ,, fields, ., weekyears, ,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (]
[,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,]
[., weekyears, ,, cutover, ,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (]
[,, true, ), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, .]
[), ;, }, {, CutoverField, cf, =, new, CutoverField, (, julian, ., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,]
[;, cf, ., iRangeDurationField, =, fields, ., months, ;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (]
[,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =, fields, ., months, ;, fields, ., dayOfMonth, =]
[., dayOfMonth, (, ), ,, fields, ., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =, fields, ., months, ;]
[,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =, fields, ., months, ;, fields, ., dayOfMonth, =, cf, ;, }, }]
[., dayOfMonth, ,, iCutoverMillis, ), ;, cf, ., iRangeDurationField, =, fields, ., months, ;, fields, ., dayOfMonth, =, cf, ;]
[), ;, cf, ., iRangeDurationField, =, fields, ., months, ;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear]
[=, fields, ., months, ;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {]
[., iRangeDurationField, =, fields, ., months, ;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant]
[;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear, (, instant]
[., months, ;, fields, ., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear]
[=, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iJulianChronology, ,, iGregorianChronology]
[., dayOfMonth, =, cf, ;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iJulianChronology]
[;, }, }, long, julianToGregorianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;]
[;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;, }]
[,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iGregorianChronology]
[,, iGregorianChronology, ), ;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iGregorianChronology, ,, iJulianChronology]
[), ;, }, long, gregorianToJulianByYear, (, long, instant, ), {, return, convertByYear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;]
[;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;, }]
[,, iGregorianChronology, ,, iJulianChronology, ), ;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iJulianChronology]
[,, iJulianChronology, ), ;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iJulianChronology, ,, iGregorianChronology]
[), ;, }, long, julianToGregorianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iJulianChronology, ,, iGregorianChronology, ), ;]
[;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;, }]
[,, iJulianChronology, ,, iGregorianChronology, ), ;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iGregorianChronology]
[,, iGregorianChronology, ), ;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iGregorianChronology, ,, iJulianChronology]
[), ;, }, long, gregorianToJulianByWeekyear, (, long, instant, ), {, return, convertByWeekyear, (, instant, ,, iGregorianChronology, ,, iJulianChronology, ), ;]
[;, }, private, class, CutoverField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =, 3528501219481026402L]
[,, iGregorianChronology, ,, iJulianChronology, ), ;, }, private, class, CutoverField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static]
[,, iJulianChronology, ), ;, }, private, class, CutoverField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long]
[), ;, }, private, class, CutoverField, extends, BaseDateTimeField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long, serialVersionUID, =]
[private, static, final, long, serialVersionUID, =, 3528501219481026402L, ;, final, DateTimeField, iJulianField, ;, final, DateTimeField, iGregorianField, ;, final, long, iCutover, ;]
[), private, static, final, long, serialVersionUID, =, 3528501219481026402L, ;, final, DateTimeField, iJulianField, ;, final, DateTimeField, iGregorianField, ;, final, long, iCutover]
[;, final, DateTimeField, iJulianField, ;, final, DateTimeField, iGregorianField, ;, final, long, iCutover, ;, final, boolean, iConvertByWeekyear, ;, protected, DurationField, iDurationField]
[,, gregorianField, ,, cutoverMillis, ,, false, ), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,]
[,, cutoverMillis, ,, false, ), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear]
[,, false, ), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {]
[), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {, this, (]
[,, gregorianField, ,, null, ,, cutoverMillis, ,, convertByWeekyear, ), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField]
[,, null, ,, cutoverMillis, ,, convertByWeekyear, ), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, rangeField, ,]
[,, cutoverMillis, ,, convertByWeekyear, ), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, rangeField, ,, long, cutoverMillis]
[,, convertByWeekyear, ), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, rangeField, ,, long, cutoverMillis, ,, boolean]
[), ;, }, CutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, rangeField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, )]
[), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =]
[., getType, (, ), ), ;, iJulianField, =, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =]
[=, julianField, ;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField]
[;, iGregorianField, =, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, )]
[=, gregorianField, ;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if]
[;, iCutover, =, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField]
[=, cutoverMillis, ;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null]
[;, iConvertByWeekyear, =, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {]
[=, convertByWeekyear, ;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =]
[;, iDurationField, =, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, gregorianField, .]
[=, gregorianField, ., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (]
[;, if, (, rangeField, ==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==]
[., getDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;]
[), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, julianField]
[==, null, ), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField]
[), {, rangeField, =, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, julianField]
[=, gregorianField, ., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, julianField, ., getRangeDurationField, (]
[;, if, (, rangeField, ==, null, ), {, rangeField, =, julianField, ., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =]
[., getRangeDurationField, (, ), ;, if, (, rangeField, ==, null, ), {, rangeField, =, julianField, ., getRangeDurationField, (, ), ;]
[), {, rangeField, =, julianField, ., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =, rangeField, ;, }, public, boolean, isLenient]
[==, null, ), {, rangeField, =, julianField, ., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =, rangeField, ;, }, public]
[), {, rangeField, =, julianField, ., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =, rangeField, ;, }, public, boolean, isLenient]
[=, julianField, ., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =, rangeField, ;, }, public, boolean, isLenient, (, ), {]
[;, }, }, iRangeDurationField, =, rangeField, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int]
[., getRangeDurationField, (, ), ;, }, }, iRangeDurationField, =, rangeField, ;, }, public, boolean, isLenient, (, ), {, return, false]
[=, rangeField, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant]
[;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {]
[;, }, public, int, get, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, .]
[), {, return, iGregorianField, ., get, (, instant, ), ;, }, else, {, return, iJulianField, ., get, (, instant, )]
[>=, iCutover, ), {, return, iGregorianField, ., get, (, instant, ), ;, }, else, {, return, iJulianField, ., get, (]
[), {, return, iGregorianField, ., get, (, instant, ), ;, }, else, {, return, iJulianField, ., get, (, instant, )]
[;, }, else, {, return, iJulianField, ., get, (, instant, ), ;, }, }, public, String, getAsText, (, long, instant]
[., get, (, instant, ), ;, }, else, {, return, iJulianField, ., get, (, instant, ), ;, }, }, public]
[), ;, }, else, {, return, iJulianField, ., get, (, instant, ), ;, }, }, public, String, getAsText, (, long]
[;, }, }, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, )]
[., get, (, instant, ), ;, }, }, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if]
[), ;, }, }, public, String, getAsText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover]
[), {, return, iGregorianField, ., getAsText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsText, (]
[>=, iCutover, ), {, return, iGregorianField, ., getAsText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, .]
[), {, return, iGregorianField, ., getAsText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsText, (]
[;, }, else, {, return, iJulianField, ., getAsText, (, instant, ,, locale, ), ;, }, }, public, String, getAsText, (]
[., getAsText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsText, (, instant, ,, locale, )]
[,, locale, ), ;, }, else, {, return, iJulianField, ., getAsText, (, instant, ,, locale, ), ;, }, }, public]
[), ;, }, else, {, return, iJulianField, ., getAsText, (, instant, ,, locale, ), ;, }, }, public, String, getAsText]
[;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsText, (, fieldValue]
[., getAsText, (, instant, ,, locale, ), ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, )]
[,, locale, ), ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, .]
[), ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsText, (]
[;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, ), {]
[., getAsText, (, fieldValue, ,, locale, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {]
[,, locale, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=]
[), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, if, (, instant, >=, iCutover, )]
[), {, return, iGregorianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsShortText, (]
[>=, iCutover, ), {, return, iGregorianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, .]
[), {, return, iGregorianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsShortText, (]
[;, }, else, {, return, iJulianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, }, public, String, getAsShortText, (]
[., getAsShortText, (, instant, ,, locale, ), ;, }, else, {, return, iJulianField, ., getAsShortText, (, instant, ,, locale, )]
[,, locale, ), ;, }, else, {, return, iJulianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, }, public]
[), ;, }, else, {, return, iJulianField, ., getAsShortText, (, instant, ,, locale, ), ;, }, }, public, String, getAsShortText]
[;, }, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsShortText, (, fieldValue]
[., getAsShortText, (, instant, ,, locale, ), ;, }, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, )]
[,, locale, ), ;, }, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, .]
[), ;, }, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, iGregorianField, ., getAsShortText, (]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iGregorianField, ., add, (, instant, ,]
[., getAsShortText, (, fieldValue, ,, locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {]
[,, locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iGregorianField, ., add]
[), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iGregorianField, ., add, (, instant]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iGregorianField, ., add, (, instant, ,]
[., add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {]
[,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iGregorianField, ., add]
[), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iGregorianField, ., add, (, instant]
[;, }, public, int, [, ], add, (, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,, int]
[., add, (, instant, ,, value, ), ;, }, public, int, [, ], add, (, ReadablePartial, partial, ,, int, fieldIndex]
[,, value, ), ;, }, public, int, [, ], add, (, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ]]
[), ;, }, public, int, [, ], add, (, ReadablePartial, partial, ,, int, fieldIndex, ,, int, [, ], values, ,]
[), {, return, values, ;, }, if, (, DateTimeUtils, ., isContiguous, (, partial, ), ), {, long, instant, =, 0L]
[==, 0, ), {, return, values, ;, }, if, (, DateTimeUtils, ., isContiguous, (, partial, ), ), {, long, instant]
[), {, return, values, ;, }, if, (, DateTimeUtils, ., isContiguous, (, partial, ), ), {, long, instant, =, 0L]
[;, }, if, (, DateTimeUtils, ., isContiguous, (, partial, ), ), {, long, instant, =, 0L, ;, for, (, int]
[), {, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (]
[., isContiguous, (, partial, ), ), {, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize]
[), ), {, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size]
[;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;]
[,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, instant, =, partial]
[;, i, <, isize, ;, i, ++, ), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (]
[., size, (, ), ;, i, <, isize, ;, i, ++, ), {, instant, =, partial, ., getFieldType, (, i]
[;, i, ++, ), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, )]
[<, isize, ;, i, ++, ), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, .]
[;, i, ++, ), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, )]
[), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set, (]
[++, ), {, instant, =, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set]
[=, partial, ., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set, (, instant, ,, values]
[;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (, partial, ,]
[., set, (, instant, ,, values, [, i, ], ), ;, }, instant, =, add, (, instant, ,, valueToAdd, )]
[., getField, (, GJChronology, ., this, ), ., set, (, instant, ,, values, [, i, ], ), ;, }, instant]
[., getFieldType, (, i, ), ., getField, (, GJChronology, ., this, ), ., set, (, instant, ,, values, [, i]
[), ., getField, (, GJChronology, ., this, ), ., set, (, instant, ,, values, [, i, ], ), ;, }]
[), ., set, (, instant, ,, values, [, i, ], ), ;, }, instant, =, add, (, instant, ,, valueToAdd]
[,, values, [, i, ], ), ;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, .]
[), ;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (, partial]
[[, i, ], ), ;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, ., this, .]
[], ), ;, }, instant, =, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (]
[=, add, (, instant, ,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (, partial, ,, instant, ), ;]
[;, return, GJChronology, ., this, ., get, (, partial, ,, instant, ), ;, }, else, {, return, super, ., add]
[,, valueToAdd, ), ;, return, GJChronology, ., this, ., get, (, partial, ,, instant, ), ;, }, else, {, return]
[), ;, return, GJChronology, ., this, ., get, (, partial, ,, instant, ), ;, }, else, {, return, super, .]
[;, }, else, {, return, super, ., add, (, partial, ,, fieldIndex, ,, values, ,, valueToAdd, ), ;, }, }]
[., get, (, partial, ,, instant, ), ;, }, else, {, return, super, ., add, (, partial, ,, fieldIndex, ,]
[,, instant, ), ;, }, else, {, return, super, ., add, (, partial, ,, fieldIndex, ,, values, ,, valueToAdd, )]
[), ;, }, else, {, return, super, ., add, (, partial, ,, fieldIndex, ,, values, ,, valueToAdd, ), ;, }]
[;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifference, (, minuendInstant]
[., add, (, partial, ,, fieldIndex, ,, values, ,, valueToAdd, ), ;, }, }, public, int, getDifference, (, long, minuendInstant]
[,, fieldIndex, ,, values, ,, valueToAdd, ), ;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, )]
[,, values, ,, valueToAdd, ), ;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[,, valueToAdd, ), ;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, .]
[), ;, }, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifference, (]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifferenceAsLong]
[), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant]
[;, }, public, long, set, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {]
[,, subtrahendInstant, ), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, if, (, instant, >=]
[), ;, }, public, long, set, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, )]
[), {, instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {]
[>=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover]
[), {, instant, =, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {]
[=, iGregorianField, ., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant]
[;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian]
[., set, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration]
[,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if]
[<, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {]
[<, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value]
[+, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, )]
[<, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {]
[=, gregorianToJulian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException]
[;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (]
[), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType]
[), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null]
[!=, value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, )]
[), !=, value, ), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,, Integer, ., valueOf, (, value]
[), {, throw, new, IllegalFieldValueException, (, iGregorianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null]
[;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (, instant]
[,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, else, {, instant, =]
[., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }]
[,, null, ,, null, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, value]
[., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[), ,, null, ,, null, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,]
[,, null, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, value, ), ;]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, value, ), ;, if, (]
[=, iJulianField, ., set, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant]
[;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian]
[., set, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration]
[,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if]
[>=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value]
[-, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, )]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {]
[=, julianToGregorian, (, instant, ), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException]
[;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (]
[), ;, }, if, (, get, (, instant, ), !=, value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType]
[), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null]
[!=, value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, )]
[), !=, value, ), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,, Integer, ., valueOf, (, value]
[), {, throw, new, IllegalFieldValueException, (, iJulianField, ., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null]
[;, }, }, }, return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale]
[,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, return, instant, ;, }]
[., getType, (, ), ,, Integer, ., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }]
[,, null, ,, null, ), ;, }, }, }, return, instant, ;, }, public, long, set, (, long, instant, ,]
[., valueOf, (, value, ), ,, null, ,, null, ), ;, }, }, }, return, instant, ;, }, public, long]
[), ,, null, ,, null, ), ;, }, }, }, return, instant, ;, }, public, long, set, (, long, instant]
[,, null, ), ;, }, }, }, return, instant, ;, }, public, long, set, (, long, instant, ,, String, text]
[), ;, }, }, }, return, instant, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale]
[;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, if, (, instant, >=]
[), {, instant, =, iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover]
[>=, iCutover, ), {, instant, =, iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant]
[), {, instant, =, iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover]
[=, iGregorianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if]
[;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian]
[., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant]
[,, text, ,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover]
[,, locale, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }]
[<, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (]
[<, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[+, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[<, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (]
[=, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, text]
[;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;]
[=, iJulianField, ., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if]
[;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian]
[., set, (, instant, ,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant]
[,, text, ,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover]
[,, locale, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[>=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, DurationField, getDurationField, (]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, DurationField]
[-, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, DurationField]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, DurationField, getDurationField, (]
[=, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, DurationField, getDurationField, (, ), {, return]
[;, }, }, }, return, instant, ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField]
[), ;, }, }, }, return, instant, ;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public]
[;, }, public, DurationField, getDurationField, (, ), {, return, iDurationField, ;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeDurationField]
[;, }, public, DurationField, getRangeDurationField, (, ), {, return, iRangeDurationField, ;, }, public, boolean, isLeap, (, long, instant, ), {]
[;, }, public, boolean, isLeap, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, .]
[), {, return, iGregorianField, ., isLeap, (, instant, ), ;, }, else, {, return, iJulianField, ., isLeap, (, instant, )]
[>=, iCutover, ), {, return, iGregorianField, ., isLeap, (, instant, ), ;, }, else, {, return, iJulianField, ., isLeap, (]
[), {, return, iGregorianField, ., isLeap, (, instant, ), ;, }, else, {, return, iJulianField, ., isLeap, (, instant, )]
[;, }, else, {, return, iJulianField, ., isLeap, (, instant, ), ;, }, }, public, int, getLeapAmount, (, long, instant]
[., isLeap, (, instant, ), ;, }, else, {, return, iJulianField, ., isLeap, (, instant, ), ;, }, }, public]
[), ;, }, else, {, return, iJulianField, ., isLeap, (, instant, ), ;, }, }, public, int, getLeapAmount, (, long]
[;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField]
[., isLeap, (, instant, ), ;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, instant, >=]
[), ;, }, }, public, int, getLeapAmount, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[), {, return, iGregorianField, ., getLeapAmount, (, instant, ), ;, }, else, {, return, iJulianField, ., getLeapAmount, (, instant, )]
[>=, iCutover, ), {, return, iGregorianField, ., getLeapAmount, (, instant, ), ;, }, else, {, return, iJulianField, ., getLeapAmount, (]
[), {, return, iGregorianField, ., getLeapAmount, (, instant, ), ;, }, else, {, return, iJulianField, ., getLeapAmount, (, instant, )]
[;, }, else, {, return, iJulianField, ., getLeapAmount, (, instant, ), ;, }, }, public, DurationField, getLeapDurationField, (, ), {]
[., getLeapAmount, (, instant, ), ;, }, else, {, return, iJulianField, ., getLeapAmount, (, instant, ), ;, }, }, public]
[), ;, }, else, {, return, iJulianField, ., getLeapAmount, (, instant, ), ;, }, }, public, DurationField, getLeapDurationField, (, )]
[;, }, }, public, DurationField, getLeapDurationField, (, ), {, return, iGregorianField, ., getLeapDurationField, (, ), ;, }, public, int, getMinimumValue]
[., getLeapAmount, (, instant, ), ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return, iGregorianField, ., getLeapDurationField, (, )]
[), ;, }, }, public, DurationField, getLeapDurationField, (, ), {, return, iGregorianField, ., getLeapDurationField, (, ), ;, }, public, int]
[;, }, public, int, getMinimumValue, (, ), {, return, iJulianField, ., getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (]
[., getLeapDurationField, (, ), ;, }, public, int, getMinimumValue, (, ), {, return, iJulianField, ., getMinimumValue, (, ), ;, }]
[;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ), {, return, iJulianField, ., getMinimumValue, (, partial, ), ;, }, public]
[., getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ), {, return, iJulianField, ., getMinimumValue, (, partial]
[;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, return, iJulianField, ., getMinimumValue, (]
[., getMinimumValue, (, partial, ), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {]
[), ;, }, public, int, getMinimumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, return, iJulianField, ., getMinimumValue]
[;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, <, iCutover, ), {, return, iJulianField, .]
[., getMinimumValue, (, partial, ,, values, ), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant]
[,, values, ), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, <, iCutover, ), {]
[), ;, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, <, iCutover, ), {, return, iJulianField]
[), {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, )]
[<, iCutover, ), {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (]
[), {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, )]
[;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (, instant, ,]
[., getMinimumValue, (, instant, ), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField]
[), ;, }, int, min, =, iGregorianField, ., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (, instant]
[;, instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {, min]
[., getMinimumValue, (, instant, ), ;, instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant]
[), ;, instant, =, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {]
[=, iGregorianField, ., set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {, min, =, iGregorianField]
[;, if, (, instant, <, iCutover, ), {, min, =, iGregorianField, ., get, (, iCutover, ), ;, }, return, min]
[., set, (, instant, ,, min, ), ;, if, (, instant, <, iCutover, ), {, min, =, iGregorianField, ., get]
[,, min, ), ;, if, (, instant, <, iCutover, ), {, min, =, iGregorianField, ., get, (, iCutover, ), ;]
[), ;, if, (, instant, <, iCutover, ), {, min, =, iGregorianField, ., get, (, iCutover, ), ;, }, return]
[), {, min, =, iGregorianField, ., get, (, iCutover, ), ;, }, return, min, ;, }, public, int, getMaximumValue, (]
[<, iCutover, ), {, min, =, iGregorianField, ., get, (, iCutover, ), ;, }, return, min, ;, }, public, int]
[), {, min, =, iGregorianField, ., get, (, iCutover, ), ;, }, return, min, ;, }, public, int, getMaximumValue, (]
[=, iGregorianField, ., get, (, iCutover, ), ;, }, return, min, ;, }, public, int, getMaximumValue, (, ), {, return]
[;, }, return, min, ;, }, public, int, getMaximumValue, (, ), {, return, iGregorianField, ., getMaximumValue, (, ), ;, }]
[., get, (, iCutover, ), ;, }, return, min, ;, }, public, int, getMaximumValue, (, ), {, return, iGregorianField, .]
[), ;, }, return, min, ;, }, public, int, getMaximumValue, (, ), {, return, iGregorianField, ., getMaximumValue, (, ), ;]
[;, }, public, int, getMaximumValue, (, ), {, return, iGregorianField, ., getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (]
[;, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField, .]
[., getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, )]
[), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, )]
[>=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (]
[), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, )]
[;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (, instant, ,]
[., getMaximumValue, (, instant, ), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =, iJulianField]
[), ;, }, int, max, =, iJulianField, ., getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (, instant]
[;, instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {, max]
[., getMaximumValue, (, instant, ), ;, instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant]
[), ;, instant, =, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {]
[=, iJulianField, ., set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField]
[;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,]
[., set, (, instant, ,, max, ), ;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get]
[,, max, ), ;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (, iJulianField, ., add]
[), ;, if, (, instant, >=, iCutover, ), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover]
[), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,, -, 1, ), ), ;, }]
[>=, iCutover, ), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,, -, 1, ), )]
[), {, max, =, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,, -, 1, ), ), ;, }]
[=, iJulianField, ., get, (, iJulianField, ., add, (, iCutover, ,, -, 1, ), ), ;, }, return, max, ;]
[;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =, GJChronology, ., getInstanceUTC]
[., get, (, iJulianField, ., add, (, iCutover, ,, -, 1, ), ), ;, }, return, max, ;, }, public]
[), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =, GJChronology, .]
[., add, (, iCutover, ,, -, 1, ), ), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial]
[,, -, 1, ), ), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long]
[), ), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =, GJChronology]
[), ), ;, }, return, max, ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =, GJChronology]
[;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ), {, long, instant, =, GJChronology, ., getInstanceUTC, (, ), ., set]
[;, return, getMaximumValue, (, instant, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ,, int, [, ], values, )]
[., set, (, partial, ,, 0L, ), ;, return, getMaximumValue, (, instant, ), ;, }, public, int, getMaximumValue, (, ReadablePartial]
[., getInstanceUTC, (, ), ., set, (, partial, ,, 0L, ), ;, return, getMaximumValue, (, instant, ), ;, }, public]
[,, 0L, ), ;, return, getMaximumValue, (, instant, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ,, int, []
[), ;, return, getMaximumValue, (, instant, ), ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ,, int, [, ], values]
[;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, Chronology, chrono, =, GJChronology, .]
[), ;, }, public, int, getMaximumValue, (, ReadablePartial, partial, ,, int, [, ], values, ), {, Chronology, chrono, =, GJChronology]
[;, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, )]
[., getInstanceUTC, (, ), ;, long, instant, =, 0L, ;, for, (, int, i, =, 0, ,, isize, =, partial]
[;, for, (, int, i, =, 0, ,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;]
[,, isize, =, partial, ., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DateTimeField, field, =]
[;, i, <, isize, ;, i, ++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField]
[., size, (, ), ;, i, <, isize, ;, i, ++, ), {, DateTimeField, field, =, partial, ., getFieldType, (]
[;, i, ++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;]
[<, isize, ;, i, ++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono]
[;, i, ++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;]
[), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (, values]
[++, ), {, DateTimeField, field, =, partial, ., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (]
[;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, .]
[., getField, (, chrono, ), ;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (, instant, ), )]
[., getFieldType, (, i, ), ., getField, (, chrono, ), ;, if, (, values, [, i, ], <=, field, .]
[), ., getField, (, chrono, ), ;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (, instant, )]
[), ;, if, (, values, [, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field]
[), {, instant, =, field, ., set, (, instant, ,, values, [, i, ], ), ;, }, }, return, getMaximumValue]
[<=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (, instant, ,, values, [, i]
[[, i, ], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (, instant, ,]
[], <=, field, ., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (, instant, ,, values, []
[), {, instant, =, field, ., set, (, instant, ,, values, [, i, ], ), ;, }, }, return, getMaximumValue]
[., getMaximumValue, (, instant, ), ), {, instant, =, field, ., set, (, instant, ,, values, [, i, ], )]
[), ), {, instant, =, field, ., set, (, instant, ,, values, [, i, ], ), ;, }, }, return]
[=, field, ., set, (, instant, ,, values, [, i, ], ), ;, }, }, return, getMaximumValue, (, instant, )]
[;, }, }, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (]
[., set, (, instant, ,, values, [, i, ], ), ;, }, }, return, getMaximumValue, (, instant, ), ;, }]
[,, values, [, i, ], ), ;, }, }, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (]
[), ;, }, }, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (, long, instant, ), {, if]
[[, i, ], ), ;, }, }, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (, long, instant]
[], ), ;, }, }, return, getMaximumValue, (, instant, ), ;, }, public, long, roundFloor, (, long, instant, ), {]
[;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField]
[), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =]
[), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[>=, iCutover, ), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {]
[), {, instant, =, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (]
[=, iGregorianField, ., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration]
[;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian]
[., roundFloor, (, instant, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }]
[<, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., roundFloor, (]
[<, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[+, iGapDuration, <, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =]
[<, iCutover, ), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[), {, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., roundFloor, (]
[=, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., roundFloor, (, instant, ), ;]
[;, }, }, }, else, {, instant, =, iJulianField, ., roundFloor, (, instant, ), ;, }, return, instant, ;, }]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., roundFloor, (, instant, ), ;, }, return, instant, ;]
[=, iJulianField, ., roundFloor, (, instant, ), ;, }, return, instant, ;, }, public, long, roundCeiling, (, long, instant, )]
[;, }, return, instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >=, iCutover, )]
[., roundFloor, (, instant, ), ;, }, return, instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if]
[), ;, }, return, instant, ;, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >=, iCutover]
[;, }, public, long, roundCeiling, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, instant, =, iGregorianField]
[), {, instant, =, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (]
[>=, iCutover, ), {, instant, =, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, .]
[), {, instant, =, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (]
[=, iGregorianField, ., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;]
[;, }, else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {]
[., roundCeiling, (, instant, ), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (]
[), ;, }, else, {, instant, =, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, )]
[=, iJulianField, ., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration]
[;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian]
[., roundCeiling, (, instant, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[>=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int]
[-, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (]
[=, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, )]
[;, }, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, ., max]
[), ;, }, }, }, return, instant, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, .]
[;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumTextLength, (, locale]
[;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumShortTextLength, (, locale]
[., max, (, iJulianField, ., getMaximumTextLength, (, locale, ), ,, iGregorianField, ., getMaximumTextLength, (, locale, ), ), ;, }, public]
[,, iGregorianField, ., getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math]
[., getMaximumTextLength, (, locale, ), ,, iGregorianField, ., getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale]
[), ,, iGregorianField, ., getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return]
[), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumShortTextLength, (]
[., getMaximumTextLength, (, locale, ), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max]
[), ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, Math, ., max, (, iJulianField, ., getMaximumShortTextLength]
[;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, julianToGregorianByWeekyear, (, instant, )]
[., max, (, iJulianField, ., getMaximumShortTextLength, (, locale, ), ,, iGregorianField, ., getMaximumShortTextLength, (, locale, ), ), ;, }, protected]
[,, iGregorianField, ., getMaximumShortTextLength, (, locale, ), ), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (]
[., getMaximumShortTextLength, (, locale, ), ,, iGregorianField, ., getMaximumShortTextLength, (, locale, ), ), ;, }, protected, long, julianToGregorian, (, long]
[), ,, iGregorianField, ., getMaximumShortTextLength, (, locale, ), ), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if]
[), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, julianToGregorianByWeekyear, (, instant]
[., getMaximumShortTextLength, (, locale, ), ), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (, iConvertByWeekyear, )]
[), ), ;, }, protected, long, julianToGregorian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, julianToGregorianByWeekyear, (]
[), {, return, julianToGregorianByWeekyear, (, instant, ), ;, }, else, {, return, julianToGregorianByYear, (, instant, ), ;, }, }, protected]
[;, }, else, {, return, julianToGregorianByYear, (, instant, ), ;, }, }, protected, long, gregorianToJulian, (, long, instant, ), {]
[), ;, }, else, {, return, julianToGregorianByYear, (, instant, ), ;, }, }, protected, long, gregorianToJulian, (, long, instant, )]
[;, }, }, protected, long, gregorianToJulian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, gregorianToJulianByWeekyear, (, instant]
[), ;, }, }, protected, long, gregorianToJulian, (, long, instant, ), {, if, (, iConvertByWeekyear, ), {, return, gregorianToJulianByWeekyear, (]
[), {, return, gregorianToJulianByWeekyear, (, instant, ), ;, }, else, {, return, gregorianToJulianByYear, (, instant, ), ;, }, }, }]
[;, }, else, {, return, gregorianToJulianByYear, (, instant, ), ;, }, }, }, private, final, class, ImpreciseCutoverField, extends, CutoverField, {]
[), ;, }, else, {, return, gregorianToJulianByYear, (, instant, ), ;, }, }, }, private, final, class, ImpreciseCutoverField, extends, CutoverField]
[;, }, }, }, private, final, class, ImpreciseCutoverField, extends, CutoverField, {, @, SuppressWarnings, (, "unused", ), private, static, final, long]
[), ;, }, }, }, private, final, class, ImpreciseCutoverField, extends, CutoverField, {, @, SuppressWarnings, (, "unused", ), private, static, final]
[private, static, final, long, serialVersionUID, =, 3410248757173576441L, ;, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {]
[), private, static, final, long, serialVersionUID, =, 3410248757173576441L, ;, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, )]
[;, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, long, cutoverMillis, ), {, this, (, julianField, ,, gregorianField, ,, null]
[,, gregorianField, ,, null, ,, cutoverMillis, ,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField]
[,, null, ,, cutoverMillis, ,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,]
[,, cutoverMillis, ,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis]
[,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ), {]
[), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ), {, this, (]
[,, gregorianField, ,, durationField, ,, cutoverMillis, ,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField]
[,, durationField, ,, cutoverMillis, ,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,]
[,, cutoverMillis, ,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, DurationField, rangeDurationField]
[,, false, ), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, DurationField, rangeDurationField, ,, long]
[), ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, DurationField, rangeDurationField, ,, long, cutoverMillis, )]
[,, gregorianField, ,, durationField, ,, cutoverMillis, ,, false, ), ;, iRangeDurationField, =, rangeDurationField, ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,]
[,, durationField, ,, cutoverMillis, ,, false, ), ;, iRangeDurationField, =, rangeDurationField, ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField]
[,, cutoverMillis, ,, false, ), ;, iRangeDurationField, =, rangeDurationField, ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField]
[,, false, ), ;, iRangeDurationField, =, rangeDurationField, ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,]
[), ;, iRangeDurationField, =, rangeDurationField, ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis]
[=, rangeDurationField, ;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear]
[;, }, ImpreciseCutoverField, (, DateTimeField, julianField, ,, DateTimeField, gregorianField, ,, DurationField, durationField, ,, long, cutoverMillis, ,, boolean, convertByWeekyear, ), {]
[,, gregorianField, ,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (]
[,, cutoverMillis, ,, convertByWeekyear, ), ;, if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,]
[,, convertByWeekyear, ), ;, if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,, this, )]
[), ;, if, (, durationField, ==, null, ), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,, this, ), ;, }]
[), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,, this, ), ;, }, iDurationField, =, durationField, ;, }, public, long]
[==, null, ), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,, this, ), ;, }, iDurationField, =, durationField, ;, }]
[), {, durationField, =, new, LinkedDurationField, (, iDurationField, ,, this, ), ;, }, iDurationField, =, durationField, ;, }, public, long]
[=, new, LinkedDurationField, (, iDurationField, ,, this, ), ;, }, iDurationField, =, durationField, ;, }, public, long, add, (, long]
[;, }, iDurationField, =, durationField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, if, (]
[,, this, ), ;, }, iDurationField, =, durationField, ;, }, public, long, add, (, long, instant, ,, int, value, )]
[), ;, }, iDurationField, =, durationField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, if]
[=, durationField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, if, (, instant, >=, iCutover, ), {]
[), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {]
[>=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover]
[), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {]
[=, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant]
[;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear]
[., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration]
[,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology]
[<, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology]
[), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, )]
[<, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (]
[+, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), .]
[<, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (]
[), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, )]
[), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=]
[;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,]
[., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, )]
[., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology]
[), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant]
[), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[<=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;]
[), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[=, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int]
[;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if]
[., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[,, -, 1, ), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (]
[), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;]
[), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;]
[;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,]
[., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, )]
[., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology]
[), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant]
[), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[<=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;]
[), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[=, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian]
[;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add]
[., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }]
[., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant]
[,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant]
[), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[=, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value]
[;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (]
[=, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant]
[;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian]
[., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration]
[,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[>=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, long, add, (]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, long]
[-, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, long]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, long, add, (]
[=, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, long, add, (, long, instant, ,]
[;, }, }, }, return, instant, ;, }, public, long, add, (, long, instant, ,, long, value, ), {, if]
[), ;, }, }, }, return, instant, ;, }, public, long, add, (, long, instant, ,, long, value, ), {]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, if, (, instant, >=, iCutover, ), {]
[), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {]
[>=, iCutover, ), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover]
[), {, instant, =, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {]
[=, iGregorianField, ., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant]
[;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear]
[., add, (, instant, ,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration]
[,, value, ), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {]
[), ;, if, (, instant, <, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology]
[<, iCutover, ), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear]
[), {, if, (, instant, +, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology]
[), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, )]
[<, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (]
[+, iGapDuration, <, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), .]
[<, iCutover, ), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (]
[), {, if, (, iConvertByWeekyear, ), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, )]
[), {, int, wyear, =, iGregorianChronology, ., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=]
[;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,]
[., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, )]
[., weekyear, (, ), ., get, (, instant, ), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology]
[), ;, if, (, wyear, <=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant]
[), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[<=, 0, ), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;]
[), {, instant, =, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[=, iGregorianChronology, ., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int]
[;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;, if]
[., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (]
[., weekyear, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, else, {, int, year, =]
[,, -, 1, ), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (]
[), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;]
[), ;, }, }, else, {, int, year, =, iGregorianChronology, ., year, (, ), ., get, (, instant, ), ;]
[;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,]
[., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, )]
[., year, (, ), ., get, (, instant, ), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology]
[), ;, if, (, year, <=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant]
[), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[<=, 0, ), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;]
[), {, instant, =, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }]
[=, iGregorianChronology, ., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian]
[;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add]
[., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }]
[., year, (, ), ., add, (, instant, ,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant]
[,, -, 1, ), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant]
[), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[), ;, }, }, instant, =, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, .]
[=, gregorianToJulian, (, instant, ), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value]
[;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant]
[), ;, }, }, }, else, {, instant, =, iJulianField, ., add, (, instant, ,, value, ), ;, if, (]
[=, iJulianField, ., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant]
[;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian]
[., add, (, instant, ,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration]
[,, value, ), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {]
[), ;, if, (, instant, >=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[>=, iCutover, ), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;]
[), {, if, (, instant, -, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getDifference, (]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int]
[-, iGapDuration, >=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }]
[>=, iCutover, ), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int]
[), {, instant, =, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getDifference, (]
[=, julianToGregorian, (, instant, ), ;, }, }, }, return, instant, ;, }, public, int, getDifference, (, long, minuendInstant, ,]
[;, }, }, }, return, instant, ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if]
[), ;, }, }, }, return, instant, ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, ), {]
[), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[>=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, )]
[), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;]
[>=, iCutover, ), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant]
[), {, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;]
[;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference]
[,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant]
[), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;]
[=, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if]
[;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, )]
[), ;, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover]
[;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, )]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField]
[,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant]
[), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant]
[), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;]
[<, iCutover, ), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant]
[), {, return, iJulianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;]
[;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifference]
[,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant]
[), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;]
[=, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, long]
[;, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,]
[), ;, return, iGregorianField, ., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant]
[;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover, )]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, )]
[,, subtrahendInstant, ), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant]
[), ;, }, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, if, (, minuendInstant, >=, iCutover]
[), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[>=, iCutover, ), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, )]
[), {, if, (, subtrahendInstant, >=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;]
[>=, iCutover, ), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant]
[), {, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;]
[;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong]
[,, subtrahendInstant, ), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant]
[), ;, }, minuendInstant, =, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;]
[=, gregorianToJulian, (, minuendInstant, ), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if]
[;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, )]
[), ;, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover]
[;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, )]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField]
[,, subtrahendInstant, ), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant]
[), ;, }, else, {, if, (, subtrahendInstant, <, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant]
[), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;]
[<, iCutover, ), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant]
[), {, return, iJulianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;]
[;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifferenceAsLong]
[,, subtrahendInstant, ), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant]
[), ;, }, minuendInstant, =, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;]
[=, julianToGregorian, (, minuendInstant, ), ;, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, int]
[;, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, int, getMinimumValue, (, long, instant, )]
[), ;, return, iGregorianField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, int, getMinimumValue, (, long, instant]
[;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (]
[,, subtrahendInstant, ), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, )]
[), ;, }, }, public, int, getMinimumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[), {, return, iGregorianField, ., getMinimumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMinimumValue, (, instant, )]
[>=, iCutover, ), {, return, iGregorianField, ., getMinimumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMinimumValue, (]
[), {, return, iGregorianField, ., getMinimumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMinimumValue, (, instant, )]
[;, }, else, {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, }, public, int, getMaximumValue, (, long, instant]
[., getMinimumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, }, public]
[), ;, }, else, {, return, iJulianField, ., getMinimumValue, (, instant, ), ;, }, }, public, int, getMaximumValue, (, long]
[;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return, iGregorianField]
[., getMinimumValue, (, instant, ), ;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=]
[), ;, }, }, public, int, getMaximumValue, (, long, instant, ), {, if, (, instant, >=, iCutover, ), {, return]
[), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMaximumValue, (, instant, )]
[>=, iCutover, ), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMaximumValue, (]
[), {, return, iGregorianField, ., getMaximumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMaximumValue, (, instant, )]
[;, }, else, {, return, iJulianField, ., getMaximumValue, (, instant, ), ;, }, }, }, private, static, class, LinkedDurationField, extends]
[., getMaximumValue, (, instant, ), ;, }, else, {, return, iJulianField, ., getMaximumValue, (, instant, ), ;, }, }, }]
[), ;, }, else, {, return, iJulianField, ., getMaximumValue, (, instant, ), ;, }, }, }, private, static, class, LinkedDurationField]
[;, }, }, }, private, static, class, LinkedDurationField, extends, DecoratedDurationField, {, private, static, final, long, serialVersionUID, =, 4097975388007713084L, ;, private]
[., getMaximumValue, (, instant, ), ;, }, }, }, private, static, class, LinkedDurationField, extends, DecoratedDurationField, {, private, static, final, long]
[), ;, }, }, }, private, static, class, LinkedDurationField, extends, DecoratedDurationField, {, private, static, final, long, serialVersionUID, =, 4097975388007713084L, ;]
[;, private, final, ImpreciseCutoverField, iField, ;, LinkedDurationField, (, DurationField, durationField, ,, ImpreciseCutoverField, dateTimeField, ), {, super, (, durationField, ,, durationField]
[,, durationField, ., getType, (, ), ), ;, iField, =, dateTimeField, ;, }, public, long, add, (, long, instant, ,]
[), ;, iField, =, dateTimeField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iField]
[., getType, (, ), ), ;, iField, =, dateTimeField, ;, }, public, long, add, (, long, instant, ,, int, value]
[=, dateTimeField, ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iField, ., add, (]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iField, ., add, (, instant, ,]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iField, ., add, (, instant, ,]
[., add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {]
[,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iField, ., add]
[), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iField, ., add, (, instant]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifference, (, minuendInstant, ,]
[., add, (, instant, ,, value, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, value, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifference]
[), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifference, (, minuendInstant]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifferenceAsLong, (, minuendInstant, ,]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifferenceAsLong]
[), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifferenceAsLong, (, minuendInstant]
[;, }, }, }]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, }, }]
[,, subtrahendInstant, ), ;, }, }, }]
[), ;, }, }, }]
