[RandomGenerator, rand, ;, private, final, int, dimension, ;, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ,, final, RandomGenerator, rand, ), {]
[RandomGenerator, rand, ;, private, final, int, dimension, ;, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ,, final, RandomGenerator, rand, ), {]
[final, int, dimension, ;, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ,, final, RandomGenerator, rand, ), {, this, ., dimension, =]
[dimension, ;, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ,, final, RandomGenerator, rand, ), {, this, ., dimension, =, dimension, ;]
[dimension, ;, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ,, final, RandomGenerator, rand, ), {, this, ., dimension, =, dimension, ;]
[(, final, int, dimension, ,, final, RandomGenerator, rand, ), {, this, ., dimension, =, dimension, ;, this, ., rand, =]
[=, dimension, ;, this, ., rand, =, rand, ;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {, this, (]
[;, this, ., rand, =, rand, ;, }, public, UnitSphereRandomVectorGenerator, (, final, int, dimension, ), {, this, (, dimension, ,]
[MersenneTwister, (, ), ), ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =]
[), ;, }, public, double, [, ], nextVector, (, ), {, final, double, [, ], v, =, new, double, []
[], nextVector, (, ), {, final, double, [, ], v, =, new, double, [, dimension, ], ;, double, normSq, =]
[[, ], v, =, new, double, [, dimension, ], ;, double, normSq, =, 0, ;, for, (, int, i, =]
[v, =, new, double, [, dimension, ], ;, double, normSq, =, 0, ;, for, (, int, i, =, 0, ;]
[v, =, new, double, [, dimension, ], ;, double, normSq, =, 0, ;, for, (, int, i, =, 0, ;]
[new, double, [, dimension, ], ;, double, normSq, =, 0, ;, for, (, int, i, =, 0, ;, i, <]
[[, dimension, ], ;, double, normSq, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[[, dimension, ], ;, double, normSq, =, 0, ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, comp, =]
[;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, final, double, comp, =]
[0, ;, i, <, dimension, ;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;]
[0, ;, i, <, dimension, ;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;]
[i, <, dimension, ;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, []
[;, i, ++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =]
[++, ), {, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =, comp, ;]
[{, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =, comp, ;, normSq, +=]
[{, final, double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =, comp, ;, normSq, +=]
[double, comp, =, rand, ., nextGaussian, (, ), ;, v, [, i, ], =, comp, ;, normSq, +=, comp, *]
[), ;, v, [, i, ], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =]
[), ;, v, [, i, ], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =]
[v, [, i, ], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1, /]
[v, [, i, ], =, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1, /]
[=, comp, ;, normSq, +=, comp, *, comp, ;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (]
[;, }, final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =]
[final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;]
[final, double, f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;]
[f, =, 1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;, i, <]
[1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[1, /, FastMath, ., sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;]
[sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[sqrt, (, normSq, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {]
[normSq, ), ;, for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, v, []
[for, (, int, i, =, 0, ;, i, <, dimension, ;, i, ++, ), {, v, [, i, ], *=]
[=, 0, ;, i, <, dimension, ;, i, ++, ), {, v, [, i, ], *=, f, ;, }, return]
