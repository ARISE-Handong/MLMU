[MonthConstants, {, public, static, RegularTimePeriod, createInstance, (, Class, c, ,, Date, millisecond, ,, TimeZone, zone, ), {, RegularTimePeriod, result, =]
[Class, c, ,, Date, millisecond, ,, TimeZone, zone, ), {, RegularTimePeriod, result, =, null, ;, try, {, Constructor, constructor, =]
[Class, c, ,, Date, millisecond, ,, TimeZone, zone, ), {, RegularTimePeriod, result, =, null, ;, try, {, Constructor, constructor, =]
[millisecond, ,, TimeZone, zone, ), {, RegularTimePeriod, result, =, null, ;, try, {, Constructor, constructor, =, c, ., getDeclaredConstructor, (]
[), {, RegularTimePeriod, result, =, null, ;, try, {, Constructor, constructor, =, c, ., getDeclaredConstructor, (, new, Class, [, ]]
[{, RegularTimePeriod, result, =, null, ;, try, {, Constructor, constructor, =, c, ., getDeclaredConstructor, (, new, Class, [, ], {]
[null, ;, try, {, Constructor, constructor, =, c, ., getDeclaredConstructor, (, new, Class, [, ], {, Date, ., class, ,]
[=, c, ., getDeclaredConstructor, (, new, Class, [, ], {, Date, ., class, ,, TimeZone, ., class, }, ), ;]
[., getDeclaredConstructor, (, new, Class, [, ], {, Date, ., class, ,, TimeZone, ., class, }, ), ;, result, =]
[new, Class, [, ], {, Date, ., class, ,, TimeZone, ., class, }, ), ;, result, =, (, RegularTimePeriod, )]
[new, Class, [, ], {, Date, ., class, ,, TimeZone, ., class, }, ), ;, result, =, (, RegularTimePeriod, )]
[{, Date, ., class, ,, TimeZone, ., class, }, ), ;, result, =, (, RegularTimePeriod, ), constructor, ., newInstance, (]
[,, TimeZone, ., class, }, ), ;, result, =, (, RegularTimePeriod, ), constructor, ., newInstance, (, new, Object, [, ]]
[TimeZone, ., class, }, ), ;, result, =, (, RegularTimePeriod, ), constructor, ., newInstance, (, new, Object, [, ], {]
[class, }, ), ;, result, =, (, RegularTimePeriod, ), constructor, ., newInstance, (, new, Object, [, ], {, millisecond, ,]
[new, Object, [, ], {, millisecond, ,, zone, }, ), ;, }, catch, (, Exception, e, ), {, }, return]
[Exception, e, ), {, }, return, result, ;, }, public, static, Class, downsize, (, Class, c, ), {, if, (]
[Exception, e, ), {, }, return, result, ;, }, public, static, Class, downsize, (, Class, c, ), {, if, (]
[}, return, result, ;, }, public, static, Class, downsize, (, Class, c, ), {, if, (, c, ., equals, (]
[Class, downsize, (, Class, c, ), {, if, (, c, ., equals, (, Year, ., class, ), ), {, return]
[(, c, ., equals, (, Year, ., class, ), ), {, return, Quarter, ., class, ;, }, else, if, (]
[(, c, ., equals, (, Year, ., class, ), ), {, return, Quarter, ., class, ;, }, else, if, (]
[(, Year, ., class, ), ), {, return, Quarter, ., class, ;, }, else, if, (, c, ., equals, (]
[return, Quarter, ., class, ;, }, else, if, (, c, ., equals, (, Quarter, ., class, ), ), {, return]
[(, c, ., equals, (, Quarter, ., class, ), ), {, return, Month, ., class, ;, }, else, if, (]
[(, c, ., equals, (, Quarter, ., class, ), ), {, return, Month, ., class, ;, }, else, if, (]
[(, Quarter, ., class, ), ), {, return, Month, ., class, ;, }, else, if, (, c, ., equals, (]
[return, Month, ., class, ;, }, else, if, (, c, ., equals, (, Month, ., class, ), ), {, return]
[(, c, ., equals, (, Month, ., class, ), ), {, return, Day, ., class, ;, }, else, if, (]
[(, c, ., equals, (, Month, ., class, ), ), {, return, Day, ., class, ;, }, else, if, (]
[(, Month, ., class, ), ), {, return, Day, ., class, ;, }, else, if, (, c, ., equals, (]
[return, Day, ., class, ;, }, else, if, (, c, ., equals, (, Day, ., class, ), ), {, return]
[(, c, ., equals, (, Day, ., class, ), ), {, return, Hour, ., class, ;, }, else, if, (]
[(, c, ., equals, (, Day, ., class, ), ), {, return, Hour, ., class, ;, }, else, if, (]
[(, Day, ., class, ), ), {, return, Hour, ., class, ;, }, else, if, (, c, ., equals, (]
[return, Hour, ., class, ;, }, else, if, (, c, ., equals, (, Hour, ., class, ), ), {, return]
[(, c, ., equals, (, Hour, ., class, ), ), {, return, Minute, ., class, ;, }, else, if, (]
[(, c, ., equals, (, Hour, ., class, ), ), {, return, Minute, ., class, ;, }, else, if, (]
[(, Hour, ., class, ), ), {, return, Minute, ., class, ;, }, else, if, (, c, ., equals, (]
[return, Minute, ., class, ;, }, else, if, (, c, ., equals, (, Minute, ., class, ), ), {, return]
[(, c, ., equals, (, Minute, ., class, ), ), {, return, Second, ., class, ;, }, else, if, (]
[(, c, ., equals, (, Minute, ., class, ), ), {, return, Second, ., class, ;, }, else, if, (]
[(, Minute, ., class, ), ), {, return, Second, ., class, ;, }, else, if, (, c, ., equals, (]
[return, Second, ., class, ;, }, else, if, (, c, ., equals, (, Second, ., class, ), ), {, return]
[(, c, ., equals, (, Second, ., class, ), ), {, return, Millisecond, ., class, ;, }, else, {, return]
[getSerialIndex, (, ), ;, public, abstract, void, peg, (, Calendar, calendar, ), ;, public, Date, getStart, (, ), {, return]
[;, public, abstract, void, peg, (, Calendar, calendar, ), ;, public, Date, getStart, (, ), {, return, new, Date, (]
[(, ), {, return, new, Date, (, getFirstMillisecond, (, ), ), ;, }, public, Date, getEnd, (, ), {, return]
[return, new, Date, (, getFirstMillisecond, (, ), ), ;, }, public, Date, getEnd, (, ), {, return, new, Date, (]
[), ;, public, abstract, long, getLastMillisecond, (, Calendar, calendar, ), ;, public, long, getMiddleMillisecond, (, ), {, long, m1, =]
[Calendar, calendar, ), ;, public, long, getMiddleMillisecond, (, ), {, long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =]
[long, getMiddleMillisecond, (, ), {, long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return]
[long, getMiddleMillisecond, (, ), {, long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return]
[(, ), {, long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return, m1, +]
[(, ), {, long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return, m1, +]
[), {, long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return, m1, +, (]
[), {, long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return, m1, +, (]
[long, m1, =, getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return, m1, +, (, m2, -]
[getFirstMillisecond, (, ), ;, long, m2, =, getLastMillisecond, (, ), ;, return, m1, +, (, m2, -, m1, ), /]
[(, m2, -, m1, ), /, 2, ;, }, public, long, getMiddleMillisecond, (, Calendar, calendar, ), {, long, m1, =]
[-, m1, ), /, 2, ;, }, public, long, getMiddleMillisecond, (, Calendar, calendar, ), {, long, m1, =, getFirstMillisecond, (]
[}, public, long, getMiddleMillisecond, (, Calendar, calendar, ), {, long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =]
[long, getMiddleMillisecond, (, Calendar, calendar, ), {, long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (]
[calendar, ), {, long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return]
[calendar, ), {, long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return]
[{, long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return, m1, +]
[{, long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return, m1, +]
[long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return, m1, +, (]
[long, m1, =, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return, m1, +, (]
[=, getFirstMillisecond, (, calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return, m1, +, (, m2, -]
[calendar, ), ;, long, m2, =, getLastMillisecond, (, calendar, ), ;, return, m1, +, (, m2, -, m1, ), /]
[;, return, m1, +, (, m2, -, m1, ), /, 2, ;, }, public, String, toString, (, ), {, return]
[;, return, m1, +, (, m2, -, m1, ), /, 2, ;, }, public, String, toString, (, ), {, return]
[(, m2, -, m1, ), /, 2, ;, }, public, String, toString, (, ), {, return, String, ., valueOf, (]
