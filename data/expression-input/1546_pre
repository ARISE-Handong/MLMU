[boolean, isCaseSensitive, (, ), ;, public, abstract, boolean, containsAnchor, (, ), ;, public, final, boolean, hasCapturingGroup, (, ), {, return]
[boolean, isCaseSensitive, (, ), ;, public, abstract, boolean, containsAnchor, (, ), ;, public, final, boolean, hasCapturingGroup, (, ), {, return]
[;, public, abstract, boolean, containsAnchor, (, ), ;, public, final, boolean, hasCapturingGroup, (, ), {, return, numCapturingGroups, (, ), !=]
[abstract, void, appendDebugInfo, (, StringBuilder, sb, ), ;, @, Override, public, final, String, toString, (, ), {, StringBuilder, sb, =]
[sb, ), ;, @, Override, public, final, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[sb, ), ;, @, Override, public, final, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[Override, public, final, String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (]
[String, toString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, '/', ), ;]
[(, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, sb, ., append, (, '/', ), ;, appendSourceCode, (]
[=, new, StringBuilder, (, ), ;, sb, ., append, (, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (]
[=, new, StringBuilder, (, ), ;, sb, ., append, (, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (]
[=, new, StringBuilder, (, ), ;, sb, ., append, (, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (]
[sb, ., append, (, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, ), ==]
[(, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, ), ==, 1, ), {]
[(, '/', ), ;, appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, ), ==, 1, ), {]
[appendSourceCode, (, sb, ), ;, if, (, sb, ., length, (, ), ==, 1, ), {, sb, ., append, (]
[;, if, (, sb, ., length, (, ), ==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }]
[;, if, (, sb, ., length, (, ), ==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }]
[., length, (, ), ==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }, sb, ., append, (]
[==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }, sb, ., append, (, '/', ), ;, return]
[==, 1, ), {, sb, ., append, (, "(?:)", ), ;, }, sb, ., append, (, '/', ), ;, return]
[), ;, return, sb, ., toString, (, ), ;, }, public, final, String, toDebugString, (, ), {, StringBuilder, sb, =]
[toString, (, ), ;, }, public, final, String, toDebugString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;]
[), ;, }, public, final, String, toDebugString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendDebugString, (]
[final, String, toDebugString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendDebugString, (, sb, ), ;, return]
[final, String, toDebugString, (, ), {, StringBuilder, sb, =, new, StringBuilder, (, ), ;, appendDebugString, (, sb, ), ;, return]
[(, sb, ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {]
[(, sb, ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {]
[(, sb, ), ;, return, sb, ., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {]
[return, sb, ., toString, (, ), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {, sb, ., append, (]
[), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ., append, (]
[), ;, }, private, void, appendDebugString, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ., append, (]
[., append, (, '(', ), ., append, (, getClass, (, ), ., getSimpleName, (, ), ), ;, int, len, =]
[., append, (, '(', ), ., append, (, getClass, (, ), ., getSimpleName, (, ), ), ;, int, len, =]
[append, (, getClass, (, ), ., getSimpleName, (, ), ), ;, int, len, =, sb, ., length, (, ), ;]
[append, (, getClass, (, ), ., getSimpleName, (, ), ), ;, int, len, =, sb, ., length, (, ), ;]
[), ., getSimpleName, (, ), ), ;, int, len, =, sb, ., length, (, ), ;, sb, ., append, (]
[(, ), ), ;, int, len, =, sb, ., length, (, ), ;, sb, ., append, (, ' ', ), ;]
[), ;, int, len, =, sb, ., length, (, ), ;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (]
[sb, ., length, (, ), ;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (]
[sb, ., length, (, ), ;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (]
[sb, ., length, (, ), ;, sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (]
[sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==]
[sb, ., append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==]
[append, (, ' ', ), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==, len, +]
[), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==, len, +, 1, ), {]
[), ;, appendDebugInfo, (, sb, ), ;, if, (, sb, ., length, (, ), ==, len, +, 1, ), {]
[sb, ), ;, if, (, sb, ., length, (, ), ==, len, +, 1, ), {, sb, ., setLength, (]
[), ==, len, +, 1, ), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :]
[), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {]
[), {, sb, ., setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {]
[setLength, (, len, ), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {, sb, ., append, (]
[), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {, sb, ., append, (, ' ', ), ;]
[), ;, }, for, (, RegExpTree, child, :, children, (, ), ), {, sb, ., append, (, ' ', ), ;]
[(, RegExpTree, child, :, children, (, ), ), {, sb, ., append, (, ' ', ), ;, child, ., appendDebugString, (]
[children, (, ), ), {, sb, ., append, (, ' ', ), ;, child, ., appendDebugString, (, sb, ), ;, }]
[children, (, ), ), {, sb, ., append, (, ' ', ), ;, child, ., appendDebugString, (, sb, ), ;, }]
[{, sb, ., append, (, ' ', ), ;, child, ., appendDebugString, (, sb, ), ;, }, sb, ., append, (]
[parseRegExp, (, final, String, pattern, ,, final, String, flags, ), {, class, Parser, {, int, pos, ;, int, numCapturingGroups, =]
[final, String, flags, ), {, class, Parser, {, int, pos, ;, int, numCapturingGroups, =, 0, ;, final, int, limit, =]
[final, String, flags, ), {, class, Parser, {, int, pos, ;, int, numCapturingGroups, =, 0, ;, final, int, limit, =]
[int, numCapturingGroups, =, 0, ;, final, int, limit, =, pattern, ., length, (, ), ;, RegExpTree, parseTopLevel, (, ), {]
[int, numCapturingGroups, =, 0, ;, final, int, limit, =, pattern, ., length, (, ), ;, RegExpTree, parseTopLevel, (, ), {]
[;, final, int, limit, =, pattern, ., length, (, ), ;, RegExpTree, parseTopLevel, (, ), {, this, ., pos, =]
[pattern, ., length, (, ), ;, RegExpTree, parseTopLevel, (, ), {, this, ., pos, =, 0, ;, RegExpTree, out, =]
[RegExpTree, parseTopLevel, (, ), {, this, ., pos, =, 0, ;, RegExpTree, out, =, parse, (, ), ;, if, (]
[RegExpTree, parseTopLevel, (, ), {, this, ., pos, =, 0, ;, RegExpTree, out, =, parse, (, ), ;, if, (]
[(, ), {, this, ., pos, =, 0, ;, RegExpTree, out, =, parse, (, ), ;, if, (, pos, <]
[., pos, =, 0, ;, RegExpTree, out, =, parse, (, ), ;, if, (, pos, <, limit, ), {, throw]
[0, ;, RegExpTree, out, =, parse, (, ), ;, if, (, pos, <, limit, ), {, throw, new, IllegalArgumentException, (]
[0, ;, RegExpTree, out, =, parse, (, ), ;, if, (, pos, <, limit, ), {, throw, new, IllegalArgumentException, (]
[=, parse, (, ), ;, if, (, pos, <, limit, ), {, throw, new, IllegalArgumentException, (, pattern, ., substring, (]
[(, pos, <, limit, ), {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, return]
[), ;, }, return, out, ;, }, RegExpTree, parse, (, ), {, ImmutableList, ., Builder, <, RegExpTree, >, alternatives, =]
[;, }, RegExpTree, parse, (, ), {, ImmutableList, ., Builder, <, RegExpTree, >, alternatives, =, null, ;, RegExpTree, preceder, =]
[{, ImmutableList, ., Builder, <, RegExpTree, >, alternatives, =, null, ;, RegExpTree, preceder, =, null, ;, topLoop, :, while, (]
[{, ImmutableList, ., Builder, <, RegExpTree, >, alternatives, =, null, ;, RegExpTree, preceder, =, null, ;, topLoop, :, while, (]
[., Builder, <, RegExpTree, >, alternatives, =, null, ;, RegExpTree, preceder, =, null, ;, topLoop, :, while, (, pos, <]
[=, null, ;, RegExpTree, preceder, =, null, ;, topLoop, :, while, (, pos, <, limit, ), {, char, ch, =]
[=, null, ;, RegExpTree, preceder, =, null, ;, topLoop, :, while, (, pos, <, limit, ), {, char, ch, =]
[preceder, =, null, ;, topLoop, :, while, (, pos, <, limit, ), {, char, ch, =, pattern, ., charAt, (]
[pos, <, limit, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (]
[{, char, ch, =, pattern, ., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (, ch, ), {, case]
[ch, =, pattern, ., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (, ch, ), {, case, '[', :]
[pattern, ., charAt, (, pos, ), ;, RegExpTree, atom, ;, switch, (, ch, ), {, case, '[', :, atom, =]
[RegExpTree, atom, ;, switch, (, ch, ), {, case, '[', :, atom, =, parseCharset, (, ), ;, break, ;, case]
[;, switch, (, ch, ), {, case, '[', :, atom, =, parseCharset, (, ), ;, break, ;, case, '(', :]
[(, ch, ), {, case, '[', :, atom, =, parseCharset, (, ), ;, break, ;, case, '(', :, atom, =]
[atom, =, parseCharset, (, ), ;, break, ;, case, '(', :, atom, =, parseParenthetical, (, ), ;, break, ;, case]
[break, ;, case, '(', :, atom, =, parseParenthetical, (, ), ;, break, ;, case, ')', :, break, topLoop, ;, case]
[case, '(', :, atom, =, parseParenthetical, (, ), ;, break, ;, case, ')', :, break, topLoop, ;, case, '\\', :]
[:, atom, =, parseParenthetical, (, ), ;, break, ;, case, ')', :, break, topLoop, ;, case, '\\', :, atom, =]
[break, ;, case, ')', :, break, topLoop, ;, case, '\\', :, atom, =, parseEscape, (, ), ;, break, ;, case]
[')', :, break, topLoop, ;, case, '\\', :, atom, =, parseEscape, (, ), ;, break, ;, case, '^', :, case]
[break, topLoop, ;, case, '\\', :, atom, =, parseEscape, (, ), ;, break, ;, case, '^', :, case, '$', :]
[;, case, '\\', :, atom, =, parseEscape, (, ), ;, break, ;, case, '^', :, case, '$', :, atom, =]
[:, atom, =, parseEscape, (, ), ;, break, ;, case, '^', :, case, '$', :, atom, =, new, Anchor, (]
[parseEscape, (, ), ;, break, ;, case, '^', :, case, '$', :, atom, =, new, Anchor, (, ch, ), ;]
[(, ), ;, break, ;, case, '^', :, case, '$', :, atom, =, new, Anchor, (, ch, ), ;, ++]
[case, '^', :, case, '$', :, atom, =, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case]
[:, case, '$', :, atom, =, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case, '.', :]
['$', :, atom, =, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case, '.', :, atom, =]
[atom, =, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;]
[=, new, Anchor, (, ch, ), ;, ++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++]
[), ;, ++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case]
[++, pos, ;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|', :]
[;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|', :, atom, =]
[;, break, ;, case, '.', :, atom, =, DOT_CHARSET, ;, ++, pos, ;, break, ;, case, '|', :, atom, =]
[pos, ;, break, ;, case, '|', :, atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =]
['|', :, atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =, pos, ;, int, end, =]
['|', :, atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =, pos, ;, int, end, =]
[atom, =, Empty, ., INSTANCE, ;, break, ;, default, :, int, start, =, pos, ;, int, end, =, pos, +]
[break, ;, default, :, int, start, =, pos, ;, int, end, =, pos, +, 1, ;, charsLoop, :, while, (]
[break, ;, default, :, int, start, =, pos, ;, int, end, =, pos, +, 1, ;, charsLoop, :, while, (]
[default, :, int, start, =, pos, ;, int, end, =, pos, +, 1, ;, charsLoop, :, while, (, end, <]
[pos, ;, int, end, =, pos, +, 1, ;, charsLoop, :, while, (, end, <, limit, ), {, switch, (]
[pos, ;, int, end, =, pos, +, 1, ;, charsLoop, :, while, (, end, <, limit, ), {, switch, (]
[=, pos, +, 1, ;, charsLoop, :, while, (, end, <, limit, ), {, switch, (, pattern, ., charAt, (]
[charsLoop, :, while, (, end, <, limit, ), {, switch, (, pattern, ., charAt, (, end, ), ), {, case]
[(, end, <, limit, ), {, switch, (, pattern, ., charAt, (, end, ), ), {, case, '[', :, case]
[limit, ), {, switch, (, pattern, ., charAt, (, end, ), ), {, case, '[', :, case, '(', :, case]
[switch, (, pattern, ., charAt, (, end, ), ), {, case, '[', :, case, '(', :, case, ')', :, case]
[., charAt, (, end, ), ), {, case, '[', :, case, '(', :, case, ')', :, case, '\\', :, case]
[end, ), ), {, case, '[', :, case, '(', :, case, ')', :, case, '\\', :, case, '^', :, case]
[{, case, '[', :, case, '(', :, case, ')', :, case, '\\', :, case, '^', :, case, '$', :, case]
[:, case, '(', :, case, ')', :, case, '\\', :, case, '^', :, case, '$', :, case, '|', :, case]
[:, case, ')', :, case, '\\', :, case, '^', :, case, '$', :, case, '|', :, case, '.', :, case]
[:, case, '\\', :, case, '^', :, case, '$', :, case, '|', :, case, '.', :, case, '*', :, case]
[:, case, '^', :, case, '$', :, case, '|', :, case, '.', :, case, '*', :, case, '+', :, case]
[:, case, '$', :, case, '|', :, case, '.', :, case, '*', :, case, '+', :, case, '?', :, case]
[:, case, '*', :, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (]
[:, case, '*', :, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (]
[:, case, '*', :, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (]
[:, case, '*', :, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (]
['*', :, case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +]
[case, '+', :, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1, >=]
[:, case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||]
[case, '?', :, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||, !]
[:, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||, !, isRepetitionStart, (]
[:, case, '{', :, break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||, !, isRepetitionStart, (]
[break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (]
[break, charsLoop, ;, default, :, if, (, end, +, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (]
[;, default, :, if, (, end, +, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +]
[end, +, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), ), ), {]
[+, 1, >=, limit, ||, !, isRepetitionStart, (, pattern, ., charAt, (, end, +, 1, ), ), ), {, ++]
[(, end, +, 1, ), ), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }]
[+, 1, ), ), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =]
[), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (]
[), ), {, ++, end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (]
[end, ;, }, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern, ., substring, (]
[}, else, {, break, charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern, ., substring, (, start, ,]
[charsLoop, ;, }, }, }, atom, =, new, Text, (, pattern, ., substring, (, start, ,, end, ), ), ;]
[}, }, }, atom, =, new, Text, (, pattern, ., substring, (, start, ,, end, ), ), ;, pos, =]
[(, pattern, ., substring, (, start, ,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (]
[(, pattern, ., substring, (, start, ,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (]
[(, pattern, ., substring, (, start, ,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (]
[., substring, (, start, ,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (, pos, <]
[(, start, ,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&]
[,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (]
[,, end, ), ), ;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (]
[;, pos, =, end, ;, break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (]
[break, ;, }, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), ), ), {]
[}, if, (, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), ), ), {, atom, =]
[(, pos, <, limit, &&, isRepetitionStart, (, pattern, ., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (]
[(, pattern, ., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (]
[(, pattern, ., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (]
[., charAt, (, pos, ), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==]
[pos, ), ), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {]
[), ), {, atom, =, parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder, =]
[parseRepetition, (, atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder, =, atom, ;, }, else, {]
[atom, ), ;, }, if, (, preceder, ==, null, ), {, preceder, =, atom, ;, }, else, {, preceder, =]
[}, if, (, preceder, ==, null, ), {, preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (]
[(, preceder, ==, null, ), {, preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,]
[preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (]
[preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (]
[preceder, =, atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (]
[atom, ;, }, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos, <]
[}, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos, <, limit, &&]
[}, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos, <, limit, &&]
[}, else, {, preceder, =, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos, <, limit, &&]
[=, new, Concatenation, (, preceder, ,, atom, ), ;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (]
[(, preceder, ,, atom, ), ;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==]
[;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (]
[;, }, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (]
[if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==, null, ), {]
[&&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =]
[&&, pattern, ., charAt, (, pos, ), ==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =]
[==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }]
[==, '|', ), {, if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }]
[if, (, alternatives, ==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (]
[==, null, ), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;]
[), {, alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;, preceder, =]
[alternatives, =, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;]
[=, ImmutableList, ., builder, (, ), ;, }, alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;, ++]
[;, }, alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (]
[;, }, alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (]
[alternatives, ., add, (, preceder, ), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (, preceder, ==]
[(, preceder, ), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (, preceder, ==, null, ), {]
[), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =]
[), ;, preceder, =, null, ;, ++, pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =]
[pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (]
[pos, ;, }, }, if, (, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (]
[}, }, if, (, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=]
[(, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {]
[(, preceder, ==, null, ), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {]
[), {, preceder, =, Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (]
[Empty, ., INSTANCE, ;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (, preceder, ), ;, return]
[;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (, preceder, ), ;, return, new, Alternation, (]
[;, }, if, (, alternatives, !=, null, ), {, alternatives, ., add, (, preceder, ), ;, return, new, Alternation, (]
[add, (, preceder, ), ;, return, new, Alternation, (, alternatives, ., build, (, ), ), ;, }, else, {, return]
[., build, (, ), ), ;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {]
[., build, (, ), ), ;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {]
[), ;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (]
[), ;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (]
[), ;, }, else, {, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (]
[{, return, preceder, ;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (]
[;, }, }, private, RegExpTree, parseParenthetical, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==]
[(, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '(', ), ;, int, start, =]
[{, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '(', ), ;, int, start, =, pos, ;]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '(', ), ;, int, start, =, pos, ;, ++]
[., charAt, (, pos, ), ==, '(', ), ;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =]
[==, '(', ), ;, int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =]
[int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (]
[int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (]
[int, start, =, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (]
[=, pos, ;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <]
[;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&]
[;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&]
[;, ++, pos, ;, boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&]
[boolean, capturing, =, true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (]
[true, ;, int, type, =, 0, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==]
[0, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (]
[0, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (]
[0, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (]
[if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +]
[pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +, 1, <]
[&&, pattern, ., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +, 1, <, limit, ), {]
[., charAt, (, pos, ), ==, '?', ), {, if, (, pos, +, 1, <, limit, ), {, capturing, =]
[==, '?', ), {, if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =]
[==, '?', ), {, if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =]
[if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (]
[if, (, pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (]
[pos, +, 1, <, limit, ), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (, pos, +]
[), {, capturing, =, false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (]
[false, ;, char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (, ch, ), {, case]
[char, ch, =, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (, ch, ), {, case, ':', :]
[=, pattern, ., charAt, (, pos, +, 1, ), ;, switch, (, ch, ), {, case, ':', :, pos, +=]
[pos, +, 1, ), ;, switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case]
[), ;, switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case]
[switch, (, ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case, '=', :]
[ch, ), {, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case, '=', :, pos, +=]
[{, case, ':', :, pos, +=, 2, ;, break, ;, case, '!', :, case, '=', :, pos, +=, 2, ;]
[':', :, pos, +=, 2, ;, break, ;, case, '!', :, case, '=', :, pos, +=, 2, ;, type, =]
[;, case, '!', :, case, '=', :, pos, +=, 2, ;, type, =, ch, ;, break, ;, default, :, throw]
[:, case, '=', :, pos, +=, 2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[:, case, '=', :, pos, +=, 2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
['=', :, pos, +=, 2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +]
['=', :, pos, +=, 2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +]
[2, ;, type, =, ch, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern, ., substring, (]
[throw, new, IllegalArgumentException, (, "Malformed parenthetical: ", +, pattern, ., substring, (, start, ), ), ;, }, }, }, RegExpTree, body, =]
[pattern, ., substring, (, start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (]
[pattern, ., substring, (, start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (]
[pattern, ., substring, (, start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (]
[substring, (, start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <]
[start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&]
[start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&]
[start, ), ), ;, }, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&]
[}, }, }, RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&, pattern, ., charAt, (]
[RegExpTree, body, =, parse, (, ), ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==]
[parse, (, ), ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, ')', ), {]
[(, ), ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, ')', ), {, ++]
[<, limit, &&, pattern, ., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw]
[pattern, ., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (]
[pattern, ., charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (]
[charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +]
[charAt, (, pos, ), ==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +]
[==, ')', ), {, ++, pos, ;, }, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (]
[}, else, {, throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, ), ), ;, }, if, (]
[throw, new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, ), ), ;, }, if, (, capturing, ), {]
[new, IllegalArgumentException, (, "Unclosed parenthetical group: ", +, pattern, ., substring, (, start, ), ), ;, }, if, (, capturing, ), {, ++]
["Unclosed parenthetical group: ", +, pattern, ., substring, (, start, ), ), ;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return]
[., substring, (, start, ), ), ;, }, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (]
[}, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else, if, (]
[}, if, (, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else, if, (]
[(, capturing, ), {, ++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else, if, (, type, !=]
[++, numCapturingGroups, ;, return, new, CapturingGroup, (, body, ), ;, }, else, if, (, type, !=, 0, ), {, return]
[return, new, CapturingGroup, (, body, ), ;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion, (]
[CapturingGroup, (, body, ), ;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion, (, body, ,]
[CapturingGroup, (, body, ), ;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion, (, body, ,]
[body, ), ;, }, else, if, (, type, !=, 0, ), {, return, new, LookaheadAssertion, (, body, ,, type, ==]
[type, !=, 0, ), {, return, new, LookaheadAssertion, (, body, ,, type, ==, '=', ), ;, }, else, {, return]
[,, type, ==, '=', ), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {]
[,, type, ==, '=', ), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {]
[), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (]
[), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (]
[), ;, }, else, {, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (]
[{, return, body, ;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (]
[;, }, }, private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==]
[private, RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '[', ), ;]
[RegExpTree, parseCharset, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '[', ), ;, ++]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =]
[pattern, ., charAt, (, pos, ), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (]
[(, pos, ), ==, '[', ), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=]
[), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =]
[), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =]
[), ;, ++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =]
[++, pos, ;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <]
[;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&]
[;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&]
[;, boolean, isCaseInsensitive, =, flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&]
[flags, ., indexOf, (, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (]
[(, 'i', ), >=, 0, ;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==]
[0, ;, boolean, inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (]
[inverse, =, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {]
[=, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {, ++]
[., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =]
[., charAt, (, pos, ), ==, '^', ;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =]
[;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =]
[;, if, (, inverse, ), {, ++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =]
[++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (]
[++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (]
[++, pos, ;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (]
[;, }, CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <]
[CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <, limit, &&]
[CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <, limit, &&]
[CharRanges, ranges, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <, limit, &&]
[., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <, limit, &&, pattern, ., charAt, (]
[CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, while, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), !=]
[;, while, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char, ch, =]
[;, while, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char, ch, =]
[<, limit, &&, pattern, ., charAt, (, pos, ), !=, ']', ), {, char, ch, =, pattern, ., charAt, (]
[), !=, ']', ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (]
[), !=, ']', ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (]
[']', ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (, ch, ==]
[char, ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (, ch, ==, '\\', ), {]
[ch, =, pattern, ., charAt, (, pos, ), ;, char, start, ;, if, (, ch, ==, '\\', ), {, ++]
[(, pos, ), ;, char, start, ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =]
[(, pos, ), ;, char, start, ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =]
[char, start, ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =, pattern, ., charAt, (]
[==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =]
[==, '\\', ), {, ++, pos, ;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =]
[++, pos, ;, char, possibleGroupName, =, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (]
[=, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (]
[=, pattern, ., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (]
[., charAt, (, pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=]
[pos, ), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {]
[), ;, CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++]
[CharRanges, group, =, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++, pos, ;]
[=, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++, pos, ;, ranges, =]
[=, NAMED_CHAR_GROUPS, ., get, (, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++, pos, ;, ranges, =]
[(, possibleGroupName, ), ;, if, (, group, !=, null, ), {, ++, pos, ;, ranges, =, ranges, ., union, (]
[group, !=, null, ), {, ++, pos, ;, ranges, =, ranges, ., union, (, group, ), ;, continue, ;, }]
[null, ), {, ++, pos, ;, ranges, =, ranges, ., union, (, group, ), ;, continue, ;, }, start, =]
[=, ranges, ., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {]
[., union, (, group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {, start, =]
[(, group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {, start, =, ch, ;]
[group, ), ;, continue, ;, }, start, =, parseEscapeChar, (, ), ;, }, else, {, start, =, ch, ;, ++]
[start, =, parseEscapeChar, (, ), ;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =]
[), ;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (]
[), ;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (]
[), ;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (]
[), ;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (]
[), ;, }, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (]
[}, else, {, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos, +]
[{, start, =, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos, +, 1, <]
[=, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&]
[=, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&]
[=, ch, ;, ++, pos, ;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&]
[pos, ;, }, char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (]
[char, end, =, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==]
[=, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&]
[=, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&]
[=, start, ;, if, (, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&]
[(, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (]
[(, pos, +, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (]
[+, 1, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +]
[limit, &&, pattern, ., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=]
[., charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {]
[charAt, (, pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++]
[pos, ), ==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;]
[==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =]
[==, '-', &&, pattern, ., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =]
[., charAt, (, pos, +, 1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (]
[1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[1, ), !=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[!=, ']', ), {, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==]
[{, ++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {]
[++, pos, ;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {, ++]
[;, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {, ++, pos, ;]
[=, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, '\\', ), {, ++, pos, ;, end, =]
[;, if, (, ch, ==, '\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {]
[(, ch, ==, '\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =]
[==, '\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;]
['\\', ), {, ++, pos, ;, end, =, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++]
[=, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges, range, =]
[=, parseEscapeChar, (, ), ;, }, else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges, range, =]
[;, }, else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (]
[else, {, end, =, ch, ;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,]
[=, ch, ;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;]
[;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =]
[;, ++, pos, ;, }, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =]
[}, }, CharRanges, range, =, CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =, ranges, ., union, (]
[CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (]
[CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (]
[CharRanges, ., inclusive, (, start, ,, end, ), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (]
[start, ,, end, ), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (]
[), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&]
[), ;, ranges, =, ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&]
[ranges, ., union, (, range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (]
[range, ), ;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {]
[;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =]
[;, if, (, IE_SPEC_ERRORS, ., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =]
[., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =, ieExplicits, ., union, (]
[., contains, (, start, ), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =, ieExplicits, ., union, (]
[), &&, IE_SPEC_ERRORS, ., contains, (, end, ), ), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (]
[), ), {, ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (]
[ieExplicits, =, ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive, ), {]
[ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive, ), {, ranges, =]
[ieExplicits, ., union, (, range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive, ), {, ranges, =]
[range, ., intersection, (, IE_SPEC_ERRORS, ), ), ;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (]
[), ), ;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }]
[), ;, }, if, (, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++]
[(, isCaseInsensitive, ), {, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (]
[{, ranges, =, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (, inverse, ), {]
[=, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =]
[=, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =]
[=, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =]
[), ;, }, }, ++, pos, ;, if, (, inverse, ), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[pos, ;, if, (, inverse, ), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return]
[(, inverse, ), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return, new, Charset, (]
[), {, ranges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, }, return, new, Charset, (, ranges, ,]
[}, return, new, Charset, (, ranges, ,, ieExplicits, ), ;, }, private, char, parseEscapeChar, (, ), {, char, ch, =]
[}, return, new, Charset, (, ranges, ,, ieExplicits, ), ;, }, private, char, parseEscapeChar, (, ), {, char, ch, =]
[(, ranges, ,, ieExplicits, ), ;, }, private, char, parseEscapeChar, (, ), {, char, ch, =, pattern, ., charAt, (]
[(, ranges, ,, ieExplicits, ), ;, }, private, char, parseEscapeChar, (, ), {, char, ch, =, pattern, ., charAt, (]
[}, private, char, parseEscapeChar, (, ), {, char, ch, =, pattern, ., charAt, (, pos, ++, ), ;, switch, (]
[(, ), {, char, ch, =, pattern, ., charAt, (, pos, ++, ), ;, switch, (, ch, ), {, case]
[char, ch, =, pattern, ., charAt, (, pos, ++, ), ;, switch, (, ch, ), {, case, 'b', :, return]
[pattern, ., charAt, (, pos, ++, ), ;, switch, (, ch, ), {, case, 'b', :, return, '\b', ;, case]
[(, pos, ++, ), ;, switch, (, ch, ), {, case, 'b', :, return, '\b', ;, case, 'f', :, return]
[), ;, switch, (, ch, ), {, case, 'b', :, return, '\b', ;, case, 'f', :, return, '\f', ;, case]
[(, ch, ), {, case, 'b', :, return, '\b', ;, case, 'f', :, return, '\f', ;, case, 'n', :, return]
[{, case, 'b', :, return, '\b', ;, case, 'f', :, return, '\f', ;, case, 'n', :, return, '\n', ;, case]
[:, return, '\b', ;, case, 'f', :, return, '\f', ;, case, 'n', :, return, '\n', ;, case, 'r', :, return]
[;, case, 'f', :, return, '\f', ;, case, 'n', :, return, '\n', ;, case, 'r', :, return, '\r', ;, case]
[:, return, '\f', ;, case, 'n', :, return, '\n', ;, case, 'r', :, return, '\r', ;, case, 't', :, return]
[;, case, 'n', :, return, '\n', ;, case, 'r', :, return, '\r', ;, case, 't', :, return, '\t', ;, case]
[:, return, '\n', ;, case, 'r', :, return, '\r', ;, case, 't', :, return, '\t', ;, case, 'u', :, return]
['\n', ;, case, 'r', :, return, '\r', ;, case, 't', :, return, '\t', ;, case, 'u', :, return, parseHex, (]
[:, return, '\r', ;, case, 't', :, return, '\t', ;, case, 'u', :, return, parseHex, (, 4, ), ;, case]
[;, case, 't', :, return, '\t', ;, case, 'u', :, return, parseHex, (, 4, ), ;, case, 'v', :, return]
[:, return, '\t', ;, case, 'u', :, return, parseHex, (, 4, ), ;, case, 'v', :, return, '\u000b', ;, case]
[;, case, 'u', :, return, parseHex, (, 4, ), ;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return]
['u', :, return, parseHex, (, 4, ), ;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (]
[;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (]
[;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (]
[;, case, 'v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (]
['v', :, return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (, '0', <=]
[return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (, '0', <=, ch, &&]
[return, '\u000b', ;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (, '0', <=, ch, &&]
[;, case, 'x', :, return, parseHex, (, 2, ), ;, default, :, if, (, '0', <=, ch, &&, ch, <=]
[(, 2, ), ;, default, :, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =]
[;, default, :, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =, (, char, )]
[default, :, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (]
[default, :, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (]
[if, (, '0', <=, ch, &&, ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (, ch, -]
[ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =]
[ch, <=, '7', ), {, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =]
[{, char, codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (]
[codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,]
[codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,]
[codeUnit, =, (, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,]
[(, char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +]
[char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (]
[char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (]
[char, ), (, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (]
[(, ch, -, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=]
[-, '0', ), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?]
[), ;, int, octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :]
[octLimit, =, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +]
[=, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (]
[=, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (]
[=, Math, ., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (]
[., min, (, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==]
[(, limit, ,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?]
[,, pos, +, (, ch, <=, '3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :]
['3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (]
['3', ?, 2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (]
[2, :, 1, ), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <]
[), +, (, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {]
[(, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch, =]
[(, ch, ==, '0', ?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch, =]
[?, 1, :, 0, ), ), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (]
[), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[), ;, while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[while, (, pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=]
[pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&]
[pos, <, octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&]
[octLimit, ), {, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=]
[ch, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {]
[pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =]
[(, pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, )]
[pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (]
[pos, ), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (]
[), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (]
[), ;, if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (]
[if, (, '0', <=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<]
[<=, ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +]
[ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (]
[ch, &&, ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (]
[ch, <=, '7', ), {, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -]
[{, codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), ), ;]
[codeUnit, =, (, char, ), (, (, codeUnit, <<, 3, ), +, (, ch, -, '0', ), ), ;, ++]
[), +, (, ch, -, '0', ), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return]
[-, '0', ), ), ;, ++, pos, ;, }, else, {, break, ;, }, }, return, codeUnit, ;, }, return]
[{, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape, (, ), {]
[{, break, ;, }, }, return, codeUnit, ;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape, (, ), {]
[}, return, codeUnit, ;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (]
[}, return, codeUnit, ;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (]
[}, return, codeUnit, ;, }, return, ch, ;, }, }, private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (]
[}, return, ch, ;, }, }, private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (]
[;, }, }, private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==]
[private, RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '\\', ), ;]
[RegExpTree, parseEscape, (, ), {, Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '\\', ), ;, ++]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '\\', ), ;, ++, pos, ;, char, ch, =]
[Preconditions, ., checkState, (, pattern, ., charAt, (, pos, ), ==, '\\', ), ;, ++, pos, ;, char, ch, =]
[pattern, ., charAt, (, pos, ), ==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (]
[), ==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[), ==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
[), ==, '\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (]
['\\', ), ;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==]
[;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||]
[;, ++, pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||]
[pos, ;, char, ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||, ch, ==]
[ch, =, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B', ), {]
[=, pattern, ., charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B', ), {, ++]
[charAt, (, pos, ), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B', ), {, ++, pos, ;, return]
[), ;, if, (, ch, ==, 'b', ||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (]
[||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (]
[||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (]
[||, ch, ==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (]
[==, 'B', ), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=]
[), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&]
[), {, ++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&]
[++, pos, ;, return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&, ch, <=]
[return, new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', ), {]
[new, WordBoundary, (, ch, ), ;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', ), {, ++]
[;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =]
[;, }, else, if, (, '1', <=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =]
[else, if, (, '1', <=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -]
[<=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (]
[<=, ch, &&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (]
[&&, ch, <=, '9', ), {, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=]
[{, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (]
[{, ++, pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (]
[pos, ;, int, possibleGroupIndex, =, ch, -, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <]
[-, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit, ), {, char, next, =]
[-, '0', ;, if, (, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit, ), {, char, next, =]
[(, numCapturingGroups, >=, possibleGroupIndex, ), {, if, (, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (]
[{, if, (, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (]
[{, if, (, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (]
[{, if, (, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (]
[(, pos, <, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=]
[<, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, next, &&]
[<, limit, ), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, next, &&]
[), {, char, next, =, pattern, ., charAt, (, pos, ), ;, if, (, '0', <=, next, &&, next, <=]
[., charAt, (, pos, ), ;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =]
[., charAt, (, pos, ), ;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =]
[., charAt, (, pos, ), ;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =]
[(, pos, ), ;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *]
[), ;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +]
[;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (]
[;, if, (, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (]
[(, '0', <=, next, &&, next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -]
[next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (]
[next, <=, '9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (]
['9', ), {, int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=]
[int, twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {]
[twoDigitGroupIndex, =, possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++]
[possibleGroupIndex, *, 10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;]
[10, +, (, next, -, '0', ), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =]
[), ;, if, (, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return]
[(, numCapturingGroups, >=, twoDigitGroupIndex, ), {, ++, pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (]
[pos, ;, possibleGroupIndex, =, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return]
[=, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (]
[=, twoDigitGroupIndex, ;, }, }, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (]
[}, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (, Character, ., toString, (]
[}, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (, Character, ., toString, (]
[}, }, return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (, Character, ., toString, (]
[return, new, BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (, Character, ., toString, (, possibleGroupIndex, <=]
[BackReference, (, possibleGroupIndex, ), ;, }, else, {, return, new, Text, (, Character, ., toString, (, possibleGroupIndex, <=, 7, ?]
[), ;, }, else, {, return, new, Text, (, Character, ., toString, (, possibleGroupIndex, <=, 7, ?, (, char, )]
[}, else, {, return, new, Text, (, Character, ., toString, (, possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex, :]
[possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex, :, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =]
[possibleGroupIndex, <=, 7, ?, (, char, ), possibleGroupIndex, :, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =]
[(, char, ), possibleGroupIndex, :, ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (]
[ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (]
[ch, ), ), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (]
[), ;, }, }, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup, !=]
[}, else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup, !=, null, ), {]
[else, {, CharRanges, charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup, !=, null, ), {, ++]
[charGroup, =, NAMED_CHAR_GROUPS, ., get, (, ch, ), ;, if, (, charGroup, !=, null, ), {, ++, pos, ;, return]
[., get, (, ch, ), ;, if, (, charGroup, !=, null, ), {, ++, pos, ;, return, new, Charset, (]
[(, ch, ), ;, if, (, charGroup, !=, null, ), {, ++, pos, ;, return, new, Charset, (, charGroup, ,]
[(, ch, ), ;, if, (, charGroup, !=, null, ), {, ++, pos, ;, return, new, Charset, (, charGroup, ,]
[!=, null, ), {, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return]
[{, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return, new, Text, (]
[{, ++, pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return, new, Text, (]
[pos, ;, return, new, Charset, (, charGroup, ,, CharRanges, ., EMPTY, ), ;, }, return, new, Text, (, "", +]
[(, "", +, parseEscapeChar, (, ), ), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (]
[(, "", +, parseEscapeChar, (, ), ), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (]
[(, "", +, parseEscapeChar, (, ), ), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (]
[+, parseEscapeChar, (, ), ), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (, pos, +]
[(, ), ), ;, }, }, private, char, parseHex, (, int, n, ), {, if, (, pos, +, n, >]
[}, }, private, char, parseHex, (, int, n, ), {, if, (, pos, +, n, >, limit, ), {, throw]
[char, parseHex, (, int, n, ), {, if, (, pos, +, n, >, limit, ), {, throw, new, IllegalArgumentException, (]
[char, parseHex, (, int, n, ), {, if, (, pos, +, n, >, limit, ), {, throw, new, IllegalArgumentException, (]
[(, int, n, ), {, if, (, pos, +, n, >, limit, ), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +]
[(, int, n, ), {, if, (, pos, +, n, >, limit, ), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +]
[{, if, (, pos, +, n, >, limit, ), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (]
[), {, throw, new, IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int, result, =]
[IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int, result, =, 0, ;, while, (]
[IllegalArgumentException, (, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int, result, =, 0, ;, while, (]
[(, "Abbreviated hex escape ", +, pattern, ., substring, (, pos, ), ), ;, }, int, result, =, 0, ;, while, (, --]
[+, pattern, ., substring, (, pos, ), ), ;, }, int, result, =, 0, ;, while, (, --, n, >=]
[), ), ;, }, int, result, =, 0, ;, while, (, --, n, >=, 0, ), {, char, ch, =]
[), ), ;, }, int, result, =, 0, ;, while, (, --, n, >=, 0, ), {, char, ch, =]
[int, result, =, 0, ;, while, (, --, n, >=, 0, ), {, char, ch, =, pattern, ., charAt, (]
[n, >=, 0, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (]
[n, >=, 0, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (]
[n, >=, 0, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (]
[0, ), {, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=]
[{, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=, ch, &&]
[{, char, ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=, ch, &&]
[ch, =, pattern, ., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=]
[., charAt, (, pos, ), ;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=, '9', ), {]
[(, pos, ), ;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =]
[(, pos, ), ;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =]
[), ;, int, digit, ;, if, (, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -]
[(, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (]
[(, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (]
[(, '0', <=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (]
[<=, ch, &&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=]
[&&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&]
[&&, ch, <=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&]
[<=, '9', ), {, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=]
[{, digit, =, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {]
[=, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =]
[=, ch, -, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =]
[-, '0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +]
['0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +, (]
['0', ;, }, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +, (]
[}, else, if, (, 'a', <=, ch, &&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10, -]
[&&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (]
[&&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (]
[&&, ch, <=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (]
[<=, 'f', ), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=]
[), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&]
[), {, digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&]
[digit, =, ch, +, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=]
[+, (, 10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {]
[10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =]
[10, -, 'a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =]
['a', ), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +]
[), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (]
[), ;, }, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (]
[}, else, if, (, 'A', <=, ch, &&, ch, <=, 'F', ), {, digit, =, ch, +, (, 10, -]
[&&, ch, <=, 'F', ), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw]
['F', ), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (]
['F', ), {, digit, =, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (]
[=, ch, +, (, 10, -, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (]
[-, 'A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }]
['A', ), ;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++]
[;, }, else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;]
[else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;, result, =]
[else, {, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;, result, =]
[{, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;, result, =, (]
[{, throw, new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;, result, =, (]
[new, IllegalArgumentException, (, pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;, result, =, (, result, <<]
[pattern, ., substring, (, pos, ), ), ;, }, ++, pos, ;, result, =, (, result, <<, 4, ), |]
[pos, ), ), ;, }, ++, pos, ;, result, =, (, result, <<, 4, ), |, digit, ;, }, return]
[;, }, ++, pos, ;, result, =, (, result, <<, 4, ), |, digit, ;, }, return, (, char, )]
[digit, ;, }, return, (, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (]
[(, char, ), result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (, ch, ), {, case]
[result, ;, }, private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (, ch, ), {, case, '?', :, case]
[private, boolean, isRepetitionStart, (, char, ch, ), {, switch, (, ch, ), {, case, '?', :, case, '*', :, case]
[(, char, ch, ), {, switch, (, ch, ), {, case, '?', :, case, '*', :, case, '+', :, case]
[), {, switch, (, ch, ), {, case, '?', :, case, '*', :, case, '+', :, case, '{', :, return]
[), {, case, '?', :, case, '*', :, case, '+', :, case, '{', :, return, true, ;, default, :, return]
[return, true, ;, default, :, return, false, ;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body, ), {, if, (]
[return, true, ;, default, :, return, false, ;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body, ), {, if, (]
[;, default, :, return, false, ;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body, ), {, if, (, pos, ==]
[false, ;, }, }, private, RegExpTree, parseRepetition, (, RegExpTree, body, ), {, if, (, pos, ==, limit, ), {, return]
[), {, if, (, pos, ==, limit, ), {, return, body, ;, }, int, min, ,, max, ;, switch, (]
[), {, if, (, pos, ==, limit, ), {, return, body, ;, }, int, min, ,, max, ;, switch, (]
[pos, ==, limit, ), {, return, body, ;, }, int, min, ,, max, ;, switch, (, pattern, ., charAt, (]
[return, body, ;, }, int, min, ,, max, ;, switch, (, pattern, ., charAt, (, pos, ), ), {, case]
[;, }, int, min, ,, max, ;, switch, (, pattern, ., charAt, (, pos, ), ), {, case, '+', :]
[}, int, min, ,, max, ;, switch, (, pattern, ., charAt, (, pos, ), ), {, case, '+', :, ++]
[min, ,, max, ;, switch, (, pattern, ., charAt, (, pos, ), ), {, case, '+', :, ++, pos, ;]
[max, ;, switch, (, pattern, ., charAt, (, pos, ), ), {, case, '+', :, ++, pos, ;, min, =]
[switch, (, pattern, ., charAt, (, pos, ), ), {, case, '+', :, ++, pos, ;, min, =, 1, ;]
[pattern, ., charAt, (, pos, ), ), {, case, '+', :, ++, pos, ;, min, =, 1, ;, max, =]
[pattern, ., charAt, (, pos, ), ), {, case, '+', :, ++, pos, ;, min, =, 1, ;, max, =]
[{, case, '+', :, ++, pos, ;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case]
['+', :, ++, pos, ;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :]
[:, ++, pos, ;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++]
[pos, ;, min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;]
[min, =, 1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =]
[1, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =, 0, ;]
[max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =, 0, ;, max, =]
[max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '*', :, ++, pos, ;, min, =, 0, ;, max, =]
[;, case, '*', :, ++, pos, ;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case]
['*', :, ++, pos, ;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :]
[:, ++, pos, ;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++]
[pos, ;, min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;]
[min, =, 0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min, =]
[0, ;, max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min, =, 0, ;]
[max, =, Integer, ., MAX_VALUE, ;, break, ;, case, '?', :, ++, pos, ;, min, =, 0, ;, max, =]
[;, break, ;, case, '?', :, ++, pos, ;, min, =, 0, ;, max, =, 1, ;, break, ;, case]
[;, case, '?', :, ++, pos, ;, min, =, 0, ;, max, =, 1, ;, break, ;, case, '{', :]
[case, '?', :, ++, pos, ;, min, =, 0, ;, max, =, 1, ;, break, ;, case, '{', :, ++]
[;, min, =, 0, ;, max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =]
[max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =, pos, ;, int, end, =]
[max, =, 1, ;, break, ;, case, '{', :, ++, pos, ;, int, start, =, pos, ;, int, end, =]
[break, ;, case, '{', :, ++, pos, ;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf, (]
[case, '{', :, ++, pos, ;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf, (, '}', ,]
[;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (]
[;, int, start, =, pos, ;, int, end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (]
[start, =, pos, ;, int, end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (, end, <]
[;, int, end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (, end, <, 0, ), {]
[end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (, end, <, 0, ), {, pos, =]
[end, =, pattern, ., indexOf, (, '}', ,, start, ), ;, if, (, end, <, 0, ), {, pos, =]
[pattern, ., indexOf, (, '}', ,, start, ), ;, if, (, end, <, 0, ), {, pos, =, start, -]
[(, '}', ,, start, ), ;, if, (, end, <, 0, ), {, pos, =, start, -, 1, ;, return]
[if, (, end, <, 0, ), {, pos, =, start, -, 1, ;, return, body, ;, }, String, counts, =]
[if, (, end, <, 0, ), {, pos, =, start, -, 1, ;, return, body, ;, }, String, counts, =]
[0, ), {, pos, =, start, -, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (]
[{, pos, =, start, -, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,]
[start, -, 1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;]
[1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =]
[1, ;, return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =]
[return, body, ;, }, String, counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =, end, +]
[counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =, end, +, 1, ;, int, comma, =]
[counts, =, pattern, ., substring, (, start, ,, end, ), ;, pos, =, end, +, 1, ;, int, comma, =]
[substring, (, start, ,, end, ), ;, pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf, (]
[), ;, pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {]
[pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =]
[pos, =, end, +, 1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =]
[1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (]
[1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (]
[1, ;, int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (]
[int, comma, =, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (, comma, >=]
[=, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (, comma, >=, 0, ?]
[=, counts, ., indexOf, (, ',', ), ;, try, {, min, =, Integer, ., parseInt, (, comma, >=, 0, ?]
[(, ',', ), ;, try, {, min, =, Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (]
[), ;, try, {, min, =, Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,]
[{, min, =, Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :]
[Integer, ., parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;]
[parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =]
[parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =]
[parseInt, (, comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =]
[comma, >=, 0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=]
[0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?]
[0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?]
[0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?]
[0, ?, counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?]
[counts, ., substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?, comma, +]
[substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=]
[substring, (, 0, ,, comma, ), :, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=]
[:, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?]
[:, counts, ), ;, max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?]
[max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (]
[max, =, comma, >=, 0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (]
[0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (]
[0, ?, comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (]
[comma, +, 1, !=, counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +]
[counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :]
[counts, ., length, (, ), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :]
[), ?, Integer, ., parseInt, (, counts, ., substring, (, comma, +, 1, ), ), :, Integer, ., MAX_VALUE, :]
[(, comma, +, 1, ), ), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {]
[+, 1, ), ), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =]
[), ), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =]
[), :, Integer, ., MAX_VALUE, :, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -]
[:, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (]
[:, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (]
[:, min, ;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (]
[;, }, catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (, min, <]
[catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (, min, <, 0, ||]
[catch, (, NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (, min, <, 0, ||]
[NumberFormatException, ex, ), {, min, =, max, =, -, 1, ;, }, if, (, min, <, 0, ||, min, >]
[{, min, =, max, =, -, 1, ;, }, if, (, min, <, 0, ||, min, >, max, ), {]
[=, max, =, -, 1, ;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =]
[=, max, =, -, 1, ;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =]
[=, -, 1, ;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =, start, -]
[;, }, if, (, min, <, 0, ||, min, >, max, ), {, pos, =, start, -, 1, ;, return]
[min, >, max, ), {, pos, =, start, -, 1, ;, return, body, ;, }, break, ;, default, :, return]
[=, start, -, 1, ;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =]
[;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (]
[;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (]
[;, return, body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (]
[body, ;, }, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (, pos, <]
[}, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (, pos, <, limit, &&]
[}, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (, pos, <, limit, &&]
[}, break, ;, default, :, return, body, ;, }, boolean, greedy, =, true, ;, if, (, pos, <, limit, &&]
[:, return, body, ;, }, boolean, greedy, =, true, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (]
[;, }, boolean, greedy, =, true, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==]
[greedy, =, true, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {]
[true, ;, if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =]
[if, (, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;]
[(, pos, <, limit, &&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;, ++]
[&&, pattern, ., charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return]
[charAt, (, pos, ), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (]
[pos, ), ==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,]
[==, '?', ), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,]
[), {, greedy, =, false, ;, ++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,]
[++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ;, }, }, return]
[++, pos, ;, }, return, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ;, }, }, return]
[., parseTopLevel, (, ), ;, }, public, static, boolean, matchesWholeInput, (, RegExpTree, t, ,, String, flags, ), {, if, (]
[., parseTopLevel, (, ), ;, }, public, static, boolean, matchesWholeInput, (, RegExpTree, t, ,, String, flags, ), {, if, (]
[., parseTopLevel, (, ), ;, }, public, static, boolean, matchesWholeInput, (, RegExpTree, t, ,, String, flags, ), {, if, (]
[;, }, public, static, boolean, matchesWholeInput, (, RegExpTree, t, ,, String, flags, ), {, if, (, flags, ., indexOf, (]
[static, boolean, matchesWholeInput, (, RegExpTree, t, ,, String, flags, ), {, if, (, flags, ., indexOf, (, 'm', ), >=]
[RegExpTree, t, ,, String, flags, ), {, if, (, flags, ., indexOf, (, 'm', ), >=, 0, ), {, return]
[), {, if, (, flags, ., indexOf, (, 'm', ), >=, 0, ), {, return, false, ;, }, if, (]
[{, if, (, flags, ., indexOf, (, 'm', ), >=, 0, ), {, return, false, ;, }, if, (, !]
[if, (, flags, ., indexOf, (, 'm', ), >=, 0, ), {, return, false, ;, }, if, (, !, (]
[if, (, flags, ., indexOf, (, 'm', ), >=, 0, ), {, return, false, ;, }, if, (, !, (]
[), >=, 0, ), {, return, false, ;, }, if, (, !, (, t, instanceof, Concatenation, ), ), {, return]
[false, ;, }, if, (, !, (, t, instanceof, Concatenation, ), ), {, return, false, ;, }, Concatenation, c, =]
[if, (, !, (, t, instanceof, Concatenation, ), ), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, )]
[t, instanceof, Concatenation, ), ), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (]
[t, instanceof, Concatenation, ), ), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (]
[t, instanceof, Concatenation, ), ), {, return, false, ;, }, Concatenation, c, =, (, Concatenation, ), t, ;, if, (]
[Concatenation, c, =, (, Concatenation, ), t, ;, if, (, c, ., elements, ., isEmpty, (, ), ), {, return]
[t, ;, if, (, c, ., elements, ., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =]
[t, ;, if, (, c, ., elements, ., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =]
[t, ;, if, (, c, ., elements, ., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =]
[elements, ., isEmpty, (, ), ), {, return, false, ;, }, RegExpTree, first, =, c, ., elements, ., get, (]
[), {, return, false, ;, }, RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =]
[), {, return, false, ;, }, RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =]
[), {, return, false, ;, }, RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =]
[RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =, c, ., elements, ., get, (]
[RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =, c, ., elements, ., get, (]
[RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =, c, ., elements, ., get, (]
[RegExpTree, first, =, c, ., elements, ., get, (, 0, ), ,, last, =, c, ., elements, ., get, (]
[(, 0, ), ,, last, =, c, ., elements, ., get, (, c, ., elements, ., size, (, ), -]
[=, c, ., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, ), ;, if, (]
[c, ., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !]
[., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !, (]
[., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !, (]
[., elements, ., get, (, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !, (]
[(, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !, (, first, instanceof, Anchor, &&]
[(, c, ., elements, ., size, (, ), -, 1, ), ;, if, (, !, (, first, instanceof, Anchor, &&]
[), -, 1, ), ;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return]
[;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return]
[;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return]
[;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return]
[;, if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return]
[if, (, !, (, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return, (]
[(, first, instanceof, Anchor, &&, last, instanceof, Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, )]
[last, instanceof, Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==]
[Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&]
[Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&]
[Anchor, ), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&]
[), ), {, return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&, (]
[return, false, ;, }, return, (, (, Anchor, ), first, ), ., type, ==, '^', &&, (, (, Anchor, )]
[(, (, Anchor, ), first, ), ., type, ==, '^', &&, (, (, Anchor, ), last, ), ., type, ==]
[==, '$', ;, }, static, abstract, class, RegExpTreeAtom, extends, RegExpTree, {, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[Override, public, boolean, isCaseSensitive, (, ), {, return, false, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[public, boolean, containsAnchor, (, ), {, return, false, ;, }, @, Override, public, final, int, numCapturingGroups, (, ), {, return]
[{, return, 0, ;, }, @, Override, public, final, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[{, return, 0, ;, }, @, Override, public, final, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[ImmutableList, ., of, (, ), ;, }, }, static, final, class, Empty, extends, RegExpTreeAtom, {, static, final, Empty, INSTANCE, =]
[final, Empty, INSTANCE, =, new, Empty, (, ), ;, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[(, Object, o, ), {, return, o, instanceof, Empty, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[;, }, }, static, final, class, Anchor, extends, RegExpTreeAtom, {, final, char, type, ;, Anchor, (, char, type, ), {]
[;, }, }, static, final, class, Anchor, extends, RegExpTreeAtom, {, final, char, type, ;, Anchor, (, char, type, ), {]
[final, class, Anchor, extends, RegExpTreeAtom, {, final, char, type, ;, Anchor, (, char, type, ), {, this, ., type, =]
[), {, this, ., type, =, type, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[RegExpTree, simplify, (, String, flags, ), {, return, this, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[public, boolean, containsAnchor, (, ), {, return, true, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[public, boolean, containsAnchor, (, ), {, return, true, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[), {, return, true, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (]
[), {, sb, ., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[), {, sb, ., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[{, sb, ., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[(, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&]
[(, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&, type, ==]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&, type, ==]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&, type, ==, (]
[Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Anchor, &&, type, ==, (, (, Anchor, )]
[==, (, (, Anchor, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[==, (, (, Anchor, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, Anchor, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, type, ^]
[;, }, }, static, final, class, WordBoundary, extends, RegExpTreeAtom, {, final, char, type, ;, WordBoundary, (, char, type, ), {]
[;, }, }, static, final, class, WordBoundary, extends, RegExpTreeAtom, {, final, char, type, ;, WordBoundary, (, char, type, ), {]
[final, class, WordBoundary, extends, RegExpTreeAtom, {, final, char, type, ;, WordBoundary, (, char, type, ), {, this, ., type, =]
[), {, this, ., type, =, type, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (]
[}, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '\\', ), ., append, (]
[(, '\\', ), ., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[(, '\\', ), ., append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[append, (, type, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[{, sb, ., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[(, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&]
[(, type, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&, type, ==]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&, type, ==]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&, type, ==, (]
[Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, WordBoundary, &&, type, ==, (, (, WordBoundary, )]
[==, (, (, WordBoundary, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[==, (, (, WordBoundary, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, WordBoundary, ), o, ), ., type, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x5673aa29, ^]
[;, }, }, static, final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {]
[;, }, }, static, final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {]
[final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (]
[final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (]
[final, class, BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (]
[BackReference, extends, RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (, groupIndex, >=]
[RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (, groupIndex, >=, 0, &&]
[RegExpTreeAtom, {, final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (, groupIndex, >=, 0, &&]
[final, int, groupIndex, ;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (, groupIndex, >=, 0, &&, groupIndex, <=]
[;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (, groupIndex, >=, 0, &&, groupIndex, <=, 99, ), ;]
[;, BackReference, (, int, groupIndex, ), {, Preconditions, ., checkArgument, (, groupIndex, >=, 0, &&, groupIndex, <=, 99, ), ;]
[groupIndex, ), {, Preconditions, ., checkArgument, (, groupIndex, >=, 0, &&, groupIndex, <=, 99, ), ;, this, ., groupIndex, =]
[), ;, this, ., groupIndex, =, groupIndex, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[simplify, (, String, flags, ), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[), {, return, this, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (]
[}, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '\\', ), ., append, (]
[(, '\\', ), ., append, (, groupIndex, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[(, '\\', ), ., append, (, groupIndex, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[append, (, groupIndex, ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[{, sb, ., append, (, groupIndex, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, groupIndex, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, groupIndex, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[(, groupIndex, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&]
[(, groupIndex, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&, groupIndex, ==]
[), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&, groupIndex, ==]
[;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&, groupIndex, ==, (]
[Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, BackReference, &&, groupIndex, ==, (, (, BackReference, )]
[==, (, (, BackReference, ), o, ), ., groupIndex, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[==, (, (, BackReference, ), o, ), ., groupIndex, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, BackReference, ), o, ), ., groupIndex, ;, }, @, Override, public, int, hashCode, (, ), {, return, 0xff072663, ^]
[;, }, }, static, final, class, Text, extends, RegExpTreeAtom, {, final, String, text, ;, Text, (, String, text, ), {]
[;, }, }, static, final, class, Text, extends, RegExpTreeAtom, {, final, String, text, ;, Text, (, String, text, ), {]
[final, class, Text, extends, RegExpTreeAtom, {, final, String, text, ;, Text, (, String, text, ), {, this, ., text, =]
[text, ;, }, private, static, void, escapeRegularCharOnto, (, char, ch, ,, int, next, ,, StringBuilder, sb, ), {, switch, (]
[static, void, escapeRegularCharOnto, (, char, ch, ,, int, next, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case]
[(, char, ch, ,, int, next, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '$', :, case]
[,, int, next, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '$', :, case, '^', :, case]
[,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '$', :, case, '^', :, case, '*', :, case]
[), {, switch, (, ch, ), {, case, '$', :, case, '^', :, case, '*', :, case, '(', :, case]
[(, ch, ), {, case, '$', :, case, '^', :, case, '*', :, case, '(', :, case, ')', :, case]
[{, case, '$', :, case, '^', :, case, '*', :, case, '(', :, case, ')', :, case, '+', :, case]
[:, case, '^', :, case, '*', :, case, '(', :, case, ')', :, case, '+', :, case, '[', :, case]
[:, case, '*', :, case, '(', :, case, ')', :, case, '+', :, case, '[', :, case, '|', :, case]
[:, case, '(', :, case, ')', :, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case]
[:, case, ')', :, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case]
[')', :, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case, '?', :]
[')', :, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case, '?', :]
[')', :, case, '+', :, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case, '?', :]
[:, case, '[', :, case, '|', :, case, '.', :, case, '/', :, case, '?', :, sb, ., append, (]
['|', :, case, '.', :, case, '/', :, case, '?', :, sb, ., append, (, '\\', ), ., append, (]
['/', :, case, '?', :, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case]
[:, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (]
[:, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (]
[:, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (]
[., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=]
[(, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&]
[(, '\\', ), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&]
[), ., append, (, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=]
[(, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=, '9', ), {]
[(, ch, ), ;, break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=, '9', ), {]
[break, ;, case, '{', :, if, (, '0', <=, next, &&, next, <=, '9', ), {, sb, ., append, (]
[:, if, (, '0', <=, next, &&, next, <=, '9', ), {, sb, ., append, (, '\\', ), ;, }]
[:, if, (, '0', <=, next, &&, next, <=, '9', ), {, sb, ., append, (, '\\', ), ;, }]
[<=, next, &&, next, <=, '9', ), {, sb, ., append, (, '\\', ), ;, }, sb, ., append, (]
[{, sb, ., append, (, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break, ;, default, :]
[., append, (, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (]
[(, '\\', ), ;, }, sb, ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,]
[ch, ,, sb, ), ;, }, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, int, n, =]
[ch, ,, sb, ), ;, }, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, int, n, =]
[Override, public, RegExpTree, simplify, (, String, flags, ), {, int, n, =, text, ., length, (, ), ;, if, (]
[Override, public, RegExpTree, simplify, (, String, flags, ), {, int, n, =, text, ., length, (, ), ;, if, (]
[RegExpTree, simplify, (, String, flags, ), {, int, n, =, text, ., length, (, ), ;, if, (, n, ==]
[flags, ), {, int, n, =, text, ., length, (, ), ;, if, (, n, ==, 0, ), {, return]
[flags, ), {, int, n, =, text, ., length, (, ), ;, if, (, n, ==, 0, ), {, return]
[., length, (, ), ;, if, (, n, ==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (]
[., length, (, ), ;, if, (, n, ==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (]
[., length, (, ), ;, if, (, n, ==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (]
[;, if, (, n, ==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (]
[n, ==, 0, ), {, return, Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (, 'i', ), >=]
[Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =]
[Empty, ., INSTANCE, ;, }, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =]
[}, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (]
[indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (]
[indexOf, (, 'i', ), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (]
['i', ), >=, 0, ), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (, text, !=]
[), {, String, canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (, text, !=, canonicalized, ), {, return]
[canonicalized, =, CaseCanonicalize, ., caseCanonicalize, (, text, ), ;, if, (, text, !=, canonicalized, ), {, return, new, Text, (]
[text, ), ;, if, (, text, !=, canonicalized, ), {, return, new, Text, (, canonicalized, ), ;, }, }, return]
[;, }, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, int, i, =]
[this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, int, i, =, 0, ,, n, =]
[this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, int, i, =, 0, ,, n, =]
[boolean, isCaseSensitive, (, ), {, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;]
[boolean, isCaseSensitive, (, ), {, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;]
[(, ), {, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;, i, <]
[{, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;]
[for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++]
[0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, if, (]
[0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, if, (]
[0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, if, (]
[length, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (]
[length, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (]
[i, <, n, ;, ++, i, ), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (]
[), {, if, (, CaseCanonicalize, ., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), ), ), {, return]
[., CASE_SENSITIVE, ., contains, (, text, ., charAt, (, i, ), ), ), {, return, true, ;, }, }, return]
[}, return, false, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =]
[}, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =]
[}, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =]
[(, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;]
[(, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;]
[sb, ), {, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;, i, <]
[{, for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;]
[for, (, int, i, =, 0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++]
[i, =, 0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {]
[0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (]
[0, ,, n, =, text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (]
[text, ., length, (, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (]
[(, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,]
[(, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,]
[(, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,]
[(, ), ;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,]
[;, i, <, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +]
[<, n, ;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <]
[;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?]
[;, ++, i, ), {, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?]
[{, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt, (]
[{, escapeRegularCharOnto, (, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt, (]
[(, text, ., charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt, (, i, +]
[charAt, (, i, ), ,, i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :]
[(, i, ), ,, i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :, -]
[), ,, i, +, 1, <, n, ?, text, ., charAt, (, i, +, 1, ), :, -, 1, ,]
[), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[), :, -, 1, ,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[,, sb, ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[}, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, '`', ), ., append, (]
[appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, '`', ), ., append, (, text, ), ., append, (]
[text, ), ., append, (, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[text, ), ., append, (, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[text, ), ., append, (, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[(, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&]
[(, '`', ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&, text, ., equals, (]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&, text, ., equals, (]
[@, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&, text, ., equals, (, (]
[boolean, equals, (, Object, o, ), {, return, o, instanceof, Text, &&, text, ., equals, (, (, (, Text, )]
[(, (, Text, ), o, ), ., text, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, Text, ), o, ), ., text, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, Text, ), o, ), ., text, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., text, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, text, ., hashCode, (, ), ^]
[;, final, boolean, greedy, ;, Repetition, (, RegExpTree, body, ,, int, min, ,, int, max, ,, boolean, greedy, ), {]
[;, final, boolean, greedy, ;, Repetition, (, RegExpTree, body, ,, int, min, ,, int, max, ,, boolean, greedy, ), {]
[;, Repetition, (, RegExpTree, body, ,, int, min, ,, int, max, ,, boolean, greedy, ), {, this, ., body, =]
[(, RegExpTree, body, ,, int, min, ,, int, max, ,, boolean, greedy, ), {, this, ., body, =, body, ;]
[(, RegExpTree, body, ,, int, min, ,, int, max, ,, boolean, greedy, ), {, this, ., body, =, body, ;]
[int, min, ,, int, max, ,, boolean, greedy, ), {, this, ., body, =, body, ;, this, ., min, =]
[,, int, max, ,, boolean, greedy, ), {, this, ., body, =, body, ;, this, ., min, =, min, ;]
[,, int, max, ,, boolean, greedy, ), {, this, ., body, =, body, ;, this, ., min, =, min, ;]
[boolean, greedy, ), {, this, ., body, =, body, ;, this, ., min, =, min, ;, this, ., max, =]
[), {, this, ., body, =, body, ;, this, ., min, =, min, ;, this, ., max, =, max, ;]
[), {, this, ., body, =, body, ;, this, ., min, =, min, ;, this, ., max, =, max, ;]
[body, =, body, ;, this, ., min, =, min, ;, this, ., max, =, max, ;, this, ., greedy, =]
[this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body, =]
[this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body, =]
[this, ., greedy, =, greedy, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body, =]
[}, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, body, =, this, ., body, ., simplify, (]
[simplify, (, String, flags, ), {, RegExpTree, body, =, this, ., body, ., simplify, (, flags, ), ;, if, (]
[simplify, (, String, flags, ), {, RegExpTree, body, =, this, ., body, ., simplify, (, flags, ), ;, if, (]
[simplify, (, String, flags, ), {, RegExpTree, body, =, this, ., body, ., simplify, (, flags, ), ;, if, (]
[String, flags, ), {, RegExpTree, body, =, this, ., body, ., simplify, (, flags, ), ;, if, (, max, ==]
[), {, RegExpTree, body, =, this, ., body, ., simplify, (, flags, ), ;, if, (, max, ==, 0, &&]
[{, RegExpTree, body, =, this, ., body, ., simplify, (, flags, ), ;, if, (, max, ==, 0, &&, !]
[{, RegExpTree, body, =, this, ., body, ., simplify, (, flags, ), ;, if, (, max, ==, 0, &&, !]
[simplify, (, flags, ), ;, if, (, max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return]
[simplify, (, flags, ), ;, if, (, max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return]
[max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (]
[max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (]
[max, ==, 0, &&, !, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (]
[!, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||]
[!, body, ., hasCapturingGroup, (, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||]
[(, ), ), {, return, Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (]
[Empty, ., INSTANCE, ;, }, if, (, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, ), ), {, return]
[(, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, ), ), {, return, body, ;, }, int, min, =]
[(, body, instanceof, Empty, ||, NEVER_MATCHES, ., equals, (, body, ), ), {, return, body, ;, }, int, min, =]
[equals, (, body, ), ), {, return, body, ;, }, int, min, =, this, ., min, ;, int, max, =]
[equals, (, body, ), ), {, return, body, ;, }, int, min, =, this, ., min, ;, int, max, =]
[return, body, ;, }, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (]
[return, body, ;, }, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (]
[., min, ;, int, max, =, this, ., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =]
[int, max, =, this, ., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, )]
[., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (]
[., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (]
[., max, ;, if, (, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (]
[(, body, instanceof, Repetition, ), {, Repetition, rbody, =, (, Repetition, ), body, ;, if, (, rbody, ., greedy, ==]
[Repetition, rbody, =, (, Repetition, ), body, ;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =]
[Repetition, rbody, =, (, Repetition, ), body, ;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =]
[rbody, =, (, Repetition, ), body, ;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =, (]
[Repetition, ), body, ;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =, (, (, long, )]
[;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =, (, (, long, ), min, ), *]
[;, if, (, rbody, ., greedy, ==, greedy, ), {, long, lmin, =, (, (, long, ), min, ), *]
[greedy, ), {, long, lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;, long, lmax, =]
[greedy, ), {, long, lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;, long, lmax, =]
[), {, long, lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;, long, lmax, =, (]
[lmin, =, (, (, long, ), min, ), *, rbody, ., min, ;, long, lmax, =, (, (, long, )]
[(, long, ), min, ), *, rbody, ., min, ;, long, lmax, =, (, (, long, ), max, ), *]
[(, long, ), min, ), *, rbody, ., min, ;, long, lmax, =, (, (, long, ), max, ), *]
[rbody, ., min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if, (]
[rbody, ., min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if, (]
[min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if, (, lmin, <]
[min, ;, long, lmax, =, (, (, long, ), max, ), *, rbody, ., max, ;, if, (, lmin, <]
[(, (, long, ), max, ), *, rbody, ., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {]
[long, ), max, ), *, rbody, ., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =]
[long, ), max, ), *, rbody, ., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =]
[*, rbody, ., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;]
[., max, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =]
[if, (, lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, )]
[lmin, <, Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;]
[Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =]
[Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =]
[Integer, ., MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =]
[MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=]
[MAX_VALUE, ), {, body, =, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=]
[=, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?]
[=, rbody, ., body, ;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?]
[;, min, =, (, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :]
[(, int, ), lmin, ;, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, )]
[lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (]
[lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (]
[lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (]
[Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==]
[MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&]
[MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&]
[Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&, max, ==]
[(, int, ), lmax, ;, }, }, }, if, (, min, ==, 1, &&, max, ==, 1, ), {, return]
[}, }, if, (, min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =]
[}, }, if, (, min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =]
[}, }, if, (, min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =]
[min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||]
[min, ==, 1, &&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||]
[1, &&, max, ==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==]
[==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return]
[==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return]
[==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return]
[==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return]
[==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return]
[==, 1, ), {, return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return]
[return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, ., equals, (]
[return, body, ;, }, boolean, greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, ., equals, (]
[greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&]
[greedy, =, this, ., greedy, ||, min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&]
[this, ., greedy, ||, min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==]
[this, ., greedy, ||, min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==]
[min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&]
[min, ==, max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&]
[max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==]
[max, ;, return, body, ., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==]
[., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&]
[., equals, (, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&]
[(, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==]
[(, this, ., body, ), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==]
[), &&, min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?]
[min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :]
[min, ==, this, ., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :]
[., min, &&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (]
[&&, max, ==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,]
[==, this, ., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,]
[., max, &&, greedy, ==, this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,]
[this, ., greedy, ?, this, :, new, Repetition, (, body, ,, min, ,, max, ,, greedy, ), ., simplify, (]
[max, ,, greedy, ), ., simplify, (, flags, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[max, ,, greedy, ), ., simplify, (, flags, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[(, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[(, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[(, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return]
[(, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return]
[., numCapturingGroups, (, ), ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[., numCapturingGroups, (, ), ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, ImmutableList, ., of, (]
[{, return, ImmutableList, ., of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (]
[{, return, ImmutableList, ., of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (]
[{, return, ImmutableList, ., of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (]
[{, return, ImmutableList, ., of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (]
[{, return, ImmutableList, ., of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (]
[of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||]
[of, (, body, ), ;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||]
[;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||]
[;, }, private, void, appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||]
[appendBodySourceCode, (, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||]
[(, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (]
[(, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (]
[(, StringBuilder, sb, ), {, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (]
[{, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&]
[{, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&]
[{, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&]
[{, if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&]
[if, (, body, instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (]
[instanceof, Alternation, ||, body, instanceof, Concatenation, ||, body, instanceof, Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, )]
[Repetition, ||, (, body, instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >]
[instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1, ), ), {]
[instanceof, Text, &&, (, (, Text, ), body, ), ., text, ., length, (, ), >, 1, ), ), {]
[(, Text, ), body, ), ., text, ., length, (, ), >, 1, ), ), {, sb, ., append, (]
[body, ), ., text, ., length, (, ), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;]
[body, ), ., text, ., length, (, ), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;]
[., length, (, ), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (]
[), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;]
[), >, 1, ), ), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;]
[), {, sb, ., append, (, "(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (]
["(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {]
["(?:", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {]
[., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, body, ., appendSourceCode, (]
[(, sb, ), ;, }, }, private, static, int, suffixLen, (, int, min, ,, int, max, ), {, if, (]
[(, sb, ), ;, }, }, private, static, int, suffixLen, (, int, min, ,, int, max, ), {, if, (]
[), ;, }, }, private, static, int, suffixLen, (, int, min, ,, int, max, ), {, if, (, max, ==]
[), ;, }, }, private, static, int, suffixLen, (, int, min, ,, int, max, ), {, if, (, max, ==]
[suffixLen, (, int, min, ,, int, max, ), {, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (]
[,, int, max, ), {, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case]
[), {, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, return]
[(, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, return, 1, ;, case]
[Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, return, 1, ;, case, 1, :, return]
[switch, (, min, ), {, case, 0, :, return, 1, ;, case, 1, :, return, 1, ;, default, :, return]
[switch, (, min, ), {, case, 0, :, return, 1, ;, case, 1, :, return, 1, ;, default, :, return]
[min, ), {, case, 0, :, return, 1, ;, case, 1, :, return, 1, ;, default, :, return, 3, +]
[{, case, 0, :, return, 1, ;, case, 1, :, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (]
[case, 1, :, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (]
[case, 1, :, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (]
[case, 1, :, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (]
[:, return, 1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==]
[1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==, 0, &&]
[1, ;, default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==, 0, &&]
[default, :, return, 3, +, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==, 0, &&, max, ==]
[+, numDecimalDigits, (, min, ), ;, }, }, if, (, min, ==, 0, &&, max, ==, 1, ), {, return]
[;, }, }, if, (, min, ==, 0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (]
[;, }, }, if, (, min, ==, 0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (]
[}, if, (, min, ==, 0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (, min, ==]
[0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (]
[0, &&, max, ==, 1, ), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (]
[max, ==, 1, ), {, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min, ==]
[{, return, 1, ;, }, if, (, min, ==, max, ), {, if, (, min, ==, 1, ), {, return]
[}, if, (, min, ==, max, ), {, if, (, min, ==, 1, ), {, return, 0, ;, }, return]
[}, if, (, min, ==, max, ), {, if, (, min, ==, 1, ), {, return, 0, ;, }, return]
[(, min, ==, max, ), {, if, (, min, ==, 1, ), {, return, 0, ;, }, return, 2, +]
[==, max, ), {, if, (, min, ==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (]
[(, min, ==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return]
[(, min, ==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return]
[(, min, ==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return]
[==, 1, ), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +]
[), {, return, 0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +, numDecimalDigits, (]
[0, ;, }, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +, numDecimalDigits, (, min, ), +]
[}, return, 2, +, numDecimalDigits, (, min, ), ;, }, return, 3, +, numDecimalDigits, (, min, ), +, numDecimalDigits, (]
[min, ), +, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (]
[min, ), +, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (]
[+, numDecimalDigits, (, max, ), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n, <]
[), ;, }, private, static, int, numDecimalDigits, (, int, n, ), {, if, (, n, <, 0, ), {, throw]
[n, ), {, if, (, n, <, 0, ), {, throw, new, AssertionError, (, ), ;, }, int, nDigits, =]
[(, n, <, 0, ), {, throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (]
[(, n, <, 0, ), {, throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (]
[<, 0, ), {, throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (, n, >=]
[{, throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (, n, >=, 10, ), {]
[throw, new, AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (, n, >=, 10, ), {, ++]
[AssertionError, (, ), ;, }, int, nDigits, =, 1, ;, while, (, n, >=, 10, ), {, ++, nDigits, ;]
[), ;, }, int, nDigits, =, 1, ;, while, (, n, >=, 10, ), {, ++, nDigits, ;, n, /=]
[nDigits, =, 1, ;, while, (, n, >=, 10, ), {, ++, nDigits, ;, n, /=, 10, ;, }, return]
[10, ;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, int, bodyStart, =]
[10, ;, }, return, nDigits, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, int, bodyStart, =]
[}, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, int, bodyStart, =, sb, ., length, (, ), ;]
[Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, int, bodyStart, =, sb, ., length, (, ), ;, appendBodySourceCode, (]
[sb, ), {, int, bodyStart, =, sb, ., length, (, ), ;, appendBodySourceCode, (, sb, ), ;, int, bodyEnd, =]
[sb, ), {, int, bodyStart, =, sb, ., length, (, ), ;, appendBodySourceCode, (, sb, ), ;, int, bodyEnd, =]
[(, ), ;, appendBodySourceCode, (, sb, ), ;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =]
[(, ), ;, appendBodySourceCode, (, sb, ), ;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =]
[;, appendBodySourceCode, (, sb, ), ;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =, bodyEnd, -]
[;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min, =]
[;, int, bodyEnd, =, sb, ., length, (, ), ;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min, =]
[(, ), ;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =]
[(, ), ;, int, bodyLen, =, bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =]
[bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (]
[bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (]
[bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (]
[bodyEnd, -, bodyStart, ;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (]
[bodyStart, ;, int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min, >=]
[int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&]
[int, min, =, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&]
[=, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==]
[=, this, ., min, ;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==]
[;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||]
[;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||]
[;, int, max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||]
[max, =, this, ., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -]
[this, ., max, ;, if, (, min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=]
[min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =]
[min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =]
[min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =]
[min, >=, 2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =]
[2, &&, max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==]
[max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||]
[max, ==, Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||]
[Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==]
[Integer, ., MAX_VALUE, ||, max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==]
[max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?]
[max, -, min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?]
[min, <=, 1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -]
[1, ), {, int, expanded, =, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :]
[=, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =]
[=, min, ==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =]
[==, max, ||, max, ==, Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -]
[Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =]
[Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =]
[Integer, ., MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =]
[MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==]
[MAX_VALUE, ?, min, -, 1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==]
[1, :, min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?]
[min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :]
[min, ;, int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :]
[int, expandedMin, =, min, -, expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -]
[expanded, ;, int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen, =]
[int, expandedMax, =, max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen, (]
[=, max, ==, Integer, ., MAX_VALUE, ?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,]
[?, max, :, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =]
[:, max, -, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (]
[-, expanded, ;, int, suffixLen, =, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,]
[=, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (]
[=, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (]
[=, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (]
[=, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (]
[=, suffixLen, (, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (]
[(, min, ,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *]
[,, max, ), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +]
[), ;, int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <]
[int, expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&]
[expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !]
[expandedSuffixLen, =, suffixLen, (, expandedMin, ,, expandedMax, ), ;, if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !]
[if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (]
[if, (, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (]
[(, bodyLen, *, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --]
[*, expanded, +, expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=]
[expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {]
[expandedSuffixLen, <, suffixLen, &&, !, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {]
[!, body, ., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {, sb, ., append, (]
[., hasCapturingGroup, (, ), ), {, while, (, --, expanded, >=, 0, ), {, sb, ., append, (, sb, ,]
[(, ), ), {, while, (, --, expanded, >=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,]
[while, (, --, expanded, >=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }]
[--, expanded, >=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =]
[>=, 0, ), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;]
[), {, sb, ., append, (, sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =]
[sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (]
[sb, ,, bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (]
[bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max, ==]
[bodyStart, ,, bodyEnd, ), ;, }, min, =, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max, ==]
[=, expandedMin, ;, max, =, expandedMax, ;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (]
[=, expandedMax, ;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case]
[;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :]
[;, }, }, if, (, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :]
[(, max, ==, Integer, ., MAX_VALUE, ), {, switch, (, min, ), {, case, 0, :, sb, ., append, (]
[), {, switch, (, min, ), {, case, 0, :, sb, ., append, (, '*', ), ;, break, ;, case]
[switch, (, min, ), {, case, 0, :, sb, ., append, (, '*', ), ;, break, ;, case, 1, :]
[switch, (, min, ), {, case, 0, :, sb, ., append, (, '*', ), ;, break, ;, case, 1, :]
[{, case, 0, :, sb, ., append, (, '*', ), ;, break, ;, case, 1, :, sb, ., append, (]
[(, '*', ), ;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;, default, :]
[(, '*', ), ;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;, default, :]
[(, '*', ), ;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;, default, :]
[(, '*', ), ;, break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;, default, :]
[break, ;, case, 1, :, sb, ., append, (, '+', ), ;, break, ;, default, :, sb, ., append, (]
[sb, ., append, (, '+', ), ;, break, ;, default, :, sb, ., append, (, '{', ), ., append, (]
[), ;, break, ;, default, :, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (]
[append, (, '{', ), ., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (]
[append, (, '{', ), ., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (]
[append, (, '{', ), ., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (]
['{', ), ., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (, min, ==]
[., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&]
[., append, (, min, ), ., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&]
[(, min, ), ., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&, max, ==]
[., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&, max, ==, 1, ), {]
[., append, (, ",}", ), ;, }, }, else, if, (, min, ==, 0, &&, max, ==, 1, ), {]
[), ;, }, }, else, if, (, min, ==, 0, &&, max, ==, 1, ), {, sb, ., append, (]
[min, ==, 0, &&, max, ==, 1, ), {, sb, ., append, (, '?', ), ;, }, else, if, (]
[min, ==, 0, &&, max, ==, 1, ), {, sb, ., append, (, '?', ), ;, }, else, if, (]
[0, &&, max, ==, 1, ), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==]
[), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (]
[), {, sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (]
[sb, ., append, (, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (, min, !=]
[(, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (, min, !=, 1, ), {]
[(, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (, min, !=, 1, ), {]
[(, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (, min, !=, 1, ), {]
[(, '?', ), ;, }, else, if, (, min, ==, max, ), {, if, (, min, !=, 1, ), {]
[}, else, if, (, min, ==, max, ), {, if, (, min, !=, 1, ), {, sb, ., append, (]
[==, max, ), {, if, (, min, !=, 1, ), {, sb, ., append, (, '{', ), ., append, (]
[(, min, !=, 1, ), {, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (]
[., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {]
[., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {]
[., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {]
[., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {]
[., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {]
[., append, (, '{', ), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {]
[), ., append, (, min, ), ., append, (, '}', ), ;, }, }, else, {, sb, ., append, (]
[), ., append, (, '}', ), ;, }, }, else, {, sb, ., append, (, '{', ), ., append, (]
[), ;, }, }, else, {, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (]
[{, sb, ., append, (, '{', ), ., append, (, min, ), ., append, (, ',', ), ., append, (]
['{', ), ., append, (, min, ), ., append, (, ',', ), ., append, (, max, ), ., append, (]
[), ., append, (, ',', ), ., append, (, max, ), ., append, (, '}', ), ;, }, if, (]
[., append, (, ',', ), ., append, (, max, ), ., append, (, '}', ), ;, }, if, (, !]
[',', ), ., append, (, max, ), ., append, (, '}', ), ;, }, if, (, !, greedy, ), {]
[',', ), ., append, (, max, ), ., append, (, '}', ), ;, }, if, (, !, greedy, ), {]
[(, max, ), ., append, (, '}', ), ;, }, if, (, !, greedy, ), {, sb, ., append, (]
[{, sb, ., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[{, sb, ., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[{, sb, ., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[{, sb, ., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[{, sb, ., append, (, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[(, '?', ), ;, }, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[}, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, " min=", ), ., append, (]
[appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, " min=", ), ., append, (, min, ), ., append, (]
[{, sb, ., append, (, " min=", ), ., append, (, min, ), ., append, (, ", max=", ), ., append, (]
[" min=", ), ., append, (, min, ), ., append, (, ", max=", ), ., append, (, max, ), ;, if, (]
[), ., append, (, min, ), ., append, (, ", max=", ), ., append, (, max, ), ;, if, (, !]
[(, min, ), ., append, (, ", max=", ), ., append, (, max, ), ;, if, (, !, greedy, ), {]
[(, min, ), ., append, (, ", max=", ), ., append, (, max, ), ;, if, (, !, greedy, ), {]
[append, (, ", max=", ), ., append, (, max, ), ;, if, (, !, greedy, ), {, sb, ., append, (]
[., append, (, "  not_greedy", ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[append, (, "  not_greedy", ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
[(, "  not_greedy", ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[(, "  not_greedy", ), ;, }, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, Repetition, ), ), {, return]
[o, ), {, if, (, !, (, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =]
[if, (, !, (, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, )]
[(, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return]
[(, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return]
[(, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return]
[(, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return]
[(, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return]
[(, o, instanceof, Repetition, ), ), {, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return]
[{, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals, (]
[{, return, false, ;, }, Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals, (]
[Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals, (, that, ., body, ), &&]
[Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals, (, that, ., body, ), &&]
[Repetition, that, =, (, Repetition, ), o, ;, return, this, ., body, ., equals, (, that, ., body, ), &&]
[Repetition, ), o, ;, return, this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==]
[Repetition, ), o, ;, return, this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==]
[return, this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&]
[return, this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&]
[return, this, ., body, ., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&]
[., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==]
[., equals, (, that, ., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==]
[., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&]
[., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&]
[., body, ), &&, this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&]
[this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==]
[this, ., min, ==, that, ., min, &&, this, ., max, ==, that, ., max, &&, this, ., greedy, ==]
[max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[max, &&, this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return]
[this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +]
[this, ., greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +]
[greedy, ==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *]
[==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (]
[==, that, ., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (]
[., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +]
[., greedy, ;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +]
[;, }, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *]
[}, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *, (]
[}, @, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *, (]
[@, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *, (, (]
[@, Override, public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *, (, (]
[public, int, hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *, (, (, greedy, ?]
[hashCode, (, ), {, return, min, +, 31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :]
[{, return, min, +, 31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +]
[{, return, min, +, 31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +]
[min, +, 31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *]
[min, +, 31, *, (, max, +, 31, *, (, (, greedy, ?, 1, :, 0, ), +, 31, *]
[RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (, List, <, ?, extends, RegExpTree, >, alternatives, ), {]
[RegExpTree, {, final, ImmutableList, <, RegExpTree, >, alternatives, ;, Alternation, (, List, <, ?, extends, RegExpTree, >, alternatives, ), {]
[<, RegExpTree, >, alternatives, ;, Alternation, (, List, <, ?, extends, RegExpTree, >, alternatives, ), {, this, ., alternatives, =]
[<, RegExpTree, >, alternatives, ;, Alternation, (, List, <, ?, extends, RegExpTree, >, alternatives, ), {, this, ., alternatives, =]
[;, Alternation, (, List, <, ?, extends, RegExpTree, >, alternatives, ), {, this, ., alternatives, =, ImmutableList, ., copyOf, (]
[alternatives, ), ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, List, <, RegExpTree, >, alternatives, =]
[alternatives, ), ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, List, <, RegExpTree, >, alternatives, =]
[flags, ), {, List, <, RegExpTree, >, alternatives, =, Lists, ., newArrayList, (, ), ;, for, (, RegExpTree, alternative, :]
[flags, ), {, List, <, RegExpTree, >, alternatives, =, Lists, ., newArrayList, (, ), ;, for, (, RegExpTree, alternative, :]
[RegExpTree, >, alternatives, =, Lists, ., newArrayList, (, ), ;, for, (, RegExpTree, alternative, :, this, ., alternatives, ), {]
[alternatives, =, Lists, ., newArrayList, (, ), ;, for, (, RegExpTree, alternative, :, this, ., alternatives, ), {, alternative, =]
[alternatives, =, Lists, ., newArrayList, (, ), ;, for, (, RegExpTree, alternative, :, this, ., alternatives, ), {, alternative, =]
[newArrayList, (, ), ;, for, (, RegExpTree, alternative, :, this, ., alternatives, ), {, alternative, =, alternative, ., simplify, (]
[(, RegExpTree, alternative, :, this, ., alternatives, ), {, alternative, =, alternative, ., simplify, (, flags, ), ;, if, (]
[(, RegExpTree, alternative, :, this, ., alternatives, ), {, alternative, =, alternative, ., simplify, (, flags, ), ;, if, (]
[., alternatives, ), {, alternative, =, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {]
[., alternatives, ), {, alternative, =, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {]
[alternative, =, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (]
[alternative, =, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (]
[=, alternative, ., simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (, (]
[simplify, (, flags, ), ;, if, (, alternative, instanceof, Alternation, ), {, alternatives, ., addAll, (, (, (, Alternation, )]
[Alternation, ), {, alternatives, ., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives, ), ;, }, else, {]
[Alternation, ), {, alternatives, ., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives, ), ;, }, else, {]
[., addAll, (, (, (, Alternation, ), alternative, ), ., alternatives, ), ;, }, else, {, alternatives, ., add, (]
[), ., alternatives, ), ;, }, else, {, alternatives, ., add, (, alternative, ), ;, }, }, RegExpTree, last, =]
[add, (, alternative, ), ;, }, }, RegExpTree, last, =, null, ;, for, (, Iterator, <, RegExpTree, >, it, =]
[add, (, alternative, ), ;, }, }, RegExpTree, last, =, null, ;, for, (, Iterator, <, RegExpTree, >, it, =]
[}, RegExpTree, last, =, null, ;, for, (, Iterator, <, RegExpTree, >, it, =, alternatives, ., iterator, (, ), ;]
[}, RegExpTree, last, =, null, ;, for, (, Iterator, <, RegExpTree, >, it, =, alternatives, ., iterator, (, ), ;]
[>, it, =, alternatives, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, RegExpTree, alternative, =]
[>, it, =, alternatives, ., iterator, (, ), ;, it, ., hasNext, (, ), ;, ), {, RegExpTree, alternative, =]
[;, it, ., hasNext, (, ), ;, ), {, RegExpTree, alternative, =, it, ., next, (, ), ;, if, (]
[;, it, ., hasNext, (, ), ;, ), {, RegExpTree, alternative, =, it, ., next, (, ), ;, if, (]
[(, ), ;, ), {, RegExpTree, alternative, =, it, ., next, (, ), ;, if, (, alternative, ., equals, (]
[., next, (, ), ;, if, (, alternative, ., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (]
[., next, (, ), ;, if, (, alternative, ., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (]
[., next, (, ), ;, if, (, alternative, ., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (]
[;, if, (, alternative, ., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (, alternative, ., equals, (]
[alternative, ., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (, alternative, ., equals, (, last, ), &&]
[., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (, alternative, ., equals, (, last, ), &&, !]
[., equals, (, NEVER_MATCHES, ), ), {, continue, ;, }, if, (, alternative, ., equals, (, last, ), &&, !]
[continue, ;, }, if, (, alternative, ., equals, (, last, ), &&, !, alternative, ., hasCapturingGroup, (, ), ), {]
[continue, ;, }, if, (, alternative, ., equals, (, last, ), &&, !, alternative, ., hasCapturingGroup, (, ), ), {]
[last, ), &&, !, alternative, ., hasCapturingGroup, (, ), ), {, it, ., remove, (, ), ;, }, else, {]
[&&, !, alternative, ., hasCapturingGroup, (, ), ), {, it, ., remove, (, ), ;, }, else, {, last, =]
[it, ., remove, (, ), ;, }, else, {, last, =, alternative, ;, }, }, for, (, int, i, =]
[), ;, }, else, {, last, =, alternative, ;, }, }, for, (, int, i, =, 0, ,, n, =]
[), ;, }, else, {, last, =, alternative, ;, }, }, for, (, int, i, =, 0, ,, n, =]
[=, alternative, ;, }, }, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;]
[=, alternative, ;, }, }, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;]
[;, }, }, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;, i, <]
[}, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;]
[for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++]
[,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =]
[,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =]
[., size, (, ), ;, i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (]
[i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (]
[i, <, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (]
[<, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (]
[<, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (]
[<, n, ;, ++, i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (]
[i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&]
[i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&]
[i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&]
[i, ), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&]
[), {, RegExpTree, alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&, (]
[alternative, =, alternatives, ., get, (, i, ), ;, if, (, (, alternative, instanceof, Text, &&, (, (, Text, )]
[if, (, (, alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==]
[alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1, ), ||]
[alternative, instanceof, Text, &&, (, (, Text, ), alternative, ), ., text, ., length, (, ), ==, 1, ), ||]
[alternative, ), ., text, ., length, (, ), ==, 1, ), ||, alternative, instanceof, Charset, ), {, int, end, =]
[length, (, ), ==, 1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =]
[1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (]
[1, ), ||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (]
[||, alternative, instanceof, Charset, ), {, int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end, <]
[int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end, <, n, ), {, RegExpTree, follower, =]
[int, end, =, i, ;, int, nCharsets, =, 0, ;, while, (, end, <, n, ), {, RegExpTree, follower, =]
[;, int, nCharsets, =, 0, ;, while, (, end, <, n, ), {, RegExpTree, follower, =, alternatives, ., get, (]
[;, while, (, end, <, n, ), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (]
[;, while, (, end, <, n, ), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (]
[n, ), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (, follower, instanceof, Charset, ), {]
[), {, RegExpTree, follower, =, alternatives, ., get, (, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++]
[., get, (, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (]
[get, (, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !]
[(, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (]
[(, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (]
[(, end, ), ;, if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (]
[if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&]
[if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&]
[if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&]
[if, (, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&]
[(, follower, instanceof, Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&, (]
[Charset, ), {, ++, nCharsets, ;, }, else, if, (, !, (, follower, instanceof, Text, &&, (, (, Text, )]
[(, !, (, follower, instanceof, Text, &&, (, (, Text, ), follower, ), ., text, ., length, (, ), ==]
[(, (, Text, ), follower, ), ., text, ., length, (, ), ==, 1, ), ), {, break, ;, }]
[(, Text, ), follower, ), ., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++]
[., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (]
[., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (]
[., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (]
[., text, ., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (]
[., length, (, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -]
[(, ), ==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=]
[==, 1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||]
[1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (]
[1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (]
[1, ), ), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (]
[), {, break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=]
[break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&]
[break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&]
[break, ;, }, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&]
[}, ++, end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&, end, -]
[end, ;, }, if, (, end, -, i, >=, 3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=]
[3, ||, (, nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =]
[nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, []
[nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, []
[nCharsets, !=, 0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, []
[0, &&, end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, [, end, -]
[end, -, i, >=, 2, ), ), {, int, [, ], members, =, new, int, [, end, -, i, -]
[), {, int, [, ], members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx, =]
[members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =]
[members, =, new, int, [, end, -, i, -, nCharsets, ], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =]
[i, -, nCharsets, ], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =]
[i, -, nCharsets, ], ;, int, memberIdx, =, 0, ;, CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =]
[CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, List, <, RegExpTree, >, charAlternatives, =]
[CharRanges, chars, =, CharRanges, ., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, List, <, RegExpTree, >, charAlternatives, =]
[., EMPTY, ;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, List, <, RegExpTree, >, charAlternatives, =, alternatives, ., subList, (]
[;, CharRanges, ieExplicits, =, CharRanges, ., EMPTY, ;, List, <, RegExpTree, >, charAlternatives, =, alternatives, ., subList, (, i, ,]
[List, <, RegExpTree, >, charAlternatives, =, alternatives, ., subList, (, i, ,, end, ), ;, for, (, RegExpTree, charAlternative, :]
[=, alternatives, ., subList, (, i, ,, end, ), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (]
[=, alternatives, ., subList, (, i, ,, end, ), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (]
[), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =]
[), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =]
[), ;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =]
[;, for, (, RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =, (]
[RegExpTree, charAlternative, :, charAlternatives, ), {, if, (, charAlternative, instanceof, Text, ), {, char, ch, =, (, (, Text, )]
[(, charAlternative, instanceof, Text, ), {, char, ch, =, (, (, Text, ), charAlternative, ), ., text, ., charAt, (]
[Text, ), {, char, ch, =, (, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, ), ;]
[Text, ), {, char, ch, =, (, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, ), ;]
[{, char, ch, =, (, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, ), ;, members, []
[{, char, ch, =, (, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, ), ;, members, []
[(, (, Text, ), charAlternative, ), ., text, ., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =]
[charAlternative, ), ., text, ., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (]
[charAlternative, ), ., text, ., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (]
[., charAt, (, 0, ), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (]
[), ;, members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {]
[members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =]
[members, [, memberIdx, ++, ], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =]
[], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (]
[], =, ch, ;, if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (]
[if, (, IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (, CharRanges, ., inclusive, (]
[IE_SPEC_ERRORS, ., contains, (, ch, ), ), {, ieExplicits, =, ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,]
[=, ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,, ch, ), ), ;, }, }, else, if, (]
[=, ieExplicits, ., union, (, CharRanges, ., inclusive, (, ch, ,, ch, ), ), ;, }, }, else, if, (]
[(, ch, ,, ch, ), ), ;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =]
[ch, ), ), ;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, )]
[), ;, }, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;]
[}, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;, chars, =]
[}, }, else, if, (, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;, chars, =]
[(, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;, chars, =, chars, ., union, (]
[(, charAlternative, instanceof, Charset, ), {, Charset, cs, =, (, Charset, ), charAlternative, ;, chars, =, chars, ., union, (]
[{, Charset, cs, =, (, Charset, ), charAlternative, ;, chars, =, chars, ., union, (, cs, ., ranges, ), ;]
[cs, =, (, Charset, ), charAlternative, ;, chars, =, chars, ., union, (, cs, ., ranges, ), ;, ieExplicits, =]
[cs, =, (, Charset, ), charAlternative, ;, chars, =, chars, ., union, (, cs, ., ranges, ), ;, ieExplicits, =]
[), charAlternative, ;, chars, =, chars, ., union, (, cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (]
[), charAlternative, ;, chars, =, chars, ., union, (, cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (]
[union, (, cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }]
[cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =]
[cs, ., ranges, ), ;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =]
[;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (]
[;, ieExplicits, =, ieExplicits, ., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (]
[., union, (, cs, ., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (, CharRanges, ., withMembers, (]
[., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;]
[., ieExplicits, ), ;, }, }, chars, =, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;]
[chars, =, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;]
[chars, =, chars, ., union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;]
[union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (]
[union, (, CharRanges, ., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (]
[., withMembers, (, members, ), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (]
[(, members, ), ), ;, charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (, chars, ,]
[charAlternatives, ., clear, (, ), ;, charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (]
[), ;, charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags, ), ), ;]
[charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags, ), ), ;, n, =]
[charAlternatives, ., add, (, new, Charset, (, chars, ,, ieExplicits, ), ., simplify, (, flags, ), ), ;, n, =]
[., simplify, (, flags, ), ), ;, n, =, alternatives, ., size, (, ), ;, }, }, }, switch, (]
[., simplify, (, flags, ), ), ;, n, =, alternatives, ., size, (, ), ;, }, }, }, switch, (]
[=, alternatives, ., size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (, ), ), {, case]
[size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (, ), ), {, case, 0, :, return]
[size, (, ), ;, }, }, }, switch, (, alternatives, ., size, (, ), ), {, case, 0, :, return]
[}, }, switch, (, alternatives, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case]
[(, alternatives, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return]
[(, alternatives, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return]
[(, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (]
[case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (, 0, ), ;, case]
[Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (, 0, ), ;, case, 2, :, if, (]
[Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (, 0, ), ;, case, 2, :, if, (]
[Empty, ., INSTANCE, ;, case, 1, :, return, alternatives, ., get, (, 0, ), ;, case, 2, :, if, (]
[case, 1, :, return, alternatives, ., get, (, 0, ), ;, case, 2, :, if, (, alternatives, ., get, (]
[(, 0, ), ;, case, 2, :, if, (, alternatives, ., get, (, 1, ), instanceof, Empty, ), {, return]
[;, case, 2, :, if, (, alternatives, ., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition, (]
[;, case, 2, :, if, (, alternatives, ., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition, (]
[if, (, alternatives, ., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (]
[., get, (, 1, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 0, ), ,]
[(, 1, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,]
[), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,]
[Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,, true, ), ;, }, else, if, (]
[Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,, true, ), ;, }, else, if, (]
[Repetition, (, alternatives, ., get, (, 0, ), ,, 0, ,, 1, ,, true, ), ;, }, else, if, (]
[get, (, 0, ), ,, 0, ,, 1, ,, true, ), ;, }, else, if, (, alternatives, ., get, (]
[1, ,, true, ), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {, return]
[), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {, return, new, Repetition, (]
[), ;, }, else, if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {, return, new, Repetition, (]
[if, (, alternatives, ., get, (, 0, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (]
[., get, (, 0, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 1, ), ,]
[(, 0, ), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 1, ), ,, 0, ,]
[), instanceof, Empty, ), {, return, new, Repetition, (, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,]
[(, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return]
[(, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return]
[(, alternatives, ., get, (, 1, ), ,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return]
[(, 1, ), ,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (]
[(, 1, ), ,, 0, ,, 1, ,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (]
[,, 1, ,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives, ), ?]
[,, false, ), ;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives, ), ?, this, :]
[;, }, break, ;, }, return, alternatives, ., equals, (, this, ., alternatives, ), ?, this, :, new, Alternation, (]
[new, Alternation, (, alternatives, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, alternative, :]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (]
[), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (, alternative, ., isCaseSensitive, (, ), ), {, return]
[alternative, :, alternatives, ), {, if, (, alternative, ., isCaseSensitive, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, alternative, :]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (]
[), {, for, (, RegExpTree, alternative, :, alternatives, ), {, if, (, alternative, ., containsAnchor, (, ), ), {, return]
[alternative, :, alternatives, ), {, if, (, alternative, ., containsAnchor, (, ), ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =]
[;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, alternative, :]
[Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, alternative, :, alternatives, ), {]
[int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, alternative, :, alternatives, ), {, n, +=]
[int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, alternative, :, alternatives, ), {, n, +=]
[0, ;, for, (, RegExpTree, alternative, :, alternatives, ), {, n, +=, alternative, ., numCapturingGroups, (, ), ;, }, return]
[;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[{, return, alternatives, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =]
[}, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =]
[}, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =]
[(, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;]
[(, StringBuilder, sb, ), {, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;]
[sb, ), {, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;, i, <]
[{, for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;]
[for, (, int, i, =, 0, ,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++]
[0, ,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++, i, ), {, if, (]
[0, ,, n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++, i, ), {, if, (]
[n, =, alternatives, ., size, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, i, !=]
[., size, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, i, !=, 0, ), {]
[., size, (, ), ;, i, <, n, ;, ++, i, ), {, if, (, i, !=, 0, ), {]
[;, i, <, n, ;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (]
[;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }]
[;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }]
[;, ++, i, ), {, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }]
[{, if, (, i, !=, 0, ), {, sb, ., append, (, '|', ), ;, }, alternatives, ., get, (]
[0, ), {, sb, ., append, (, '|', ), ;, }, alternatives, ., get, (, i, ), ., appendSourceCode, (]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, this, ==]
[StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, this, ==, o, ||]
[sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, this, ==, o, ||, (]
[sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, this, ==, o, ||, (]
[), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, this, ==, o, ||, (, (]
[), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, this, ==, o, ||, (, (]
[public, boolean, equals, (, Object, o, ), {, return, this, ==, o, ||, (, (, o, instanceof, Alternation, ), &&]
[public, boolean, equals, (, Object, o, ), {, return, this, ==, o, ||, (, (, o, instanceof, Alternation, ), &&]
[Object, o, ), {, return, this, ==, o, ||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (]
[Object, o, ), {, return, this, ==, o, ||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (]
[o, ), {, return, this, ==, o, ||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (]
[return, this, ==, o, ||, (, (, o, instanceof, Alternation, ), &&, alternatives, ., equals, (, (, (, Alternation, )]
[(, Alternation, ), o, ), ., alternatives, ), ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, Alternation, ), o, ), ., alternatives, ), ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[), o, ), ., alternatives, ), ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^]
[), o, ), ., alternatives, ), ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x51b57cd1, ^]
[(, ), {, return, 0x51b57cd1, ^, alternatives, ., hashCode, (, ), ;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =]
[return, 0x51b57cd1, ^, alternatives, ., hashCode, (, ), ;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =, new, LookaheadAssertion, (]
[return, 0x51b57cd1, ^, alternatives, ., hashCode, (, ), ;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =, new, LookaheadAssertion, (]
[., hashCode, (, ), ;, }, }, private, static, final, RegExpTree, NEVER_MATCHES, =, new, LookaheadAssertion, (, Empty, ., INSTANCE, ,]
[extends, RegExpTree, {, final, RegExpTree, body, ;, final, boolean, positive, ;, LookaheadAssertion, (, RegExpTree, body, ,, boolean, positive, ), {]
[extends, RegExpTree, {, final, RegExpTree, body, ;, final, boolean, positive, ;, LookaheadAssertion, (, RegExpTree, body, ,, boolean, positive, ), {]
[RegExpTree, body, ;, final, boolean, positive, ;, LookaheadAssertion, (, RegExpTree, body, ,, boolean, positive, ), {, this, ., body, =]
[;, final, boolean, positive, ;, LookaheadAssertion, (, RegExpTree, body, ,, boolean, positive, ), {, this, ., body, =, body, ;]
[;, final, boolean, positive, ;, LookaheadAssertion, (, RegExpTree, body, ,, boolean, positive, ), {, this, ., body, =, body, ;]
[;, LookaheadAssertion, (, RegExpTree, body, ,, boolean, positive, ), {, this, ., body, =, body, ;, this, ., positive, =]
[this, ., positive, =, positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =]
[this, ., positive, =, positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =]
[positive, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =, body, ., simplify, (]
[public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =, body, ., simplify, (, flags, ), ;, if, (]
[public, RegExpTree, simplify, (, String, flags, ), {, RegExpTree, simpleBody, =, body, ., simplify, (, flags, ), ;, if, (]
[{, RegExpTree, simpleBody, =, body, ., simplify, (, flags, ), ;, if, (, simpleBody, instanceof, Empty, ), {, if, (]
[body, ., simplify, (, flags, ), ;, if, (, simpleBody, instanceof, Empty, ), {, if, (, positive, ), {, return]
[), ;, if, (, simpleBody, instanceof, Empty, ), {, if, (, positive, ), {, return, simpleBody, ;, }, }, return]
[(, simpleBody, instanceof, Empty, ), {, if, (, positive, ), {, return, simpleBody, ;, }, }, return, new, LookaheadAssertion, (]
[instanceof, Empty, ), {, if, (, positive, ), {, return, simpleBody, ;, }, }, return, new, LookaheadAssertion, (, simpleBody, ,]
[}, return, new, LookaheadAssertion, (, simpleBody, ,, positive, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[}, return, new, LookaheadAssertion, (, simpleBody, ,, positive, ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[(, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[(, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[(, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return]
[(, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return]
[., numCapturingGroups, (, ), ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[., numCapturingGroups, (, ), ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, ImmutableList, ., of, (]
[{, return, ImmutableList, ., of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[{, return, ImmutableList, ., of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (]
[of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (]
[body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "(?=", :]
[Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "(?=", :, "(?!", ), ;]
[Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "(?=", :, "(?!", ), ;]
[(, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "(?=", :, "(?!", ), ;, body, ., appendSourceCode, (]
[), {, sb, ., append, (, positive, ?, "(?=", :, "(?!", ), ;, body, ., appendSourceCode, (, sb, ), ;]
[), {, sb, ., append, (, positive, ?, "(?=", :, "(?!", ), ;, body, ., appendSourceCode, (, sb, ), ;]
[append, (, positive, ?, "(?=", :, "(?!", ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (]
[), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[), ;, sb, ., append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[append, (, ')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[')', ), ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?]
[;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (, positive, ?, "positive", :]
[positive, ?, "positive", :, "negative", ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[?, "positive", :, "negative", ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
["positive", :, "negative", ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
["positive", :, "negative", ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, LookaheadAssertion, ), ), {, return]
[o, ), {, if, (, !, (, o, instanceof, LookaheadAssertion, ), ), {, return, false, ;, }, LookaheadAssertion, that, =]
[if, (, !, (, o, instanceof, LookaheadAssertion, ), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, )]
[(, o, instanceof, LookaheadAssertion, ), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return]
[(, o, instanceof, LookaheadAssertion, ), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return]
[(, o, instanceof, LookaheadAssertion, ), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return]
[(, o, instanceof, LookaheadAssertion, ), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return]
[), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==]
[), ), {, return, false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==]
[false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that, ., positive, &&]
[false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that, ., positive, &&]
[false, ;, }, LookaheadAssertion, that, =, (, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that, ., positive, &&]
[(, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that, ., positive, &&, this, ., body, ., equals, (]
[(, LookaheadAssertion, ), o, ;, return, this, ., positive, ==, that, ., positive, &&, this, ., body, ., equals, (]
[., body, ., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., body, ., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x723aba9, ^]
[., equals, (, that, ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x723aba9, ^]
[;, }, }, static, final, class, CapturingGroup, extends, RegExpTree, {, final, RegExpTree, body, ;, CapturingGroup, (, RegExpTree, body, ), {]
[;, }, }, static, final, class, CapturingGroup, extends, RegExpTree, {, final, RegExpTree, body, ;, CapturingGroup, (, RegExpTree, body, ), {]
[final, class, CapturingGroup, extends, RegExpTree, {, final, RegExpTree, body, ;, CapturingGroup, (, RegExpTree, body, ), {, this, ., body, =]
[), {, this, ., body, =, body, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return]
[., body, =, body, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, new, CapturingGroup, (]
[., body, =, body, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, new, CapturingGroup, (]
[;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, return, new, CapturingGroup, (, body, ., simplify, (]
[CapturingGroup, (, body, ., simplify, (, flags, ), ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[CapturingGroup, (, body, ., simplify, (, flags, ), ), ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, return]
[(, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[(, ), {, return, body, ., isCaseSensitive, (, ), ;, }, @, Override, public, boolean, containsAnchor, (, ), {, return]
[(, ), {, return, body, ., containsAnchor, (, ), ;, }, @, Override, public, int, numCapturingGroups, (, ), {, return]
[), {, return, 1, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[), {, return, 1, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return, ImmutableList, ., of, (]
[{, return, ImmutableList, ., of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[{, return, ImmutableList, ., of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {]
[of, (, body, ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (]
[), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ;]
[), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ;]
[Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ;, body, ., appendSourceCode, (]
[appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ;, body, ., appendSourceCode, (, sb, ), ;]
[appendSourceCode, (, StringBuilder, sb, ), {, sb, ., append, (, '(', ), ;, body, ., appendSourceCode, (, sb, ), ;]
[), {, sb, ., append, (, '(', ), ;, body, ., appendSourceCode, (, sb, ), ;, sb, ., append, (]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, CapturingGroup, &&]
[StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, CapturingGroup, &&]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, CapturingGroup, &&, body, ., equals, (]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, CapturingGroup, &&, body, ., equals, (]
[@, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, CapturingGroup, &&, body, ., equals, (, (]
[boolean, equals, (, Object, o, ), {, return, o, instanceof, CapturingGroup, &&, body, ., equals, (, (, (, CapturingGroup, )]
[(, (, CapturingGroup, ), o, ), ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, CapturingGroup, ), o, ), ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[CapturingGroup, ), o, ), ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^]
[CapturingGroup, ), o, ), ., body, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x55781738, ^]
[(, ), {, return, 0x55781738, ^, body, ., hashCode, (, ), ;, }, }, private, static, final, CharRanges, DIGITS, =]
[(, ), {, return, 0x55781738, ^, body, ., hashCode, (, ), ;, }, }, private, static, final, CharRanges, DIGITS, =]
[0x55781738, ^, body, ., hashCode, (, ), ;, }, }, private, static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (]
[body, ., hashCode, (, ), ;, }, }, private, static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (, '0', ,]
[static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (, '0', ,, '9', ), ;, private, static, final, CharRanges, UCASE_LETTERS, =]
[static, final, CharRanges, DIGITS, =, CharRanges, ., inclusive, (, '0', ,, '9', ), ;, private, static, final, CharRanges, UCASE_LETTERS, =]
[=, CharRanges, ., inclusive, (, '0', ,, '9', ), ;, private, static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (]
[., inclusive, (, '0', ,, '9', ), ;, private, static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (, 'A', ,]
[static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (, 'A', ,, 'Z', ), ;, private, static, final, CharRanges, LCASE_LETTERS, =]
[static, final, CharRanges, UCASE_LETTERS, =, CharRanges, ., inclusive, (, 'A', ,, 'Z', ), ;, private, static, final, CharRanges, LCASE_LETTERS, =]
[=, CharRanges, ., inclusive, (, 'A', ,, 'Z', ), ;, private, static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (]
[., inclusive, (, 'A', ,, 'Z', ), ;, private, static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (, 'a', ,]
[static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (, 'a', ,, 'z', ), ;, private, static, final, CharRanges, LETTERS, =]
[static, final, CharRanges, LCASE_LETTERS, =, CharRanges, ., inclusive, (, 'a', ,, 'z', ), ;, private, static, final, CharRanges, LETTERS, =]
[=, CharRanges, ., inclusive, (, 'a', ,, 'z', ), ;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (]
[;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =]
[;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =]
[;, private, static, final, CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =]
[CharRanges, LETTERS, =, UCASE_LETTERS, ., union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =, DIGITS, ., union, (]
[union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =, DIGITS, ., union, (, LETTERS, ), ., union, (]
[union, (, LCASE_LETTERS, ), ;, private, static, final, CharRanges, WORD_CHARS, =, DIGITS, ., union, (, LETTERS, ), ., union, (]
[;, private, static, final, CharRanges, WORD_CHARS, =, DIGITS, ., union, (, LETTERS, ), ., union, (, CharRanges, ., withMembers, (]
[(, LETTERS, ), ., union, (, CharRanges, ., withMembers, (, '_', ), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =]
[(, LETTERS, ), ., union, (, CharRanges, ., withMembers, (, '_', ), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =]
[(, LETTERS, ), ., union, (, CharRanges, ., withMembers, (, '_', ), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =]
[CharRanges, ., withMembers, (, '_', ), ), ;, private, static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =]
[static, final, CharRanges, INVERSE_WORD_CHARS, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =]
[=, CharRanges, ., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (]
[., ALL_CODE_UNITS, ., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,]
[., difference, (, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,]
[(, WORD_CHARS, ), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,]
[), ;, private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,]
[private, static, final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,]
[final, CharRanges, SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,]
[SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,]
[CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,]
[withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,]
['\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,]
['\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,]
['\u000b', ,, '\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,]
['\u000c', ,, '\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,]
['\r', ,, ' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,]
[' ', ,, '\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,]
['\u00a0', ,, '\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,]
['\u1680', ,, '\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,]
['\u180e', ,, '\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,]
['\u2000', ,, '\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,]
['\u2001', ,, '\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,]
['\u2002', ,, '\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,]
['\u2003', ,, '\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,]
['\u2004', ,, '\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,]
['\u2005', ,, '\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,]
['\u2006', ,, '\u2007', ,, '\u2008', ,, '\u2009', ,, '\u200a', ,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,]
[,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =]
[,, '\u2028', ,, '\u2029', ,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =]
[,, '\u202f', ,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (]
[,, '\u205f', ,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,]
[,, '\u3000', ,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,]
[,, '\ufeff', ), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,]
[), ;, private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,]
[private, static, final, CharRanges, IE_SPACE_CHARS, =, CharRanges, ., withMembers, (, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,]
[(, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =]
[(, '\t', ,, '\n', ,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =]
[,, '\u000b', ,, '\u000c', ,, '\r', ,, ' ', ), ;, private, static, final, CharRanges, IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[IE_SPEC_ERRORS, =, SPACE_CHARS, ., difference, (, IE_SPACE_CHARS, ), ;, private, static, final, ImmutableMap, <, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =]
[<, Character, ,, CharRanges, >, NAMED_CHAR_GROUPS, =, ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (]
[,, CharRanges, >, NAMED_CHAR_GROUPS, =, ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,]
[ImmutableMap, ., <, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (]
[<, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,]
[<, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,]
[<, Character, ,, CharRanges, >, builder, (, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,]
[(, ), ., put, (, 'd', ,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[,, DIGITS, ), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (]
[), ., put, (, 'D', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,]
[,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (]
[., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,]
[., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,]
[., ALL_CODE_UNITS, ., difference, (, DIGITS, ), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,]
[), ), ., put, (, 's', ,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[,, SPACE_CHARS, ), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (]
[), ., put, (, 'S', ,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,]
[,, CharRanges, ., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (]
[., ALL_CODE_UNITS, ., difference, (, SPACE_CHARS, ), ), ., put, (, 'w', ,, WORD_CHARS, ), ., put, (, 'W', ,]
[WORD_CHARS, ), ., put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =]
[put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (]
[put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (]
[put, (, 'W', ,, INVERSE_WORD_CHARS, ), ., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (]
[., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[., build, (, ), ;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[;, private, static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (]
[static, final, Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,]
[Charset, DOT_CHARSET, =, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,]
[=, new, Charset, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,]
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', ), ), ,]
[CharRanges, ., ALL_CODE_UNITS, ., difference, (, CharRanges, ., withMembers, (, '\n', ,, '\r', ,, '\u2028', ,, '\u2029', ), ), ,]
[extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final, CharRanges, ieExplicits, ;, Charset, (, CharRanges, ranges, ,, CharRanges, ieExplicits, ), {]
[extends, RegExpTreeAtom, {, final, CharRanges, ranges, ;, final, CharRanges, ieExplicits, ;, Charset, (, CharRanges, ranges, ,, CharRanges, ieExplicits, ), {]
[CharRanges, ranges, ;, final, CharRanges, ieExplicits, ;, Charset, (, CharRanges, ranges, ,, CharRanges, ieExplicits, ), {, this, ., ranges, =]
[;, final, CharRanges, ieExplicits, ;, Charset, (, CharRanges, ranges, ,, CharRanges, ieExplicits, ), {, this, ., ranges, =, ranges, ;]
[;, final, CharRanges, ieExplicits, ;, Charset, (, CharRanges, ranges, ,, CharRanges, ieExplicits, ), {, this, ., ranges, =, ranges, ;]
[;, Charset, (, CharRanges, ranges, ,, CharRanges, ieExplicits, ), {, this, ., ranges, =, ranges, ;, this, ., ieExplicits, =]
[=, ranges, ;, this, ., ieExplicits, =, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return]
[=, ranges, ;, this, ., ieExplicits, =, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return]
[., ieExplicits, =, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (]
[=, ieExplicits, ;, }, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (]
[}, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,]
[}, private, static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,]
[static, int, complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,, 1, +]
[complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,, 1, +, complexityWordFoldedHelper, (]
[complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,, 1, +, complexityWordFoldedHelper, (]
[complexityWordFolded, (, CharRanges, ranges, ), {, return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,, 1, +, complexityWordFoldedHelper, (]
[return, Math, ., min, (, complexityWordFoldedHelper, (, ranges, ), ,, 1, +, complexityWordFoldedHelper, (, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[difference, (, ranges, ), ), ), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =]
[difference, (, ranges, ), ), ), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =]
[), ), ;, }, private, static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (]
[static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (, ranges, ), ;, if, (]
[static, int, complexityWordFoldedHelper, (, CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (, ranges, ), ;, if, (]
[CharRanges, ranges, ), {, int, complexity, =, DecomposedCharset, ., complexity, (, ranges, ), ;, if, (, ranges, ., containsAll, (]
[int, complexity, =, DecomposedCharset, ., complexity, (, ranges, ), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {]
[=, DecomposedCharset, ., complexity, (, ranges, ), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =]
[=, DecomposedCharset, ., complexity, (, ranges, ), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =]
[(, ranges, ), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (]
[), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,]
[), ;, if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,]
[if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +]
[if, (, ranges, ., containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +]
[containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (]
[containsAll, (, WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (]
[), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (]
[complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), ), ;, }, if, (]
[complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), ), ;, }, if, (]
[DecomposedCharset, ., complexity, (, ranges, ., difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges, ., containsAll, (]
[ranges, ., difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {]
[difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =]
[difference, (, WORD_CHARS, ), ), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =]
[), ), ;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (]
[;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,]
[;, }, if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,]
[if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +]
[if, (, ranges, ., containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +]
[containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (]
[containsAll, (, INVERSE_WORD_CHARS, ), ), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (]
[), {, complexity, =, Math, ., min, (, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (]
[(, complexity, ,, 1, +, DecomposedCharset, ., complexity, (, ranges, ., difference, (, INVERSE_WORD_CHARS, ), ), ), ;, }, return]
[), ), ;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (]
[), ), ;, }, return, complexity, ;, }, @, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (]
[@, Override, public, RegExpTree, simplify, (, String, flags, ), {, if, (, ranges, ., isEmpty, (, ), ), {, return]
[String, flags, ), {, if, (, ranges, ., isEmpty, (, ), ), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =]
[if, (, ranges, ., isEmpty, (, ), ), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =, ranges, ;, if, (]
[if, (, ranges, ., isEmpty, (, ), ), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =, ranges, ;, if, (]
[if, (, ranges, ., isEmpty, (, ), ), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =, ranges, ;, if, (]
[isEmpty, (, ), ), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =, ranges, ;, if, (, flags, ., indexOf, (]
[), {, return, NEVER_MATCHES, ;, }, CharRanges, best, =, ranges, ;, if, (, flags, ., indexOf, (, 'i', ), >=]
[ranges, ;, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, Set, <, CharRanges, >, options, =]
[ranges, ;, if, (, flags, ., indexOf, (, 'i', ), >=, 0, ), {, Set, <, CharRanges, >, options, =]
[indexOf, (, 'i', ), >=, 0, ), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;]
[indexOf, (, 'i', ), >=, 0, ), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;]
[>=, 0, ), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (]
[>=, 0, ), {, Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (]
[Set, <, CharRanges, >, options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (]
[options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;]
[options, =, Sets, ., newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;]
[newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;, options, ., add, (]
[newLinkedHashSet, (, ), ;, options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;, options, ., add, (]
[options, ., add, (, CaseCanonicalize, ., expandToAllMatched, (, ranges, ), ), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (]
[(, ranges, ), ), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =]
[(, ranges, ), ), ;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =]
[;, options, ., add, (, CaseCanonicalize, ., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (]
[., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =]
[., reduceToMinimum, (, ranges, ), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =]
[), ), ;, CharRanges, lcaseLetters, =, ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (]
[ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =]
[ranges, ., intersection, (, LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =]
[LCASE_LETTERS, ), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (]
[), ;, CharRanges, ucaseLetters, =, ranges, ., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -]
[., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =]
[., intersection, (, UCASE_LETTERS, ), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =]
[), ;, CharRanges, lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (]
[lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;]
[lcaseLettersToUpper, =, lcaseLetters, ., shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;]
[shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (]
[shift, (, -, 32, ), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (]
[), ;, CharRanges, ucaseLettersToLower, =, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (, ranges, ., union, (]
[=, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;]
[=, ucaseLetters, ., shift, (, 32, ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;]
[(, 32, ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (]
[(, 32, ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (]
[options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (]
[ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;]
[ranges, ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;]
[ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (]
[ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (]
[ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (]
[options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (, ranges, ., union, (]
[., union, (, lcaseLettersToUpper, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (]
[), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;]
[), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;]
[., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (]
[., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (]
[., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (]
[., union, (, lcaseLettersToUpper, ), ., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (]
[., union, (, ucaseLettersToLower, ), ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (]
[), ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;]
[), ), ;, options, ., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;]
[., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options, ., add, (]
[., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options, ., add, (]
[., add, (, ranges, ., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options, ., add, (]
[., union, (, ucaseLettersToLower, ), ., difference, (, ucaseLetters, ), ), ;, options, ., add, (, ranges, ., union, (]
[., difference, (, ucaseLetters, ), ), ;, options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (]
[options, ., add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), ), ;, int, bestComplexity, =]
[add, (, ranges, ., union, (, lcaseLettersToUpper, ), ., difference, (, lcaseLetters, ), ), ;, int, bestComplexity, =, complexityWordFolded, (]
[., difference, (, lcaseLetters, ), ), ;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option, :]
[;, int, bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option, :, options, ), {, int, complexity, =]
[bestComplexity, =, complexityWordFolded, (, ranges, ), ;, for, (, CharRanges, option, :, options, ), {, int, complexity, =, complexityWordFolded, (]
[), ;, for, (, CharRanges, option, :, options, ), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (]
[), ;, for, (, CharRanges, option, :, options, ), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (]
[for, (, CharRanges, option, :, options, ), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (, complexity, <]
[option, :, options, ), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (, complexity, <, bestComplexity, ), {]
[options, ), {, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (, complexity, <, bestComplexity, ), {, bestComplexity, =]
[{, int, complexity, =, complexityWordFolded, (, option, ), ;, if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;]
[complexity, =, complexityWordFolded, (, option, ), ;, if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =]
[if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (]
[if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (]
[if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (]
[if, (, complexity, <, bestComplexity, ), {, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (]
[{, bestComplexity, =, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==]
[=, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&]
[=, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&]
[=, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&]
[=, complexity, ;, best, =, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&]
[=, option, ;, }, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&, best, ., end, (]
[}, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&, best, ., end, (, 0, ), -]
[}, }, }, if, (, best, ., getNumRanges, (, ), ==, 1, &&, best, ., end, (, 0, ), -]
[(, best, ., getNumRanges, (, ), ==, 1, &&, best, ., end, (, 0, ), -, best, ., start, (]
[getNumRanges, (, ), ==, 1, &&, best, ., end, (, 0, ), -, best, ., start, (, 0, ), ==]
[1, &&, best, ., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1, ), {, return]
[., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1, ), {, return, new, Text, (]
[., end, (, 0, ), -, best, ., start, (, 0, ), ==, 1, ), {, return, new, Text, (]
[), -, best, ., start, (, 0, ), ==, 1, ), {, return, new, Text, (, Character, ., toString, (]
[., start, (, 0, ), ==, 1, ), {, return, new, Text, (, Character, ., toString, (, (, char, )]
[., start, (, 0, ), ==, 1, ), {, return, new, Text, (, Character, ., toString, (, (, char, )]
[), ==, 1, ), {, return, new, Text, (, Character, ., toString, (, (, char, ), best, ., start, (]
[(, Character, ., toString, (, (, char, ), best, ., start, (, 0, ), ), ), ;, }, if, (]
[Character, ., toString, (, (, char, ), best, ., start, (, 0, ), ), ), ;, }, if, (, !]
[Character, ., toString, (, (, char, ), best, ., start, (, 0, ), ), ), ;, }, if, (, !]
[(, char, ), best, ., start, (, 0, ), ), ), ;, }, if, (, !, best, ., equals, (]
[start, (, 0, ), ), ), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return]
[), ), ), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return, new, Charset, (]
[), ;, }, if, (, !, best, ., equals, (, ranges, ), ), {, return, new, Charset, (, best, ,]
[!, best, ., equals, (, ranges, ), ), {, return, new, Charset, (, best, ,, ieExplicits, ), ;, }, return]
[,, ieExplicits, ), ;, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =]
[,, ieExplicits, ), ;, }, return, this, ;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =]
[;, }, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (, ), ., ranges, ;, return]
[}, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (, ), ., ranges, ;, return, !]
[}, @, Override, public, boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (, ), ., ranges, ;, return, !]
[boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (, ), ., ranges, ;, return, !, withoutNamedGroups, ., equals, (]
[boolean, isCaseSensitive, (, ), {, CharRanges, withoutNamedGroups, =, decompose, (, ), ., ranges, ;, return, !, withoutNamedGroups, ., equals, (]
[{, CharRanges, withoutNamedGroups, =, decompose, (, ), ., ranges, ;, return, !, withoutNamedGroups, ., equals, (, CaseCanonicalize, ., expandToAllMatched, (]
[(, withoutNamedGroups, ), ), ;, }, private, DecomposedCharset, decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder, namedGroups, =]
[decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder, namedGroups, =, new, StringBuilder, (, ), ;, CharRanges, rangesInterIeExplicits, =]
[decompose, (, CharRanges, ranges, ,, boolean, inverted, ), {, StringBuilder, namedGroups, =, new, StringBuilder, (, ), ;, CharRanges, rangesInterIeExplicits, =]
[,, boolean, inverted, ), {, StringBuilder, namedGroups, =, new, StringBuilder, (, ), ;, CharRanges, rangesInterIeExplicits, =, ranges, ., intersection, (]
[StringBuilder, namedGroups, =, new, StringBuilder, (, ), ;, CharRanges, rangesInterIeExplicits, =, ranges, ., intersection, (, ieExplicits, ), ;, while, (]
[), ;, CharRanges, rangesInterIeExplicits, =, ranges, ., intersection, (, ieExplicits, ), ;, while, (, true, ), {, char, groupName, =]
[ranges, ., intersection, (, ieExplicits, ), ;, while, (, true, ), {, char, groupName, =, 0, ;, CharRanges, simplest, =]
[), ;, while, (, true, ), {, char, groupName, =, 0, ;, CharRanges, simplest, =, null, ;, int, minComplexity, =]
[), ;, while, (, true, ), {, char, groupName, =, 0, ;, CharRanges, simplest, =, null, ;, int, minComplexity, =]
[true, ), {, char, groupName, =, 0, ;, CharRanges, simplest, =, null, ;, int, minComplexity, =, DecomposedCharset, ., complexity, (]
[=, DecomposedCharset, ., complexity, (, ranges, ), ;, for, (, Map, ., Entry, <, Character, ,, CharRanges, >, namedGroup, :]
[=, DecomposedCharset, ., complexity, (, ranges, ), ;, for, (, Map, ., Entry, <, Character, ,, CharRanges, >, namedGroup, :]
[Map, ., Entry, <, Character, ,, CharRanges, >, namedGroup, :, NAMED_CHAR_GROUPS, ., entrySet, (, ), ), {, CharRanges, group, =]
[Map, ., Entry, <, Character, ,, CharRanges, >, namedGroup, :, NAMED_CHAR_GROUPS, ., entrySet, (, ), ), {, CharRanges, group, =]
[namedGroup, :, NAMED_CHAR_GROUPS, ., entrySet, (, ), ), {, CharRanges, group, =, namedGroup, ., getValue, (, ), ;, if, (]
[namedGroup, :, NAMED_CHAR_GROUPS, ., entrySet, (, ), ), {, CharRanges, group, =, namedGroup, ., getValue, (, ), ;, if, (]
[entrySet, (, ), ), {, CharRanges, group, =, namedGroup, ., getValue, (, ), ;, if, (, ranges, ., containsAll, (]
[=, namedGroup, ., getValue, (, ), ;, if, (, ranges, ., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =]
[=, namedGroup, ., getValue, (, ), ;, if, (, ranges, ., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =]
[=, namedGroup, ., getValue, (, ), ;, if, (, ranges, ., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =]
[(, ), ;, if, (, ranges, ., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =, ranges, ., difference, (]
[ranges, ., containsAll, (, group, ), ), {, CharRanges, withoutGroup, =, ranges, ., difference, (, group, ), ., union, (]
[), {, CharRanges, withoutGroup, =, ranges, ., difference, (, group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =]
[), {, CharRanges, withoutGroup, =, ranges, ., difference, (, group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =]
[=, ranges, ., difference, (, group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (]
[group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (]
[group, ), ., union, (, rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (]
[., union, (, rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <]
[rangesInterIeExplicits, ), ;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {]
[;, int, complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest, =]
[complexity, =, DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest, =, withoutGroup, ;]
[DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =]
[DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =]
[DecomposedCharset, ., complexity, (, withoutGroup, ), ;, if, (, complexity, <, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =]
[<, minComplexity, ), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, ), ., charValue, (, ), ;]
[), {, simplest, =, withoutGroup, ;, groupName, =, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =]
[=, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (]
[=, namedGroup, ., getKey, (, ), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (]
[., getKey, (, ), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=]
[), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=, null, ), {]
[), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=, null, ), {]
[), ., charValue, (, ), ;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=, null, ), {]
[), ;, minComplexity, =, complexity, ;, }, }, }, if, (, simplest, !=, null, ), {, namedGroups, ., append, (]
[;, }, }, }, if, (, simplest, !=, null, ), {, namedGroups, ., append, (, '\\', ), ., append, (]
[}, if, (, simplest, !=, null, ), {, namedGroups, ., append, (, '\\', ), ., append, (, groupName, ), ;]
[(, simplest, !=, null, ), {, namedGroups, ., append, (, '\\', ), ., append, (, groupName, ), ;, ranges, =]
['\\', ), ., append, (, groupName, ), ;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return]
[append, (, groupName, ), ;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (]
[groupName, ), ;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (, inverted, ,]
[;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (, inverted, ,, ranges, ,]
[;, ranges, =, simplest, ;, }, else, {, break, ;, }, }, return, new, DecomposedCharset, (, inverted, ,, ranges, ,]
[namedGroups, ., toString, (, ), ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (]
[namedGroups, ., toString, (, ), ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (]
[namedGroups, ., toString, (, ), ), ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (]
[;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, DOT_CHARSET, ., ranges, ., equals, (]
[protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, DOT_CHARSET, ., ranges, ., equals, (, ranges, ), ), {]
[protected, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, DOT_CHARSET, ., ranges, ., equals, (, ranges, ), ), {]
[StringBuilder, sb, ), {, if, (, DOT_CHARSET, ., ranges, ., equals, (, ranges, ), ), {, sb, ., append, (]
[DOT_CHARSET, ., ranges, ., equals, (, ranges, ), ), {, sb, ., append, (, '.', ), ;, return, ;, }]
[DOT_CHARSET, ., ranges, ., equals, (, ranges, ), ), {, sb, ., append, (, '.', ), ;, return, ;, }]
[ranges, ), ), {, sb, ., append, (, '.', ), ;, return, ;, }, decompose, (, ), ., appendSourceCode, (]
[;, }, decompose, (, ), ., appendSourceCode, (, sb, ), ;, }, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =]
[;, }, decompose, (, ), ., appendSourceCode, (, sb, ), ;, }, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =]
[;, }, decompose, (, ), ., appendSourceCode, (, sb, ), ;, }, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =]
[appendSourceCode, (, sb, ), ;, }, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (]
[}, DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if, (]
[DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if, (, !]
[DecomposedCharset, decompose, (, ), {, CharRanges, negRanges, =, CharRanges, ., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if, (, !]
[., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (]
[., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (]
[., ALL_CODE_UNITS, ., difference, (, ranges, ), ;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (]
[(, ranges, ), ;, if, (, !, ieExplicits, ., isEmpty, (, ), ), {, if, (, negRanges, ., intersection, (]
[isEmpty, (, ), ), {, if, (, negRanges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return]
[), ), {, if, (, negRanges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (]
[{, if, (, negRanges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, ranges, ,]
[ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, ranges, ,, false, ), ;, }, else, if, (]
[ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, ranges, ,, false, ), ;, }, else, if, (]
[ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, ranges, ,, false, ), ;, }, else, if, (]
[(, ), ), {, return, decompose, (, ranges, ,, false, ), ;, }, else, if, (, ranges, ., intersection, (]
[false, ), ;, }, else, if, (, ranges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return]
[;, }, else, if, (, ranges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (]
[else, if, (, ranges, ., intersection, (, ieExplicits, ), ., isEmpty, (, ), ), {, return, decompose, (, negRanges, ,]
[), ., isEmpty, (, ), ), {, return, decompose, (, negRanges, ,, true, ), ;, }, }, DecomposedCharset, positive, =]
[isEmpty, (, ), ), {, return, decompose, (, negRanges, ,, true, ), ;, }, }, DecomposedCharset, positive, =, decompose, (]
[), ), {, return, decompose, (, negRanges, ,, true, ), ;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,]
[negRanges, ,, true, ), ;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =]
[true, ), ;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (]
[;, }, }, DecomposedCharset, positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,]
[positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return]
[positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return]
[positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return]
[positive, =, decompose, (, ranges, ,, false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return]
[false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return, positive, ., complexity, (, ), <=]
[false, ), ;, DecomposedCharset, negative, =, decompose, (, negRanges, ,, true, ), ;, return, positive, ., complexity, (, ), <=]
[decompose, (, negRanges, ,, true, ), ;, return, positive, ., complexity, (, ), <=, negative, ., complexity, (, ), ?]
[negRanges, ,, true, ), ;, return, positive, ., complexity, (, ), <=, negative, ., complexity, (, ), ?, positive, :]
[., complexity, (, ), ?, positive, :, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[., complexity, (, ), ?, positive, :, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {]
[?, positive, :, negative, ;, }, @, Override, protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, sb, ., append, (]
[{, sb, ., append, (, ranges, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, ranges, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[{, sb, ., append, (, ranges, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[(, ranges, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&]
[(, ranges, ), ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&, ranges, ., equals, (]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&, ranges, ., equals, (]
[@, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&, ranges, ., equals, (, (]
[boolean, equals, (, Object, o, ), {, return, o, instanceof, Charset, &&, ranges, ., equals, (, (, (, Charset, )]
[(, (, Charset, ), o, ), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, Charset, ), o, ), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, Charset, ), o, ), ., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., ranges, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), ^]
[final, CharRanges, ranges, ;, final, String, namedGroups, ;, DecomposedCharset, (, boolean, inverted, ,, CharRanges, ranges, ,, String, namedGroups, ), {]
[final, CharRanges, ranges, ;, final, String, namedGroups, ;, DecomposedCharset, (, boolean, inverted, ,, CharRanges, ranges, ,, String, namedGroups, ), {]
[final, String, namedGroups, ;, DecomposedCharset, (, boolean, inverted, ,, CharRanges, ranges, ,, String, namedGroups, ), {, this, ., inverted, =]
[namedGroups, ;, DecomposedCharset, (, boolean, inverted, ,, CharRanges, ranges, ,, String, namedGroups, ), {, this, ., inverted, =, inverted, ;]
[namedGroups, ;, DecomposedCharset, (, boolean, inverted, ,, CharRanges, ranges, ,, String, namedGroups, ), {, this, ., inverted, =, inverted, ;]
[boolean, inverted, ,, CharRanges, ranges, ,, String, namedGroups, ), {, this, ., inverted, =, inverted, ;, this, ., ranges, =]
[,, CharRanges, ranges, ,, String, namedGroups, ), {, this, ., inverted, =, inverted, ;, this, ., ranges, =, ranges, ;]
[,, CharRanges, ranges, ,, String, namedGroups, ), {, this, ., inverted, =, inverted, ;, this, ., ranges, =, ranges, ;]
[String, namedGroups, ), {, this, ., inverted, =, inverted, ;, this, ., ranges, =, ranges, ;, this, ., namedGroups, =]
[;, this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return]
[;, this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return]
[;, this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return]
[this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (]
[this, ., ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (]
[ranges, =, ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?]
[ranges, ;, this, ., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?, 1, :]
[., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?, 1, :, 0, ), +]
[., namedGroups, =, namedGroups, ;, }, int, complexity, (, ), {, return, (, inverted, ?, 1, :, 0, ), +]
[int, complexity, (, ), {, return, (, inverted, ?, 1, :, 0, ), +, namedGroups, ., length, (, ), +]
[(, ), {, return, (, inverted, ?, 1, :, 0, ), +, namedGroups, ., length, (, ), +, complexity, (]
[., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (]
[., length, (, ), +, complexity, (, ranges, ), ;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (]
[;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (]
[;, }, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (]
[}, void, appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (, !]
[appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (, !, inverted, &&]
[appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (, !, inverted, &&]
[appendSourceCode, (, StringBuilder, sb, ), {, if, (, ranges, ., isEmpty, (, ), ), {, if, (, !, inverted, &&]
[if, (, ranges, ., isEmpty, (, ), ), {, if, (, !, inverted, &&, namedGroups, ., length, (, ), ==]
[., isEmpty, (, ), ), {, if, (, !, inverted, &&, namedGroups, ., length, (, ), ==, 2, ), {]
[., isEmpty, (, ), ), {, if, (, !, inverted, &&, namedGroups, ., length, (, ), ==, 2, ), {]
[), {, if, (, !, inverted, &&, namedGroups, ., length, (, ), ==, 2, ), {, sb, ., append, (]
[length, (, ), ==, 2, ), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (]
[length, (, ), ==, 2, ), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (]
[length, (, ), ==, 2, ), {, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (]
[{, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, ), &&]
[{, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, ), &&]
[{, sb, ., append, (, namedGroups, ), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, ), &&]
[), ;, return, ;, }, else, if, (, ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==]
[;, }, else, if, (, ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0, ), {]
[;, }, else, if, (, ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0, ), {]
[(, ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0, ), {, sb, ., append, (]
[(, ranges, ., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0, ), {, sb, ., append, (]
[., isEmpty, (, ), &&, namedGroups, ., length, (, ), ==, 0, ), {, sb, ., append, (, inverted, ?]
[(, ), &&, namedGroups, ., length, (, ), ==, 0, ), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :]
[), ==, 0, ), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }]
[), ==, 0, ), {, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }]
[{, sb, ., append, (, inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb, ., append, (]
[inverted, ?, "[\\S\\s]", :, "(?!)", ), ;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (]
[:, "(?!)", ), ;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted, ), {]
[:, "(?!)", ), ;, return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted, ), {]
[return, ;, }, }, sb, ., append, (, '[', ), ;, if, (, inverted, ), {, sb, ., append, (]
[sb, ., append, (, '[', ), ;, if, (, inverted, ), {, sb, ., append, (, '^', ), ;, }]
[sb, ., append, (, '[', ), ;, if, (, inverted, ), {, sb, ., append, (, '^', ), ;, }]
['[', ), ;, if, (, inverted, ), {, sb, ., append, (, '^', ), ;, }, sb, ., append, (]
[), {, sb, ., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =]
[), {, sb, ., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =]
[{, sb, ., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !]
[., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&]
[., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&]
[., append, (, '^', ), ;, }, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&]
[}, sb, ., append, (, namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&, namedGroups, ., length, (, ), ==]
[namedGroups, ), ;, boolean, rangesStartCharset, =, !, inverted, &&, namedGroups, ., length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =]
[inverted, &&, namedGroups, ., length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =]
[length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =]
[length, (, ), ==, 0, ;, boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =]
[boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;]
[boolean, emitDashAtEnd, =, false, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;]
[=, false, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <]
[;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;]
[for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++]
[,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, char, start, =]
[ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, char, start, =, (, char, )]
[ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, char, start, =, (, char, )]
[), ;, i, <, n, ;, ++, i, ), {, char, start, =, (, char, ), ranges, ., start, (]
[++, i, ), {, char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end, =]
[{, char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end, =, (, char, )]
[char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end, =, (, char, ), (]
[char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end, =, (, char, ), (]
[char, start, =, (, char, ), ranges, ., start, (, i, ), ;, char, end, =, (, char, ), (]
[char, ), ranges, ., start, (, i, ), ;, char, end, =, (, char, ), (, ranges, ., end, (]
[., start, (, i, ), ;, char, end, =, (, char, ), (, ranges, ., end, (, i, ), -]
[;, char, end, =, (, char, ), (, ranges, ., end, (, i, ), -, 1, ), ;, switch, (]
[;, char, end, =, (, char, ), (, ranges, ., end, (, i, ), -, 1, ), ;, switch, (]
[end, =, (, char, ), (, ranges, ., end, (, i, ), -, 1, ), ;, switch, (, end, -]
[), (, ranges, ., end, (, i, ), -, 1, ), ;, switch, (, end, -, start, ), {, case]
[end, (, i, ), -, 1, ), ;, switch, (, end, -, start, ), {, case, 0, :, if, (]
[end, (, i, ), -, 1, ), ;, switch, (, end, -, start, ), {, case, 0, :, if, (]
[i, ), -, 1, ), ;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==]
[1, ), ;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-', ), {]
[;, switch, (, end, -, start, ), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =]
[start, ), {, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {]
[{, case, 0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (]
[0, :, if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,]
[if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[if, (, start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[start, ==, '-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==]
['-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
['-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
['-', ), {, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
[{, emitDashAtEnd, =, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i, +]
[=, true, ;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i, +, 1, ==]
[;, }, else, {, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, i, +, 1, ==, n, ,]
[,, rangesStartCharset, ,, i, ==, 0, ,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case]
[,, i, ==, 0, ,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :]
[==, 0, ,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (]
[,, i, +, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,]
[+, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[+, 1, ==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[==, n, ,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==]
[,, sb, ), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
[), ;, }, break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,]
[break, ;, case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;]
[case, 1, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (]
[:, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,]
[(, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,]
[,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,]
[,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,]
[,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,]
[,, i, ==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +]
[==, 0, ,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==]
[,, false, ,, sb, ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,]
[(, end, ,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :]
[,, rangesStartCharset, ,, false, ,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (]
[,, false, ,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,]
[,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[,, i, +, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,]
[+, 1, ==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==]
[==, n, ,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,]
[,, sb, ), ;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,]
[;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;]
[;, break, ;, default, :, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;]
[:, escapeRangeCharOnto, (, start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, sb, ., append, (]
[start, ,, rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;]
[rangesStartCharset, ,, i, ==, 0, ,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (]
[i, ==, 0, ,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,]
[0, ,, false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,]
[false, ,, sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,]
[sb, ), ;, sb, ., append, (, '-', ), ;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,]
[;, escapeRangeCharOnto, (, end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, ), ;, break, ;, }, }, if, (]
[end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {]
[end, ,, rangesStartCharset, ,, false, ,, true, ,, sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {]
[false, ,, true, ,, sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (]
[sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (, '-', ), ;, }]
[sb, ), ;, break, ;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (, '-', ), ;, }]
[;, }, }, if, (, emitDashAtEnd, ), {, sb, ., append, (, '-', ), ;, }, sb, ., append, (]
[escapeRangeCharOnto, (, char, ch, ,, boolean, startIsFlush, ,, boolean, atStart, ,, boolean, atEnd, ,, StringBuilder, sb, ), {, switch, (]
[,, boolean, startIsFlush, ,, boolean, atStart, ,, boolean, atEnd, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case]
[startIsFlush, ,, boolean, atStart, ,, boolean, atEnd, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '\b', :]
[startIsFlush, ,, boolean, atStart, ,, boolean, atEnd, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '\b', :]
[,, boolean, atEnd, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '\b', :, sb, ., append, (]
[), {, switch, (, ch, ), {, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case]
[switch, (, ch, ), {, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :]
[switch, (, ch, ), {, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :]
[{, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (]
[{, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (]
[{, case, '\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (]
['\b', :, sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (, atStart, &&]
[sb, ., append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (, atStart, &&, startIsFlush, ?]
[append, (, "\\b", ), ;, break, ;, case, '^', :, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :]
[;, case, '^', :, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case]
['^', :, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :]
['^', :, sb, ., append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :]
[append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (]
[append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (]
[append, (, atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (]
[atStart, &&, startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||]
[startIsFlush, ?, "\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?]
["\\^", :, "^", ), ;, break, ;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-", :]
[;, case, '-', :, sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case]
[:, sb, ., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case]
[., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :]
[., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :]
[., append, (, atStart, ||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :]
[||, atEnd, ?, "-", :, "\\-", ), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (]
["\\-", ), ;, break, ;, case, '\\', :, case, ']', :, sb, ., append, (, '\\', ), ., append, (]
[:, case, ']', :, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, default, :]
[']', :, sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (]
[sb, ., append, (, '\\', ), ., append, (, ch, ), ;, break, ;, default, :, escapeCharOnto, (, ch, ,]
[escapeCharOnto, (, ch, ,, sb, ), ;, }, }, static, int, complexity, (, CharRanges, ranges, ), {, int, complexity, =]
[}, }, static, int, complexity, (, CharRanges, ranges, ), {, int, complexity, =, 0, ;, for, (, int, i, =]
[complexity, (, CharRanges, ranges, ), {, int, complexity, =, 0, ;, for, (, int, i, =, 0, ,, n, =]
[complexity, (, CharRanges, ranges, ), {, int, complexity, =, 0, ;, for, (, int, i, =, 0, ,, n, =]
[int, complexity, =, 0, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;]
[int, complexity, =, 0, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;]
[=, 0, ;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <]
[;, for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;]
[for, (, int, i, =, 0, ,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++]
[,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, int, start, =]
[,, n, =, ranges, ., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, int, start, =]
[., getNumRanges, (, ), ;, i, <, n, ;, ++, i, ), {, int, start, =, ranges, ., start, (]
[<, n, ;, ++, i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =]
[<, n, ;, ++, i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =]
[<, n, ;, ++, i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =]
[i, ), {, int, start, =, ranges, ., start, (, i, ), ;, int, end, =, ranges, ., end, (]
[int, start, =, ranges, ., start, (, i, ), ;, int, end, =, ranges, ., end, (, i, ), -]
[., start, (, i, ), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (]
[., start, (, i, ), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (]
[., start, (, i, ), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (]
[(, i, ), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (, start, <]
[), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||]
[), ;, int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||]
[int, end, =, ranges, ., end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||, start, >=]
[ranges, ., end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {]
[end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=]
[end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=]
[end, (, i, ), -, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=]
[i, ), -, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=]
[-, 1, ;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?]
[;, if, (, start, <, 0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :]
[0x20, ||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {]
[||, start, >=, 0x7f, ), {, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++]
[{, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (]
[{, complexity, +=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (]
[+=, start, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (, end, -]
[?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, switch, (, end, -, start, ), {, case]
[}, else, {, ++, complexity, ;, }, switch, (, end, -, start, ), {, case, 0, :, continue, ;, case]
[}, switch, (, end, -, start, ), {, case, 0, :, continue, ;, case, 1, :, break, ;, default, :]
[(, end, -, start, ), {, case, 0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=]
[{, case, 0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (]
[{, case, 0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (]
[{, case, 0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (]
[0, :, continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (, end, <]
[continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||]
[continue, ;, case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||]
[case, 1, :, break, ;, default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=]
[break, ;, default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {]
[default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=]
[default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=]
[default, :, complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=]
[complexity, +=, 1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=, end, >=]
[1, ;, }, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?]
[}, if, (, end, <, 0x20, ||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6, :]
[0x20, ||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {]
[||, end, >=, 0x7f, ), {, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++]
[{, complexity, +=, end, >=, 0x100, ?, 6, :, 4, ;, }, else, {, ++, complexity, ;, }, }, return]
[complexity, ;, }, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (]
[;, }, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !]
[}, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[}, }, return, complexity, ;, }, @, Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (]
[Override, public, boolean, equals, (, Object, o, ), {, if, (, !, (, o, instanceof, DecomposedCharset, ), ), {, return]
[o, ), {, if, (, !, (, o, instanceof, DecomposedCharset, ), ), {, return, false, ;, }, DecomposedCharset, that, =]
[if, (, !, (, o, instanceof, DecomposedCharset, ), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, )]
[(, o, instanceof, DecomposedCharset, ), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return]
[(, o, instanceof, DecomposedCharset, ), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return]
[), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =]
[), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =]
[), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =]
[), ), {, return, false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =]
[false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that, ., inverted, &&]
[false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that, ., inverted, &&]
[false, ;, }, DecomposedCharset, that, =, (, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that, ., inverted, &&]
[(, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (]
[(, DecomposedCharset, ), o, ;, return, this, ., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (]
[return, this, ., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&]
[return, this, ., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&]
[return, this, ., inverted, =, that, ., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&]
[., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&, this, ., namedGroups, ., equals, (]
[., inverted, &&, this, ., ranges, ., equals, (, that, ., ranges, ), &&, this, ., namedGroups, ., equals, (]
[., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., namedGroups, ., equals, (, that, ., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +]
[., namedGroups, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (]
[;, }, @, Override, public, int, hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (]
[hashCode, (, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (, namedGroups, ., hashCode, (, ), +]
[(, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (, namedGroups, ., hashCode, (, ), +, (]
[(, ), {, return, ranges, ., hashCode, (, ), +, 31, *, (, namedGroups, ., hashCode, (, ), +, (]
[{, return, ranges, ., hashCode, (, ), +, 31, *, (, namedGroups, ., hashCode, (, ), +, (, inverted, ?]
[ranges, ., hashCode, (, ), +, 31, *, (, namedGroups, ., hashCode, (, ), +, (, inverted, ?, 1, :]
[Concatenation, extends, RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (, RegExpTree, a, ,, RegExpTree, b, ), {]
[RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (, RegExpTree, a, ,, RegExpTree, b, ), {, elements, =]
[RegExpTree, {, final, ImmutableList, <, RegExpTree, >, elements, ;, Concatenation, (, RegExpTree, a, ,, RegExpTree, b, ), {, elements, =]
[<, RegExpTree, >, elements, ;, Concatenation, (, RegExpTree, a, ,, RegExpTree, b, ), {, elements, =, ImmutableList, ., of, (]
[>, elements, ;, Concatenation, (, RegExpTree, a, ,, RegExpTree, b, ), {, elements, =, ImmutableList, ., of, (, a, ,]
[., of, (, a, ,, b, ), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {]
[., of, (, a, ,, b, ), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {]
[,, b, ), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {, this, ., elements, =]
[,, b, ), ;, }, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {, this, ., elements, =]
[}, Concatenation, (, List, <, ?, extends, RegExpTree, >, elements, ), {, this, ., elements, =, ImmutableList, ., copyOf, (]
[Override, public, RegExpTree, simplify, (, final, String, flags, ), {, class, Simplifier, {, final, List, <, RegExpTree, >, simplified, =]
[Override, public, RegExpTree, simplify, (, final, String, flags, ), {, class, Simplifier, {, final, List, <, RegExpTree, >, simplified, =]
[<, RegExpTree, >, simplified, =, Lists, ., newArrayList, (, ), ;, void, simplify, (, RegExpTree, t, ), {, if, (]
[<, RegExpTree, >, simplified, =, Lists, ., newArrayList, (, ), ;, void, simplify, (, RegExpTree, t, ), {, if, (]
[;, void, simplify, (, RegExpTree, t, ), {, if, (, t, instanceof, Concatenation, ), {, for, (, RegExpTree, child, :]
[;, void, simplify, (, RegExpTree, t, ), {, if, (, t, instanceof, Concatenation, ), {, for, (, RegExpTree, child, :]
[void, simplify, (, RegExpTree, t, ), {, if, (, t, instanceof, Concatenation, ), {, for, (, RegExpTree, child, :, (]
[RegExpTree, t, ), {, if, (, t, instanceof, Concatenation, ), {, for, (, RegExpTree, child, :, (, (, Concatenation, )]
[t, instanceof, Concatenation, ), {, for, (, RegExpTree, child, :, (, (, Concatenation, ), t, ), ., elements, ), {]
[Concatenation, ), {, for, (, RegExpTree, child, :, (, (, Concatenation, ), t, ), ., elements, ), {, simplify, (]
[(, (, Concatenation, ), t, ), ., elements, ), {, simplify, (, child, ), ;, }, }, else, if, (]
[(, (, Concatenation, ), t, ), ., elements, ), {, simplify, (, child, ), ;, }, }, else, if, (]
[(, child, ), ;, }, }, else, if, (, t, instanceof, Empty, ), {, }, else, {, int, lastIndex, =]
[(, child, ), ;, }, }, else, if, (, t, instanceof, Empty, ), {, }, else, {, int, lastIndex, =]
[(, child, ), ;, }, }, else, if, (, t, instanceof, Empty, ), {, }, else, {, int, lastIndex, =]
[else, if, (, t, instanceof, Empty, ), {, }, else, {, int, lastIndex, =, simplified, ., size, (, ), -]
[instanceof, Empty, ), {, }, else, {, int, lastIndex, =, simplified, ., size, (, ), -, 1, ;, if, (]
[instanceof, Empty, ), {, }, else, {, int, lastIndex, =, simplified, ., size, (, ), -, 1, ;, if, (]
[), {, }, else, {, int, lastIndex, =, simplified, ., size, (, ), -, 1, ;, if, (, lastIndex, >=]
[lastIndex, =, simplified, ., size, (, ), -, 1, ;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =]
[simplified, ., size, (, ), -, 1, ;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (]
[simplified, ., size, (, ), -, 1, ;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (]
[), -, 1, ;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (]
[;, if, (, lastIndex, >=, 0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,]
[0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if, (]
[0, ), {, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if, (]
[{, RegExpTree, pairwise, =, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if, (, pairwise, !=]
[=, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if, (, pairwise, !=, null, ), {]
[=, simplifyPairwise, (, simplified, ., get, (, lastIndex, ), ,, t, ), ;, if, (, pairwise, !=, null, ), {]
[., get, (, lastIndex, ), ,, t, ), ;, if, (, pairwise, !=, null, ), {, simplified, ., set, (]
[(, lastIndex, ), ,, t, ), ;, if, (, pairwise, !=, null, ), {, simplified, ., set, (, lastIndex, ,]
[if, (, pairwise, !=, null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }, }]
[if, (, pairwise, !=, null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }, }]
[null, ), {, simplified, ., set, (, lastIndex, ,, pairwise, ), ;, return, ;, }, }, simplified, ., add, (]
[., add, (, t, ), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (]
[., add, (, t, ), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (]
[., add, (, t, ), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (]
[), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&]
[), ;, }, }, RegExpTree, simplifyPairwise, (, RegExpTree, before, ,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&]
[(, RegExpTree, before, ,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&, after, instanceof, Text, ), {, return]
[(, RegExpTree, before, ,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&, after, instanceof, Text, ), {, return]
[,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&, after, instanceof, Text, ), {, return, new, Text, (]
[,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&, after, instanceof, Text, ), {, return, new, Text, (]
[,, RegExpTree, after, ), {, if, (, before, instanceof, Text, &&, after, instanceof, Text, ), {, return, new, Text, (]
[RegExpTree, after, ), {, if, (, before, instanceof, Text, &&, after, instanceof, Text, ), {, return, new, Text, (, (]
[{, if, (, before, instanceof, Text, &&, after, instanceof, Text, ), {, return, new, Text, (, (, (, Text, )]
[Text, &&, after, instanceof, Text, ), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +]
[Text, &&, after, instanceof, Text, ), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +]
[&&, after, instanceof, Text, ), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +, (]
[Text, ), {, return, new, Text, (, (, (, Text, ), before, ), ., text, +, (, (, Text, )]
[(, Text, ), before, ), ., text, +, (, (, Text, ), after, ), ., text, ), ., simplify, (]
[+, (, (, Text, ), after, ), ., text, ), ., simplify, (, flags, ), ;, }, int, beforeMin, =]
[), after, ), ., text, ), ., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =]
[), ., simplify, (, flags, ), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =]
[), ;, }, int, beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =]
[beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =, false, ;, if, (]
[beforeMin, =, 1, ,, beforeMax, =, 1, ;, RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =, false, ;, if, (]
[RegExpTree, beforeBody, =, before, ;, boolean, beforeGreedy, =, false, ;, if, (, before, instanceof, Repetition, ), {, Repetition, r, =]
[before, ;, boolean, beforeGreedy, =, false, ;, if, (, before, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, )]
[boolean, beforeGreedy, =, false, ;, if, (, before, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;]
[=, false, ;, if, (, before, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =]
[=, false, ;, if, (, before, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =]
[(, before, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;]
[instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;, beforeMax, =]
[instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;, beforeMax, =]
[Repetition, r, =, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;]
[=, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =]
[=, (, Repetition, ), before, ;, beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =]
[before, ;, beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;]
[beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =]
[beforeMin, =, r, ., min, ;, beforeMax, =, r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =]
[r, ., max, ;, beforeBody, =, r, ., body, ;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =]
[beforeBody, =, r, ., body, ;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =]
[;, beforeGreedy, =, r, ., greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =]
[greedy, ;, }, int, afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =, after, ;, boolean, afterGreedy, =]
[afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =, after, ;, boolean, afterGreedy, =, false, ;, if, (]
[afterMin, =, 1, ,, afterMax, =, 1, ;, RegExpTree, afterBody, =, after, ;, boolean, afterGreedy, =, false, ;, if, (]
[RegExpTree, afterBody, =, after, ;, boolean, afterGreedy, =, false, ;, if, (, after, instanceof, Repetition, ), {, Repetition, r, =]
[after, ;, boolean, afterGreedy, =, false, ;, if, (, after, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, )]
[boolean, afterGreedy, =, false, ;, if, (, after, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;]
[=, false, ;, if, (, after, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =]
[=, false, ;, if, (, after, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =]
[(, after, instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;]
[instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;, afterMax, =]
[instanceof, Repetition, ), {, Repetition, r, =, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;, afterMax, =]
[Repetition, r, =, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;]
[=, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =]
[=, (, Repetition, ), after, ;, afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =]
[after, ;, afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;]
[afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =]
[afterMin, =, r, ., min, ;, afterMax, =, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =]
[=, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (]
[=, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (]
[=, r, ., max, ;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (]
[;, afterBody, =, r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (]
[r, ., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&]
[., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&, !]
[., body, ;, afterGreedy, =, r, ., greedy, ;, }, if, (, beforeBody, ., equals, (, afterBody, ), &&, !]
[if, (, beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =]
[if, (, beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =]
[(, beforeBody, ., equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =, (]
[equals, (, afterBody, ), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long, )]
[), &&, !, beforeBody, ., hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long, ), beforeMin, ), +]
[hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =]
[hasCapturingGroup, (, ), ), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =]
[(, ), ), {, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =, (]
[{, long, lmin, =, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =, (, (, long, )]
[=, (, (, long, ), beforeMin, ), +, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +]
[), beforeMin, ), +, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (]
[), beforeMin, ), +, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (]
[), +, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <]
[), +, afterMin, ;, long, lmax, =, (, (, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <]
[(, long, ), beforeMax, ), +, afterMax, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =]
[beforeMax, ), +, afterMax, ;, if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, )]
[if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =]
[if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =]
[if, (, lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =]
[lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=]
[lmin, <, Integer, ., MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=]
[MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?]
[MAX_VALUE, ), {, int, min, =, (, int, ), lmin, ;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?]
[min, =, (, int, ), lmin, ;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :]
[int, ), lmin, ;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, )]
[;, int, max, =, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return]
[=, lmax, >=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (]
[>=, Integer, ., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,]
[., MAX_VALUE, ?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,]
[?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,]
[?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,]
[?, Integer, ., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,]
[., MAX_VALUE, :, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||]
[:, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||]
[:, (, int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||]
[int, ), lmax, ;, return, new, Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==]
[Repetition, (, beforeBody, ,, min, ,, max, ,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;, }, }, return]
[,, beforeGreedy, ||, afterGreedy, ||, min, ==, max, ), ;, }, }, return, null, ;, }, }, Simplifier, s, =]
[}, }, return, null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree, element, :]
[null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree, element, :, elements, ), {]
[null, ;, }, }, Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree, element, :, elements, ), {]
[Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree, element, :, elements, ), {, s, ., simplify, (]
[Simplifier, s, =, new, Simplifier, (, ), ;, for, (, RegExpTree, element, :, elements, ), {, s, ., simplify, (]
[Simplifier, (, ), ;, for, (, RegExpTree, element, :, elements, ), {, s, ., simplify, (, element, ., simplify, (]
[element, :, elements, ), {, s, ., simplify, (, element, ., simplify, (, flags, ), ), ;, }, switch, (]
[element, :, elements, ), {, s, ., simplify, (, element, ., simplify, (, flags, ), ), ;, }, switch, (]
[element, :, elements, ), {, s, ., simplify, (, element, ., simplify, (, flags, ), ), ;, }, switch, (]
[., simplify, (, flags, ), ), ;, }, switch, (, s, ., simplified, ., size, (, ), ), {, case]
[flags, ), ), ;, }, switch, (, s, ., simplified, ., size, (, ), ), {, case, 0, :, return]
[flags, ), ), ;, }, switch, (, s, ., simplified, ., size, (, ), ), {, case, 0, :, return]
[switch, (, s, ., simplified, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case]
[., simplified, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return]
[., simplified, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return]
[., simplified, ., size, (, ), ), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return]
[), {, case, 0, :, return, Empty, ., INSTANCE, ;, case, 1, :, return, s, ., simplified, ., get, (]
[Empty, ., INSTANCE, ;, case, 1, :, return, s, ., simplified, ., get, (, 0, ), ;, default, :, return]
[;, case, 1, :, return, s, ., simplified, ., get, (, 0, ), ;, default, :, return, new, Concatenation, (]
[;, case, 1, :, return, s, ., simplified, ., get, (, 0, ), ;, default, :, return, new, Concatenation, (]
[s, ., simplified, ), ;, }, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, element, :]
[}, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, element, :, elements, ), {, if, (]
[}, }, @, Override, public, boolean, isCaseSensitive, (, ), {, for, (, RegExpTree, element, :, elements, ), {, if, (]
[), {, for, (, RegExpTree, element, :, elements, ), {, if, (, element, ., isCaseSensitive, (, ), ), {, return]
[element, :, elements, ), {, if, (, element, ., isCaseSensitive, (, ), ), {, return, true, ;, }, }, return]
[;, }, }, return, false, ;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, element, :]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, element, :, elements, ), {, if, (]
[;, }, @, Override, public, boolean, containsAnchor, (, ), {, for, (, RegExpTree, element, :, elements, ), {, if, (]
[), {, for, (, RegExpTree, element, :, elements, ), {, if, (, element, ., containsAnchor, (, ), ), {, return]
[element, :, elements, ), {, if, (, element, ., containsAnchor, (, ), ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =]
[;, }, @, Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, element, :]
[Override, public, int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, element, :, elements, ), {]
[int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, element, :, elements, ), {, n, +=]
[int, numCapturingGroups, (, ), {, int, n, =, 0, ;, for, (, RegExpTree, element, :, elements, ), {, n, +=]
[0, ;, for, (, RegExpTree, element, :, elements, ), {, n, +=, element, ., numCapturingGroups, (, ), ;, }, return]
[;, }, return, n, ;, }, @, Override, public, List, <, ?, extends, RegExpTree, >, children, (, ), {, return]
[(, ), {, return, elements, ;, }, @, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, boolean, digitsMightBleed, =]
[@, Override, protected, void, appendSourceCode, (, StringBuilder, sb, ), {, boolean, digitsMightBleed, =, false, ;, for, (, RegExpTree, element, :]
[StringBuilder, sb, ), {, boolean, digitsMightBleed, =, false, ;, for, (, RegExpTree, element, :, elements, ), {, boolean, parenthesize, =]
[boolean, digitsMightBleed, =, false, ;, for, (, RegExpTree, element, :, elements, ), {, boolean, parenthesize, =, false, ;, if, (]
[boolean, digitsMightBleed, =, false, ;, for, (, RegExpTree, element, :, elements, ), {, boolean, parenthesize, =, false, ;, if, (]
[boolean, digitsMightBleed, =, false, ;, for, (, RegExpTree, element, :, elements, ), {, boolean, parenthesize, =, false, ;, if, (]
[;, for, (, RegExpTree, element, :, elements, ), {, boolean, parenthesize, =, false, ;, if, (, element, instanceof, Alternation, ||]
[;, for, (, RegExpTree, element, :, elements, ), {, boolean, parenthesize, =, false, ;, if, (, element, instanceof, Alternation, ||]
[:, elements, ), {, boolean, parenthesize, =, false, ;, if, (, element, instanceof, Alternation, ||, element, instanceof, Concatenation, ), {]
[), {, boolean, parenthesize, =, false, ;, if, (, element, instanceof, Alternation, ||, element, instanceof, Concatenation, ), {, parenthesize, =]
[false, ;, if, (, element, instanceof, Alternation, ||, element, instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (]
[(, element, instanceof, Alternation, ||, element, instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {]
[(, element, instanceof, Alternation, ||, element, instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {]
[||, element, instanceof, Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (]
[Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;]
[Concatenation, ), {, parenthesize, =, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;]
[=, true, ;, }, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;, element, ., appendSourceCode, (]
[}, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;, element, ., appendSourceCode, (, sb, ), ;]
[}, if, (, parenthesize, ), {, sb, ., append, (, "(?:", ), ;, element, ., appendSourceCode, (, sb, ), ;]
[), {, sb, ., append, (, "(?:", ), ;, element, ., appendSourceCode, (, sb, ), ;, sb, ., append, (]
[element, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, int, start, =]
[element, ., appendSourceCode, (, sb, ), ;, sb, ., append, (, ')', ), ;, }, else, {, int, start, =]
[;, sb, ., append, (, ')', ), ;, }, else, {, int, start, =, sb, ., length, (, ), ;]
[;, sb, ., append, (, ')', ), ;, }, else, {, int, start, =, sb, ., length, (, ), ;]
[(, ')', ), ;, }, else, {, int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (]
[else, {, int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (, sb, ), ;, if, (]
[else, {, int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (, sb, ), ;, if, (]
[int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (, sb, ), ;, if, (, digitsMightBleed, &&]
[int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (, sb, ), ;, if, (, digitsMightBleed, &&]
[int, start, =, sb, ., length, (, ), ;, element, ., appendSourceCode, (, sb, ), ;, if, (, digitsMightBleed, &&]
[(, ), ;, element, ., appendSourceCode, (, sb, ), ;, if, (, digitsMightBleed, &&, sb, ., length, (, ), >]
[(, sb, ), ;, if, (, digitsMightBleed, &&, sb, ., length, (, ), >, start, ), {, char, firstChar, =]
[(, sb, ), ;, if, (, digitsMightBleed, &&, sb, ., length, (, ), >, start, ), {, char, firstChar, =]
[if, (, digitsMightBleed, &&, sb, ., length, (, ), >, start, ), {, char, firstChar, =, sb, ., charAt, (]
[., length, (, ), >, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (]
[., length, (, ), >, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (]
[., length, (, ), >, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (]
[(, ), >, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=]
[>, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&]
[>, start, ), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&]
[), {, char, firstChar, =, sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=]
[sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (]
[sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (]
[sb, ., charAt, (, start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (]
[start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (]
[start, ), ;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (]
[;, if, (, '0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -]
['0', <=, firstChar, &&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -, 1, ), ==]
[&&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {]
[&&, firstChar, <=, '9', ), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {]
[), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (]
[), {, if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (]
[if, (, sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (, start, -]
[sb, ., charAt, (, start, -, 1, ), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,]
[1, ), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {]
[1, ), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {]
[1, ), ==, '{', ), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {]
[), {, sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb, ., insert, (]
[sb, ., insert, (, start, -, 1, ,, '\\', ), ;, }, else, {, sb, ., insert, (, start, ,]
[-, 1, ,, '\\', ), ;, }, else, {, sb, ., insert, (, start, ,, "(?:", ), ., append, (]
[else, {, sb, ., insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }]
[sb, ., insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =]
[., insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (]
[., insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (]
[insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (]
[insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (]
[insert, (, start, ,, "(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (]
["(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&]
["(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&]
["(?:", ), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&]
[), ., append, (, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (]
[(, ')', ), ;, }, }, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (, (, BackReference, )]
[}, }, }, digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <]
[digitsMightBleed, =, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||]
[=, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (]
[=, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (]
[=, (, (, element, instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (]
[instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&]
[instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&]
[instanceof, BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&]
[BackReference, &&, (, (, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (]
[(, BackReference, ), element, ), ., groupIndex, <, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, )]
[<, 10, ), ||, (, element, instanceof, Text, &&, (, (, Text, ), element, ), ., text, ., endsWith, (]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[protected, void, appendDebugInfo, (, StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return]
[StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Concatenation, &&]
[StringBuilder, sb, ), {, }, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Concatenation, &&]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Concatenation, &&, elements, ., equals, (]
[}, @, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Concatenation, &&, elements, ., equals, (]
[@, Override, public, boolean, equals, (, Object, o, ), {, return, o, instanceof, Concatenation, &&, elements, ., equals, (, (]
[boolean, equals, (, Object, o, ), {, return, o, instanceof, Concatenation, &&, elements, ., equals, (, (, (, Concatenation, )]
[(, (, Concatenation, ), o, ), ., elements, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[(, (, Concatenation, ), o, ), ., elements, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[Concatenation, ), o, ), ., elements, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^]
[Concatenation, ), o, ), ., elements, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, 0x20997e3e, ^]
[., hashCode, (, ), ;, }, }, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {, switch, (]
[;, }, }, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case]
[}, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '\u0000', :]
[}, static, void, escapeCharOnto, (, char, ch, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '\u0000', :]
[(, char, ch, ,, StringBuilder, sb, ), {, switch, (, ch, ), {, case, '\u0000', :, sb, ., append, (]
[), {, switch, (, ch, ), {, case, '\u0000', :, sb, ., append, (, "\\0", ), ;, break, ;, case]
[switch, (, ch, ), {, case, '\u0000', :, sb, ., append, (, "\\0", ), ;, break, ;, case, '\f', :]
[switch, (, ch, ), {, case, '\u0000', :, sb, ., append, (, "\\0", ), ;, break, ;, case, '\f', :]
[{, case, '\u0000', :, sb, ., append, (, "\\0", ), ;, break, ;, case, '\f', :, sb, ., append, (]
[append, (, "\\0", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case]
["\\0", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\t', :]
["\\0", ), ;, break, ;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\t', :]
[;, case, '\f', :, sb, ., append, (, "\\f", ), ;, break, ;, case, '\t', :, sb, ., append, (]
[append, (, "\\f", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case]
["\\f", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\n', :]
["\\f", ), ;, break, ;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\n', :]
[;, case, '\t', :, sb, ., append, (, "\\t", ), ;, break, ;, case, '\n', :, sb, ., append, (]
[append, (, "\\t", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case]
["\\t", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :]
["\\t", ), ;, break, ;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :]
[;, case, '\n', :, sb, ., append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (]
[append, (, "\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case]
["\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\\', :]
["\\n", ), ;, break, ;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\\', :]
[;, case, '\r', :, sb, ., append, (, "\\r", ), ;, break, ;, case, '\\', :, sb, ., append, (]
[), ;, break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (]
[), ;, break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (]
[), ;, break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (]
[break, ;, case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (, ch, <]
[case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (, ch, <, 0x20, ||]
[case, '\\', :, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (, ch, <, 0x20, ||]
[:, sb, ., append, (, "\\\\", ), ;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=]
["\\\\", ), ;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (]
["\\\\", ), ;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (]
[;, break, ;, default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (, ch, >=]
[default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {]
[default, :, if, (, ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {]
[ch, <, 0x20, ||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (]
[||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;]
[||, ch, >=, 0x7f, ), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;]
[), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (]
[), {, if, (, ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (]
[ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[ch, >=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[>=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[>=, 0x100, ), {, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[{, sb, ., append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >]
[append, (, "\\u", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), ), ;]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), ), ;]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, (, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, (, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[(, ch, >, >, 12, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[>, 12, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >]
[&, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), ), ;]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), ), ;]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, (, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, (, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[(, ch, >, >, 8, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[>, 8, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >]
[&, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[>, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {]
[(, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {, sb, ., append, (]
[charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;]
[charAt, (, (, ch, ), &, 0xf, ), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;]
[), &, 0xf, ), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (]
[), &, 0xf, ), ), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (]
[), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[), ;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[;, }, else, {, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[{, sb, ., append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >]
[append, (, "\\x", ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;]
[;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, "0123456789abcdef", ., charAt, (, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (]
[(, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, (, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (]
[(, ch, >, >, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (]
[>, 4, ), &, 0xf, ), ), ;, sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, }, else, {]
[sb, ., append, (, "0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, }, else, {]
["0123456789abcdef", ., charAt, (, (, ch, ), &, 0xf, ), ), ;, }, }, else, {, sb, ., append, (]
