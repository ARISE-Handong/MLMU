[;, int, size, =, values, ., size, (, ), ;, if, (, size, ==, 1, ), {, return, values, .]
[., checkArgument, (, !, values, ., isEmpty, (, ), ), ;, int, size, =, values, ., size, (, ), ;]
[), ;, int, size, =, values, ., size, (, ), ;, if, (, size, ==, 1, ), {, return, values]
[), ;, int, size, =, values, ., size, (, ), ;, if, (, size, ==, 1, ), {, return, values]
[., isEmpty, (, ), ), ;, int, size, =, values, ., size, (, ), ;, if, (, size, ==, 1]
[;, if, (, size, ==, 1, ), {, return, values, ., get, (, 0, ), ;, }, else, if, (]
[., size, (, ), ;, if, (, size, ==, 1, ), {, return, values, ., get, (, 0, ), ;]
[), {, return, values, ., get, (, 0, ), ;, }, else, if, (, size, ==, 2, ), {, return]
[==, 1, ), {, return, values, ., get, (, 0, ), ;, }, else, if, (, size, ==, 2, )]
[), {, return, values, ., get, (, 0, ), ;, }, else, if, (, size, ==, 2, ), {, return]
[;, }, else, if, (, size, ==, 2, ), {, return, apply, (, values, ., get, (, 0, ), ,]
[., get, (, 0, ), ;, }, else, if, (, size, ==, 2, ), {, return, apply, (, values, .]
[), ;, }, else, if, (, size, ==, 2, ), {, return, apply, (, values, ., get, (, 0, )]
[), {, return, apply, (, values, ., get, (, 0, ), ,, values, ., get, (, 1, ), ), ;]
[==, 2, ), {, return, apply, (, values, ., get, (, 0, ), ,, values, ., get, (, 1, )]
[), {, return, apply, (, values, ., get, (, 0, ), ,, values, ., get, (, 1, ), ), ;]
[;, }, else, {, int, mid, =, computeMidPoint, (, size, ), ;, return, apply, (, apply, (, values, ., subList]
[,, values, ., get, (, 1, ), ), ;, }, else, {, int, mid, =, computeMidPoint, (, size, ), ;]
[., get, (, 0, ), ,, values, ., get, (, 1, ), ), ;, }, else, {, int, mid, =]
[), ,, values, ., get, (, 1, ), ), ;, }, else, {, int, mid, =, computeMidPoint, (, size, )]
[), ;, }, else, {, int, mid, =, computeMidPoint, (, size, ), ;, return, apply, (, apply, (, values, .]
[., get, (, 1, ), ), ;, }, else, {, int, mid, =, computeMidPoint, (, size, ), ;, return, apply]
[), ), ;, }, else, {, int, mid, =, computeMidPoint, (, size, ), ;, return, apply, (, apply, (, values]
[;, return, apply, (, apply, (, values, ., subList, (, 0, ,, mid, ), ), ,, apply, (, values, .]
[), ;, return, apply, (, apply, (, values, ., subList, (, 0, ,, mid, ), ), ,, apply, (, values]
[;, }, }, abstract, L, apply, (, L, latticeA, ,, L, latticeB, ), ;, static, int, computeMidPoint, (, int, size]
[,, apply, (, values, ., subList, (, mid, ,, size, ), ), ), ;, }, }, abstract, L, apply, (]
[), ,, apply, (, values, ., subList, (, mid, ,, size, ), ), ), ;, }, }, abstract, L, apply]
[., subList, (, 0, ,, mid, ), ), ,, apply, (, values, ., subList, (, mid, ,, size, ), )]
[,, mid, ), ), ,, apply, (, values, ., subList, (, mid, ,, size, ), ), ), ;, }, }]
[), ), ,, apply, (, values, ., subList, (, mid, ,, size, ), ), ), ;, }, }, abstract, L]
[), ;, }, }, abstract, L, apply, (, L, latticeA, ,, L, latticeB, ), ;, static, int, computeMidPoint, (, int]
[), ), ;, }, }, abstract, L, apply, (, L, latticeA, ,, L, latticeB, ), ;, static, int, computeMidPoint, (]
[., subList, (, mid, ,, size, ), ), ), ;, }, }, abstract, L, apply, (, L, latticeA, ,, L]
[,, size, ), ), ), ;, }, }, abstract, L, apply, (, L, latticeA, ,, L, latticeB, ), ;, static]
[), ), ), ;, }, }, abstract, L, apply, (, L, latticeA, ,, L, latticeB, ), ;, static, int, computeMidPoint]
[;, if, (, size, >, 4, ), {, midpoint, &=, -, 2, ;, }, return, midpoint, ;, }, }, }]
[>, >, >, 1, ;, if, (, size, >, 4, ), {, midpoint, &=, -, 2, ;, }, return, midpoint]
[;, if, (, size, >, 4, ), {, midpoint, &=, -, 2, ;, }, return, midpoint, ;, }, }, }]
[), {, midpoint, &=, -, 2, ;, }, return, midpoint, ;, }, }, }]
[>, 4, ), {, midpoint, &=, -, 2, ;, }, return, midpoint, ;, }, }, }]
[), {, midpoint, &=, -, 2, ;, }, return, midpoint, ;, }, }, }]
[&=, -, 2, ;, }, return, midpoint, ;, }, }, }]
[;, }, return, midpoint, ;, }, }, }]
[;, }, return, midpoint, ;, }, }, }]
[;, }, }, }]
