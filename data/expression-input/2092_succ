[), {, throw, new, IllegalArgumentException, (, "The type must not be null", ), ;, }, iType, =, type, ;, }, public, final, DateTimeFieldType, getType, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "The type must not be null", ), ;, }, iType, =, type, ;, }, public, final, DateTimeFieldType]
[), {, throw, new, IllegalArgumentException, (, "The type must not be null", ), ;, }, iType, =, type, ;, }, public, final, DateTimeFieldType, getType, (]
[;, }, iType, =, type, ;, }, public, final, DateTimeFieldType, getType, (, ), {, return, iType, ;, }, public, final]
[), ;, }, iType, =, type, ;, }, public, final, DateTimeFieldType, getType, (, ), {, return, iType, ;, }, public]
[=, type, ;, }, public, final, DateTimeFieldType, getType, (, ), {, return, iType, ;, }, public, final, String, getName, (]
[;, }, public, final, DateTimeFieldType, getType, (, ), {, return, iType, ;, }, public, final, String, getName, (, ), {]
[;, }, public, final, String, getName, (, ), {, return, iType, ., getName, (, ), ;, }, public, final, boolean]
[;, }, public, final, boolean, isSupported, (, ), {, return, true, ;, }, public, abstract, int, get, (, long, instant]
[., getName, (, ), ;, }, public, final, boolean, isSupported, (, ), {, return, true, ;, }, public, abstract, int]
[;, }, public, abstract, int, get, (, long, instant, ), ;, public, String, getAsText, (, long, instant, ,, Locale, locale]
[;, }, public, final, String, getAsText, (, long, instant, ), {, return, getAsText, (, instant, ,, null, ), ;, }]
[,, locale, ), ;, }, public, final, String, getAsText, (, long, instant, ), {, return, getAsText, (, instant, ,, null]
[), ,, locale, ), ;, }, public, final, String, getAsText, (, long, instant, ), {, return, getAsText, (, instant, ,]
[), ;, }, public, final, String, getAsText, (, long, instant, ), {, return, getAsText, (, instant, ,, null, ), ;]
[;, }, public, String, getAsText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (, fieldValue]
[,, null, ), ;, }, public, String, getAsText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return]
[), ;, }, public, String, getAsText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (]
[;, }, public, final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsText, (, partial, ,, partial]
[,, locale, ), ;, }, public, final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsText, (]
[), ;, }, public, final, String, getAsText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsText, (, partial, ,]
[;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, Integer, ., toString, (, fieldValue, )]
[,, partial, ., get, (, getType, (, ), ), ,, locale, ), ;, }, public, String, getAsText, (, int, fieldValue]
[,, locale, ), ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, Integer, ., toString]
[., get, (, getType, (, ), ), ,, locale, ), ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale]
[), ,, locale, ), ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, Integer, .]
[), ;, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, Integer, ., toString, (, fieldValue]
[;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, return, getAsShortText, (, get, (, instant, )]
[., toString, (, fieldValue, ), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, return, getAsShortText]
[), ;, }, public, String, getAsShortText, (, long, instant, ,, Locale, locale, ), {, return, getAsShortText, (, get, (, instant]
[;, }, public, final, String, getAsShortText, (, long, instant, ), {, return, getAsShortText, (, instant, ,, null, ), ;, }]
[,, locale, ), ;, }, public, final, String, getAsShortText, (, long, instant, ), {, return, getAsShortText, (, instant, ,, null]
[), ,, locale, ), ;, }, public, final, String, getAsShortText, (, long, instant, ), {, return, getAsShortText, (, instant, ,]
[), ;, }, public, final, String, getAsShortText, (, long, instant, ), {, return, getAsShortText, (, instant, ,, null, ), ;]
[;, }, public, String, getAsShortText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsShortText, (, fieldValue]
[,, null, ), ;, }, public, String, getAsShortText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return]
[), ;, }, public, String, getAsShortText, (, ReadablePartial, partial, ,, int, fieldValue, ,, Locale, locale, ), {, return, getAsShortText, (]
[;, }, public, final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsShortText, (, partial, ,, partial]
[,, locale, ), ;, }, public, final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsShortText, (]
[), ;, }, public, final, String, getAsShortText, (, ReadablePartial, partial, ,, Locale, locale, ), {, return, getAsShortText, (, partial, ,]
[;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (, fieldValue, ,, locale, )]
[,, partial, ., get, (, getType, (, ), ), ,, locale, ), ;, }, public, String, getAsShortText, (, int, fieldValue]
[,, locale, ), ;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (, fieldValue]
[., get, (, getType, (, ), ), ,, locale, ), ;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale]
[), ,, locale, ), ;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (]
[), ;, }, public, String, getAsShortText, (, int, fieldValue, ,, Locale, locale, ), {, return, getAsText, (, fieldValue, ,, locale]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, getDurationField, (, ), ., add, (]
[,, locale, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, getDurationField, (, )]
[), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, getDurationField, (, ), ., add]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, getDurationField, (, ), ., add, (]
[., add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {]
[,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, getDurationField, (, )]
[), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, getDurationField, (, ), ., add]
[;, }, public, int, [, ], add, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int]
[., add, (, instant, ,, value, ), ;, }, public, int, [, ], add, (, ReadablePartial, instant, ,, int, fieldIndex]
[,, value, ), ;, }, public, int, [, ], add, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ]]
[), ;, }, public, int, [, ], add, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,]
[), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max]
[==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {]
[), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max]
[;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant]
[;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed]
[), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[>, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex]
[), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, []
[,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, )]
[), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values]
[;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[+, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;]
[[, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int]
[], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed]
[;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[<=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[[, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if]
[], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new]
[), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant]
[==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField]
[), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant]
[), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, )]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, )]
[;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType]
[), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), .]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, )]
[., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[-, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values]
[!=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +]
[., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd]
[;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, .]
[), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField]
[-=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,]
[;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, []
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values]
[+, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values]
[;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, []
[[, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, )]
[], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values]
[=, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ]]
[;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, )]
[., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue]
[,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values]
[,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while]
[-, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;]
[,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while]
[,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd]
[), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0]
[=, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue]
[[, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int]
[], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =]
[;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long]
[,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values]
[), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;]
[), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[<, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex]
[), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, []
[,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, )]
[), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values]
[;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[+, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;]
[[, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int]
[], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed]
[;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[>=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[[, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if]
[], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new]
[), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant]
[==, null, ), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField]
[), {, if, (, fieldIndex, ==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant]
[), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, )]
[==, 0, ), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[), {, throw, new, IllegalArgumentException, (, "Maximum value exceeded for add", ), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, )]
[;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType]
[), ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), .]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, )]
[., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[-, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values]
[!=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -]
[., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd]
[;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, .]
[), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField]
[-=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,]
[;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values]
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values]
[-, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values]
[;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values]
[[, fieldIndex, ], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1]
[], ;, values, =, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;]
[=, nextField, ., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex]
[;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex]
[., add, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =]
[,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,]
[,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }]
[-, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, )]
[,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }]
[,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set]
[), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,]
[), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,]
[=, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, []
[[, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values]
[], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values]
[;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;, }, public, int]
[,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;]
[), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;, }, public]
[;, }, public, int, [, ], addWrapPartial, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int]
[,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;, }, public, int, [, ], addWrapPartial, (, ReadablePartial, instant]
[,, values, ,, values, [, fieldIndex, ], ), ;, }, public, int, [, ], addWrapPartial, (, ReadablePartial, instant, ,, int]
[,, values, [, fieldIndex, ], ), ;, }, public, int, [, ], addWrapPartial, (, ReadablePartial, instant, ,, int, fieldIndex, ,]
[), ;, }, public, int, [, ], addWrapPartial, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,]
[[, fieldIndex, ], ), ;, }, public, int, [, ], addWrapPartial, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, []
[], ), ;, }, public, int, [, ], addWrapPartial, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values]
[), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max]
[==, 0, ), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {]
[), {, return, values, ;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max]
[;, }, DateTimeField, nextField, =, null, ;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant]
[;, while, (, valueToAdd, >, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed]
[), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[>, 0, ), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex]
[), {, int, max, =, getMaximumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, []
[,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, )]
[), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values]
[;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[+, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;]
[[, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int]
[], +, valueToAdd, ;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed]
[;, if, (, proposed, <=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[<=, max, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[[, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if]
[], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex]
[==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values]
[), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex]
[), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =]
[==, 0, ), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex]
[), {, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =]
[-=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant]
[;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, .]
[-, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;]
[), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue]
[+, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, )]
[), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue]
[;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, .]
[[, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField]
[], ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant]
[=, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1]
[[, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (]
[], =, getMinimumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, )]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, )]
[., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[-, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values]
[!=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, max, +]
[., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd]
[;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, .]
[), ;, }, }, valueToAdd, -=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField]
[-=, (, max, +, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,]
[;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, []
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values]
[+, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values]
[;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, []
[[, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, )]
[], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values]
[=, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ]]
[;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, )]
[., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue]
[,, fieldIndex, -, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values]
[,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while]
[-, 1, ,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;]
[,, values, ,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while]
[,, 1, ), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd]
[), ;, values, [, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0]
[=, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue]
[[, fieldIndex, ], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int]
[], =, getMinimumValue, (, instant, ,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =]
[;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long]
[,, values, ), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values]
[), ;, }, while, (, valueToAdd, <, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;]
[), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[<, 0, ), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex]
[), {, int, min, =, getMinimumValue, (, instant, ,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +]
[;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, []
[,, values, ), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, )]
[), ;, long, proposed, =, values, [, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values]
[;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[+, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;]
[[, fieldIndex, ], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int]
[], +, valueToAdd, ;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed]
[;, if, (, proposed, >=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[>=, min, ), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField]
[), {, values, [, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null]
[=, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==]
[[, fieldIndex, ], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if]
[], =, (, int, ), proposed, ;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[;, break, ;, }, if, (, nextField, ==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=]
[), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex]
[==, null, ), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values]
[), {, if, (, fieldIndex, ==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex]
[), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =]
[==, 0, ), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex]
[), {, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =]
[-=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant]
[;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, .]
[-, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;]
[), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue]
[-, 1, ), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, )]
[), -, values, [, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue]
[;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, .]
[[, fieldIndex, ], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField]
[], ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant]
[=, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1]
[[, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (]
[], =, getMaximumValue, (, instant, ,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -]
[;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, )]
[,, values, ), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (]
[), ;, continue, ;, }, nextField, =, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (]
[=, instant, ., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=]
[;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, )]
[., getField, (, fieldIndex, -, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[-, 1, ), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), .]
[), ;, if, (, getRangeDurationField, (, ), ., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values]
[!=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }]
[., getType, (, ), !=, nextField, ., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (]
[), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values]
[., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd, -=, (, min, -]
[., getDurationField, (, ), ., getType, (, ), ), {, throw, new, IllegalArgumentException, (, "Fields invalid for add", ), ;, }, }, valueToAdd]
[;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, .]
[), ;, }, }, valueToAdd, -=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField]
[-=, (, min, -, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,]
[;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values]
[-, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values]
[-, 1, ), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1]
[), -, values, [, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values]
[;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values]
[[, fieldIndex, ], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1]
[], ;, values, =, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;]
[=, nextField, ., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex]
[;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex]
[., addWrapPartial, (, instant, ,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =]
[,, fieldIndex, -, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,]
[,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }]
[-, 1, ,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, )]
[,, values, ,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }]
[,, -, 1, ), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set]
[), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,]
[), ;, values, [, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,]
[=, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, []
[[, fieldIndex, ], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values]
[], =, getMaximumValue, (, instant, ,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values]
[;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;, }, public, long]
[,, values, ), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;]
[), ;, }, return, set, (, instant, ,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;, }, public]
[;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, int, current, =, get, (, instant, )]
[,, fieldIndex, ,, values, ,, values, [, fieldIndex, ], ), ;, }, public, long, addWrapField, (, long, instant, ,, int]
[,, values, ,, values, [, fieldIndex, ], ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, )]
[,, values, [, fieldIndex, ], ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, int]
[), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, int, current, =, get, (, instant]
[[, fieldIndex, ], ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, int, current, =]
[], ), ;, }, public, long, addWrapField, (, long, instant, ,, int, value, ), {, int, current, =, get, (]
[;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant]
[), ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (]
[;, return, set, (, instant, ,, wrapped, ), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int]
[., getWrappedValue, (, current, ,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set]
[,, value, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, wrapped]
[,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, wrapped, ), ;]
[,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, wrapped, ), ;, }, public, int, [, ]]
[), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, wrapped, ), ;, }, public, int, []
[), ;, return, set, (, instant, ,, wrapped, ), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,]
[), ), ;, return, set, (, instant, ,, wrapped, ), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant]
[;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, int]
[,, wrapped, ), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ]]
[), ;, }, public, int, [, ], addWrapField, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,]
[;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant]
[[, fieldIndex, ], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,]
[], ;, int, wrapped, =, FieldUtils, ., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (]
[;, return, set, (, instant, ,, fieldIndex, ,, values, ,, wrapped, ), ;, }, public, int, getDifference, (, long, minuendInstant]
[., getWrappedValue, (, current, ,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set]
[,, valueToAdd, ,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, fieldIndex]
[,, getMinimumValue, (, instant, ), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, fieldIndex, ,, values]
[,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,, wrapped, ), ;, }]
[), ,, getMaximumValue, (, instant, ), ), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,, wrapped, ), ;]
[), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,, wrapped, ), ;, }, public, int, getDifference, (, long]
[), ), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,, wrapped, ), ;, }, public, int, getDifference, (]
[;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifference, (]
[,, fieldIndex, ,, values, ,, wrapped, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, values, ,, wrapped, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField]
[,, wrapped, ), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, )]
[), ;, }, public, int, getDifference, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifference]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifferenceAsLong, (]
[., getDifference, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {]
[,, subtrahendInstant, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, )]
[), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, getDurationField, (, ), ., getDifferenceAsLong]
[;, }, public, abstract, long, set, (, long, instant, ,, int, value, ), ;, public, int, [, ], set, (]
[., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, abstract, long, set, (, long, instant, ,, int, value, )]
[,, subtrahendInstant, ), ;, }, public, abstract, long, set, (, long, instant, ,, int, value, ), ;, public, int, []
[), ;, }, public, abstract, long, set, (, long, instant, ,, int, value, ), ;, public, int, [, ], set]
[;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <, partial]
[., verifyValueBounds, (, this, ,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,, values, )]
[,, newValue, ,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,, values, ), ), ;, values, []
[,, getMinimumValue, (, partial, ,, values, ), ,, getMaximumValue, (, partial, ,, values, ), ), ;, values, [, fieldIndex, ]]
[,, getMaximumValue, (, partial, ,, values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i]
[,, values, ), ,, getMaximumValue, (, partial, ,, values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for]
[), ,, getMaximumValue, (, partial, ,, values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int]
[), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <]
[,, values, ), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1]
[), ), ;, values, [, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i]
[=, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <, partial, ., size, (, ), ;]
[[, fieldIndex, ], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <, partial, ., size]
[], =, newValue, ;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <, partial, ., size, (, )]
[;, for, (, int, i, =, fieldIndex, +, 1, ;, i, <, partial, ., size, (, ), ;, i, ++]
[;, i, <, partial, ., size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (]
[+, 1, ;, i, <, partial, ., size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, .]
[;, i, <, partial, ., size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (]
[;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (, values, [, i]
[<, partial, ., size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, )]
[;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (, values, [, i]
[., size, (, ), ;, i, ++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if]
[), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (, values, [, i, ], >, field]
[++, ), {, DateTimeField, field, =, partial, ., getField, (, i, ), ;, if, (, values, [, i, ], >]
[;, if, (, values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, []
[., getField, (, i, ), ;, if, (, values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values]
[), ;, if, (, values, [, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values]
[), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values]
[>, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMaximumValue, (]
[[, i, ], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field]
[], >, field, ., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMaximumValue]
[), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values]
[., getMaximumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,]
[,, values, ), ), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }]
[), ), {, values, [, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (]
[=, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, [, i, ], <, field, .]
[[, i, ], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, [, i, ]]
[], =, field, ., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, [, i, ], <, field]
[;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values]
[., getMaximumValue, (, partial, ,, values, ), ;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (]
[,, values, ), ;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, )]
[), ;, }, if, (, values, [, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {]
[), {, values, [, i, ], =, field, ., getMinimumValue, (, partial, ,, values, ), ;, }, }, return, values]
[<, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMinimumValue, (]
[[, i, ], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field]
[], <, field, ., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMinimumValue]
[), {, values, [, i, ], =, field, ., getMinimumValue, (, partial, ,, values, ), ;, }, }, return, values]
[., getMinimumValue, (, partial, ,, values, ), ), {, values, [, i, ], =, field, ., getMinimumValue, (, partial, ,]
[,, values, ), ), {, values, [, i, ], =, field, ., getMinimumValue, (, partial, ,, values, ), ;, }]
[), ), {, values, [, i, ], =, field, ., getMinimumValue, (, partial, ,, values, ), ;, }, }, return]
[=, field, ., getMinimumValue, (, partial, ,, values, ), ;, }, }, return, values, ;, }, public, long, set, (]
[[, i, ], =, field, ., getMinimumValue, (, partial, ,, values, ), ;, }, }, return, values, ;, }, public]
[], =, field, ., getMinimumValue, (, partial, ,, values, ), ;, }, }, return, values, ;, }, public, long, set]
[;, }, }, return, values, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, )]
[., getMinimumValue, (, partial, ,, values, ), ;, }, }, return, values, ;, }, public, long, set, (, long, instant]
[,, values, ), ;, }, }, return, values, ;, }, public, long, set, (, long, instant, ,, String, text, ,]
[), ;, }, }, return, values, ;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale]
[;, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, int, value, =, convertText]
[;, return, set, (, instant, ,, value, ), ;, }, public, final, long, set, (, long, instant, ,, String, text]
[,, locale, ), ;, return, set, (, instant, ,, value, ), ;, }, public, final, long, set, (, long, instant]
[), ;, return, set, (, instant, ,, value, ), ;, }, public, final, long, set, (, long, instant, ,, String]
[;, }, public, final, long, set, (, long, instant, ,, String, text, ), {, return, set, (, instant, ,, text]
[,, value, ), ;, }, public, final, long, set, (, long, instant, ,, String, text, ), {, return, set, (]
[), ;, }, public, final, long, set, (, long, instant, ,, String, text, ), {, return, set, (, instant, ,]
[;, }, public, int, [, ], set, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,, String]
[,, text, ,, null, ), ;, }, public, int, [, ], set, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int]
[,, null, ), ;, }, public, int, [, ], set, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ]]
[), ;, }, public, int, [, ], set, (, ReadablePartial, instant, ,, int, fieldIndex, ,, int, [, ], values, ,]
[;, return, set, (, instant, ,, fieldIndex, ,, values, ,, value, ), ;, }, protected, int, convertText, (, String, text]
[,, locale, ), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,, value, ), ;, }, protected, int, convertText]
[), ;, return, set, (, instant, ,, fieldIndex, ,, values, ,, value, ), ;, }, protected, int, convertText, (, String]
[;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {, try, {, return, Integer, ., parseInt, (]
[,, fieldIndex, ,, values, ,, value, ), ;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {]
[,, values, ,, value, ), ;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {, try, {]
[,, value, ), ;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {, try, {, return, Integer]
[), ;, }, protected, int, convertText, (, String, text, ,, Locale, locale, ), {, try, {, return, Integer, ., parseInt]
[;, }, catch, (, NumberFormatException, ex, ), {, throw, new, IllegalFieldValueException, (, getType, (, ), ,, text, ), ;, }]
[., parseInt, (, text, ), ;, }, catch, (, NumberFormatException, ex, ), {, throw, new, IllegalFieldValueException, (, getType, (, )]
[), ;, }, catch, (, NumberFormatException, ex, ), {, throw, new, IllegalFieldValueException, (, getType, (, ), ,, text, ), ;]
[;, }, }, public, abstract, DurationField, getDurationField, (, ), ;, public, abstract, DurationField, getRangeDurationField, (, ), ;, public, boolean, isLeap]
[,, text, ), ;, }, }, public, abstract, DurationField, getDurationField, (, ), ;, public, abstract, DurationField, getRangeDurationField, (, ), ;]
[), ;, }, }, public, abstract, DurationField, getDurationField, (, ), ;, public, abstract, DurationField, getRangeDurationField, (, ), ;, public, boolean]
[;, }, public, int, getLeapAmount, (, long, instant, ), {, return, 0, ;, }, public, DurationField, getLeapDurationField, (, ), {]
[;, }, public, DurationField, getLeapDurationField, (, ), {, return, null, ;, }, public, abstract, int, getMinimumValue, (, ), ;, public]
[;, }, public, abstract, int, getMinimumValue, (, ), ;, public, int, getMinimumValue, (, long, instant, ), {, return, getMinimumValue, (]
[;, }, public, int, getMinimumValue, (, ReadablePartial, instant, ), {, return, getMinimumValue, (, ), ;, }, public, int, getMinimumValue, (]
[;, }, public, int, getMinimumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return, getMinimumValue, (, instant, )]
[;, }, public, abstract, int, getMaximumValue, (, ), ;, public, int, getMaximumValue, (, long, instant, ), {, return, getMaximumValue, (]
[), ;, }, public, abstract, int, getMaximumValue, (, ), ;, public, int, getMaximumValue, (, long, instant, ), {, return, getMaximumValue]
[;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ), {, return, getMaximumValue, (, ), ;, }, public, int, getMaximumValue, (]
[;, }, public, int, getMaximumValue, (, ReadablePartial, instant, ,, int, [, ], values, ), {, return, getMaximumValue, (, instant, )]
[;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, int, max, =, getMaximumValue, (, ), ;, if, (, max]
[), ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, int, max, =, getMaximumValue, (, ), ;, if, (]
[;, if, (, max, >=, 0, ), {, if, (, max, <, 10, ), {, return, 1, ;, }, else]
[), {, if, (, max, <, 10, ), {, return, 1, ;, }, else, if, (, max, <, 100, )]
[>=, 0, ), {, if, (, max, <, 10, ), {, return, 1, ;, }, else, if, (, max, <]
[), {, if, (, max, <, 10, ), {, return, 1, ;, }, else, if, (, max, <, 100, )]
[), {, return, 1, ;, }, else, if, (, max, <, 100, ), {, return, 2, ;, }, else, if]
[<, 10, ), {, return, 1, ;, }, else, if, (, max, <, 100, ), {, return, 2, ;, }]
[), {, return, 1, ;, }, else, if, (, max, <, 100, ), {, return, 2, ;, }, else, if]
[;, }, else, if, (, max, <, 100, ), {, return, 2, ;, }, else, if, (, max, <, 1000]
[), {, return, 2, ;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }, }, return]
[<, 100, ), {, return, 2, ;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }]
[), {, return, 2, ;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }, }, return]
[;, }, else, if, (, max, <, 1000, ), {, return, 3, ;, }, }, return, Integer, ., toString, (]
[), {, return, 3, ;, }, }, return, Integer, ., toString, (, max, ), ., length, (, ), ;, }]
[<, 1000, ), {, return, 3, ;, }, }, return, Integer, ., toString, (, max, ), ., length, (, )]
[), {, return, 3, ;, }, }, return, Integer, ., toString, (, max, ), ., length, (, ), ;, }]
[;, }, }, return, Integer, ., toString, (, max, ), ., length, (, ), ;, }, public, int, getMaximumShortTextLength, (]
[;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, getMaximumTextLength, (, locale, ), ;, }, public, abstract, long]
[., length, (, ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, getMaximumTextLength, (, locale, ), ;]
[., toString, (, max, ), ., length, (, ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return]
[), ., length, (, ), ;, }, public, int, getMaximumShortTextLength, (, Locale, locale, ), {, return, getMaximumTextLength, (, locale, )]
[;, }, public, abstract, long, roundFloor, (, long, instant, ), ;, public, long, roundCeiling, (, long, instant, ), {, long]
[), ;, }, public, abstract, long, roundFloor, (, long, instant, ), ;, public, long, roundCeiling, (, long, instant, ), {]
[;, if, (, newInstant, !=, instant, ), {, instant, =, add, (, newInstant, ,, 1, ), ;, }, return, instant]
[), ;, if, (, newInstant, !=, instant, ), {, instant, =, add, (, newInstant, ,, 1, ), ;, }, return]
[), {, instant, =, add, (, newInstant, ,, 1, ), ;, }, return, instant, ;, }, public, long, roundHalfFloor, (]
[!=, instant, ), {, instant, =, add, (, newInstant, ,, 1, ), ;, }, return, instant, ;, }, public, long]
[), {, instant, =, add, (, newInstant, ,, 1, ), ;, }, return, instant, ;, }, public, long, roundHalfFloor, (]
[=, add, (, newInstant, ,, 1, ), ;, }, return, instant, ;, }, public, long, roundHalfFloor, (, long, instant, )]
[;, }, return, instant, ;, }, public, long, roundHalfFloor, (, long, instant, ), {, long, floor, =, roundFloor, (, instant]
[,, 1, ), ;, }, return, instant, ;, }, public, long, roundHalfFloor, (, long, instant, ), {, long, floor, =]
[), ;, }, return, instant, ;, }, public, long, roundHalfFloor, (, long, instant, ), {, long, floor, =, roundFloor, (]
[;, }, public, long, roundHalfFloor, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long, ceiling]
[;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=, diffToCeiling]
[), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=]
[;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return, floor, ;, }, else]
[-, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return, floor, ;]
[;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return, floor, ;, }, else]
[;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return, floor, ;, }, else, {, return, ceiling, ;, }, }, public]
[-, instant, ;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return, floor, ;, }, else, {, return, ceiling, ;, }]
[;, if, (, diffFromFloor, <=, diffToCeiling, ), {, return, floor, ;, }, else, {, return, ceiling, ;, }, }, public]
[), {, return, floor, ;, }, else, {, return, ceiling, ;, }, }, public, long, roundHalfCeiling, (, long, instant, )]
[<=, diffToCeiling, ), {, return, floor, ;, }, else, {, return, ceiling, ;, }, }, public, long, roundHalfCeiling, (, long]
[), {, return, floor, ;, }, else, {, return, ceiling, ;, }, }, public, long, roundHalfCeiling, (, long, instant, )]
[;, }, else, {, return, ceiling, ;, }, }, public, long, roundHalfCeiling, (, long, instant, ), {, long, floor, =]
[;, }, }, public, long, roundHalfCeiling, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long]
[;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=, diffFromFloor]
[), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=]
[;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return, ceiling, ;, }, else]
[-, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return, ceiling, ;]
[;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return, ceiling, ;, }, else]
[;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return, ceiling, ;, }, else, {, return, floor, ;, }, }, public]
[-, instant, ;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return, ceiling, ;, }, else, {, return, floor, ;, }]
[;, if, (, diffToCeiling, <=, diffFromFloor, ), {, return, ceiling, ;, }, else, {, return, floor, ;, }, }, public]
[), {, return, ceiling, ;, }, else, {, return, floor, ;, }, }, public, long, roundHalfEven, (, long, instant, )]
[<=, diffFromFloor, ), {, return, ceiling, ;, }, else, {, return, floor, ;, }, }, public, long, roundHalfEven, (, long]
[), {, return, ceiling, ;, }, else, {, return, floor, ;, }, }, public, long, roundHalfEven, (, long, instant, )]
[;, }, else, {, return, floor, ;, }, }, public, long, roundHalfEven, (, long, instant, ), {, long, floor, =]
[;, }, }, public, long, roundHalfEven, (, long, instant, ), {, long, floor, =, roundFloor, (, instant, ), ;, long]
[;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling]
[), ;, long, ceiling, =, roundCeiling, (, instant, ), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =]
[;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling]
[), ;, long, diffFromFloor, =, instant, -, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <]
[;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else]
[-, floor, ;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;]
[;, long, diffToCeiling, =, ceiling, -, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else]
[;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {]
[-, instant, ;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor]
[;, if, (, diffFromFloor, <, diffToCeiling, ), {, return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {]
[), {, return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {]
[<, diffToCeiling, ), {, return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }]
[), {, return, floor, ;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {]
[;, }, else, if, (, diffToCeiling, <, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (, (, get]
[), {, return, ceiling, ;, }, else, {, if, (, (, get, (, ceiling, ), &, 1, ), ==, 0]
[<, diffFromFloor, ), {, return, ceiling, ;, }, else, {, if, (, (, get, (, ceiling, ), &, 1, )]
[), {, return, ceiling, ;, }, else, {, if, (, (, get, (, ceiling, ), &, 1, ), ==, 0]
[;, }, else, {, if, (, (, get, (, ceiling, ), &, 1, ), ==, 0, ), {, return, ceiling]
[), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, ), {, return]
[==, 0, ), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, )]
[), ==, 0, ), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant]
[&, 1, ), ==, 0, ), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (]
[), &, 1, ), ==, 0, ), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder]
[), ==, 0, ), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant]
[), {, return, ceiling, ;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, ), {, return]
[;, }, return, floor, ;, }, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (]
[;, }, }, public, long, remainder, (, long, instant, ), {, return, instant, -, roundFloor, (, instant, ), ;, }]
[;, }, public, String, toString, (, ), {, return, "DateTimeField[", +, getName, (, ), +, ']', ;, }, }]
[-, roundFloor, (, instant, ), ;, }, public, String, toString, (, ), {, return, "DateTimeField[", +, getName, (, ), +]
[;, }, public, String, toString, (, ), {, return, "DateTimeField[", +, getName, (, ), +, ']', ;, }, }]
[), ;, }, public, String, toString, (, ), {, return, "DateTimeField[", +, getName, (, ), +, ']', ;, }, }]
[;, }, }]
[+, ']', ;, }, }]
[+, getName, (, ), +, ']', ;, }, }]
[+, ']', ;, }, }]
[;, }, }]
