[chart, ., util, ., ObjectUtilities, ;, public, class, DateTickUnit, extends, TickUnit, implements, Serializable, {, private, static, final, long, serialVersionUID, =]
[., util, ., ObjectUtilities, ;, public, class, DateTickUnit, extends, TickUnit, implements, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[private, int, rollCount, ;, private, DateFormat, formatter, ;, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ), {, this, (]
[rollCount, ;, private, DateFormat, formatter, ;, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ), {, this, (, unitType, ,]
[private, DateFormat, formatter, ;, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ), {, this, (, unitType, ,, multiple, ,]
[private, DateFormat, formatter, ;, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ), {, this, (, unitType, ,, multiple, ,]
[public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ), {, this, (, unitType, ,, multiple, ,, DateFormat, ., getDateInstance, (]
[public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ), {, this, (, unitType, ,, multiple, ,, DateFormat, ., getDateInstance, (]
[SHORT, ), ), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this, (]
[), ;, }, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this, (, unitType, ,]
[}, public, DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this, (, unitType, ,, multiple, ,]
[DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this, (, unitType, ,, multiple, ,, unitType, ,]
[DateTickUnitType, unitType, ,, int, multiple, ,, DateFormat, formatter, ), {, this, (, unitType, ,, multiple, ,, unitType, ,, multiple, ,]
[DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateTickUnitType, rollUnitType, ,, int, rollMultiple, ,, DateFormat, formatter, ), {, super, (]
[DateTickUnit, (, DateTickUnitType, unitType, ,, int, multiple, ,, DateTickUnitType, rollUnitType, ,, int, rollMultiple, ,, DateFormat, formatter, ), {, super, (]
[,, int, multiple, ,, DateTickUnitType, rollUnitType, ,, int, rollMultiple, ,, DateFormat, formatter, ), {, super, (, DateTickUnit, ., getMillisecondCount, (]
[multiple, ,, DateTickUnitType, rollUnitType, ,, int, rollMultiple, ,, DateFormat, formatter, ), {, super, (, DateTickUnit, ., getMillisecondCount, (, unitType, ,]
[rollMultiple, ,, DateFormat, formatter, ), {, super, (, DateTickUnit, ., getMillisecondCount, (, unitType, ,, multiple, ), ), ;, if, (]
[rollMultiple, ,, DateFormat, formatter, ), {, super, (, DateTickUnit, ., getMillisecondCount, (, unitType, ,, multiple, ), ), ;, if, (]
[DateFormat, formatter, ), {, super, (, DateTickUnit, ., getMillisecondCount, (, unitType, ,, multiple, ), ), ;, if, (, formatter, ==]
[super, (, DateTickUnit, ., getMillisecondCount, (, unitType, ,, multiple, ), ), ;, if, (, formatter, ==, null, ), {, throw]
[., getMillisecondCount, (, unitType, ,, multiple, ), ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (]
[), ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (]
[), ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (]
[;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (, multiple, <=]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (, multiple, <=, 0, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException, (]
[), ;, }, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (]
[), ;, }, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (]
[}, if, (, multiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=]
[<=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=, 0, ), {, throw]
[{, throw, new, IllegalArgumentException, (, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (]
[(, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }]
[(, "Requires 'multiple' > 0.", ), ;, }, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }]
[}, if, (, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =]
[(, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;]
[(, rollMultiple, <=, 0, ), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;]
[), {, throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., count, =]
[throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., count, =, multiple, ;]
[throw, new, IllegalArgumentException, (, "Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., count, =, multiple, ;]
["Requires 'rollMultiple' > 0.", ), ;, }, this, ., unitType, =, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =]
[;, }, this, ., unitType, =, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;]
[;, }, this, ., unitType, =, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;]
[unitType, =, unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =]
[unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;]
[unitType, ;, this, ., count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;]
[count, =, multiple, ;, this, ., rollUnitType, =, rollUnitType, ;, this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =]
[this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {, return]
[this, ., rollCount, =, rollMultiple, ;, this, ., formatter, =, formatter, ;, }, public, DateTickUnitType, getUnitType, (, ), {, return]
[}, public, DateTickUnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, int, getMultiple, (, ), {, return]
[}, public, DateTickUnitType, getUnitType, (, ), {, return, this, ., unitType, ;, }, public, int, getMultiple, (, ), {, return]
[}, public, int, getMultiple, (, ), {, return, this, ., count, ;, }, public, DateTickUnitType, getRollUnitType, (, ), {, return]
[}, public, int, getMultiple, (, ), {, return, this, ., count, ;, }, public, DateTickUnitType, getRollUnitType, (, ), {, return]
[}, public, DateTickUnitType, getRollUnitType, (, ), {, return, this, ., rollUnitType, ;, }, public, int, getRollMultiple, (, ), {, return]
[}, public, DateTickUnitType, getRollUnitType, (, ), {, return, this, ., rollUnitType, ;, }, public, int, getRollMultiple, (, ), {, return]
[int, getRollMultiple, (, ), {, return, this, ., rollCount, ;, }, public, String, valueToString, (, double, milliseconds, ), {, return]
[int, getRollMultiple, (, ), {, return, this, ., rollCount, ;, }, public, String, valueToString, (, double, milliseconds, ), {, return]
[int, getRollMultiple, (, ), {, return, this, ., rollCount, ;, }, public, String, valueToString, (, double, milliseconds, ), {, return]
[this, ., rollCount, ;, }, public, String, valueToString, (, double, milliseconds, ), {, return, this, ., formatter, ., format, (]
[;, }, public, String, valueToString, (, double, milliseconds, ), {, return, this, ., formatter, ., format, (, new, Date, (]
[String, valueToString, (, double, milliseconds, ), {, return, this, ., formatter, ., format, (, new, Date, (, (, long, )]
[new, Date, (, (, long, ), milliseconds, ), ), ;, }, public, String, dateToString, (, Date, date, ), {, return]
[new, Date, (, (, long, ), milliseconds, ), ), ;, }, public, String, dateToString, (, Date, date, ), {, return]
[new, Date, (, (, long, ), milliseconds, ), ), ;, }, public, String, dateToString, (, Date, date, ), {, return]
[milliseconds, ), ), ;, }, public, String, dateToString, (, Date, date, ), {, return, this, ., formatter, ., format, (]
[format, (, date, ), ;, }, public, Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =]
[format, (, date, ), ;, }, public, Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =]
[;, }, public, Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (]
[Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;]
[Date, addToDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;]
[base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (]
[zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;]
[zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;]
[calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (]
[calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (]
[calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (]
[;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,]
[;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,]
[), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,, this, ., count, ), ;, return]
[), ;, calendar, ., add, (, this, ., unitType, ., getCalendarField, (, ), ,, this, ., count, ), ;, return]
[count, ), ;, return, calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {, return]
[;, return, calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {, return, rollDate, (]
[calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {, return, rollDate, (, base, ,]
[calendar, ., getTime, (, ), ;, }, public, Date, rollDate, (, Date, base, ), {, return, rollDate, (, base, ,]
[getDefault, (, ), ), ;, }, public, Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =]
[getDefault, (, ), ), ;, }, public, Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =]
[;, }, public, Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (]
[Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;]
[Date, rollDate, (, Date, base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;]
[base, ,, TimeZone, zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (]
[zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;]
[zone, ), {, Calendar, calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;]
[calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (]
[calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (]
[calendar, =, Calendar, ., getInstance, (, zone, ), ;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (]
[;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,]
[;, calendar, ., setTime, (, base, ), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,]
[), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,, this, ., rollCount, ), ;, return]
[), ;, calendar, ., add, (, this, ., rollUnitType, ., getCalendarField, (, ), ,, this, ., rollCount, ), ;, return]
[this, ., rollCount, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {, return]
[this, ., rollCount, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {, return]
[this, ., rollCount, ), ;, return, calendar, ., getTime, (, ), ;, }, public, int, getCalendarField, (, ), {, return]
[., getCalendarField, (, ), ;, }, private, static, long, getMillisecondCount, (, DateTickUnitType, unit, ,, int, count, ), {, if, (]
[., getCalendarField, (, ), ;, }, private, static, long, getMillisecondCount, (, DateTickUnitType, unit, ,, int, count, ), {, if, (]
[;, }, private, static, long, getMillisecondCount, (, DateTickUnitType, unit, ,, int, count, ), {, if, (, unit, ., equals, (]
[;, }, private, static, long, getMillisecondCount, (, DateTickUnitType, unit, ,, int, count, ), {, if, (, unit, ., equals, (]
[DateTickUnitType, unit, ,, int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return]
[DateTickUnitType, unit, ,, int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return]
[unit, ,, int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (]
[unit, ,, int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (]
[unit, ,, int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (]
[unit, ,, int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (]
[unit, ,, int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (]
[int, count, ), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (, 365L, *]
[), {, if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (, 365L, *, 24L, *]
[if, (, unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (, 365L, *, 24L, *, 60L, *]
[unit, ., equals, (, DateTickUnitType, ., YEAR, ), ), {, return, (, 365L, *, 24L, *, 60L, *, 60L, *]
[(, DateTickUnitType, ., YEAR, ), ), {, return, (, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *]
[{, return, (, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[{, return, (, 365L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[*, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[*, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (]
[count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *]
[}, else, if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *, 24L, *]
[if, (, unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *, 24L, *, 60L, *]
[unit, ., equals, (, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *, 24L, *, 60L, *, 60L, *]
[(, DateTickUnitType, ., MONTH, ), ), {, return, (, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *]
[{, return, (, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[{, return, (, 31L, *, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[*, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[*, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (]
[count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L, *]
[}, else, if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L, *, 60L, *]
[if, (, unit, ., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L, *, 60L, *, 60L, *]
[., equals, (, DateTickUnitType, ., DAY, ), ), {, return, (, 24L, *, 60L, *, 60L, *, 1000L, ), *]
[), ), {, return, (, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[), ), {, return, (, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[(, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[(, 24L, *, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (]
[count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (, 60L, *]
[}, else, if, (, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (, 60L, *, 60L, *]
[(, unit, ., equals, (, DateTickUnitType, ., HOUR, ), ), {, return, (, 60L, *, 60L, *, 1000L, ), *]
[., HOUR, ), ), {, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[., HOUR, ), ), {, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[{, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[{, return, (, 60L, *, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (]
[), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (]
[count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L, *]
[else, if, (, unit, ., equals, (, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L, *, 1000L, ), *]
[(, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[(, DateTickUnitType, ., MINUTE, ), ), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else, if, (]
[), ), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[), ), {, return, (, 60L, *, 1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return]
[1000L, ), *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return]
[*, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *]
[(, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *, count, ;, }, else, if, (]
[(, unit, ., equals, (, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *, count, ;, }, else, if, (]
[(, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *, count, ;, }, else, if, (, unit, ., equals, (]
[(, DateTickUnitType, ., SECOND, ), ), {, return, 1000L, *, count, ;, }, else, if, (, unit, ., equals, (]
[return, 1000L, *, count, ;, }, else, if, (, unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return]
[else, if, (, unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;, }, else, {, throw]
[unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;, }, else, {, throw, new, IllegalArgumentException, (]
[unit, ., equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;, }, else, {, throw, new, IllegalArgumentException, (]
[equals, (, DateTickUnitType, ., MILLISECOND, ), ), {, return, count, ;, }, else, {, throw, new, IllegalArgumentException, (, "The 'unit' argument has a ", +]
[IllegalArgumentException, (, "The 'unit' argument has a ", +, "value that is not recognised.", ), ;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (]
[IllegalArgumentException, (, "The 'unit' argument has a ", +, "value that is not recognised.", ), ;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (]
["The 'unit' argument has a ", +, "value that is not recognised.", ), ;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==]
[;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null, ), {, return]
[;, }, }, private, static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null, ), {, return]
[static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null, ), {, return, DateFormat, ., getDateInstance, (]
[static, DateFormat, notNull, (, DateFormat, formatter, ), {, if, (, formatter, ==, null, ), {, return, DateFormat, ., getDateInstance, (]
[(, formatter, ==, null, ), {, return, DateFormat, ., getDateInstance, (, DateFormat, ., SHORT, ), ;, }, else, {, return]
[), ;, }, else, {, return, formatter, ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), ;, }, else, {, return, formatter, ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[}, else, {, return, formatter, ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[formatter, ;, }, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return]
[return, true, ;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false, ;, }, if, (, !]
[true, ;, }, if, (, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false, ;, }, if, (, !]
[(, !, (, obj, instanceof, DateTickUnit, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[DateTickUnit, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, DateTickUnit, that, =]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, )]
[equals, (, obj, ), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (]
[(, obj, ), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !]
[obj, ), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (]
[obj, ), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (]
[obj, ), ), {, return, false, ;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (]
[;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (, this, ., unitType, ., equals, (]
[;, }, DateTickUnit, that, =, (, DateTickUnit, ), obj, ;, if, (, !, (, this, ., unitType, ., equals, (]
[obj, ;, if, (, !, (, this, ., unitType, ., equals, (, that, ., unitType, ), ), ), {, return]
[(, this, ., unitType, ., equals, (, that, ., unitType, ), ), ), {, return, false, ;, }, if, (]
[(, this, ., unitType, ., equals, (, that, ., unitType, ), ), ), {, return, false, ;, }, if, (]
[(, this, ., unitType, ., equals, (, that, ., unitType, ), ), ), {, return, false, ;, }, if, (]
[., equals, (, that, ., unitType, ), ), ), {, return, false, ;, }, if, (, this, ., count, !=]
[., equals, (, that, ., unitType, ), ), ), {, return, false, ;, }, if, (, this, ., count, !=]
[), ), ), {, return, false, ;, }, if, (, this, ., count, !=, that, ., count, ), {, return]
[false, ;, }, if, (, this, ., count, !=, that, ., count, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., count, !=, that, ., count, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., count, !=, that, ., count, ), {, return, false, ;, }, if, (, !]
[this, ., count, !=, that, ., count, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[this, ., count, !=, that, ., count, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[that, ., count, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter, ,]
[that, ., count, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., formatter, ,, that, ., formatter, ), ), {, return]
[!, ObjectUtilities, ., equal, (, this, ., formatter, ,, that, ., formatter, ), ), {, return, false, ;, }, return]
[), ), {, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =]
[{, return, false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;]
[false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =]
[false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =]
[false, ;, }, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =]
[}, return, true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =, 37, *]
[true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =, 37, *, result, +]
[true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =, 37, *, result, +]
[true, ;, }, public, int, hashCode, (, ), {, int, result, =, 19, ;, result, =, 37, *, result, +]
[{, int, result, =, 19, ;, result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;]
[result, =, 19, ;, result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =]
[result, =, 19, ;, result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =]
[result, =, 19, ;, result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =]
[19, ;, result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *]
[result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +]
[result, =, 37, *, result, +, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +]
[result, +, this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;]
[this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =]
[this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =]
[this, ., unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =]
[unitType, ., hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37, *]
[hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37, *, result, +]
[hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37, *, result, +]
[hashCode, (, ), ;, result, =, 37, *, result, +, this, ., count, ;, result, =, 37, *, result, +]
[+, this, ., count, ;, result, =, 37, *, result, +, this, ., formatter, ., hashCode, (, ), ;, return]
[+, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[+, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[+, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[+, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[+, this, ., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return]
[., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +]
[., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +]
[., formatter, ., hashCode, (, ), ;, return, result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +]
[result, ;, }, public, String, toString, (, ), {, return, "DateTickUnit[", +, this, ., unitType, ., toString, (, ), +]
[}, public, String, toString, (, ), {, return, "DateTickUnit[", +, this, ., unitType, ., toString, (, ), +, ", ", +]
[}, public, String, toString, (, ), {, return, "DateTickUnit[", +, this, ., unitType, ., toString, (, ), +, ", ", +]
[(, ), {, return, "DateTickUnit[", +, this, ., unitType, ., toString, (, ), +, ", ", +, this, ., count, +]
