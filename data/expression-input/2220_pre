[exception, ., OutOfRangeException, ;, @, Deprecated, public, class, RandomDataImpl, implements, RandomData, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[., OutOfRangeException, ;, @, Deprecated, public, class, RandomDataImpl, implements, RandomData, ,, Serializable, {, private, static, final, long, serialVersionUID, =, -]
[{, private, static, final, long, serialVersionUID, =, -, 626730818244969716L, ;, private, final, RandomDataGenerator, delegate, ;, public, RandomDataImpl, (, ), {]
[static, final, long, serialVersionUID, =, -, 626730818244969716L, ;, private, final, RandomDataGenerator, delegate, ;, public, RandomDataImpl, (, ), {, delegate, =]
[public, RandomDataImpl, (, ), {, delegate, =, new, RandomDataGenerator, (, ), ;, }, public, RandomDataImpl, (, RandomGenerator, rand, ), {]
[(, ), {, delegate, =, new, RandomDataGenerator, (, ), ;, }, public, RandomDataImpl, (, RandomGenerator, rand, ), {, delegate, =]
[delegate, =, new, RandomDataGenerator, (, ), ;, }, public, RandomDataImpl, (, RandomGenerator, rand, ), {, delegate, =, new, RandomDataGenerator, (]
[rand, ), {, delegate, =, new, RandomDataGenerator, (, rand, ), ;, }, @, Deprecated, RandomDataGenerator, getDelegate, (, ), {, return]
[RandomDataGenerator, getDelegate, (, ), {, return, delegate, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, return]
[RandomDataGenerator, getDelegate, (, ), {, return, delegate, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, return]
[{, return, delegate, ;, }, public, String, nextHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextHexString, (]
[nextHexString, (, len, ), ;, }, public, int, nextInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return]
[nextHexString, (, len, ), ;, }, public, int, nextInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return]
[;, }, public, int, nextInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextInt, (]
[public, int, nextInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextInt, (, lower, ,]
[lower, ,, upper, ), ;, }, public, long, nextLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return]
[lower, ,, upper, ), ;, }, public, long, nextLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return]
[;, }, public, long, nextLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextLong, (]
[public, long, nextLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextLong, (, lower, ,]
[., nextLong, (, lower, ,, upper, ), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, return]
[., nextLong, (, lower, ,, upper, ), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, return]
[,, upper, ), ;, }, public, String, nextSecureHexString, (, int, len, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextSecureHexString, (]
[nextSecureHexString, (, len, ), ;, }, public, int, nextSecureInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return]
[nextSecureHexString, (, len, ), ;, }, public, int, nextSecureInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return]
[;, }, public, int, nextSecureInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextSecureInt, (]
[public, int, nextSecureInt, (, int, lower, ,, int, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextSecureInt, (, lower, ,]
[lower, ,, upper, ), ;, }, public, long, nextSecureLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return]
[lower, ,, upper, ), ;, }, public, long, nextSecureLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return]
[;, }, public, long, nextSecureLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextSecureLong, (]
[public, long, nextSecureLong, (, long, lower, ,, long, upper, ), throws, NumberIsTooLargeException, {, return, delegate, ., nextSecureLong, (, lower, ,]
[., nextSecureLong, (, lower, ,, upper, ), ;, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[., nextSecureLong, (, lower, ,, upper, ), ;, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[,, upper, ), ;, }, public, long, nextPoisson, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextPoisson, (]
[nextPoisson, (, mean, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, return]
[nextPoisson, (, mean, ), ;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, return]
[;, }, public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextGaussian, (]
[public, double, nextGaussian, (, double, mu, ,, double, sigma, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextGaussian, (, mu, ,]
[., nextGaussian, (, mu, ,, sigma, ), ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[., nextGaussian, (, mu, ,, sigma, ), ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return]
[,, sigma, ), ;, }, public, double, nextExponential, (, double, mean, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextExponential, (]
[;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return]
[;, }, public, double, nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return]
[nextUniform, (, double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, delegate, ., nextUniform, (]
[double, lower, ,, double, upper, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, delegate, ., nextUniform, (, lower, ,]
[double, nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return]
[double, nextUniform, (, double, lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return]
[lower, ,, double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, delegate, ., nextUniform, (]
[double, upper, ,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, delegate, ., nextUniform, (, lower, ,]
[,, boolean, lowerInclusive, ), throws, NumberIsTooLargeException, ,, NotFiniteNumberException, ,, NotANumberException, {, return, delegate, ., nextUniform, (, lower, ,, upper, ,]
[lower, ,, upper, ,, lowerInclusive, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return]
[lower, ,, upper, ,, lowerInclusive, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return]
[lowerInclusive, ), ;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, delegate, ., nextBeta, (]
[;, }, public, double, nextBeta, (, double, alpha, ,, double, beta, ), {, return, delegate, ., nextBeta, (, alpha, ,]
[nextBeta, (, alpha, ,, beta, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return]
[nextBeta, (, alpha, ,, beta, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return]
[beta, ), ;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, delegate, ., nextBinomial, (]
[;, }, public, int, nextBinomial, (, int, numberOfTrials, ,, double, probabilityOfSuccess, ), {, return, delegate, ., nextBinomial, (, numberOfTrials, ,]
[nextBinomial, (, numberOfTrials, ,, probabilityOfSuccess, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return]
[nextBinomial, (, numberOfTrials, ,, probabilityOfSuccess, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return]
[probabilityOfSuccess, ), ;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return, delegate, ., nextCauchy, (]
[;, }, public, double, nextCauchy, (, double, median, ,, double, scale, ), {, return, delegate, ., nextCauchy, (, median, ,]
[return, delegate, ., nextCauchy, (, median, ,, scale, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return]
[return, delegate, ., nextCauchy, (, median, ,, scale, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return]
[(, median, ,, scale, ), ;, }, public, double, nextChiSquare, (, double, df, ), {, return, delegate, ., nextChiSquare, (]
[nextChiSquare, (, df, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return]
[nextChiSquare, (, df, ), ;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return]
[;, }, public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextF, (]
[public, double, nextF, (, double, numeratorDf, ,, double, denominatorDf, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextF, (, numeratorDf, ,]
[numeratorDf, ,, denominatorDf, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[numeratorDf, ,, denominatorDf, ), ;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[;, }, public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextGamma, (]
[public, double, nextGamma, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextGamma, (, shape, ,]
[int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[int, nextHypergeometric, (, int, populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[populationSize, ,, int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, delegate, ., nextHypergeometric, (]
[int, numberOfSuccesses, ,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, delegate, ., nextHypergeometric, (, populationSize, ,]
[,, int, sampleSize, ), throws, NotPositiveException, ,, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, delegate, ., nextHypergeometric, (, populationSize, ,, numberOfSuccesses, ,]
[sampleSize, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return]
[sampleSize, ), ;, }, public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return]
[public, int, nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return, delegate, ., nextPascal, (]
[nextPascal, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, return, delegate, ., nextPascal, (, r, ,]
[., nextPascal, (, r, ,, p, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return]
[., nextPascal, (, r, ,, p, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return]
[,, p, ), ;, }, public, double, nextT, (, double, df, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextT, (]
[nextT, (, df, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[nextT, (, df, ), ;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return]
[;, }, public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextWeibull, (]
[public, double, nextWeibull, (, double, shape, ,, double, scale, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextWeibull, (, shape, ,]
[shape, ,, scale, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return]
[shape, ,, scale, ), ;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return]
[;, }, public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextZipf, (]
[public, int, nextZipf, (, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, return, delegate, ., nextZipf, (, numberOfElements, ,]
[{, return, delegate, ., nextZipf, (, numberOfElements, ,, exponent, ), ;, }, public, void, reSeed, (, long, seed, ), {]
[{, return, delegate, ., nextZipf, (, numberOfElements, ,, exponent, ), ;, }, public, void, reSeed, (, long, seed, ), {]
[nextZipf, (, numberOfElements, ,, exponent, ), ;, }, public, void, reSeed, (, long, seed, ), {, delegate, ., reSeed, (]
[reSeed, (, long, seed, ), {, delegate, ., reSeed, (, seed, ), ;, }, public, void, reSeedSecure, (, ), {]
[reSeed, (, long, seed, ), {, delegate, ., reSeed, (, seed, ), ;, }, public, void, reSeedSecure, (, ), {]
[void, reSeedSecure, (, ), {, delegate, ., reSeedSecure, (, ), ;, }, public, void, reSeedSecure, (, long, seed, ), {]
[void, reSeedSecure, (, ), {, delegate, ., reSeedSecure, (, ), ;, }, public, void, reSeedSecure, (, long, seed, ), {]
[{, delegate, ., reSeedSecure, (, ), ;, }, public, void, reSeedSecure, (, long, seed, ), {, delegate, ., reSeedSecure, (]
[reSeedSecure, (, long, seed, ), {, delegate, ., reSeedSecure, (, seed, ), ;, }, public, void, reSeed, (, ), {]
[reSeedSecure, (, long, seed, ), {, delegate, ., reSeedSecure, (, seed, ), ;, }, public, void, reSeed, (, ), {]
[reSeed, (, ), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {]
[reSeed, (, ), ;, }, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {]
[}, public, void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, delegate, ., setSecureAlgorithm, (]
[void, setSecureAlgorithm, (, String, algorithm, ,, String, provider, ), throws, NoSuchAlgorithmException, ,, NoSuchProviderException, {, delegate, ., setSecureAlgorithm, (, algorithm, ,]
[;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[;, }, public, int, [, ], nextPermutation, (, int, n, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[[, ], nextPermutation, (, int, n, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, delegate, ., nextPermutation, (]
[nextPermutation, (, int, n, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, delegate, ., nextPermutation, (, n, ,]
[Object, [, ], nextSample, (, Collection, <, ?, >, c, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[Object, [, ], nextSample, (, Collection, <, ?, >, c, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return]
[(, Collection, <, ?, >, c, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, delegate, ., nextSample, (]
[<, ?, >, c, ,, int, k, ), throws, NotStrictlyPositiveException, ,, NumberIsTooLargeException, {, return, delegate, ., nextSample, (, c, ,]
[(, c, ,, k, ), ;, }, @, Deprecated, public, double, nextInversionDeviate, (, RealDistribution, distribution, ), throws, MathIllegalArgumentException, {, return]
[(, c, ,, k, ), ;, }, @, Deprecated, public, double, nextInversionDeviate, (, RealDistribution, distribution, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, @, Deprecated, public, double, nextInversionDeviate, (, RealDistribution, distribution, ), throws, MathIllegalArgumentException, {, return, distribution, ., inverseCumulativeProbability, (]
[}, @, Deprecated, public, double, nextInversionDeviate, (, RealDistribution, distribution, ), throws, MathIllegalArgumentException, {, return, distribution, ., inverseCumulativeProbability, (, nextUniform, (]
[Deprecated, public, double, nextInversionDeviate, (, RealDistribution, distribution, ), throws, MathIllegalArgumentException, {, return, distribution, ., inverseCumulativeProbability, (, nextUniform, (, 0, ,]
[0, ,, 1, ), ), ;, }, @, Deprecated, public, int, nextInversionDeviate, (, IntegerDistribution, distribution, ), throws, MathIllegalArgumentException, {, return]
[0, ,, 1, ), ), ;, }, @, Deprecated, public, int, nextInversionDeviate, (, IntegerDistribution, distribution, ), throws, MathIllegalArgumentException, {, return]
[), ;, }, @, Deprecated, public, int, nextInversionDeviate, (, IntegerDistribution, distribution, ), throws, MathIllegalArgumentException, {, return, distribution, ., inverseCumulativeProbability, (]
[}, @, Deprecated, public, int, nextInversionDeviate, (, IntegerDistribution, distribution, ), throws, MathIllegalArgumentException, {, return, distribution, ., inverseCumulativeProbability, (, nextUniform, (]
[Deprecated, public, int, nextInversionDeviate, (, IntegerDistribution, distribution, ), throws, MathIllegalArgumentException, {, return, distribution, ., inverseCumulativeProbability, (, nextUniform, (, 0, ,]
