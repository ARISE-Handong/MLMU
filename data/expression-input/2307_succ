[;, }, public, Line, (, final, Line, line, ), {, this, ., direction, =, line, ., direction, ;, this, .]
[,, p2, ), ;, }, public, Line, (, final, Line, line, ), {, this, ., direction, =, line, ., direction]
[), ;, }, public, Line, (, final, Line, line, ), {, this, ., direction, =, line, ., direction, ;, this]
[=, line, ., direction, ;, this, ., zero, =, line, ., zero, ;, }, public, void, reset, (, final, Vector3D]
[., direction, =, line, ., direction, ;, this, ., zero, =, line, ., zero, ;, }, public, void, reset, (]
[;, this, ., zero, =, line, ., zero, ;, }, public, void, reset, (, final, Vector3D, p1, ,, final, Vector3D]
[., direction, ;, this, ., zero, =, line, ., zero, ;, }, public, void, reset, (, final, Vector3D, p1, ,]
[=, line, ., zero, ;, }, public, void, reset, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException]
[., zero, =, line, ., zero, ;, }, public, void, reset, (, final, Vector3D, p1, ,, final, Vector3D, p2, )]
[;, }, public, void, reset, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {, final, Vector3D, delta]
[., zero, ;, }, public, void, reset, (, final, Vector3D, p1, ,, final, Vector3D, p2, ), throws, MathIllegalArgumentException, {, final]
[;, final, double, norm2, =, delta, ., getNormSq, (, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new]
[., subtract, (, p1, ), ;, final, double, norm2, =, delta, ., getNormSq, (, ), ;, if, (, norm2, ==]
[), ;, final, double, norm2, =, delta, ., getNormSq, (, ), ;, if, (, norm2, ==, 0.0, ), {, throw]
[;, if, (, norm2, ==, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, .]
[., getNormSq, (, ), ;, if, (, norm2, ==, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, )]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (, 1.0]
[==, 0.0, ), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D]
[), {, throw, new, MathIllegalArgumentException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (, 1.0]
[;, }, this, ., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta, )]
[), ;, }, this, ., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta]
[., ZERO_NORM, ), ;, }, this, ., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, )]
[=, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D]
[., direction, =, new, Vector3D, (, 1.0, /, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =]
[;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta, ), /, norm2, ,]
[,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta, )]
[/, FastMath, ., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,]
[,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta, )]
[., sqrt, (, norm2, ), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1]
[), ,, delta, ), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta]
[), ;, zero, =, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta, ), /, norm2]
[=, new, Vector3D, (, 1.0, ,, p1, ,, -, p1, ., dotProduct, (, delta, ), /, norm2, ,, delta, )]
[;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, ), ;, reverted, .]
[,, p1, ,, -, p1, ., dotProduct, (, delta, ), /, norm2, ,, delta, ), ;, }, public, Line, revert]
[,, -, p1, ., dotProduct, (, delta, ), /, norm2, ,, delta, ), ;, }, public, Line, revert, (, )]
[,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, )]
[/, norm2, ,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (]
[/, norm2, ,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (]
[., dotProduct, (, delta, ), /, norm2, ,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line]
[), /, norm2, ,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line]
[,, delta, ), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, )]
[), ;, }, public, Line, revert, (, ), {, final, Line, reverted, =, new, Line, (, this, ), ;, reverted]
[;, reverted, ., direction, =, reverted, ., direction, ., negate, (, ), ;, return, reverted, ;, }, public, Vector3D, getDirection]
[), ;, reverted, ., direction, =, reverted, ., direction, ., negate, (, ), ;, return, reverted, ;, }, public, Vector3D]
[=, reverted, ., direction, ., negate, (, ), ;, return, reverted, ;, }, public, Vector3D, getDirection, (, ), {, return]
[., direction, =, reverted, ., direction, ., negate, (, ), ;, return, reverted, ;, }, public, Vector3D, getDirection, (, )]
[;, return, reverted, ;, }, public, Vector3D, getDirection, (, ), {, return, direction, ;, }, public, Vector3D, getOrigin, (, )]
[., negate, (, ), ;, return, reverted, ;, }, public, Vector3D, getDirection, (, ), {, return, direction, ;, }, public]
[., direction, ., negate, (, ), ;, return, reverted, ;, }, public, Vector3D, getDirection, (, ), {, return, direction, ;]
[;, }, public, Vector3D, getDirection, (, ), {, return, direction, ;, }, public, Vector3D, getOrigin, (, ), {, return, zero]
[;, }, public, Vector3D, getOrigin, (, ), {, return, zero, ;, }, public, double, getAbscissa, (, final, Vector3D, point, )]
[;, }, public, double, getAbscissa, (, final, Vector3D, point, ), {, return, point, ., subtract, (, zero, ), ., dotProduct]
[;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D, (, 1.0, ,, zero, ,, abscissa]
[., dotProduct, (, direction, ), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D, (]
[., subtract, (, zero, ), ., dotProduct, (, direction, ), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, )]
[), ., dotProduct, (, direction, ), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D]
[), ;, }, public, Vector3D, pointAt, (, final, double, abscissa, ), {, return, new, Vector3D, (, 1.0, ,, zero, ,]
[;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector1D, (, getAbscissa, (]
[,, zero, ,, abscissa, ,, direction, ), ;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, )]
[,, abscissa, ,, direction, ), ;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return]
[,, direction, ), ;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector1D]
[), ;, }, public, Vector1D, toSubSpace, (, final, Vector, <, Euclidean3D, >, point, ), {, return, new, Vector1D, (, getAbscissa]
[;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (, (, (, Vector1D]
[), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (, (, (]
[), ), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (, (]
[), ), ;, }, public, Vector3D, toSpace, (, final, Vector, <, Euclidean1D, >, point, ), {, return, pointAt, (, (]
[;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =, Vector3D, ., angle, (, direction]
[), ;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =, Vector3D, ., angle, (]
[., getX, (, ), ), ;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle, =]
[), ., getX, (, ), ), ;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle]
[), ., getX, (, ), ), ;, }, public, boolean, isSimilarTo, (, final, Line, line, ), {, final, double, angle]
[;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), )]
[., angle, (, direction, ,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle]
[,, line, ., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, .]
[), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, )]
[., direction, ), ;, return, (, (, angle, <, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -]
[;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, distance, (, p, ), <, 1.0e-10, ;, }]
[&&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, distance]
[), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return]
[||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&, contains, (, line, ., zero, )]
[), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&, contains, (, line, ., zero]
[<, 1.0e-10, ), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&, contains, (, line]
[), ||, (, angle, >, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&, contains, (, line, ., zero]
[), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return]
[), ), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {]
[>, (, FastMath, ., PI, -, 1.0e-10, ), ), ), &&, contains, (, line, ., zero, ), ;, }, public]
[), ), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {]
[), ), ), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, )]
[-, 1.0e-10, ), ), ), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D]
[., PI, -, 1.0e-10, ), ), ), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (]
[), ), ), &&, contains, (, line, ., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, )]
[;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, distance, (, p, ), <, 1.0e-10, ;, }]
[), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, distance, (, p, ), <, 1.0e-10, ;]
[., zero, ), ;, }, public, boolean, contains, (, final, Vector3D, p, ), {, return, distance, (, p, ), <]
[;, }, public, double, distance, (, final, Vector3D, p, ), {, final, Vector3D, d, =, p, ., subtract, (, zero]
[<, 1.0e-10, ;, }, public, double, distance, (, final, Vector3D, p, ), {, final, Vector3D, d, =, p, ., subtract]
[), <, 1.0e-10, ;, }, public, double, distance, (, final, Vector3D, p, ), {, final, Vector3D, d, =, p, .]
[;, }, public, double, distance, (, final, Vector3D, p, ), {, final, Vector3D, d, =, p, ., subtract, (, zero]
[;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,, -, d, ., dotProduct, (, direction, ), ,]
[., subtract, (, zero, ), ;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,, -, d, .]
[), ;, final, Vector3D, n, =, new, Vector3D, (, 1.0, ,, d, ,, -, d, ., dotProduct, (, direction, )]
[;, return, n, ., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line, ), {, final, Vector3D]
[,, d, ,, -, d, ., dotProduct, (, direction, ), ,, direction, ), ;, return, n, ., getNorm, (, )]
[,, -, d, ., dotProduct, (, direction, ), ,, direction, ), ;, return, n, ., getNorm, (, ), ;, }]
[,, direction, ), ;, return, n, ., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line, )]
[,, direction, ), ;, return, n, ., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line, )]
[., dotProduct, (, direction, ), ,, direction, ), ;, return, n, ., getNorm, (, ), ;, }, public, double, distance]
[), ,, direction, ), ;, return, n, ., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line]
[), ;, return, n, ., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line, ), {, final]
[;, }, public, double, distance, (, final, Line, line, ), {, final, Vector3D, normal, =, Vector3D, ., crossProduct, (, direction]
[., getNorm, (, ), ;, }, public, double, distance, (, final, Line, line, ), {, final, Vector3D, normal, =, Vector3D]
[;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (, n, <, Precision, ., SAFE_MIN, ), {]
[., crossProduct, (, direction, ,, line, ., direction, ), ;, final, double, n, =, normal, ., getNorm, (, ), ;]
[,, line, ., direction, ), ;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (, n, <]
[), ;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (, n, <, Precision, ., SAFE_MIN, )]
[., direction, ), ;, final, double, n, =, normal, ., getNorm, (, ), ;, if, (, n, <, Precision, .]
[;, if, (, n, <, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final]
[., getNorm, (, ), ;, if, (, n, <, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero]
[), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =, line, ., zero, ., subtract]
[<, Precision, ., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =, line]
[), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =, line, ., zero, ., subtract]
[., SAFE_MIN, ), {, return, distance, (, line, ., zero, ), ;, }, final, double, offset, =, line, ., zero]
[;, }, final, double, offset, =, line, ., zero, ., subtract, (, zero, ), ., dotProduct, (, normal, ), /]
[), ;, }, final, double, offset, =, line, ., zero, ., subtract, (, zero, ), ., dotProduct, (, normal, )]
[., zero, ), ;, }, final, double, offset, =, line, ., zero, ., subtract, (, zero, ), ., dotProduct, (]
[;, return, FastMath, ., abs, (, offset, ), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final]
[/, n, ;, return, FastMath, ., abs, (, offset, ), ;, }, public, Vector3D, closestPoint, (, final, Line, line, )]
[., dotProduct, (, normal, ), /, n, ;, return, FastMath, ., abs, (, offset, ), ;, }, public, Vector3D, closestPoint]
[., subtract, (, zero, ), ., dotProduct, (, normal, ), /, n, ;, return, FastMath, ., abs, (, offset, )]
[., zero, ., subtract, (, zero, ), ., dotProduct, (, normal, ), /, n, ;, return, FastMath, ., abs, (]
[), ., dotProduct, (, normal, ), /, n, ;, return, FastMath, ., abs, (, offset, ), ;, }, public, Vector3D]
[), /, n, ;, return, FastMath, ., abs, (, offset, ), ;, }, public, Vector3D, closestPoint, (, final, Line, line]
[;, return, FastMath, ., abs, (, offset, ), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final]
[;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final, double, cos, =, direction, ., dotProduct, (, line]
[., abs, (, offset, ), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final, double, cos, =]
[), ;, }, public, Vector3D, closestPoint, (, final, Line, line, ), {, final, double, cos, =, direction, ., dotProduct, (]
[;, final, double, n, =, 1, -, cos, *, cos, ;, if, (, n, <, Precision, ., EPSILON, ), {]
[., dotProduct, (, line, ., direction, ), ;, final, double, n, =, 1, -, cos, *, cos, ;, if, (]
[), ;, final, double, n, =, 1, -, cos, *, cos, ;, if, (, n, <, Precision, ., EPSILON, )]
[., direction, ), ;, final, double, n, =, 1, -, cos, *, cos, ;, if, (, n, <, Precision, .]
[;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =, line, .]
[-, cos, *, cos, ;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D]
[;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =, line, .]
[*, cos, ;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =]
[;, if, (, n, <, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =, line, .]
[), {, return, zero, ;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (, zero, ), ;, final]
[<, Precision, ., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (]
[), {, return, zero, ;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (, zero, ), ;, final]
[., EPSILON, ), {, return, zero, ;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (, zero, )]
[;, }, final, Vector3D, delta0, =, line, ., zero, ., subtract, (, zero, ), ;, final, double, a, =, delta0]
[;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final, double, b, =, delta0, ., dotProduct, (]
[., subtract, (, zero, ), ;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final, double, b]
[., zero, ., subtract, (, zero, ), ;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final]
[), ;, final, double, a, =, delta0, ., dotProduct, (, direction, ), ;, final, double, b, =, delta0, ., dotProduct]
[;, final, double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,]
[., dotProduct, (, direction, ), ;, final, double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return]
[), ;, final, double, b, =, delta0, ., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1]
[;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -, b, *, cos, ), /, n, ,, direction]
[., dotProduct, (, line, ., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -, b]
[), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -, b, *, cos, ), /, n, ,]
[., direction, ), ;, return, new, Vector3D, (, 1, ,, zero, ,, (, a, -, b, *, cos, ), /]
[;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (, line, ), ;]
[,, zero, ,, (, a, -, b, *, cos, ), /, n, ,, direction, ), ;, }, public, Vector3D, intersection]
[,, (, a, -, b, *, cos, ), /, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final]
[,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (]
[/, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =]
[), /, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest]
[-, b, *, cos, ), /, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, )]
[), /, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest]
[*, cos, ), /, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final]
[), /, n, ,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest]
[,, direction, ), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (]
[), ;, }, public, Vector3D, intersection, (, final, Line, line, ), {, final, Vector3D, closest, =, closestPoint, (, line, )]
[;, return, line, ., contains, (, closest, ), ?, closest, :, null, ;, }, public, SubLine, wholeLine, (, ), {]
[), ;, return, line, ., contains, (, closest, ), ?, closest, :, null, ;, }, public, SubLine, wholeLine, (, )]
[;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine, (, this, ,, new, IntervalsSet, (, ), ), ;]
[?, closest, :, null, ;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine, (, this, ,, new, IntervalsSet]
[., contains, (, closest, ), ?, closest, :, null, ;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine]
[), ?, closest, :, null, ;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine, (, this, ,, new]
[:, null, ;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine, (, this, ,, new, IntervalsSet, (, )]
[;, }, public, SubLine, wholeLine, (, ), {, return, new, SubLine, (, this, ,, new, IntervalsSet, (, ), ), ;]
[;, }, }]
[,, new, IntervalsSet, (, ), ), ;, }, }]
[), ;, }, }]
