[compiler, ;, private, final, boolean, generatePseudoNames, ;, private, final, VariableMap, prevUsedPropertyMap, ;, private, final, List, <, Node, >, stringNodesToRename, =]
[stringNodesToRename, =, new, ArrayList, <, Node, >, (, ), ;, private, final, Map, <, Node, ,, Node, >, callNodeToParentMap, =]
[(, ), ;, private, final, char, [, ], reservedCharacters, ;, private, final, Map, <, String, ,, Property, >, propertyMap, =]
[), ;, private, final, UndiGraph, <, Property, ,, PropertyAffinity, >, affinityGraph, ;, private, final, Set, <, String, >, externedNames, =]
[Property, ,, PropertyAffinity, >, affinityGraph, ;, private, final, Set, <, String, >, externedNames, =, new, HashSet, <, String, >, (]
[Property, ,, PropertyAffinity, >, affinityGraph, ;, private, final, Set, <, String, >, externedNames, =, new, HashSet, <, String, >, (]
[affinityGraph, ;, private, final, Set, <, String, >, externedNames, =, new, HashSet, <, String, >, (, Arrays, ., asList, (]
[<, String, >, (, Arrays, ., asList, (, "prototype", ), ), ;, private, final, Set, <, String, >, quotedNames, =]
[>, quotedNames, =, new, HashSet, <, String, >, (, ), ;, private, static, final, Comparator, <, Property, >, FREQUENCY_COMPARATOR, =]
[Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (]
[Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (]
[Property, >, (, ), {, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (]
[{, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=]
[{, @, Override, public, int, compare, (, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=]
[(, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return]
[(, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return]
[(, Property, p1, ,, Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return]
[Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -]
[Property, p2, ), {, if, (, p1, ., numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -]
[numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (]
[numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (]
[numOccurrences, !=, p2, ., numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (]
[numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=]
[numOccurrences, ), {, return, p2, ., numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=]
[numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return]
[numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return]
[numOccurrences, -, p1, ., numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return]
[numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -]
[numOccurrences, ;, }, else, if, (, p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -]
[p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return]
[p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return]
[p1, ., affinityScore, !=, p2, ., affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return]
[affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (]
[affinityScore, ), {, return, p2, ., affinityScore, -, p1, ., affinityScore, ;, }, return, p1, ., oldName, ., compareTo, (]
[return, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), ;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =]
[p2, ., oldName, ), ;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =]
[p2, ., oldName, ), ;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =]
[;, }, }, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (]
[}, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,]
[}, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,]
[}, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,]
[}, ;, static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,]
[static, final, String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +]
[String, RENAME_PROPERTY_FUNCTION_NAME, =, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +]
[=, "JSCompiler_renameProperty", ;, static, final, DiagnosticType, BAD_CALL, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +]
[DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =]
[DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =]
["JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,]
["Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,]
[RENAME_PROPERTY_FUNCTION_NAME, +, " call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +]
[" call - ", +, "argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +]
["argument must be a string literal", ), ;, static, final, DiagnosticType, BAD_ARG, =, DiagnosticType, ., error, (, "JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG", ,, "Bad ", +, RENAME_PROPERTY_FUNCTION_NAME, +, " argument - ", +]
[+, " argument - ", +, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (]
[+, "'{0}' is not a valid JavaScript identifier", ), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,]
[), ;, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,, affinity, ,]
[RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,, affinity, ,, generatePseudoNames, ,]
[AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ), {, this, (, compiler, ,, affinity, ,, generatePseudoNames, ,, null, ,]
[), ;, }, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ), {, this, (]
[}, RenameProperties, (, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ), {, this, (, compiler, ,]
[(, AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ), {, this, (, compiler, ,, affinity, ,]
[compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ), {, this, (, compiler, ,, affinity, ,, generatePseudoNames, ,]
[boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ), {, this, (, compiler, ,, affinity, ,, generatePseudoNames, ,, prevUsedPropertyMap, ,]
[AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ,, @, Nullable, char, [, ], reservedCharacters, ), {]
[AbstractCompiler, compiler, ,, boolean, affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ,, @, Nullable, char, [, ], reservedCharacters, ), {]
[affinity, ,, boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., compiler, =]
[boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., compiler, =, compiler, ;]
[boolean, generatePseudoNames, ,, VariableMap, prevUsedPropertyMap, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., compiler, =, compiler, ;]
[prevUsedPropertyMap, ,, @, Nullable, char, [, ], reservedCharacters, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =]
[@, Nullable, char, [, ], reservedCharacters, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;]
[@, Nullable, char, [, ], reservedCharacters, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;]
[], reservedCharacters, ), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =]
[), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;]
[), {, this, ., compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;]
[compiler, =, compiler, ;, this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =]
[this, ., generatePseudoNames, =, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (]
[=, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {]
[=, generatePseudoNames, ;, this, ., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {]
[., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =]
[., prevUsedPropertyMap, =, prevUsedPropertyMap, ;, this, ., reservedCharacters, =, reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =]
[reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else, {]
[reservedCharacters, ;, if, (, affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else, {]
[affinity, ), {, this, ., affinityGraph, =, LinkedUndirectedGraph, ., createWithoutAnnotations, (, ), ;, }, else, {, this, ., affinityGraph, =]
[., affinityGraph, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., affinityGraph, =, null, ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, Preconditions, ., checkState, (]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[,, Node, root, ), {, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;]
[{, Preconditions, ., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (]
[., checkState, (, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[(, compiler, ., getLifeCycleStage, (, ), ., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;]
[., isNormalized, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;]
[), ;, NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (]
[NodeTraversal, ., traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,]
[traverse, (, compiler, ,, externs, ,, new, ProcessExterns, (, ), ), ;, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =]
[root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[root, ,, new, ProcessProperties, (, ), ), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (]
[), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +]
[), ;, Set, <, String, >, reservedNames, =, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +]
[=, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;]
[=, new, HashSet, <, String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;]
[String, >, (, externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (]
[externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;]
[externedNames, ., size, (, ), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;]
[), +, quotedNames, ., size, (, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (]
[(, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (]
[(, ), ), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (]
[), ;, reservedNames, ., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=]
[., addAll, (, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {]
[(, externedNames, ), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (]
[), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,]
[), ;, reservedNames, ., addAll, (, quotedNames, ), ;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,]
[;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }]
[;, if, (, prevUsedPropertyMap, !=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }]
[!=, null, ), {, reusePropertyNames, (, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (]
[(, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (]
[(, reservedNames, ,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (]
[,, propertyMap, ., values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (, affinityGraph, !=]
[values, (, ), ), ;, }, compiler, ., addToDebugLog, (, "JS property assignments:", ), ;, if, (, affinityGraph, !=, null, ), {]
[), ;, if, (, affinityGraph, !=, null, ), {, computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =]
[null, ), {, computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (]
[computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;]
[computeAffinityScores, (, ), ;, }, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;]
[}, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, propsByFreq, ., addAll, (]
[}, Set, <, Property, >, propsByFreq, =, new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, propsByFreq, ., addAll, (]
[new, TreeSet, <, Property, >, (, FREQUENCY_COMPARATOR, ), ;, propsByFreq, ., addAll, (, propertyMap, ., values, (, ), ), ;]
[<, Property, >, (, FREQUENCY_COMPARATOR, ), ;, propsByFreq, ., addAll, (, propertyMap, ., values, (, ), ), ;, generateNames, (]
[>, (, FREQUENCY_COMPARATOR, ), ;, propsByFreq, ., addAll, (, propertyMap, ., values, (, ), ), ;, generateNames, (, propsByFreq, ,]
[., addAll, (, propertyMap, ., values, (, ), ), ;, generateNames, (, propsByFreq, ,, reservedNames, ), ;, boolean, changed, =]
[), ), ;, generateNames, (, propsByFreq, ,, reservedNames, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :]
[,, reservedNames, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =]
[,, reservedNames, ), ;, boolean, changed, =, false, ;, for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =]
[for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =]
[for, (, Node, n, :, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =]
[:, stringNodesToRename, ), {, String, oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (]
[oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (]
[oldName, =, n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (]
[n, ., getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=]
[getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&]
[getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&]
[getString, (, ), ;, Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&]
[Property, p, =, propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=]
[propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {]
[propertyMap, ., get, (, oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {]
[oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (]
[oldName, ), ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (]
[(, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (]
[(, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (]
[., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;]
[., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, n, ., setString, (]
[), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, n, ., setString, (]
[(, oldName, ., equals, (, p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;]
[., equals, (, p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =]
[., equals, (, p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =]
[(, p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||]
[p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !]
[p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !]
[p, ., oldName, ), ), ;, n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !]
[n, ., setString, (, p, ., newName, ), ;, changed, =, changed, ||, !, p, ., newName, ., equals, (]
[., equals, (, oldName, ), ;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :]
[., equals, (, oldName, ), ;, }, }, for, (, Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :]
[Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :, callNodeToParentMap, ., entrySet, (, ), ), {, Node, parent, =]
[Map, ., Entry, <, Node, ,, Node, >, nodeEntry, :, callNodeToParentMap, ., entrySet, (, ), ), {, Node, parent, =]
[:, callNodeToParentMap, ., entrySet, (, ), ), {, Node, parent, =, nodeEntry, ., getValue, (, ), ;, Node, firstArg, =]
[:, callNodeToParentMap, ., entrySet, (, ), ), {, Node, parent, =, nodeEntry, ., getValue, (, ), ;, Node, firstArg, =]
[:, callNodeToParentMap, ., entrySet, (, ), ), {, Node, parent, =, nodeEntry, ., getValue, (, ), ;, Node, firstArg, =]
[:, callNodeToParentMap, ., entrySet, (, ), ), {, Node, parent, =, nodeEntry, ., getValue, (, ), ;, Node, firstArg, =]
[Node, firstArg, =, nodeEntry, ., getKey, (, ), ., getFirstChild, (, ), ., getNext, (, ), ;, StringBuilder, sb, =]
[(, ), ., getNext, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, String, oldName, :]
[(, ), ., getNext, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, String, oldName, :]
[(, ), ., getNext, (, ), ;, StringBuilder, sb, =, new, StringBuilder, (, ), ;, for, (, String, oldName, :]
[sb, =, new, StringBuilder, (, ), ;, for, (, String, oldName, :, firstArg, ., getString, (, ), ., split, (]
[for, (, String, oldName, :, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, Property, p, =]
[for, (, String, oldName, :, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, Property, p, =]
[:, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, Property, p, =, propertyMap, ., get, (]
[(, "[.]", ), ), {, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (]
[(, "[.]", ), ), {, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (]
[(, "[.]", ), ), {, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (]
[), ), {, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=]
[{, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=, null, &&]
[{, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=, null, &&]
[{, Property, p, =, propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=, null, &&]
[propertyMap, ., get, (, oldName, ), ;, String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=]
[(, oldName, ), ;, String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {]
[(, oldName, ), ;, String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {]
[String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (]
[String, replacement, ;, if, (, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (]
[(, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (]
[(, p, !=, null, &&, p, ., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (]
[., newName, !=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;]
[!=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =]
[!=, null, ), {, Preconditions, ., checkState, (, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =]
[(, oldName, ., equals, (, p, ., oldName, ), ), ;, replacement, =, p, ., newName, ;, }, else, {]
[., equals, (, p, ., oldName, ), ), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =]
[oldName, ), ), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (]
[oldName, ), ), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (]
[oldName, ), ), ;, replacement, =, p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (]
[p, ., newName, ;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, ., length, (, ), >]
[;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, ., length, (, ), >, 0, ), {]
[;, }, else, {, replacement, =, oldName, ;, }, if, (, sb, ., length, (, ), >, 0, ), {]
[replacement, =, oldName, ;, }, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (]
[}, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (, '.', ), ;, }]
[}, if, (, sb, ., length, (, ), >, 0, ), {, sb, ., append, (, '.', ), ;, }]
[., length, (, ), >, 0, ), {, sb, ., append, (, '.', ), ;, }, sb, ., append, (]
[>, 0, ), {, sb, ., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }]
[>, 0, ), {, sb, ., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }]
[sb, ., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }, parent, ., replaceChild, (]
[sb, ., append, (, '.', ), ;, }, sb, ., append, (, replacement, ), ;, }, parent, ., replaceChild, (]
[;, }, sb, ., append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,]
[;, }, sb, ., append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,]
[append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string, (]
[append, (, replacement, ), ;, }, parent, ., replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string, (]
[replaceChild, (, nodeEntry, ., getKey, (, ), ,, IR, ., string, (, sb, ., toString, (, ), ), ), ;]
[nodeEntry, ., getKey, (, ), ,, IR, ., string, (, sb, ., toString, (, ), ), ), ;, changed, =]
[,, IR, ., string, (, sb, ., toString, (, ), ), ), ;, changed, =, true, ;, }, if, (]
[string, (, sb, ., toString, (, ), ), ), ;, changed, =, true, ;, }, if, (, changed, ), {]
[string, (, sb, ., toString, (, ), ), ), ;, changed, =, true, ;, }, if, (, changed, ), {]
[), ), ;, changed, =, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[), ), ;, changed, =, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }]
[=, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (]
[=, true, ;, }, if, (, changed, ), {, compiler, ., reportCodeChange, (, ), ;, }, compiler, ., setLifeCycleStage, (]
[reusePropertyNames, (, Set, <, String, >, reservedNames, ,, Collection, <, Property, >, allProps, ), {, for, (, Property, prop, :]
[reservedNames, ,, Collection, <, Property, >, allProps, ), {, for, (, Property, prop, :, allProps, ), {, String, prevName, =]
[reservedNames, ,, Collection, <, Property, >, allProps, ), {, for, (, Property, prop, :, allProps, ), {, String, prevName, =]
[Property, >, allProps, ), {, for, (, Property, prop, :, allProps, ), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (]
[Property, >, allProps, ), {, for, (, Property, prop, :, allProps, ), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (]
[Property, prop, :, allProps, ), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (]
[Property, prop, :, allProps, ), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (]
[prop, :, allProps, ), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, !]
[allProps, ), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, !, generatePseudoNames, &&]
[allProps, ), {, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, !, generatePseudoNames, &&]
[{, String, prevName, =, prevUsedPropertyMap, ., lookupNewName, (, prop, ., oldName, ), ;, if, (, !, generatePseudoNames, &&, prevName, !=]
[., lookupNewName, (, prop, ., oldName, ), ;, if, (, !, generatePseudoNames, &&, prevName, !=, null, ), {, if, (]
[., lookupNewName, (, prop, ., oldName, ), ;, if, (, !, generatePseudoNames, &&, prevName, !=, null, ), {, if, (]
[., oldName, ), ;, if, (, !, generatePseudoNames, &&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (]
[generatePseudoNames, &&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }]
[generatePseudoNames, &&, prevName, !=, null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }]
[null, ), {, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =]
[{, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;]
[{, if, (, reservedNames, ., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;]
[., contains, (, prevName, ), ), {, continue, ;, }, prop, ., newName, =, prevName, ;, reservedNames, ., add, (]
[., add, (, prevName, ), ;, }, }, }, private, void, computeAffinityScores, (, ), {, for, (, Property, p, :]
[., add, (, prevName, ), ;, }, }, }, private, void, computeAffinityScores, (, ), {, for, (, Property, p, :]
[for, (, Property, p, :, propertyMap, ., values, (, ), ), {, UndiGraphNode, <, Property, ,, PropertyAffinity, >, node, =]
[for, (, Property, p, :, propertyMap, ., values, (, ), ), {, UndiGraphNode, <, Property, ,, PropertyAffinity, >, node, =]
[:, propertyMap, ., values, (, ), ), {, UndiGraphNode, <, Property, ,, PropertyAffinity, >, node, =, affinityGraph, ., getUndirectedGraphNode, (]
[), {, UndiGraphNode, <, Property, ,, PropertyAffinity, >, node, =, affinityGraph, ., getUndirectedGraphNode, (, p, ), ;, int, affinityScore, =]
[), ;, int, affinityScore, =, 0, ;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, >, edgeIterator, =]
[), ;, int, affinityScore, =, 0, ;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, >, edgeIterator, =]
[;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, >, edgeIterator, =, node, ., getNeighborEdgesIterator, (, ), ;]
[;, for, (, Iterator, <, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, >, edgeIterator, =, node, ., getNeighborEdgesIterator, (, ), ;]
[getNeighborEdgesIterator, (, ), ;, edgeIterator, ., hasNext, (, ), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =]
[getNeighborEdgesIterator, (, ), ;, edgeIterator, ., hasNext, (, ), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =]
[hasNext, (, ), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next, (, ), ;]
[), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=]
[), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=]
[), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=]
[), ;, ), {, UndiGraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=]
[PropertyAffinity, >, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +]
[>, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (]
[>, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (]
[>, edge, =, edgeIterator, ., next, (, ), ;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (]
[=, edgeIterator, ., next, (, ), ;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==]
[=, edgeIterator, ., next, (, ), ;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==]
[;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?]
[;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?]
[;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?]
[;, affinityScore, +=, edge, ., getValue, (, ), ., affinity, +, (, node, ==, edge, ., getNodeA, (, ), ?]
[node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :]
[node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :]
[node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :]
[node, ==, edge, ., getNodeA, (, ), ?, edge, ., getNodeB, (, ), ., getValue, (, ), ., numOccurrences, :]
[getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;, }]
[getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;, }]
[getValue, (, ), ., numOccurrences, :, edge, ., getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;, }]
[getNodeA, (, ), ., getValue, (, ), ., numOccurrences, ), ;, }, node, ., getValue, (, ), ., affinityScore, =]
[private, void, generateNames, (, Set, <, Property, >, props, ,, Set, <, String, >, reservedNames, ), {, NameGenerator, nameGen, =]
[(, Set, <, Property, >, props, ,, Set, <, String, >, reservedNames, ), {, NameGenerator, nameGen, =, new, NameGenerator, (]
[<, Property, >, props, ,, Set, <, String, >, reservedNames, ), {, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,]
[>, props, ,, Set, <, String, >, reservedNames, ), {, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,]
[), {, NameGenerator, nameGen, =, new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, for, (, Property, p, :]
[new, NameGenerator, (, reservedNames, ,, "", ,, reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (]
[reservedNames, ,, "", ,, reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {]
[reservedNames, ,, "", ,, reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {]
[reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =]
[reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =]
[reservedCharacters, ), ;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =]
[;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =, "$", +]
[;, for, (, Property, p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =, "$", +]
[p, :, props, ), {, if, (, generatePseudoNames, ), {, p, ., newName, =, "$", +, p, ., oldName, +]
[generatePseudoNames, ), {, p, ., newName, =, "$", +, p, ., oldName, +, "$", ;, }, else, {, if, (]
[generatePseudoNames, ), {, p, ., newName, =, "$", +, p, ., oldName, +, "$", ;, }, else, {, if, (]
[generatePseudoNames, ), {, p, ., newName, =, "$", +, p, ., oldName, +, "$", ;, }, else, {, if, (]
[., newName, =, "$", +, p, ., oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==]
["$", +, p, ., oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {]
["$", +, p, ., oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {]
[oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {, p, ., newName, =]
[oldName, +, "$", ;, }, else, {, if, (, p, ., newName, ==, null, ), {, p, ., newName, =]
[(, p, ., newName, ==, null, ), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }]
[(, p, ., newName, ==, null, ), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }]
[==, null, ), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (]
[==, null, ), {, p, ., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (]
[., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;]
[., newName, =, nameGen, ., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;]
[., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (]
[., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (]
[., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (]
[., generateNextName, (, ), ;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (]
[;, }, }, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (, p, ., oldName, +]
[}, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (, p, ., oldName, +, " => ", +]
[}, reservedNames, ., add, (, p, ., newName, ), ;, compiler, ., addToDebugLog, (, p, ., oldName, +, " => ", +]
[newName, ), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[newName, ), ;, }, }, VariableMap, getPropertyMap, (, ), {, ImmutableMap, ., Builder, <, String, ,, String, >, map, =]
[., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :]
[., Builder, <, String, ,, String, >, map, =, ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :]
[ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (]
[ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (]
[ImmutableMap, ., builder, (, ), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (]
[), ;, for, (, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, p, ., newName, !=]
[(, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {]
[(, Property, p, :, propertyMap, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {]
[propertyMap, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (]
[propertyMap, ., values, (, ), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (]
[), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,]
[), ), {, if, (, p, ., newName, !=, null, ), {, map, ., put, (, p, ., oldName, ,]
[!=, null, ), {, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return]
[{, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (]
[{, map, ., put, (, p, ., oldName, ,, p, ., newName, ), ;, }, }, return, new, VariableMap, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[AbstractPostOrderCallback, {, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, dest, =]
[case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETPROP, :, Node, dest, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {]
[(, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, externedNames, ., add, (]
[(, ), ., getNext, (, ), ;, if, (, dest, ., isString, (, ), ), {, externedNames, ., add, (]
[isString, (, ), ), {, externedNames, ., add, (, dest, ., getString, (, ), ), ;, }, break, ;, case]
[isString, (, ), ), {, externedNames, ., add, (, dest, ., getString, (, ), ), ;, }, break, ;, case]
[dest, ., getString, (, ), ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =]
[dest, ., getString, (, ), ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;]
[break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=]
[case, Token, ., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;]
[., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[., OBJECTLIT, :, for, (, Node, child, =, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[=, n, ., getFirstChild, (, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (]
[(, ), ;, child, !=, null, ;, child, =, child, ., getNext, (, ), ), {, externedNames, ., add, (]
[break, ;, }, }, }, private, class, ProcessProperties, extends, AbstractPostOrderCallback, implements, ScopedCallback, {, private, Set, <, Property, >, currentHighAffinityProperties, =]
[null, ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[null, ;, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, switch, (, n, ., getType, (, ), ), {, case]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =]
[parent, ), {, switch, (, n, ., getType, (, ), ), {, case, Token, ., GETPROP, :, Node, propNode, =]
[case, Token, ., GETPROP, :, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[case, Token, ., GETPROP, :, Node, propNode, =, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[=, n, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, propNode, ., isString, (, ), ), {]
[., getFirstChild, (, ), ., getNext, (, ), ;, if, (, propNode, ., isString, (, ), ), {, maybeMarkCandidate, (]
[), ;, if, (, propNode, ., isString, (, ), ), {, maybeMarkCandidate, (, propNode, ), ;, }, break, ;, case]
[), ;, if, (, propNode, ., isString, (, ), ), {, maybeMarkCandidate, (, propNode, ), ;, }, break, ;, case]
[), {, maybeMarkCandidate, (, propNode, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[), {, maybeMarkCandidate, (, propNode, ), ;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[;, }, break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;]
[break, ;, case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=]
[case, Token, ., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., OBJECTLIT, :, for, (, Node, key, =, n, ., getFirstChild, (, ), ;, key, !=, null, ;, key, =]
[., getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !]
[getFirstChild, (, ), ;, key, !=, null, ;, key, =, key, ., getNext, (, ), ), {, if, (, !]
[;, key, =, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {]
[=, key, ., getNext, (, ), ), {, if, (, !, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (]
[), {, if, (, !, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (, key, ), ;, }, else, {]
[), {, if, (, !, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (, key, ), ;, }, else, {]
[!, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (, key, ), ;, }, else, {, quotedNames, ., add, (]
[!, key, ., isQuotedString, (, ), ), {, maybeMarkCandidate, (, key, ), ;, }, else, {, quotedNames, ., add, (]
[;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case]
[;, }, else, {, quotedNames, ., add, (, key, ., getString, (, ), ), ;, }, }, break, ;, case]
[(, key, ., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =]
[(, key, ., getString, (, ), ), ;, }, }, break, ;, case, Token, ., GETELEM, :, Node, child, =]
[}, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (]
[}, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (]
[}, }, break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (]
[break, ;, case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, !=]
[case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, !=, null, &&]
[case, Token, ., GETELEM, :, Node, child, =, n, ., getLastChild, (, ), ;, if, (, child, !=, null, &&]
[=, n, ., getLastChild, (, ), ;, if, (, child, !=, null, &&, child, ., isString, (, ), ), {]
[=, n, ., getLastChild, (, ), ;, if, (, child, !=, null, &&, child, ., isString, (, ), ), {]
[(, ), ;, if, (, child, !=, null, &&, child, ., isString, (, ), ), {, quotedNames, ., add, (]
[(, ), ;, if, (, child, !=, null, &&, child, ., isString, (, ), ), {, quotedNames, ., add, (]
[isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;, case]
[isString, (, ), ), {, quotedNames, ., add, (, child, ., getString, (, ), ), ;, }, break, ;, case]
[add, (, child, ., getString, (, ), ), ;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =]
[add, (, child, ., getString, (, ), ), ;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =]
[;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (]
[;, }, break, ;, case, Token, ., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (]
[., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (, fnName, ., isName, (, ), &&]
[., CALL, :, Node, fnName, =, n, ., getFirstChild, (, ), ;, if, (, fnName, ., isName, (, ), &&]
[fnName, =, n, ., getFirstChild, (, ), ;, if, (, fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[fnName, =, n, ., getFirstChild, (, ), ;, if, (, fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[if, (, fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), ), ), {]
[if, (, fnName, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), ), ), {]
[isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), ), ), {, callNodeToParentMap, ., put, (]
[), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, fnName, ., getString, (, ), ), ), {, callNodeToParentMap, ., put, (, n, ,]
[., equals, (, fnName, ., getString, (, ), ), ), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;]
[(, fnName, ., getString, (, ), ), ), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (]
[., getString, (, ), ), ), {, callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,]
[callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case]
[callNodeToParentMap, ., put, (, n, ,, parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case]
[parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[parent, ), ;, countCallCandidates, (, t, ,, n, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (]
[(, t, ,, n, ), ;, }, break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (]
[break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =]
[break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =]
[break, ;, case, Token, ., FUNCTION, :, if, (, NodeUtil, ., isFunctionDeclaration, (, n, ), ), {, String, name, =]
[(, n, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[(, n, ), ), {, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (]
[{, String, name, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[getFirstChild, (, ), ., getString, (, ), ;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, ), ), {, if, (]
[getFirstChild, (, ), ., getString, (, ), ;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, ), ), {, if, (]
[;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, ), ), {, if, (, parent, ., isExprResult, (, ), ), {]
[;, if, (, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, name, ), ), {, if, (, parent, ., isExprResult, (, ), ), {]
[), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., detachFromParent, (, ), ;, }, else, {]
[), {, if, (, parent, ., isExprResult, (, ), ), {, parent, ., detachFromParent, (, ), ;, }, else, {]
[parent, ., isExprResult, (, ), ), {, parent, ., detachFromParent, (, ), ;, }, else, {, parent, ., removeChild, (]
[), ), {, parent, ., detachFromParent, (, ), ;, }, else, {, parent, ., removeChild, (, n, ), ;, }]
[), ), {, parent, ., detachFromParent, (, ), ;, }, else, {, parent, ., removeChild, (, n, ), ;, }]
[{, parent, ., removeChild, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[{, parent, ., removeChild, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[{, parent, ., removeChild, (, n, ), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, ., isName, (, ), &&]
[), ;, }, compiler, ., reportCodeChange, (, ), ;, }, }, else, if, (, parent, ., isName, (, ), &&]
[., reportCodeChange, (, ), ;, }, }, else, if, (, parent, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[., reportCodeChange, (, ), ;, }, }, else, if, (, parent, ., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (]
[., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, parent, ., getString, (, ), ), ), {, Node, varNode, =]
[., isName, (, ), &&, RENAME_PROPERTY_FUNCTION_NAME, ., equals, (, parent, ., getString, (, ), ), ), {, Node, varNode, =]
[(, parent, ., getString, (, ), ), ), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (]
[(, parent, ., getString, (, ), ), ), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (]
[), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (, varNode, ., isVar, (, ), ), {]
[), {, Node, varNode, =, parent, ., getParent, (, ), ;, if, (, varNode, ., isVar, (, ), ), {]
[=, parent, ., getParent, (, ), ;, if, (, varNode, ., isVar, (, ), ), {, varNode, ., removeChild, (]
[), ;, if, (, varNode, ., isVar, (, ), ), {, varNode, ., removeChild, (, parent, ), ;, if, (]
[;, if, (, varNode, ., isVar, (, ), ), {, varNode, ., removeChild, (, parent, ), ;, if, (, !]
[;, if, (, varNode, ., isVar, (, ), ), {, varNode, ., removeChild, (, parent, ), ;, if, (, !]
[), ), {, varNode, ., removeChild, (, parent, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {]
[), ), {, varNode, ., removeChild, (, parent, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {]
[parent, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, varNode, ., detachFromParent, (, ), ;, }]
[parent, ), ;, if, (, !, varNode, ., hasChildren, (, ), ), {, varNode, ., detachFromParent, (, ), ;, }]
[(, ), ;, }, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n, ), {, String, name, =]
[(, ), ;, }, }, break, ;, }, }, private, void, maybeMarkCandidate, (, Node, n, ), {, String, name, =]
[}, private, void, maybeMarkCandidate, (, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[private, void, maybeMarkCandidate, (, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (, !]
[private, void, maybeMarkCandidate, (, Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (, !]
[Node, n, ), {, String, name, =, n, ., getString, (, ), ;, if, (, !, externedNames, ., contains, (]
[String, name, =, n, ., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {]
[String, name, =, n, ., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {]
[., getString, (, ), ;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (]
[), ;, if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;]
[if, (, !, externedNames, ., contains, (, name, ), ), {, stringNodesToRename, ., add, (, n, ), ;, countPropertyOccurrence, (]
[(, name, ), ;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,, Node, callNode, ), {, Node, firstArg, =]
[(, name, ), ;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,, Node, callNode, ), {, Node, firstArg, =]
[(, name, ), ;, }, }, private, void, countCallCandidates, (, NodeTraversal, t, ,, Node, callNode, ), {, Node, firstArg, =]
[,, Node, callNode, ), {, Node, firstArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (]
[Node, callNode, ), {, Node, firstArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[Node, callNode, ), {, Node, firstArg, =, callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !]
[callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, firstArg, ., isString, (, ), ), {]
[callNode, ., getFirstChild, (, ), ., getNext, (, ), ;, if, (, !, firstArg, ., isString, (, ), ), {]
[), ., getNext, (, ), ;, if, (, !, firstArg, ., isString, (, ), ), {, t, ., report, (]
[getNext, (, ), ;, if, (, !, firstArg, ., isString, (, ), ), {, t, ., report, (, callNode, ,]
[), ), {, t, ., report, (, callNode, ,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :]
[), ), {, t, ., report, (, callNode, ,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :]
[), ), {, t, ., report, (, callNode, ,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :]
[,, BAD_CALL, ), ;, return, ;, }, for, (, String, name, :, firstArg, ., getString, (, ), ., split, (]
[}, for, (, String, name, :, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, if, (]
[for, (, String, name, :, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, if, (, !]
[for, (, String, name, :, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, if, (, !]
[:, firstArg, ., getString, (, ), ., split, (, "[.]", ), ), {, if, (, !, TokenStream, ., isJSIdentifier, (]
[(, ), ., split, (, "[.]", ), ), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {]
[(, ), ., split, (, "[.]", ), ), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {]
[(, "[.]", ), ), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, t, ., report, (]
[), ), {, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, t, ., report, (, callNode, ,]
[{, if, (, !, TokenStream, ., isJSIdentifier, (, name, ), ), {, t, ., report, (, callNode, ,, BAD_ARG, ,]
[name, ), ), {, t, ., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (]
[), ), {, t, ., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !]
[), ), {, t, ., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !]
[., report, (, callNode, ,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !, externedNames, ., contains, (]
[,, BAD_ARG, ,, name, ), ;, continue, ;, }, if, (, !, externedNames, ., contains, (, name, ), ), {]
[,, name, ), ;, continue, ;, }, if, (, !, externedNames, ., contains, (, name, ), ), {, countPropertyOccurrence, (]
[{, countPropertyOccurrence, (, name, ), ;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop, =]
[{, countPropertyOccurrence, (, name, ), ;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop, =]
[), ;, }, }, }, private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (]
[private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (]
[private, void, countPropertyOccurrence, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (]
[countPropertyOccurrence, (, String, name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (, prop, ==]
[name, ), {, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (, prop, ==, null, ), {]
[{, Property, prop, =, propertyMap, ., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =]
[=, propertyMap, ., get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (]
[get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;]
[get, (, name, ), ;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;]
[;, if, (, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (]
[(, prop, ==, null, ), {, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,]
[{, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (]
[{, prop, =, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (]
[=, new, Property, (, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=]
[(, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=, null, ), {]
[(, name, ), ;, propertyMap, ., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=, null, ), {]
[propertyMap, ., put, (, name, ,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (]
[,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }]
[,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }]
[,, prop, ), ;, if, (, affinityGraph, !=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }]
[!=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (]
[!=, null, ), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (]
[), {, affinityGraph, ., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=]
[., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=, null, ), {]
[., createNode, (, prop, ), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=, null, ), {]
[), ;, }, }, prop, ., numOccurrences, ++, ;, if, (, currentHighAffinityProperties, !=, null, ), {, currentHighAffinityProperties, ., add, (]
[., add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[., add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (]
[add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !]
[add, (, prop, ), ;, }, }, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), &&]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), &&]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), &&]
[}, @, Override, public, void, enterScope, (, NodeTraversal, t, ), {, if, (, !, t, ., inGlobalScope, (, ), &&]
[., inGlobalScope, (, ), &&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {]
[(, ), &&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, currentHighAffinityProperties, =]
[(, ), &&, t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, currentHighAffinityProperties, =]
[Sets, ., newHashSet, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[Sets, ., newHashSet, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (]
[newHashSet, (, ), ;, }, }, @, Override, public, void, exitScope, (, NodeTraversal, t, ), {, if, (, affinityGraph, ==]
[public, void, exitScope, (, NodeTraversal, t, ), {, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (]
[public, void, exitScope, (, NodeTraversal, t, ), {, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (]
[void, exitScope, (, NodeTraversal, t, ), {, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (, !]
[void, exitScope, (, NodeTraversal, t, ), {, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (, !]
[{, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[{, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[{, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[{, if, (, affinityGraph, ==, null, ), {, return, ;, }, if, (, !, t, ., inGlobalScope, (, ), &&]
[t, ., getScope, (, ), ., getParent, (, ), ., isGlobal, (, ), ), {, for, (, Property, p1, :]
[), ., isGlobal, (, ), ), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :]
[), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (]
[), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (]
[), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (]
[), {, for, (, Property, p1, :, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (]
[:, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (, p1, ., oldName, ., compareTo, (]
[:, currentHighAffinityProperties, ), {, for, (, Property, p2, :, currentHighAffinityProperties, ), {, if, (, p1, ., oldName, ., compareTo, (]
[(, Property, p2, :, currentHighAffinityProperties, ), {, if, (, p1, ., oldName, ., compareTo, (, p2, ., oldName, ), <]
[oldName, ., compareTo, (, p2, ., oldName, ), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =]
[oldName, ., compareTo, (, p2, ., oldName, ), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =]
[p2, ., oldName, ), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (]
[oldName, ), <, 0, ), {, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,]
[{, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if, (]
[{, GraphEdge, <, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if, (]
[<, Property, ,, PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if, (, edge, ==]
[PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if, (, edge, ==, null, ), {]
[PropertyAffinity, >, edge, =, affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if, (, edge, ==, null, ), {]
[affinityGraph, ., getFirstEdge, (, p1, ,, p2, ), ;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (]
[getFirstEdge, (, p1, ,, p2, ), ;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (, p1, ,]
[,, p2, ), ;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (]
[;, if, (, edge, ==, null, ), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,]
[), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }, else, {]
[), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }, else, {]
[), {, affinityGraph, ., connect, (, p1, ,, new, PropertyAffinity, (, 1, ), ,, p2, ), ;, }, else, {]
[p2, ), ;, }, else, {, edge, ., getValue, (, ), ., increase, (, ), ;, }, }, }, }]
[;, }, else, {, edge, ., getValue, (, ), ., increase, (, ), ;, }, }, }, }, currentHighAffinityProperties, =]
[}, }, }, private, class, Property, {, final, String, oldName, ;, String, newName, ;, int, numOccurrences, ;, int, affinityScore, =]
[String, oldName, ;, String, newName, ;, int, numOccurrences, ;, int, affinityScore, =, 0, ;, Property, (, String, name, ), {]
[String, oldName, ;, String, newName, ;, int, numOccurrences, ;, int, affinityScore, =, 0, ;, Property, (, String, name, ), {]
[newName, ;, int, numOccurrences, ;, int, affinityScore, =, 0, ;, Property, (, String, name, ), {, this, ., oldName, =]
[String, name, ), {, this, ., oldName, =, name, ;, }, }, private, class, PropertyAffinity, {, private, int, affinity, =]
[;, }, }, private, class, PropertyAffinity, {, private, int, affinity, =, 0, ;, private, PropertyAffinity, (, int, affinity, ), {]
[;, }, }, private, class, PropertyAffinity, {, private, int, affinity, =, 0, ;, private, PropertyAffinity, (, int, affinity, ), {]
[class, PropertyAffinity, {, private, int, affinity, =, 0, ;, private, PropertyAffinity, (, int, affinity, ), {, this, ., affinity, =]
[private, PropertyAffinity, (, int, affinity, ), {, this, ., affinity, =, affinity, ;, }, private, void, increase, (, ), {]
[private, PropertyAffinity, (, int, affinity, ), {, this, ., affinity, =, affinity, ;, }, private, void, increase, (, ), {]
