[org, ., joda, ., time, ., DurationFieldType, ;, public, class, DecoratedDurationField, extends, BaseDurationField, {, private, static, final, long, serialVersionUID, =]
[=, 8019982251647420015L, ;, private, final, DurationField, iField, ;, public, DecoratedDurationField, (, DurationField, field, ,, DurationFieldType, type, ), {, super, (]
[DurationField, iField, ;, public, DecoratedDurationField, (, DurationField, field, ,, DurationFieldType, type, ), {, super, (, type, ), ;, if, (]
[DurationField, iField, ;, public, DecoratedDurationField, (, DurationField, field, ,, DurationFieldType, type, ), {, super, (, type, ), ;, if, (]
[;, public, DecoratedDurationField, (, DurationField, field, ,, DurationFieldType, type, ), {, super, (, type, ), ;, if, (, field, ==]
[DurationField, field, ,, DurationFieldType, type, ), {, super, (, type, ), ;, if, (, field, ==, null, ), {, throw]
[DurationFieldType, type, ), {, super, (, type, ), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (]
[type, ), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (]
[), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !]
[), ;, if, (, field, ==, null, ), {, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !]
[{, throw, new, IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !, field, ., isSupported, (, ), ), {, throw]
[IllegalArgumentException, (, "The field must not be null", ), ;, }, if, (, !, field, ., isSupported, (, ), ), {, throw, new, IllegalArgumentException, (]
[;, }, if, (, !, field, ., isSupported, (, ), ), {, throw, new, IllegalArgumentException, (, "The field must be supported", ), ;, }]
[if, (, !, field, ., isSupported, (, ), ), {, throw, new, IllegalArgumentException, (, "The field must be supported", ), ;, }, iField, =]
[new, IllegalArgumentException, (, "The field must be supported", ), ;, }, iField, =, field, ;, }, public, final, DurationField, getWrappedField, (, ), {, return]
[;, }, public, final, DurationField, getWrappedField, (, ), {, return, iField, ;, }, public, boolean, isPrecise, (, ), {, return]
[;, }, public, final, DurationField, getWrappedField, (, ), {, return, iField, ;, }, public, boolean, isPrecise, (, ), {, return]
[return, iField, ., isPrecise, (, ), ;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return]
[return, iField, ., isPrecise, (, ), ;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return]
[(, ), ;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return, iField, ., getValueAsLong, (]
[;, }, public, long, getValueAsLong, (, long, duration, ,, long, instant, ), {, return, iField, ., getValueAsLong, (, duration, ,]
[getValueAsLong, (, duration, ,, instant, ), ;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return]
[getValueAsLong, (, duration, ,, instant, ), ;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return]
[instant, ), ;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return, iField, ., getMillis, (]
[;, }, public, long, getMillis, (, int, value, ,, long, instant, ), {, return, iField, ., getMillis, (, value, ,]
[getMillis, (, value, ,, instant, ), ;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return]
[getMillis, (, value, ,, instant, ), ;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return]
[instant, ), ;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return, iField, ., getMillis, (]
[;, }, public, long, getMillis, (, long, value, ,, long, instant, ), {, return, iField, ., getMillis, (, value, ,]
[getMillis, (, value, ,, instant, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[getMillis, (, value, ,, instant, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return]
[instant, ), ;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iField, ., add, (]
[;, }, public, long, add, (, long, instant, ,, int, value, ), {, return, iField, ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return]
[value, ), ;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iField, ., add, (]
[;, }, public, long, add, (, long, instant, ,, long, value, ), {, return, iField, ., add, (, instant, ,]
[add, (, instant, ,, value, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[add, (, instant, ,, value, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return]
[value, ), ;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifferenceAsLong, (]
[;, }, public, long, getDifferenceAsLong, (, long, minuendInstant, ,, long, subtrahendInstant, ), {, return, iField, ., getDifferenceAsLong, (, minuendInstant, ,]
[), {, return, iField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getUnitMillis, (, ), {, return]
[), {, return, iField, ., getDifferenceAsLong, (, minuendInstant, ,, subtrahendInstant, ), ;, }, public, long, getUnitMillis, (, ), {, return]
