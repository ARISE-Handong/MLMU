[;, private, HorizontalAlignment, horizontalAlignment, ;, private, VerticalAlignment, verticalAlignment, ;, private, double, horizontalGap, ;, private, double, verticalGap, ;, public, FlowArrangement, (]
[,, VerticalAlignment, ., CENTER, ,, 2.0, ,, 2.0, ), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,]
[., CENTER, ,, VerticalAlignment, ., CENTER, ,, 2.0, ,, 2.0, ), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment]
[,, 2.0, ,, 2.0, ), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double]
[., CENTER, ,, 2.0, ,, 2.0, ), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap]
[,, 2.0, ), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, )]
[), ;, }, public, FlowArrangement, (, HorizontalAlignment, hAlign, ,, VerticalAlignment, vAlign, ,, double, hGap, ,, double, vGap, ), {, this]
[=, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap]
[., horizontalAlignment, =, hAlign, ;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap]
[;, this, ., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }]
[=, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (]
[., verticalAlignment, =, vAlign, ;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void]
[;, this, ., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block]
[=, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, )]
[., horizontalGap, =, hGap, ;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object]
[;, this, ., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }]
[=, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D, arrange, (]
[., verticalGap, =, vGap, ;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D]
[;, }, public, void, add, (, Block, block, ,, Object, key, ), {, }, public, Size2D, arrange, (, BlockContainer, container]
[;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if]
[., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, constraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, .]
[;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return]
[., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }]
[., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, )]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, )]
[., NONE, ), {, return, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint]
[,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,]
[), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeNF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented."]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, )]
[., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, .]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, )]
[==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, )]
[., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,]
[), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., NONE, ), {, return, arrangeFN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,]
[), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,]
[), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType]
[==, LengthConstraintType, ., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if]
[), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType]
[., RANGE, ), {, return, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w]
[;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, .]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, )]
[==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,]
[), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, )]
[., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,]
[), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., NONE, ), {, return, arrangeRN, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[==, LengthConstraintType, ., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, .]
[., FIXED, ), {, return, arrangeRF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint]
[,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (]
[,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,]
[), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Unrecognised constraint type.", )]
[==, LengthConstraintType, ., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new]
[), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Unrecognised constraint type.", )]
[., RANGE, ), {, return, arrangeRR, (, container, ,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (]
[;, }, }, throw, new, RuntimeException, (, "Unrecognised constraint type.", ), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2]
[,, g2, ,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Unrecognised constraint type.", ), ;, }, protected, Size2D, arrangeFN, (]
[,, constraint, ), ;, }, }, throw, new, RuntimeException, (, "Unrecognised constraint type.", ), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container]
[), ;, }, }, throw, new, RuntimeException, (, "Unrecognised constraint type.", ), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D]
[;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =, container]
[), ;, }, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, List, blocks, =]
[;, double, width, =, constraint, ., getWidth, (, ), ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;]
[., getBlocks, (, ), ;, double, width, =, constraint, ., getWidth, (, ), ;, double, x, =, 0.0, ;, double]
[;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxHeight, =, 0.0, ;, List, itemsInRow, =, new]
[., getWidth, (, ), ;, double, x, =, 0.0, ;, double, y, =, 0.0, ;, double, maxHeight, =, 0.0, ;]
[;, double, y, =, 0.0, ;, double, maxHeight, =, 0.0, ;, List, itemsInRow, =, new, ArrayList, (, ), ;, for]
[;, double, maxHeight, =, 0.0, ;, List, itemsInRow, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0]
[;, List, itemsInRow, =, new, ArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, blocks, .]
[;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {]
[;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size]
[<, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size]
[., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i]
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block, .]
[++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, Size2D, size, =, block]
[;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +, size]
[;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +, size]
[., get, (, i, ), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), ;, Size2D, size, =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +]
[;, if, (, x, +, size, ., width, <=, width, ), {, itemsInRow, ., add, (, block, ), ;, block]
[., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, if, (, x, +, size, ., width, <=, width, )]
[,, RectangleConstraint, ., NONE, ), ;, if, (, x, +, size, ., width, <=, width, ), {, itemsInRow, ., add]
[), ;, if, (, x, +, size, ., width, <=, width, ), {, itemsInRow, ., add, (, block, ), ;]
[., NONE, ), ;, if, (, x, +, size, ., width, <=, width, ), {, itemsInRow, ., add, (, block]
[), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[<=, width, ), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[+, size, ., width, <=, width, ), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new]
[<=, width, ), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[., width, <=, width, ), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, .]
[), {, itemsInRow, ., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, .]
[., add, (, block, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size]
[), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size]
[;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, size, ., width, ,, size, ., height, )]
[), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (]
[,, y, ,, size, ., width, ,, size, ., height, ), ), ;, x, =, x, +, size, ., width]
[,, size, ., width, ,, size, ., height, ), ), ;, x, =, x, +, size, ., width, +, this]
[,, size, ., height, ), ), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight]
[., width, ,, size, ., height, ), ), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap]
[), ), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max]
[., height, ), ), ;, x, =, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math]
[=, x, +, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size]
[;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (, itemsInRow]
[+, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else]
[+, size, ., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height]
[+, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else]
[., width, +, this, ., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;]
[;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (, itemsInRow]
[., horizontalGap, ;, maxHeight, =, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else, {, if]
[=, Math, ., max, (, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (, itemsInRow, ., isEmpty]
[;, }, else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, .]
[., max, (, maxHeight, ,, size, ., height, ), ;, }, else, {, if, (, itemsInRow, ., isEmpty, (, )]
[,, size, ., height, ), ;, }, else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {, block, .]
[), ;, }, else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D]
[., height, ), ;, }, else, {, if, (, itemsInRow, ., isEmpty, (, ), ), {, block, ., setBounds, (]
[), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size]
[., isEmpty, (, ), ), {, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math]
[;, x, =, 0.0, ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, }, else, {]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,]
[), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, }, else]
[,, y, ,, Math, ., min, (, size, ., width, ,, width, -, x, ), ,, size, ., height, )]
[,, Math, ., min, (, size, ., width, ,, width, -, x, ), ,, size, ., height, ), ), ;]
[,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +, this]
[., min, (, size, ., width, ,, width, -, x, ), ,, size, ., height, ), ), ;, x, =]
[,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +]
[., width, ,, width, -, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =]
[), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +]
[-, x, ), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +, size, .]
[), ,, size, ., height, ), ), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +]
[), ), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, }]
[., height, ), ), ;, x, =, 0.0, ;, y, =, y, +, size, ., height, +, this, ., verticalGap]
[=, 0.0, ;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, .]
[;, y, =, y, +, size, ., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (]
[=, y, +, size, ., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;]
[;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +]
[+, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =]
[+, size, ., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =]
[+, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =]
[., height, +, this, ., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;]
[;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +]
[., verticalGap, ;, }, else, {, itemsInRow, ., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +]
[;, x, =, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height]
[., clear, (, ), ;, x, =, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight]
[=, 0.0, ;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block]
[;, y, =, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds]
[=, y, +, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new]
[;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[+, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[+, maxHeight, +, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, .]
[+, this, ., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (]
[;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,]
[., verticalGap, ;, maxHeight, =, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[=, size, ., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, .]
[;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, .]
[., height, ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (]
[;, x, =, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, y, ,, Math, ., min, (, size, ., width, ,]
[), ;, x, =, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }]
[,, y, ,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, ), ), ;]
[,, Math, ., min, (, size, ., width, ,, width, ), ,, size, ., height, ), ), ;, x, =]
[,, size, ., height, ), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add]
[., min, (, size, ., width, ,, width, ), ,, size, ., height, ), ), ;, x, =, size, .]
[,, width, ), ,, size, ., height, ), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;]
[., width, ,, width, ), ,, size, ., height, ), ), ;, x, =, size, ., width, +, this, .]
[), ,, size, ., height, ), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, .]
[), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;]
[., height, ), ), ;, x, =, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block]
[=, size, ., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }, }, return]
[;, itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, )]
[+, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint]
[., width, +, this, ., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D]
[;, itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, )]
[., horizontalGap, ;, itemsInRow, ., add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth]
[;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,, y, +, maxHeight, ), ;, }]
[., add, (, block, ), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,, y]
[), ;, }, }, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,, y, +, maxHeight, ), ;]
[;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =, arrangeFN]
[,, y, +, maxHeight, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[., getWidth, (, ), ,, y, +, maxHeight, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[+, maxHeight, ), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return, s, ;]
[,, g2, ,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, )]
[,, constraint, ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {]
[), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return, s]
[), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, )]
[., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getHeightRange, (, ), ., contains, (, s, ., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint]
[), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (]
[., height, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (, s]
[;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,]
[., toFixedHeight, (, constraint, ., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return]
[), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container]
[., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, )]
[., getHeightRange, (, ), ., constrain, (, s, ., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer]
[., getHeight, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected]
[;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN, (]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c, ), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeFN]
[;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =, arrangeNN]
[,, g2, ,, constraint, ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, )]
[,, constraint, ), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D]
[), ;, }, protected, Size2D, arrangeRR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;]
[,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1]
[), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, )]
[., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint]
[), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (]
[., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, )]
[;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2]
[), ;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container]
[., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D]
[., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFR, (, container, ,, g2, ,, c, ), ;]
[;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s, =]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c, ), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s, ;]
[,, g2, ,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, )]
[,, constraint, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s]
[), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, )]
[., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getWidthRange, (, ), ., contains, (, s, ., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint]
[), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (]
[., width, ), ), {, return, s, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s]
[;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return]
[), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container]
[., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, )]
[., getWidthRange, (, ), ., constrain, (, s, ., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,]
[), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer]
[., getWidth, (, ), ), ), ;, return, arrangeFF, (, container, ,, g2, ,, c, ), ;, }, }, protected]
[;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1, =]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint]
[,, c, ), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {]
[), ;, }, }, protected, Size2D, arrangeRN, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, s1]
[;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;]
[,, g2, ), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {]
[), ;, if, (, constraint, ., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1]
[), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, )]
[., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, .]
[., getWidthRange, (, ), ., contains, (, s1, ., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint]
[), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (]
[., width, ), ), {, return, s1, ;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, .]
[;, }, else, {, RectangleConstraint, c, =, constraint, ., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, )]
[;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,]
[., toFixedWidth, (, constraint, ., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2]
[), ;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container]
[., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;, }, }, protected, Size2D]
[., getWidthRange, (, ), ., getUpperBound, (, ), ), ;, return, arrangeFN, (, container, ,, g2, ,, c, ), ;]
[;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, x, =, 0.0, ;, double]
[,, g2, ,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double]
[,, c, ), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, x, =]
[), ;, }, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, x, =, 0.0, ;]
[;, double, width, =, 0.0, ;, double, maxHeight, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;]
[;, double, maxHeight, =, 0.0, ;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, .]
[;, List, blocks, =, container, ., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if]
[;, int, blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ]]
[., getBlocks, (, ), ;, int, blockCount, =, blocks, ., size, (, ), ;, if, (, blockCount, >, 0, )]
[;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (]
[., size, (, ), ;, if, (, blockCount, >, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, []
[), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int]
[>, 0, ), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for]
[), {, Size2D, [, ], sizes, =, new, Size2D, [, blocks, ., size, (, ), ], ;, for, (, int]
[;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, )]
[;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, []
[<, blocks, ., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get]
[;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, []
[., size, (, ), ;, i, ++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i]
[), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ], =]
[++, ), {, Block, block, =, (, Block, ), blocks, ., get, (, i, ), ;, sizes, [, i, ]]
[;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width]
[;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width]
[., get, (, i, ), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE]
[), ;, sizes, [, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =]
[=, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, [, i, ]]
[[, i, ], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes]
[], =, block, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, [, i]
[;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (]
[., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, [, i, ], ., getWidth]
[,, RectangleConstraint, ., NONE, ), ;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight]
[), ;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max]
[., NONE, ), ;, width, =, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math]
[=, width, +, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, []
[;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds]
[+, sizes, [, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, [, i, ]]
[;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds]
[., getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, )]
[[, i, ], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height]
[], ., getWidth, (, ), ;, maxHeight, =, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight]
[=, Math, ., max, (, sizes, [, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new]
[;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width]
[., max, (, sizes, [, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, .]
[,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i]
[., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes]
[[, i, ], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,]
[], ., height, ,, maxHeight, ), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,]
[), ;, block, ., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], .]
[;, x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount]
[., setBounds, (, new, Rectangle2D, ., Double, (, x, ,, 0.0, ,, sizes, [, i, ], ., width, ,, sizes]
[), ;, x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (]
[,, 0.0, ,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x]
[,, sizes, [, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x]
[,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +, sizes, [, i, ], ., width]
[., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +, sizes, [, i, ]]
[[, i, ], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +, sizes]
[], ., width, ,, sizes, [, i, ], ., height, ), ), ;, x, =, x, +, sizes, [, i]
[), ), ;, x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if]
[., height, ), ), ;, x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;]
[[, i, ], ., height, ), ), ;, x, =, x, +, sizes, [, i, ], ., width, +, this]
[], ., height, ), ), ;, x, =, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap]
[=, x, +, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1]
[;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -]
[+, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap]
[+, sizes, [, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {]
[+, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap]
[., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this]
[[, i, ], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =]
[], ., width, +, this, ., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +]
[;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -]
[., horizontalGap, ;, }, if, (, blockCount, >, 1, ), {, width, =, width, +, this, ., horizontalGap, *, (]
[), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this]
[>, 1, ), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if]
[), {, width, =, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this]
[=, width, +, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., verticalAlignment, !=]
[;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;]
[+, this, ., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, .]
[;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;]
[*, (, blockCount, -, 1, ), ;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for]
[., horizontalGap, *, (, blockCount, -, 1, ), ;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, )]
[;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;]
[), ;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0]
[-, 1, ), ;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i]
[), ;, }, if, (, this, ., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0]
[), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, )]
[!=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, )]
[., verticalAlignment, !=, VerticalAlignment, ., TOP, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size]
[), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i, ++, )]
[., TOP, ), {, for, (, int, i, =, 0, ;, i, <, blocks, ., size, (, ), ;, i]
[;, i, <, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment]
[;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (]
[<, blocks, ., size, (, ), ;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER]
[;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (]
[., size, (, ), ;, i, ++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {]
[), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (, this, ., verticalAlignment]
[++, ), {, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (, this, .]
[), {, }, else, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }, }, }, }, return]
[==, VerticalAlignment, ., CENTER, ), {, }, else, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }]
[., verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, }, else, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, )]
[), {, }, else, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }, }, }, }, return]
[., CENTER, ), {, }, else, if, (, this, ., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }, }, }]
[), {, }, }, }, }, return, new, Size2D, (, width, ,, maxHeight, ), ;, }, protected, Size2D, arrangeNF, (]
[==, VerticalAlignment, ., BOTTOM, ), {, }, }, }, }, return, new, Size2D, (, width, ,, maxHeight, ), ;, }]
[., verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, }, }, }, }, return, new, Size2D, (, width, ,, maxHeight, )]
[), {, }, }, }, }, return, new, Size2D, (, width, ,, maxHeight, ), ;, }, protected, Size2D, arrangeNF, (]
[., BOTTOM, ), {, }, }, }, }, return, new, Size2D, (, width, ,, maxHeight, ), ;, }, protected, Size2D]
[;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (, container]
[,, maxHeight, ), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return]
[), ;, }, protected, Size2D, arrangeNF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, return, arrangeNN, (]
[;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[,, g2, ), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {]
[), ;, }, public, void, clear, (, ), {, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, FlowArrangement, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, FlowArrangement, ), ), {, return, false, ;, }, FlowArrangement, that, =, (]
[), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=]
[), ), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this, ., horizontalAlignment]
[instanceof, FlowArrangement, ), ), {, return, false, ;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this]
[;, }, FlowArrangement, that, =, (, FlowArrangement, ), obj, ;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, )]
[;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, .]
[;, if, (, this, ., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, .]
[), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;]
[!=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, )]
[., horizontalAlignment, !=, that, ., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;]
[., horizontalAlignment, ), {, return, false, ;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return]
[;, }, if, (, this, ., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;]
[!=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, )]
[., verticalAlignment, !=, that, ., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;]
[., verticalAlignment, ), {, return, false, ;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return]
[;, }, if, (, this, ., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this]
[), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;]
[!=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, )]
[., horizontalGap, !=, that, ., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, .]
[), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;]
[., horizontalGap, ), {, return, false, ;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return]
[;, }, if, (, this, ., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;, }, return, true, ;]
[), {, return, false, ;, }, return, true, ;, }, }]
[!=, that, ., verticalGap, ), {, return, false, ;, }, return, true, ;, }, }]
[., verticalGap, !=, that, ., verticalGap, ), {, return, false, ;, }, return, true, ;, }, }]
[), {, return, false, ;, }, return, true, ;, }, }]
[., verticalGap, ), {, return, false, ;, }, return, true, ;, }, }]
[;, }, return, true, ;, }, }]
[;, }, }]
