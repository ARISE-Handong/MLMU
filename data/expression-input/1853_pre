[commons, ., math3, ., exception, ., TooManyEvaluationsException, ;, public, class, RiddersSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =]
[class, RiddersSolver, extends, AbstractUnivariateSolver, {, private, static, final, double, DEFAULT_ABSOLUTE_ACCURACY, =, 1e-6, ;, public, RiddersSolver, (, ), {, this, (]
[public, RiddersSolver, (, ), {, this, (, DEFAULT_ABSOLUTE_ACCURACY, ), ;, }, public, RiddersSolver, (, double, absoluteAccuracy, ), {, super, (]
[), {, super, (, absoluteAccuracy, ), ;, }, public, RiddersSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (]
[super, (, absoluteAccuracy, ), ;, }, public, RiddersSolver, (, double, relativeAccuracy, ,, double, absoluteAccuracy, ), {, super, (, relativeAccuracy, ,]
[,, absoluteAccuracy, ), ;, }, @, Override, protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NoBracketingException, {, double, min, =]
[protected, double, doSolve, (, ), throws, TooManyEvaluationsException, ,, NoBracketingException, {, double, min, =, getMin, (, ), ;, double, max, =]
[,, NoBracketingException, {, double, min, =, getMin, (, ), ;, double, max, =, getMax, (, ), ;, double, x1, =]
[=, getMin, (, ), ;, double, max, =, getMax, (, ), ;, double, x1, =, min, ;, double, y1, =]
[(, ), ;, double, max, =, getMax, (, ), ;, double, x1, =, min, ;, double, y1, =, computeObjectiveValue, (]
[getMax, (, ), ;, double, x1, =, min, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, x2, =]
[x1, =, min, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, x2, =, max, ;, double, y2, =]
[min, ;, double, y1, =, computeObjectiveValue, (, x1, ), ;, double, x2, =, max, ;, double, y2, =, computeObjectiveValue, (]
[computeObjectiveValue, (, x1, ), ;, double, x2, =, max, ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, if, (]
[computeObjectiveValue, (, x1, ), ;, double, x2, =, max, ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, if, (]
[x1, ), ;, double, x2, =, max, ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, if, (, y1, ==]
[x2, =, max, ;, double, y2, =, computeObjectiveValue, (, x2, ), ;, if, (, y1, ==, 0, ), {, return]
[y2, =, computeObjectiveValue, (, x2, ), ;, if, (, y1, ==, 0, ), {, return, min, ;, }, if, (]
[y2, =, computeObjectiveValue, (, x2, ), ;, if, (, y1, ==, 0, ), {, return, min, ;, }, if, (]
[computeObjectiveValue, (, x2, ), ;, if, (, y1, ==, 0, ), {, return, min, ;, }, if, (, y2, ==]
[;, if, (, y1, ==, 0, ), {, return, min, ;, }, if, (, y2, ==, 0, ), {, return]
[y1, ==, 0, ), {, return, min, ;, }, if, (, y2, ==, 0, ), {, return, max, ;, }]
[0, ), {, return, min, ;, }, if, (, y2, ==, 0, ), {, return, max, ;, }, verifyBracketing, (]
[{, return, min, ;, }, if, (, y2, ==, 0, ), {, return, max, ;, }, verifyBracketing, (, min, ,]
[y2, ==, 0, ), {, return, max, ;, }, verifyBracketing, (, min, ,, max, ), ;, final, double, absoluteAccuracy, =]
[}, verifyBracketing, (, min, ,, max, ), ;, final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =]
[final, double, absoluteAccuracy, =, getAbsoluteAccuracy, (, ), ;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, double, relativeAccuracy, =]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, double, oldx, =]
[;, final, double, functionValueAccuracy, =, getFunctionValueAccuracy, (, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, double, oldx, =]
[(, ), ;, final, double, relativeAccuracy, =, getRelativeAccuracy, (, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (]
[getRelativeAccuracy, (, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =]
[getRelativeAccuracy, (, ), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =]
[), ;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =, 0.5, *]
[;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =, 0.5, *, (]
[;, double, oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =, 0.5, *, (]
[oldx, =, Double, ., POSITIVE_INFINITY, ;, while, (, true, ), {, final, double, x3, =, 0.5, *, (, x1, +]
[(, true, ), {, final, double, x3, =, 0.5, *, (, x1, +, x2, ), ;, final, double, y3, =]
[), {, final, double, x3, =, 0.5, *, (, x1, +, x2, ), ;, final, double, y3, =, computeObjectiveValue, (]
[=, 0.5, *, (, x1, +, x2, ), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (]
[=, 0.5, *, (, x1, +, x2, ), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (]
[=, 0.5, *, (, x1, +, x2, ), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (]
[x1, +, x2, ), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (]
[), ;, final, double, y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (, y3, ), <=]
[y3, =, computeObjectiveValue, (, x3, ), ;, if, (, FastMath, ., abs, (, y3, ), <=, functionValueAccuracy, ), {, return]
[if, (, FastMath, ., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =]
[if, (, FastMath, ., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =]
[FastMath, ., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -]
[FastMath, ., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -]
[., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (]
[., abs, (, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (]
[(, y3, ), <=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *]
[<=, functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /]
[functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /, (]
[functionValueAccuracy, ), {, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /, (]
[{, return, x3, ;, }, final, double, delta, =, 1, -, (, y1, *, y2, ), /, (, y3, *]
[delta, =, 1, -, (, y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =]
[delta, =, 1, -, (, y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =]
[delta, =, 1, -, (, y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =]
[=, 1, -, (, y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =, (]
[=, 1, -, (, y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =, (]
[=, 1, -, (, y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =, (]
[y1, *, y2, ), /, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (]
[), /, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *]
[), /, (, y3, *, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *]
[*, y3, ), ;, final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (]
[final, double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), ), *]
[double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), ), *, (]
[double, correction, =, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), ), *, (]
[=, (, FastMath, ., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), ), *, (, x3, -]
[., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), ), *, (, x3, -, x1, ), /]
[., signum, (, y2, ), *, FastMath, ., signum, (, y3, ), ), *, (, x3, -, x1, ), /]
[), *, FastMath, ., signum, (, y3, ), ), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (]
[), ), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =]
[), ), *, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =]
[*, (, x3, -, x1, ), /, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -]
[/, FastMath, ., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final, double, y, =]
[., sqrt, (, delta, ), ;, final, double, x, =, x3, -, correction, ;, final, double, y, =, computeObjectiveValue, (]
[double, x, =, x3, -, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =]
[double, x, =, x3, -, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =]
[-, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[-, correction, ;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[;, final, double, y, =, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *]
[=, computeObjectiveValue, (, x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (]
[x, ), ;, final, double, tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[tolerance, =, FastMath, ., max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (]
[max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (]
[max, (, relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (]
[relativeAccuracy, *, FastMath, ., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -]
[., abs, (, x, ), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=]
[), ,, absoluteAccuracy, ), ;, if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return]
[if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x, ;, }, if, (]
[if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x, ;, }, if, (]
[if, (, FastMath, ., abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x, ;, }, if, (]
[abs, (, x, -, oldx, ), <=, tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs, (]
[-, oldx, ), <=, tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=]
[tolerance, ), {, return, x, ;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return]
[;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (]
[;, }, if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (]
[if, (, FastMath, ., abs, (, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >]
[(, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (]
[(, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (]
[(, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (]
[(, y, ), <=, functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (]
[functionValueAccuracy, ), {, return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum, (]
[return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum, (, y1, ), +]
[return, x, ;, }, if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum, (, y1, ), +]
[if, (, correction, >, 0.0, ), {, if, (, FastMath, ., signum, (, y1, ), +, FastMath, ., signum, (]
[>, 0.0, ), {, if, (, FastMath, ., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==]
[{, if, (, FastMath, ., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {]
[(, FastMath, ., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x2, =]
[., signum, (, y1, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x2, =, x, ;]
[(, y1, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x2, =, x, ;, y2, =]
[., signum, (, y, ), ==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {]
[(, y, ), ==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =]
[), ==, 0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;]
[0.0, ), {, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =]
[{, x2, =, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =, x3, ;]
[=, x, ;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =, x3, ;, y1, =]
[;, y2, =, y, ;, }, else, {, x1, =, x, ;, x2, =, x3, ;, y1, =, y, ;]
[=, y, ;, }, else, {, x1, =, x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =]
[x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (]
[x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (]
[x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (]
[x, ;, x2, =, x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (]
[x3, ;, y1, =, y, ;, y2, =, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (]
[=, y, ;, y2, =, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (, y2, ), +]
[=, y, ;, y2, =, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (, y2, ), +]
[=, y3, ;, }, }, else, {, if, (, FastMath, ., signum, (, y2, ), +, FastMath, ., signum, (]
[}, }, else, {, if, (, FastMath, ., signum, (, y2, ), +, FastMath, ., signum, (, y, ), ==]
[{, if, (, FastMath, ., signum, (, y2, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {]
[(, FastMath, ., signum, (, y2, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x1, =]
[., signum, (, y2, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x1, =, x, ;]
[(, y2, ), +, FastMath, ., signum, (, y, ), ==, 0.0, ), {, x1, =, x, ;, y1, =]
[., signum, (, y, ), ==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {]
[(, y, ), ==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =]
[), ==, 0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;]
[0.0, ), {, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =]
[{, x1, =, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =, x, ;]
[=, x, ;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =, x, ;, y1, =]
[;, y1, =, y, ;, }, else, {, x1, =, x3, ;, x2, =, x, ;, y1, =, y3, ;]
[=, y, ;, }, else, {, x1, =, x3, ;, x2, =, x, ;, y1, =, y3, ;, y2, =]
[else, {, x1, =, x3, ;, x2, =, x, ;, y1, =, y3, ;, y2, =, y, ;, }, }]
[x1, =, x3, ;, x2, =, x, ;, y1, =, y3, ;, y2, =, y, ;, }, }, oldx, =]
