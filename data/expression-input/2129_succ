[public, class, InjectMocksScanner, {, private, final, Class, <, ?, >, clazz, ;, public, InjectMocksScanner, (, Class, <, ?, >, clazz]
[), public, class, InjectMocksScanner, {, private, final, Class, <, ?, >, clazz, ;, public, InjectMocksScanner, (, Class, <, ?, >]
[=, clazz, ;, }, public, void, addTo, (, Set, <, Field, >, mockDependentFields, ), {, mockDependentFields, ., addAll, (, scan]
[., clazz, =, clazz, ;, }, public, void, addTo, (, Set, <, Field, >, mockDependentFields, ), {, mockDependentFields, ., addAll]
[;, }, public, void, addTo, (, Set, <, Field, >, mockDependentFields, ), {, mockDependentFields, ., addAll, (, scan, (, )]
[;, }, private, Set, <, Field, >, scan, (, ), {, Set, <, Field, >, mockDependentFields, =, new, HashSet, <]
[., addAll, (, scan, (, ), ), ;, }, private, Set, <, Field, >, scan, (, ), {, Set, <]
[), ;, }, private, Set, <, Field, >, scan, (, ), {, Set, <, Field, >, mockDependentFields, =, new, HashSet]
[;, Field, [, ], fields, =, clazz, ., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {]
[;, for, (, Field, field, :, fields, ), {, if, (, null, !=, field, ., getAnnotation, (, InjectMocks, ., class]
[., getDeclaredFields, (, ), ;, for, (, Field, field, :, fields, ), {, if, (, null, !=, field, ., getAnnotation]
[), {, if, (, null, !=, field, ., getAnnotation, (, InjectMocks, ., class, ), ), {, assertNoAnnotations, (, field, ,]
[), {, assertNoAnnotations, (, field, ,, Mock, ., class, ,, MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class, )]
[!=, field, ., getAnnotation, (, InjectMocks, ., class, ), ), {, assertNoAnnotations, (, field, ,, Mock, ., class, ,, MockitoAnnotations]
[), {, assertNoAnnotations, (, field, ,, Mock, ., class, ,, MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class, )]
[., getAnnotation, (, InjectMocks, ., class, ), ), {, assertNoAnnotations, (, field, ,, Mock, ., class, ,, MockitoAnnotations, ., Mock]
[), ), {, assertNoAnnotations, (, field, ,, Mock, ., class, ,, MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class]
[;, mockDependentFields, ., add, (, field, ), ;, }, }, return, mockDependentFields, ;, }, void, assertNoAnnotations, (, final, Field, field]
[,, Mock, ., class, ,, MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class, ), ;, mockDependentFields, ., add, (]
[,, MockitoAnnotations, ., Mock, ., class, ,, Captor, ., class, ), ;, mockDependentFields, ., add, (, field, ), ;, }]
[,, Captor, ., class, ), ;, mockDependentFields, ., add, (, field, ), ;, }, }, return, mockDependentFields, ;, }, void]
[), ;, mockDependentFields, ., add, (, field, ), ;, }, }, return, mockDependentFields, ;, }, void, assertNoAnnotations, (, final, Field]
[;, }, }, return, mockDependentFields, ;, }, void, assertNoAnnotations, (, final, Field, field, ,, final, Class, ..., annotations, ), {]
[., add, (, field, ), ;, }, }, return, mockDependentFields, ;, }, void, assertNoAnnotations, (, final, Field, field, ,, final]
[), ;, }, }, return, mockDependentFields, ;, }, void, assertNoAnnotations, (, final, Field, field, ,, final, Class, ..., annotations, )]
[;, }, void, assertNoAnnotations, (, final, Field, field, ,, final, Class, ..., annotations, ), {, for, (, Class, annotation, :]
[), {, if, (, field, ., isAnnotationPresent, (, annotation, ), ), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation]
[), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,, InjectMocks, ., class, ., getSimpleName]
[., isAnnotationPresent, (, annotation, ), ), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,]
[), ), {, new, Reporter, (, ), ., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,, InjectMocks, ., class, .]
[;, }, }, }, }]
[., unsupportedCombinationOfAnnotations, (, annotation, ., getSimpleName, (, ), ,, InjectMocks, ., class, ., getSimpleName, (, ), ), ;, }, }]
[,, InjectMocks, ., class, ., getSimpleName, (, ), ), ;, }, }, }, }]
[., getSimpleName, (, ), ,, InjectMocks, ., class, ., getSimpleName, (, ), ), ;, }, }, }, }]
[), ;, }, }, }, }]
[., getSimpleName, (, ), ), ;, }, }, }, }]
