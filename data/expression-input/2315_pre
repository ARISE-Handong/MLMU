[java, ., util, ., logging, ., Logger, ;, public, class, JsAst, implements, SourceAst, {, private, static, final, Logger, logger_, =]
[java, ., util, ., logging, ., Logger, ;, public, class, JsAst, implements, SourceAst, {, private, static, final, Logger, logger_, =]
[logging, ., Logger, ;, public, class, JsAst, implements, SourceAst, {, private, static, final, Logger, logger_, =, Logger, ., getLogger, (]
[logging, ., Logger, ;, public, class, JsAst, implements, SourceAst, {, private, static, final, Logger, logger_, =, Logger, ., getLogger, (]
[=, Logger, ., getLogger, (, JsAst, ., class, ., getName, (, ), ), ;, private, static, final, long, serialVersionUID, =]
[private, transient, SourceFile, sourceFile, ;, private, String, fileName, ;, private, Node, root, ;, public, JsAst, (, SourceFile, sourceFile, ), {]
[private, transient, SourceFile, sourceFile, ;, private, String, fileName, ;, private, Node, root, ;, public, JsAst, (, SourceFile, sourceFile, ), {]
[;, private, String, fileName, ;, private, Node, root, ;, public, JsAst, (, SourceFile, sourceFile, ), {, this, ., inputId, =]
[fileName, ;, private, Node, root, ;, public, JsAst, (, SourceFile, sourceFile, ), {, this, ., inputId, =, new, InputId, (]
[fileName, ;, private, Node, root, ;, public, JsAst, (, SourceFile, sourceFile, ), {, this, ., inputId, =, new, InputId, (]
[JsAst, (, SourceFile, sourceFile, ), {, this, ., inputId, =, new, InputId, (, sourceFile, ., getName, (, ), ), ;]
[JsAst, (, SourceFile, sourceFile, ), {, this, ., inputId, =, new, InputId, (, sourceFile, ., getName, (, ), ), ;]
[), {, this, ., inputId, =, new, InputId, (, sourceFile, ., getName, (, ), ), ;, this, ., sourceFile, =]
[this, ., inputId, =, new, InputId, (, sourceFile, ., getName, (, ), ), ;, this, ., sourceFile, =, sourceFile, ;]
[this, ., inputId, =, new, InputId, (, sourceFile, ., getName, (, ), ), ;, this, ., sourceFile, =, sourceFile, ;]
[new, InputId, (, sourceFile, ., getName, (, ), ), ;, this, ., sourceFile, =, sourceFile, ;, this, ., fileName, =]
[new, InputId, (, sourceFile, ., getName, (, ), ), ;, this, ., sourceFile, =, sourceFile, ;, this, ., fileName, =]
[=, sourceFile, ., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (]
[=, sourceFile, ., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (]
[., getName, (, ), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (, root, ==]
[), ;, }, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (, root, ==, null, ), {]
[}, @, Override, public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (, root, ==, null, ), {, parse, (]
[public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (, root, ==, null, ), {, parse, (, compiler, ), ;]
[public, Node, getAstRoot, (, AbstractCompiler, compiler, ), {, if, (, root, ==, null, ), {, parse, (, compiler, ), ;]
[AbstractCompiler, compiler, ), {, if, (, root, ==, null, ), {, parse, (, compiler, ), ;, root, ., setInputId, (]
[(, root, ==, null, ), {, parse, (, compiler, ), ;, root, ., setInputId, (, inputId, ), ;, }, return]
[root, ., setInputId, (, inputId, ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {]
[setInputId, (, inputId, ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, root, =]
[inputId, ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, root, =, null, ;]
[inputId, ), ;, }, return, root, ;, }, @, Override, public, void, clearAst, (, ), {, root, =, null, ;]
[root, =, null, ;, sourceFile, ., clearCachedSource, (, ), ;, }, @, Override, public, InputId, getInputId, (, ), {, return]
[Override, public, InputId, getInputId, (, ), {, return, inputId, ;, }, @, Override, public, SourceFile, getSourceFile, (, ), {, return]
[public, SourceFile, getSourceFile, (, ), {, return, sourceFile, ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {]
[public, SourceFile, getSourceFile, (, ), {, return, sourceFile, ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {]
[), {, return, sourceFile, ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, Preconditions, ., checkState, (]
[), {, return, sourceFile, ;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, Preconditions, ., checkState, (]
[;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, Preconditions, ., checkState, (, fileName, ., equals, (]
[;, }, @, Override, public, void, setSourceFile, (, SourceFile, file, ), {, Preconditions, ., checkState, (, fileName, ., equals, (]
[SourceFile, file, ), {, Preconditions, ., checkState, (, fileName, ., equals, (, file, ., getName, (, ), ), ), ;]
[), {, Preconditions, ., checkState, (, fileName, ., equals, (, file, ., getName, (, ), ), ), ;, sourceFile, =]
[(, ), ), ), ;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {]
[(, ), ), ), ;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {]
[;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine, (]
[;, sourceFile, =, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine, (]
[=, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine, (, "Parsing: ", +]
[=, file, ;, }, private, void, parse, (, AbstractCompiler, compiler, ), {, try, {, logger_, ., fine, (, "Parsing: ", +]
[try, {, logger_, ., fine, (, "Parsing: ", +, sourceFile, ., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =]
[try, {, logger_, ., fine, (, "Parsing: ", +, sourceFile, ., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =]
[fine, (, "Parsing: ", +, sourceFile, ., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (]
["Parsing: ", +, sourceFile, ., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,]
["Parsing: ", +, sourceFile, ., getName, (, ), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,]
[), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,]
[), ), ;, ParserRunner, ., ParseResult, result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,]
[result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,]
[result, =, ParserRunner, ., parse, (, sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,]
[sourceFile, ,, sourceFile, ., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,]
[., getCode, (, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;]
[(, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =]
[(, ), ,, compiler, ., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =]
[., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, ., ast, ;]
[., getParserConfig, (, ), ,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, ., ast, ;]
[,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (]
[,, compiler, ., getDefaultErrorReporter, (, ), ,, logger_, ), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (]
[,, logger_, ), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,]
[,, logger_, ), ;, root, =, result, ., ast, ;, compiler, ., setOldParseTree, (, sourceFile, ., getName, (, ), ,]
[setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {]
[setOldParseTree, (, sourceFile, ., getName, (, ), ,, result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {]
[getName, (, ), ,, result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[getName, (, ), ,, result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[result, ., oldAst, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[(, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (]
[(, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (]
[(, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (]
[., make, (, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (, root, ==]
[(, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (, root, ==, null, ||]
[(, AbstractCompiler, ., READ_ERROR, ,, sourceFile, ., getName, (, ), ), ), ;, }, if, (, root, ==, null, ||]
[getName, (, ), ), ), ;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (, ), ), {]
[), ), ), ;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =]
[), ), ), ;, }, if, (, root, ==, null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =]
[null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR, ., script, (, ), ;, }, else, {]
[null, ||, compiler, ., hasHaltingErrors, (, ), ), {, root, =, IR, ., script, (, ), ;, }, else, {]
[hasHaltingErrors, (, ), ), {, root, =, IR, ., script, (, ), ;, }, else, {, compiler, ., prepareAst, (]
[{, root, =, IR, ., script, (, ), ;, }, else, {, compiler, ., prepareAst, (, root, ), ;, }]
[{, root, =, IR, ., script, (, ), ;, }, else, {, compiler, ., prepareAst, (, root, ), ;, }]
[., script, (, ), ;, }, else, {, compiler, ., prepareAst, (, root, ), ;, }, root, ., setStaticSourceFile, (]
