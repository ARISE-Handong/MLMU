[;, private, static, final, String, CLOSURE_LOCALE_CONSTANT_NAME, =, "goog.LOCALE", ;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =, DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,]
[;, static, final, DiagnosticType, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, =, DiagnosticType, ., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,, "TightenTypes requires type checking. Please use --check_types.", ), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =]
[;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =]
[., error, (, "JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK", ,, "TightenTypes requires type checking. Please use --check_types.", ), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together"]
[,, "TightenTypes requires type checking. Please use --check_types.", ), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final]
[), ;, static, final, DiagnosticType, CANNOT_USE_PROTOTYPE_AND_VAR, =, DiagnosticType, ., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR]
[;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR]
[., error, (, "JSC_CANNOT_USE_PROTOTYPE_AND_VAR", ,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}"]
[,, "Rename prototypes and inline variables cannot be used together", ), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static]
[), ;, static, final, DiagnosticType, REPORT_PATH_IO_ERROR, =, DiagnosticType, ., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType]
[;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final, DiagnosticType]
[., error, (, "JSC_REPORT_PATH_IO_ERROR", ,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,]
[,, "Error writing compiler report to {0}", ), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private]
[), ;, private, static, final, DiagnosticType, NAME_REF_GRAPH_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final]
[;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java]
[., error, (, "JSC_NAME_REF_GRAPH_FILE_ERROR", ,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,]
[,, "Error \"{1}\" writing name reference graph to \"{0}\".", ), ;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private]
[), ;, private, static, final, DiagnosticType, NAME_REF_REPORT_FILE_ERROR, =, DiagnosticType, ., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final]
[;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =, java, ., util, ., regex, ., Pattern]
[., error, (, "JSC_NAME_REF_REPORT_FILE_ERROR", ,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =]
[,, "Error \"{1}\" writing name reference report to \"{0}\".", ), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =, java, ., util, .]
[), ;, private, static, final, java, ., util, ., regex, ., Pattern, GLOBAL_SYMBOL_NAMESPACE_PATTERN, =, java, ., util, ., regex, .]
[;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =, null, ;, private, TightenTypes, tightenTypes, =, null, ;, private]
[., compile, (, "^[a-zA-Z0-9$_]+$", ), ;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =, null, ;, private, TightenTypes]
[., Pattern, ., compile, (, "^[a-zA-Z0-9$_]+$", ), ;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =, null, ;]
[., regex, ., Pattern, ., compile, (, "^[a-zA-Z0-9$_]+$", ), ;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =]
[., util, ., regex, ., Pattern, ., compile, (, "^[a-zA-Z0-9$_]+$", ), ;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable]
[), ;, private, GlobalNamespace, namespaceForChecks, =, null, ;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =, null, ;, private, TightenTypes, tightenTypes, =, null, ;]
[;, private, PreprocessorSymbolTable, preprocessorSymbolTable, =, null, ;, private, TightenTypes, tightenTypes, =, null, ;, private, Set, <, String, >, exportedNames, =]
[;, private, TightenTypes, tightenTypes, =, null, ;, private, Set, <, String, >, exportedNames, =, null, ;, private, CrossModuleMethodMotion, ., IdGenerator]
[;, private, Set, <, String, >, exportedNames, =, null, ;, private, CrossModuleMethodMotion, ., IdGenerator, crossModuleIdGenerator, =, new, CrossModuleMethodMotion, ., IdGenerator]
[;, private, CrossModuleMethodMotion, ., IdGenerator, crossModuleIdGenerator, =, new, CrossModuleMethodMotion, ., IdGenerator, (, ), ;, private, Map, <, String, ,, Integer]
[;, private, Map, <, String, ,, Integer, >, cssNames, =, null, ;, private, VariableMap, variableMap, =, null, ;, private, VariableMap]
[;, private, VariableMap, variableMap, =, null, ;, private, VariableMap, propertyMap, =, null, ;, private, VariableMap, anonymousFunctionNameMap, =, null, ;, private]
[;, private, VariableMap, propertyMap, =, null, ;, private, VariableMap, anonymousFunctionNameMap, =, null, ;, private, FunctionNames, functionNames, =, null, ;, private]
[;, private, VariableMap, anonymousFunctionNameMap, =, null, ;, private, FunctionNames, functionNames, =, null, ;, private, VariableMap, stringMap, =, null, ;, private]
[;, private, FunctionNames, functionNames, =, null, ;, private, VariableMap, stringMap, =, null, ;, private, String, idGeneratorMap, =, null, ;, public]
[;, private, VariableMap, stringMap, =, null, ;, private, String, idGeneratorMap, =, null, ;, public, DefaultPassConfig, (, CompilerOptions, options, ), {]
[;, private, String, idGeneratorMap, =, null, ;, public, DefaultPassConfig, (, CompilerOptions, options, ), {, super, (, options, ), ;, }]
[;, public, DefaultPassConfig, (, CompilerOptions, options, ), {, super, (, options, ), ;, }, @, Override, protected, State, getIntermediateState, (]
[), ;, }, @, Override, protected, State, getIntermediateState, (, ), {, return, new, State, (, cssNames, ==, null, ?, null]
[;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =, state, ., cssNames, ==]
[,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,]
[?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (]
[==, null, ?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, .]
[?, null, :, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (]
[:, Maps, ., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, )]
[,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,]
[., newHashMap, (, cssNames, ), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator]
[), ,, exportedNames, ==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap]
[,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected]
[?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,]
[==, null, ?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,]
[?, null, :, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,]
[:, Collections, ., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,]
[,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected]
[., unmodifiableSet, (, exportedNames, ), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, )]
[), ,, crossModuleIdGenerator, ,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override]
[,, variableMap, ,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState]
[,, propertyMap, ,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State]
[,, anonymousFunctionNameMap, ,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, )]
[,, stringMap, ,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this]
[,, functionNames, ,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames]
[,, idGeneratorMap, ), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =, state]
[), ;, }, @, Override, protected, void, setIntermediateState, (, State, state, ), {, this, ., cssNames, =, state, ., cssNames]
[=, state, ., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, .]
[., cssNames, =, state, ., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;]
[;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames]
[?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==]
[==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, .]
[., cssNames, ==, null, ?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =]
[?, null, :, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==]
[:, Maps, ., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?]
[;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames]
[., newHashMap, (, state, ., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :]
[), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, .]
[., cssNames, ), ;, this, ., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (]
[=, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, .]
[., exportedNames, =, state, ., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;]
[;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap]
[?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;]
[==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, .]
[., exportedNames, ==, null, ?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =]
[?, null, :, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;]
[:, Sets, ., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, .]
[;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap]
[., newHashSet, (, state, ., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =]
[), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, .]
[., exportedNames, ), ;, this, ., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;]
[=, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap]
[., crossModuleIdGenerator, =, state, ., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state]
[;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap]
[., crossModuleIdGenerator, ;, this, ., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this]
[=, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap]
[., variableMap, =, state, ., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state]
[;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap]
[., variableMap, ;, this, ., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this]
[=, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap]
[., propertyMap, =, state, ., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state]
[;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames]
[., propertyMap, ;, this, ., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this]
[=, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames]
[., anonymousFunctionNameMap, =, state, ., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state]
[;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap]
[., anonymousFunctionNameMap, ;, this, ., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;, this]
[=, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap, =, state, ., idGeneratorMap]
[., stringMap, =, state, ., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap, =, state]
[;, this, ., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap, =, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace]
[., stringMap, ;, this, ., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap, =, state, ., idGeneratorMap, ;, }]
[=, state, ., functionNames, ;, this, ., idGeneratorMap, =, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return]
[., functionNames, =, state, ., functionNames, ;, this, ., idGeneratorMap, =, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, )]
[;, this, ., idGeneratorMap, =, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return, namespaceForChecks, ;, }, PreprocessorSymbolTable]
[., functionNames, ;, this, ., idGeneratorMap, =, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return, namespaceForChecks, ;]
[=, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return, namespaceForChecks, ;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (, ), {]
[., idGeneratorMap, =, state, ., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return, namespaceForChecks, ;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (]
[;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return, namespaceForChecks, ;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (, ), {, return, preprocessorSymbolTable, ;, }]
[., idGeneratorMap, ;, }, GlobalNamespace, getGlobalNamespace, (, ), {, return, namespaceForChecks, ;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (, ), {, return, preprocessorSymbolTable]
[;, }, PreprocessorSymbolTable, getPreprocessorSymbolTable, (, ), {, return, preprocessorSymbolTable, ;, }, void, maybeInitializePreprocessorSymbolTable, (, AbstractCompiler, compiler, ), {, if, (]
[;, }, void, maybeInitializePreprocessorSymbolTable, (, AbstractCompiler, compiler, ), {, if, (, options, ., ideMode, ), {, Node, root, =, compiler]
[), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode]
[., ideMode, ), {, Node, root, =, compiler, ., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable]
[;, if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable]
[., getRoot, (, ), ;, if, (, preprocessorSymbolTable, ==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {]
[), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;, }, }, }, @, Override, protected, List, <, PassFactory, >]
[||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;, }, }]
[==, null, ||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;]
[||, preprocessorSymbolTable, ., getRootNode, (, ), !=, root, ), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;, }, }]
[), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;, }, }, }, @, Override, protected, List, <, PassFactory, >]
[!=, root, ), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;, }, }, }, @, Override, protected, List, <]
[., getRootNode, (, ), !=, root, ), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;, }, }, }, @]
[), {, preprocessorSymbolTable, =, new, PreprocessorSymbolTable, (, root, ), ;, }, }, }, @, Override, protected, List, <, PassFactory, >]
[=, new, PreprocessorSymbolTable, (, root, ), ;, }, }, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, )]
[;, }, }, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >, checks]
[), ;, }, }, }, @, Override, protected, List, <, PassFactory, >, getChecks, (, ), {, List, <, PassFactory, >]
[;, checks, ., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass, ), {, checks, .]
[., newArrayList, (, ), ;, checks, ., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass]
[;, if, (, options, ., closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass]
[., add, (, createEmptyPass, (, "beforeStandardChecks", ), ), ;, if, (, options, ., closurePass, ), {, checks, ., add, (]
[), ;, if, (, options, ., closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (]
[), ), ;, if, (, options, ., closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add]
[), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (, options]
[., closurePass, ), {, checks, ., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if]
[;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, .]
[., add, (, closureGoogScopeAliases, ), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, )]
[), ;, checks, ., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options]
[;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {]
[., add, (, closureRewriteGoogClass, ), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==]
[), ;, }, if, (, options, ., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, )]
[), {, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;]
[., nameAnonymousFunctionsOnly, ), {, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions]
[), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED]
[==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming]
[., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options]
[), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED]
[., MAPPED, ), {, checks, ., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy]
[;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions, )]
[., add, (, nameMappedAnonymousFunctions, ), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks]
[), ;, }, else, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions]
[), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (, options, ., jqueryPass, )]
[==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (]
[., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }]
[), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (, options, ., jqueryPass, )]
[., UNMAPPED, ), {, checks, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (, options, .]
[;, }, return, checks, ;, }, if, (, options, ., jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;]
[., add, (, nameUnmappedAnonymousFunctions, ), ;, }, return, checks, ;, }, if, (, options, ., jqueryPass, ), {, checks, .]
[), ;, }, return, checks, ;, }, if, (, options, ., jqueryPass, ), {, checks, ., add, (, jqueryAliases, )]
[;, }, if, (, options, ., jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add]
[), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options]
[., jqueryPass, ), {, checks, ., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if]
[;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups]
[., add, (, jqueryAliases, ), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||]
[), ;, }, checks, ., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (]
[;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (]
[., add, (, checkSideEffects, ), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[), ;, if, (, options, ., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables]
[), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (]
[||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if]
[||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {]
[., checkSuspiciousCode, ||, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, )]
[||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if]
[., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, .]
[), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }]
[., GLOBAL_THIS, ), ||, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, )]
[), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (]
[., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options]
[), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables]
[., DEBUGGER_STATEMENT_PRESENT, ), ), {, checks, ., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options]
[;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, .]
[., add, (, suspiciousCode, ), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT]
[), ;, }, if, (, options, ., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks]
[), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn, (, ), )]
[||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, ., add, (, checkControlStructures, ), ;, }, if]
[., checkControlStructures, ||, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, ., add, (, checkControlStructures, ), ;]
[), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn, (, ), )]
[., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (, options]
[), ), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn, (, )]
[., ES5_STRICT, ), ), {, checks, ., add, (, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn]
[;, }, if, (, options, ., checkRequires, ., isOn, (, ), ), {, checks, ., add, (, checkRequires, ), ;]
[., add, (, checkControlStructures, ), ;, }, if, (, options, ., checkRequires, ., isOn, (, ), ), {, checks, .]
[), ;, }, if, (, options, ., checkRequires, ., isOn, (, ), ), {, checks, ., add, (, checkRequires, )]
[), {, checks, ., add, (, checkRequires, ), ;, }, if, (, options, ., checkProvides, ., isOn, (, ), )]
[., isOn, (, ), ), {, checks, ., add, (, checkRequires, ), ;, }, if, (, options, ., checkProvides, .]
[., checkRequires, ., isOn, (, ), ), {, checks, ., add, (, checkRequires, ), ;, }, if, (, options, .]
[;, }, if, (, options, ., checkProvides, ., isOn, (, ), ), {, checks, ., add, (, checkProvides, ), ;]
[., add, (, checkRequires, ), ;, }, if, (, options, ., checkProvides, ., isOn, (, ), ), {, checks, .]
[), ;, }, if, (, options, ., checkProvides, ., isOn, (, ), ), {, checks, ., add, (, checkProvides, )]
[), {, checks, ., add, (, checkProvides, ), ;, }, if, (, options, ., generateExports, ), {, checks, ., add]
[., isOn, (, ), ), {, checks, ., add, (, checkProvides, ), ;, }, if, (, options, ., generateExports, )]
[., checkProvides, ., isOn, (, ), ), {, checks, ., add, (, checkProvides, ), ;, }, if, (, options, .]
[;, }, if, (, options, ., generateExports, ), {, checks, ., add, (, generateExports, ), ;, }, if, (, options]
[., add, (, checkProvides, ), ;, }, if, (, options, ., generateExports, ), {, checks, ., add, (, generateExports, )]
[), ;, }, if, (, options, ., generateExports, ), {, checks, ., add, (, generateExports, ), ;, }, if, (]
[), {, checks, ., add, (, generateExports, ), ;, }, if, (, options, ., exportTestFunctions, ), {, checks, ., add]
[., generateExports, ), {, checks, ., add, (, generateExports, ), ;, }, if, (, options, ., exportTestFunctions, ), {, checks]
[;, }, if, (, options, ., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (, options]
[., add, (, generateExports, ), ;, }, if, (, options, ., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, )]
[), ;, }, if, (, options, ., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (]
[), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (, options, ., closurePass, ), {, checks, ., add]
[., exportTestFunctions, ), {, checks, ., add, (, exportTestFunctions, ), ;, }, if, (, options, ., closurePass, ), {, checks]
[;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (, options]
[., add, (, exportTestFunctions, ), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, )]
[), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (]
[), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, .]
[., closurePass, ), {, checks, ., add, (, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&, options, .]
[;, }, if, (, options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add]
[., add, (, closurePrimitives, ), ;, }, if, (, options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, )]
[), ;, }, if, (, options, ., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, .]
[), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks]
[&&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (]
[., closurePass, &&, options, ., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }]
[), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks]
[., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=]
[., checkMissingGetCssNameLevel, ., isOn, (, ), ), {, checks, ., add, (, closureCheckGetCssName, ), ;, }, if, (, options, .]
[;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks]
[., add, (, closureCheckGetCssName, ), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (]
[), ;, }, if, (, options, ., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }]
[), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if, (, options]
[!=, null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if]
[., syntheticBlockStartMarker, !=, null, ), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, )]
[), {, checks, ., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if, (, options]
[;, }, checks, ., add, (, checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (]
[., add, (, createSyntheticBlocks, ), ;, }, checks, ., add, (, checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, )]
[), ;, }, checks, ., add, (, checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add]
[;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (, checkRegExp, ), ;, }, if, (, options, .]
[., add, (, checkVars, ), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (, checkRegExp, ), ;]
[), ;, if, (, options, ., computeFunctionSideEffects, ), {, checks, ., add, (, checkRegExp, ), ;, }, if, (, options]
[), {, checks, ., add, (, checkRegExp, ), ;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (, ), )]
[., computeFunctionSideEffects, ), {, checks, ., add, (, checkRegExp, ), ;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (]
[;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, ), ;]
[., add, (, checkRegExp, ), ;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (, ), ), {, checks, .]
[), ;, }, if, (, options, ., aggressiveVarCheck, ., isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, )]
[), {, checks, ., add, (, checkVariableReferences, ), ;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add]
[., isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, ), ;, }, if, (, options, ., processObjectPropertyString, )]
[., aggressiveVarCheck, ., isOn, (, ), ), {, checks, ., add, (, checkVariableReferences, ), ;, }, if, (, options, .]
[;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options]
[., add, (, checkVariableReferences, ), ;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, )]
[), ;, }, if, (, options, ., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (]
[), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, )]
[., processObjectPropertyString, ), {, checks, ., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||, options, .]
[;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;]
[., add, (, objectPropertyStringPreprocess, ), ;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {, checks, .]
[), ;, }, if, (, options, ., checkTypes, ||, options, ., inferTypes, ), {, checks, ., add, (, resolveTypes, )]
[), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (, options, .]
[||, options, ., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;]
[., checkTypes, ||, options, ., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes]
[), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (, options, .]
[., inferTypes, ), {, checks, ., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (]
[;, checks, ., add, (, inferTypes, ), ;, if, (, options, ., checkTypes, ), {, checks, ., add, (, checkTypes]
[., add, (, resolveTypes, ), ;, checks, ., add, (, inferTypes, ), ;, if, (, options, ., checkTypes, ), {]
[), ;, checks, ., add, (, inferTypes, ), ;, if, (, options, ., checkTypes, ), {, checks, ., add, (]
[;, if, (, options, ., checkTypes, ), {, checks, ., add, (, checkTypes, ), ;, }, else, {, checks, .]
[., add, (, inferTypes, ), ;, if, (, options, ., checkTypes, ), {, checks, ., add, (, checkTypes, ), ;]
[), ;, if, (, options, ., checkTypes, ), {, checks, ., add, (, checkTypes, ), ;, }, else, {, checks]
[), {, checks, ., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }]
[., checkTypes, ), {, checks, ., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (, inferJsDocInfo, )]
[;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&, !]
[., add, (, checkTypes, ), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !]
[), ;, }, else, {, checks, ., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&]
[;, }, if, (, !, options, ., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass]
[., add, (, inferJsDocInfo, ), ;, }, if, (, !, options, ., ideMode, &&, !, options, ., saveDataStructures, ), {]
[), ;, }, if, (, !, options, ., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (]
[), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, )]
[&&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, .]
[&&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, .]
[., ideMode, &&, !, options, ., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (]
[), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, )]
[), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, )]
[., saveDataStructures, ), {, checks, ., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn]
[;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (, options, ., checkTypes, &&, options, .]
[., add, (, clearTypedScopePass, ), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (, options]
[), ;, }, }, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ||, (, options, ., checkTypes, &&, options]
[), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables]
[||, (, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (]
[., isOn, (, ), ||, (, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), ), ), {]
[., checkUnreachableCode, ., isOn, (, ), ||, (, options, ., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), )]
[), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables]
[), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, .]
[&&, options, ., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if]
[., checkTypes, &&, options, ., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;]
[), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, .]
[., isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes]
[., checkMissingReturn, ., isOn, (, ), ), ), {, checks, ., add, (, checkControlFlow, ), ;, }, if, (, options]
[;, }, if, (, options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, .]
[., add, (, checkControlFlow, ), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, .]
[), ;, }, if, (, options, ., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options]
[), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), )]
[&&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), )]
[., checkTypes, &&, (, options, ., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY]
[), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), )]
[), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, )]
[||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls, ), ;, }]
[., enables, (, DiagnosticGroups, ., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks]
[), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls, ), ;]
[., ACCESS_CONTROLS, ), ||, options, ., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls]
[), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, )]
[., enables, (, DiagnosticGroups, ., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (]
[), ), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (]
[., CONSTANT_PROPERTY, ), ), ), {, checks, ., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, .]
[;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;]
[., add, (, checkAccessControls, ), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, .]
[), ;, }, if, (, options, ., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, )]
[), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, )]
[., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (, options, ., enables, (]
[., checkGlobalNamesLevel, ., isOn, (, ), ), {, checks, ., add, (, checkGlobalNames, ), ;, }, if, (, options, .]
[;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {, checks, .]
[., add, (, checkGlobalNames, ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, .]
[), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {, checks]
[), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, ), {, checks, ., add]
[||, options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, )]
[., enables, (, DiagnosticGroups, ., ES5_STRICT, ), ||, options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;]
[), ||, options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass]
[., ES5_STRICT, ), ||, options, ., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options]
[), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, ), {, checks, ., add]
[., checkCaja, ), {, checks, ., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, ), {, checks]
[;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (, options]
[., add, (, checkStrictMode, ), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, )]
[), ;, }, if, (, options, ., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (]
[), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add]
[., closurePass, ), {, checks, ., add, (, closureReplaceGetCssName, ), ;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks]
[;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (]
[., add, (, closureReplaceGetCssName, ), ;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, )]
[), ;, }, if, (, options, ., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if]
[), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (, options, ., messageBundle, !=, null, ), {]
[., replaceMessagesWithChromeI18n, ), {, checks, ., add, (, replaceMessagesForChrome, ), ;, }, else, if, (, options, ., messageBundle, !=, null]
[;, }, else, if, (, options, ., messageBundle, !=, null, ), {, checks, ., add, (, replaceMessages, ), ;, }]
[., add, (, replaceMessagesForChrome, ), ;, }, else, if, (, options, ., messageBundle, !=, null, ), {, checks, ., add]
[), ;, }, else, if, (, options, ., messageBundle, !=, null, ), {, checks, ., add, (, replaceMessages, ), ;]
[), {, checks, ., add, (, replaceMessages, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (]
[!=, null, ), {, checks, ., add, (, replaceMessages, ), ;, }, if, (, options, ., getTweakProcessing, (, ), .]
[., messageBundle, !=, null, ), {, checks, ., add, (, replaceMessages, ), ;, }, if, (, options, ., getTweakProcessing, (]
[), {, checks, ., add, (, replaceMessages, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (]
[;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {, checks, ., add, (, processTweaks]
[., add, (, replaceMessages, ), ;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {]
[), ;, }, if, (, options, ., getTweakProcessing, (, ), ., isOn, (, ), ), {, checks, ., add, (]
[), {, checks, ., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (, options]
[., isOn, (, ), ), {, checks, ., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, )]
[., getTweakProcessing, (, ), ., isOn, (, ), ), {, checks, ., add, (, processTweaks, ), ;, }, checks, .]
[;, }, checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation]
[., add, (, processTweaks, ), ;, }, checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=]
[), ;, }, checks, ., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, .]
[;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, )]
[., add, (, processDefines, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks]
[), ;, if, (, options, ., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames]
[), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !, options]
[||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=]
[!=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, .]
[., instrumentationTemplate, !=, null, ||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (]
[||, options, ., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=]
[), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !, options]
[., recordFunctionInformation, ), {, checks, ., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&]
[;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {]
[., add, (, computeFunctionNames, ), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, .]
[), ;, }, if, (, options, ., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), )]
[), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options]
[&&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if]
[!=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;]
[., nameReferenceGraphPath, !=, null, &&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph]
[&&, !, options, ., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if]
[), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options]
[), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options]
[., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=]
[., nameReferenceGraphPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceGraph, ), ;, }, if, (, options, .]
[;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {]
[., add, (, printNameReferenceGraph, ), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, .]
[), ;, }, if, (, options, ., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), )]
[), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;]
[&&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks]
[!=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;]
[., nameReferenceReportPath, !=, null, &&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport]
[&&, !, options, ., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks]
[), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;]
[), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;]
[., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (]
[., nameReferenceReportPath, ., isEmpty, (, ), ), {, checks, ., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (]
[;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;, assertAllOneTimePasses, (, checks, ), ;, return, checks, ;]
[., add, (, printNameReferenceReport, ), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;, assertAllOneTimePasses, (, checks]
[), ;, }, checks, ., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;, assertAllOneTimePasses, (, checks, ), ;, return, checks]
[;, assertAllOneTimePasses, (, checks, ), ;, return, checks, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, )]
[., add, (, createEmptyPass, (, "afterStandardChecks", ), ), ;, assertAllOneTimePasses, (, checks, ), ;, return, checks, ;, }, @, Override]
[), ;, assertAllOneTimePasses, (, checks, ), ;, return, checks, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (]
[), ), ;, assertAllOneTimePasses, (, checks, ), ;, return, checks, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations]
[;, return, checks, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, List, <, PassFactory, >]
[), ;, return, checks, ;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, List, <, PassFactory]
[;, }, @, Override, protected, List, <, PassFactory, >, getOptimizations, (, ), {, List, <, PassFactory, >, passes, =, Lists]
[;, passes, ., add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck]
[., newArrayList, (, ), ;, passes, ., add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {, passes]
[;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (]
[., add, (, garbageCollectChecks, ), ;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;]
[), ;, if, (, options, ., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add]
[), {, passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;]
[., runtimeTypeCheck, ), {, passes, ., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", )]
[;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (, options, ., replaceIdGenerators, ), {, passes]
[., add, (, runtimeTypeCheck, ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (, options]
[), ;, }, passes, ., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (, options, ., replaceIdGenerators, ), {]
[;, if, (, options, ., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (, options, .]
[., add, (, createEmptyPass, (, "beforeStandardOptimizations", ), ), ;, if, (, options, ., replaceIdGenerators, ), {, passes, ., add, (]
[), ;, if, (, options, ., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (, options]
[), ), ;, if, (, options, ., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (]
[), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add]
[., replaceIdGenerators, ), {, passes, ., add, (, replaceIdGenerators, ), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes]
[;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options]
[., add, (, replaceIdGenerators, ), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, )]
[), ;, }, if, (, options, ., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (]
[), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods]
[., optimizeArgumentsArray, ), {, passes, ., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (, options]
[;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {, passes]
[., add, (, optimizeArgumentsArray, ), ;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, .]
[), ;, }, if, (, options, ., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {]
[), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {, passes, ., add]
[&&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }]
[., closurePass, &&, (, options, ., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, )]
[), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {, passes, ., add]
[), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {, passes, .]
[||, options, ., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties]
[., removeAbstractMethods, ||, options, ., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options]
[), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {, passes, .]
[., removeClosureAsserts, ), ), {, passes, ., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {]
[;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (, collapseProperties, ), ;, }, if, (, !]
[., add, (, closureCodeRemoval, ), ;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (, collapseProperties, )]
[), ;, }, if, (, options, ., collapseProperties, ), {, passes, ., add, (, collapseProperties, ), ;, }, if, (]
[), {, passes, ., add, (, collapseProperties, ), ;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, )]
[., collapseProperties, ), {, passes, ., add, (, collapseProperties, ), ;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty]
[;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {, passes, ., add, (, replaceStrings, )]
[., add, (, collapseProperties, ), ;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {, passes]
[), ;, }, if, (, !, options, ., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {, passes, ., add, (, replaceStrings]
[), {, passes, ., add, (, replaceStrings, ), ;, }, if, (, options, ., tightenTypes, ), {, passes, ., add]
[), {, passes, ., add, (, replaceStrings, ), ;, }, if, (, options, ., tightenTypes, ), {, passes, ., add]
[., isEmpty, (, ), ), {, passes, ., add, (, replaceStrings, ), ;, }, if, (, options, ., tightenTypes, )]
[., replaceStringsFunctionDescriptions, ., isEmpty, (, ), ), {, passes, ., add, (, replaceStrings, ), ;, }, if, (, options, .]
[;, }, if, (, options, ., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (, options]
[., add, (, replaceStrings, ), ;, }, if, (, options, ., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, )]
[), ;, }, if, (, options, ., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (]
[), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (, options, ., disambiguateProperties, ), {, passes, ., add]
[., tightenTypes, ), {, passes, ., add, (, tightenTypesBuilder, ), ;, }, if, (, options, ., disambiguateProperties, ), {, passes]
[;, }, if, (, options, ., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (, options]
[., add, (, tightenTypesBuilder, ), ;, }, if, (, options, ., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, )]
[), ;, }, if, (, options, ., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (]
[), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes, ., add]
[., disambiguateProperties, ), {, passes, ., add, (, disambiguateProperties, ), ;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes]
[;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if, (]
[., add, (, disambiguateProperties, ), ;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, )]
[), ;, }, if, (, options, ., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if]
[), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if, (, options, ., markNoSideEffectCalls, ), {, passes, .]
[., computeFunctionSideEffects, ), {, passes, ., add, (, markPureFunctions, ), ;, }, else, if, (, options, ., markNoSideEffectCalls, ), {]
[;, }, else, if, (, options, ., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (]
[., add, (, markPureFunctions, ), ;, }, else, if, (, options, ., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls]
[), ;, }, else, if, (, options, ., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if]
[), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {, passes, ., add]
[., markNoSideEffectCalls, ), {, passes, ., add, (, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {, passes]
[;, }, if, (, options, ., chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }, passes, ., add]
[., add, (, markNoSideEffectCalls, ), ;, }, if, (, options, ., chainCalls, ), {, passes, ., add, (, chainCalls, )]
[), ;, }, if, (, options, ., chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }, passes, .]
[), {, passes, ., add, (, chainCalls, ), ;, }, passes, ., add, (, checkConsts, ), ;, if, (, options]
[., chainCalls, ), {, passes, ., add, (, chainCalls, ), ;, }, passes, ., add, (, checkConsts, ), ;, if]
[;, }, passes, ., add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add, (]
[., add, (, chainCalls, ), ;, }, passes, ., add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, )]
[), ;, }, passes, ., add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add]
[;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, )]
[., add, (, checkConsts, ), ;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;]
[), ;, if, (, options, ., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes]
[), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval]
[., ignoreCajaProperties, ), {, passes, ., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options]
[;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {]
[., add, (, ignoreCajaProperties, ), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||, options, .]
[), ;, }, assertAllOneTimePasses, (, passes, ), ;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, )]
[;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (]
[), ;, if, (, options, ., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses]
[), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if]
[||, options, ., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add]
[., smartNameRemoval, ||, options, ., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes]
[), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if]
[!=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;]
[., reportPath, !=, null, ), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass]
[), {, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if]
[;, passes, ., add, (, smartNamePass, ), ;, }, if, (, options, ., closurePass, ), {, passes, ., add, (]
[., addAll, (, getCodeRemovingPasses, (, ), ), ;, passes, ., add, (, smartNamePass, ), ;, }, if, (, options, .]
[), ;, passes, ., add, (, smartNamePass, ), ;, }, if, (, options, ., closurePass, ), {, passes, ., add]
[;, }, if, (, options, ., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (, options]
[., add, (, smartNamePass, ), ;, }, if, (, options, ., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, )]
[), ;, }, if, (, options, ., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (]
[), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add]
[., closurePass, ), {, passes, ., add, (, closureOptimizePrimitives, ), ;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes]
[;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options]
[., add, (, closureOptimizePrimitives, ), ;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, )]
[), ;, }, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add]
[., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes]
[;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options]
[., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, )]
[), ;, }, if, (, options, ., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (]
[), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, ), {, passes]
[., devirtualizePrototypeMethods, ), {, passes, ., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, )]
[;, }, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP]
[., add, (, devirtualizePrototypeMethods, ), ;, }, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (]
[), ;, }, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, .]
[), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass]
[!=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add]
[., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes]
[), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass]
[;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), )]
[., add, (, getCustomPasses, (, CustomPassExecutionTime, ., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", )]
[), ;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, )]
[), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (, getMainOptimizationLoop, (]
[., BEFORE_OPTIMIZATION_LOOP, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (]
[;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if, (, options]
[., add, (, createEmptyPass, (, "beforeMainOptimizations", ), ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (]
[), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if, (]
[), ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if]
[;, if, (, options, ., specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion]
[., addAll, (, getMainOptimizationLoop, (, ), ), ;, if, (, options, ., specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion]
[), ;, if, (, options, ., specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (]
[), {, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options]
[., specializeInitialModule, ), {, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if]
[), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add]
[., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes]
[;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add]
[., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, )]
[), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, .]
[), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, specializeInitialModule, ), ;, passes, ., addAll]
[., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, specializeInitialModule, ), ;, passes]
[;, }, passes, ., add, (, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes]
[., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (]
[), ;, }, passes, ., add, (, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }]
[;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), )]
[., add, (, specializeInitialModule, ), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (]
[), ;, passes, ., addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", )]
[;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (, options, ., crossModuleCodeMotion, ), {, passes]
[., addAll, (, getMainOptimizationLoop, (, ), ), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if]
[), ;, }, passes, ., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (, options, ., crossModuleCodeMotion, ), {]
[;, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, .]
[., add, (, createEmptyPass, (, "beforeModuleMotion", ), ), ;, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (]
[), ;, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options]
[), ), ;, if, (, options, ., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (]
[), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add]
[., crossModuleCodeMotion, ), {, passes, ., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes]
[;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add]
[., add, (, crossModuleCodeMotion, ), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, )]
[), ;, }, if, (, options, ., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, .]
[), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;]
[., crossModuleMethodMotion, ), {, passes, ., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", )]
[;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null, )]
[., add, (, crossModuleMethodMotion, ), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options]
[), ;, }, passes, ., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null]
[;, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, )]
[., add, (, createEmptyPass, (, "afterModuleMotion", ), ), ;, if, (, options, ., customPasses, !=, null, ), {, passes, .]
[), ;, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP]
[), ), ;, if, (, options, ., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, .]
[), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options, ., flowSensitiveInlineVariables]
[!=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options]
[., customPasses, !=, null, ), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if]
[), {, passes, ., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options, ., flowSensitiveInlineVariables]
[;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, .]
[., add, (, getCustomPasses, (, CustomPassExecutionTime, ., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes]
[), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options]
[), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (]
[., AFTER_OPTIMIZATION_LOOP, ), ), ;, }, if, (, options, ., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;]
[), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {]
[., flowSensitiveInlineVariables, ), {, passes, ., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars]
[;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }]
[., add, (, flowSensitiveInlineVariables, ), ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, passes, ., add]
[), ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;]
[), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, .]
[||, options, ., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval]
[., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options]
[), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, .]
[., removeUnusedLocalVars, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval, ), {]
[;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2, ), ;, }, if, (]
[., add, (, removeUnusedVars, ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2]
[), ;, }, }, if, (, options, ., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2, ), ;, }, if]
[), {, passes, ., add, (, smartNamePass2, ), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add]
[., smartNameRemoval, ), {, passes, ., add, (, smartNamePass2, ), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes]
[;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options]
[., add, (, smartNamePass2, ), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, )]
[), ;, }, if, (, options, ., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (]
[), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=]
[., collapseAnonymousFunctions, ), {, passes, ., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, .]
[;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations]
[., add, (, collapseAnonymousFunctions, ), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {]
[), ;, }, if, (, options, ., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (]
[), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, )]
[||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, .]
[., moveFunctionDeclarations, ||, options, ., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (]
[), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, )]
[!=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, .]
[., renamePrefixNamespace, !=, null, ), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==]
[), {, passes, ., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, )]
[;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;]
[., add, (, moveFunctionDeclarations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, .]
[), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, )]
[), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming]
[==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&]
[., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, .]
[), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming]
[., MAPPED, ), {, passes, ., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options]
[;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming]
[., add, (, nameMappedAnonymousFunctions, ), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, .]
[), ;, }, if, (, options, ., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, .]
[), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming]
[&&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {]
[., extractPrototypeMemberDeclarations, &&, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, )]
[), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming]
[), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, .]
[&&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if]
[!=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations]
[., propertyRenaming, !=, PropertyRenamingPolicy, ., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add]
[&&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if]
[., HEURISTIC, &&, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;]
[), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, .]
[!=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties]
[., propertyRenaming, !=, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options]
[), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, .]
[., AGGRESSIVE_HEURISTIC, ), ), {, passes, ., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (]
[;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes]
[., add, (, extractPrototypeMemberDeclarations, ), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, .]
[), ;, }, if, (, options, ., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {]
[), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, )]
[&&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }]
[., ambiguateProperties, &&, (, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, )]
[), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, )]
[), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF]
[==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming]
[., propertyRenaming, ==, PropertyRenamingPolicy, ., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options]
[), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF]
[., ALL_UNQUOTED, ), ), {, passes, ., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy]
[;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, ), ;]
[., add, (, ambiguateProperties, ), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {, passes, .]
[), ;, }, if, (, options, ., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, )]
[), {, passes, ., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add]
[!=, PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, )]
[., propertyRenaming, !=, PropertyRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameProperties, ), ;, }, if, (, options, .]
[), {, passes, ., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add]
[., OFF, ), {, passes, ., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, ), {, passes]
[;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (, options]
[., add, (, renameProperties, ), ;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, )]
[), ;, }, if, (, options, ., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (]
[), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (, options, ., convertToDottedProperties, ), {, passes, ., add]
[., reserveRawExports, ), {, passes, ., add, (, gatherRawExports, ), ;, }, if, (, options, ., convertToDottedProperties, ), {, passes]
[;, }, if, (, options, ., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (, options]
[., add, (, gatherRawExports, ), ;, }, if, (, options, ., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, )]
[), ;, }, if, (, options, ., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (]
[), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add]
[., convertToDottedProperties, ), {, passes, ., add, (, convertToDottedProperties, ), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes]
[;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !]
[., add, (, convertToDottedProperties, ), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, )]
[), ;, }, if, (, options, ., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (]
[), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, )]
[., rewriteFunctionExpressions, ), {, passes, ., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty]
[;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {, passes, .]
[., add, (, rewriteFunctionExpressions, ), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||, options, .]
[), ;, }, if, (, !, options, ., aliasableStrings, ., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {, passes]
[), {, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, ), {, passes, ., add]
[||, options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, )]
[||, options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, )]
[., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (]
[., aliasableStrings, ., isEmpty, (, ), ||, options, ., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }]
[), {, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, ), {, passes, ., add]
[., aliasAllStrings, ), {, passes, ., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, ), {, passes]
[;, }, if, (, options, ., aliasExternals, ), {, passes, ., add, (, aliasExternals, ), ;, }, if, (, options]
[., add, (, aliasStrings, ), ;, }, if, (, options, ., aliasExternals, ), {, passes, ., add, (, aliasExternals, )]
[), ;, }, if, (, options, ., aliasExternals, ), {, passes, ., add, (, aliasExternals, ), ;, }, if, (]
[), {, passes, ., add, (, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {, passes, ., add]
[., aliasExternals, ), {, passes, ., add, (, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {, passes]
[;, }, if, (, options, ., aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }, passes, ., add]
[., add, (, aliasExternals, ), ;, }, if, (, options, ., aliasKeywords, ), {, passes, ., add, (, aliasKeywords, )]
[), ;, }, if, (, options, ., aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }, passes, .]
[), {, passes, ., add, (, aliasKeywords, ), ;, }, passes, ., add, (, markUnnormalized, ), ;, if, (, options]
[., aliasKeywords, ), {, passes, ., add, (, aliasKeywords, ), ;, }, passes, ., add, (, markUnnormalized, ), ;, if]
[;, }, passes, ., add, (, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add, (]
[., add, (, aliasKeywords, ), ;, }, passes, ., add, (, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, )]
[), ;, }, passes, ., add, (, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add]
[;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (, options, ., foldConstants]
[., add, (, markUnnormalized, ), ;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;]
[), ;, if, (, options, ., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (, options, .]
[), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (, options, ., foldConstants, ), {, passes, ., add, (]
[., coalesceVariableNames, ), {, passes, ., add, (, coalesceVariableNames, ), ;, if, (, options, ., foldConstants, ), {, passes, .]
[;, if, (, options, ., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (, options]
[., add, (, coalesceVariableNames, ), ;, if, (, options, ., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;]
[), ;, if, (, options, ., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (]
[), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, .]
[., foldConstants, ), {, passes, ., add, (, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {]
[;, }, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;, passes, ., add]
[., add, (, peepholeOptimizations, ), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign]
[), ;, }, }, if, (, options, ., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;, passes, .]
[), {, passes, ., add, (, exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add]
[., collapseVariableDeclarations, ), {, passes, ., add, (, exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes]
[;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (, options, .]
[., add, (, exploitAssign, ), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, )]
[), ;, passes, ., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (, options]
[;, }, passes, ., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, .]
[., add, (, collapseVariableDeclarations, ), ;, }, passes, ., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=]
[), ;, }, passes, ., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes]
[;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (]
[., add, (, denormalize, ), ;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions]
[), ;, if, (, options, ., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if]
[), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, )]
[!=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, .]
[., instrumentationTemplate, !=, null, ), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=]
[), {, passes, ., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, )]
[;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;]
[., add, (, instrumentFunctions, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, .]
[), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, )]
[), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, )]
[!=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=]
[., variableRenaming, !=, VariableRenamingPolicy, ., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, .]
[), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, )]
[., ALL, ), {, passes, ., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, .]
[;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, ), ;]
[., add, (, invertContextualRenaming, ), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {, passes, .]
[), ;, }, if, (, options, ., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, )]
[), {, passes, ., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add]
[!=, VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, )]
[., variableRenaming, !=, VariableRenamingPolicy, ., OFF, ), {, passes, ., add, (, renameVars, ), ;, }, if, (, options, .]
[), {, passes, ., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add]
[., OFF, ), {, passes, ., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes]
[;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (, options]
[., add, (, renameVars, ), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, )]
[), ;, }, if, (, options, ., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (]
[), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (, options, ., processObjectPropertyString, ), {, passes, ., add]
[., groupVariableDeclarations, ), {, passes, ., add, (, groupVariableDeclarations, ), ;, }, if, (, options, ., processObjectPropertyString, ), {, passes]
[;, }, if, (, options, ., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (, options]
[., add, (, groupVariableDeclarations, ), ;, }, if, (, options, ., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, )]
[), ;, }, if, (, options, ., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (]
[), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (, options, ., labelRenaming, ), {, passes, ., add]
[., processObjectPropertyString, ), {, passes, ., add, (, objectPropertyStringPostprocess, ), ;, }, if, (, options, ., labelRenaming, ), {, passes]
[;, }, if, (, options, ., labelRenaming, ), {, passes, ., add, (, renameLabels, ), ;, }, if, (, options]
[., add, (, objectPropertyStringPostprocess, ), ;, }, if, (, options, ., labelRenaming, ), {, passes, ., add, (, renameLabels, )]
[), ;, }, if, (, options, ., labelRenaming, ), {, passes, ., add, (, renameLabels, ), ;, }, if, (]
[), {, passes, ., add, (, renameLabels, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add]
[., labelRenaming, ), {, passes, ., add, (, renameLabels, ), ;, }, if, (, options, ., foldConstants, ), {, passes]
[;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (, options]
[., add, (, renameLabels, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, )]
[), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (]
[), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, )]
[., foldConstants, ), {, passes, ., add, (, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, .]
[;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;]
[., add, (, latePeepholeOptimizations, ), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, .]
[), ;, }, if, (, options, ., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, )]
[), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options]
[==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, )]
[., anonymousFunctionNaming, ==, AnonymousFunctionNamingPolicy, ., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (]
[), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options]
[., UNMAPPED, ), {, passes, ., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if]
[;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (]
[., add, (, nameUnmappedAnonymousFunctions, ), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=]
[), ;, }, passes, ., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if]
[;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace]
[., add, (, stripSideEffectProtection, ), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, .]
[), ;, if, (, options, ., renamePrefixNamespace, !=, null, ), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, .]
[), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw]
[!=, null, ), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), )]
[., renamePrefixNamespace, !=, null, ), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (]
[), {, if, (, !, GLOBAL_SYMBOL_NAMESPACE_PATTERN, ., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw]
[), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, )]
[), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, )]
[., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes, .]
[., matcher, (, options, ., renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options]
[), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;, }, passes]
[., renamePrefixNamespace, ), ., matches, (, ), ), {, throw, new, IllegalArgumentException, (, "Illegal character in renamePrefixNamespace name: ", +, options, ., renamePrefixNamespace, ), ;]
[;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, ., add]
[), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, .]
[+, options, ., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst]
[), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, .]
[., renamePrefixNamespace, ), ;, }, passes, ., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;]
[;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, ., add, (, sanityCheckVars, ), ;, return, passes, ;, }]
[., add, (, rescopeGlobalSymbols, ), ;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, ., add, (, sanityCheckVars, )]
[), ;, }, passes, ., add, (, sanityCheckAst, ), ;, passes, ., add, (, sanityCheckVars, ), ;, return, passes, ;]
[;, passes, ., add, (, sanityCheckVars, ), ;, return, passes, ;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (, )]
[., add, (, sanityCheckAst, ), ;, passes, ., add, (, sanityCheckVars, ), ;, return, passes, ;, }, private, List, <]
[), ;, passes, ., add, (, sanityCheckVars, ), ;, return, passes, ;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (]
[;, return, passes, ;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (, ), {, List, <, PassFactory, >, passes, =]
[., add, (, sanityCheckVars, ), ;, return, passes, ;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (, ), {, List]
[), ;, return, passes, ;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (, ), {, List, <, PassFactory, >, passes]
[;, }, private, List, <, PassFactory, >, getMainOptimizationLoop, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList]
[;, if, (, options, ., inlineGetters, ), {, passes, ., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (]
[., newArrayList, (, ), ;, if, (, options, ., inlineGetters, ), {, passes, ., add, (, inlineSimpleMethods, ), ;, }]
[), {, passes, ., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if]
[., inlineGetters, ), {, passes, ., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), )]
[;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions]
[., add, (, inlineSimpleMethods, ), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, .]
[), ;, }, passes, ., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||, options, .]
[;, if, (, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }]
[., addAll, (, getCodeRemovingPasses, (, ), ), ;, if, (, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {, passes]
[), ;, if, (, options, ., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;]
[), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, ), {, passes, ., add]
[||, options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, )]
[., inlineFunctions, ||, options, ., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, .]
[), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, ), {, passes, ., add]
[., inlineLocalFunctions, ), {, passes, ., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, ), {, passes]
[;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =]
[., add, (, inlineFunctions, ), ;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, )]
[), ;, }, if, (, options, ., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls]
[), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters]
[., inlineProperties, ), {, passes, ., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options]
[;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options]
[., add, (, inlineProperties, ), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, .]
[), ;, }, boolean, runOptimizeCalls, =, options, ., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (]
[;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {, passes]
[||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, .]
[||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {]
[., optimizeCalls, ||, options, ., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars]
[||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, .]
[., optimizeParameters, ||, options, ., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (]
[;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {, passes]
[., optimizeReturns, ;, if, (, options, ., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, )]
[), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !]
[||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;]
[., removeUnusedVars, ||, options, ., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination]
[), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !]
[., removeUnusedLocalVars, ), {, if, (, options, ., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if]
[), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !, runOptimizeCalls, ), {, passes, ., add, (]
[., deadAssignmentElimination, ), {, passes, ., add, (, deadAssignmentsElimination, ), ;, }, if, (, !, runOptimizeCalls, ), {, passes, .]
[;, }, if, (, !, runOptimizeCalls, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls]
[., add, (, deadAssignmentsElimination, ), ;, }, if, (, !, runOptimizeCalls, ), {, passes, ., add, (, removeUnusedVars, ), ;]
[), ;, }, if, (, !, runOptimizeCalls, ), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (]
[), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (]
[), {, passes, ., add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (]
[;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (, optimizeCallsAndRemoveUnusedVars, ), ;, }, assertAllLoopablePasses, (, passes, )]
[., add, (, removeUnusedVars, ), ;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (, optimizeCallsAndRemoveUnusedVars, ), ;]
[), ;, }, }, if, (, runOptimizeCalls, ), {, passes, ., add, (, optimizeCallsAndRemoveUnusedVars, ), ;, }, assertAllLoopablePasses, (, passes]
[), {, passes, ., add, (, optimizeCallsAndRemoveUnusedVars, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, private]
[;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, private, List, <, PassFactory, >, getCodeRemovingPasses, (, ), {]
[., add, (, optimizeCallsAndRemoveUnusedVars, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, private, List, <, PassFactory]
[), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, private, List, <, PassFactory, >, getCodeRemovingPasses, (, )]
[;, return, passes, ;, }, private, List, <, PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes, =]
[), ;, return, passes, ;, }, private, List, <, PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes]
[;, }, private, List, <, PassFactory, >, getCodeRemovingPasses, (, ), {, List, <, PassFactory, >, passes, =, Lists, ., newArrayList]
[;, if, (, options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;]
[., newArrayList, (, ), ;, if, (, options, ., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {, passes, ., add]
[), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, )]
[&&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables]
[., collapseObjectLiterals, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options]
[), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, )]
[), {, passes, ., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, )]
[;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;]
[., add, (, collapseObjectLiterals, ), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {, passes, .]
[), ;, }, if, (, options, ., inlineVariables, ||, options, ., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, )]
[), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, .]
[||, options, ., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars]
[., inlineVariables, ||, options, ., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options]
[), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, .]
[., inlineLocalVariables, ), {, passes, ., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars, ), {]
[;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, ., add, (, inlineConstants, ), ;, }, if, (]
[., add, (, inlineVariables, ), ;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, ., add, (, inlineConstants]
[), ;, }, else, if, (, options, ., inlineConstantVars, ), {, passes, ., add, (, inlineConstants, ), ;, }, if]
[), {, passes, ., add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add]
[., inlineConstantVars, ), {, passes, ., add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {, passes]
[;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;, passes, ., add, (]
[., add, (, inlineConstants, ), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, minimizeExitPoints, )]
[), ;, }, if, (, options, ., foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;, passes, ., add]
[), {, passes, ., add, (, minimizeExitPoints, ), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (, options]
[., foldConstants, ), {, passes, ., add, (, minimizeExitPoints, ), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if]
[;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add, (]
[., add, (, minimizeExitPoints, ), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (, options, ., removeDeadCode, )]
[), ;, passes, ., add, (, peepholeOptimizations, ), ;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add]
[;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (, options]
[., add, (, peepholeOptimizations, ), ;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, )]
[), ;, }, if, (, options, ., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (]
[), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add]
[., removeDeadCode, ), {, passes, ., add, (, removeUnreachableCode, ), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes]
[;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options]
[., add, (, removeUnreachableCode, ), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, )]
[), ;, }, if, (, options, ., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (]
[), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, )]
[., removeUnusedPrototypeProperties, ), {, passes, ., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden]
[;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, removeUnusedClassProperties, )]
[., add, (, removeUnusedPrototypeProperties, ), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {, passes]
[), ;, }, if, (, options, ., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, removeUnusedClassProperties]
[), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final]
[&&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;]
[., removeUnusedClassProperties, &&, !, isInliningForbidden, (, ), ), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes]
[), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final]
[), {, passes, ., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final]
[;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =, new, HotSwapPassFactory, (, "checkSideEffects", ,]
[., add, (, removeUnusedClassProperties, ), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =]
[), ;, }, assertAllLoopablePasses, (, passes, ), ;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =, new, HotSwapPassFactory, (, "checkSideEffects"]
[;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =, new, HotSwapPassFactory, (, "checkSideEffects", ,, true, ), {, @, Override, protected]
[), ;, return, passes, ;, }, final, HotSwapPassFactory, checkSideEffects, =, new, HotSwapPassFactory, (, "checkSideEffects", ,, true, ), {, @, Override]
[;, }, final, HotSwapPassFactory, checkSideEffects, =, new, HotSwapPassFactory, (, "checkSideEffects", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (]
[;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, .]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, boolean, protectHiddenSideEffects, =, options, ., protectHiddenSideEffects, &&]
[;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects]
[&&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :]
[., protectHiddenSideEffects, &&, !, options, ., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, .]
[;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects]
[;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects]
[., ideMode, ;, return, new, CheckSideEffects, (, compiler, ,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF]
[;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final]
[,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,, true, ), {, @]
[?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new]
[., checkSuspiciousCode, ?, CheckLevel, ., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection]
[:, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,]
[., WARNING, :, CheckLevel, ., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (]
[,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,, true, ), {, @]
[., OFF, ,, protectHiddenSideEffects, ), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,, true, )]
[), ;, }, }, ;, final, PassFactory, stripSideEffectProtection, =, new, PassFactory, (, "stripSideEffectProtection", ,, true, ), {, @, Override, protected]
[;, final, HotSwapPassFactory, suspiciousCode, =, new, HotSwapPassFactory, (, "suspiciousCode", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CheckSideEffects, ., StripProtection]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CheckSideEffects, ., StripProtection, (, compiler]
[;, }, }, ;, final, HotSwapPassFactory, suspiciousCode, =, new, HotSwapPassFactory, (, "suspiciousCode", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[), ;, }, }, ;, final, HotSwapPassFactory, suspiciousCode, =, new, HotSwapPassFactory, (, "suspiciousCode", ,, true, ), {, @, Override, protected]
[;, private, void, assertAllOneTimePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes, ), {]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, List, <, Callback, >, sharedCallbacks]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, List, <, Callback, >, sharedCallbacks, =, Lists]
[;, if, (, options, ., checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if]
[., newArrayList, (, ), ;, if, (, options, ., checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, )]
[), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups]
[., checkSuspiciousCode, ), {, sharedCallbacks, ., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables]
[;, }, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis]
[., add, (, new, CheckSuspiciousCode, (, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, )]
[), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new]
[), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables, (]
[., enables, (, DiagnosticGroups, ., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;]
[), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables]
[., GLOBAL_THIS, ), ), {, sharedCallbacks, ., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options]
[;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement]
[., add, (, new, CheckGlobalThis, (, compiler, ), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT]
[), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new]
[), ), ;, }, if, (, options, ., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (]
[), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return, combineChecks, (, compiler, ,, sharedCallbacks]
[., enables, (, DiagnosticGroups, ., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;]
[), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return, combineChecks, (, compiler, ,]
[., DEBUGGER_STATEMENT_PRESENT, ), ), {, sharedCallbacks, ., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return, combineChecks, (]
[;, }, return, combineChecks, (, compiler, ,, sharedCallbacks, ), ;, }, }, ;, private, void, assertAllOneTimePasses, (, List, <, PassFactory]
[., add, (, new, CheckDebuggerStatement, (, compiler, ), ), ;, }, return, combineChecks, (, compiler, ,, sharedCallbacks, ), ;, }]
[), ;, }, return, combineChecks, (, compiler, ,, sharedCallbacks, ), ;, }, }, ;, private, void, assertAllOneTimePasses, (, List, <]
[), ), ;, }, return, combineChecks, (, compiler, ,, sharedCallbacks, ), ;, }, }, ;, private, void, assertAllOneTimePasses, (, List]
[;, }, }, ;, private, void, assertAllOneTimePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :]
[,, sharedCallbacks, ), ;, }, }, ;, private, void, assertAllOneTimePasses, (, List, <, PassFactory, >, passes, ), {, for, (]
[), ;, }, }, ;, private, void, assertAllOneTimePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass]
[), {, Preconditions, ., checkState, (, pass, ., isOneTimePass, (, ), ), ;, }, }, private, void, assertAllLoopablePasses, (, List]
[;, }, }, private, void, assertAllLoopablePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :, passes]
[., checkState, (, pass, ., isOneTimePass, (, ), ), ;, }, }, private, void, assertAllLoopablePasses, (, List, <, PassFactory, >]
[), ;, }, }, private, void, assertAllLoopablePasses, (, List, <, PassFactory, >, passes, ), {, for, (, PassFactory, pass, :]
[., isOneTimePass, (, ), ), ;, }, }, private, void, assertAllLoopablePasses, (, List, <, PassFactory, >, passes, ), {, for]
[), {, Preconditions, ., checkState, (, !, pass, ., isOneTimePass, (, ), ), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =]
[;, }, }, final, HotSwapPassFactory, checkControlStructures, =, new, HotSwapPassFactory, (, "checkControlStructures", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create]
[., checkState, (, !, pass, ., isOneTimePass, (, ), ), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =, new, HotSwapPassFactory, (]
[), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =, new, HotSwapPassFactory, (, "checkControlStructures", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =, new, HotSwapPassFactory, (, "checkControlStructures", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[., isOneTimePass, (, ), ), ;, }, }, final, HotSwapPassFactory, checkControlStructures, =, new, HotSwapPassFactory, (, "checkControlStructures", ,, true, ), {]
[;, final, HotSwapPassFactory, checkRequires, =, new, HotSwapPassFactory, (, "checkRequires", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ControlStructureCheck, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ControlStructureCheck, (, compiler, ), ;, }]
[;, }, }, ;, final, HotSwapPassFactory, checkRequires, =, new, HotSwapPassFactory, (, "checkRequires", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[), ;, }, }, ;, final, HotSwapPassFactory, checkRequires, =, new, HotSwapPassFactory, (, "checkRequires", ,, true, ), {, @, Override, protected]
[;, final, HotSwapPassFactory, checkProvides, =, new, HotSwapPassFactory, (, "checkProvides", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckRequiresForConstructors, (, compiler, ,]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckRequiresForConstructors, (, compiler, ,, options, .]
[;, }, }, ;, final, HotSwapPassFactory, checkProvides, =, new, HotSwapPassFactory, (, "checkProvides", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[,, options, ., checkRequires, ), ;, }, }, ;, final, HotSwapPassFactory, checkProvides, =, new, HotSwapPassFactory, (, "checkProvides", ,, true, )]
[), ;, }, }, ;, final, HotSwapPassFactory, checkProvides, =, new, HotSwapPassFactory, (, "checkProvides", ,, true, ), {, @, Override, protected]
[., checkRequires, ), ;, }, }, ;, final, HotSwapPassFactory, checkProvides, =, new, HotSwapPassFactory, (, "checkProvides", ,, true, ), {, @]
[;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set.", ), ;, final, PassFactory]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckProvides, (, compiler, ,]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckProvides, (, compiler, ,, options, .]
[;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set.", )]
[,, options, ., checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR"]
[), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set."]
[., checkProvides, ), ;, }, }, ;, private, static, final, DiagnosticType, GENERATE_EXPORTS_ERROR, =, DiagnosticType, ., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property "]
[;, final, PassFactory, generateExports, =, new, PassFactory, (, "generateExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[., error, (, "JSC_GENERATE_EXPORTS_ERROR", ,, "Exports can only be generated if export symbol/property ", +, "functions are set.", ), ;, final, PassFactory, generateExports, =, new, PassFactory, (, "generateExports", ,, true]
[,, "Exports can only be generated if export symbol/property ", +, "functions are set.", ), ;, final, PassFactory, generateExports, =, new, PassFactory, (, "generateExports", ,, true, ), {, @, Override]
[), ;, final, PassFactory, generateExports, =, new, PassFactory, (, "generateExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (]
[+, "functions are set.", ), ;, final, PassFactory, generateExports, =, new, PassFactory, (, "generateExports", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, final, PassFactory, generateExports, =, new, PassFactory, (, "generateExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (]
[;, final, PassFactory, exportTestFunctions, =, new, PassFactory, (, "exportTestFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, )]
[;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {]
[., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, )]
[), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), )]
[&&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (]
[!=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, .]
[., getExportSymbolFunction, (, ), !=, null, &&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (]
[&&, convention, ., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (]
[), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), )]
[!=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (]
[., getExportPropertyFunction, (, ), !=, null, ), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,]
[), {, return, new, GenerateExports, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), )]
[;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, exportTestFunctions]
[,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass]
[,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;]
[., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler]
[), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory]
[., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }]
[;, }, }, }, ;, final, PassFactory, exportTestFunctions, =, new, PassFactory, (, "exportTestFunctions", ,, true, ), {, @, Override, protected]
[,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, exportTestFunctions, =, new, PassFactory, (, "exportTestFunctions", ,, true, ), {]
[), ;, }, }, }, ;, final, PassFactory, exportTestFunctions, =, new, PassFactory, (, "exportTestFunctions", ,, true, ), {, @, Override]
[;, final, PassFactory, gatherRawExports, =, new, PassFactory, (, "gatherRawExports", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, CodingConvention, convention, =, compiler, ., getCodingConvention, (, )]
[;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,, convention, .]
[., getCodingConvention, (, ), ;, if, (, convention, ., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (]
[), {, return, new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), )]
[!=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (]
[., getExportSymbolFunction, (, ), !=, null, ), {, return, new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,]
[), {, return, new, ExportTestFunctions, (, compiler, ,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), )]
[;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, gatherRawExports]
[,, convention, ., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass]
[,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;]
[., getExportSymbolFunction, (, ), ,, convention, ., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler]
[), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory]
[., getExportPropertyFunction, (, ), ), ;, }, else, {, return, new, ErrorPass, (, compiler, ,, GENERATE_EXPORTS_ERROR, ), ;, }, }]
[;, }, }, }, ;, final, PassFactory, gatherRawExports, =, new, PassFactory, (, "gatherRawExports", ,, true, ), {, @, Override, protected]
[,, GENERATE_EXPORTS_ERROR, ), ;, }, }, }, ;, final, PassFactory, gatherRawExports, =, new, PassFactory, (, "gatherRawExports", ,, true, ), {]
[), ;, }, }, }, ;, final, PassFactory, gatherRawExports, =, new, PassFactory, (, "gatherRawExports", ,, true, ), {, @, Override]
[;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (, "closurePrimitives", ,, true, ), {, @, Override]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, GatherRawExports, pass, =, new, GatherRawExports]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, GatherRawExports, pass, =, new, GatherRawExports, (, compiler]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[;, }, }, ;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (, "closurePrimitives", ,, true, )]
[;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll]
[., process, (, externs, ,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet]
[,, root, ), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }]
[), ;, if, (, exportedNames, ==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, .]
[), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, )]
[==, null, ), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames]
[), {, exportedNames, =, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, )]
[=, Sets, ., newHashSet, (, ), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }]
[;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }, }, ;, }, }, ;, @]
[., newHashSet, (, ), ;, }, exportedNames, ., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }, }, ;]
[;, }, }, ;, }, }, ;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (, "closurePrimitives"]
[., addAll, (, pass, ., getExportedVariableNames, (, ), ), ;, }, }, ;, }, }, ;, @, SuppressWarnings, (, "deprecation"]
[), ;, }, }, ;, }, }, ;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (]
[., getExportedVariableNames, (, ), ), ;, }, }, ;, }, }, ;, @, SuppressWarnings, (, "deprecation", ), final, HotSwapPassFactory, closurePrimitives]
[final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (, "closurePrimitives", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler]
[), final, HotSwapPassFactory, closurePrimitives, =, new, HotSwapPassFactory, (, "closurePrimitives", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[;, final, PassFactory, jqueryAliases, =, new, PassFactory, (, "jqueryAliases", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, final, ProcessClosurePrimitives, pass]
[;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (, compiler, ,, preprocessorSymbolTable, ,, options, ., brokenClosureRequiresLevel, ), ;, return, new, HotSwapCompilerPass]
[), ;, final, ProcessClosurePrimitives, pass, =, new, ProcessClosurePrimitives, (, compiler, ,, preprocessorSymbolTable, ,, options, ., brokenClosureRequiresLevel, ), ;, return, new]
[;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[,, preprocessorSymbolTable, ,, options, ., brokenClosureRequiresLevel, ), ;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (]
[,, options, ., brokenClosureRequiresLevel, ), ;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs]
[), ;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[., brokenClosureRequiresLevel, ), ;, return, new, HotSwapCompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node]
[;, }, }, ;, final, PassFactory, jqueryAliases, =, new, PassFactory, (, "jqueryAliases", ,, true, ), {, @, Override, protected, CompilerPass]
[;, exportedNames, =, pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node]
[., process, (, externs, ,, root, ), ;, exportedNames, =, pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public]
[,, root, ), ;, exportedNames, =, pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node]
[), ;, exportedNames, =, pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,]
[=, pass, ., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, )]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, pass, ., hotSwapScript, (, scriptRoot]
[., getExportedVariableNames, (, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, pass]
[;, }, }, ;, }, }, ;, final, PassFactory, jqueryAliases, =, new, PassFactory, (, "jqueryAliases", ,, true, ), {, @]
[., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, jqueryAliases, =, new, PassFactory]
[,, originalRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, jqueryAliases, =, new, PassFactory, (, "jqueryAliases", ,, true]
[), ;, }, }, ;, }, }, ;, final, PassFactory, jqueryAliases, =, new, PassFactory, (, "jqueryAliases", ,, true, ), {]
[;, final, PassFactory, replaceMessages, =, new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExpandJqueryAliases, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExpandJqueryAliases, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, replaceMessages, =, new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, replaceMessages, =, new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessages, (, compiler, ,, options]
[;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., messageBundle, ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ,, false, )]
[,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ,, false, ), ;, }, }, ;]
[., messageBundle, ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ,, false, ), ;, }]
[,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ,, false, ), ;, }, }, ;, final, PassFactory]
[,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (, "replaceMessages", ,, true, ), {, @]
[., getFromParams, (, true, ,, false, ), ,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory]
[., Style, ., getFromParams, (, true, ,, false, ), ,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =]
[,, false, ), ,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (, "replaceMessages", ,, true]
[), ,, false, ), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (, "replaceMessages", ,, true, ), {]
[), ;, }, }, ;, final, PassFactory, replaceMessagesForChrome, =, new, PassFactory, (, "replaceMessages", ,, true, ), {, @, Override, protected]
[;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ReplaceMessagesForChrome, (, compiler, ,, new]
[;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[,, new, GoogleJsMessageIdGenerator, (, options, ., tcProjectId, ), ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false]
[,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory]
[), ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final]
[., tcProjectId, ), ,, true, ,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }]
[,, JsMessage, ., Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =]
[), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {, @, Override, protected]
[., getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases"]
[., Style, ., getFromParams, (, true, ,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory]
[,, false, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {]
[), ), ;, }, }, ;, final, HotSwapPassFactory, closureGoogScopeAliases, =, new, HotSwapPassFactory, (, "closureGoogScopeAliases", ,, true, ), {, @, Override]
[;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, maybeInitializePreprocessorSymbolTable, (, compiler, ), ;, return, new, ScopedAliases]
[;, return, new, ScopedAliases, (, compiler, ,, preprocessorSymbolTable, ,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }, ;, final]
[), ;, return, new, ScopedAliases, (, compiler, ,, preprocessorSymbolTable, ,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }, ;]
[;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[,, preprocessorSymbolTable, ,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (]
[,, options, ., getAliasTransformationHandler, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,]
[), ;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,, true, ), {, @, Override, protected]
[., getAliasTransformationHandler, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, closureRewriteGoogClass, =, new, HotSwapPassFactory, (, "closureRewriteGoogClass", ,, true, )]
[;, final, PassFactory, closureCheckGetCssName, =, new, PassFactory, (, "closureCheckGetCssName", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClosureRewriteClass, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClosureRewriteClass, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, closureCheckGetCssName, =, new, PassFactory, (, "closureCheckGetCssName", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, closureCheckGetCssName, =, new, PassFactory, (, "closureCheckGetCssName", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (, "closureReplaceGetCssName", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, String, blacklist, =, options, ., checkMissingGetCssNameBlacklist, ;, Preconditions]
[;, Preconditions, ., checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return]
[., checkMissingGetCssNameBlacklist, ;, Preconditions, ., checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", )]
[;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName]
[., checkState, (, blacklist, !=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName]
[,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;]
[&&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel]
[!=, null, &&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options]
[&&, !, blacklist, ., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel]
[,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;]
[,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;]
[., isEmpty, (, ), ,, "Not checking use of goog.getCssName because of empty blacklist.", ), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, )]
[), ;, return, new, CheckMissingGetCssName, (, compiler, ,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;, final, PassFactory]
[;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (, "closureReplaceGetCssName", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (, "closureReplaceGetCssName", ,]
[,, blacklist, ), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (, "closureReplaceGetCssName", ,, true, ), {, @]
[., checkMissingGetCssNameLevel, ,, blacklist, ), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (, "closureReplaceGetCssName", ,, true, )]
[), ;, }, }, ;, final, PassFactory, closureReplaceGetCssName, =, new, PassFactory, (, "closureReplaceGetCssName", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (, "createSyntheticBlocks", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (, "createSyntheticBlocks", ,, true, ), {, @, Override, protected, CompilerPass]
[;, if, (, options, ., gatherCssNames, ), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =]
[), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames]
[., gatherCssNames, ), {, newCssNames, =, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler]
[=, Maps, ., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, .]
[;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process]
[., newHashMap, (, ), ;, }, ReplaceCssNames, pass, =, new, ReplaceCssNames, (, compiler, ,, newCssNames, ,, options, ., cssRenamingWhitelist, )]
[;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;]
[,, newCssNames, ,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames]
[,, options, ., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }]
[), ;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }]
[., cssRenamingWhitelist, ), ;, pass, ., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;]
[;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (, "createSyntheticBlocks", ,]
[., process, (, externs, ,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory]
[,, jsRoot, ), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory]
[), ;, cssNames, =, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (, "createSyntheticBlocks"]
[=, newCssNames, ;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (, "createSyntheticBlocks", ,, true, )]
[;, }, }, ;, }, }, ;, final, PassFactory, createSyntheticBlocks, =, new, PassFactory, (, "createSyntheticBlocks", ,, true, ), {, @]
[;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (, "peepholeOptimizations", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CreateSyntheticBlocks, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (, "peepholeOptimizations", ,, false, ), {, @, Override, protected, CompilerPass]
[,, options, ., syntheticBlockStartMarker, ,, options, ., syntheticBlockEndMarker, ), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (]
[,, options, ., syntheticBlockEndMarker, ), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (, "peepholeOptimizations", ,, false, )]
[., syntheticBlockStartMarker, ,, options, ., syntheticBlockEndMarker, ), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (, "peepholeOptimizations", ,]
[), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (, "peepholeOptimizations", ,, false, ), {, @, Override, protected]
[., syntheticBlockEndMarker, ), ;, }, }, ;, final, PassFactory, peepholeOptimizations, =, new, PassFactory, (, "peepholeOptimizations", ,, false, ), {, @]
[;, final, PassFactory, latePeepholeOptimizations, =, new, PassFactory, (, "latePeepholeOptimizations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, false, ;]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, false, ;, return, new]
[;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new]
[;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =, new, PassFactory, (, "latePeepholeOptimizations", ,, true, ), {, @, Override, protected, CompilerPass]
[,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants]
[,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments]
[), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new]
[,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }]
[), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }]
[,, new, PeepholeFoldConstants, (, late, ), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =]
[,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =, new, PassFactory, (, "latePeepholeOptimizations", ,, true]
[), ,, new, PeepholeCollectPropertyAssignments, (, ), ), ;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =, new, PassFactory, (, "latePeepholeOptimizations", ,]
[), ;, }, }, ;, final, PassFactory, latePeepholeOptimizations, =, new, PassFactory, (, "latePeepholeOptimizations", ,, true, ), {, @, Override, protected]
[;, final, HotSwapPassFactory, checkVars, =, new, HotSwapPassFactory, (, "checkVars", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, true, ;]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, final, boolean, late, =, true, ;, return, new]
[;, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (]
[;, }, }, ;, final, HotSwapPassFactory, checkVars, =, new, HotSwapPassFactory, (, "checkVars", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[,, new, StatementFusion, (, ), ,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (]
[,, new, PeepholeRemoveDeadCode, (, ), ,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants]
[,, new, PeepholeSubstituteAlternateSyntax, (, late, ), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new]
[,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, ReorderConstantExpression, (, ), ), ;, }]
[), ,, new, PeepholeReplaceKnownMethods, (, late, ), ,, new, PeepholeFoldConstants, (, late, ), ,, new, ReorderConstantExpression, (, ), ), ;]
[,, new, PeepholeFoldConstants, (, late, ), ,, new, ReorderConstantExpression, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, checkVars, =]
[), ,, new, PeepholeFoldConstants, (, late, ), ,, new, ReorderConstantExpression, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, checkVars]
[,, new, ReorderConstantExpression, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, checkVars, =, new, HotSwapPassFactory, (, "checkVars", ,, true]
[), ,, new, ReorderConstantExpression, (, ), ), ;, }, }, ;, final, HotSwapPassFactory, checkVars, =, new, HotSwapPassFactory, (, "checkVars", ,]
[), ;, }, }, ;, final, HotSwapPassFactory, checkVars, =, new, HotSwapPassFactory, (, "checkVars", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, checkRegExp, =, new, PassFactory, (, "checkRegExp", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, checkRegExp, =, new, PassFactory, (, "checkRegExp", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, checkRegExp, =, new, PassFactory, (, "checkRegExp", ,, true, ), {, @, Override, protected]
[;, final, HotSwapPassFactory, checkVariableReferences, =, new, HotSwapPassFactory, (, "checkVariableReferences", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, CheckRegExp, pass, =, new]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, CheckRegExp, pass, =, new, CheckRegExp, (]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[), ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =, new, HotSwapPassFactory, (, "checkVariableReferences", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[;, compiler, ., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory]
[., process, (, externs, ,, root, ), ;, compiler, ., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }]
[,, root, ), ;, compiler, ., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }]
[), ;, compiler, ., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }, ;, final]
[;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =, new, HotSwapPassFactory, (, "checkVariableReferences", ,, true, ), {, @]
[., setHasRegExpGlobalReferences, (, pass, ., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =]
[), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =, new, HotSwapPassFactory, (, "checkVariableReferences", ,, true, ), {]
[., isGlobalRegExpPropertiesUsed, (, ), ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkVariableReferences, =, new, HotSwapPassFactory, (, "checkVariableReferences"]
[;, final, PassFactory, objectPropertyStringPreprocess, =, new, PassFactory, (, "ObjectPropertyStringPreprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VariableReferenceCheck, (, compiler, ,]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VariableReferenceCheck, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, objectPropertyStringPreprocess, =, new, PassFactory, (, "ObjectPropertyStringPreprocess", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., aggressiveVarCheck, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPreprocess, =, new, PassFactory, (, "ObjectPropertyStringPreprocess", ,, true, )]
[), ;, }, }, ;, final, PassFactory, objectPropertyStringPreprocess, =, new, PassFactory, (, "ObjectPropertyStringPreprocess", ,, true, ), {, @, Override, protected]
[., aggressiveVarCheck, ), ;, }, }, ;, final, PassFactory, objectPropertyStringPreprocess, =, new, PassFactory, (, "ObjectPropertyStringPreprocess", ,, true, ), {, @]
[;, final, HotSwapPassFactory, resolveTypes, =, new, HotSwapPassFactory, (, "resolveTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPreprocess, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPreprocess, (, compiler, ), ;, }]
[;, }, }, ;, final, HotSwapPassFactory, resolveTypes, =, new, HotSwapPassFactory, (, "resolveTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[), ;, }, }, ;, final, HotSwapPassFactory, resolveTypes, =, new, HotSwapPassFactory, (, "resolveTypes", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, clearTypedScopePass, =, new, PassFactory, (, "clearTypedScopePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GlobalTypeResolver, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GlobalTypeResolver, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, clearTypedScopePass, =, new, PassFactory, (, "clearTypedScopePass", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, clearTypedScopePass, =, new, PassFactory, (, "clearTypedScopePass", ,, true, ), {, @, Override, protected]
[;, final, HotSwapPassFactory, inferTypes, =, new, HotSwapPassFactory, (, "inferTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClearTypedScope, (, ), ;]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ClearTypedScope, (, ), ;, }, }]
[;, }, }, ;, final, HotSwapPassFactory, inferTypes, =, new, HotSwapPassFactory, (, "inferTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (, "inferJsDocInfo", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @]
[;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (, "inferJsDocInfo", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), ., process, (, externs, ,, root]
[., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), .]
[), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), ., process, (, externs, ,]
[;, makeTypeInference, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (]
[., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeTypeInference, (, compiler, ), ., process, (, externs, ,, root, ), ;]
[), ;, makeTypeInference, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeInference, (, compiler, ), .]
[., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot]
[), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node]
[,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeInference, (]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeInference, (, compiler, )]
[;, }, }, ;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (, "inferJsDocInfo", ,, true, ), {, @]
[., inferAllScopes, (, scriptRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (, "inferJsDocInfo"]
[), ., inferAllScopes, (, scriptRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (]
[), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, inferJsDocInfo, =, new, HotSwapPassFactory, (, "inferJsDocInfo", ,, true, ), {]
[;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory, (, "checkTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @]
[;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory, (, "checkTypes", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,, root]
[., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), .]
[), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,]
[;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (]
[., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,, root, ), ;]
[), ;, makeInferJsDocInfo, (, compiler, ), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (, compiler, ), .]
[., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot]
[), ., process, (, externs, ,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node]
[,, root, ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeInferJsDocInfo, (, compiler, )]
[;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory, (, "checkTypes", ,, true, ), {, @]
[., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory]
[), ., hotSwapScript, (, scriptRoot, ,, originalRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new]
[,, originalRoot, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory, (, "checkTypes", ,, true]
[), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkTypes, =, new, HotSwapPassFactory, (, "checkTypes", ,, true, ), {]
[;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory, (, "checkControlFlow", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @]
[;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory, (, "checkControlFlow", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, .]
[., checkNotNull, (, topScope, ), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (]
[), ;, Preconditions, ., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check]
[;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,, root, ), ;, compiler, .]
[., checkNotNull, (, getTypedScopeCreator, (, ), ), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (]
[), ;, TypeCheck, check, =, makeTypeCheck, (, compiler, ), ;, check, ., process, (, externs, ,, root, ), ;, compiler]
[;, check, ., process, (, externs, ,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, .]
[), ;, check, ., process, (, externs, ,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check]
[;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (, ), ), ;, }, @, Override, public]
[., process, (, externs, ,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (]
[,, root, ), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (, ), ), ;, }]
[), ;, compiler, ., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (, ), ), ;, }, @, Override]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeCheck, (, compiler, ), .]
[., setTypedPercent, (, check, ., getTypedPercent, (, ), ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,]
[., getErrorManager, (, ), ., setTypedPercent, (, check, ., getTypedPercent, (, ), ), ;, }, @, Override, public, void, hotSwapScript]
[), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, makeTypeCheck, (, compiler, )]
[., getTypedPercent, (, ), ), ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {]
[;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory, (, "checkControlFlow", ,, true, ), {, @]
[., check, (, scriptRoot, ,, false, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory]
[), ., check, (, scriptRoot, ,, false, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new]
[,, false, ), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory, (, "checkControlFlow", ,, true]
[), ;, }, }, ;, }, }, ;, final, HotSwapPassFactory, checkControlFlow, =, new, HotSwapPassFactory, (, "checkControlFlow", ,, true, ), {]
[;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory, (, "checkAccessControls", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, List, <, Callback, >, callbacks, =, Lists, .]
[;, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler]
[., newArrayList, (, ), ;, if, (, options, ., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (]
[), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (]
[., isOn, (, ), ), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), )]
[., checkUnreachableCode, ., isOn, (, ), ), {, callbacks, ., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode]
[;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add]
[., add, (, new, CheckUnreachableCode, (, compiler, ,, options, ., checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn]
[), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, .]
[,, options, ., checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, .]
[), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks]
[., checkUnreachableCode, ), ), ;, }, if, (, options, ., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, )]
[), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }, return, combineChecks]
[&&, options, ., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), )]
[., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options]
[., checkMissingReturn, ., isOn, (, ), &&, options, ., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler]
[), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }, return, combineChecks]
[., checkTypes, ), {, callbacks, ., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }]
[;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory, (]
[., add, (, new, CheckMissingReturn, (, compiler, ,, options, ., checkMissingReturn, ), ), ;, }, return, combineChecks, (, compiler, ,]
[), ;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory]
[,, options, ., checkMissingReturn, ), ), ;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final]
[), ), ;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new]
[., checkMissingReturn, ), ), ;, }, return, combineChecks, (, compiler, ,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls]
[;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory, (, "checkAccessControls", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[,, callbacks, ), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory, (, "checkAccessControls", ,, true, ), {, @]
[), ;, }, }, ;, final, HotSwapPassFactory, checkAccessControls, =, new, HotSwapPassFactory, (, "checkAccessControls", ,, true, ), {, @, Override, protected]
[;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, Preconditions, ., checkArgument, (]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckAccessControls, (, compiler, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CheckAccessControls, (, compiler, ), ;, }]
[;, }, }, ;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {, Preconditions]
[), ;, }, }, ;, private, static, HotSwapCompilerPass, combineChecks, (, AbstractCompiler, compiler, ,, List, <, Callback, >, callbacks, ), {]
[;, Callback, [, ], array, =, callbacks, ., toArray, (, new, Callback, [, callbacks, ., size, (, ), ], )]
[., checkArgument, (, callbacks, ., size, (, ), >, 0, ), ;, Callback, [, ], array, =, callbacks, ., toArray]
[), ;, Callback, [, ], array, =, callbacks, ., toArray, (, new, Callback, [, callbacks, ., size, (, ), ]]
[>, 0, ), ;, Callback, [, ], array, =, callbacks, ., toArray, (, new, Callback, [, callbacks, ., size, (]
[., size, (, ), >, 0, ), ;, Callback, [, ], array, =, callbacks, ., toArray, (, new, Callback, []
[), ;, Callback, [, ], array, =, callbacks, ., toArray, (, new, Callback, [, callbacks, ., size, (, ), ]]
[;, return, new, CombinedCompilerPass, (, compiler, ,, array, ), ;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler]
[., toArray, (, new, Callback, [, callbacks, ., size, (, ), ], ), ;, return, new, CombinedCompilerPass, (, compiler, ,]
[), ;, return, new, CombinedCompilerPass, (, compiler, ,, array, ), ;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler]
[], ), ;, return, new, CombinedCompilerPass, (, compiler, ,, array, ), ;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final]
[., size, (, ), ], ), ;, return, new, CombinedCompilerPass, (, compiler, ,, array, ), ;, }, class, GlobalTypeResolver, implements]
[;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, GlobalTypeResolver, (, AbstractCompiler, compiler, ), {, this, .]
[,, array, ), ;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, GlobalTypeResolver, (, AbstractCompiler, compiler, )]
[), ;, }, class, GlobalTypeResolver, implements, HotSwapCompilerPass, {, private, final, AbstractCompiler, compiler, ;, GlobalTypeResolver, (, AbstractCompiler, compiler, ), {, this]
[=, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, topScope]
[., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if]
[;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, if, (, topScope, ==, null]
[), {, regenerateGlobalTypedScope, (, compiler, ,, root, ., getParent, (, ), ), ;, }, else, {, compiler, ., getTypeRegistry, (]
[==, null, ), {, regenerateGlobalTypedScope, (, compiler, ,, root, ., getParent, (, ), ), ;, }, else, {, compiler, .]
[), {, regenerateGlobalTypedScope, (, compiler, ,, root, ., getParent, (, ), ), ;, }, else, {, compiler, ., getTypeRegistry, (]
[;, }, else, {, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, topScope, ), ;, }, }, @, Override, public]
[,, root, ., getParent, (, ), ), ;, }, else, {, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, topScope]
[), ;, }, else, {, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, topScope, ), ;, }, }, @, Override]
[., getParent, (, ), ), ;, }, else, {, compiler, ., getTypeRegistry, (, ), ., resolveTypesInScope, (, topScope, ), ;]
[;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, patchGlobalTypedScope, (, compiler, ,]
[., resolveTypesInScope, (, topScope, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, )]
[., getTypeRegistry, (, ), ., resolveTypesInScope, (, topScope, ), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot]
[), ;, }, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, patchGlobalTypedScope, (, compiler]
[;, }, }, class, ClearTypedScope, implements, CompilerPass, {, @, Override, public, void, process, (, Node, externs, ,, Node, root, )]
[,, scriptRoot, ), ;, }, }, class, ClearTypedScope, implements, CompilerPass, {, @, Override, public, void, process, (, Node, externs, ,]
[), ;, }, }, class, ClearTypedScope, implements, CompilerPass, {, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, }, }, final, PassFactory, checkGlobalNames, =, new, PassFactory, (, "checkGlobalNames", ,, true, ), {, @, Override, protected, CompilerPass, create]
[;, final, PassFactory, checkStrictMode, =, new, PassFactory, (, "checkStrictMode", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, checkStrictMode, =, new, PassFactory, (, "checkStrictMode", ,, true, ), {, @, Override, protected, CompilerPass]
[=, new, GlobalNamespace, (, compiler, ,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, )]
[;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,]
[,, externs, ,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, )]
[,, jsRoot, ), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process]
[), ;, new, CheckGlobalNames, (, compiler, ,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs]
[;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =, new, PassFactory, (, "checkStrictMode", ,, true, ), {, @]
[., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =, new, PassFactory]
[., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final]
[,, options, ., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }]
[), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;]
[., checkGlobalNamesLevel, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }]
[), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =, new]
[,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =, new, PassFactory, (, "checkStrictMode", ,, true]
[), ;, }, }, ;, }, }, ;, final, PassFactory, checkStrictMode, =, new, PassFactory, (, "checkStrictMode", ,, true, ), {]
[;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, StrictModeCheck, (, compiler, ,, !, options]
[;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,, true, ), {, @, Override, protected, CompilerPass]
[,, !, options, ., checkSymbols, ,, !, options, ., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =, new]
[,, !, options, ., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,, true]
[,, !, options, ., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,, true]
[., checkSymbols, ,, !, options, ., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks"]
[), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,, true, ), {, @, Override, protected]
[), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,, true, ), {, @, Override, protected]
[., checkCaja, ), ;, }, }, ;, final, PassFactory, processTweaks, =, new, PassFactory, (, "processTweaks", ,, true, ), {, @]
[;, final, PassFactory, processDefines, =, new, PassFactory, (, "processDefines", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, processDefines, =, new, PassFactory, (, "processDefines", ,, true, ), {, @, Override, protected, CompilerPass]
[;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =, new, PassFactory, (, "processDefines", ,, true, ), {, @]
[., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =, new, PassFactory]
[,, options, ., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (]
[,, options, ., getTweakReplacements, (, ), ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }]
[., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (, externs, ,, jsRoot, ), ;, }]
[., getTweakProcessing, (, ), ., shouldStrip, (, ), ,, options, ., getTweakReplacements, (, ), ), ., process, (, externs, ,]
[), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =, new]
[., getTweakReplacements, (, ), ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final]
[,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =, new, PassFactory, (, "processDefines", ,, true]
[), ;, }, }, ;, }, }, ;, final, PassFactory, processDefines, =, new, PassFactory, (, "processDefines", ,, true, ), {]
[;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory, (, "garbageCollectChecks", ,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory, (, "garbageCollectChecks", ,, true, ), {, @, Override, protected, HotSwapCompilerPass]
[;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), .]
[), ;, replacements, ., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, )]
[;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, )]
[., putAll, (, options, ., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (]
[), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot]
[., getDefineReplacements, (, ), ), ;, new, ProcessDefines, (, compiler, ,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process]
[;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory, (, "garbageCollectChecks", ,, true, ), {, @]
[., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory]
[., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final]
[,, replacements, ), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }]
[), ., injectNamespace, (, namespaceForChecks, ), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;]
[), ., process, (, externs, ,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new]
[,, jsRoot, ), ;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory, (, "garbageCollectChecks", ,, true]
[), ;, }, }, ;, }, }, ;, final, PassFactory, garbageCollectChecks, =, new, HotSwapPassFactory, (, "garbageCollectChecks", ,, true, ), {]
[;, final, PassFactory, checkConsts, =, new, PassFactory, (, "checkConsts", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, )]
[), {, @, Override, protected, HotSwapCompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, HotSwapCompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, checkConsts, =, new, PassFactory, (, "checkConsts", ,, true, ), {, @, Override, protected, CompilerPass]
[=, null, ;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, process, (, null]
[;, }, @, Override, public, void, hotSwapScript, (, Node, scriptRoot, ,, Node, originalRoot, ), {, process, (, null, ,, null]
[;, }, }, ;, }, }, ;, final, PassFactory, checkConsts, =, new, PassFactory, (, "checkConsts", ,, true, ), {, @]
[,, null, ), ;, }, }, ;, }, }, ;, final, PassFactory, checkConsts, =, new, PassFactory, (, "checkConsts", ,, true]
[), ;, }, }, ;, }, }, ;, final, PassFactory, checkConsts, =, new, PassFactory, (, "checkConsts", ,, true, ), {]
[;, final, PassFactory, computeFunctionNames, =, new, PassFactory, (, "computeFunctionNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConstCheck, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConstCheck, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, computeFunctionNames, =, new, PassFactory, (, "computeFunctionNames", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, computeFunctionNames, =, new, PassFactory, (, "computeFunctionNames", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (, "ignoreCajaProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, (, (, functionNames, =, new]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, (, (, functionNames, =, new, FunctionNames, (]
[;, }, }, ;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (, "ignoreCajaProperties", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (, "ignoreCajaProperties", ,, true, ), {, @, Override, protected]
[=, new, FunctionNames, (, compiler, ), ), ), ;, }, }, ;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (, "ignoreCajaProperties"]
[), ), ;, }, }, ;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (, "ignoreCajaProperties", ,, true, ), {, @, Override]
[), ), ), ;, }, }, ;, final, PassFactory, ignoreCajaProperties, =, new, PassFactory, (, "ignoreCajaProperties", ,, true, ), {, @]
[;, final, PassFactory, runtimeTypeCheck, =, new, PassFactory, (, "runtimeTypeCheck", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, IgnoreCajaProperties, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, IgnoreCajaProperties, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, runtimeTypeCheck, =, new, PassFactory, (, "runtimeTypeCheck", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, runtimeTypeCheck, =, new, PassFactory, (, "runtimeTypeCheck", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, replaceIdGenerators, =, new, PassFactory, (, "replaceIdGenerators", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RuntimeTypeCheck, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RuntimeTypeCheck, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, replaceIdGenerators, =, new, PassFactory, (, "replaceIdGenerators", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., runtimeTypeCheckLogFunction, ), ;, }, }, ;, final, PassFactory, replaceIdGenerators, =, new, PassFactory, (, "replaceIdGenerators", ,, true, )]
[), ;, }, }, ;, final, PassFactory, replaceIdGenerators, =, new, PassFactory, (, "replaceIdGenerators", ,, true, ), {, @, Override, protected]
[., runtimeTypeCheckLogFunction, ), ;, }, }, ;, final, PassFactory, replaceIdGenerators, =, new, PassFactory, (, "replaceIdGenerators", ,, true, ), {, @]
[;, final, PassFactory, replaceStrings, =, new, PassFactory, (, "replaceStrings", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, replaceStrings, =, new, PassFactory, (, "replaceStrings", ,, true, ), {, @, Override, protected, CompilerPass]
[;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }]
[,, options, ., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,]
[,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap]
[., idGenerators, ,, options, ., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, )]
[,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings]
[., generatePseudoNames, ,, options, ., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass]
[), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }]
[., idGeneratorsMapSerialized, ), ;, pass, ., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, )]
[;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =, new]
[., process, (, externs, ,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }]
[,, root, ), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory]
[), ;, idGeneratorMap, =, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =]
[=, pass, ., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =, new, PassFactory, (]
[;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =, new, PassFactory, (, "replaceStrings", ,, true, ), {, @]
[., getSerializedIdMappings, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, replaceStrings, =, new, PassFactory, (, "replaceStrings", ,]
[;, final, PassFactory, optimizeArgumentsArray, =, new, PassFactory, (, "optimizeArgumentsArray", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =, new, PassFactory, (, "optimizeArgumentsArray", ,, true, ), {, @, Override, protected, CompilerPass]
[;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }]
[,, options, ., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, .]
[,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,]
[., replaceStringsPlaceholderToken, ,, options, ., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (]
[,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap]
[., replaceStringsFunctionDescriptions, ,, options, ., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, )]
[,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =, pass, ., getStringMap]
[., replaceStringsReservedStrings, ,, options, ., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =, pass]
[), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }]
[., replaceStringsInputMap, ), ;, pass, ., process, (, externs, ,, root, ), ;, stringMap, =, pass, ., getStringMap, (, )]
[;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =, new]
[., process, (, externs, ,, root, ), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }, ;, }]
[,, root, ), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory]
[), ;, stringMap, =, pass, ., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =]
[=, pass, ., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =, new, PassFactory, (]
[;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =, new, PassFactory, (, "optimizeArgumentsArray", ,, true, ), {, @]
[., getStringMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, optimizeArgumentsArray, =, new, PassFactory, (, "optimizeArgumentsArray", ,]
[;, final, PassFactory, closureCodeRemoval, =, new, PassFactory, (, "closureCodeRemoval", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, OptimizeArgumentsArray, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, OptimizeArgumentsArray, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, closureCodeRemoval, =, new, PassFactory, (, "closureCodeRemoval", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, closureCodeRemoval, =, new, PassFactory, (, "closureCodeRemoval", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (, "closureOptimizePrimitives", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (, compiler]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureCodeRemoval, (, compiler, ,, options]
[;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (, "closureOptimizePrimitives", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., removeAbstractMethods, ,, options, ., removeClosureAsserts, ), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (]
[,, options, ., removeClosureAsserts, ), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (, "closureOptimizePrimitives", ,, true, )]
[., removeAbstractMethods, ,, options, ., removeClosureAsserts, ), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (, "closureOptimizePrimitives", ,]
[), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (, "closureOptimizePrimitives", ,, true, ), {, @, Override, protected]
[., removeClosureAsserts, ), ;, }, }, ;, final, PassFactory, closureOptimizePrimitives, =, new, PassFactory, (, "closureOptimizePrimitives", ,, true, ), {, @]
[;, final, PassFactory, rescopeGlobalSymbols, =, new, PassFactory, (, "rescopeGlobalSymbols", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureOptimizePrimitives, (, compiler]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, ClosureOptimizePrimitives, (, compiler, ), ;]
[;, }, }, ;, final, PassFactory, rescopeGlobalSymbols, =, new, PassFactory, (, "rescopeGlobalSymbols", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, rescopeGlobalSymbols, =, new, PassFactory, (, "rescopeGlobalSymbols", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, collapseProperties, =, new, PassFactory, (, "collapseProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RescopeGlobalSymbols, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RescopeGlobalSymbols, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, collapseProperties, =, new, PassFactory, (, "collapseProperties", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., renamePrefixNamespace, ), ;, }, }, ;, final, PassFactory, collapseProperties, =, new, PassFactory, (, "collapseProperties", ,, true, )]
[), ;, }, }, ;, final, PassFactory, collapseProperties, =, new, PassFactory, (, "collapseProperties", ,, true, ), {, @, Override, protected]
[., renamePrefixNamespace, ), ;, }, }, ;, final, PassFactory, collapseProperties, =, new, PassFactory, (, "collapseProperties", ,, true, ), {, @]
[;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (, "collapseObjectLiterals", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseProperties, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (, "collapseObjectLiterals", ,, false, ), {, @, Override, protected, CompilerPass]
[,, options, ., collapsePropertiesOnExternTypes, ,, !, isInliningForbidden, (, ), ), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory]
[,, !, isInliningForbidden, (, ), ), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (, "collapseObjectLiterals", ,, false]
[., collapsePropertiesOnExternTypes, ,, !, isInliningForbidden, (, ), ), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (, "collapseObjectLiterals"]
[), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (, "collapseObjectLiterals", ,, false, ), {, @, Override, protected]
[), ;, }, }, ;, final, PassFactory, collapseObjectLiterals, =, new, PassFactory, (, "collapseObjectLiterals", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, tightenTypesBuilder, =, new, PassFactory, (, "tightenTypes", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineObjectLiterals, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineObjectLiterals, (, compiler, ,, compiler, .]
[;, }, }, ;, final, PassFactory, tightenTypesBuilder, =, new, PassFactory, (, "tightenTypes", ,, true, ), {, @, Override, protected, CompilerPass]
[,, compiler, ., getUniqueNameIdSupplier, (, ), ), ;, }, }, ;, final, PassFactory, tightenTypesBuilder, =, new, PassFactory, (, "tightenTypes", ,]
[), ;, }, }, ;, final, PassFactory, tightenTypesBuilder, =, new, PassFactory, (, "tightenTypes", ,, true, ), {, @, Override, protected]
[., getUniqueNameIdSupplier, (, ), ), ;, }, }, ;, final, PassFactory, tightenTypesBuilder, =, new, PassFactory, (, "tightenTypes", ,, true, )]
[;, final, PassFactory, disambiguateProperties, =, new, PassFactory, (, "disambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, !, options, ., checkTypes]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, !, options, ., checkTypes, ), {]
[), {, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;]
[), {, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;]
[., checkTypes, ), {, return, new, ErrorPass, (, compiler, ,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =, new, TightenTypes, (, compiler]
[;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties, =]
[,, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK, ), ;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }, ;, final]
[), ;, }, tightenTypes, =, new, TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties]
[=, new, TightenTypes, (, compiler, ), ;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties, =, new, PassFactory, (]
[;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties, =, new, PassFactory, (, "disambiguateProperties", ,, true, ), {, @]
[), ;, return, tightenTypes, ;, }, }, ;, final, PassFactory, disambiguateProperties, =, new, PassFactory, (, "disambiguateProperties", ,, true, ), {]
[;, }, }, ;, final, PassFactory, disambiguateProperties, =, new, PassFactory, (, "disambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass]
[;, final, PassFactory, chainCalls, =, new, PassFactory, (, "chainCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, tightenTypes, ==, null, ), {, return]
[), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, .]
[==, null, ), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return]
[), {, return, DisambiguateProperties, ., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, .]
[;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }, }]
[., forJSTypeSystem, (, compiler, ,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,]
[,, options, ., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, .]
[), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }]
[., propertyInvalidationErrors, ), ;, }, else, {, return, DisambiguateProperties, ., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, )]
[;, }, }, }, ;, final, PassFactory, chainCalls, =, new, PassFactory, (, "chainCalls", ,, true, ), {, @, Override, protected]
[., forConcreteTypeSystem, (, compiler, ,, tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }, }, }, ;, final, PassFactory, chainCalls, =]
[,, tightenTypes, ,, options, ., propertyInvalidationErrors, ), ;, }, }, }, ;, final, PassFactory, chainCalls, =, new, PassFactory, (, "chainCalls"]
[,, options, ., propertyInvalidationErrors, ), ;, }, }, }, ;, final, PassFactory, chainCalls, =, new, PassFactory, (, "chainCalls", ,, true]
[), ;, }, }, }, ;, final, PassFactory, chainCalls, =, new, PassFactory, (, "chainCalls", ,, true, ), {, @, Override]
[., propertyInvalidationErrors, ), ;, }, }, }, ;, final, PassFactory, chainCalls, =, new, PassFactory, (, "chainCalls", ,, true, ), {]
[;, final, PassFactory, devirtualizePrototypeMethods, =, new, PassFactory, (, "devirtualizePrototypeMethods", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ChainCalls, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ChainCalls, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, devirtualizePrototypeMethods, =, new, PassFactory, (, "devirtualizePrototypeMethods", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, devirtualizePrototypeMethods, =, new, PassFactory, (, "devirtualizePrototypeMethods", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, optimizeCallsAndRemoveUnusedVars, =, new, PassFactory, (, "optimizeCalls_and_removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DevirtualizePrototypeMethods, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DevirtualizePrototypeMethods, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, optimizeCallsAndRemoveUnusedVars, =, new, PassFactory, (, "optimizeCalls_and_removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, optimizeCallsAndRemoveUnusedVars, =, new, PassFactory, (, "optimizeCalls_and_removeUnusedVars", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, markPureFunctions, =, new, PassFactory, (, "markPureFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, OptimizeCalls, passes, =, new, OptimizeCalls, (, compiler, )]
[;, if, (, options, ., optimizeReturns, ), {, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }]
[), ;, if, (, options, ., optimizeReturns, ), {, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;]
[), {, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (, options, ., optimizeParameters, )]
[., optimizeReturns, ), {, passes, ., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (, options, .]
[;, }, if, (, options, ., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), ), ;]
[., addPass, (, new, OptimizeReturns, (, compiler, ), ), ;, }, if, (, options, ., optimizeParameters, ), {, passes, .]
[), ;, }, if, (, options, ., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), )]
[), ), ;, }, if, (, options, ., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, )]
[), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (, options, ., optimizeCalls, )]
[., optimizeParameters, ), {, passes, ., addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (, options, .]
[;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars]
[., addPass, (, new, OptimizeParameters, (, compiler, ), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals]
[), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, .]
[), ), ;, }, if, (, options, ., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options]
[), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming]
[., optimizeCalls, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options]
[;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler]
[&&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass]
[., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes]
[;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler]
[;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler]
[., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars]
[;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }]
[!=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true]
[., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames]
[;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }]
[., OFF, ;, passes, ., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), )]
[;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory, (, "markPureFunctions", ,, true, ), {]
[., addPass, (, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return, passes]
[), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory, (, "markPureFunctions", ,, true, )]
[,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions]
[,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory]
[,, preserveAnonymousFunctionNames, ,, true, ), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory]
[,, true, ), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory, (, "markPureFunctions"]
[), ), ;, }, return, passes, ;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory, (, "markPureFunctions", ,, true]
[;, }, }, ;, final, PassFactory, markPureFunctions, =, new, PassFactory, (, "markPureFunctions", ,, true, ), {, @, Override, protected, CompilerPass]
[;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (, "markNoSideEffectCalls", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PureFunctionIdentifier, ., Driver, (]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PureFunctionIdentifier, ., Driver, (, compiler, ,]
[;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (, "markNoSideEffectCalls", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., debugFunctionSideEffectsPath, ,, false, ), ;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (, "markNoSideEffectCalls", ,]
[,, false, ), ;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (, "markNoSideEffectCalls", ,, true, ), {, @]
[., debugFunctionSideEffectsPath, ,, false, ), ;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (, "markNoSideEffectCalls", ,, true, )]
[), ;, }, }, ;, final, PassFactory, markNoSideEffectCalls, =, new, PassFactory, (, "markNoSideEffectCalls", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, inlineVariables, =, new, PassFactory, (, "inlineVariables", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MarkNoSideEffectCalls, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MarkNoSideEffectCalls, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, inlineVariables, =, new, PassFactory, (, "inlineVariables", ,, false, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, inlineVariables, =, new, PassFactory, (, "inlineVariables", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, inlineConstants, =, new, PassFactory, (, "inlineConstants", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, isInliningForbidden, (, ), )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, if, (, isInliningForbidden, (, ), ), {, return]
[), {, return, new, ErrorPass, (, compiler, ,, CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if]
[;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {, mode, =, InlineVariables, .]
[,, CANNOT_USE_PROTOTYPE_AND_VAR, ), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {, mode]
[), ;, }, else, {, InlineVariables, ., Mode, mode, ;, if, (, options, ., inlineVariables, ), {, mode, =, InlineVariables]
[), {, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode]
[., inlineVariables, ), {, mode, =, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, )]
[=, InlineVariables, ., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =, InlineVariables, .]
[;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else]
[., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;]
[., Mode, ., ALL, ;, }, else, if, (, options, ., inlineLocalVariables, ), {, mode, =, InlineVariables, ., Mode, .]
[), {, mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;]
[., inlineLocalVariables, ), {, mode, =, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set."]
[=, InlineVariables, ., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new]
[;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new, InlineVariables, (, compiler, ,, mode, ,]
[., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new, InlineVariables, (, compiler, ,]
[., Mode, ., LOCALS_ONLY, ;, }, else, {, throw, new, IllegalStateException, (, "No variable inlining option set.", ), ;, }, return, new, InlineVariables, (]
[;, }, return, new, InlineVariables, (, compiler, ,, mode, ,, true, ), ;, }, }, }, ;, final, PassFactory, inlineConstants]
[), ;, }, return, new, InlineVariables, (, compiler, ,, mode, ,, true, ), ;, }, }, }, ;, final, PassFactory]
[;, }, }, }, ;, final, PassFactory, inlineConstants, =, new, PassFactory, (, "inlineConstants", ,, false, ), {, @, Override, protected]
[,, mode, ,, true, ), ;, }, }, }, ;, final, PassFactory, inlineConstants, =, new, PassFactory, (, "inlineConstants", ,, false]
[,, true, ), ;, }, }, }, ;, final, PassFactory, inlineConstants, =, new, PassFactory, (, "inlineConstants", ,, false, ), {]
[), ;, }, }, }, ;, final, PassFactory, inlineConstants, =, new, PassFactory, (, "inlineConstants", ,, false, ), {, @, Override]
[;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (, "minimizeExitPoints", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineVariables, (, compiler, ,, InlineVariables, .]
[;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (, "minimizeExitPoints", ,, false, ), {, @, Override, protected, CompilerPass]
[,, InlineVariables, ., Mode, ., CONSTANTS_ONLY, ,, true, ), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (]
[,, true, ), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (, "minimizeExitPoints", ,, false, ), {, @]
[., CONSTANTS_ONLY, ,, true, ), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (, "minimizeExitPoints", ,, false, )]
[., Mode, ., CONSTANTS_ONLY, ,, true, ), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (, "minimizeExitPoints", ,]
[), ;, }, }, ;, final, PassFactory, minimizeExitPoints, =, new, PassFactory, (, "minimizeExitPoints", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, removeUnreachableCode, =, new, PassFactory, (, "removeUnreachableCode", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MinimizeExitPoints, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MinimizeExitPoints, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, removeUnreachableCode, =, new, PassFactory, (, "removeUnreachableCode", ,, false, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, removeUnreachableCode, =, new, PassFactory, (, "removeUnreachableCode", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, removeUnusedPrototypeProperties, =, new, PassFactory, (, "removeUnusedPrototypeProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, UnreachableCodeElimination, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, UnreachableCodeElimination, (, compiler, ,, true, )]
[;, }, }, ;, final, PassFactory, removeUnusedPrototypeProperties, =, new, PassFactory, (, "removeUnusedPrototypeProperties", ,, false, ), {, @, Override, protected, CompilerPass]
[,, true, ), ;, }, }, ;, final, PassFactory, removeUnusedPrototypeProperties, =, new, PassFactory, (, "removeUnusedPrototypeProperties", ,, false, ), {, @]
[), ;, }, }, ;, final, PassFactory, removeUnusedPrototypeProperties, =, new, PassFactory, (, "removeUnusedPrototypeProperties", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedPrototypeProperties, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties", ,, false, ), {, @, Override, protected, CompilerPass]
[,, options, ., removeUnusedPrototypePropertiesInExterns, ,, !, options, ., removeUnusedVars, ), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory]
[,, !, options, ., removeUnusedVars, ), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties", ,, false]
[., removeUnusedPrototypePropertiesInExterns, ,, !, options, ., removeUnusedVars, ), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties"]
[), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties", ,, false, ), {, @, Override, protected]
[), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties", ,, false, ), {, @, Override, protected]
[., removeUnusedVars, ), ;, }, }, ;, final, PassFactory, removeUnusedClassProperties, =, new, PassFactory, (, "removeUnusedClassProperties", ,, false, ), {, @]
[;, final, PassFactory, smartNamePass, =, new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedClassProperties, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RemoveUnusedClassProperties, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, smartNamePass, =, new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, smartNamePass, =, new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, smartNamePass2, =, new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, smartNamePass2, =, new, PassFactory, (, "smartNamePass", ,, true, ), {, @, Override, protected, CompilerPass]
[;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath]
[,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;]
[), ;, na, ., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (]
[;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write]
[., process, (, externs, ,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null]
[,, root, ), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {]
[), ;, String, reportPath, =, options, ., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {, Files, .]
[;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,]
[., reportPath, ;, if, (, reportPath, !=, null, ), {, try, {, Files, ., write, (, na, ., getHtmlReport, (]
[), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,]
[!=, null, ), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath]
[), {, try, {, Files, ., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, )]
[., write, (, na, ., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;]
[,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler]
[., getHtmlReport, (, ), ,, new, File, (, reportPath, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException]
[,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make]
[), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, .]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath]
[., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR]
[;, }, }, if, (, options, ., smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;, }, }, }, ;]
[., report, (, JSError, ., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (, options, ., smartNameRemoval]
[), ;, }, }, if, (, options, ., smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;, }, }, }]
[., make, (, REPORT_PATH_IO_ERROR, ,, reportPath, ), ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, na, .]
[,, reportPath, ), ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;]
[), ), ;, }, }, if, (, options, ., smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;, }, }]
[), {, na, ., removeUnreferenced, (, ), ;, }, }, }, ;, }, }, ;, final, PassFactory, smartNamePass2, =, new]
[., smartNameRemoval, ), {, na, ., removeUnreferenced, (, ), ;, }, }, }, ;, }, }, ;, final, PassFactory, smartNamePass2]
[;, }, }, }, ;, }, }, ;, final, PassFactory, smartNamePass2, =, new, PassFactory, (, "smartNamePass", ,, true, ), {]
[., removeUnreferenced, (, ), ;, }, }, }, ;, }, }, ;, final, PassFactory, smartNamePass2, =, new, PassFactory, (, "smartNamePass"]
[;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory, (, "inlineSimpleMethods", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory, (, "inlineSimpleMethods", ,, false, ), {, @, Override, protected, CompilerPass]
[;, na, ., process, (, externs, ,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }]
[,, false, ), ;, na, ., process, (, externs, ,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }]
[), ;, na, ., process, (, externs, ,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }, }, ;]
[;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory, (]
[., process, (, externs, ,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;]
[,, root, ), ;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =]
[), ;, na, ., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory]
[;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory, (, "inlineSimpleMethods", ,, false, ), {, @]
[., removeUnreferenced, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, inlineSimpleMethods, =, new, PassFactory, (, "inlineSimpleMethods", ,]
[;, final, PassFactory, deadAssignmentsElimination, =, new, PassFactory, (, "deadAssignmentsElimination", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineSimpleMethods, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineSimpleMethods, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, deadAssignmentsElimination, =, new, PassFactory, (, "deadAssignmentsElimination", ,, false, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, deadAssignmentsElimination, =, new, PassFactory, (, "deadAssignmentsElimination", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, inlineFunctions, =, new, PassFactory, (, "inlineFunctions", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DeadAssignmentsElimination, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, DeadAssignmentsElimination, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, inlineFunctions, =, new, PassFactory, (, "inlineFunctions", ,, false, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, inlineFunctions, =, new, PassFactory, (, "inlineFunctions", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !, isInliningForbidden, (]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, enableBlockInlining, =, !, isInliningForbidden, (, ), ;]
[;, return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions]
[;, return, new, InlineFunctions, (, compiler, ,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions]
[;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,, false, ), {, @, Override, protected, CompilerPass]
[,, compiler, ., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis]
[,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn]
[., getUniqueNameIdSupplier, (, ), ,, options, ., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, )]
[,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode]
[., inlineFunctions, ,, options, ., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, )]
[,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true]
[., inlineLocalFunctions, ,, enableBlockInlining, ,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT]
[,, options, ., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;]
[,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,, false, ), {, @]
[||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties]
[., assumeStrictThis, (, ), ||, options, ., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }]
[,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,, false, ), {, @]
[==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,]
[., getLanguageIn, (, ), ==, LanguageMode, ., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new]
[,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,, false, ), {, @]
[., ECMASCRIPT5_STRICT, ,, true, ), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,, false, )]
[), ;, }, }, ;, final, PassFactory, inlineProperties, =, new, PassFactory, (, "inlineProperties", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, removeUnusedVars, =, new, PassFactory, (, "removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineProperties, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, InlineProperties, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, removeUnusedVars, =, new, PassFactory, (, "removeUnusedVars", ,, false, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, removeUnusedVars, =, new, PassFactory, (, "removeUnusedVars", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, boolean, removeOnlyLocals, =, options, ., removeUnusedLocalVars, &&, !]
[;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals]
[&&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars]
[., removeUnusedLocalVars, &&, !, options, ., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return]
[;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals]
[;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals]
[., removeUnusedVars, ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,]
[;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory]
[!=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }]
[., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, )]
[;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory]
[., OFF, ;, return, new, RemoveUnusedVars, (, compiler, ,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;]
[;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion", ,, false, ), {, @, Override, protected, CompilerPass]
[,, !, removeOnlyLocals, ,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion"]
[,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion", ,, false, )]
[,, preserveAnonymousFunctionNames, ,, false, ), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion", ,, false, )]
[,, false, ), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion", ,, false, ), {, @]
[), ;, }, }, ;, final, PassFactory, crossModuleCodeMotion, =, new, PassFactory, (, "crossModuleCodeMotion", ,, false, ), {, @, Override, protected]
[;, final, PassFactory, crossModuleMethodMotion, =, new, PassFactory, (, "crossModuleMethodMotion", ,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleCodeMotion, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleCodeMotion, (, compiler, ,, compiler, .]
[;, }, }, ;, final, PassFactory, crossModuleMethodMotion, =, new, PassFactory, (, "crossModuleMethodMotion", ,, false, ), {, @, Override, protected, CompilerPass]
[,, compiler, ., getModuleGraph, (, ), ), ;, }, }, ;, final, PassFactory, crossModuleMethodMotion, =, new, PassFactory, (, "crossModuleMethodMotion", ,]
[), ;, }, }, ;, final, PassFactory, crossModuleMethodMotion, =, new, PassFactory, (, "crossModuleMethodMotion", ,, false, ), {, @, Override, protected]
[., getModuleGraph, (, ), ), ;, }, }, ;, final, PassFactory, crossModuleMethodMotion, =, new, PassFactory, (, "crossModuleMethodMotion", ,, false, )]
[;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (, "specializeInitialModule", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, false, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleMethodMotion, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CrossModuleMethodMotion, (, compiler, ,, crossModuleIdGenerator, ,]
[;, }, }, ;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (, "specializeInitialModule", ,, true, ), {, @, Override, protected, CompilerPass]
[,, crossModuleIdGenerator, ,, options, ., removeUnusedPrototypePropertiesInExterns, ), ;, }, }, ;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (, "specializeInitialModule", ,]
[,, options, ., removeUnusedPrototypePropertiesInExterns, ), ;, }, }, ;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (, "specializeInitialModule", ,, true, )]
[), ;, }, }, ;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (, "specializeInitialModule", ,, true, ), {, @, Override, protected]
[., removeUnusedPrototypePropertiesInExterns, ), ;, }, }, ;, final, PassFactory, specializeInitialModule, =, new, PassFactory, (, "specializeInitialModule", ,, true, ), {, @]
[;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (, "flowSensitiveInlineVariables", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SpecializeModule, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, SpecializeModule, (, compiler, ,, devirtualizePrototypeMethods, ,]
[;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (, "flowSensitiveInlineVariables", ,, true, ), {, @, Override, protected, CompilerPass]
[,, devirtualizePrototypeMethods, ,, inlineFunctions, ,, removeUnusedPrototypeProperties, ), ;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (, "flowSensitiveInlineVariables", ,]
[,, inlineFunctions, ,, removeUnusedPrototypeProperties, ), ;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (, "flowSensitiveInlineVariables", ,, true, )]
[,, removeUnusedPrototypeProperties, ), ;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (, "flowSensitiveInlineVariables", ,, true, ), {, @]
[), ;, }, }, ;, final, PassFactory, flowSensitiveInlineVariables, =, new, PassFactory, (, "flowSensitiveInlineVariables", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, coalesceVariableNames, =, new, PassFactory, (, "coalesceVariableNames", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FlowSensitiveInlineVariables, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FlowSensitiveInlineVariables, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, coalesceVariableNames, =, new, PassFactory, (, "coalesceVariableNames", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, coalesceVariableNames, =, new, PassFactory, (, "coalesceVariableNames", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, exploitAssign, =, new, PassFactory, (, "exploitAssign", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CoalesceVariableNames, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CoalesceVariableNames, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, exploitAssign, =, new, PassFactory, (, "exploitAssign", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., generatePseudoNames, ), ;, }, }, ;, final, PassFactory, exploitAssign, =, new, PassFactory, (, "exploitAssign", ,, true, )]
[), ;, }, }, ;, final, PassFactory, exploitAssign, =, new, PassFactory, (, "exploitAssign", ,, true, ), {, @, Override, protected]
[., generatePseudoNames, ), ;, }, }, ;, final, PassFactory, exploitAssign, =, new, PassFactory, (, "exploitAssign", ,, true, ), {, @]
[;, final, PassFactory, collapseVariableDeclarations, =, new, PassFactory, (, "collapseVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PeepholeOptimizationsPass, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, PeepholeOptimizationsPass, (, compiler, ,, new, ExploitAssigns]
[;, }, }, ;, final, PassFactory, collapseVariableDeclarations, =, new, PassFactory, (, "collapseVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass]
[,, new, ExploitAssigns, (, ), ), ;, }, }, ;, final, PassFactory, collapseVariableDeclarations, =, new, PassFactory, (, "collapseVariableDeclarations", ,, true]
[), ;, }, }, ;, final, PassFactory, collapseVariableDeclarations, =, new, PassFactory, (, "collapseVariableDeclarations", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, groupVariableDeclarations, =, new, PassFactory, (, "groupVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseVariableDeclarations, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseVariableDeclarations, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, groupVariableDeclarations, =, new, PassFactory, (, "groupVariableDeclarations", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, groupVariableDeclarations, =, new, PassFactory, (, "groupVariableDeclarations", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, extractPrototypeMemberDeclarations, =, new, PassFactory, (, "extractPrototypeMemberDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GroupVariableDeclarations, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, GroupVariableDeclarations, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, extractPrototypeMemberDeclarations, =, new, PassFactory, (, "extractPrototypeMemberDeclarations", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, extractPrototypeMemberDeclarations, =, new, PassFactory, (, "extractPrototypeMemberDeclarations", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, rewriteFunctionExpressions, =, new, PassFactory, (, "rewriteFunctionExpressions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExtractPrototypeMemberDeclarations, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ExtractPrototypeMemberDeclarations, (, compiler, ,, Pattern, .]
[;, }, }, ;, final, PassFactory, rewriteFunctionExpressions, =, new, PassFactory, (, "rewriteFunctionExpressions", ,, true, ), {, @, Override, protected, CompilerPass]
[,, Pattern, ., USE_GLOBAL_TEMP, ), ;, }, }, ;, final, PassFactory, rewriteFunctionExpressions, =, new, PassFactory, (, "rewriteFunctionExpressions", ,, true, )]
[), ;, }, }, ;, final, PassFactory, rewriteFunctionExpressions, =, new, PassFactory, (, "rewriteFunctionExpressions", ,, true, ), {, @, Override, protected]
[., USE_GLOBAL_TEMP, ), ;, }, }, ;, final, PassFactory, rewriteFunctionExpressions, =, new, PassFactory, (, "rewriteFunctionExpressions", ,, true, ), {, @]
[;, final, PassFactory, collapseAnonymousFunctions, =, new, PassFactory, (, "collapseAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FunctionRewriter, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, FunctionRewriter, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, collapseAnonymousFunctions, =, new, PassFactory, (, "collapseAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, collapseAnonymousFunctions, =, new, PassFactory, (, "collapseAnonymousFunctions", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, moveFunctionDeclarations, =, new, PassFactory, (, "moveFunctionDeclarations", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseAnonymousFunctions, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, CollapseAnonymousFunctions, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, moveFunctionDeclarations, =, new, PassFactory, (, "moveFunctionDeclarations", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, moveFunctionDeclarations, =, new, PassFactory, (, "moveFunctionDeclarations", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, nameUnmappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MoveFunctionDeclarations, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, MoveFunctionDeclarations, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, nameUnmappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, nameUnmappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, nameMappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, NameAnonymousFunctions, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, NameAnonymousFunctions, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, nameMappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, nameMappedAnonymousFunctions, =, new, PassFactory, (, "nameAnonymousFunctions", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, aliasExternals, =, new, PassFactory, (, "aliasExternals", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, aliasExternals, =, new, PassFactory, (, "aliasExternals", ,, true, ), {, @, Override, protected, CompilerPass]
[;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }]
[,, options, ., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap]
[), ;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }]
[., inputAnonymousFunctionNamingMap, ), ;, naf, ., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, )]
[;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =, new]
[., process, (, externs, ,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }, ;, }]
[,, root, ), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory]
[), ;, anonymousFunctionNameMap, =, naf, ., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =]
[=, naf, ., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =, new, PassFactory, (]
[;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =, new, PassFactory, (, "aliasExternals", ,, true, ), {, @]
[., getFunctionMap, (, ), ;, }, }, ;, }, }, ;, final, PassFactory, aliasExternals, =, new, PassFactory, (, "aliasExternals", ,]
[;, final, PassFactory, aliasStrings, =, new, PassFactory, (, "aliasStrings", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasExternals, (, compiler, ,, compiler, .]
[;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (, "aliasStrings", ,, true, ), {, @, Override, protected, CompilerPass]
[,, compiler, ., getModuleGraph, (, ), ,, options, ., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }, ;, final]
[,, options, ., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (]
[., getModuleGraph, (, ), ,, options, ., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings]
[,, options, ., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (, "aliasStrings", ,, true, )]
[., unaliasableGlobals, ,, options, ., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (, "aliasStrings", ,]
[), ;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (, "aliasStrings", ,, true, ), {, @, Override, protected]
[., aliasableGlobals, ), ;, }, }, ;, final, PassFactory, aliasStrings, =, new, PassFactory, (, "aliasStrings", ,, true, ), {, @]
[;, final, PassFactory, aliasKeywords, =, new, PassFactory, (, "aliasKeywords", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasStrings, (, compiler, ,, compiler, .]
[;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (, "aliasKeywords", ,, true, ), {, @, Override, protected, CompilerPass]
[,, compiler, ., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist]
[,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;]
[., getModuleGraph, (, ), ,, options, ., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options]
[,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (]
[?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final]
[., aliasAllStrings, ?, null, :, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }]
[:, options, ., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords]
[,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (]
[., aliasableStrings, ,, options, ., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new]
[,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (, "aliasKeywords", ,, true, )]
[., aliasStringsBlacklist, ,, options, ., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (, "aliasKeywords", ,]
[), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (, "aliasKeywords", ,, true, ), {, @, Override, protected]
[., outputJsStringUsage, ), ;, }, }, ;, final, PassFactory, aliasKeywords, =, new, PassFactory, (, "aliasKeywords", ,, true, ), {, @]
[;, final, PassFactory, objectPropertyStringPostprocess, =, new, PassFactory, (, "ObjectPropertyStringPostprocess", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasKeywords, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AliasKeywords, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, objectPropertyStringPostprocess, =, new, PassFactory, (, "ObjectPropertyStringPostprocess", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, objectPropertyStringPostprocess, =, new, PassFactory, (, "ObjectPropertyStringPostprocess", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, ambiguateProperties, =, new, PassFactory, (, "ambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPostprocess, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ObjectPropertyStringPostprocess, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, ambiguateProperties, =, new, PassFactory, (, "ambiguateProperties", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, ambiguateProperties, =, new, PassFactory, (, "ambiguateProperties", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, markUnnormalized, =, new, PassFactory, (, "markUnnormalized", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AmbiguateProperties, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AmbiguateProperties, (, compiler, ,, options, .]
[;, }, }, ;, final, PassFactory, markUnnormalized, =, new, PassFactory, (, "markUnnormalized", ,, true, ), {, @, Override, protected, CompilerPass]
[,, options, ., anonymousFunctionNaming, ., getReservedCharacters, (, ), ), ;, }, }, ;, final, PassFactory, markUnnormalized, =, new, PassFactory, (]
[), ;, }, }, ;, final, PassFactory, markUnnormalized, =, new, PassFactory, (, "markUnnormalized", ,, true, ), {, @, Override, protected]
[., getReservedCharacters, (, ), ), ;, }, }, ;, final, PassFactory, markUnnormalized, =, new, PassFactory, (, "markUnnormalized", ,, true, )]
[., anonymousFunctionNaming, ., getReservedCharacters, (, ), ), ;, }, }, ;, final, PassFactory, markUnnormalized, =, new, PassFactory, (, "markUnnormalized", ,]
[;, final, PassFactory, denormalize, =, new, PassFactory, (, "denormalize", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, denormalize, =, new, PassFactory, (, "denormalize", ,, true, ), {, @, Override, protected, CompilerPass]
[;, }, }, ;, }, }, ;, final, PassFactory, denormalize, =, new, PassFactory, (, "denormalize", ,, true, ), {, @]
[., setLifeCycleStage, (, LifeCycleStage, ., RAW, ), ;, }, }, ;, }, }, ;, final, PassFactory, denormalize, =, new, PassFactory]
[), ;, }, }, ;, }, }, ;, final, PassFactory, denormalize, =, new, PassFactory, (, "denormalize", ,, true, ), {]
[., RAW, ), ;, }, }, ;, }, }, ;, final, PassFactory, denormalize, =, new, PassFactory, (, "denormalize", ,, true]
[;, final, PassFactory, invertContextualRenaming, =, new, PassFactory, (, "invertContextualRenaming", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, Denormalize, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, Denormalize, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, invertContextualRenaming, =, new, PassFactory, (, "invertContextualRenaming", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, invertContextualRenaming, =, new, PassFactory, (, "invertContextualRenaming", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, renameProperties, =, new, PassFactory, (, "renameProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, MakeDeclaredNamesUnique, ., getContextualRenameInverter, (, compiler]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, MakeDeclaredNamesUnique, ., getContextualRenameInverter, (, compiler, ), ;]
[;, }, }, ;, final, PassFactory, renameProperties, =, new, PassFactory, (, "renameProperties", ,, true, ), {, @, Override, protected, CompilerPass]
[., getContextualRenameInverter, (, compiler, ), ;, }, }, ;, final, PassFactory, renameProperties, =, new, PassFactory, (, "renameProperties", ,, true, )]
[), ;, }, }, ;, final, PassFactory, renameProperties, =, new, PassFactory, (, "renameProperties", ,, true, ), {, @, Override, protected]
[;, private, VariableMap, runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,, Node, externs, ,, Node, root, ), {, char, []
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevPropertyMap, =, options]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevPropertyMap, =, options, ., inputPropertyMap]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., inputPropertyMap, ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, }, }, ;, private, VariableMap, runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,, Node, externs, ,, Node, root, )]
[=, runPropertyRenaming, (, compiler, ,, prevPropertyMap, ,, externs, ,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap]
[;, }, }, ;, }, }, ;, private, VariableMap, runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,, Node, externs, ,]
[,, prevPropertyMap, ,, externs, ,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap, runPropertyRenaming, (, AbstractCompiler, compiler]
[,, externs, ,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap, runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap]
[,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap, runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,]
[), ;, }, }, ;, }, }, ;, private, VariableMap, runPropertyRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevPropertyMap, ,, Node, externs]
[;, switch, (, options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false]
[., getReservedCharacters, (, ), ;, switch, (, options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes]
[., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, switch, (, options, ., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =]
[), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;]
[., propertyRenaming, ), {, case, HEURISTIC, :, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap]
[:, RenamePrototypes, rproto, =, new, RenamePrototypes, (, compiler, ,, false, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto, ., process, (]
[;, rproto, ., process, (, externs, ,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :]
[,, false, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto, ., process, (, externs, ,, root, ), ;, return, rproto, .]
[,, reservedChars, ,, prevPropertyMap, ), ;, rproto, ., process, (, externs, ,, root, ), ;, return, rproto, ., getPropertyMap, (]
[,, prevPropertyMap, ), ;, rproto, ., process, (, externs, ,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;]
[), ;, rproto, ., process, (, externs, ,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC]
[;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true]
[., process, (, externs, ,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2]
[,, root, ), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (]
[), ;, return, rproto, ., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,]
[;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto2]
[., getPropertyMap, (, ), ;, case, AGGRESSIVE_HEURISTIC, :, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,]
[:, RenamePrototypes, rproto2, =, new, RenamePrototypes, (, compiler, ,, true, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto2, ., process, (]
[;, rproto2, ., process, (, externs, ,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :]
[,, true, ,, reservedChars, ,, prevPropertyMap, ), ;, rproto2, ., process, (, externs, ,, root, ), ;, return, rproto2, .]
[,, reservedChars, ,, prevPropertyMap, ), ;, rproto2, ., process, (, externs, ,, root, ), ;, return, rproto2, ., getPropertyMap, (]
[,, prevPropertyMap, ), ;, rproto2, ., process, (, externs, ,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;]
[), ;, rproto2, ., process, (, externs, ,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED]
[;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options]
[., process, (, externs, ,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop]
[,, root, ), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (]
[), ;, return, rproto2, ., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,]
[;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,]
[., getPropertyMap, (, ), ;, case, ALL_UNQUOTED, :, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,]
[:, RenameProperties, rprop, =, new, RenameProperties, (, compiler, ,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars]
[;, rprop, ., process, (, externs, ,, root, ), ;, return, rprop, ., getPropertyMap, (, ), ;, default, :, throw]
[,, options, ., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,]
[,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,, root, ), ;, return]
[., propertyAffinity, ,, options, ., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,, root, )]
[,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,, root, ), ;, return, rprop, ., getPropertyMap, (]
[., generatePseudoNames, ,, prevPropertyMap, ,, reservedChars, ), ;, rprop, ., process, (, externs, ,, root, ), ;, return, rprop, .]
[,, reservedChars, ), ;, rprop, ., process, (, externs, ,, root, ), ;, return, rprop, ., getPropertyMap, (, ), ;]
[), ;, rprop, ., process, (, externs, ,, root, ), ;, return, rprop, ., getPropertyMap, (, ), ;, default, :]
[;, return, rprop, ., getPropertyMap, (, ), ;, default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;, }, }, final]
[., process, (, externs, ,, root, ), ;, return, rprop, ., getPropertyMap, (, ), ;, default, :, throw, new, IllegalStateException]
[,, root, ), ;, return, rprop, ., getPropertyMap, (, ), ;, default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;]
[), ;, return, rprop, ., getPropertyMap, (, ), ;, default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;, }, }]
[;, default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;, }, }, final, PassFactory, renameVars, =, new, PassFactory, (, "renameVars"]
[., getPropertyMap, (, ), ;, default, :, throw, new, IllegalStateException, (, "Unrecognized property renaming policy", ), ;, }, }, final, PassFactory, renameVars, =]
[;, }, }, final, PassFactory, renameVars, =, new, PassFactory, (, "renameVars", ,, true, ), {, @, Override, protected, CompilerPass, create]
[), ;, }, }, final, PassFactory, renameVars, =, new, PassFactory, (, "renameVars", ,, true, ), {, @, Override, protected, CompilerPass]
[;, private, VariableMap, runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,, Node, externs, ,, Node, root, ), {, char, []
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevVariableMap, =, options]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, final, VariableMap, prevVariableMap, =, options, ., inputVariableMap]
[;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[., inputVariableMap, ;, return, new, CompilerPass, (, ), {, @, Override, public, void, process, (, Node, externs, ,, Node, root]
[;, }, }, ;, private, VariableMap, runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,, Node, externs, ,, Node, root, )]
[=, runVariableRenaming, (, compiler, ,, prevVariableMap, ,, externs, ,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap]
[;, }, }, ;, }, }, ;, private, VariableMap, runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,, Node, externs, ,]
[,, prevVariableMap, ,, externs, ,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap, runVariableRenaming, (, AbstractCompiler, compiler]
[,, externs, ,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap, runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap]
[,, root, ), ;, }, }, ;, }, }, ;, private, VariableMap, runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,]
[), ;, }, }, ;, }, }, ;, private, VariableMap, runVariableRenaming, (, AbstractCompiler, compiler, ,, VariableMap, prevVariableMap, ,, Node, externs]
[;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =, Sets, .]
[., getReservedCharacters, (, ), ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >]
[., anonymousFunctionNaming, ., getReservedCharacters, (, ), ;, boolean, preserveAnonymousFunctionNames, =, options, ., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <]
[;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {]
[!=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames]
[., anonymousFunctionNaming, !=, AnonymousFunctionNamingPolicy, ., OFF, ;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if]
[;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {]
[., OFF, ;, Set, <, String, >, reservedNames, =, Sets, ., newHashSet, (, ), ;, if, (, exportedNames, !=, null]
[;, if, (, exportedNames, !=, null, ), {, reservedNames, ., addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (]
[., newHashSet, (, ), ;, if, (, exportedNames, !=, null, ), {, reservedNames, ., addAll, (, exportedNames, ), ;, }]
[), {, reservedNames, ., addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), )]
[!=, null, ), {, reservedNames, ., addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (]
[), {, reservedNames, ., addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), )]
[;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler]
[., addAll, (, exportedNames, ), ;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn]
[), ;, }, reservedNames, ., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (]
[;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL]
[., addAll, (, ParserRunner, ., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, .]
[), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, .]
[., getReservedVars, (, ), ), ;, RenameVars, rn, =, new, RenameVars, (, compiler, ,, options, ., renamePrefix, ,, options, .]
[;, rn, ., process, (, externs, ,, root, ), ;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory]
[,, options, ., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options]
[,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap]
[., renamePrefix, ,, options, ., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables]
[,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, .]
[==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames]
[., variableRenaming, ==, VariableRenamingPolicy, ., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars]
[,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, .]
[., LOCAL, ,, preserveAnonymousFunctionNames, ,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;]
[,, options, ., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (]
[,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,, root, )]
[., generatePseudoNames, ,, options, ., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,]
[,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,, root, ), ;, return, rn, .]
[., shadowVariables, ,, prevVariableMap, ,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,, root, ), ;, return]
[,, reservedChars, ,, reservedNames, ), ;, rn, ., process, (, externs, ,, root, ), ;, return, rn, ., getVariableMap, (]
[,, reservedNames, ), ;, rn, ., process, (, externs, ,, root, ), ;, return, rn, ., getVariableMap, (, ), ;]
[), ;, rn, ., process, (, externs, ,, root, ), ;, return, rn, ., getVariableMap, (, ), ;, }, final]
[;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =, new, PassFactory, (, "renameLabels", ,, true, )]
[., process, (, externs, ,, root, ), ;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =]
[,, root, ), ;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =, new, PassFactory, (, "renameLabels"]
[), ;, return, rn, ., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =, new, PassFactory, (, "renameLabels", ,, true]
[;, }, final, PassFactory, renameLabels, =, new, PassFactory, (, "renameLabels", ,, true, ), {, @, Override, protected, CompilerPass, create, (]
[., getVariableMap, (, ), ;, }, final, PassFactory, renameLabels, =, new, PassFactory, (, "renameLabels", ,, true, ), {, @, Override]
[;, final, PassFactory, convertToDottedProperties, =, new, PassFactory, (, "convertToDottedProperties", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RenameLabels, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, RenameLabels, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, convertToDottedProperties, =, new, PassFactory, (, "convertToDottedProperties", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, convertToDottedProperties, =, new, PassFactory, (, "convertToDottedProperties", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, sanityCheckAst, =, new, PassFactory, (, "sanityCheckAst", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConvertToDottedProperties, (, compiler, )]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, ConvertToDottedProperties, (, compiler, ), ;, }]
[;, }, }, ;, final, PassFactory, sanityCheckAst, =, new, PassFactory, (, "sanityCheckAst", ,, true, ), {, @, Override, protected, CompilerPass]
[), ;, }, }, ;, final, PassFactory, sanityCheckAst, =, new, PassFactory, (, "sanityCheckAst", ,, true, ), {, @, Override, protected]
[;, final, PassFactory, sanityCheckVars, =, new, PassFactory, (, "sanityCheckVars", ,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AstValidator, (, ), ;]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, AstValidator, (, ), ;, }, }]
[;, }, }, ;, final, PassFactory, sanityCheckVars, =, new, PassFactory, (, "sanityCheckVars", ,, true, ), {, @, Override, protected, CompilerPass]
[;, final, PassFactory, instrumentFunctions, =, new, PassFactory, (, "instrumentFunctions", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ,]
[), {, @, Override, protected, CompilerPass, create, (, AbstractCompiler, compiler, ), {, return, new, VarCheck, (, compiler, ,, true, )]
[;, }, }, ;, final, PassFactory, instrumentFunctions, =, new, PassFactory, (, "instrumentFunctions", ,, true, ), {, @, Override, protected, CompilerPass]
[,, true, ), ;, }, }, ;, final, PassFactory, instrumentFunctions, =, new, PassFactory, (, "instrumentFunctions", ,, true, ), {, @]
[), ;, }, }, ;, final, PassFactory, instrumentFunctions, =, new, PassFactory, (, "instrumentFunctions", ,, true, ), {, @, Override, protected]
[;, static, PassFactory, createEmptyPass, (, String, name, ), {, return, new, PassFactory, (, name, ,, true, ), {, @, Override]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {, return, new, PassFactory, (, name, ,, true, )]
[;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), )]
[), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, )]
[., instrumentationTemplate, ), ;, (, new, InstrumentFunctions, (, compiler, ,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,]
[., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError]
[), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (]
[,, functionNames, ,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root]
[,, options, ., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;]
[,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException]
[., instrumentationTemplate, ,, options, ., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch]
[,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler]
[., appNameStr, ,, templateFile, ), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, )]
[), ), ., process, (, externs, ,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report]
[,, root, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR]
[;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {, return, new, PassFactory, (]
[., report, (, JSError, ., make, (, AbstractCompiler, ., READ_ERROR, ,, options, ., instrumentationTemplate, ), ), ;, }, }, }]
[), ;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {, return, new, PassFactory]
[., make, (, AbstractCompiler, ., READ_ERROR, ,, options, ., instrumentationTemplate, ), ), ;, }, }, }, ;, }, }, ;]
[,, options, ., instrumentationTemplate, ), ), ;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name]
[., READ_ERROR, ,, options, ., instrumentationTemplate, ), ), ;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (]
[), ), ;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {, return, new]
[., instrumentationTemplate, ), ), ;, }, }, }, ;, }, }, ;, static, PassFactory, createEmptyPass, (, String, name, ), {]
[;, }, private, PassFactory, getCustomPasses, (, final, CustomPassExecutionTime, executionTime, ), {, return, new, PassFactory, (, "runCustomPasses", ,, true, ), {]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (, ), ;]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (, ), ;, }, }]
[;, }, }, ;, }, private, PassFactory, getCustomPasses, (, final, CustomPassExecutionTime, executionTime, ), {, return, new, PassFactory, (, "runCustomPasses", ,]
[;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (, options, .]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, runInSerial, (, options, ., customPasses, .]
[;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||]
[), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC]
[., get, (, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, .]
[., customPasses, ., get, (, executionTime, ), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return]
[), ), ;, }, }, ;, }, private, boolean, isInliningForbidden, (, ), {, return, options, ., propertyRenaming, ==, PropertyRenamingPolicy, .]
[;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (, Lists, ., newArrayList, (]
[||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, )]
[==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final]
[., propertyRenaming, ==, PropertyRenamingPolicy, ., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial]
[||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, )]
[., HEURISTIC, ||, options, ., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ...]
[;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (, Lists, ., newArrayList, (]
[==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (]
[., propertyRenaming, ==, PropertyRenamingPolicy, ., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return]
[;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (, Lists, ., newArrayList, (]
[., AGGRESSIVE_HEURISTIC, ;, }, private, static, CompilerPass, runInSerial, (, final, CompilerPass, ..., passes, ), {, return, runInSerial, (, Lists, .]
[;, }, private, static, CompilerPass, runInSerial, (, final, Collection, <, CompilerPass, >, passes, ), {, return, new, CompilerPass, (, )]
[), ;, }, private, static, CompilerPass, runInSerial, (, final, Collection, <, CompilerPass, >, passes, ), {, return, new, CompilerPass, (]
[., newArrayList, (, passes, ), ), ;, }, private, static, CompilerPass, runInSerial, (, final, Collection, <, CompilerPass, >, passes, )]
[), ), ;, }, private, static, CompilerPass, runInSerial, (, final, Collection, <, CompilerPass, >, passes, ), {, return, new, CompilerPass]
[;, }, @, VisibleForTesting, static, Map, <, String, ,, Node, >, getAdditionalReplacements, (, CompilerOptions, options, ), {, Map, <, String]
[), {, pass, ., process, (, externs, ,, root, ), ;, }, }, }, ;, }, @, VisibleForTesting, static, Map]
[;, }, }, }, ;, }, @, VisibleForTesting, static, Map, <, String, ,, Node, >, getAdditionalReplacements, (, CompilerOptions, options, )]
[., process, (, externs, ,, root, ), ;, }, }, }, ;, }, @, VisibleForTesting, static, Map, <, String, ,]
[,, root, ), ;, }, }, }, ;, }, @, VisibleForTesting, static, Map, <, String, ,, Node, >, getAdditionalReplacements, (]
[), ;, }, }, }, ;, }, @, VisibleForTesting, static, Map, <, String, ,, Node, >, getAdditionalReplacements, (, CompilerOptions, options]
[;, if, (, options, ., markAsCompiled, ||, options, ., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, .]
[., newHashMap, (, ), ;, if, (, options, ., markAsCompiled, ||, options, ., closurePass, ), {, additionalReplacements, ., put, (]
[), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (, options, .]
[||, options, ., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }]
[., markAsCompiled, ||, options, ., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), )]
[), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (, options, .]
[., closurePass, ), {, additionalReplacements, ., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (]
[;, }, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME]
[., put, (, COMPILED_CONSTANT_NAME, ,, IR, ., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&, options]
[,, IR, ., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&, options, ., locale, !=, null]
[), ;, }, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (]
[., trueNode, (, ), ), ;, }, if, (, options, ., closurePass, &&, options, ., locale, !=, null, ), {]
[), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, ), ), ;, }, return]
[&&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, .]
[., closurePass, &&, options, ., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (]
[), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, ), ), ;, }, return]
[!=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, ), ), ;]
[., locale, !=, null, ), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, )]
[), {, additionalReplacements, ., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, ), ), ;, }, return]
[;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory, (, "printNameReferenceGraph", ,, true, ), {, @, Override]
[., put, (, CLOSURE_LOCALE_CONSTANT_NAME, ,, IR, ., string, (, options, ., locale, ), ), ;, }, return, additionalReplacements, ;, }]
[,, IR, ., string, (, options, ., locale, ), ), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =]
[), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory, (, "printNameReferenceGraph", ,, true, ), {, @]
[., string, (, options, ., locale, ), ), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory]
[), ), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory, (, "printNameReferenceGraph", ,, true, ), {]
[., locale, ), ), ;, }, return, additionalReplacements, ;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory, (, "printNameReferenceGraph", ,, true]
[;, }, final, PassFactory, printNameReferenceGraph, =, new, PassFactory, (, "printNameReferenceGraph", ,, true, ), {, @, Override, protected, CompilerPass, create, (]
[;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (, "printNameReferenceReport", ,, true, ), {, @, Override, protected, CompilerPass, create, (, final]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (, "printNameReferenceReport", ,, true, ), {, @, Override, protected, CompilerPass]
[;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files]
[), ;, gc, ., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {]
[;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc, .]
[., process, (, externs, ,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write]
[,, jsRoot, ), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot]
[), ;, String, graphFileName, =, options, ., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc]
[;, try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File]
[., nameReferenceGraphPath, ;, try, {, Files, ., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, .]
[., write, (, DotFormatter, ., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,]
[,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler]
[., toDot, (, gc, ., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, )]
[), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {]
[., getNameReferenceGraph, (, ), ), ,, new, File, (, graphFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (]
[,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make]
[), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, .]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e]
[., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR]
[;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (, "printNameReferenceReport", ,, true, ), {]
[., report, (, JSError, ., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, ., getMessage, (, ), ,, graphFileName, ), ), ;, }]
[), ;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (, "printNameReferenceReport", ,, true, )]
[., make, (, NAME_REF_GRAPH_FILE_ERROR, ,, e, ., getMessage, (, ), ,, graphFileName, ), ), ;, }, }, }, ;, }]
[,, e, ., getMessage, (, ), ,, graphFileName, ), ), ;, }, }, }, ;, }, }, ;, final, PassFactory]
[,, graphFileName, ), ), ;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (, "printNameReferenceReport"]
[., getMessage, (, ), ,, graphFileName, ), ), ;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =]
[), ), ;, }, }, }, ;, }, }, ;, final, PassFactory, printNameReferenceReport, =, new, PassFactory, (, "printNameReferenceReport", ,, true]
[;, abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory, (, String, name, ,, boolean, isOneTimePass, ), {, super, (, name]
[,, true, ), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, )]
[), {, @, Override, protected, CompilerPass, create, (, final, AbstractCompiler, compiler, ), {, return, new, CompilerPass, (, ), {, @]
[;, }, }, ;, abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory, (, String, name, ,, boolean, isOneTimePass, ), {]
[;, String, reportFileName, =, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (]
[), ;, String, reportFileName, =, options, ., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph]
[;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;, Files, ., write, (]
[., nameReferenceReportPath, ;, try, {, NameReferenceGraphReport, report, =, new, NameReferenceGraphReport, (, gc, ., getNameReferenceGraph, (, ), ), ;, Files, .]
[;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8]
[), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,, Charsets, .]
[., getNameReferenceGraph, (, ), ), ;, Files, ., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName]
[;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, .]
[., write, (, report, ., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, ), ;]
[,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler]
[., getHtmlReport, (, ), ,, new, File, (, reportFileName, ), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException]
[,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make]
[), ,, Charsets, ., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, .]
[), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e]
[., UTF_8, ), ;, }, catch, (, IOException, e, ), {, compiler, ., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR]
[;, }, }, }, ;, }, }, ;, abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory, (, String, name, ,]
[., report, (, JSError, ., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, ., getMessage, (, ), ,, reportFileName, ), ), ;, }]
[), ;, }, }, }, ;, }, }, ;, abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory, (, String, name]
[., make, (, NAME_REF_REPORT_FILE_ERROR, ,, e, ., getMessage, (, ), ,, reportFileName, ), ), ;, }, }, }, ;, }]
[,, e, ., getMessage, (, ), ,, reportFileName, ), ), ;, }, }, }, ;, }, }, ;, abstract, static]
[,, reportFileName, ), ), ;, }, }, }, ;, }, }, ;, abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory]
[., getMessage, (, ), ,, reportFileName, ), ), ;, }, }, }, ;, }, }, ;, abstract, static, class, HotSwapPassFactory]
[), ), ;, }, }, }, ;, }, }, ;, abstract, static, class, HotSwapPassFactory, extends, PassFactory, {, HotSwapPassFactory, (, String]
[,, isOneTimePass, ), ;, }, @, Override, protected, abstract, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), ;, @, Override, HotSwapCompilerPass, getHotSwapPass]
[), ;, }, @, Override, protected, abstract, HotSwapCompilerPass, create, (, AbstractCompiler, compiler, ), ;, @, Override, HotSwapCompilerPass, getHotSwapPass, (, AbstractCompiler]
[;, }, }, }]
[., create, (, compiler, ), ;, }, }, }]
[), ;, }, }, }]
