[google, ., javascript, ., rhino, ., Node, ;, class, CheckRegExp, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, REGEXP_REFERENCE, =]
[google, ., javascript, ., rhino, ., Node, ;, class, CheckRegExp, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, REGEXP_REFERENCE, =]
[rhino, ., Node, ;, class, CheckRegExp, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, REGEXP_REFERENCE, =, DiagnosticType, ., warning, (]
[Node, ;, class, CheckRegExp, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, REGEXP_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REGEXP_REFERENCE", ,]
[Node, ;, class, CheckRegExp, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, REGEXP_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REGEXP_REFERENCE", ,]
[class, CheckRegExp, extends, AbstractPostOrderCallback, implements, CompilerPass, {, static, final, DiagnosticType, REGEXP_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REGEXP_REFERENCE", ,, "References to the global RegExp object prevents ", +]
[final, DiagnosticType, REGEXP_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REGEXP_REFERENCE", ,, "References to the global RegExp object prevents ", +, "optimization of regular expressions.", ), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =]
[final, DiagnosticType, REGEXP_REFERENCE, =, DiagnosticType, ., warning, (, "JSC_REGEXP_REFERENCE", ,, "References to the global RegExp object prevents ", +, "optimization of regular expressions.", ), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =]
[DiagnosticType, ., warning, (, "JSC_REGEXP_REFERENCE", ,, "References to the global RegExp object prevents ", +, "optimization of regular expressions.", ), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (]
[warning, (, "JSC_REGEXP_REFERENCE", ,, "References to the global RegExp object prevents ", +, "optimization of regular expressions.", ), ;, static, final, DiagnosticType, MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,]
[MALFORMED_REGEXP, =, DiagnosticType, ., warning, (, "JSC_MALFORMED_REGEXP", ,, "Malformed Regular Expression: {0}", ), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, globalRegExpPropertiesUsed, =]
[), ;, private, final, AbstractCompiler, compiler, ;, private, boolean, globalRegExpPropertiesUsed, =, false, ;, public, boolean, isGlobalRegExpPropertiesUsed, (, ), {, return]
[=, false, ;, public, boolean, isGlobalRegExpPropertiesUsed, (, ), {, return, globalRegExpPropertiesUsed, ;, }, public, CheckRegExp, (, AbstractCompiler, compiler, ), {]
[=, false, ;, public, boolean, isGlobalRegExpPropertiesUsed, (, ), {, return, globalRegExpPropertiesUsed, ;, }, public, CheckRegExp, (, AbstractCompiler, compiler, ), {]
[boolean, isGlobalRegExpPropertiesUsed, (, ), {, return, globalRegExpPropertiesUsed, ;, }, public, CheckRegExp, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[this, ., compiler, =, compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[compiler, ;, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[;, }, @, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (]
[public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isReferenceName, (]
[Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isReferenceName, (, n, ), ), {, String, name, =]
[Node, n, ,, Node, parent, ), {, if, (, NodeUtil, ., isReferenceName, (, n, ), ), {, String, name, =]
[(, NodeUtil, ., isReferenceName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[(, NodeUtil, ., isReferenceName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[(, NodeUtil, ., isReferenceName, (, n, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (]
[(, n, ), ), {, String, name, =, n, ., getString, (, ), ;, if, (, name, ., equals, (]
[), {, String, name, =, n, ., getString, (, ), ;, if, (, name, ., equals, (, "RegExp", ), &&]
[), {, String, name, =, n, ., getString, (, ), ;, if, (, name, ., equals, (, "RegExp", ), &&]
[), {, String, name, =, n, ., getString, (, ), ;, if, (, name, ., equals, (, "RegExp", ), &&]
[), {, String, name, =, n, ., getString, (, ), ;, if, (, name, ., equals, (, "RegExp", ), &&]
[(, ), ;, if, (, name, ., equals, (, "RegExp", ), &&, t, ., getScope, (, ), ., getVar, (]
[if, (, name, ., equals, (, "RegExp", ), &&, t, ., getScope, (, ), ., getVar, (, name, ), ==]
["RegExp", ), &&, t, ., getScope, (, ), ., getVar, (, name, ), ==, null, ), {, int, parentType, =]
["RegExp", ), &&, t, ., getScope, (, ), ., getVar, (, name, ), ==, null, ), {, int, parentType, =]
[getVar, (, name, ), ==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =]
[(, name, ), ==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (]
[(, name, ), ==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (]
[), ==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (, n, ==]
[), ==, null, ), {, int, parentType, =, parent, ., getType, (, ), ;, boolean, first, =, (, n, ==]
[., getType, (, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (]
[getType, (, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !]
[(, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (]
[(, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (]
[(, ), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (]
[), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (]
[), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (]
[), ;, boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (]
[boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==]
[boolean, first, =, (, n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==]
[n, ==, parent, ., getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&]
[., getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||]
[getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (]
[getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (]
[getFirstChild, (, ), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (]
[), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==]
[), ), ;, if, (, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==]
[(, !, (, (, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&]
[(, parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||]
[parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (]
[parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (]
[parentType, ==, Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (]
[Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==]
[Token, ., NEW, &&, first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==]
[first, ), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&]
[), ||, (, parentType, ==, Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !]
[Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {]
[Token, ., CALL, &&, first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {]
[first, ), ||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (]
[||, (, parentType, ==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n, ,]
[==, Token, ., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;]
[., INSTANCEOF, &&, !, first, ), ), ), {, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =]
[{, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (]
[{, t, ., report, (, n, ,, REGEXP_REFERENCE, ), ;, globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (]
[globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (, n, ., isRegExp, (, ), ), {, String, pattern, =]
[globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (, n, ., isRegExp, (, ), ), {, String, pattern, =]
[globalRegExpPropertiesUsed, =, true, ;, }, }, }, else, if, (, n, ., isRegExp, (, ), ), {, String, pattern, =]
[(, ), ), {, String, pattern, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[(, ), ), {, String, pattern, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[(, ), ), {, String, pattern, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[(, ), ), {, String, pattern, =, n, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =]
[=, n, ., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, n, ., getChildCount, (, ), ==]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, n, ., getChildCount, (, ), ==, 2, ?]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, n, ., getChildCount, (, ), ==, 2, ?]
[., getFirstChild, (, ), ., getString, (, ), ;, String, flags, =, n, ., getChildCount, (, ), ==, 2, ?]
[flags, =, n, ., getChildCount, (, ), ==, 2, ?, n, ., getLastChild, (, ), ., getString, (, ), :]
[getChildCount, (, ), ==, 2, ?, n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {]
[getChildCount, (, ), ==, 2, ?, n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {]
[2, ?, n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {, RegExpTree, ., parseRegExp, (]
[n, ., getLastChild, (, ), ., getString, (, ), :, "", ;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,]
["", ;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {]
["", ;, try, {, RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {]
[RegExpTree, ., parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (]
[parseRegExp, (, pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (, n, ,]
[pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (, n, ,, MALFORMED_REGEXP, ,]
[pattern, ,, flags, ), ;, }, catch, (, IllegalArgumentException, ex, ), {, t, ., report, (, n, ,, MALFORMED_REGEXP, ,]
