[;, public, static, final, Vector3D, PLUS_I, =, new, Vector3D, (, 1, ,, 0, ,, 0, ), ;, public, static, final]
[,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_I, =, new, Vector3D, (, 1, ,, 0, ,, 0]
[,, 0, ), ;, public, static, final, Vector3D, PLUS_I, =, new, Vector3D, (, 1, ,, 0, ,, 0, ), ;]
[), ;, public, static, final, Vector3D, PLUS_I, =, new, Vector3D, (, 1, ,, 0, ,, 0, ), ;, public, static]
[;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (, -, 1, ,, 0, ,, 0, ), ;, public, static]
[,, 0, ,, 0, ), ;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (, -, 1, ,, 0, ,]
[,, 0, ), ;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (, -, 1, ,, 0, ,, 0, )]
[), ;, public, static, final, Vector3D, MINUS_I, =, new, Vector3D, (, -, 1, ,, 0, ,, 0, ), ;, public]
[;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,, 1, ,, 0, ), ;, public, static, final]
[,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,, 1, ,, 0]
[,, 0, ,, 0, ), ;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,, 1, ,, 0]
[,, 0, ), ;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,, 1, ,, 0, ), ;]
[), ;, public, static, final, Vector3D, PLUS_J, =, new, Vector3D, (, 0, ,, 1, ,, 0, ), ;, public, static]
[;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,, -, 1, ,, 0, ), ;, public, static]
[,, 1, ,, 0, ), ;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,, -, 1, ,]
[,, 0, ), ;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,, -, 1, ,, 0, )]
[), ;, public, static, final, Vector3D, MINUS_J, =, new, Vector3D, (, 0, ,, -, 1, ,, 0, ), ;, public]
[;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,, 0, ,, 1, ), ;, public, static, final]
[,, -, 1, ,, 0, ), ;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,, 0, ,]
[,, 0, ), ;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,, 0, ,, 1, ), ;]
[,, 0, ), ;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,, 0, ,, 1, ), ;]
[), ;, public, static, final, Vector3D, PLUS_K, =, new, Vector3D, (, 0, ,, 0, ,, 1, ), ;, public, static]
[;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,, 0, ,, -, 1, ), ;, public, static]
[,, 0, ,, 1, ), ;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,, 0, ,, -]
[,, 1, ), ;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,, 0, ,, -, 1, )]
[), ;, public, static, final, Vector3D, MINUS_K, =, new, Vector3D, (, 0, ,, 0, ,, -, 1, ), ;, public]
[;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,, Double, ., NaN, ,, Double, .]
[,, 0, ,, -, 1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,]
[,, -, 1, ), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,, Double, .]
[), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,, Double, ., NaN, ,, Double]
[), ;, public, static, final, Vector3D, NaN, =, new, Vector3D, (, Double, ., NaN, ,, Double, ., NaN, ,, Double]
[;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, .]
[,, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double]
[., NaN, ,, Double, ., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D]
[,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,, Double]
[., NaN, ,, Double, ., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY]
[), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double]
[., NaN, ), ;, public, static, final, Vector3D, POSITIVE_INFINITY, =, new, Vector3D, (, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY]
[;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ,, Double, .]
[,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D]
[,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,, Double]
[., POSITIVE_INFINITY, ,, Double, ., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY]
[), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ,, Double]
[., POSITIVE_INFINITY, ), ;, public, static, final, Vector3D, NEGATIVE_INFINITY, =, new, Vector3D, (, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY]
[;, private, static, final, long, serialVersionUID, =, 1313493323784566947L, ;, private, final, double, x, ;, private, final, double, y, ;, private]
[,, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 1313493323784566947L, ;, private, final]
[., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 1313493323784566947L, ;]
[,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 1313493323784566947L, ;, private, final, double, x, ;, private]
[., NEGATIVE_INFINITY, ,, Double, ., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 1313493323784566947L, ;, private, final, double, x]
[), ;, private, static, final, long, serialVersionUID, =, 1313493323784566947L, ;, private, final, double, x, ;, private, final, double, y, ;]
[., NEGATIVE_INFINITY, ), ;, private, static, final, long, serialVersionUID, =, 1313493323784566947L, ;, private, final, double, x, ;, private, final, double]
[;, private, final, double, x, ;, private, final, double, y, ;, private, final, double, z, ;, public, Vector3D, (, double]
[=, x, ;, this, ., y, =, y, ;, this, ., z, =, z, ;, }, public, Vector3D, (, double]
[., x, =, x, ;, this, ., y, =, y, ;, this, ., z, =, z, ;, }, public, Vector3D]
[;, this, ., y, =, y, ;, this, ., z, =, z, ;, }, public, Vector3D, (, double, [, ]]
[=, y, ;, this, ., z, =, z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException]
[., y, =, y, ;, this, ., z, =, z, ;, }, public, Vector3D, (, double, [, ], v, )]
[;, this, ., z, =, z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if]
[=, z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length]
[., z, =, z, ;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v]
[;, }, public, Vector3D, (, double, [, ], v, ), throws, DimensionMismatchException, {, if, (, v, ., length, !=, 3]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =, v, []
[!=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =]
[., length, !=, 3, ), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, .]
[), {, throw, new, DimensionMismatchException, (, v, ., length, ,, 3, ), ;, }, this, ., x, =, v, []
[;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;]
[,, 3, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, []
[., length, ,, 3, ), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =]
[), ;, }, this, ., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ]]
[=, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;, this, ., z, =, v]
[., x, =, v, [, 0, ], ;, this, ., y, =, v, [, 1, ], ;, this, ., z]
[;, this, ., y, =, v, [, 1, ], ;, this, ., z, =, v, [, 2, ], ;, }]
[[, 0, ], ;, this, ., y, =, v, [, 1, ], ;, this, ., z, =, v, [, 2]
[], ;, this, ., y, =, v, [, 1, ], ;, this, ., z, =, v, [, 2, ], ;]
[=, v, [, 1, ], ;, this, ., z, =, v, [, 2, ], ;, }, public, Vector3D, (, double]
[., y, =, v, [, 1, ], ;, this, ., z, =, v, [, 2, ], ;, }, public, Vector3D]
[;, this, ., z, =, v, [, 2, ], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, )]
[[, 1, ], ;, this, ., z, =, v, [, 2, ], ;, }, public, Vector3D, (, double, alpha, ,]
[], ;, this, ., z, =, v, [, 2, ], ;, }, public, Vector3D, (, double, alpha, ,, double, delta]
[=, v, [, 2, ], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =]
[., z, =, v, [, 2, ], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double]
[;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (, delta]
[[, 2, ], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, .]
[], ;, }, public, Vector3D, (, double, alpha, ,, double, delta, ), {, double, cosDelta, =, FastMath, ., cos, (]
[;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, .]
[., cos, (, delta, ), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this]
[), ;, this, ., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath]
[=, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, )]
[., x, =, FastMath, ., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (]
[;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =, FastMath, .]
[*, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =]
[., cos, (, alpha, ), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta]
[), *, cosDelta, ;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z]
[;, this, ., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =, FastMath, .]
[=, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =, FastMath, ., sin, (, delta, )]
[., y, =, FastMath, ., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =, FastMath, ., sin, (]
[;, this, ., z, =, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D]
[*, cosDelta, ;, this, ., z, =, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double, a]
[., sin, (, alpha, ), *, cosDelta, ;, this, ., z, =, FastMath, ., sin, (, delta, ), ;, }]
[), *, cosDelta, ;, this, ., z, =, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double]
[;, this, ., z, =, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D]
[=, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this]
[., z, =, FastMath, ., sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, )]
[;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =, a, *, u, .]
[., sin, (, delta, ), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x]
[), ;, }, public, Vector3D, (, double, a, ,, Vector3D, u, ), {, this, ., x, =, a, *, u]
[=, a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, this, ., z]
[., x, =, a, *, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, this]
[;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =, a, *, u, ., z]
[*, u, ., x, ;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =, a]
[;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =, a, *, u, ., z]
[., x, ;, this, ., y, =, a, *, u, ., y, ;, this, ., z, =, a, *, u]
[=, a, *, u, ., y, ;, this, ., z, =, a, *, u, ., z, ;, }, public, Vector3D]
[., y, =, a, *, u, ., y, ;, this, ., z, =, a, *, u, ., z, ;, }]
[;, this, ., z, =, a, *, u, ., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1]
[*, u, ., y, ;, this, ., z, =, a, *, u, ., z, ;, }, public, Vector3D, (, double]
[;, this, ., z, =, a, *, u, ., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1]
[., y, ;, this, ., z, =, a, *, u, ., z, ;, }, public, Vector3D, (, double, a1, ,]
[=, a, *, u, ., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,]
[., z, =, a, *, u, ., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double]
[;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {, this, .]
[*, u, ., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2]
[;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {, this, .]
[., z, ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ), {]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ), ;, this, .]
[., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ), ;]
[;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y]
[., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =]
[,, u1, ., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (]
[,, a2, ,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, .]
[., x, ,, a2, ,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u2, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,]
[), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, .]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ), ;, this, .]
[., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ), ;]
[;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z]
[., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =]
[,, u1, ., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (]
[,, a2, ,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, .]
[., y, ,, a2, ,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u2, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,]
[), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, .]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ), ;, }, public]
[., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ), ;]
[;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3, ,]
[., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ), ;, }, public, Vector3D, (]
[,, u1, ., z, ,, a2, ,, u2, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D]
[,, a2, ,, u2, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2]
[., z, ,, a2, ,, u2, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,]
[,, u2, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D]
[), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3]
[., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3]
[., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3]
[;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y]
[., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x]
[,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ), ;, this, .]
[,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =, MathArrays, .]
[., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =]
[,, u2, ., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (]
[,, a3, ,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, .]
[., x, ,, a3, ,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u3, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,]
[), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, .]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3]
[., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3]
[;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z]
[., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y]
[,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ), ;, this, .]
[,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =, MathArrays, .]
[., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =]
[,, u2, ., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (]
[,, a3, ,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, .]
[., y, ,, a3, ,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u3, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,]
[), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, .]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3]
[., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3]
[;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3, ,]
[., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z]
[,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ), ;, }, public]
[,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ), ;, }, public, Vector3D, (, double, a1]
[., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ), ;, }, public, Vector3D, (]
[,, u2, ., z, ,, a3, ,, u3, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D]
[,, a3, ,, u3, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2]
[., z, ,, a3, ,, u3, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,]
[,, u3, ., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D]
[), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,, double, a3]
[., z, ), ;, }, public, Vector3D, (, double, a1, ,, Vector3D, u1, ,, double, a2, ,, Vector3D, u2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3]
[., x, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3]
[;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y]
[., linearCombination, (, a1, ,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x]
[,, u1, ., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4]
[,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;]
[., x, ,, a2, ,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x]
[,, u2, ., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;, this, .]
[,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =, MathArrays, .]
[., x, ,, a3, ,, u3, ., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =]
[,, u3, ., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (]
[,, a4, ,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, .]
[., x, ,, a4, ,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u4, ., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,]
[), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, .]
[., x, ), ;, this, ., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3]
[., y, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3]
[;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z]
[., linearCombination, (, a1, ,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y]
[,, u1, ., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4]
[,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;]
[., y, ,, a2, ,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y]
[,, u2, ., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;, this, .]
[,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =, MathArrays, .]
[., y, ,, a3, ,, u3, ., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =]
[,, u3, ., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (]
[,, a4, ,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, .]
[., y, ,, a4, ,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,]
[,, u4, ., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,]
[), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, .]
[., y, ), ;, this, ., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,]
[=, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3]
[., z, =, MathArrays, ., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3]
[;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {, return, y]
[., linearCombination, (, a1, ,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z]
[,, u1, ., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ,, a4, ,, u4]
[,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ,, a4, ,, u4, ., z, ), ;]
[., z, ,, a2, ,, u2, ., z, ,, a3, ,, u3, ., z, ,, a4, ,, u4, ., z]
[,, u2, ., z, ,, a3, ,, u3, ., z, ,, a4, ,, u4, ., z, ), ;, }, public]
[,, a3, ,, u3, ., z, ,, a4, ,, u4, ., z, ), ;, }, public, double, getX, (, )]
[., z, ,, a3, ,, u3, ., z, ,, a4, ,, u4, ., z, ), ;, }, public, double, getX]
[,, u3, ., z, ,, a4, ,, u4, ., z, ), ;, }, public, double, getX, (, ), {, return]
[,, a4, ,, u4, ., z, ), ;, }, public, double, getX, (, ), {, return, x, ;, }, public]
[., z, ,, a4, ,, u4, ., z, ), ;, }, public, double, getX, (, ), {, return, x, ;]
[,, u4, ., z, ), ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY]
[), ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, ), {, return]
[., z, ), ;, }, public, double, getX, (, ), {, return, x, ;, }, public, double, getY, (, )]
[;, }, public, double, getY, (, ), {, return, y, ;, }, public, double, getZ, (, ), {, return, z]
[;, }, public, double, getZ, (, ), {, return, z, ;, }, public, double, [, ], toArray, (, ), {]
[;, }, public, double, [, ], toArray, (, ), {, return, new, double, [, ], {, x, ,, y, ,]
[;, }, public, Space, getSpace, (, ), {, return, Euclidean3D, ., getInstance, (, ), ;, }, public, Vector3D, getZero, (]
[;, }, public, Space, getSpace, (, ), {, return, Euclidean3D, ., getInstance, (, ), ;, }, public, Vector3D, getZero, (]
[,, y, ,, z, }, ;, }, public, Space, getSpace, (, ), {, return, Euclidean3D, ., getInstance, (, ), ;]
[,, z, }, ;, }, public, Space, getSpace, (, ), {, return, Euclidean3D, ., getInstance, (, ), ;, }, public]
[}, ;, }, public, Space, getSpace, (, ), {, return, Euclidean3D, ., getInstance, (, ), ;, }, public, Vector3D, getZero]
[;, }, public, Vector3D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (, ), {, return, FastMath]
[., getInstance, (, ), ;, }, public, Vector3D, getZero, (, ), {, return, ZERO, ;, }, public, double, getNorm1, (]
[;, }, public, double, getNorm1, (, ), {, return, FastMath, ., abs, (, x, ), +, FastMath, ., abs, (]
[;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *, y]
[+, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[+, FastMath, ., abs, (, y, ), +, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (]
[., abs, (, x, ), +, FastMath, ., abs, (, y, ), +, FastMath, ., abs, (, z, ), ;]
[), +, FastMath, ., abs, (, y, ), +, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm]
[+, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (]
[., abs, (, y, ), +, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {]
[), +, FastMath, ., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt]
[;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *, y]
[., abs, (, z, ), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *]
[), ;, }, public, double, getNorm, (, ), {, return, FastMath, ., sqrt, (, x, *, x, +, y, *]
[;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +, z, *, z]
[., sqrt, (, x, *, x, +, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +, z, *]
[+, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *]
[+, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *]
[*, x, +, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return]
[+, y, *, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *]
[+, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *]
[*, y, +, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +]
[+, z, *, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +, z, *]
[*, z, ), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +]
[), ;, }, public, double, getNormSq, (, ), {, return, x, *, x, +, y, *, y, +, z, *]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (, FastMath, ., abs]
[+, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max]
[+, y, *, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max]
[*, x, +, y, *, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath]
[+, y, *, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max]
[+, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max]
[*, y, +, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath]
[+, z, *, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (, FastMath, ., abs]
[*, z, ;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (, FastMath]
[;, }, public, double, getNormInf, (, ), {, return, FastMath, ., max, (, FastMath, ., max, (, FastMath, ., abs]
[;, }, public, double, getAlpha, (, ), {, return, FastMath, ., atan2, (, y, ,, x, ), ;, }, public]
[., max, (, FastMath, ., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, )]
[,, FastMath, ., abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return, FastMath, ., atan2]
[., max, (, FastMath, ., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ,, FastMath, .]
[,, FastMath, ., abs, (, y, ), ), ,, FastMath, ., abs, (, z, ), ), ;, }, public, double]
[., abs, (, x, ), ,, FastMath, ., abs, (, y, ), ), ,, FastMath, ., abs, (, z, )]
[), ,, FastMath, ., abs, (, y, ), ), ,, FastMath, ., abs, (, z, ), ), ;, }, public]
[), ,, FastMath, ., abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return, FastMath, .]
[., abs, (, y, ), ), ,, FastMath, ., abs, (, z, ), ), ;, }, public, double, getAlpha, (]
[), ), ,, FastMath, ., abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return, FastMath]
[), ;, }, public, double, getAlpha, (, ), {, return, FastMath, ., atan2, (, y, ,, x, ), ;, }]
[., abs, (, z, ), ), ;, }, public, double, getAlpha, (, ), {, return, FastMath, ., atan2, (, y]
[), ), ;, }, public, double, getAlpha, (, ), {, return, FastMath, ., atan2, (, y, ,, x, ), ;]
[;, }, public, double, getDelta, (, ), {, return, FastMath, ., asin, (, z, /, getNorm, (, ), ), ;]
[., atan2, (, y, ,, x, ), ;, }, public, double, getDelta, (, ), {, return, FastMath, ., asin, (]
[,, x, ), ;, }, public, double, getDelta, (, ), {, return, FastMath, ., asin, (, z, /, getNorm, (]
[), ;, }, public, double, getDelta, (, ), {, return, FastMath, ., asin, (, z, /, getNorm, (, ), )]
[;, }, public, Vector3D, add, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[., asin, (, z, /, getNorm, (, ), ), ;, }, public, Vector3D, add, (, final, Vector, <, Euclidean3D, >]
[), ;, }, public, Vector3D, add, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[/, getNorm, (, ), ), ;, }, public, Vector3D, add, (, final, Vector, <, Euclidean3D, >, v, ), {, final]
[), ;, }, public, Vector3D, add, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +, v3, ., y, ,, z, +, v3]
[;, return, new, Vector3D, (, x, +, v3, ., x, ,, y, +, v3, ., y, ,, z, +, v3]
[;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new, Vector3D]
[,, y, +, v3, ., y, ,, z, +, v3, ., z, ), ;, }, public, Vector3D, add, (, double]
[+, v3, ., x, ,, y, +, v3, ., y, ,, z, +, v3, ., z, ), ;, }, public]
[,, y, +, v3, ., y, ,, z, +, v3, ., z, ), ;, }, public, Vector3D, add, (, double]
[., x, ,, y, +, v3, ., y, ,, z, +, v3, ., z, ), ;, }, public, Vector3D, add]
[,, z, +, v3, ., z, ), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D]
[+, v3, ., y, ,, z, +, v3, ., z, ), ;, }, public, Vector3D, add, (, double, factor, ,]
[,, z, +, v3, ., z, ), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D]
[., y, ,, z, +, v3, ., z, ), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector]
[), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new]
[+, v3, ., z, ), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v]
[), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new]
[., z, ), ;, }, public, Vector3D, add, (, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {]
[;, }, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[,, this, ,, factor, ,, (, Vector3D, ), v, ), ;, }, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D]
[,, factor, ,, (, Vector3D, ), v, ), ;, }, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D, >, v]
[,, (, Vector3D, ), v, ), ;, }, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D, >, v, ), {]
[), ;, }, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[), ;, }, public, Vector3D, subtract, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -, v3, ., y, ,, z, -, v3]
[;, return, new, Vector3D, (, x, -, v3, ., x, ,, y, -, v3, ., y, ,, z, -, v3]
[;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return, new]
[,, y, -, v3, ., y, ,, z, -, v3, ., z, ), ;, }, public, Vector3D, subtract, (, final]
[-, v3, ., x, ,, y, -, v3, ., y, ,, z, -, v3, ., z, ), ;, }, public]
[,, y, -, v3, ., y, ,, z, -, v3, ., z, ), ;, }, public, Vector3D, subtract, (, final]
[., x, ,, y, -, v3, ., y, ,, z, -, v3, ., z, ), ;, }, public, Vector3D, subtract]
[,, z, -, v3, ., z, ), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <]
[-, v3, ., y, ,, z, -, v3, ., z, ), ;, }, public, Vector3D, subtract, (, final, double, factor]
[,, z, -, v3, ., z, ), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <]
[., y, ,, z, -, v3, ., z, ), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final]
[), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return]
[-, v3, ., z, ), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >]
[), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, ), {, return]
[., z, ), ;, }, public, Vector3D, subtract, (, final, double, factor, ,, final, Vector, <, Euclidean3D, >, v, )]
[;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (, s]
[,, this, ,, -, factor, ,, (, Vector3D, ), v, ), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException]
[,, -, factor, ,, (, Vector3D, ), v, ), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double]
[,, (, Vector3D, ), v, ), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm]
[,, (, Vector3D, ), v, ), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm]
[), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[), ;, }, public, Vector3D, normalize, (, ), throws, MathArithmeticException, {, double, s, =, getNorm, (, ), ;, if, (]
[;, if, (, s, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;]
[;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double]
[), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {]
[., CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR, ), ;, }, return, scalarMultiply, (, 1, /, s, ), ;, }, public, Vector3D, orthogonal, (, ), throws]
[;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (, ), ;, if]
[), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (, ), ;]
[/, s, ), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (]
[), ;, }, public, Vector3D, orthogonal, (, ), throws, MathArithmeticException, {, double, threshold, =, 0.6, *, getNorm, (, ), ;]
[;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (]
[*, getNorm, (, ), ;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, )]
[;, if, (, threshold, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (, x, )]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (, x, )]
[;, }, if, (, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath]
[), ;, }, if, (, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /]
[., ZERO_NORM, ), ;, }, if, (, FastMath, ., abs, (, x, ), <=, threshold, ), {, double, inverse, =]
[), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +, z, *, z, ), ;]
[<=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +, z, *, z]
[., abs, (, x, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *]
[), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +, z, *]
[), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, y, *, y, +, z, *, z, ), ;]
[;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else, if]
[/, FastMath, ., sqrt, (, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,]
[;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else, if]
[., sqrt, (, y, *, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *]
[), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else]
[+, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y]
[*, y, +, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse]
[+, z, *, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y]
[), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else]
[*, z, ), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;]
[), ;, return, new, Vector3D, (, 0, ,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else]
[;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /]
[,, inverse, *, z, ,, -, inverse, *, y, ), ;, }, else, if, (, FastMath, ., abs, (, y]
[,, -, inverse, *, y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, )]
[*, z, ,, -, inverse, *, y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=]
[,, -, inverse, *, y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, )]
[), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1]
[*, y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse]
[*, y, ), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse]
[), ;, }, else, if, (, FastMath, ., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1]
[), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;]
[<=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *, z]
[., abs, (, y, ), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *]
[), <=, threshold, ), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *]
[), {, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;]
[;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse]
[/, FastMath, ., sqrt, (, x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse]
[;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse]
[., sqrt, (, x, *, x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z]
[), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double]
[+, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x]
[*, x, +, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse]
[+, z, *, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x]
[), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double]
[*, z, ), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;]
[), ;, return, new, Vector3D, (, -, inverse, *, z, ,, 0, ,, inverse, *, x, ), ;, }, double]
[;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *, y, ), ;]
[,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *]
[*, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[*, z, ,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (]
[,, 0, ,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *]
[,, inverse, *, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +]
[), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *, y, )]
[*, x, ), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *]
[), ;, }, double, inverse, =, 1, /, FastMath, ., sqrt, (, x, *, x, +, y, *, y, )]
[;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0, ), ;, }, public, static]
[/, FastMath, ., sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *]
[;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0, ), ;, }, public, static]
[., sqrt, (, x, *, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,]
[), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0, ), ;, }, public]
[+, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0]
[*, x, +, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x]
[+, y, *, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0]
[), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0, ), ;, }, public]
[*, y, ), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0, ), ;]
[), ;, return, new, Vector3D, (, inverse, *, y, ,, -, inverse, *, x, ,, 0, ), ;, }, public]
[;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double, normProduct, =, v1]
[,, -, inverse, *, x, ,, 0, ), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2]
[*, y, ,, -, inverse, *, x, ,, 0, ), ;, }, public, static, double, angle, (, Vector3D, v1, ,]
[,, -, inverse, *, x, ,, 0, ), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2]
[,, 0, ), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double]
[*, x, ,, 0, ), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException]
[*, x, ,, 0, ), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException]
[,, 0, ), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double]
[), ;, }, public, static, double, angle, (, Vector3D, v1, ,, Vector3D, v2, ), throws, MathArithmeticException, {, double, normProduct, =]
[;, if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot]
[*, v2, ., getNorm, (, ), ;, if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, .]
[., getNorm, (, ), *, v2, ., getNorm, (, ), ;, if, (, normProduct, ==, 0, ), {, throw, new]
[;, if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot]
[., getNorm, (, ), ;, if, (, normProduct, ==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, )]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct, (, v2]
[==, 0, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct]
[), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct, (, v2]
[;, }, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if]
[), ;, }, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;]
[., ZERO_NORM, ), ;, }, double, dot, =, v1, ., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *]
[;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -, threshold, ), ||, (, dot, >]
[., dotProduct, (, v2, ), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -, threshold]
[), ;, double, threshold, =, normProduct, *, 0.9999, ;, if, (, (, dot, <, -, threshold, ), ||, (, dot]
[;, if, (, (, dot, <, -, threshold, ), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =]
[*, 0.9999, ;, if, (, (, dot, <, -, threshold, ), ||, (, dot, >, threshold, ), ), {, Vector3D]
[;, if, (, (, dot, <, -, threshold, ), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =]
[), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {, return]
[||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (]
[), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if]
[<, -, threshold, ), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2]
[), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if]
[), ||, (, dot, >, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if]
[), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {, return]
[), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {]
[>, threshold, ), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0]
[), ), {, Vector3D, v3, =, crossProduct, (, v1, ,, v2, ), ;, if, (, dot, >=, 0, ), {]
[;, if, (, dot, >=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct]
[,, v2, ), ;, if, (, dot, >=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (]
[), ;, if, (, dot, >=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /]
[), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, .]
[>=, 0, ), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return]
[), {, return, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, .]
[;, }, return, FastMath, ., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;]
[., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., PI, -, FastMath, .]
[), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, )]
[/, normProduct, ), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /]
[., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (, v3, .]
[), ;, }, return, FastMath, ., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, )]
[;, }, return, FastMath, ., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return]
[-, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., acos, (]
[., PI, -, FastMath, ., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, .]
[;, }, return, FastMath, ., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return]
[., asin, (, v3, ., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., acos, (, dot, /]
[), ;, }, return, FastMath, ., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {]
[/, normProduct, ), ;, }, return, FastMath, ., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (]
[., getNorm, (, ), /, normProduct, ), ;, }, return, FastMath, ., acos, (, dot, /, normProduct, ), ;, }]
[), ;, }, return, FastMath, ., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {]
[;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,, -, y, ,, -, z]
[., acos, (, dot, /, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -]
[), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,, -, y, ,, -]
[/, normProduct, ), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,, -, y]
[), ;, }, public, Vector3D, negate, (, ), {, return, new, Vector3D, (, -, x, ,, -, y, ,, -]
[;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,, a, *]
[,, -, y, ,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D]
[,, -, y, ,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D]
[,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *]
[,, -, z, ), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *]
[), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,, a]
[), ;, }, public, Vector3D, scalarMultiply, (, double, a, ), {, return, new, Vector3D, (, a, *, x, ,, a]
[;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN, (]
[,, a, *, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, .]
[*, x, ,, a, *, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return]
[,, a, *, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, .]
[,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, )]
[*, y, ,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (]
[,, a, *, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, )]
[), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN]
[*, z, ), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double]
[), ;, }, public, boolean, isNaN, (, ), {, return, Double, ., isNaN, (, x, ), ||, Double, ., isNaN]
[;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x]
[||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, )]
[||, Double, ., isNaN, (, y, ), ||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (]
[., isNaN, (, x, ), ||, Double, ., isNaN, (, y, ), ||, Double, ., isNaN, (, z, ), ;]
[), ||, Double, ., isNaN, (, y, ), ||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite]
[||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, )]
[., isNaN, (, y, ), ||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {]
[), ||, Double, ., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (]
[;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (, x]
[., isNaN, (, z, ), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (]
[), ;, }, public, boolean, isInfinite, (, ), {, return, !, isNaN, (, ), &&, (, Double, ., isInfinite, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[&&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ||, Double, ., isInfinite, (]
[&&, (, Double, ., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ||, Double, ., isInfinite, (]
[;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {, return]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[||, Double, ., isInfinite, (, z, ), ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {]
[||, Double, ., isInfinite, (, y, ), ||, Double, ., isInfinite, (, z, ), ), ;, }, @, Override, public]
[., isInfinite, (, x, ), ||, Double, ., isInfinite, (, y, ), ||, Double, ., isInfinite, (, z, ), )]
[), ||, Double, ., isInfinite, (, y, ), ||, Double, ., isInfinite, (, z, ), ), ;, }, @, Override]
[||, Double, ., isInfinite, (, z, ), ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {]
[., isInfinite, (, y, ), ||, Double, ., isInfinite, (, z, ), ), ;, }, @, Override, public, boolean, equals]
[), ||, Double, ., isInfinite, (, z, ), ), ;, }, @, Override, public, boolean, equals, (, Object, other, )]
[), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, ), {]
[., isInfinite, (, z, ), ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (]
[), ), ;, }, @, Override, public, boolean, equals, (, Object, other, ), {, if, (, this, ==, other, )]
[), {, return, true, ;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (, Vector3D, )]
[==, other, ), {, return, true, ;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (]
[), {, return, true, ;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (, Vector3D, )]
[;, }, if, (, other, instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (, Vector3D, ), other, ;, if, (]
[), {, final, Vector3D, rhs, =, (, Vector3D, ), other, ;, if, (, rhs, ., isNaN, (, ), ), {]
[instanceof, Vector3D, ), {, final, Vector3D, rhs, =, (, Vector3D, ), other, ;, if, (, rhs, ., isNaN, (, )]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[;, if, (, rhs, ., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (]
[), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (]
[., isNaN, (, ), ), {, return, this, ., isNaN, (, ), ;, }, return, (, x, ==, rhs, .]
[;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), &&, (]
[., isNaN, (, ), ;, }, return, (, x, ==, rhs, ., x, ), &&, (, y, ==, rhs, .]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), )]
[&&, (, z, ==, rhs, ., z, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[&&, (, y, ==, rhs, ., y, ), &&, (, z, ==, rhs, ., z, ), ;, }, return, false]
[), &&, (, y, ==, rhs, ., y, ), &&, (, z, ==, rhs, ., z, ), ;, }, return]
[==, rhs, ., x, ), &&, (, y, ==, rhs, ., y, ), &&, (, z, ==, rhs, ., z]
[), &&, (, y, ==, rhs, ., y, ), &&, (, z, ==, rhs, ., z, ), ;, }, return]
[., x, ), &&, (, y, ==, rhs, ., y, ), &&, (, z, ==, rhs, ., z, ), ;]
[&&, (, z, ==, rhs, ., z, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (]
[), &&, (, z, ==, rhs, ., z, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode]
[==, rhs, ., y, ), &&, (, z, ==, rhs, ., z, ), ;, }, return, false, ;, }, @]
[), &&, (, z, ==, rhs, ., z, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode]
[., y, ), &&, (, z, ==, rhs, ., z, ), ;, }, return, false, ;, }, @, Override, public]
[;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), )]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, )]
[==, rhs, ., z, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if]
[), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, )]
[., z, ), ;, }, return, false, ;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN]
[;, }, @, Override, public, int, hashCode, (, ), {, if, (, isNaN, (, ), ), {, return, 642, ;]
[), {, return, 642, ;, }, return, 643, *, (, 164, *, MathUtils, ., hash, (, x, ), +, 3]
[;, }, return, 643, *, (, 164, *, MathUtils, ., hash, (, x, ), +, 3, *, MathUtils, ., hash]
[;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[*, (, 164, *, MathUtils, ., hash, (, x, ), +, 3, *, MathUtils, ., hash, (, y, ), +]
[;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[+, MathUtils, ., hash, (, z, ), ), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v]
[+, 3, *, MathUtils, ., hash, (, y, ), +, MathUtils, ., hash, (, z, ), ), ;, }, public]
[*, MathUtils, ., hash, (, x, ), +, 3, *, MathUtils, ., hash, (, y, ), +, MathUtils, ., hash]
[+, 3, *, MathUtils, ., hash, (, y, ), +, MathUtils, ., hash, (, z, ), ), ;, }, public]
[., hash, (, x, ), +, 3, *, MathUtils, ., hash, (, y, ), +, MathUtils, ., hash, (, z]
[), +, 3, *, MathUtils, ., hash, (, y, ), +, MathUtils, ., hash, (, z, ), ), ;, }]
[+, MathUtils, ., hash, (, z, ), ), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v]
[*, MathUtils, ., hash, (, y, ), +, MathUtils, ., hash, (, z, ), ), ;, }, public, double, dotProduct]
[+, MathUtils, ., hash, (, z, ), ), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v]
[., hash, (, y, ), +, MathUtils, ., hash, (, z, ), ), ;, }, public, double, dotProduct, (, final]
[), +, MathUtils, ., hash, (, z, ), ), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >]
[), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[., hash, (, z, ), ), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {]
[), ), ;, }, public, double, dotProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,, y, ,, v3, ., y, ,, z, ,]
[;, return, MathArrays, ., linearCombination, (, x, ,, v3, ., x, ,, y, ,, v3, ., y, ,, z, ,]
[;, }, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[., linearCombination, (, x, ,, v3, ., x, ,, y, ,, v3, ., y, ,, z, ,, v3, ., z]
[,, v3, ., x, ,, y, ,, v3, ., y, ,, z, ,, v3, ., z, ), ;, }, public]
[,, y, ,, v3, ., y, ,, z, ,, v3, ., z, ), ;, }, public, Vector3D, crossProduct, (, final]
[., x, ,, y, ,, v3, ., y, ,, z, ,, v3, ., z, ), ;, }, public, Vector3D, crossProduct]
[,, v3, ., y, ,, z, ,, v3, ., z, ), ;, }, public, Vector3D, crossProduct, (, final, Vector, <]
[,, z, ,, v3, ., z, ), ;, }, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >, v, )]
[., y, ,, z, ,, v3, ., z, ), ;, }, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >]
[,, v3, ., z, ), ;, }, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final]
[), ;, }, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[., z, ), ;, }, public, Vector3D, crossProduct, (, final, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3]
[;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,, -, z, ,, v3, .]
[;, return, new, Vector3D, (, MathArrays, ., linearCombination, (, y, ,, v3, ., z, ,, -, z, ,, v3, .]
[;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,, MathArrays]
[., linearCombination, (, y, ,, v3, ., z, ,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination]
[,, v3, ., z, ,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3]
[,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -]
[., z, ,, -, z, ,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x]
[,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3]
[,, v3, ., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3]
[), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,]
[., y, ), ,, MathArrays, ., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3, ., z]
[,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,, v3, ., x, ), ), ;]
[., linearCombination, (, z, ,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination]
[,, v3, ., x, ,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3]
[,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -]
[., x, ,, -, x, ,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y]
[,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,, v3]
[,, v3, ., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,, v3]
[), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,, v3, ., x, ), )]
[., z, ), ,, MathArrays, ., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,, v3, ., x]
[), ;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[., linearCombination, (, x, ,, v3, ., y, ,, -, y, ,, v3, ., x, ), ), ;, }, public]
[,, v3, ., y, ,, -, y, ,, v3, ., x, ), ), ;, }, public, double, distance1, (, Vector]
[,, -, y, ,, v3, ., x, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v]
[., y, ,, -, y, ,, v3, ., x, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean3D]
[,, v3, ., x, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final]
[,, v3, ., x, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final]
[), ), ;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[., x, ), ), ;, }, public, double, distance1, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =]
[., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, .]
[), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final]
[., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, )]
[), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz]
[;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, dx, +, dy]
[., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, .]
[), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, dx, +]
[-, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return]
[., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, )]
[), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, dx, +]
[;, return, dx, +, dy, +, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {]
[., abs, (, v3, ., z, -, z, ), ;, return, dx, +, dy, +, dz, ;, }, public, double]
[), ;, return, dx, +, dy, +, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, )]
[-, z, ), ;, return, dx, +, dy, +, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >]
[., z, -, z, ), ;, return, dx, +, dy, +, dz, ;, }, public, double, distance, (, Vector, <]
[), ;, return, dx, +, dy, +, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, )]
[;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[+, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[+, dy, +, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3]
[+, dz, ;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (]
[;, }, public, double, distance, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y]
[;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y]
[;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z]
[-, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z]
[., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3]
[;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[-, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +]
[;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, +, dz, *, dz, ), ;, }]
[-, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, +, dz, *, dz, )]
[., z, -, z, ;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, +, dz, *]
[;, return, FastMath, ., sqrt, (, dx, *, dx, +, dy, *, dy, +, dz, *, dz, ), ;, }]
[;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[., sqrt, (, dx, *, dx, +, dy, *, dy, +, dz, *, dz, ), ;, }, public, double, distanceInf]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[+, dz, *, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D]
[+, dy, *, dy, +, dz, *, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v]
[*, dx, +, dy, *, dy, +, dz, *, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D]
[+, dy, *, dy, +, dz, *, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v]
[+, dz, *, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D]
[*, dy, +, dz, *, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {]
[+, dz, *, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[*, dz, ), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[), ;, }, public, double, distanceInf, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dx, =, FastMath, ., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =]
[;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =]
[., abs, (, v3, ., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, .]
[), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz]
[-, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final]
[., x, -, x, ), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, )]
[), ;, final, double, dy, =, FastMath, ., abs, (, v3, ., y, -, y, ), ;, final, double, dz]
[;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, FastMath, ., max]
[., abs, (, v3, ., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, .]
[), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, FastMath, .]
[-, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return]
[., y, -, y, ), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, )]
[), ;, final, double, dz, =, FastMath, ., abs, (, v3, ., z, -, z, ), ;, return, FastMath, .]
[;, return, FastMath, ., max, (, FastMath, ., max, (, dx, ,, dy, ), ,, dz, ), ;, }, public]
[., abs, (, v3, ., z, -, z, ), ;, return, FastMath, ., max, (, FastMath, ., max, (, dx]
[), ;, return, FastMath, ., max, (, FastMath, ., max, (, dx, ,, dy, ), ,, dz, ), ;, }]
[-, z, ), ;, return, FastMath, ., max, (, FastMath, ., max, (, dx, ,, dy, ), ,, dz, )]
[., z, -, z, ), ;, return, FastMath, ., max, (, FastMath, ., max, (, dx, ,, dy, ), ,]
[), ;, return, FastMath, ., max, (, FastMath, ., max, (, dx, ,, dy, ), ,, dz, ), ;, }]
[;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D, )]
[., max, (, FastMath, ., max, (, dx, ,, dy, ), ,, dz, ), ;, }, public, double, distanceSq, (]
[,, dz, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =]
[., max, (, dx, ,, dy, ), ,, dz, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >]
[,, dy, ), ,, dz, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >, v, ), {, final]
[), ,, dz, ), ;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3]
[), ;, }, public, double, distanceSq, (, Vector, <, Euclidean3D, >, v, ), {, final, Vector3D, v3, =, (, Vector3D]
[;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y]
[;, final, double, dx, =, v3, ., x, -, x, ;, final, double, dy, =, v3, ., y, -, y]
[;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z]
[-, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z]
[., x, -, x, ;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3]
[;, final, double, dy, =, v3, ., y, -, y, ;, final, double, dz, =, v3, ., z, -, z]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +, dy, *, dy, +]
[-, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +, dy, *]
[., y, -, y, ;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +]
[;, final, double, dz, =, v3, ., z, -, z, ;, return, dx, *, dx, +, dy, *, dy, +]
[;, return, dx, *, dx, +, dy, *, dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (]
[-, z, ;, return, dx, *, dx, +, dy, *, dy, +, dz, *, dz, ;, }, public, static, double]
[., z, -, z, ;, return, dx, *, dx, +, dy, *, dy, +, dz, *, dz, ;, }, public]
[;, return, dx, *, dx, +, dy, *, dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (]
[;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., dotProduct, (, v2]
[+, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1]
[+, dy, *, dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2]
[*, dx, +, dy, *, dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,]
[+, dy, *, dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2]
[+, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1]
[*, dy, +, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {]
[+, dz, *, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1]
[;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., dotProduct, (, v2]
[*, dz, ;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., dotProduct]
[;, }, public, static, double, dotProduct, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., dotProduct, (, v2]
[;, }, public, static, Vector3D, crossProduct, (, final, Vector3D, v1, ,, final, Vector3D, v2, ), {, return, v1, ., crossProduct]
[., dotProduct, (, v2, ), ;, }, public, static, Vector3D, crossProduct, (, final, Vector3D, v1, ,, final, Vector3D, v2, )]
[), ;, }, public, static, Vector3D, crossProduct, (, final, Vector3D, v1, ,, final, Vector3D, v2, ), {, return, v1, .]
[;, }, public, static, double, distance1, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distance1, (, v2]
[., crossProduct, (, v2, ), ;, }, public, static, double, distance1, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distance1, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distance1, (]
[;, }, public, static, double, distance, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distance, (, v2]
[., distance1, (, v2, ), ;, }, public, static, double, distance, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distance, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distance, (]
[;, }, public, static, double, distanceInf, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distanceInf, (, v2]
[., distance, (, v2, ), ;, }, public, static, double, distanceInf, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distanceInf, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distanceInf, (]
[;, }, public, static, double, distanceSq, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distanceSq, (, v2]
[., distanceInf, (, v2, ), ;, }, public, static, double, distanceSq, (, Vector3D, v1, ,, Vector3D, v2, ), {, return]
[), ;, }, public, static, double, distanceSq, (, Vector3D, v1, ,, Vector3D, v2, ), {, return, v1, ., distanceSq, (]
[;, }, @, Override, public, String, toString, (, ), {, return, Vector3DFormat, ., getInstance, (, ), ., format, (, this]
[., distanceSq, (, v2, ), ;, }, @, Override, public, String, toString, (, ), {, return, Vector3DFormat, ., getInstance, (]
[), ;, }, @, Override, public, String, toString, (, ), {, return, Vector3DFormat, ., getInstance, (, ), ., format, (]
[;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector3DFormat, (, format, ), ., format, (]
[., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector3DFormat, (]
[., getInstance, (, ), ., format, (, this, ), ;, }, public, String, toString, (, final, NumberFormat, format, ), {]
[), ;, }, public, String, toString, (, final, NumberFormat, format, ), {, return, new, Vector3DFormat, (, format, ), ., format]
[;, }, }]
[., format, (, this, ), ;, }, }]
[), ., format, (, this, ), ;, }, }]
[), ;, }, }]
