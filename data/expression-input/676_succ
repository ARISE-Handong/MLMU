[;, private, final, int, numberOfElements, ;, private, final, double, exponent, ;, private, double, numericalMean, =, Double, ., NaN, ;, private]
[;, private, final, int, numberOfElements, ;, private, final, double, exponent, ;, private, double, numericalMean, =, Double, ., NaN, ;, private]
[;, private, boolean, numericalMeanIsCalculated, =, false, ;, private, double, numericalVariance, =, Double, ., NaN, ;, private, boolean, numericalVarianceIsCalculated, =, false]
[., NaN, ;, private, boolean, numericalMeanIsCalculated, =, false, ;, private, double, numericalVariance, =, Double, ., NaN, ;, private, boolean, numericalVarianceIsCalculated]
[;, private, double, numericalVariance, =, Double, ., NaN, ;, private, boolean, numericalVarianceIsCalculated, =, false, ;, public, ZipfDistribution, (, final, int]
[;, private, boolean, numericalVarianceIsCalculated, =, false, ;, public, ZipfDistribution, (, final, int, numberOfElements, ,, final, double, exponent, ), {, this]
[., NaN, ;, private, boolean, numericalVarianceIsCalculated, =, false, ;, public, ZipfDistribution, (, final, int, numberOfElements, ,, final, double, exponent, )]
[;, public, ZipfDistribution, (, final, int, numberOfElements, ,, final, double, exponent, ), {, this, (, new, Well19937c, (, ), ,]
[,, numberOfElements, ,, exponent, ), ;, }, public, ZipfDistribution, (, RandomGenerator, rng, ,, int, numberOfElements, ,, double, exponent, ), throws]
[,, exponent, ), ;, }, public, ZipfDistribution, (, RandomGenerator, rng, ,, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {]
[), ;, }, public, ZipfDistribution, (, RandomGenerator, rng, ,, int, numberOfElements, ,, double, exponent, ), throws, NotStrictlyPositiveException, {, super, (]
[), ;, if, (, numberOfElements, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, )]
[;, }, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;]
[,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,]
[., DIMENSION, ,, numberOfElements, ), ;, }, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, .]
[), ;, }, if, (, exponent, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, )]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =, numberOfElements, ;]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =, numberOfElements, ;]
[;, }, this, ., numberOfElements, =, numberOfElements, ;, this, ., exponent, =, exponent, ;, }, public, int, getNumberOfElements, (, )]
[,, exponent, ), ;, }, this, ., numberOfElements, =, numberOfElements, ;, this, ., exponent, =, exponent, ;, }, public, int]
[., EXPONENT, ,, exponent, ), ;, }, this, ., numberOfElements, =, numberOfElements, ;, this, ., exponent, =, exponent, ;, }]
[), ;, }, this, ., numberOfElements, =, numberOfElements, ;, this, ., exponent, =, exponent, ;, }, public, int, getNumberOfElements, (]
[=, numberOfElements, ;, this, ., exponent, =, exponent, ;, }, public, int, getNumberOfElements, (, ), {, return, numberOfElements, ;, }]
[., numberOfElements, =, numberOfElements, ;, this, ., exponent, =, exponent, ;, }, public, int, getNumberOfElements, (, ), {, return, numberOfElements]
[;, this, ., exponent, =, exponent, ;, }, public, int, getNumberOfElements, (, ), {, return, numberOfElements, ;, }, public, double]
[=, exponent, ;, }, public, int, getNumberOfElements, (, ), {, return, numberOfElements, ;, }, public, double, getExponent, (, ), {]
[., exponent, =, exponent, ;, }, public, int, getNumberOfElements, (, ), {, return, numberOfElements, ;, }, public, double, getExponent, (]
[;, }, public, int, getNumberOfElements, (, ), {, return, numberOfElements, ;, }, public, double, getExponent, (, ), {, return, exponent]
[;, }, public, double, getExponent, (, ), {, return, exponent, ;, }, public, double, probability, (, final, int, x, )]
[;, }, public, double, probability, (, final, int, x, ), {, if, (, x, <=, 0, ||, x, >, numberOfElements]
[), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, ), ), /]
[||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,]
[<=, 0, ||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (]
[||, x, >, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,]
[), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, ), ), /]
[>, numberOfElements, ), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, )]
[), {, return, 0.0, ;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, ), ), /]
[;, }, return, (, 1.0, /, FastMath, ., pow, (, x, ,, exponent, ), ), /, generalizedHarmonic, (, numberOfElements, ,]
[;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (, x, <=, 0, ), {, return, 0.0]
[/, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (]
[), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if]
[/, FastMath, ., pow, (, x, ,, exponent, ), ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public]
[), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if]
[., pow, (, x, ,, exponent, ), ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability]
[,, exponent, ), ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x]
[), ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {]
[;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (, x, <=, 0, ), {, return, 0.0]
[,, exponent, ), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (, x, <=, 0, )]
[), ;, }, public, double, cumulativeProbability, (, final, int, x, ), {, if, (, x, <=, 0, ), {, return]
[), {, return, 0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic]
[<=, 0, ), {, return, 0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }]
[), {, return, 0.0, ;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic]
[;, }, else, if, (, x, >=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,, exponent]
[), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,, exponent, ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, )]
[>=, numberOfElements, ), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,, exponent, ), /, generalizedHarmonic, (, numberOfElements, ,]
[), {, return, 1.0, ;, }, return, generalizedHarmonic, (, x, ,, exponent, ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, )]
[;, }, return, generalizedHarmonic, (, x, ,, exponent, ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double]
[;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =, calculateNumericalMean, (, ), ;]
[/, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, )]
[,, exponent, ), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (]
[), /, generalizedHarmonic, (, numberOfElements, ,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated]
[;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =, calculateNumericalMean, (, ), ;]
[,, exponent, ), ;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =, calculateNumericalMean]
[), ;, }, public, double, getNumericalMean, (, ), {, if, (, !, numericalMeanIsCalculated, ), {, numericalMean, =, calculateNumericalMean, (, )]
[), {, numericalMean, =, calculateNumericalMean, (, ), ;, numericalMeanIsCalculated, =, true, ;, }, return, numericalMean, ;, }, protected, double, calculateNumericalMean]
[), {, numericalMean, =, calculateNumericalMean, (, ), ;, numericalMeanIsCalculated, =, true, ;, }, return, numericalMean, ;, }, protected, double, calculateNumericalMean]
[=, calculateNumericalMean, (, ), ;, numericalMeanIsCalculated, =, true, ;, }, return, numericalMean, ;, }, protected, double, calculateNumericalMean, (, ), {]
[;, numericalMeanIsCalculated, =, true, ;, }, return, numericalMean, ;, }, protected, double, calculateNumericalMean, (, ), {, final, int, N, =]
[=, true, ;, }, return, numericalMean, ;, }, protected, double, calculateNumericalMean, (, ), {, final, int, N, =, getNumberOfElements, (]
[;, }, return, numericalMean, ;, }, protected, double, calculateNumericalMean, (, ), {, final, int, N, =, getNumberOfElements, (, ), ;]
[;, }, protected, double, calculateNumericalMean, (, ), {, final, int, N, =, getNumberOfElements, (, ), ;, final, double, s, =]
[;, final, double, s, =, getExponent, (, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1]
[;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (]
[;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, Hs1, /, Hs, ;, }, public, double]
[,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, Hs1, /]
[), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, Hs1, /, Hs, ;, }, public]
[-, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, Hs1, /, Hs, ;]
[), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, Hs1, /, Hs, ;, }, public]
[;, return, Hs1, /, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance]
[,, s, ), ;, return, Hs1, /, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated]
[), ;, return, Hs1, /, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[/, Hs, ;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (]
[;, }, public, double, getNumericalVariance, (, ), {, if, (, !, numericalVarianceIsCalculated, ), {, numericalVariance, =, calculateNumericalVariance, (, ), ;]
[), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance]
[), {, numericalVariance, =, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance]
[=, calculateNumericalVariance, (, ), ;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {]
[;, numericalVarianceIsCalculated, =, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, int, N, =]
[=, true, ;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, int, N, =, getNumberOfElements, (]
[;, }, return, numericalVariance, ;, }, protected, double, calculateNumericalVariance, (, ), {, final, int, N, =, getNumberOfElements, (, ), ;]
[;, }, protected, double, calculateNumericalVariance, (, ), {, final, int, N, =, getNumberOfElements, (, ), ;, final, double, s, =]
[;, final, double, s, =, getExponent, (, ), ;, final, double, Hs2, =, generalizedHarmonic, (, N, ,, s, -, 2]
[;, final, double, Hs2, =, generalizedHarmonic, (, N, ,, s, -, 2, ), ;, final, double, Hs1, =, generalizedHarmonic, (]
[;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (]
[,, s, -, 2, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final]
[), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic]
[-, 2, ), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs]
[), ;, final, double, Hs1, =, generalizedHarmonic, (, N, ,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic]
[;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -, (]
[,, s, -, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2]
[), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -]
[-, 1, ), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs]
[), ;, final, double, Hs, =, generalizedHarmonic, (, N, ,, s, ), ;, return, (, Hs2, /, Hs, ), -]
[;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *, Hs1, ), /, (, Hs, *, Hs, )]
[,, s, ), ;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *, Hs1, ), /, (, Hs]
[), ;, return, (, Hs2, /, Hs, ), -, (, (, Hs1, *, Hs1, ), /, (, Hs, *, Hs]
[;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double, value, =, 0, ;]
[-, (, (, Hs1, *, Hs1, ), /, (, Hs, *, Hs, ), ), ;, }, private, double, generalizedHarmonic, (]
[), -, (, (, Hs1, *, Hs1, ), /, (, Hs, *, Hs, ), ), ;, }, private, double, generalizedHarmonic]
[/, Hs, ), -, (, (, Hs1, *, Hs1, ), /, (, Hs, *, Hs, ), ), ;, }, private]
[), -, (, (, Hs1, *, Hs1, ), /, (, Hs, *, Hs, ), ), ;, }, private, double, generalizedHarmonic]
[;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double, value, =, 0, ;]
[), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double, value, =, 0]
[/, (, Hs, *, Hs, ), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m]
[), /, (, Hs, *, Hs, ), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double]
[*, Hs1, ), /, (, Hs, *, Hs, ), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,]
[), /, (, Hs, *, Hs, ), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double]
[), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double, value, =, 0]
[), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double, value, =]
[*, Hs, ), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double]
[), ), ;, }, private, double, generalizedHarmonic, (, final, int, n, ,, final, double, m, ), {, double, value, =]
[;, for, (, int, k, =, n, ;, k, >, 0, ;, --, k, ), {, value, +=, 1.0, /]
[;, k, >, 0, ;, --, k, ), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,, m]
[;, --, k, ), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,, m, ), ;, }, return]
[>, 0, ;, --, k, ), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,, m, ), ;]
[;, --, k, ), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,, m, ), ;, }, return]
[), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,, m, ), ;, }, return, value, ;, }]
[), {, value, +=, 1.0, /, FastMath, ., pow, (, k, ,, m, ), ;, }, return, value, ;, }]
[+=, 1.0, /, FastMath, ., pow, (, k, ,, m, ), ;, }, return, value, ;, }, public, int, getSupportLowerBound]
[;, }, return, value, ;, }, public, int, getSupportLowerBound, (, ), {, return, 1, ;, }, public, int, getSupportUpperBound, (]
[/, FastMath, ., pow, (, k, ,, m, ), ;, }, return, value, ;, }, public, int, getSupportLowerBound, (, )]
[;, }, return, value, ;, }, public, int, getSupportLowerBound, (, ), {, return, 1, ;, }, public, int, getSupportUpperBound, (]
[., pow, (, k, ,, m, ), ;, }, return, value, ;, }, public, int, getSupportLowerBound, (, ), {, return]
[,, m, ), ;, }, return, value, ;, }, public, int, getSupportLowerBound, (, ), {, return, 1, ;, }, public]
[), ;, }, return, value, ;, }, public, int, getSupportLowerBound, (, ), {, return, 1, ;, }, public, int, getSupportUpperBound]
[;, }, public, int, getSupportLowerBound, (, ), {, return, 1, ;, }, public, int, getSupportUpperBound, (, ), {, return, getNumberOfElements]
[;, }, public, int, getSupportUpperBound, (, ), {, return, getNumberOfElements, (, ), ;, }, public, boolean, isSupportConnected, (, ), {]
[;, }, public, boolean, isSupportConnected, (, ), {, return, true, ;, }, }]
[;, }, }]
