[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, final, int, type, =]
[@, Override, public, void, visit, (, NodeTraversal, t, ,, Node, n, ,, Node, parent, ), {, final, int, type, =]
[,, Node, n, ,, Node, parent, ), {, final, int, type, =, n, ., getType, (, ), ;, if, (]
[n, ,, Node, parent, ), {, final, int, type, =, n, ., getType, (, ), ;, if, (, isAliasableType, (]
[), {, final, int, type, =, n, ., getType, (, ), ;, if, (, isAliasableType, (, type, ), ), {]
[final, int, type, =, n, ., getType, (, ), ;, if, (, isAliasableType, (, type, ), ), {, visitAliasableNode, (]
[type, =, n, ., getType, (, ), ;, if, (, isAliasableType, (, type, ), ), {, visitAliasableNode, (, n, ,]
[;, if, (, isAliasableType, (, type, ), ), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (]
[;, if, (, isAliasableType, (, type, ), ), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (]
[(, isAliasableType, (, type, ), ), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (, type, ==]
[(, isAliasableType, (, type, ), ), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (, type, ==]
[), {, visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (, type, ==, Token, ., NAME, ), {]
[visitAliasableNode, (, n, ,, parent, ), ;, }, else, if, (, type, ==, Token, ., NAME, ), {, visitNameNode, (]
[(, n, ), ;, }, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =]
[(, n, ), ;, }, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =]
[}, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =, aliasTypes, ., get, (]
[}, }, private, void, visitAliasableNode, (, Node, n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =, aliasTypes, ., get, (]
[n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =, aliasTypes, ., get, (, n, ., getType, (, ), ), ;]
[n, ,, Node, parent, ), {, AliasSpecification, aliasableNodes, =, aliasTypes, ., get, (, n, ., getType, (, ), ), ;]
[), {, AliasSpecification, aliasableNodes, =, aliasTypes, ., get, (, n, ., getType, (, ), ), ;, aliasableNodes, ., visit, (]
[AliasSpecification, aliasableNodes, =, aliasTypes, ., get, (, n, ., getType, (, ), ), ;, aliasableNodes, ., visit, (, n, ,]
[aliasableNodes, ., visit, (, n, ,, parent, ), ;, }, private, void, visitNameNode, (, Node, n, ), {, if, (]
[visit, (, n, ,, parent, ), ;, }, private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (]
[), ;, }, private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), ), {, throw]
[private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), ), {, throw, new, IllegalStateException, (]
[private, void, visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), ), {, throw, new, IllegalStateException, (]
[visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), ), {, throw, new, IllegalStateException, (, "Existing alias definition for ", +]
[visitNameNode, (, Node, n, ), {, if, (, isAliasDefinition, (, n, ), ), {, throw, new, IllegalStateException, (, "Existing alias definition for ", +]
[), {, if, (, isAliasDefinition, (, n, ), ), {, throw, new, IllegalStateException, (, "Existing alias definition for ", +, Token, ., name, (]
[), {, if, (, isAliasDefinition, (, n, ), ), {, throw, new, IllegalStateException, (, "Existing alias definition for ", +, Token, ., name, (]
[;, }, }, }, private, abstract, static, class, AliasSpecification, {, private, final, Map, <, Node, ,, Node, >, nodes, =]
[;, }, }, }, private, abstract, static, class, AliasSpecification, {, private, final, Map, <, Node, ,, Node, >, nodes, =]
[private, final, Map, <, Node, ,, Node, >, nodes, =, Maps, ., newHashMap, (, ), ;, private, boolean, isAliased, =]
[false, ;, private, String, aliasName, ;, private, int, tokenId, ;, public, AliasSpecification, (, String, aliasName, ,, int, tokenId, ), {]
[false, ;, private, String, aliasName, ;, private, int, tokenId, ;, public, AliasSpecification, (, String, aliasName, ,, int, tokenId, ), {]
[aliasName, ;, private, int, tokenId, ;, public, AliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, this, ., aliasName, =]
[private, int, tokenId, ;, public, AliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, this, ., aliasName, =, aliasName, ;]
[private, int, tokenId, ;, public, AliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, this, ., aliasName, =, aliasName, ;]
[public, AliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, this, ., aliasName, =, aliasName, ;, this, ., tokenId, =]
[aliasName, ;, this, ., tokenId, =, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {]
[aliasName, ;, this, ., tokenId, =, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {]
[tokenId, =, tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {, nodes, ., put, (]
[tokenId, ;, }, public, void, visit, (, Node, n, ,, Node, parent, ), {, nodes, ., put, (, n, ,]
[{, nodes, ., put, (, n, ,, parent, ), ;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (]
[{, nodes, ., put, (, n, ,, parent, ), ;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (]
[{, nodes, ., put, (, n, ,, parent, ), ;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (]
[,, parent, ), ;, }, boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (, nodes, ., size, (, ), >=]
[boolean, maybeInsertAliasDeclarationIntoParseTree, (, Node, codeRoot, ), {, if, (, nodes, ., size, (, ), >=, minOccurrencesRequiredToAlias, (, ), ), {]
[(, Node, codeRoot, ), {, if, (, nodes, ., size, (, ), >=, minOccurrencesRequiredToAlias, (, ), ), {, insertAliasDeclaration, (]
[), {, if, (, nodes, ., size, (, ), >=, minOccurrencesRequiredToAlias, (, ), ), {, insertAliasDeclaration, (, codeRoot, ), ;]
[if, (, nodes, ., size, (, ), >=, minOccurrencesRequiredToAlias, (, ), ), {, insertAliasDeclaration, (, codeRoot, ), ;, isAliased, =]
[., size, (, ), >=, minOccurrencesRequiredToAlias, (, ), ), {, insertAliasDeclaration, (, codeRoot, ), ;, isAliased, =, true, ;, return]
[>=, minOccurrencesRequiredToAlias, (, ), ), {, insertAliasDeclaration, (, codeRoot, ), ;, isAliased, =, true, ;, return, true, ;, }, return]
[true, ;, return, true, ;, }, return, false, ;, }, public, void, doAlias, (, AbstractCompiler, compiler, ), {, if, (]
[compiler, ), {, if, (, isAliased, ), {, for, (, Map, ., Entry, <, Node, ,, Node, >, entry, :]
[compiler, ), {, if, (, isAliased, ), {, for, (, Map, ., Entry, <, Node, ,, Node, >, entry, :]
[Map, ., Entry, <, Node, ,, Node, >, entry, :, nodes, ., entrySet, (, ), ), {, Node, n, =]
[Map, ., Entry, <, Node, ,, Node, >, entry, :, nodes, ., entrySet, (, ), ), {, Node, n, =]
[:, nodes, ., entrySet, (, ), ), {, Node, n, =, entry, ., getKey, (, ), ;, Node, parent, =]
[:, nodes, ., entrySet, (, ), ), {, Node, n, =, entry, ., getKey, (, ), ;, Node, parent, =]
[), {, Node, n, =, entry, ., getKey, (, ), ;, Node, parent, =, entry, ., getValue, (, ), ;]
[Node, n, =, entry, ., getKey, (, ), ;, Node, parent, =, entry, ., getValue, (, ), ;, aliasNode, (]
[=, entry, ., getKey, (, ), ;, Node, parent, =, entry, ., getValue, (, ), ;, aliasNode, (, n, ,]
[getKey, (, ), ;, Node, parent, =, entry, ., getValue, (, ), ;, aliasNode, (, n, ,, parent, ), ;]
[getKey, (, ), ;, Node, parent, =, entry, ., getValue, (, ), ;, aliasNode, (, n, ,, parent, ), ;]
[,, parent, ), ;, compiler, ., reportCodeChange, (, ), ;, }, }, }, public, int, getTokenId, (, ), {, return]
[}, }, }, public, int, getTokenId, (, ), {, return, tokenId, ;, }, public, String, getAliasName, (, ), {, return]
[,, Node, parent, ), ;, }, private, class, ThrowAliasSpecification, extends, AliasSpecification, {, ThrowAliasSpecification, (, String, aliasName, ), {, super, (]
[parent, ), ;, }, private, class, ThrowAliasSpecification, extends, AliasSpecification, {, ThrowAliasSpecification, (, String, aliasName, ), {, super, (, aliasName, ,]
[parent, ), ;, }, private, class, ThrowAliasSpecification, extends, AliasSpecification, {, ThrowAliasSpecification, (, String, aliasName, ), {, super, (, aliasName, ,]
[THROW, ), ;, }, @, Override, protected, void, aliasNode, (, Node, throwNode, ,, Node, parent, ), {, Node, name, =]
[THROW, ), ;, }, @, Override, protected, void, aliasNode, (, Node, throwNode, ,, Node, parent, ), {, Node, name, =]
[@, Override, protected, void, aliasNode, (, Node, throwNode, ,, Node, parent, ), {, Node, name, =, NodeUtil, ., newName, (]
[@, Override, protected, void, aliasNode, (, Node, throwNode, ,, Node, parent, ), {, Node, name, =, NodeUtil, ., newName, (]
[Node, throwNode, ,, Node, parent, ), {, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[parent, ), {, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,]
[{, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, throwNode, ,]
[compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =]
[compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =]
[), ,, getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =, IR, ., call, (]
[getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =, IR, ., call, (, name, ,]
[getAliasName, (, ), ,, throwNode, ,, getAliasName, (, ), ), ;, Node, aliasCall, =, IR, ., call, (, name, ,]
[(, ), ), ;, Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;]
[(, ), ), ;, Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;]
[Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (]
[Node, aliasCall, =, IR, ., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (]
[., call, (, name, ,, throwNode, ., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =]
[., removeFirstChild, (, ), ), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =]
[), ;, aliasCall, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;]
[., FREE_CALL, ,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;, parent, ., replaceChild, (]
[,, true, ), ;, Node, exprResult, =, IR, ., exprResult, (, aliasCall, ), ;, parent, ., replaceChild, (, throwNode, ,]
[parent, ., replaceChild, (, throwNode, ,, exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {]
[parent, ., replaceChild, (, throwNode, ,, exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {]
[throwNode, ,, exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, codeRoot, ., addChildToFront, (]
[exprResult, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, codeRoot, ., addChildToFront, (, createAliasFunctionNode, (]
[addChildToFront, (, createAliasFunctionNode, (, getAliasName, (, ), ), ), ;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return]
[protected, int, minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =]
[minOccurrencesRequiredToAlias, (, ), {, return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, ;, }, }, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return]
[}, static, int, estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return, InlineCostEstimator, ., getCost, (]
[estimateMinOccurrencesRequriedToAlias, (, ), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return, InlineCostEstimator, ., getCost, (, alias, ), /]
[), {, Node, alias, =, createAliasFunctionNode, (, "TT", ), ;, return, InlineCostEstimator, ., getCost, (, alias, ), /, 2, +]
[), /, 2, +, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =]
[+, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return]
[+, 1, ;, }, private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return]
[private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, ., function, (]
[private, static, Node, createAliasFunctionNode, (, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, ., function, (]
[(, String, aliasName, ), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, ., function, (, IR, ., name, (]
[), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, ., function, (, IR, ., name, (, aliasName, ), ,]
[), {, final, String, PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, ., function, (, IR, ., name, (, aliasName, ), ,]
[PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, ., function, (, IR, ., name, (, aliasName, ), ,, IR, ., paramList, (]
[PARAM_NAME, =, "jscomp_throw_param", ;, return, IR, ., function, (, IR, ., name, (, aliasName, ), ,, IR, ., paramList, (]
[return, IR, ., function, (, IR, ., name, (, aliasName, ), ,, IR, ., paramList, (, IR, ., name, (]
[(, IR, ., name, (, aliasName, ), ,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,]
[(, IR, ., name, (, aliasName, ), ,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,]
[(, aliasName, ), ,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (]
[(, aliasName, ), ,, IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (]
[IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (, IR, ., throwNode, (]
[IR, ., paramList, (, IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (, IR, ., throwNode, (]
[IR, ., name, (, PARAM_NAME, ), ), ,, IR, ., block, (, IR, ., throwNode, (, IR, ., name, (]
[), ;, }, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super, (]
[}, private, class, KeywordAliasSpecification, extends, AliasSpecification, {, KeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super, (, aliasName, ,]
[tokenId, ), {, super, (, aliasName, ,, tokenId, ), ;, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =]
[@, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (]
[@, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (]
[Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,]
[{, Node, aliasNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (]
[(, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,]
[(, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =]
[aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (]
[aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (]
[insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, value, =]
[codeRoot, ), {, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, value, =, new, Node, (]
[(, Token, ., VAR, ), ;, Node, value, =, new, Node, (, getTokenId, (, ), ), ;, Node, name, =]
[(, Token, ., VAR, ), ;, Node, value, =, new, Node, (, getTokenId, (, ), ), ;, Node, name, =]
[), ;, Node, value, =, new, Node, (, getTokenId, (, ), ), ;, Node, name, =, NodeUtil, ., newName, (]
[), ;, Node, value, =, new, Node, (, getTokenId, (, ), ), ;, Node, name, =, NodeUtil, ., newName, (]
[Node, (, getTokenId, (, ), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,]
[;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (]
[), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;]
[), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;]
[), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (]
[,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;]
[,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;]
[), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (]
[;, }, }, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification, {, VoidKeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super, (]
[}, private, class, VoidKeywordAliasSpecification, extends, AliasSpecification, {, VoidKeywordAliasSpecification, (, String, aliasName, ,, int, tokenId, ), {, super, (, aliasName, ,]
[tokenId, ), ;, }, @, Override, public, void, visit, (, Node, n, ,, Node, parent, ), {, Node, value, =]
[tokenId, ), ;, }, @, Override, public, void, visit, (, Node, n, ,, Node, parent, ), {, Node, value, =]
[visit, (, Node, n, ,, Node, parent, ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[visit, (, Node, n, ,, Node, parent, ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[visit, (, Node, n, ,, Node, parent, ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (]
[parent, ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, ., isNumber, (, ), &&]
[parent, ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, ., isNumber, (, ), &&]
[parent, ), {, Node, value, =, n, ., getFirstChild, (, ), ;, if, (, value, ., isNumber, (, ), &&]
[n, ., getFirstChild, (, ), ;, if, (, value, ., isNumber, (, ), &&, value, ., getDouble, (, ), ==]
[(, ), ;, if, (, value, ., isNumber, (, ), &&, value, ., getDouble, (, ), ==, 0, ), {]
[(, ), ;, if, (, value, ., isNumber, (, ), &&, value, ., getDouble, (, ), ==, 0, ), {]
[(, value, ., isNumber, (, ), &&, value, ., getDouble, (, ), ==, 0, ), {, super, ., visit, (]
[., isNumber, (, ), &&, value, ., getDouble, (, ), ==, 0, ), {, super, ., visit, (, n, ,]
[super, ., visit, (, n, ,, parent, ), ;, }, }, @, Override, protected, int, minOccurrencesRequiredToAlias, (, ), {, return]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =]
[return, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, ;, }, @, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =]
[@, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (]
[@, Override, protected, void, aliasNode, (, Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (]
[Node, n, ,, Node, parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[parent, ), {, Node, aliasNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,]
[{, Node, aliasNode, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (]
[(, ), ,, getAliasName, (, ), ,, n, ,, getAliasName, (, ), ), ;, parent, ., replaceChild, (, n, ,]
[(, n, ,, aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =]
[aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (]
[aliasNode, ), ;, }, @, Override, protected, void, insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (]
[insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, value, =]
[insertAliasDeclaration, (, Node, codeRoot, ), {, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, value, =]
[), {, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, value, =, IR, ., voidNode, (]
[), {, Node, varNode, =, new, Node, (, Token, ., VAR, ), ;, Node, value, =, IR, ., voidNode, (]
[=, new, Node, (, Token, ., VAR, ), ;, Node, value, =, IR, ., voidNode, (, IR, ., number, (]
[), ;, Node, value, =, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ;, Node, name, =]
[), ;, Node, value, =, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ;, Node, name, =]
[=, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ;, Node, name, =, NodeUtil, ., newName, (]
[=, IR, ., voidNode, (, IR, ., number, (, 0, ), ), ;, Node, name, =, NodeUtil, ., newName, (]
[., number, (, 0, ), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,]
[), ), ;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,]
[;, Node, name, =, NodeUtil, ., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;]
[., newName, (, compiler, ., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;]
[., getCodingConvention, (, ), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (]
[), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;]
[), ,, getAliasName, (, ), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;]
[), ,, varNode, ,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (]
[,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;]
[,, getAliasName, (, ), ), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;]
[), ;, name, ., addChildToBack, (, value, ), ;, varNode, ., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (]
[., addChildToBack, (, name, ), ;, codeRoot, ., addChildrenToFront, (, varNode, ), ;, }, }, static, final, String, ALIAS_NULL, =]
[., addChildrenToFront, (, varNode, ), ;, }, }, static, final, String, ALIAS_NULL, =, "JSCompiler_alias_NULL", ;, static, final, String, ALIAS_TRUE, =]
[}, static, final, String, ALIAS_NULL, =, "JSCompiler_alias_NULL", ;, static, final, String, ALIAS_TRUE, =, "JSCompiler_alias_TRUE", ;, static, final, String, ALIAS_FALSE, =]
[;, static, final, String, ALIAS_TRUE, =, "JSCompiler_alias_TRUE", ;, static, final, String, ALIAS_FALSE, =, "JSCompiler_alias_FALSE", ;, static, final, String, ALIAS_THROW, =]
[;, static, final, String, ALIAS_FALSE, =, "JSCompiler_alias_FALSE", ;, static, final, String, ALIAS_THROW, =, "JSCompiler_alias_THROW", ;, static, final, String, ALIAS_VOID, =]
[;, static, final, String, ALIAS_THROW, =, "JSCompiler_alias_THROW", ;, static, final, String, ALIAS_VOID, =, "JSCompiler_alias_VOID", ;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, =]
[;, static, final, String, ALIAS_VOID, =, "JSCompiler_alias_VOID", ;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL, =, 6, ;, static, final, int, MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW, =]
[Integer, ,, AliasSpecification, >, aliasTypes, ;, private, final, Set, <, String, >, aliasNames, ;, AliasKeywords, (, AbstractCompiler, compiler, ), {]
[Integer, ,, AliasSpecification, >, aliasTypes, ;, private, final, Set, <, String, >, aliasNames, ;, AliasKeywords, (, AbstractCompiler, compiler, ), {]
[aliasTypes, ;, private, final, Set, <, String, >, aliasNames, ;, AliasKeywords, (, AbstractCompiler, compiler, ), {, this, ., compiler, =]
[private, final, Set, <, String, >, aliasNames, ;, AliasKeywords, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;]
[Set, <, String, >, aliasNames, ;, AliasKeywords, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, aliasSpecifications, =]
[aliasNames, ;, AliasKeywords, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;]
[AliasKeywords, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =]
[AliasKeywords, (, AbstractCompiler, compiler, ), {, this, ., compiler, =, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =]
[this, ., compiler, =, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;]
[compiler, =, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =]
[compiler, =, compiler, ;, aliasSpecifications, =, createAliasSpecifications, (, ), ;, aliasTypes, =, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =]
[=, Maps, ., newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :]
[newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {]
[newLinkedHashMap, (, ), ;, aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {]
[aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (]
[aliasNames, =, Sets, ., newLinkedHashSet, (, ), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (]
[), ;, for, (, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (, specification, ., getTokenId, (, ), ,]
[(, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (, specification, ., getTokenId, (, ), ,, specification, ), ;]
[(, AliasSpecification, specification, :, aliasSpecifications, ), {, aliasTypes, ., put, (, specification, ., getTokenId, (, ), ,, specification, ), ;]
[aliasSpecifications, ), {, aliasTypes, ., put, (, specification, ., getTokenId, (, ), ,, specification, ), ;, aliasNames, ., add, (]
[aliasSpecifications, ), {, aliasTypes, ., put, (, specification, ., getTokenId, (, ), ,, specification, ), ;, aliasNames, ., add, (]
[getAliasName, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[getAliasName, (, ), ), ;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {]
[;, }, }, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (]
[}, @, Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,]
[Override, public, void, process, (, Node, externs, ,, Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,]
[Node, root, ), {, NodeTraversal, ., traverse, (, compiler, ,, root, ,, new, FindAliasableNodes, (, ), ), ;, if, (]
[., traverse, (, compiler, ,, root, ,, new, FindAliasableNodes, (, ), ), ;, if, (, needsAliases, (, ), ), {]
[(, compiler, ,, root, ,, new, FindAliasableNodes, (, ), ), ;, if, (, needsAliases, (, ), ), {, addAliasNodes, (]
[(, compiler, ,, root, ,, new, FindAliasableNodes, (, ), ), ;, if, (, needsAliases, (, ), ), {, addAliasNodes, (]
[,, new, FindAliasableNodes, (, ), ), ;, if, (, needsAliases, (, ), ), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (]
[needsAliases, (, ), ), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (, null, ), ), ;, for, (, AliasSpecification, spec, :]
[), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (, null, ), ), ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {]
[), {, addAliasNodes, (, compiler, ., getNodeForCodeInsertion, (, null, ), ), ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {]
[compiler, ., getNodeForCodeInsertion, (, null, ), ), ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, spec, ., doAlias, (]
[., doAlias, (, compiler, ), ;, }, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :]
[;, }, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (]
[}, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, !]
[}, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, !]
[}, }, }, private, boolean, needsAliases, (, ), {, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, !]
[(, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, !, spec, ., nodes, ., isEmpty, (, ), ), {, return]
[), {, if, (, !, spec, ., nodes, ., isEmpty, (, ), ), {, return, true, ;, }, }, return]
[return, true, ;, }, }, return, false, ;, }, private, void, addAliasNodes, (, Node, codeRoot, ), {, boolean, codeChanged, =]
[;, }, private, void, addAliasNodes, (, Node, codeRoot, ), {, boolean, codeChanged, =, false, ;, for, (, AliasSpecification, spec, :]
[(, Node, codeRoot, ), {, boolean, codeChanged, =, false, ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (]
[(, Node, codeRoot, ), {, boolean, codeChanged, =, false, ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (]
[{, boolean, codeChanged, =, false, ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, spec, ., maybeInsertAliasDeclarationIntoParseTree, (]
[false, ;, for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, spec, ., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {]
[for, (, AliasSpecification, spec, :, aliasSpecifications, ), {, if, (, spec, ., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {, codeChanged, =]
[), {, if, (, spec, ., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {, codeChanged, =, true, ;, }, }, if, (]
[(, spec, ., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {]
[(, spec, ., maybeInsertAliasDeclarationIntoParseTree, (, codeRoot, ), ), {, codeChanged, =, true, ;, }, }, if, (, codeChanged, ), {]
[), {, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isAliasDefinition, (, Node, n, ), {, if, (]
[{, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isAliasDefinition, (, Node, n, ), {, if, (, !]
[{, compiler, ., reportCodeChange, (, ), ;, }, }, private, boolean, isAliasDefinition, (, Node, n, ), {, if, (, !]
[}, private, boolean, isAliasDefinition, (, Node, n, ), {, if, (, !, n, ., isName, (, ), ), {, return]
[Node, n, ), {, if, (, !, n, ., isName, (, ), ), {, return, false, ;, }, if, (]
[n, ), {, if, (, !, n, ., isName, (, ), ), {, return, false, ;, }, if, (, !]
[{, if, (, !, n, ., isName, (, ), ), {, return, false, ;, }, if, (, !, isAliasName, (]
[{, if, (, !, n, ., isName, (, ), ), {, return, false, ;, }, if, (, !, isAliasName, (]
[), {, return, false, ;, }, if, (, !, isAliasName, (, n, ., getString, (, ), ), ), {, return]
[;, }, if, (, !, isAliasName, (, n, ., getString, (, ), ), ), {, return, false, ;, }, return]
[;, }, if, (, !, isAliasName, (, n, ., getString, (, ), ), ), {, return, false, ;, }, return]
[;, }, if, (, !, isAliasName, (, n, ., getString, (, ), ), ), {, return, false, ;, }, return]
[(, n, ., getString, (, ), ), ), {, return, false, ;, }, return, n, ., getFirstChild, (, ), !=]
[}, return, n, ., getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType, (, int, type, ), {, return]
[}, return, n, ., getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType, (, int, type, ), {, return]
[getFirstChild, (, ), !=, null, ;, }, private, boolean, isAliasableType, (, int, type, ), {, return, aliasTypes, ., containsKey, (]
[), {, return, aliasTypes, ., containsKey, (, type, ), ;, }, private, boolean, isAliasName, (, String, name, ), {, return]
[), {, return, aliasTypes, ., containsKey, (, type, ), ;, }, private, boolean, isAliasName, (, String, name, ), {, return]
[., containsKey, (, type, ), ;, }, private, boolean, isAliasName, (, String, name, ), {, return, aliasNames, ., contains, (]
[(, name, ), ;, }, private, List, <, AliasSpecification, >, createAliasSpecifications, (, ), {, List, <, AliasSpecification, >, l, =]
[(, name, ), ;, }, private, List, <, AliasSpecification, >, createAliasSpecifications, (, ), {, List, <, AliasSpecification, >, l, =]
[List, <, AliasSpecification, >, createAliasSpecifications, (, ), {, List, <, AliasSpecification, >, l, =, Lists, ., newArrayList, (, ), ;]
[List, <, AliasSpecification, >, createAliasSpecifications, (, ), {, List, <, AliasSpecification, >, l, =, Lists, ., newArrayList, (, ), ;]
[createAliasSpecifications, (, ), {, List, <, AliasSpecification, >, l, =, Lists, ., newArrayList, (, ), ;, l, ., add, (]
[{, List, <, AliasSpecification, >, l, =, Lists, ., newArrayList, (, ), ;, l, ., add, (, new, KeywordAliasSpecification, (]
[<, AliasSpecification, >, l, =, Lists, ., newArrayList, (, ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,]
[<, AliasSpecification, >, l, =, Lists, ., newArrayList, (, ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,]
[., newArrayList, (, ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;]
[., newArrayList, (, ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;]
[;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;, l, ., add, (]
[add, (, new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (]
[new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,]
[new, KeywordAliasSpecification, (, ALIAS_FALSE, ,, Token, ., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,]
[., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;]
[., FALSE, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;]
[;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, ., add, (]
[add, (, new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (]
[new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,]
[new, KeywordAliasSpecification, (, ALIAS_NULL, ,, Token, ., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,]
[., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;]
[., NULL, ), ), ;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;]
[;, l, ., add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, ., add, (]
[add, (, new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (]
[new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,]
[new, KeywordAliasSpecification, (, ALIAS_TRUE, ,, Token, ., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,]
[., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;]
[., TRUE, ), ), ;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;]
[;, l, ., add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;, l, ., add, (]
[add, (, new, VoidKeywordAliasSpecification, (, ALIAS_VOID, ,, Token, ., VOID, ), ), ;, l, ., add, (, new, ThrowAliasSpecification, (]
[ALIAS_VOID, ,, Token, ., VOID, ), ), ;, l, ., add, (, new, ThrowAliasSpecification, (, ALIAS_THROW, ), ), ;, return]
