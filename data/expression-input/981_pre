[., math3, ., exception, ., util, ., LocalizedFormats, ;, public, final, class, MathUtils, {, public, static, final, double, TWO_PI, =]
[., math3, ., exception, ., util, ., LocalizedFormats, ;, public, final, class, MathUtils, {, public, static, final, double, TWO_PI, =]
[., exception, ., util, ., LocalizedFormats, ;, public, final, class, MathUtils, {, public, static, final, double, TWO_PI, =, 2, *]
[., exception, ., util, ., LocalizedFormats, ;, public, final, class, MathUtils, {, public, static, final, double, TWO_PI, =, 2, *]
[FastMath, ., PI, ;, private, MathUtils, (, ), {, }, public, static, int, hash, (, double, value, ), {, return]
[FastMath, ., PI, ;, private, MathUtils, (, ), {, }, public, static, int, hash, (, double, value, ), {, return]
[;, private, MathUtils, (, ), {, }, public, static, int, hash, (, double, value, ), {, return, new, Double, (]
[value, ), ., hashCode, (, ), ;, }, public, static, int, hash, (, double, [, ], value, ), {, return]
[value, ), ., hashCode, (, ), ;, }, public, static, int, hash, (, double, [, ], value, ), {, return]
[(, ), ;, }, public, static, int, hash, (, double, [, ], value, ), {, return, Arrays, ., hashCode, (]
[., hashCode, (, value, ), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return]
[., hashCode, (, value, ), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return]
[(, value, ), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -]
[(, value, ), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -]
[), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *]
[), ;, }, public, static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *]
[static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (]
[static, double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (]
[double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (, (]
[double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (, (]
[double, normalizeAngle, (, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (, (]
[(, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (, (, a, +]
[(, double, a, ,, double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (, (, a, +]
[double, center, ), {, return, a, -, TWO_PI, *, FastMath, ., floor, (, (, a, +, FastMath, ., PI, -]
[{, return, a, -, TWO_PI, *, FastMath, ., floor, (, (, a, +, FastMath, ., PI, -, center, ), /]
[}, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double, p, =]
[}, public, static, double, reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double, p, =]
[reduce, (, double, a, ,, double, period, ,, double, offset, ), {, final, double, p, =, FastMath, ., abs, (]
[,, double, period, ,, double, offset, ), {, final, double, p, =, FastMath, ., abs, (, period, ), ;, return]
[,, double, period, ,, double, offset, ), {, final, double, p, =, FastMath, ., abs, (, period, ), ;, return]
[,, double, period, ,, double, offset, ), {, final, double, p, =, FastMath, ., abs, (, period, ), ;, return]
[period, ,, double, offset, ), {, final, double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -]
[period, ,, double, offset, ), {, final, double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -]
[double, offset, ), {, final, double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -, p, *]
[double, offset, ), {, final, double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -, p, *]
[final, double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -, p, *, FastMath, ., floor, (]
[final, double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -, p, *, FastMath, ., floor, (]
[double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -, p, *, FastMath, ., floor, (, (]
[double, p, =, FastMath, ., abs, (, period, ), ;, return, a, -, p, *, FastMath, ., floor, (, (]
[=, FastMath, ., abs, (, period, ), ;, return, a, -, p, *, FastMath, ., floor, (, (, a, -]
[abs, (, period, ), ;, return, a, -, p, *, FastMath, ., floor, (, (, a, -, offset, ), /]
[), ;, return, a, -, p, *, FastMath, ., floor, (, (, a, -, offset, ), /, p, ), -]
[-, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (]
[-, offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (]
[offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (]
[offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (]
[offset, ;, }, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (]
[}, public, static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=]
[static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[static, byte, copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[copySign, (, byte, magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=]
[magnitude, ,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||]
[,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, byte, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[{, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[(, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[{, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, ), {, throw]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[magnitude, ==, Byte, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, byte, )]
[MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, byte, ), -]
[magnitude, ;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (]
[magnitude, ;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (]
[;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (]
[}, public, static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=]
[static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[static, short, copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[copySign, (, short, magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=]
[magnitude, ,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||]
[,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, short, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[{, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[(, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[{, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, ), {, throw]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[magnitude, ==, Short, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return]
[., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, short, )]
[MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, (, short, ), -]
[magnitude, ;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (]
[magnitude, ;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (]
[;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (]
[}, public, static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=]
[static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[static, int, copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[copySign, (, int, magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=]
[magnitude, ,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||]
[,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, int, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[{, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[(, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[{, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, ), {, throw]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[magnitude, ==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return]
[==, Integer, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -]
[magnitude, ;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (]
[magnitude, ;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (]
[;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (]
[;, }, }, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (]
[}, public, static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=]
[static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[static, long, copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&]
[copySign, (, long, magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=]
[magnitude, ,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||]
[,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[,, long, sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (]
[sign, ), throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[throws, MathArithmeticException, {, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&]
[{, if, (, (, magnitude, >=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <]
[>=, 0, &&, sign, >=, 0, ), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[), ||, (, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (]
[(, magnitude, <, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[<, 0, &&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[&&, sign, <, 0, ), ), {, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==]
[{, return, magnitude, ;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, ), {, throw]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[;, }, else, if, (, sign, >=, 0, &&, magnitude, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (]
[magnitude, ==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return]
[==, Long, ., MIN_VALUE, ), {, throw, new, MathArithmeticException, (, LocalizedFormats, ., OVERFLOW, ), ;, }, else, {, return, -]
[return, -, magnitude, ;, }, }, public, static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (]
[return, -, magnitude, ;, }, }, public, static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (]
[return, -, magnitude, ;, }, }, public, static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (]
[}, }, public, static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (, Double, ., isInfinite, (]
[static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (, Double, ., isInfinite, (, x, ), ||]
[static, void, checkFinite, (, final, double, x, ), throws, NotFiniteNumberException, {, if, (, Double, ., isInfinite, (, x, ), ||]
[final, double, x, ), throws, NotFiniteNumberException, {, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (]
[NotFiniteNumberException, {, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw]
[(, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (]
[}, public, static, void, checkFinite, (, final, double, [, ], val, ), throws, NotFiniteNumberException, {, for, (, int, i, =]
[static, void, checkFinite, (, final, double, [, ], val, ), throws, NotFiniteNumberException, {, for, (, int, i, =, 0, ;]
[static, void, checkFinite, (, final, double, [, ], val, ), throws, NotFiniteNumberException, {, for, (, int, i, =, 0, ;]
[checkFinite, (, final, double, [, ], val, ), throws, NotFiniteNumberException, {, for, (, int, i, =, 0, ;, i, <]
[checkFinite, (, final, double, [, ], val, ), throws, NotFiniteNumberException, {, for, (, int, i, =, 0, ;, i, <]
[[, ], val, ), throws, NotFiniteNumberException, {, for, (, int, i, =, 0, ;, i, <, val, ., length, ;]
[[, ], val, ), throws, NotFiniteNumberException, {, for, (, int, i, =, 0, ;, i, <, val, ., length, ;]
[(, int, i, =, 0, ;, i, <, val, ., length, ;, i, ++, ), {, final, double, x, =]
[(, int, i, =, 0, ;, i, <, val, ., length, ;, i, ++, ), {, final, double, x, =]
[i, =, 0, ;, i, <, val, ., length, ;, i, ++, ), {, final, double, x, =, val, []
[<, val, ., length, ;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (]
[<, val, ., length, ;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (]
[<, val, ., length, ;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (]
[;, i, ++, ), {, final, double, x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (]
[), {, final, double, x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (, x, ), ||]
[), {, final, double, x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (, x, ), ||]
[x, =, val, [, i, ], ;, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (]
[], ;, if, (, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw]
[(, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (]
[(, Double, ., isInfinite, (, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (]
[(, x, ), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,]
[), ||, Double, ., isNaN, (, x, ), ), {, throw, new, NotFiniteNumberException, (, LocalizedFormats, ., ARRAY_ELEMENT, ,, x, ,]
[public, static, void, checkNotNull, (, Object, o, ,, Localizable, pattern, ,, Object, ..., args, ), throws, NullArgumentException, {, if, (]
[public, static, void, checkNotNull, (, Object, o, ,, Localizable, pattern, ,, Object, ..., args, ), throws, NullArgumentException, {, if, (]
[void, checkNotNull, (, Object, o, ,, Localizable, pattern, ,, Object, ..., args, ), throws, NullArgumentException, {, if, (, o, ==]
[o, ,, Localizable, pattern, ,, Object, ..., args, ), throws, NullArgumentException, {, if, (, o, ==, null, ), {, throw]
[pattern, ,, Object, ..., args, ), throws, NullArgumentException, {, if, (, o, ==, null, ), {, throw, new, NullArgumentException, (]
[Object, ..., args, ), throws, NullArgumentException, {, if, (, o, ==, null, ), {, throw, new, NullArgumentException, (, pattern, ,]
[pattern, ,, args, ), ;, }, }, public, static, void, checkNotNull, (, Object, o, ), throws, NullArgumentException, {, if, (]
[pattern, ,, args, ), ;, }, }, public, static, void, checkNotNull, (, Object, o, ), throws, NullArgumentException, {, if, (]
[args, ), ;, }, }, public, static, void, checkNotNull, (, Object, o, ), throws, NullArgumentException, {, if, (, o, ==]
[}, public, static, void, checkNotNull, (, Object, o, ), throws, NullArgumentException, {, if, (, o, ==, null, ), {, throw]
