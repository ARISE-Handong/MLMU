[import, org, ., jfree, ., data, ., Range, ;, public, class, CyclicNumberAxis, extends, NumberAxis, {, static, final, long, serialVersionUID, =]
[org, ., jfree, ., data, ., Range, ;, public, class, CyclicNumberAxis, extends, NumberAxis, {, static, final, long, serialVersionUID, =, -]
[;, public, class, CyclicNumberAxis, extends, NumberAxis, {, static, final, long, serialVersionUID, =, -, 7514160997164582554L, ;, public, static, Stroke, DEFAULT_ADVANCE_LINE_STROKE, =]
[CyclicNumberAxis, extends, NumberAxis, {, static, final, long, serialVersionUID, =, -, 7514160997164582554L, ;, public, static, Stroke, DEFAULT_ADVANCE_LINE_STROKE, =, new, BasicStroke, (]
[-, 7514160997164582554L, ;, public, static, Stroke, DEFAULT_ADVANCE_LINE_STROKE, =, new, BasicStroke, (, 1.0f, ), ;, public, static, final, Paint, DEFAULT_ADVANCE_LINE_PAINT, =]
[-, 7514160997164582554L, ;, public, static, Stroke, DEFAULT_ADVANCE_LINE_STROKE, =, new, BasicStroke, (, 1.0f, ), ;, public, static, final, Paint, DEFAULT_ADVANCE_LINE_PAINT, =]
[double, offset, ;, protected, double, period, ;, protected, boolean, boundMappedToLastCycle, ;, protected, boolean, advanceLineVisible, ;, protected, transient, Stroke, advanceLineStroke, =]
[;, private, transient, boolean, internalMarkerWhenTicksOverlap, ;, private, transient, Tick, internalMarkerCycleBoundTick, ;, public, CyclicNumberAxis, (, double, period, ), {, this, (]
[transient, boolean, internalMarkerWhenTicksOverlap, ;, private, transient, Tick, internalMarkerCycleBoundTick, ;, public, CyclicNumberAxis, (, double, period, ), {, this, (, period, ,]
[this, (, period, ,, 0.0, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ), {, this, (]
[period, ,, 0.0, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ), {, this, (, period, ,]
[0.0, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ), {, this, (, period, ,, offset, ,]
[period, ,, offset, ,, null, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, String, label, ), {, this, (]
[offset, ,, null, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, String, label, ), {, this, (, 0, ,]
[null, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, String, label, ), {, this, (, 0, ,, period, ,]
[,, label, ), ;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ,, String, label, ), {, super, (]
[;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ,, String, label, ), {, super, (, label, ), ;]
[;, }, public, CyclicNumberAxis, (, double, period, ,, double, offset, ,, String, label, ), {, super, (, label, ), ;]
[(, double, period, ,, double, offset, ,, String, label, ), {, super, (, label, ), ;, this, ., period, =]
[period, ,, double, offset, ,, String, label, ), {, super, (, label, ), ;, this, ., period, =, period, ;]
[period, ,, double, offset, ,, String, label, ), {, super, (, label, ), ;, this, ., period, =, period, ;]
[,, String, label, ), {, super, (, label, ), ;, this, ., period, =, period, ;, this, ., offset, =]
[label, ), {, super, (, label, ), ;, this, ., period, =, period, ;, this, ., offset, =, offset, ;]
[{, super, (, label, ), ;, this, ., period, =, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (]
[label, ), ;, this, ., period, =, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;]
[label, ), ;, this, ., period, =, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;]
[., period, =, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =]
[=, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;]
[=, period, ;, this, ., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;]
[., offset, =, offset, ;, setFixedAutoRange, (, period, ), ;, this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =]
[this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {, return]
[this, ., advanceLineVisible, =, true, ;, this, ., advanceLinePaint, =, DEFAULT_ADVANCE_LINE_PAINT, ;, }, public, boolean, isAdvanceLineVisible, (, ), {, return]
[public, boolean, isAdvanceLineVisible, (, ), {, return, this, ., advanceLineVisible, ;, }, public, void, setAdvanceLineVisible, (, boolean, visible, ), {]
[public, boolean, isAdvanceLineVisible, (, ), {, return, this, ., advanceLineVisible, ;, }, public, void, setAdvanceLineVisible, (, boolean, visible, ), {]
[), {, return, this, ., advanceLineVisible, ;, }, public, void, setAdvanceLineVisible, (, boolean, visible, ), {, this, ., advanceLineVisible, =]
[setAdvanceLineVisible, (, boolean, visible, ), {, this, ., advanceLineVisible, =, visible, ;, }, public, Paint, getAdvanceLinePaint, (, ), {, return]
[setAdvanceLineVisible, (, boolean, visible, ), {, this, ., advanceLineVisible, =, visible, ;, }, public, Paint, getAdvanceLinePaint, (, ), {, return]
[getAdvanceLinePaint, (, ), {, return, this, ., advanceLinePaint, ;, }, public, void, setAdvanceLinePaint, (, Paint, paint, ), {, if, (]
[getAdvanceLinePaint, (, ), {, return, this, ., advanceLinePaint, ;, }, public, void, setAdvanceLinePaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., advanceLinePaint, ;, }, public, void, setAdvanceLinePaint, (, Paint, paint, ), {, if, (, paint, ==]
[., advanceLinePaint, ;, }, public, void, setAdvanceLinePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setAdvanceLinePaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[(, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }]
[{, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., advanceLinePaint, =]
[IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., advanceLinePaint, =, paint, ;, }, public, Stroke, getAdvanceLineStroke, (, ), {, return]
[IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, this, ., advanceLinePaint, =, paint, ;, }, public, Stroke, getAdvanceLineStroke, (, ), {, return]
[getAdvanceLineStroke, (, ), {, return, this, ., advanceLineStroke, ;, }, public, void, setAdvanceLineStroke, (, Stroke, stroke, ), {, if, (]
[getAdvanceLineStroke, (, ), {, return, this, ., advanceLineStroke, ;, }, public, void, setAdvanceLineStroke, (, Stroke, stroke, ), {, if, (]
[), {, return, this, ., advanceLineStroke, ;, }, public, void, setAdvanceLineStroke, (, Stroke, stroke, ), {, if, (, stroke, ==]
[., advanceLineStroke, ;, }, public, void, setAdvanceLineStroke, (, Stroke, stroke, ), {, if, (, stroke, ==, null, ), {, throw]
[}, public, void, setAdvanceLineStroke, (, Stroke, stroke, ), {, if, (, stroke, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, Stroke, stroke, ), {, if, (, stroke, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }]
[(, Stroke, stroke, ), {, if, (, stroke, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }]
[{, if, (, stroke, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }, this, ., advanceLineStroke, =]
[IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }, this, ., advanceLineStroke, =, stroke, ;, }, public, boolean, isBoundMappedToLastCycle, (, ), {, return]
[IllegalArgumentException, (, "Null 'stroke' argument.", ), ;, }, this, ., advanceLineStroke, =, stroke, ;, }, public, boolean, isBoundMappedToLastCycle, (, ), {, return]
[public, boolean, isBoundMappedToLastCycle, (, ), {, return, this, ., boundMappedToLastCycle, ;, }, public, void, setBoundMappedToLastCycle, (, boolean, boundMappedToLastCycle, ), {]
[public, boolean, isBoundMappedToLastCycle, (, ), {, return, this, ., boundMappedToLastCycle, ;, }, public, void, setBoundMappedToLastCycle, (, boolean, boundMappedToLastCycle, ), {]
[), {, return, this, ., boundMappedToLastCycle, ;, }, public, void, setBoundMappedToLastCycle, (, boolean, boundMappedToLastCycle, ), {, this, ., boundMappedToLastCycle, =]
[protected, void, selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =]
[selectHorizontalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (]
[Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *]
[g2, ,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /]
[g2, ,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /]
[;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;]
[n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;, setTickUnit, (]
[(, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, )]
[(, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, )]
[*, tickLabelWidth, /, dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (]
[dataArea, ., getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,]
[getWidth, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,]
[protected, void, selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =]
[selectVerticalAutoTickUnit, (, Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (]
[Graphics2D, g2, ,, Rectangle2D, drawArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[,, RectangleEdge, edge, ), {, double, tickLabelWidth, =, estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =]
[estimateMaximumTickLabelWidth, (, g2, ,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *]
[g2, ,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /]
[g2, ,, getTickUnit, (, ), ), ;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /]
[;, double, n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;]
[n, =, getRange, (, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;, setTickUnit, (]
[(, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, )]
[(, ), ., getLength, (, ), *, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, )]
[*, tickLabelWidth, /, dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (]
[dataArea, ., getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,]
[getHeight, (, ), ;, setTickUnit, (, (, NumberTickUnit, ), getStandardTickUnits, (, ), ., getCeilingTickUnit, (, n, ), ,, false, ,]
[mapToLastCycle, ,, Number, number, ,, String, label, ,, TextAnchor, textAnchor, ,, TextAnchor, rotationAnchor, ,, double, angle, ), {, super, (]
[Number, number, ,, String, label, ,, TextAnchor, textAnchor, ,, TextAnchor, rotationAnchor, ,, double, angle, ), {, super, (, number, ,]
[,, String, label, ,, TextAnchor, textAnchor, ,, TextAnchor, rotationAnchor, ,, double, angle, ), {, super, (, number, ,, label, ,]
[label, ,, TextAnchor, textAnchor, ,, TextAnchor, rotationAnchor, ,, double, angle, ), {, super, (, number, ,, label, ,, textAnchor, ,]
[TextAnchor, textAnchor, ,, TextAnchor, rotationAnchor, ,, double, angle, ), {, super, (, number, ,, label, ,, textAnchor, ,, rotationAnchor, ,]
[TextAnchor, rotationAnchor, ,, double, angle, ), {, super, (, number, ,, label, ,, textAnchor, ,, rotationAnchor, ,, angle, ), ;]
[TextAnchor, rotationAnchor, ,, double, angle, ), {, super, (, number, ,, label, ,, textAnchor, ,, rotationAnchor, ,, angle, ), ;]
[angle, ), {, super, (, number, ,, label, ,, textAnchor, ,, rotationAnchor, ,, angle, ), ;, this, ., mapToLastCycle, =]
[float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (]
[float, [, ], calculateAnchorPoint, (, ValueTick, tick, ,, double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (]
[double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (, tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =]
[double, cursor, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, if, (, tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =]
[dataArea, ,, RectangleEdge, edge, ), {, if, (, tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;]
[dataArea, ,, RectangleEdge, edge, ), {, if, (, tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;]
[), {, if, (, tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =]
[), {, if, (, tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =]
[{, if, (, tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, (]
[tick, instanceof, CycleBoundTick, ), {, boolean, mapsav, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, (, (, CycleBoundTick, )]
[boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =]
[boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =]
[boundMappedToLastCycle, =, (, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (]
[(, (, CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,]
[CycleBoundTick, ), tick, ), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,]
[tick, ), ., mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,]
[mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;]
[mapToLastCycle, ;, float, [, ], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;]
[], ret, =, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =]
[super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return]
[tick, ,, cursor, ,, dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return]
[tick, ,, cursor, ,, dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return]
[dataArea, ,, edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (]
[edge, ), ;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,]
[;, this, ., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,]
[., boundMappedToLastCycle, =, mapsav, ;, return, ret, ;, }, return, super, ., calculateAnchorPoint, (, tick, ,, cursor, ,, dataArea, ,]
[), ;, }, protected, List, refreshTicksHorizontal, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =]
[,, RectangleEdge, edge, ), {, List, result, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =]
[{, List, result, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[{, List, result, =, new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[new, java, ., util, ., ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[ArrayList, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (]
[tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {]
[getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (]
[), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,]
[g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit, =]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit, =]
[dataArea, ,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =]
[unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =]
[unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =]
[unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =]
[), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (]
[), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (]
[getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /]
[;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *]
[(, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =]
[(, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =]
[/, unit, ), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;]
[getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;]
[getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =]
[cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =]
[boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =]
[boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (]
[boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (]
[this, ., boundMappedToLastCycle, =, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==]
[=, false, ;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {]
[;, CycleBoundTick, lastTick, =, null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =]
[null, ;, float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;]
[float, lastX, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =]
[=, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;]
[=, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;]
[(, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =]
[{, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (]
[{, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (]
[=, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=]
[=, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =]
[., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (]
[., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (]
[boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (]
[boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (]
[boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (]
[true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +]
[}, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >]
[currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&]
[<=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !]
[{, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {]
[cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =]
[(, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =]
[+, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (]
[>, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,]
[), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[;, }, double, xx, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[(, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =]
[(, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =]
[tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (]
[), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, x, =]
[else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, x, =, (, float, )]
[(, ), ., valueToString, (, currentTickValue, ), ;, }, float, x, =, (, float, ), xx, ;, TextAnchor, anchor, =]
[currentTickValue, ), ;, }, float, x, =, (, float, ), xx, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =]
[x, =, (, float, ), xx, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =]
[), xx, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==]
[rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==]
[angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =]
[isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {]
[edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[edge, ==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[==, RectangleEdge, ., TOP, ), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -]
[), {, angle, =, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /]
[=, Math, ., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }]
[., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =]
[., PI, /, 2.0, ;, }, else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =]
[else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[else, {, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[{, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (]
[{, angle, =, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (]
[=, -, Math, ., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=]
[., PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&]
[PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (]
[PI, /, 2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (]
[2.0, ;, }, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==]
[anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=]
[(, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {]
[lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :]
[x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -]
[., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[(, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,]
[CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =]
[), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =]
[), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (]
[), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (]
[TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==]
[TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==]
[., TOP_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =]
[}, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[}, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[}, else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[else, {, if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=]
[==, RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[RectangleEdge, ., TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[TOP, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==]
[anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=]
[(, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {]
[lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -]
[., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[(, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,]
[CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =]
[), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {]
[), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =]
[), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =]
[TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (]
[TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (]
[TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (]
[., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (]
[., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=]
[=, anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[anchor, ;, }, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[}, else, {, anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==]
[anchor, =, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&]
[=, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[=, TextAnchor, ., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (]
[., TOP_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=]
[(, (, lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {]
[lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[lastTick, !=, null, ), &&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[&&, (, lastX, ==, x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :]
[x, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -]
[., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., TOP_LEFT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[(, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,]
[CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =]
[), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =]
[), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =]
[., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (]
[., TOP_RIGHT, :, TextAnchor, ., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (]
[., TOP_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[}, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (]
[anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,]
[}, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,]
[CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,]
[=, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,]
[., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (]
[., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (]
[,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==]
[(, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {]
[(, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {]
[tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =]
[,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }]
[,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }]
[), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (]
[(, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;]
[==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;]
[this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =]
[internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =, x, ;]
[tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=]
[., add, (, tick, ), ;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (]
[tick, ), ;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {]
[;, lastTick, =, tick, ;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =]
[;, lastX, =, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;]
[=, x, ;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =]
[;, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;]
[+=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =]
[;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;]
[;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =]
[calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }]
[calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }]
[upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle, =]
[;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return]
[result, ;, }, protected, List, refreshVerticalTicks, (, Graphics2D, g2, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =, new, java, ., util, ., ArrayList, (, ), ;]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, List, result, =, new, java, ., util, ., ArrayList, (, ), ;]
[result, =, new, java, ., util, ., ArrayList, (, ), ;, result, ., clear, (, ), ;, Font, tickLabelFont, =]
[., util, ., ArrayList, (, ), ;, result, ., clear, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[., util, ., ArrayList, (, ), ;, result, ., clear, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;]
[(, ), ;, result, ., clear, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (]
[clear, (, ), ;, Font, tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (]
[tickLabelFont, =, getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {]
[getTickLabelFont, (, ), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (]
[), ;, g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,]
[g2, ., setFont, (, tickLabelFont, ), ;, if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit, =]
[if, (, isAutoTickUnitSelection, (, ), ), {, selectAutoTickUnit, (, g2, ,, dataArea, ,, edge, ), ;, }, double, unit, =]
[dataArea, ,, edge, ), ;, }, double, unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =]
[unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =]
[unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =]
[unit, =, getTickUnit, (, ), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =]
[), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (]
[), ., getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (]
[getSize, (, ), ;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /]
[;, double, cycleBound, =, getCycleBound, (, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *]
[(, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =]
[(, ), ;, double, currentTickValue, =, Math, ., ceil, (, cycleBound, /, unit, ), *, unit, ;, double, upperValue, =]
[/, unit, ), *, unit, ;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[;, double, upperValue, =, getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =]
[getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;]
[getRange, (, ), ., getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;]
[getUpperBound, (, ), ;, boolean, cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =]
[cycled, =, false, ;, boolean, boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =]
[boundMapping, =, this, ., boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =]
[boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (]
[boundMappedToLastCycle, ;, this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (]
[this, ., boundMappedToLastCycle, =, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==]
[=, true, ;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {]
[;, NumberTick, lastTick, =, null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =]
[null, ;, float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;]
[float, lastY, =, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =]
[=, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;]
[=, 0.0f, ;, if, (, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;]
[(, upperValue, ==, cycleBound, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =]
[{, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (]
[{, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (]
[=, calculateLowestVisibleTickValue, (, ), ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=]
[=, true, ;, this, ., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =]
[., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (]
[., boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (]
[boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (]
[boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (]
[boundMappedToLastCycle, =, true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (]
[true, ;, }, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +]
[}, while, (, currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >]
[currentTickValue, <=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&]
[<=, upperValue, ), {, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !]
[{, boolean, cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {]
[cyclenow, =, false, ;, if, (, (, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =]
[(, currentTickValue, +, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =]
[+, unit, >, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (]
[>, upperValue, ), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,]
[), &&, !, cycled, ), {, cyclenow, =, true, ;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,]
[;, }, double, yy, =, valueToJava2D, (, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[(, currentTickValue, ,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (]
[,, dataArea, ,, edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=]
[edge, ), ;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[;, String, tickLabel, ;, NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =]
[NumberFormat, formatter, =, getNumberFormatOverride, (, ), ;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (]
[;, if, (, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {]
[(, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =]
[(, formatter, !=, null, ), {, tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =]
[tickLabel, =, formatter, ., format, (, currentTickValue, ), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (]
[), ;, }, else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, y, =]
[else, {, tickLabel, =, getTickUnit, (, ), ., valueToString, (, currentTickValue, ), ;, }, float, y, =, (, float, )]
[(, ), ., valueToString, (, currentTickValue, ), ;, }, float, y, =, (, float, ), yy, ;, TextAnchor, anchor, =]
[currentTickValue, ), ;, }, float, y, =, (, float, ), yy, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =]
[y, =, (, float, ), yy, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =]
[), yy, ;, TextAnchor, anchor, =, null, ;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[;, TextAnchor, rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (]
[rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==]
[rotationAnchor, =, null, ;, double, angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==]
[angle, =, 0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[0.0, ;, if, (, isVerticalTickLabels, (, ), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[), ), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[), {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[LEFT, ), {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==]
[anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[(, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (]
[), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -]
[., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[(, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,]
[CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =]
[), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -]
[isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -]
[TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /]
[., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {]
[;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =]
[;, }, rotationAnchor, =, anchor, ;, angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =]
[angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[angle, =, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (]
[=, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[=, -, Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (]
[Math, ., PI, /, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=]
[/, 2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&]
[2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[2.0, ;, }, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (]
[}, else, {, anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==]
[anchor, =, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[=, TextAnchor, ., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[., BOTTOM_CENTER, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[(, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (]
[), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -]
[., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_RIGHT, :, TextAnchor, ., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[(, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,]
[CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =]
[), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =]
[;, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =]
[=, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =]
[?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /]
[;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[;, }, rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (]
[rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[rotationAnchor, =, anchor, ;, angle, =, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==]
[=, Math, ., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[., PI, /, 2.0, ;, }, }, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =]
[}, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[}, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[}, else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (]
[else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (]
[else, {, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=]
[==, RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (]
[RectangleEdge, ., LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (]
[LEFT, ), {, anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==]
[anchor, =, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[=, TextAnchor, ., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[., CENTER_RIGHT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[(, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (]
[), ?, TextAnchor, ., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -]
[., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_RIGHT, :, TextAnchor, ., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., TOP_RIGHT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[(, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,]
[CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =]
[), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =]
[isInverted, (, ), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {]
[), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =]
[), ?, TextAnchor, ., TOP_RIGHT, :, TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =]
[TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (]
[TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (]
[TextAnchor, ., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (]
[., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (]
[., BOTTOM_RIGHT, ;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (]
[;, }, rotationAnchor, =, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=]
[=, anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&]
[anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (]
[anchor, ;, }, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (]
[}, else, {, anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==]
[anchor, =, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&]
[=, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[=, TextAnchor, ., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (]
[., CENTER_LEFT, ;, if, (, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=]
[(, (, lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[lastTick, !=, null, ), &&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[&&, (, lastY, ==, y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[y, ), &&, (, currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;]
[currentTickValue, !=, cycleBound, ), ), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (]
[), {, anchor, =, isInverted, (, ), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (]
[), ?, TextAnchor, ., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -]
[., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., BOTTOM_LEFT, :, TextAnchor, ., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;]
[., TOP_LEFT, ;, result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., remove, (, result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[result, ., size, (, ), -, 1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[1, ), ;, result, ., add, (, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,]
[(, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,]
[CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[this, ., boundMappedToLastCycle, ,, lastTick, ., getNumber, (, ), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[), ,, lastTick, ., getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;]
[getText, (, ), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =]
[), ,, anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[anchor, ,, anchor, ,, lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[lastTick, ., getAngle, (, ), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :]
[), ), ), ;, this, ., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :]
[., internalMarkerWhenTicksOverlap, =, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }]
[=, true, ;, anchor, =, isInverted, (, ), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =]
[), ?, TextAnchor, ., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =]
[., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (]
[., TOP_LEFT, :, TextAnchor, ., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (]
[., BOTTOM_LEFT, ;, }, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,]
[}, rotationAnchor, =, anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (]
[anchor, ;, }, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,]
[}, }, CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,]
[CycleBoundTick, tick, =, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,]
[=, new, CycleBoundTick, (, this, ., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,]
[., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (]
[., boundMappedToLastCycle, ,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (]
[,, new, Double, (, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==]
[(, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {]
[(, currentTickValue, ), ,, tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {]
[tickLabel, ,, anchor, ,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =]
[,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }]
[,, rotationAnchor, ,, angle, ), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }]
[), ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (]
[(, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;]
[==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;]
[this, ., internalMarkerCycleBoundTick, =, tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =]
[tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (]
[tick, ;, }, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (]
[}, result, ., add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==]
[add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {]
[add, (, tick, ), ;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {]
[;, lastTick, =, tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =]
[tick, ;, lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }]
[lastY, =, y, ;, if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=]
[if, (, currentTickValue, ==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (]
[==, cycleBound, ), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {]
[), {, this, ., internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =]
[internalMarkerCycleBoundTick, =, tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;]
[tick, ;, }, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =]
[}, currentTickValue, +=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;]
[+=, unit, ;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =]
[;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;]
[;, if, (, cyclenow, ), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;]
[), {, currentTickValue, =, calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =]
[calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }]
[calculateLowestVisibleTickValue, (, ), ;, upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }]
[upperValue, =, cycleBound, ;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle, =]
[;, cycled, =, true, ;, this, ., boundMappedToLastCycle, =, false, ;, }, }, this, ., boundMappedToLastCycle, =, boundMapping, ;, return]
[result, ;, }, public, double, java2DToValue, (, double, java2DValue, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[double, java2DValue, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, vmax, =]
[double, java2DValue, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, vmax, =]
[{, Range, range, =, getRange, (, ), ;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =]
[;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, double, jmin, =]
[., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, double, jmin, =, 0.0, ;, double, jmax, =]
[;, double, vp, =, getCycleBound, (, ), ;, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (]
[;, double, vp, =, getCycleBound, (, ), ;, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (]
[getCycleBound, (, ), ;, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =]
[=, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =]
[jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (]
[jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (]
[getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin, =]
[dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin, =, dataArea, ., getMaxY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin, =, dataArea, ., getMaxY, (, ), ;, jmax, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmin, =, dataArea, ., getMaxY, (, ), ;, jmax, =]
[{, jmin, =, dataArea, ., getMaxY, (, ), ;, jmax, =, dataArea, ., getMinY, (, ), ;, }, if, (]
[;, jmax, =, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =]
[;, jmax, =, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =]
[=, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -]
[=, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -]
[=, dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -]
[dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (]
[dataArea, ., getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (]
[getMinY, (, ), ;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (, vmax, -]
[;, }, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *]
[}, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *, (]
[}, if, (, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *, (]
[(, isInverted, (, ), ), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *, (, jmax, -]
[), ), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /]
[), ), {, double, jbreak, =, jmax, -, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /]
[jmax, -, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (]
[jmax, -, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return]
[(, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +]
[(, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +]
[(, jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +]
[jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (]
[jmax, -, jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (]
[jmin, ), /, this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -]
[this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *]
[this, ., period, ;, if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *]
[if, (, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /]
[(, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /, (]
[(, java2DValue, >=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /, (]
[>=, jbreak, ), {, return, vp, +, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -]
[(, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return]
[(, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return]
[-, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[-, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[-, java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (]
[java2DValue, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (]
[*, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -]
[period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *]
[period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *]
[-, jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /]
[jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (]
[jmin, ), ;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (]
[;, }, else, {, return, vp, -, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -]
[jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =]
[jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =]
[jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =]
[jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (]
[), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (]
[this, ., period, /, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -]
[/, (, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *]
[(, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (]
[(, jmax, -, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (]
[-, jmin, ), ;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -]
[;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /]
[;, }, }, else, {, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /]
[{, double, jbreak, =, (, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, +]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (]
[(, vmax, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=]
[(, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return]
[(, jmax, -, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return]
[-, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +]
[-, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +]
[-, jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +]
[jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (]
[jmin, ), /, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (]
[/, this, ., period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -]
[period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *]
[period, +, jmin, ;, if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *]
[if, (, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /]
[(, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /, (]
[(, java2DValue, <=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /, (]
[<=, jbreak, ), {, return, vp, +, (, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -]
[(, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return]
[(, java2DValue, -, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return]
[-, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[-, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[-, jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -]
[jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (]
[jmin, ), *, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (]
[*, this, ., period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -]
[period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *]
[period, /, (, jmax, -, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *]
[-, jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /]
[jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (]
[jmin, ), ;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (]
[;, }, else, {, return, vp, -, (, jmax, -, java2DValue, ), *, this, ., period, /, (, jmax, -]
[}, }, }, public, double, valueToJava2D, (, double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =]
[double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, vmin, =]
[double, value, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ), {, Range, range, =, getRange, (, ), ;, double, vmin, =]
[{, Range, range, =, getRange, (, ), ;, double, vmin, =, range, ., getLowerBound, (, ), ;, double, vmax, =]
[{, Range, range, =, getRange, (, ), ;, double, vmin, =, range, ., getLowerBound, (, ), ;, double, vmax, =]
[vmin, =, range, ., getLowerBound, (, ), ;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =]
[), ;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (]
[), ;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (]
[;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (]
[;, double, vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (]
[vmax, =, range, ., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (, value, <]
[., getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||]
[getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||, (]
[getUpperBound, (, ), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||, (]
[), ;, double, vp, =, getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||, (, value, >]
[getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||, (, value, >, vmax, ), ), {, return]
[getCycleBound, (, ), ;, if, (, (, value, <, vmin, ), ||, (, value, >, vmax, ), ), {, return]
[<, vmin, ), ||, (, value, >, vmax, ), ), {, return, Double, ., NaN, ;, }, double, jmin, =]
[value, >, vmax, ), ), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =]
[), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (]
[), {, return, Double, ., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (]
[., NaN, ;, }, double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[double, jmin, =, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {]
[=, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =]
[=, 0.0, ;, double, jmax, =, 0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =]
[0.0, ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =]
[if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =]
[jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (]
[jmin, =, dataArea, ., getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (]
[getMinX, (, ), ;, jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[jmax, =, dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {]
[dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax, =]
[dataArea, ., getMaxX, (, ), ;, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax, =]
[}, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax, =, dataArea, ., getMinY, (, ), ;]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax, =, dataArea, ., getMinY, (, ), ;, jmin, =]
[if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, jmax, =, dataArea, ., getMinY, (, ), ;, jmin, =]
[{, jmax, =, dataArea, ., getMinY, (, ), ;, jmin, =, dataArea, ., getMaxY, (, ), ;, }, if, (]
[), ;, jmin, =, dataArea, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (]
[), ;, jmin, =, dataArea, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (]
[jmin, =, dataArea, ., getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (, value, ==]
[getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (, value, ==, vp, ), {, return]
[getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (, value, ==, vp, ), {, return]
[getMaxY, (, ), ;, }, if, (, isInverted, (, ), ), {, if, (, value, ==, vp, ), {, return]
[}, if, (, isInverted, (, ), ), {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?]
[(, isInverted, (, ), ), {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmin, :]
[if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (]
[if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (]
[value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >]
[{, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return]
[{, return, this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return]
[this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -]
[this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -]
[this, ., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -]
[., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (]
[., boundMappedToLastCycle, ?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (]
[?, jmin, :, jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -]
[jmax, ;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *]
[;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (]
[;, }, else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (]
[else, if, (, value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (, jmax, -]
[value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (, jmax, -, jmin, ), /]
[value, >, vp, ), {, return, jmax, -, (, value, -, vp, ), *, (, jmax, -, jmin, ), /]
[(, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return]
[(, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +]
[vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (]
[vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (]
[*, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -]
[-, jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *]
[jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (]
[jmin, ), /, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (]
[/, this, ., period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -]
[period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -, jmin, ), /]
[period, ;, }, else, {, return, jmin, +, (, vp, -, value, ), *, (, jmax, -, jmin, ), /]
[-, value, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else, {, if, (]
[-, value, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else, {, if, (]
[), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==]
[-, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return]
[-, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return]
[-, jmin, ), /, this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return]
[this, ., period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?]
[period, ;, }, }, else, {, if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :]
[if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (]
[if, (, value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (]
[value, ==, vp, ), {, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=]
[{, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return]
[{, return, this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return]
[this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +]
[this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +]
[this, ., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +]
[., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (]
[., boundMappedToLastCycle, ?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (]
[?, jmax, :, jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -]
[jmin, ;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *]
[;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (]
[;, }, else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (]
[else, if, (, value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (, jmax, -]
[value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (, jmax, -, jmin, ), /]
[value, >=, vp, ), {, return, jmin, +, (, value, -, vp, ), *, (, jmax, -, jmin, ), /]
[(, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return]
[(, value, -, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -]
[-, vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -]
[vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (]
[vp, ), *, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (]
[*, (, jmax, -, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -]
[-, jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *]
[jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (]
[jmin, ), /, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (]
[/, this, ., period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -]
[period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -, jmin, ), /]
[period, ;, }, else, {, return, jmax, -, (, vp, -, value, ), *, (, jmax, -, jmin, ), /]
[jmax, -, jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {]
[jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (]
[jmin, ), /, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (]
[/, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -]
[/, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -]
[/, this, ., period, ;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -]
[;, }, }, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /]
[}, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /, 2.0, ,]
[}, }, public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /, 2.0, ,]
[public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /, 2.0, ,, value, +]
[public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /, 2.0, ,, value, +]
[public, void, centerRange, (, double, value, ), {, setRange, (, value, -, this, ., period, /, 2.0, ,, value, +]
[double, value, ), {, setRange, (, value, -, this, ., period, /, 2.0, ,, value, +, this, ., period, /]
[., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (]
[., period, /, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (]
[/, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >]
[/, 2.0, ), ;, }, public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >]
[public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >, this, ., period, ), {]
[public, void, setAutoRangeMinimumSize, (, double, size, ,, boolean, notify, ), {, if, (, size, >, this, ., period, ), {]
[double, size, ,, boolean, notify, ), {, if, (, size, >, this, ., period, ), {, this, ., period, =]
[boolean, notify, ), {, if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }]
[boolean, notify, ), {, if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }]
[if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setAutoRangeMinimumSize, (]
[size, >, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setAutoRangeMinimumSize, (, size, ,]
[;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {]
[;, }, super, ., setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {]
[setAutoRangeMinimumSize, (, size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period, =]
[size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period, =, length, ;]
[size, ,, notify, ), ;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period, =, length, ;]
[;, }, public, void, setFixedAutoRange, (, double, length, ), {, this, ., period, =, length, ;, super, ., setFixedAutoRange, (]
[), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, double, size, =]
[), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, double, size, =]
[), ;, }, public, void, setRange, (, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, double, size, =]
[(, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, double, size, =, range, ., getUpperBound, (, ), -]
[(, Range, range, ,, boolean, turnOffAutoRange, ,, boolean, notify, ), {, double, size, =, range, ., getUpperBound, (, ), -]
[notify, ), {, double, size, =, range, ., getUpperBound, (, ), -, range, ., getLowerBound, (, ), ;, if, (]
[notify, ), {, double, size, =, range, ., getUpperBound, (, ), -, range, ., getLowerBound, (, ), ;, if, (]
[{, double, size, =, range, ., getUpperBound, (, ), -, range, ., getLowerBound, (, ), ;, if, (, size, >]
[{, double, size, =, range, ., getUpperBound, (, ), -, range, ., getLowerBound, (, ), ;, if, (, size, >]
[., getUpperBound, (, ), -, range, ., getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {]
[., getUpperBound, (, ), -, range, ., getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {]
[-, range, ., getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {, this, ., period, =]
[getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }]
[getLowerBound, (, ), ;, if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }]
[if, (, size, >, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setRange, (]
[size, >, this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setRange, (, range, ,]
[this, ., period, ), {, this, ., period, =, size, ;, }, super, ., setRange, (, range, ,, turnOffAutoRange, ,]
[}, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return]
[}, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return]
[}, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return]
[}, super, ., setRange, (, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return]
[(, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (]
[(, range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (]
[range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (]
[range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (]
[range, ,, turnOffAutoRange, ,, notify, ), ;, }, public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (]
[public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -]
[public, double, getCycleBound, (, ), {, return, Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -]
[{, return, Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /]
[{, return, Math, ., floor, (, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /]
[(, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, ), *]
[(, (, getRange, (, ), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, ), *]
[), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, ), *, this, ., period, +]
[), ., getUpperBound, (, ), -, this, ., offset, ), /, this, ., period, ), *, this, ., period, +]
[., period, ), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (, ), {, return]
[., period, ), *, this, ., period, +, this, ., offset, ;, }, public, double, getOffset, (, ), {, return]
[public, double, getOffset, (, ), {, return, this, ., offset, ;, }, public, void, setOffset, (, double, offset, ), {]
[public, double, getOffset, (, ), {, return, this, ., offset, ;, }, public, void, setOffset, (, double, offset, ), {]
[), {, return, this, ., offset, ;, }, public, void, setOffset, (, double, offset, ), {, this, ., offset, =]
[setOffset, (, double, offset, ), {, this, ., offset, =, offset, ;, }, public, double, getPeriod, (, ), {, return]
[setOffset, (, double, offset, ), {, this, ., offset, =, offset, ;, }, public, double, getPeriod, (, ), {, return]
[public, double, getPeriod, (, ), {, return, this, ., period, ;, }, public, void, setPeriod, (, double, period, ), {]
[public, double, getPeriod, (, ), {, return, this, ., period, ;, }, public, void, setPeriod, (, double, period, ), {]
[), {, return, this, ., period, ;, }, public, void, setPeriod, (, double, period, ), {, this, ., period, =]
[(, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {]
[(, Graphics2D, g2, ,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {]
[double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {, this, ., internalMarkerWhenTicksOverlap, =]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {, this, ., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {, this, ., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =]
[RectangleEdge, edge, ,, PlotRenderingInfo, info, ), {, this, ., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (]
[,, PlotRenderingInfo, info, ), {, this, ., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,]
[info, ), {, this, ., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,]
[{, this, ., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,]
[., internalMarkerWhenTicksOverlap, =, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,]
[=, false, ;, AxisState, ret, =, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,]
[=, super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, ), ;, if, (]
[super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, ), ;, if, (, !]
[super, ., drawTickMarksAndLabels, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, ), ;, if, (, !]
[cursor, ,, plotArea, ,, dataArea, ,, edge, ,, info, ), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return]
[edge, ,, info, ), ;, if, (, !, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol, =]
[!, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =]
[!, this, ., internalMarkerWhenTicksOverlap, ), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =]
[), {, return, ret, ;, }, double, ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[ol, =, getTickMarkOutsideLength, (, ), ;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, if, (]
[;, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, if, (, isVerticalTickLabels, (, ), ), {]
[fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, if, (, isVerticalTickLabels, (, ), ), {, ol, =]
[fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, if, (, isVerticalTickLabels, (, ), ), {, ol, =]
[), ;, if, (, isVerticalTickLabels, (, ), ), {, ol, =, fm, ., getMaxAdvance, (, ), ;, }, else, {]
[if, (, isVerticalTickLabels, (, ), ), {, ol, =, fm, ., getMaxAdvance, (, ), ;, }, else, {, ol, =]
[if, (, isVerticalTickLabels, (, ), ), {, ol, =, fm, ., getMaxAdvance, (, ), ;, }, else, {, ol, =]
[., getMaxAdvance, (, ), ;, }, else, {, ol, =, fm, ., getHeight, (, ), ;, }, double, il, =]
[;, }, else, {, ol, =, fm, ., getHeight, (, ), ;, }, double, il, =, 0, ;, if, (]
[getHeight, (, ), ;, }, double, il, =, 0, ;, if, (, isTickMarksVisible, (, ), ), {, float, xx, =]
[;, }, double, il, =, 0, ;, if, (, isTickMarksVisible, (, ), ), {, float, xx, =, (, float, )]
[double, il, =, 0, ;, if, (, isTickMarksVisible, (, ), ), {, float, xx, =, (, float, ), valueToJava2D, (]
[double, il, =, 0, ;, if, (, isTickMarksVisible, (, ), ), {, float, xx, =, (, float, ), valueToJava2D, (]
[(, ), ), {, float, xx, =, (, float, ), valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,]
[), {, float, xx, =, (, float, ), valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,]
[float, ), valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =]
[valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;]
[valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;]
[), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;]
[), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (]
[g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (]
[g2, ., setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (]
[setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==]
[setStroke, (, getTickMarkStroke, (, ), ), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==]
[), ;, g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[g2, ., setPaint, (, getTickMarkPaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =]
[(, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (]
[(, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (]
[), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,]
[edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,]
[edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,]
[RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +]
[LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,]
[., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (]
[., Double, (, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (]
[(, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[(, cursor, -, ol, ,, xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[xx, ,, cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[cursor, +, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +]
[if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,]
[edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,]
[edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,]
[RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -]
[RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,]
[., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (]
[., Double, (, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (]
[(, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[(, cursor, +, ol, ,, xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==]
[xx, ,, cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[cursor, -, il, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[}, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -]
[edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,]
[RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,]
[RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,]
[TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +]
[., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (]
[., Double, (, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (]
[(, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==]
[(, xx, ,, cursor, -, ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==]
[ol, ,, xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[xx, ,, cursor, +, il, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[}, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,]
[RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,]
[RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,]
[BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -]
[=, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }]
[=, new, Line2D, ., Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }]
[Double, (, xx, ,, cursor, +, ol, ,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (]
[+, ol, ,, xx, ,, cursor, -, il, ), ;, }, g2, ., draw, (, mark, ), ;, }, return]
[,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, ret, =]
[,, double, cursor, ,, Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, ret, =]
[Rectangle2D, plotArea, ,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, ret, =, super, ., draw, (]
[,, Rectangle2D, dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, ret, =, super, ., draw, (, g2, ,]
[dataArea, ,, RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, ret, =, super, ., draw, (, g2, ,, cursor, ,]
[RectangleEdge, edge, ,, PlotRenderingInfo, plotState, ), {, AxisState, ret, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,]
[,, PlotRenderingInfo, plotState, ), {, AxisState, ret, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,]
[plotState, ), {, AxisState, ret, =, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,]
[=, super, ., draw, (, g2, ,, cursor, ,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, if, (]
[,, plotArea, ,, dataArea, ,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =]
[,, dataArea, ,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (]
[,, dataArea, ,, edge, ,, plotState, ), ;, if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (]
[if, (, isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,]
[isAdvanceLineVisible, (, ), ), {, double, xx, =, valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,]
[xx, =, valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =]
[valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;]
[valueToJava2D, (, getRange, (, ), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;]
[), ., getUpperBound, (, ), ,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;]
[,, dataArea, ,, edge, ), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;]
[), ;, Line2D, mark, =, null, ;, g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (]
[g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (]
[g2, ., setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (]
[setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge, ==]
[setStroke, (, getAdvanceLineStroke, (, ), ), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge, ==]
[), ;, g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[g2, ., setPaint, (, getAdvanceLinePaint, (, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =]
[(, ), ), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (]
[), ;, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,]
[if, (, edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,]
[edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +]
[edge, ==, RectangleEdge, ., LEFT, ), {, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +]
[{, mark, =, new, Line2D, ., Double, (, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,]
[(, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (]
[(, cursor, ,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (]
[,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==]
[,, xx, ,, cursor, +, dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==]
[dataArea, ., getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[getWidth, (, ), ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -]
[}, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -]
[RectangleEdge, ., RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,]
[RIGHT, ), {, mark, =, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,]
[{, mark, =, new, Line2D, ., Double, (, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,]
[(, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (]
[(, cursor, -, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (]
[-, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==]
[-, dataArea, ., getWidth, (, ), ,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==]
[), ,, xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[xx, ,, cursor, ,, xx, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[}, else, if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +]
[if, (, edge, ==, RectangleEdge, ., TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +]
[TOP, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,]
[{, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,]
[(, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (]
[(, xx, ,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (]
[,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==]
[,, cursor, +, dataArea, ., getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==]
[getHeight, (, ), ,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[), ,, xx, ,, cursor, ), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =]
[), ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (]
[}, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,]
[if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,]
[edge, ==, RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,]
[RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -]
[RectangleEdge, ., BOTTOM, ), {, mark, =, new, Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -]
[Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight, (, ), ), ;, }]
[Line2D, ., Double, (, xx, ,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight, (, ), ), ;, }]
[xx, ,, cursor, ,, xx, ,, cursor, -, dataArea, ., getHeight, (, ), ), ;, }, g2, ., draw, (]
[,, cursor, -, dataArea, ., getHeight, (, ), ), ;, }, g2, ., draw, (, mark, ), ;, }, return]
[public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {]
[public, AxisSpace, reserveSpace, (, Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {]
[Graphics2D, g2, ,, Plot, plot, ,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, this, ., internalMarkerCycleBoundTick, =]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, this, ., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =]
[,, Rectangle2D, plotArea, ,, RectangleEdge, edge, ,, AxisSpace, space, ), {, this, ., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =]
[RectangleEdge, edge, ,, AxisSpace, space, ), {, this, ., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =, super, ., reserveSpace, (]
[,, AxisSpace, space, ), {, this, ., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,]
[space, ), {, this, ., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,]
[{, this, ., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,]
[., internalMarkerCycleBoundTick, =, null, ;, AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,]
[AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if, (]
[AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if, (]
[AxisSpace, ret, =, super, ., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if, (]
[., reserveSpace, (, g2, ,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==]
[,, plot, ,, plotArea, ,, edge, ,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return]
[,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics, fm, =]
[,, space, ), ;, if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics, fm, =]
[if, (, this, ., internalMarkerCycleBoundTick, ==, null, ), {, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (]
[{, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r, =]
[{, return, ret, ;, }, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r, =]
[}, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (]
[}, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (]
[}, FontMetrics, fm, =, g2, ., getFontMetrics, (, getTickLabelFont, (, ), ), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (]
[getTickLabelFont, (, ), ), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,]
[), ), ;, Rectangle2D, r, =, TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,]
[=, TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[=, TextUtilities, ., getTextBounds, (, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (]
[(, this, ., internalMarkerCycleBoundTick, ., getText, (, ), ,, g2, ,, fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (]
[(, ), ,, g2, ,, fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (]
[fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {]
[fm, ), ;, if, (, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {]
[(, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (]
[(, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (]
[(, RectangleEdge, ., isTopOrBottom, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (]
[), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getHeight, (, ), /]
[{, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,]
[{, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,]
[space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {]
[space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {]
[r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (]
[r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (]
[r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (]
[2, ,, RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /]
[RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,]
[RectangleEdge, ., RIGHT, ), ;, }, else, {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,]
[add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (]
[add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (]
[getWidth, (, ), /, 2, ,, RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (]
[RectangleEdge, ., RIGHT, ), ;, }, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (]
[}, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {]
[}, }, else, if, (, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {]
[(, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (]
[(, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (]
[(, RectangleEdge, ., isLeftOrRight, (, edge, ), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (]
[), ), {, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getWidth, (, ), /]
[{, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,]
[{, if, (, isVerticalTickLabels, (, ), ), {, space, ., add, (, r, ., getWidth, (, ), /, 2, ,]
[space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {]
[space, ., add, (, r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {]
[r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (]
[r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (]
[r, ., getWidth, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (]
[2, ,, RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /]
[RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,]
[RectangleEdge, ., TOP, ), ;, }, else, {, space, ., add, (, r, ., getHeight, (, ), /, 2, ,]
[space, ., add, (, r, ., getHeight, (, ), /, 2, ,, RectangleEdge, ., TOP, ), ;, }, }, return]
[., TOP, ), ;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[., TOP, ), ;, }, }, return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[return, ret, ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;, SerialUtilities, ., writeStroke, (]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;, SerialUtilities, ., writeStroke, (]
[;, SerialUtilities, ., writePaint, (, this, ., advanceLinePaint, ,, stream, ), ;, SerialUtilities, ., writeStroke, (, this, ., advanceLineStroke, ,]
[this, ., advanceLineStroke, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., advanceLineStroke, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =]
[), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =]
[., defaultReadObject, (, ), ;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =]
[;, this, ., advanceLinePaint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., advanceLineStroke, =, SerialUtilities, ., readStroke, (]
[advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[advanceLineStroke, =, SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[SerialUtilities, ., readStroke, (, stream, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[stream, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return]
[return, true, ;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }, if, (]
[true, ;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }, if, (, !]
[true, ;, }, if, (, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }, if, (, !]
[(, !, (, obj, instanceof, CyclicNumberAxis, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (]
[CyclicNumberAxis, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, CyclicNumberAxis, that, =]
[(, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, )]
[equals, (, obj, ), ), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (]
[equals, (, obj, ), ), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (]
[equals, (, obj, ), ), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (]
[), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (, this, ., period, !=]
[), {, return, false, ;, }, CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (, this, ., period, !=]
[CyclicNumberAxis, that, =, (, CyclicNumberAxis, ), obj, ;, if, (, this, ., period, !=, that, ., period, ), {, return]
[), obj, ;, if, (, this, ., period, !=, that, ., period, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., period, !=, that, ., period, ), {, return, false, ;, }, if, (]
[), obj, ;, if, (, this, ., period, !=, that, ., period, ), {, return, false, ;, }, if, (]
[(, this, ., period, !=, that, ., period, ), {, return, false, ;, }, if, (, this, ., offset, !=]
[(, this, ., period, !=, that, ., period, ), {, return, false, ;, }, if, (, this, ., offset, !=]
[., period, ), {, return, false, ;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return]
[false, ;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., offset, !=, that, ., offset, ), {, return, false, ;, }, if, (, !]
[this, ., offset, !=, that, ., offset, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[this, ., offset, !=, that, ., offset, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[that, ., offset, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,]
[that, ., offset, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !]
[., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., advanceLinePaint, ,, that, ., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,]
[., advanceLinePaint, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (]
[ObjectUtilities, ., equal, (, this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (]
[this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=]
[this, ., advanceLineStroke, ,, that, ., advanceLineStroke, ), ), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=]
[advanceLineStroke, ), ), {, return, false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return]
[false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (]
[(, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=]
[(, this, ., advanceLineVisible, !=, that, ., advanceLineVisible, ), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=]
[., advanceLineVisible, ), {, return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, ), {, return]
[return, false, ;, }, if, (, this, ., boundMappedToLastCycle, !=, that, ., boundMappedToLastCycle, ), {, return, false, ;, }, return]
