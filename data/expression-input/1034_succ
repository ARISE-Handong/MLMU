[;, private, JsonML, rootElement, ;, private, String, sourceName, ;, private, ErrorReporter, errorReporter, ;, private, final, Set, <, String, >, ALLOWED_DIRECTIVES]
[., error, (, "JSONML_SYNTAX", ,, "Syntax error: {0}", ), ;, private, JsonML, rootElement, ;, private, String, sourceName, ;, private, ErrorReporter, errorReporter, ;]
[,, "Syntax error: {0}", ), ;, private, JsonML, rootElement, ;, private, String, sourceName, ;, private, ErrorReporter, errorReporter, ;, private, final, Set, <]
[), ;, private, JsonML, rootElement, ;, private, String, sourceName, ;, private, ErrorReporter, errorReporter, ;, private, final, Set, <, String, >]
[;, private, int, nodeIndex, ;, private, class, ErrorReporter, {, private, AbstractCompiler, compiler, ;, ErrorReporter, (, AbstractCompiler, compiler, ), {, this]
[., newHashSet, (, "use strict", ), ;, private, int, nodeIndex, ;, private, class, ErrorReporter, {, private, AbstractCompiler, compiler, ;, ErrorReporter, (]
[), ;, private, int, nodeIndex, ;, private, class, ErrorReporter, {, private, AbstractCompiler, compiler, ;, ErrorReporter, (, AbstractCompiler, compiler, ), {]
[=, compiler, ;, }, private, void, report, (, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, report, (]
[., compiler, =, compiler, ;, }, private, void, report, (, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {]
[;, }, private, void, report, (, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, report, (, JSONML_SYNTAX, ,]
[;, }, private, void, report, (, DiagnosticType, type, ,, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {, int]
[,, element, ,, arguments, ), ;, }, private, void, report, (, DiagnosticType, type, ,, JsonML, element, ,, String, ..., arguments]
[,, arguments, ), ;, }, private, void, report, (, DiagnosticType, type, ,, JsonML, element, ,, String, ..., arguments, ), throws]
[), ;, }, private, void, report, (, DiagnosticType, type, ,, JsonML, element, ,, String, ..., arguments, ), throws, JsonMLException, {]
[;, int, charno, =, -, 1, ;, report, (, JSError, ., make, (, sourceName, ,, lineno, ,, charno, ,, type]
[;, report, (, JSError, ., make, (, sourceName, ,, lineno, ,, charno, ,, type, ,, arguments, ), ), ;, }]
[;, report, (, JSError, ., make, (, sourceName, ,, lineno, ,, charno, ,, type, ,, arguments, ), ), ;, }]
[;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {, report, (, error, ,, true, ), ;, }]
[), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {, report, (, error, ,, true, ), ;]
[., make, (, sourceName, ,, lineno, ,, charno, ,, type, ,, arguments, ), ), ;, }, private, void, report, (]
[,, lineno, ,, charno, ,, type, ,, arguments, ), ), ;, }, private, void, report, (, JSError, error, ), throws]
[,, charno, ,, type, ,, arguments, ), ), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {]
[,, type, ,, arguments, ), ), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {, report, (]
[,, arguments, ), ), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {, report, (, error, ,]
[), ), ;, }, private, void, report, (, JSError, error, ), throws, JsonMLException, {, report, (, error, ,, true, )]
[;, }, private, void, report, (, JSError, error, ,, boolean, terminal, ), throws, JsonMLException, {, compiler, ., report, (, error]
[,, true, ), ;, }, private, void, report, (, JSError, error, ,, boolean, terminal, ), throws, JsonMLException, {, compiler, .]
[), ;, }, private, void, report, (, JSError, error, ,, boolean, terminal, ), throws, JsonMLException, {, compiler, ., report, (]
[;, if, (, terminal, ), {, throw, new, JsonMLException, (, ), ;, }, }, }, private, boolean, insertExprResultState, =, true]
[., report, (, error, ), ;, if, (, terminal, ), {, throw, new, JsonMLException, (, ), ;, }, }, }]
[), ;, if, (, terminal, ), {, throw, new, JsonMLException, (, ), ;, }, }, }, private, boolean, insertExprResultState, =]
[), {, throw, new, JsonMLException, (, ), ;, }, }, }, private, boolean, insertExprResultState, =, true, ;, public, void, setRootElement]
[;, }, }, }, private, boolean, insertExprResultState, =, true, ;, public, void, setRootElement, (, JsonML, rootElement, ), {, this, .]
[;, public, void, setRootElement, (, JsonML, rootElement, ), {, this, ., rootElement, =, rootElement, ;, }, public, Node, parse, (]
[=, rootElement, ;, }, public, Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==, null, )]
[., rootElement, =, rootElement, ;, }, public, Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==]
[;, }, public, Node, parse, (, AbstractCompiler, compiler, ), throws, JsonMLException, {, if, (, compiler, ==, null, ), {, return]
[), {, return, null, ;, }, errorReporter, =, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR]
[==, null, ), {, return, null, ;, }, errorReporter, =, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root]
[), {, return, null, ;, }, errorReporter, =, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR]
[;, }, errorReporter, =, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, )]
[=, this, ., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =]
[;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (, rootElement]
[., new, ErrorReporter, (, compiler, ), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1]
[), ;, Node, root, =, IR, ., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (]
[;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, )]
[., block, (, ), ;, nodeIndex, =, -, 1, ;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==]
[=, -, 1, ;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement]
[;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,]
[;, Preconditions, ., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,]
[;, transformElement, (, rootElement, ,, root, ), ;, return, root, ., removeFirstChild, (, ), ;, }, private, <, T, >]
[., checkState, (, rootElement, ., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,, root, )]
[), ;, transformElement, (, rootElement, ,, root, ), ;, return, root, ., removeFirstChild, (, ), ;, }, private, <, T]
[==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,, root, ), ;, return, root, ., removeFirstChild, (, ), ;]
[., getType, (, ), ==, TagType, ., Program, ), ;, transformElement, (, rootElement, ,, root, ), ;, return, root, .]
[), ;, transformElement, (, rootElement, ,, root, ), ;, return, root, ., removeFirstChild, (, ), ;, }, private, <, T]
[., Program, ), ;, transformElement, (, rootElement, ,, root, ), ;, return, root, ., removeFirstChild, (, ), ;, }, private]
[;, return, root, ., removeFirstChild, (, ), ;, }, private, <, T, >, T, getOptionalAttribute, (, JsonML, element, ,, TagAttr]
[,, root, ), ;, return, root, ., removeFirstChild, (, ), ;, }, private, <, T, >, T, getOptionalAttribute, (, JsonML]
[), ;, return, root, ., removeFirstChild, (, ), ;, }, private, <, T, >, T, getOptionalAttribute, (, JsonML, element, ,]
[;, }, private, <, T, >, T, getOptionalAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type]
[., removeFirstChild, (, ), ;, }, private, <, T, >, T, getOptionalAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class]
[;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type]
[,, attr, ,, type, ,, true, ), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr]
[,, type, ,, true, ), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,]
[,, true, ), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <]
[), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >]
[;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >, type]
[,, attr, ,, type, ,, false, ), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr]
[,, type, ,, false, ), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,]
[,, false, ), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <]
[), ;, }, private, <, T, >, T, getAttribute, (, JsonML, element, ,, TagAttr, attr, ,, Class, <, T, >]
[;, if, (, value, ==, null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;]
[., getAttribute, (, attr, ), ;, if, (, value, ==, null, ), {, if, (, type, ==, null, ||, optional]
[), ;, if, (, value, ==, null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null]
[), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing "]
[==, null, ), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException]
[), {, if, (, type, ==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing "]
[), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +, " attribute for ", +]
[||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +]
[==, null, ||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (]
[||, optional, ), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +]
[), {, return, null, ;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +, " attribute for ", +]
[;, }, throw, new, JsonMLException, (, "Missing ", +, attr, ., name, (, ), +, " attribute for ", +, element, ., getType, (]
[;, }, if, (, type, ., equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number, )]
[), ;, }, if, (, type, ., equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number]
[+, " element.", ), ;, }, if, (, type, ., equals, (, Double, ., class, ), ), {, if, (, value]
[+, element, ., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (, type, ., equals]
[+, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (, type]
[+, attr, ., name, (, ), +, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element."]
[+, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (, type]
[., name, (, ), +, " attribute for ", +, element, ., getType, (, ), ., name, (, ), +, " element.", ), ;]
[+, element, ., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (, type, ., equals]
[+, " element.", ), ;, }, if, (, type, ., equals, (, Double, ., class, ), ), {, if, (, value]
[., name, (, ), +, " element.", ), ;, }, if, (, type, ., equals, (, Double, ., class, ), )]
[., getType, (, ), ., name, (, ), +, " element.", ), ;, }, if, (, type, ., equals, (, Double]
[), ;, }, if, (, type, ., equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number]
[), {, if, (, value, instanceof, Number, ), {, return, type, ., cast, (, (, (, Number, ), value, )]
[., equals, (, Double, ., class, ), ), {, if, (, value, instanceof, Number, ), {, return, type, ., cast]
[), ), {, if, (, value, instanceof, Number, ), {, return, type, ., cast, (, (, (, Number, ), value]
[), {, return, type, ., cast, (, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }]
[instanceof, Number, ), {, return, type, ., cast, (, (, (, Number, ), value, ), ., doubleValue, (, ), )]
[;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (, Double, ., valueOf, (, (, String]
[., cast, (, (, (, Number, ), value, ), ., doubleValue, (, ), ), ;, }, if, (, value, instanceof]
[), ;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (, Double, ., valueOf, (, (]
[., doubleValue, (, ), ), ;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (, Double]
[), ., doubleValue, (, ), ), ;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (]
[), ., doubleValue, (, ), ), ;, }, if, (, value, instanceof, String, ), {, return, type, ., cast, (]
[), {, return, type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw]
[instanceof, String, ), {, return, type, ., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;]
[;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, .]
[., cast, (, Double, ., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (, "Wrong type of "]
[), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value]
[., valueOf, (, (, String, ), value, ), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name]
[), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +]
[), ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +]
[;, }, if, (, type, ., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;]
[), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return, type, ., cast, (, value, )]
[+, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return]
[+, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance, (, value, ), )]
[+, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (, type]
[+, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if]
[+, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;]
[+, attr, ., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type]
[+, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;]
[., name, (, ), +, " attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName]
[+, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if]
[+, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (, type]
[+, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance, (, value, ), )]
[., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance]
[+, type, ., getName, (, ), ), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return]
[), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return, type, ., cast, (, value, )]
[., getName, (, ), ), ;, }, if, (, type, ., isInstance, (, value, ), ), {, return, type, .]
[), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name]
[., isInstance, (, value, ), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (]
[), ), {, return, type, ., cast, (, value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, .]
[;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, .]
[., cast, (, value, ), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. "]
[), ;, }, throw, new, JsonMLException, (, "Wrong type of ", +, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value]
[;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element, ,]
[), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element]
[+, type, ., getName, (, ), ), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws]
[+, ". Expected: ", +, type, ., getName, (, ), ), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr]
[+, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, private, Object, getObjectAttribute]
[+, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, private]
[+, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;]
[+, attr, ., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type]
[+, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;]
[., name, (, ), +, "attribute. ", +, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName]
[+, "Received: ", +, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, private]
[+, value, ., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, private, Object, getObjectAttribute]
[+, ". Expected: ", +, type, ., getName, (, ), ), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr]
[., getClass, (, ), +, ". Expected: ", +, type, ., getName, (, ), ), ;, }, private, Object, getObjectAttribute, (, JsonML]
[+, type, ., getName, (, ), ), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws]
[), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element]
[., getName, (, ), ), ;, }, private, Object, getObjectAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {]
[;, }, private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element, ,]
[,, attr, ,, Object, ., class, ), ;, }, private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws]
[,, Object, ., class, ), ;, }, private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {]
[), ;, }, private, String, getStringAttribute, (, JsonML, element, ,, TagAttr, attr, ), throws, JsonMLException, {, return, getAttribute, (, element]
[;, }, private, void, validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (, element]
[,, attr, ,, String, ., class, ), ;, }, private, void, validate, (, JsonML, element, ), throws, JsonMLException, {, String]
[,, String, ., class, ), ;, }, private, void, validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =]
[), ;, }, private, void, validate, (, JsonML, element, ), throws, JsonMLException, {, String, errorMessage, =, Validator, ., validate, (]
[;, if, (, errorMessage, !=, null, ), {, errorReporter, ., report, (, element, ,, errorMessage, ), ;, }, }, private]
[., validate, (, element, ), ;, if, (, errorMessage, !=, null, ), {, errorReporter, ., report, (, element, ,, errorMessage]
[), ;, if, (, errorMessage, !=, null, ), {, errorReporter, ., report, (, element, ,, errorMessage, ), ;, }, }]
[), {, errorReporter, ., report, (, element, ,, errorMessage, ), ;, }, }, private, void, transformElement, (, JsonML, element, ,]
[!=, null, ), {, errorReporter, ., report, (, element, ,, errorMessage, ), ;, }, }, private, void, transformElement, (, JsonML]
[), {, errorReporter, ., report, (, element, ,, errorMessage, ), ;, }, }, private, void, transformElement, (, JsonML, element, ,]
[;, }, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;, validate]
[., report, (, element, ,, errorMessage, ), ;, }, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, )]
[,, errorMessage, ), ;, }, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex]
[), ;, }, }, private, void, transformElement, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, nodeIndex, ++, ;]
[;, validate, (, element, ), ;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (]
[++, ;, validate, (, element, ), ;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr]
[;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (, element, ,, parent, ), ;]
[), ;, if, (, insertExprResultState, &&, JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (, element, ,, parent, )]
[), {, transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch, (, element, ., getType, (, ), )]
[&&, JsonMLUtil, ., isExpression, (, element, ), ), {, transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch]
[), {, transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch, (, element, ., getType, (, ), )]
[., isExpression, (, element, ), ), {, transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch, (, element]
[), ), {, transformExpr, (, element, ,, parent, ), ;, return, ;, }, switch, (, element, ., getType, (, )]
[;, return, ;, }, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr, (, element, ,]
[,, parent, ), ;, return, ;, }, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr]
[), ;, return, ;, }, switch, (, element, ., getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr, (, element]
[), {, case, ArrayExpr, :, transformArrayExpr, (, element, ,, parent, ), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element]
[., getType, (, ), ), {, case, ArrayExpr, :, transformArrayExpr, (, element, ,, parent, ), ;, break, ;, case, AssignExpr]
[:, transformArrayExpr, (, element, ,, parent, ), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (]
[,, parent, ), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case, BinaryExpr]
[), ;, break, ;, case, AssignExpr, :, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr]
[:, transformAssignExpr, (, element, ,, parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case, BlockStmt, :, transformBlock, (]
[,, parent, ), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case, BlockStmt]
[), ;, break, ;, case, BinaryExpr, :, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case, BlockStmt, :, transformBlock]
[:, transformBinaryExpr, (, element, ,, parent, ), ;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;]
[;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (]
[,, parent, ), ;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;, break, ;, case, BreakStmt]
[), ;, break, ;, case, BlockStmt, :, transformBlock, (, element, ,, parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt]
[:, transformBlock, (, element, ,, parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr, (]
[,, parent, ), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case, CallExpr]
[), ;, break, ;, case, BreakStmt, :, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr]
[:, transformBreakStmt, (, element, ,, parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case, Case, :, transformCase, (]
[,, parent, ), ;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case, Case]
[), ;, break, ;, case, CallExpr, :, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case, Case, :, transformCase]
[:, transformCallExpr, (, element, ,, parent, ), ;, break, ;, case, Case, :, transformCase, (, element, ,, parent, ), ;]
[;, break, ;, case, Case, :, transformCase, (, element, ,, parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause, (]
[,, parent, ), ;, break, ;, case, Case, :, transformCase, (, element, ,, parent, ), ;, break, ;, case, CatchClause]
[), ;, break, ;, case, Case, :, transformCase, (, element, ,, parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause]
[:, transformCase, (, element, ,, parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;]
[;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (]
[,, parent, ), ;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case, ConditionalExpr]
[), ;, break, ;, case, CatchClause, :, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr]
[:, transformCatchClause, (, element, ,, parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (]
[,, parent, ), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case, ContinueStmt]
[), ;, break, ;, case, ConditionalExpr, :, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt]
[:, transformConditionalExpr, (, element, ,, parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr, (]
[,, parent, ), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case, CountExpr]
[), ;, break, ;, case, ContinueStmt, :, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr]
[:, transformContinueStmt, (, element, ,, parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case, DataProp, :, transformDataProp, (]
[,, parent, ), ;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case, DataProp]
[), ;, break, ;, case, CountExpr, :, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case, DataProp, :, transformDataProp]
[:, transformCountExpr, (, element, ,, parent, ), ;, break, ;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;]
[;, break, ;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp, (]
[,, parent, ), ;, break, ;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;, break, ;, case, GetterProp]
[), ;, break, ;, case, DataProp, :, transformDataProp, (, element, ,, parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp]
[:, transformDataProp, (, element, ,, parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;]
[;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp, (]
[,, parent, ), ;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case, SetterProp]
[), ;, break, ;, case, GetterProp, :, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp]
[:, transformGetterProp, (, element, ,, parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;]
[;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (]
[,, parent, ), ;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case, DefaultCase]
[), ;, break, ;, case, SetterProp, :, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase]
[:, transformSetterProp, (, element, ,, parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;]
[;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (]
[,, parent, ), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case, DeleteExpr]
[), ;, break, ;, case, DefaultCase, :, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr]
[:, transformDefaultCase, (, element, ,, parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (]
[,, parent, ), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case, DoWhileStmt]
[), ;, break, ;, case, DeleteExpr, :, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt]
[:, transformDeleteExpr, (, element, ,, parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case, Empty, :, transformEmpty, (]
[,, parent, ), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case, Empty]
[), ;, break, ;, case, DoWhileStmt, :, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case, Empty, :, transformEmpty]
[:, transformDoWhileStmt, (, element, ,, parent, ), ;, break, ;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;]
[;, break, ;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (]
[,, parent, ), ;, break, ;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;, break, ;, case, EmptyStmt]
[), ;, break, ;, case, Empty, :, transformEmpty, (, element, ,, parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt]
[:, transformEmpty, (, element, ,, parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (]
[,, parent, ), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case, EvalExpr]
[), ;, break, ;, case, EmptyStmt, :, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr]
[:, transformEmptyStmt, (, element, ,, parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt, (]
[,, parent, ), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case, ForInStmt]
[), ;, break, ;, case, EvalExpr, :, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt]
[:, transformEvalExpr, (, element, ,, parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case, ForStmt, :, transformForStmt, (]
[,, parent, ), ;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case, ForStmt]
[), ;, break, ;, case, ForInStmt, :, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case, ForStmt, :, transformForStmt]
[:, transformForInStmt, (, element, ,, parent, ), ;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (]
[,, parent, ), ;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;, break, ;, case, FunctionDecl]
[), ;, break, ;, case, ForStmt, :, transformForStmt, (, element, ,, parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl]
[:, transformForStmt, (, element, ,, parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;]
[;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (]
[,, parent, ), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case, FunctionExpr]
[), ;, break, ;, case, FunctionDecl, :, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr]
[:, transformFunctionDecl, (, element, ,, parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr, (]
[,, parent, ), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case, IdExpr]
[), ;, break, ;, case, FunctionExpr, :, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr]
[:, transformFunctionExpr, (, element, ,, parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt, (]
[,, parent, ), ;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case, IdPatt]
[), ;, break, ;, case, IdExpr, :, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt]
[:, transformIdExpr, (, element, ,, parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;]
[;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt, (]
[,, parent, ), ;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case, IfStmt]
[), ;, break, ;, case, IdPatt, :, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt]
[:, transformIdPatt, (, element, ,, parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt, (]
[,, parent, ), ;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case, InitPatt]
[), ;, break, ;, case, IfStmt, :, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt]
[:, transformIfStmt, (, element, ,, parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;]
[;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (]
[,, parent, ), ;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case, InvokeExpr]
[), ;, break, ;, case, InitPatt, :, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr]
[:, transformInitPatt, (, element, ,, parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (]
[,, parent, ), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case, LabelledStmt]
[), ;, break, ;, case, InvokeExpr, :, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt]
[:, transformInvokeExpr, (, element, ,, parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (]
[,, parent, ), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case, LiteralExpr]
[), ;, break, ;, case, LabelledStmt, :, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr]
[:, transformLabelledStmt, (, element, ,, parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (]
[,, parent, ), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalAndExpr]
[), ;, break, ;, case, LiteralExpr, :, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr]
[:, transformLiteralExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (]
[,, parent, ), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalOrExpr]
[), ;, break, ;, case, LogicalAndExpr, :, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr]
[:, transformLogicalAndExpr, (, element, ,, parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (]
[,, parent, ), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case, MemberExpr]
[), ;, break, ;, case, LogicalOrExpr, :, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr]
[:, transformLogicalOrExpr, (, element, ,, parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr, (]
[,, parent, ), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case, NewExpr]
[), ;, break, ;, case, MemberExpr, :, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr]
[:, transformMemberExpr, (, element, ,, parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (]
[,, parent, ), ;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case, ObjectExpr]
[), ;, break, ;, case, NewExpr, :, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr]
[:, transformNewExpr, (, element, ,, parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl, (]
[,, parent, ), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case, ParamDecl]
[), ;, break, ;, case, ObjectExpr, :, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl]
[:, transformObjectExpr, (, element, ,, parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;]
[;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case, Program, :, transformProgram, (]
[,, parent, ), ;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case, Program]
[), ;, break, ;, case, ParamDecl, :, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case, Program, :, transformProgram]
[:, transformParamDecl, (, element, ,, parent, ), ;, break, ;, case, Program, :, transformProgram, (, element, ,, parent, ), ;]
[;, break, ;, case, Program, :, transformProgram, (, element, ,, parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (]
[,, parent, ), ;, break, ;, case, Program, :, transformProgram, (, element, ,, parent, ), ;, break, ;, case, PrologueDecl]
[), ;, break, ;, case, Program, :, transformProgram, (, element, ,, parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl]
[:, transformProgram, (, element, ,, parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;]
[;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (]
[,, parent, ), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case, RegExpExpr]
[), ;, break, ;, case, PrologueDecl, :, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr]
[:, transformPrologueDecl, (, element, ,, parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (]
[,, parent, ), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case, ReturnStmt]
[), ;, break, ;, case, RegExpExpr, :, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt]
[:, transformRegExpExpr, (, element, ,, parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (]
[,, parent, ), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case, SwitchStmt]
[), ;, break, ;, case, ReturnStmt, :, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt]
[:, transformReturnStmt, (, element, ,, parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr, (]
[,, parent, ), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case, ThisExpr]
[), ;, break, ;, case, SwitchStmt, :, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr]
[:, transformSwitchStmt, (, element, ,, parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (]
[,, parent, ), ;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case, ThrowStmt]
[), ;, break, ;, case, ThisExpr, :, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt]
[:, transformThisExpr, (, element, ,, parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt, (]
[,, parent, ), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case, TryStmt]
[), ;, break, ;, case, ThrowStmt, :, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt]
[:, transformThrowStmt, (, element, ,, parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (]
[,, parent, ), ;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case, TypeofExpr]
[), ;, break, ;, case, TryStmt, :, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr]
[:, transformTryStmt, (, element, ,, parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (]
[,, parent, ), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case, UnaryExpr]
[), ;, break, ;, case, TypeofExpr, :, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr]
[:, transformTypeofExpr, (, element, ,, parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;]
[;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl, (]
[,, parent, ), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case, VarDecl]
[), ;, break, ;, case, UnaryExpr, :, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl]
[:, transformUnaryExpr, (, element, ,, parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;]
[;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (]
[,, parent, ), ;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case, WhileStmt]
[), ;, break, ;, case, VarDecl, :, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt]
[:, transformVarDecl, (, element, ,, parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case, WithStmt, :, transformWithStmt, (]
[,, parent, ), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case, WithStmt]
[), ;, break, ;, case, WhileStmt, :, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case, WithStmt, :, transformWithStmt]
[:, transformWhileStmt, (, element, ,, parent, ), ;, break, ;, case, WithStmt, :, transformWithStmt, (, element, ,, parent, ), ;]
[;, break, ;, case, WithStmt, :, transformWithStmt, (, element, ,, parent, ), ;, break, ;, }, }, private, void, transformAllChildren]
[,, parent, ), ;, break, ;, case, WithStmt, :, transformWithStmt, (, element, ,, parent, ), ;, break, ;, }, }]
[), ;, break, ;, case, WithStmt, :, transformWithStmt, (, element, ,, parent, ), ;, break, ;, }, }, private, void]
[:, transformWithStmt, (, element, ,, parent, ), ;, break, ;, }, }, private, void, transformAllChildren, (, JsonML, element, ,, Node]
[;, break, ;, }, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException]
[,, parent, ), ;, break, ;, }, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ,, boolean, newState]
[), ;, break, ;, }, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ,, boolean, newState, ), throws]
[;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformElements, (, element, ., getChildren]
[,, parent, ,, newState, ), ;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[., getChildren, (, ), ,, parent, ,, newState, ), ;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent]
[,, newState, ), ;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformElements, (]
[), ;, }, private, void, transformAllChildren, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformElements, (, element, .]
[;, }, private, void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int, fromIndex, ,, boolean, newState, ), throws, JsonMLException]
[,, parent, ), ;, }, private, void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int, fromIndex, ,, boolean, newState]
[., getChildren, (, ), ,, parent, ), ;, }, private, void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int]
[), ;, }, private, void, transformAllChildrenFromIndex, (, JsonML, element, ,, Node, parent, ,, int, fromIndex, ,, boolean, newState, ), throws]
[;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ,, boolean, newState, ), throws, JsonMLException]
[,, parent, ,, newState, ), ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ,]
[., subList, (, fromIndex, ,, element, ., childrenSize, (, ), ), ,, parent, ,, newState, ), ;, }, private, void]
[., getChildren, (, ), ., subList, (, fromIndex, ,, element, ., childrenSize, (, ), ), ,, parent, ,, newState, )]
[,, element, ., childrenSize, (, ), ), ,, parent, ,, newState, ), ;, }, private, void, transformElements, (, List, <]
[), ,, parent, ,, newState, ), ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent]
[., childrenSize, (, ), ), ,, parent, ,, newState, ), ;, }, private, void, transformElements, (, List, <, JsonML, >]
[,, newState, ), ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ,, boolean, newState]
[), ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ,, boolean, newState, ), throws]
[;, insertExprResultState, =, newState, ;, transformElements, (, elements, ,, parent, ), ;, insertExprResultState, =, oldState, ;, }, private, void, transformElements]
[=, newState, ;, transformElements, (, elements, ,, parent, ), ;, insertExprResultState, =, oldState, ;, }, private, void, transformElements, (, List]
[;, transformElements, (, elements, ,, parent, ), ;, insertExprResultState, =, oldState, ;, }, private, void, transformElements, (, List, <, JsonML]
[;, insertExprResultState, =, oldState, ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ), throws]
[,, parent, ), ;, insertExprResultState, =, oldState, ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node]
[), ;, insertExprResultState, =, oldState, ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, )]
[=, oldState, ;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ), throws, JsonMLException, {]
[;, }, private, void, transformElements, (, List, <, JsonML, >, elements, ,, Node, parent, ), throws, JsonMLException, {, for, (]
[), {, transformElement, (, element, ,, parent, ), ;, }, }, private, boolean, transformExpr, (, JsonML, element, ,, Node, parent]
[;, }, }, private, boolean, transformExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, boolean, result, =, false]
[,, parent, ), ;, }, }, private, boolean, transformExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, boolean]
[), ;, }, }, private, boolean, transformExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, boolean, result, =]
[;, if, (, insertExprResultState, ), {, Node, node, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack]
[), {, Node, node, =, new, Node, (, Token, ., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node]
[), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,]
[., EXPR_RESULT, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (]
[;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;, result]
[., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;]
[), ;, insertExprResultState, =, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;]
[=, false, ;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;, result, =, true]
[;, nodeIndex, --, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;, result, =, true, ;, }]
[;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;, result, =, true, ;, }, return, result, ;]
[--, ;, transformElement, (, element, ,, node, ), ;, insertExprResultState, =, true, ;, result, =, true, ;, }, return, result]
[;, insertExprResultState, =, true, ;, result, =, true, ;, }, return, result, ;, }, private, void, transformForLoop, (, JsonML, element]
[,, node, ), ;, insertExprResultState, =, true, ;, result, =, true, ;, }, return, result, ;, }, private, void, transformForLoop]
[), ;, insertExprResultState, =, true, ;, result, =, true, ;, }, return, result, ;, }, private, void, transformForLoop, (, JsonML]
[=, true, ;, result, =, true, ;, }, return, result, ;, }, private, void, transformForLoop, (, JsonML, element, ,, Node]
[;, result, =, true, ;, }, return, result, ;, }, private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,]
[=, true, ;, }, return, result, ;, }, private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno]
[;, }, return, result, ;, }, private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno, ), throws]
[;, }, private, void, transformForLoop, (, JsonML, element, ,, Node, parent, ,, int, childno, ), throws, JsonMLException, {, Preconditions, .]
[;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;, parent, ., addChildToBack]
[., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;, parent, .]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;, parent, .]
[=, false, ;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;, parent, ., addChildToBack, (, node]
[;, Node, node, =, createNode, (, Token, ., FOR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0]
[., FOR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i]
[;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;, ++, i, ), {, child]
[., addChildToBack, (, node, ), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;]
[), ;, JsonML, child, ;, for, (, int, i, =, 0, ;, i, <, childno, ;, ++, i, ), {]
[;, i, <, childno, ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (]
[;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (]
[<, childno, ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (, child, .]
[;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (]
[), {, child, =, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==, TagType]
[), {, child, =, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==, TagType]
[=, element, ., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||]
[;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType]
[., getChild, (, i, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, .]
[), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==]
[), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement]
[||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR]
[==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node]
[., getType, (, ), ==, TagType, ., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {]
[||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR]
[., EmptyStmt, ||, child, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack]
[), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement]
[==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;]
[., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty]
[), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement]
[., Empty, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else]
[;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,, node]
[++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,]
[;, }, else, {, transformElement, (, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno]
[., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,, node, ), ;]
[), ;, }, else, {, transformElement, (, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (]
[., empty, (, ), ), ;, }, else, {, transformElement, (, child, ,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (]
[;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno, ), ,, node, ), ;, insertExprResultState, =, true, ;, }]
[,, node, ), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno, ), ,, node, ), ;, insertExprResultState, =]
[), ;, }, }, transformPotentiallyUnwrappedBlock, (, element, ., getChild, (, childno, ), ,, node, ), ;, insertExprResultState, =, true, ;]
[;, insertExprResultState, =, true, ;, }, private, void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws]
[,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,, int]
[., getChild, (, childno, ), ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformJumpStmt, (, JsonML, element]
[), ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,, int, type, )]
[=, true, ;, }, private, void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {]
[;, }, private, void, transformJumpStmt, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node]
[;, parent, ., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, .]
[), ;, parent, ., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,]
[;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (, label]
[., addChildToBack, (, node, ), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class]
[), ;, String, label, =, getOptionalAttribute, (, element, ,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (]
[;, if, (, label, !=, null, ), {, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;]
[,, TagAttr, ., LABEL, ,, String, ., class, ), ;, if, (, label, !=, null, ), {, node, ., addChildToBack]
[,, String, ., class, ), ;, if, (, label, !=, null, ), {, node, ., addChildToBack, (, IR, ., labelName]
[., LABEL, ,, String, ., class, ), ;, if, (, label, !=, null, ), {, node, ., addChildToBack, (, IR]
[), ;, if, (, label, !=, null, ), {, node, ., addChildToBack, (, IR, ., labelName, (, label, ), )]
[), {, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, }, }, private, void, transformLogicalExpr, (]
[!=, null, ), {, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, }, }, private, void]
[), {, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, }, }, private, void, transformLogicalExpr, (]
[;, }, }, private, void, transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, transformTwoArgumentExpr]
[., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, }, }, private, void, transformLogicalExpr, (, JsonML, element, ,]
[), ;, }, }, private, void, transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {]
[., labelName, (, label, ), ), ;, }, }, private, void, transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int]
[), ), ;, }, }, private, void, transformLogicalExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException]
[;, }, private, void, transformTwoArgumentExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node, node]
[,, parent, ,, type, ), ;, }, private, void, transformTwoArgumentExpr, (, JsonML, element, ,, Node, parent, ,, int, type, )]
[,, type, ), ;, }, private, void, transformTwoArgumentExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException]
[), ;, }, private, void, transformTwoArgumentExpr, (, JsonML, element, ,, Node, parent, ,, int, type, ), throws, JsonMLException, {, Node]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock]
[;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element]
[), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (, element, ., getType]
[,, node, ), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (]
[), ;, }, private, void, transformPotentiallyUnwrappedBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, if, (, element, .]
[), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, )]
[||, element, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, .]
[==, TagType, ., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node]
[., getType, (, ), ==, TagType, ., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty, ), {]
[||, element, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, .]
[., EmptyStmt, ||, element, ., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =]
[), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, )]
[==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, .]
[., getType, (, ), ==, TagType, ., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (]
[), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, )]
[., Empty, ), {, nodeIndex, ++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (]
[;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, block, ., putBooleanProp]
[++, ;, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, block, .]
[;, parent, ., addChildToBack, (, block, ), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }]
[., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,]
[;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (, element, ., getType, (]
[., addChildToBack, (, block, ), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if]
[), ;, block, ., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (, element, ., getType]
[;, }, else, if, (, element, ., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node, block, =, IR]
[., putBooleanProp, (, Node, ., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (, element, ., getType, (, ), !=]
[,, true, ), ;, }, else, if, (, element, ., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node]
[., EMPTY_BLOCK, ,, true, ), ;, }, else, if, (, element, ., getType, (, ), !=, TagType, ., BlockStmt, )]
[), ;, }, else, if, (, element, ., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node, block, =]
[), {, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state]
[!=, TagType, ., BlockStmt, ), {, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block]
[., getType, (, ), !=, TagType, ., BlockStmt, ), {, Node, block, =, IR, ., block, (, ), ;, parent]
[), {, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state]
[., BlockStmt, ), {, Node, block, =, IR, ., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;]
[;, parent, ., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element]
[., block, (, ), ;, parent, ., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true]
[;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state]
[., addChildToBack, (, block, ), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block]
[), ;, boolean, state, =, insertExprResultState, ;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =]
[;, insertExprResultState, =, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex]
[=, true, ;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;]
[;, transformElement, (, element, ,, block, ), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;, transformBlock, (]
[;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;, transformBlock, (, element, ,, parent, ), ;, }, }]
[,, block, ), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;, transformBlock, (, element, ,, parent, )]
[), ;, insertExprResultState, =, state, ;, }, else, {, nodeIndex, ++, ;, transformBlock, (, element, ,, parent, ), ;, }]
[=, state, ;, }, else, {, nodeIndex, ++, ;, transformBlock, (, element, ,, parent, ), ;, }, }, private, void]
[;, }, else, {, nodeIndex, ++, ;, transformBlock, (, element, ,, parent, ), ;, }, }, private, void, transformArrayExpr, (]
[;, transformBlock, (, element, ,, parent, ), ;, }, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent, )]
[++, ;, transformBlock, (, element, ,, parent, ), ;, }, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent]
[;, }, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[,, parent, ), ;, }, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node]
[), ;, }, }, private, void, transformArrayExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, parent, ., addChildToBack, (, node, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, for, (, JsonML, child, :, element, ., getChildren, (]
[., ARRAYLIT, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, for, (, JsonML, child, :, element, .]
[), ;, parent, ., addChildToBack, (, node, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), )]
[;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (, child, ,, node, ), ;]
[., addChildToBack, (, node, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (]
[), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (, child, ,, node, )]
[), {, transformElement, (, child, ,, node, ), ;, }, }, private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent]
[., getChildren, (, ), ), {, transformElement, (, child, ,, node, ), ;, }, }, private, void, transformAssignExpr, (, JsonML]
[;, }, }, private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute]
[,, node, ), ;, }, }, private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String]
[), ;, }, }, private, void, transformAssignExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =]
[;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;]
[,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,]
[), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, )]
[., OP, ), ;, int, type, =, Operator, ., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,]
[;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent]
[., getNodeTypeForAssignOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;, }, private, void, transformBinaryExpr, (]
[), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node]
[;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (]
[,, parent, ,, type, ), ;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, type, ), ;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op]
[), ;, }, private, void, transformBinaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute]
[;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;]
[,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,]
[), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, )]
[., OP, ), ;, int, type, =, Operator, ., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,]
[;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent]
[., getNodeTypeForBinaryOp, (, op, ), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;, }, private, void, transformBlock, (]
[), ;, transformTwoArgumentExpr, (, element, ,, parent, ,, type, ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node]
[;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (, element, ,, parent]
[,, parent, ,, type, ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, type, ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (]
[), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformBlock, (, element, ,]
[;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {, transformBlock, (]
[,, parent, ,, 0, ,, element, ., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,]
[,, 0, ,, element, ., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent]
[,, element, ., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int]
[), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ), throws, JsonMLException, {, transformBlock]
[., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, )]
[;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ,, int, end, ), throws, JsonMLException]
[,, parent, ,, start, ,, element, ., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,]
[,, start, ,, element, ., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent]
[,, element, ., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int]
[), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ,, int, end, ), throws]
[., childrenSize, (, ), ), ;, }, private, void, transformBlock, (, JsonML, element, ,, Node, parent, ,, int, start, ,]
[;, parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start, ,, end, ), ,, node]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start, ,, end]
[., BLOCK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start, ,, end, ), ,]
[;, transformElements, (, element, ., getChildren, (, start, ,, end, ), ,, node, ,, true, ), ;, }, private, void]
[., addChildToBack, (, node, ), ;, transformElements, (, element, ., getChildren, (, start, ,, end, ), ,, node, ,, true]
[), ;, transformElements, (, element, ., getChildren, (, start, ,, end, ), ,, node, ,, true, ), ;, }, private]
[;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,, parent]
[,, node, ,, true, ), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[., getChildren, (, start, ,, end, ), ,, node, ,, true, ), ;, }, private, void, transformBreakStmt, (, JsonML, element]
[,, end, ), ,, node, ,, true, ), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, )]
[), ,, node, ,, true, ), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[,, true, ), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (]
[), ;, }, private, void, transformBreakStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,]
[;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, parent, ,, Token, ., BREAK, ), ;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws]
[,, Token, ., BREAK, ), ;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[., BREAK, ), ;, }, private, void, transformCallExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, .]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first]
[., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node]
[;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (, first]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, ., getFirstChild, (]
[), ;, transformAllChildren, (, element, ,, node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (]
[;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=, Token, .]
[,, node, ), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, )]
[), ;, Node, first, =, node, ., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=, Token]
[;, if, (, first, ., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token]
[., getFirstChild, (, ), ;, if, (, first, ., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType]
[), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, }, private, void, transformCase, (, JsonML]
[&&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[!=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (]
[., getType, (, ), !=, Token, ., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {]
[&&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,]
[., GETPROP, &&, first, ., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (, Node, .]
[), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, }, private, void, transformCase, (, JsonML]
[!=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, }, private]
[., getType, (, ), !=, Token, ., GETELEM, ), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, )]
[), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, }, private, void, transformCase, (, JsonML]
[., GETELEM, ), {, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, }, private, void, transformCase]
[;, }, }, private, void, transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, }, }, private, void, transformCase, (, JsonML, element, ,, Node]
[,, true, ), ;, }, }, private, void, transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node]
[., FREE_CALL, ,, true, ), ;, }, }, private, void, transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[), ;, }, }, private, void, transformCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., CASE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node]
[;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (]
[), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, .]
[;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack]
[,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;]
[), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, .]
[;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,, block]
[., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex]
[;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,, block, ,, 1, ,, true, ), ;, }]
[., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,, block, ,, 1]
[), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,, block, ,, 1, ,, true, ), ;]
[;, transformAllChildrenFromIndex, (, element, ,, block, ,, 1, ,, true, ), ;, }, private, void, transformCatchClause, (, JsonML, element, ,]
[., addChildToBack, (, block, ), ;, transformAllChildrenFromIndex, (, element, ,, block, ,, 1, ,, true, ), ;, }, private, void]
[), ;, transformAllChildrenFromIndex, (, element, ,, block, ,, 1, ,, true, ), ;, }, private, void, transformCatchClause, (, JsonML, element]
[;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, block, ,, 1, ,, true, ), ;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws]
[,, 1, ,, true, ), ;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, true, ), ;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[), ;, }, private, void, transformCatchClause, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., CATCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child]
[;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (]
[;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private, void]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private]
[=, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private, void, transformConditionalExpr, (]
[;, transformElement, (, child, ,, node, ), ;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws]
[., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private, void, transformConditionalExpr, (, JsonML, element]
[), ;, transformElement, (, child, ,, node, ), ;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, node, ), ;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[), ;, }, private, void, transformConditionalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformContinueStmt, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private]
[., HOOK, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformContinueStmt]
[;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformContinueStmt, (, JsonML, element]
[), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,, parent]
[,, node, ), ;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (]
[), ;, }, private, void, transformContinueStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformJumpStmt, (, element, ,]
[;, }, private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (]
[,, parent, ,, Token, ., CONTINUE, ), ;, }, private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws]
[,, Token, ., CONTINUE, ), ;, }, private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute]
[., CONTINUE, ), ;, }, private, void, transformCountExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op]
[;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (, element, ,, TagAttr, .]
[,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute]
[), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (, element, ,, TagAttr]
[., OP, ), ;, int, type, =, Operator, ., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (, element]
[;, Boolean, isPrefix, =, getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =]
[., getNodeTypeForCountOp, (, op, ), ;, Boolean, isPrefix, =, getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class]
[), ;, Boolean, isPrefix, =, getAttribute, (, element, ,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node]
[;, Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix]
[,, TagAttr, ., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;]
[,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (]
[., IS_PREFIX, ,, Boolean, ., class, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;, node, .]
[), ;, Node, node, =, createNode, (, type, ,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,]
[;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (]
[,, element, ), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent]
[), ;, node, ., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack]
[;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[., putIntProp, (, Node, ., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, )]
[,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild]
[., INCRDECR_PROP, ,, isPrefix, ?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[?, 0, :, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0]
[:, 1, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDataProp, (, JsonML, element]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private]
[), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDataProp, (, JsonML]
[;, }, private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute, (]
[,, node, ), ;, }, private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name]
[., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDataProp, (, JsonML, element, ,, Node, parent, )]
[), ,, node, ), ;, }, private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object]
[), ;, }, private, void, transformDataProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name, =, getObjectAttribute]
[;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (, getStringValue]
[,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =]
[), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (]
[., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, node, =, IR, .]
[;, if, (, name, instanceof, Number, ), {, node, =, IR, ., stringKey, (, getStringValue, (, (, (, Number, )]
[), {, node, =, IR, ., stringKey, (, getStringValue, (, (, (, Number, ), name, ), ., doubleValue, (, )]
[instanceof, Number, ), {, node, =, IR, ., stringKey, (, getStringValue, (, (, (, Number, ), name, ), ., doubleValue]
[=, IR, ., stringKey, (, getStringValue, (, (, (, Number, ), name, ), ., doubleValue, (, ), ), ), ;]
[;, }, else, if, (, name, instanceof, String, ), {, node, =, IR, ., stringKey, (, (, String, ), name]
[., stringKey, (, getStringValue, (, (, (, Number, ), name, ), ., doubleValue, (, ), ), ), ;, }, else]
[), ;, }, else, if, (, name, instanceof, String, ), {, node, =, IR, ., stringKey, (, (, String, )]
[), ), ;, }, else, if, (, name, instanceof, String, ), {, node, =, IR, ., stringKey, (, (, String]
[., doubleValue, (, ), ), ), ;, }, else, if, (, name, instanceof, String, ), {, node, =, IR, .]
[), ., doubleValue, (, ), ), ), ;, }, else, if, (, name, instanceof, String, ), {, node, =, IR]
[), ., doubleValue, (, ), ), ), ;, }, else, if, (, name, instanceof, String, ), {, node, =, IR]
[), {, node, =, IR, ., stringKey, (, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException]
[instanceof, String, ), {, node, =, IR, ., stringKey, (, (, String, ), name, ), ;, }, else, {, throw]
[=, IR, ., stringKey, (, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", )]
[;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack]
[., stringKey, (, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }]
[), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, .]
[), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, .]
[;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild]
[;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, static, String, getStringValue, (, double]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private]
[), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, static, String, getStringValue, (]
[;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;, if]
[,, node, ), ;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, )]
[., getChild, (, 0, ), ,, node, ), ;, }, private, static, String, getStringValue, (, double, value, ), {, long]
[), ,, node, ), ;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long]
[), ;, }, private, static, String, getStringValue, (, double, value, ), {, long, longValue, =, (, long, ), value, ;]
[;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return]
[;, if, (, longValue, ==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return]
[), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return, Double, ., toString, (, value, )]
[==, value, ), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return, Double, ., toString, (]
[), {, return, Long, ., toString, (, longValue, ), ;, }, else, {, return, Double, ., toString, (, value, )]
[;, }, else, {, return, Double, ., toString, (, value, ), ;, }, }, private, void, transformGetterProp, (, JsonML, element]
[., toString, (, longValue, ), ;, }, else, {, return, Double, ., toString, (, value, ), ;, }, }, private]
[), ;, }, else, {, return, Double, ., toString, (, value, ), ;, }, }, private, void, transformGetterProp, (, JsonML]
[;, }, }, private, void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token, .]
[., toString, (, value, ), ;, }, }, private, void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[), ;, }, }, private, void, transformGetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token]
[;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token, ., SETTER_DEF]
[,, element, ,, parent, ), ;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[., GETTER_DEF, ,, element, ,, parent, ), ;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws]
[,, parent, ), ;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (]
[), ;, }, private, void, transformSetterProp, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformProp, (, Token, .]
[;, }, private, void, transformProp, (, int, tokenType, ,, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object, name]
[,, element, ,, parent, ), ;, }, private, void, transformProp, (, int, tokenType, ,, JsonML, element, ,, Node, parent, )]
[., SETTER_DEF, ,, element, ,, parent, ), ;, }, private, void, transformProp, (, int, tokenType, ,, JsonML, element, ,, Node]
[,, parent, ), ;, }, private, void, transformProp, (, int, tokenType, ,, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[), ;, }, private, void, transformProp, (, int, tokenType, ,, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Object]
[;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;]
[,, TagAttr, ., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, throw, new]
[), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, throw, new, IllegalStateException, (, "Not yet supported.", )]
[., NAME, ), ;, Node, node, =, null, ;, if, (, name, instanceof, Number, ), {, throw, new, IllegalStateException, (]
[;, if, (, name, instanceof, Number, ), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (, name]
[), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (, name, instanceof, String, ), {, node, =]
[instanceof, Number, ), {, throw, new, IllegalStateException, (, "Not yet supported.", ), ;, }, else, if, (, name, instanceof, String, ), {]
[;, }, else, if, (, name, instanceof, String, ), {, node, =, Node, ., newString, (, tokenType, ,, (, String]
[), ;, }, else, if, (, name, instanceof, String, ), {, node, =, Node, ., newString, (, tokenType, ,, (]
[), {, node, =, Node, ., newString, (, tokenType, ,, (, String, ), name, ), ;, }, else, {, throw]
[instanceof, String, ), {, node, =, Node, ., newString, (, tokenType, ,, (, String, ), name, ), ;, }, else]
[=, Node, ., newString, (, tokenType, ,, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (]
[;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack]
[., newString, (, tokenType, ,, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", )]
[,, (, String, ), name, ), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (]
[), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, .]
[), ;, }, else, {, throw, new, IllegalStateException, (, "The name of the property has invalid type.", ), ;, }, setPosition, (, node, ), ;, parent, .]
[;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (]
[), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild]
[;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDefaultCase, (, JsonML, element]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private]
[), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDefaultCase, (, JsonML]
[;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, node, ), ;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, )]
[), ,, node, ), ;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node]
[), ;, }, private, void, transformDefaultCase, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (, ), ;]
[., DEFAULT_CASE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, .]
[;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack]
[., addChildToBack, (, node, ), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true]
[), ;, Node, block, =, IR, ., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, .]
[;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildren, (, element, ,, block]
[., block, (, ), ;, block, ., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildren]
[;, node, ., addChildToBack, (, block, ), ;, transformAllChildren, (, element, ,, block, ,, true, ), ;, }, private, void]
[., setIsSyntheticBlock, (, true, ), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildren, (, element, ,, block, ,, true]
[), ;, node, ., addChildToBack, (, block, ), ;, transformAllChildren, (, element, ,, block, ,, true, ), ;, }, private]
[;, transformAllChildren, (, element, ,, block, ,, true, ), ;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent]
[., addChildToBack, (, block, ), ;, transformAllChildren, (, element, ,, block, ,, true, ), ;, }, private, void, transformDeleteExpr, (]
[), ;, transformAllChildren, (, element, ,, block, ,, true, ), ;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node]
[;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, block, ,, true, ), ;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, true, ), ;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[), ;, }, private, void, transformDeleteExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[., DELPROP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDoWhileStmt, (, JsonML, element]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private]
[), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDoWhileStmt, (, JsonML]
[;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState]
[,, node, ), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, .]
[., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, )]
[), ,, node, ), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions]
[), ;, }, private, void, transformDoWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;, parent, ., addChildToBack]
[., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;, parent, .]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;, parent, .]
[=, false, ;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;, parent, ., addChildToBack, (, node]
[;, Node, node, =, createNode, (, Token, ., DO, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., DO, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child]
[;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child]
[., getChild, (, 0, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (]
[;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, insertExprResultState, =, true]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, insertExprResultState, =]
[=, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }]
[;, transformElement, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformEmpty, (, JsonML, element, ,]
[., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void]
[), ;, transformElement, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformEmpty, (, JsonML, element]
[;, insertExprResultState, =, true, ;, }, private, void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (, parent]
[,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (]
[=, true, ;, }, private, void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (, parent, ., getType]
[;, }, private, void, transformEmpty, (, JsonML, element, ,, Node, parent, ), {, switch, (, parent, ., getType, (, )]
[), {, case, Token, ., ARRAYLIT, :, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;]
[., getType, (, ), ), {, case, Token, ., ARRAYLIT, :, parent, ., addChildToBack, (, IR, ., empty, (, )]
[:, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, parent]
[., ARRAYLIT, :, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION]
[;, break, ;, case, Token, ., FUNCTION, :, parent, ., addChildToBack, (, IR, ., name, (, "", ), ), ;]
[., addChildToBack, (, IR, ., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, parent, ., addChildToBack]
[), ;, break, ;, case, Token, ., FUNCTION, :, parent, ., addChildToBack, (, IR, ., name, (, "", ), )]
[., empty, (, ), ), ;, break, ;, case, Token, ., FUNCTION, :, parent, ., addChildToBack, (, IR, ., name]
[:, parent, ., addChildToBack, (, IR, ., name, (, "", ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException]
[., FUNCTION, :, parent, ., addChildToBack, (, IR, ., name, (, "", ), ), ;, break, ;, default, :, throw]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element]
[., addChildToBack, (, IR, ., name, (, "", ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unexpected Empty element."]
[), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (, JsonML]
[., name, (, "", ), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unexpected Empty element.", ), ;, }, }]
[), ), ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "Unexpected Empty element.", ), ;, }, }, private, void, transformEmptyStmt, (]
[;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (, parent, .]
[), ;, }, }, private, void, transformEmptyStmt, (, JsonML, element, ,, Node, parent, ), {, Preconditions, ., checkState, (, parent]
[;, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, private, void, transformEvalExpr, (, JsonML, element, ,]
[., checkState, (, parent, ., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token]
[), ;, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, private, void, transformEvalExpr, (, JsonML, element]
[||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (, IR, ., empty, (]
[==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (]
[., getType, (, ), ==, Token, ., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;]
[||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (, IR, ., empty, (]
[., BLOCK, ||, parent, ., getType, (, ), ==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (, IR, .]
[), ;, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, private, void, transformEvalExpr, (, JsonML, element]
[==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, private, void]
[., getType, (, ), ==, Token, ., SCRIPT, ), ;, parent, ., addChildToBack, (, IR, ., empty, (, ), )]
[), ;, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, private, void, transformEvalExpr, (, JsonML, element]
[., SCRIPT, ), ;, parent, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, private, void, transformEvalExpr, (]
[;, }, private, void, transformEvalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[., addChildToBack, (, IR, ., empty, (, ), ), ;, }, private, void, transformEvalExpr, (, JsonML, element, ,, Node, parent]
[), ;, }, private, void, transformEvalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[., empty, (, ), ), ;, }, private, void, transformEvalExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node]
[,, element, ), ;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node]
[., CALL, ,, element, ), ;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack]
[), ;, node, ., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", ), ;, child, .]
[., putBooleanProp, (, Node, ., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =]
[,, true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", )]
[., FREE_CALL, ,, true, ), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", ), ;, child]
[;, Node, child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true]
[., addChildToBack, (, node, ), ;, Node, child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (]
[), ;, Node, child, =, IR, ., name, (, "eval", ), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,]
[;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (, child, ), ;, transformAllChildren]
[., name, (, "eval", ), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack]
[), ;, child, ., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (, child, ), ;]
[;, node, ., addChildToBack, (, child, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformForInStmt, (]
[., putBooleanProp, (, Node, ., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (, child, ), ;, transformAllChildren, (, element]
[,, true, ), ;, node, ., addChildToBack, (, child, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private]
[., DIRECT_EVAL, ,, true, ), ;, node, ., addChildToBack, (, child, ), ;, transformAllChildren, (, element, ,, node, ), ;]
[), ;, node, ., addChildToBack, (, child, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformForInStmt]
[;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws]
[., addChildToBack, (, child, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformForInStmt, (, JsonML, element]
[), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,, parent]
[,, node, ), ;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (]
[), ;, }, private, void, transformForInStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,]
[;, }, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,, parent]
[,, parent, ,, 2, ), ;, }, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, 2, ), ;, }, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (]
[), ;, }, private, void, transformForStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformForLoop, (, element, ,]
[;, }, private, void, transformFunction, (, JsonML, element, ,, Node, parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node, node]
[,, parent, ,, 3, ), ;, }, private, void, transformFunction, (, JsonML, element, ,, Node, parent, ,, boolean, needsName, )]
[,, 3, ), ;, }, private, void, transformFunction, (, JsonML, element, ,, Node, parent, ,, boolean, needsName, ), throws, JsonMLException]
[), ;, }, private, void, transformFunction, (, JsonML, element, ,, Node, parent, ,, boolean, needsName, ), throws, JsonMLException, {, Node]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., FUNCTION, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name, =, "", ;, transformElement, (, element, .]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name, =, ""]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, String, name, =, "", ;, transformElement, (, element]
[;, String, name, =, "", ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (]
[., getChild, (, 0, ), ;, String, name, =, "", ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[), ;, String, name, =, "", ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1]
[;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, transformBlock, (, element, ,, node, ,, 2]
[,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, transformBlock, (, element, ,]
[., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, )]
[), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, transformBlock, (, element]
[), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, transformBlock, (, element, ,, node, ,]
[;, transformBlock, (, element, ,, node, ,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent]
[,, node, ), ;, transformBlock, (, element, ,, node, ,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML, element]
[., getChild, (, 1, ), ,, node, ), ;, transformBlock, (, element, ,, node, ,, 2, ), ;, }, private]
[), ,, node, ), ;, transformBlock, (, element, ,, node, ,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML]
[), ;, transformBlock, (, element, ,, node, ,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node]
[;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,, parent]
[,, node, ,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, 2, ), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (]
[), ;, }, private, void, transformFunctionDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,]
[;, }, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,, parent]
[,, parent, ,, true, ), ;, }, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, true, ), ;, }, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (]
[), ;, }, private, void, transformFunctionExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformFunction, (, element, ,]
[;, }, private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, name, =, getStringAttribute, (]
[,, parent, ,, false, ), ;, }, private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, false, ), ;, }, private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, name]
[), ;, }, private, void, transformIdExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, name, =, getStringAttribute]
[;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[,, TagAttr, ., NAME, ), ;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (, node, )]
[), ;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack]
[., NAME, ), ;, Node, node, =, IR, ., name, (, name, ), ;, setPosition, (, node, ), ;, parent]
[;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformInitPatt, (, JsonML, element]
[., name, (, name, ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private]
[), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformInitPatt, (, JsonML]
[;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, ), throws]
[), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, JsonML, child, =, element, .]
[., addChildToBack, (, node, ), ;, }, private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformInitPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, JsonML, child, =, element]
[;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String]
[., getChild, (, 0, ), ;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,]
[), ;, nodeIndex, ++, ;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,]
[;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, )]
[++, ;, Node, node, =, IR, ., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class]
[;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (, 1]
[., name, (, getAttribute, (, child, ,, TagAttr, ., NAME, ,, String, ., class, ), ), ;, setPosition, (, node]
[), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (]
[,, TagAttr, ., NAME, ,, String, ., class, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (]
[,, String, ., class, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child]
[., NAME, ,, String, ., class, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, )]
[), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild]
[;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child]
[), ;, parent, ., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (]
[;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private, void]
[., addChildToBack, (, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private]
[=, element, ., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private, void, transformIdPatt, (]
[;, transformElement, (, child, ,, node, ), ;, }, private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws]
[., getChild, (, 1, ), ;, transformElement, (, child, ,, node, ), ;, }, private, void, transformIdPatt, (, JsonML, element]
[), ;, transformElement, (, child, ,, node, ), ;, }, private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, IR, .]
[,, node, ), ;, }, private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[), ;, }, private, void, transformIdPatt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, IR]
[;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (, JsonML, element]
[., name, (, getStringAttribute, (, element, ,, TagAttr, ., NAME, ), ), ;, setPosition, (, node, ), ;, parent, .]
[), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (, JsonML]
[,, TagAttr, ., NAME, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }]
[), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (]
[., NAME, ), ), ;, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void]
[;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws]
[), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState]
[., addChildToBack, (, node, ), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformIfStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;, parent, ., addChildToBack]
[., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;, parent, .]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;, parent, .]
[=, false, ;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;, parent, ., addChildToBack, (, node]
[;, Node, node, =, createNode, (, Token, ., IF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., IF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child]
[;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (]
[;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =]
[=, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild]
[;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (, child]
[., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 2]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (]
[;, child, =, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=, TagType, .]
[,, node, ), ;, child, =, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, )]
[), ;, child, =, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=, TagType]
[=, element, ., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&]
[;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=, TagType]
[., getChild, (, 2, ), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, .]
[), ;, if, (, child, ., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=]
[), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =, true, ;]
[&&, child, ., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }]
[!=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,]
[., getType, (, ), !=, TagType, ., EmptyStmt, &&, child, ., getType, (, ), !=, TagType, ., Empty, ), {]
[&&, child, ., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }]
[., EmptyStmt, &&, child, ., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, )]
[), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =, true, ;]
[!=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {, nodeIndex, ++, ;, }]
[., getType, (, ), !=, TagType, ., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {]
[), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =, true, ;]
[., Empty, ), {, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =]
[;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =, true, ;, }, private, void, transformInvokeExpr, (, JsonML, element, ,]
[,, node, ), ;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =, true, ;, }, private, void, transformInvokeExpr, (]
[), ;, }, else, {, nodeIndex, ++, ;, }, insertExprResultState, =, true, ;, }, private, void, transformInvokeExpr, (, JsonML, element]
[;, }, insertExprResultState, =, true, ;, }, private, void, transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[++, ;, }, insertExprResultState, =, true, ;, }, private, void, transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[=, true, ;, }, private, void, transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, }, private, void, transformInvokeExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, ., getChildren]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (]
[., CALL, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, .]
[;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, ., getChildren, (, 2, ,, element, ., childrenSize, (]
[., addChildToBack, (, node, ), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, ., getChildren, (, 2]
[), ;, transformMemberExpr, (, element, ,, node, ), ;, transformElements, (, element, ., getChildren, (, 2, ,, element, ., childrenSize]
[;, transformElements, (, element, ., getChildren, (, 2, ,, element, ., childrenSize, (, ), ), ,, node, ), ;, }]
[,, node, ), ;, transformElements, (, element, ., getChildren, (, 2, ,, element, ., childrenSize, (, ), ), ,, node]
[), ;, transformElements, (, element, ., getChildren, (, 2, ,, element, ., childrenSize, (, ), ), ,, node, ), ;]
[;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, label, =, getStringAttribute, (]
[,, node, ), ;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, label]
[., getChildren, (, 2, ,, element, ., childrenSize, (, ), ), ,, node, ), ;, }, private, void, transformLabelledStmt, (]
[,, element, ., childrenSize, (, ), ), ,, node, ), ;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node]
[), ,, node, ), ;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String]
[., childrenSize, (, ), ), ,, node, ), ;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, )]
[), ;, }, private, void, transformLabelledStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, label, =, getStringAttribute]
[;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (, IR, ., labelName]
[,, TagAttr, ., LABEL, ), ;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;, node, .]
[), ;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (, IR, .]
[., LABEL, ), ;, Node, node, =, createNode, (, Token, ., LABEL, ,, element, ), ;, node, ., addChildToBack, (]
[;, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, ., addChildToBack, (, node, ), ;]
[,, element, ), ;, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, ., addChildToBack, (]
[., LABEL, ,, element, ), ;, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, .]
[), ;, node, ., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, ., addChildToBack, (, node, )]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (]
[., addChildToBack, (, IR, ., labelName, (, label, ), ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if]
[., labelName, (, label, ), ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild]
[), ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (, child, ., getType, (, ), ==, TagType]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (, child, .]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, if, (, child, ., getType, (, ), ==]
[;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;, node, ., addChildToBack]
[., getChild, (, 0, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex]
[), ;, if, (, child, ., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;, node, .]
[), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement]
[==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;]
[., getType, (, ), ==, TagType, ., EmptyStmt, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty]
[), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement]
[., EmptyStmt, ), {, nodeIndex, ++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else]
[;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, element, ., getChild]
[++, ;, node, ., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, element, .]
[;, }, else, {, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, }, private, void]
[., addChildToBack, (, IR, ., empty, (, ), ), ;, }, else, {, transformElement, (, element, ., getChild, (, 0]
[), ;, }, else, {, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, }, private]
[., empty, (, ), ), ;, }, else, {, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[;, }, }, private, void, transformLiteralExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, null]
[,, node, ), ;, }, }, private, void, transformLiteralExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node]
[., getChild, (, 0, ), ,, node, ), ;, }, }, private, void, transformLiteralExpr, (, JsonML, element, ,, Node, parent]
[), ,, node, ), ;, }, }, private, void, transformLiteralExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, }, private, void, transformLiteralExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, Type, type, =, Type, ., get, (, getStringAttribute, (, element, ,, TagAttr, ., TYPE, ), ), ;, switch, (]
[;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE]
[., get, (, getStringAttribute, (, element, ,, TagAttr, ., TYPE, ), ), ;, switch, (, type, ), {, case, BOOLEAN]
[), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element, ,, TagAttr, .]
[,, TagAttr, ., TYPE, ), ), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute]
[), ), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element, ,, TagAttr]
[., TYPE, ), ), ;, switch, (, type, ), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element]
[), {, case, BOOLEAN, :, {, Boolean, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Boolean, ., class]
[:, {, Boolean, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Boolean, ., class, ), ;, if, (]
[;, if, (, value, ), {, node, =, IR, ., trueNode, (, ), ;, }, else, {, node, =, IR]
[,, TagAttr, ., VALUE, ,, Boolean, ., class, ), ;, if, (, value, ), {, node, =, IR, ., trueNode]
[,, Boolean, ., class, ), ;, if, (, value, ), {, node, =, IR, ., trueNode, (, ), ;, }]
[., VALUE, ,, Boolean, ., class, ), ;, if, (, value, ), {, node, =, IR, ., trueNode, (, )]
[), ;, if, (, value, ), {, node, =, IR, ., trueNode, (, ), ;, }, else, {, node, =]
[), {, node, =, IR, ., trueNode, (, ), ;, }, else, {, node, =, IR, ., falseNode, (, )]
[=, IR, ., trueNode, (, ), ;, }, else, {, node, =, IR, ., falseNode, (, ), ;, }, break]
[;, }, else, {, node, =, IR, ., falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {]
[., trueNode, (, ), ;, }, else, {, node, =, IR, ., falseNode, (, ), ;, }, break, ;, }]
[=, IR, ., falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {, getAttribute, (, element, ,, TagAttr]
[;, }, break, ;, }, case, NULL, :, {, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, null, ), ;]
[., falseNode, (, ), ;, }, break, ;, }, case, NULL, :, {, getAttribute, (, element, ,, TagAttr, ., VALUE]
[:, {, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, null, ), ;, node, =, IR, ., nullNode, (, )]
[;, node, =, IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute]
[,, TagAttr, ., VALUE, ,, null, ), ;, node, =, IR, ., nullNode, (, ), ;, break, ;, }, case]
[,, null, ), ;, node, =, IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double]
[., VALUE, ,, null, ), ;, node, =, IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :]
[), ;, node, =, IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =]
[=, IR, ., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute, (, element]
[;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Double]
[., nullNode, (, ), ;, break, ;, }, case, NUMBER, :, {, Double, value, =, getAttribute, (, element, ,, TagAttr]
[:, {, Double, value, =, getAttribute, (, element, ,, TagAttr, ., VALUE, ,, Double, ., class, ), ;, node, =]
[;, node, =, IR, ., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value, =]
[,, TagAttr, ., VALUE, ,, Double, ., class, ), ;, node, =, IR, ., number, (, value, ), ;, break]
[,, Double, ., class, ), ;, node, =, IR, ., number, (, value, ), ;, break, ;, }, case, STRING]
[., VALUE, ,, Double, ., class, ), ;, node, =, IR, ., number, (, value, ), ;, break, ;, }]
[), ;, node, =, IR, ., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value]
[=, IR, ., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (]
[;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,, TagAttr, ., VALUE, ), ;]
[., number, (, value, ), ;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,]
[), ;, break, ;, }, case, STRING, :, {, String, value, =, getStringAttribute, (, element, ,, TagAttr, ., VALUE, )]
[:, {, String, value, =, getStringAttribute, (, element, ,, TagAttr, ., VALUE, ), ;, node, =, IR, ., string, (]
[;, node, =, IR, ., string, (, value, ), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute."]
[,, TagAttr, ., VALUE, ), ;, node, =, IR, ., string, (, value, ), ;, break, ;, }, default, :]
[), ;, node, =, IR, ., string, (, value, ), ;, break, ;, }, default, :, throw, new, JsonMLException, (]
[., VALUE, ), ;, node, =, IR, ., string, (, value, ), ;, break, ;, }, default, :, throw, new]
[=, IR, ., string, (, value, ), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;]
[;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }, setPosition, (, node, ), ;, parent]
[., string, (, value, ), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }, setPosition]
[), ;, break, ;, }, default, :, throw, new, JsonMLException, (, "Unrecognized type attribute.", ), ;, }, setPosition, (, node, ), ;]
[;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformLogicalAndExpr, (, JsonML]
[), ;, }, setPosition, (, node, ), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformLogicalAndExpr, (]
[;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws]
[), ;, parent, ., addChildToBack, (, node, ), ;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,, parent]
[., addChildToBack, (, node, ), ;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformLogicalAndExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,]
[;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,, parent]
[,, parent, ,, Token, ., AND, ), ;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws]
[,, Token, ., AND, ), ;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (, element, ,]
[., AND, ), ;, }, private, void, transformLogicalOrExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, transformLogicalExpr, (]
[;, }, private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getAttribute, (]
[,, parent, ,, Token, ., OR, ), ;, }, private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws]
[,, Token, ., OR, ), ;, }, private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[), ;, }, private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getAttribute]
[., OR, ), ;, }, private, void, transformMemberExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op]
[;, int, type, ;, if, (, op, ., equals, (, ".", ), ), {, type, =, Token, ., GETPROP, ;]
[,, TagAttr, ., OP, ,, String, ., class, ), ;, int, type, ;, if, (, op, ., equals, (, "."]
[,, String, ., class, ), ;, int, type, ;, if, (, op, ., equals, (, ".", ), ), {, type]
[., OP, ,, String, ., class, ), ;, int, type, ;, if, (, op, ., equals, (, ".", ), )]
[), ;, int, type, ;, if, (, op, ., equals, (, ".", ), ), {, type, =, Token, ., GETPROP]
[), {, type, =, Token, ., GETPROP, ;, }, else, if, (, op, ., equals, (, "[]", ), ), {]
[., equals, (, ".", ), ), {, type, =, Token, ., GETPROP, ;, }, else, if, (, op, ., equals]
[), ), {, type, =, Token, ., GETPROP, ;, }, else, if, (, op, ., equals, (, "[]", ), )]
[=, Token, ., GETPROP, ;, }, else, if, (, op, ., equals, (, "[]", ), ), {, type, =, Token]
[;, }, else, if, (, op, ., equals, (, "[]", ), ), {, type, =, Token, ., GETELEM, ;, }]
[., GETPROP, ;, }, else, if, (, op, ., equals, (, "[]", ), ), {, type, =, Token, ., GETELEM]
[), {, type, =, Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;]
[., equals, (, "[]", ), ), {, type, =, Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (]
[), ), {, type, =, Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, )]
[=, Token, ., GETELEM, ;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node]
[;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node, =, createNode, (, type]
[., GETELEM, ;, }, else, {, throw, new, JsonMLException, (, "Invalid OP argument: ", +, op, ), ;, }, Node, node, =, createNode]
[;, }, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement]
[), ;, }, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[+, op, ), ;, }, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node]
[), ;, }, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (]
[), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (]
[;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, }, private, void, transformNewExpr, (, JsonML, element]
[,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, }, private, void, transformNewExpr]
[., getChild, (, 0, ), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, )]
[), ,, node, ), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, }, private, void]
[), ;, transformElement, (, element, ., getChild, (, 1, ), ,, node, ), ;, }, private, void, transformNewExpr, (, JsonML]
[;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, node, ), ;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[., getChild, (, 1, ), ,, node, ), ;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, )]
[), ,, node, ), ;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node]
[), ;, }, private, void, transformNewExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformObjectExpr, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private]
[., NEW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformObjectExpr]
[;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformObjectExpr, (, JsonML, element]
[), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, node, ), ;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[), ;, }, private, void, transformObjectExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformParamDecl, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private]
[., OBJECTLIT, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformParamDecl]
[;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformParamDecl, (, JsonML, element]
[), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, node, ), ;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[), ;, }, private, void, transformParamDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformProgram, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private]
[., PARAM_LIST, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformProgram]
[;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformProgram, (, JsonML, element]
[), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkNotNull, (, parent]
[,, node, ), ;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, .]
[), ;, }, private, void, transformProgram, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkNotNull, (]
[;, insertExprResultState, =, true, ;, Node, script, =, IR, ., script, (, ), ;, parent, ., addChildToBack, (, script, )]
[., checkNotNull, (, parent, ), ;, insertExprResultState, =, true, ;, Node, script, =, IR, ., script, (, ), ;, parent]
[), ;, insertExprResultState, =, true, ;, Node, script, =, IR, ., script, (, ), ;, parent, ., addChildToBack, (, script]
[=, true, ;, Node, script, =, IR, ., script, (, ), ;, parent, ., addChildToBack, (, script, ), ;, for]
[;, Node, script, =, IR, ., script, (, ), ;, parent, ., addChildToBack, (, script, ), ;, for, (, JsonML]
[;, parent, ., addChildToBack, (, script, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {]
[., script, (, ), ;, parent, ., addChildToBack, (, script, ), ;, for, (, JsonML, child, :, element, ., getChildren]
[;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (, child, ,, script, ), ;]
[., addChildToBack, (, script, ), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (]
[), ;, for, (, JsonML, child, :, element, ., getChildren, (, ), ), {, transformElement, (, child, ,, script, )]
[), {, transformElement, (, child, ,, script, ), ;, }, }, private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent]
[., getChildren, (, ), ), {, transformElement, (, child, ,, script, ), ;, }, }, private, void, transformPrologueDecl, (, JsonML]
[;, }, }, private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, directive, =, getStringAttribute]
[,, script, ), ;, }, }, private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String]
[), ;, }, }, private, void, transformPrologueDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, directive, =]
[;, if, (, ALLOWED_DIRECTIVES, ., contains, (, directive, ), ), {, Set, <, String, >, directives, =, parent, ., getDirectives]
[,, TagAttr, ., DIRECTIVE, ), ;, if, (, ALLOWED_DIRECTIVES, ., contains, (, directive, ), ), {, Set, <, String, >]
[), ;, if, (, ALLOWED_DIRECTIVES, ., contains, (, directive, ), ), {, Set, <, String, >, directives, =, parent, .]
[., DIRECTIVE, ), ;, if, (, ALLOWED_DIRECTIVES, ., contains, (, directive, ), ), {, Set, <, String, >, directives, =]
[), {, Set, <, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (, directives, ==, null, )]
[., contains, (, directive, ), ), {, Set, <, String, >, directives, =, parent, ., getDirectives, (, ), ;, if]
[), ), {, Set, <, String, >, directives, =, parent, ., getDirectives, (, ), ;, if, (, directives, ==, null]
[;, if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add]
[., getDirectives, (, ), ;, if, (, directives, ==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;]
[), {, directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;, parent, .]
[==, null, ), {, directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;]
[), {, directives, =, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;, parent, .]
[=, Sets, ., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;, parent, ., setDirectives, (, directives]
[;, }, directives, ., add, (, directive, ), ;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node]
[., newHashSet, (, ), ;, }, directives, ., add, (, directive, ), ;, parent, ., setDirectives, (, directives, ), ;]
[;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node, node, =, IR, ., exprResult, (, IR, .]
[., add, (, directive, ), ;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node, node, =, IR]
[), ;, parent, ., setDirectives, (, directives, ), ;, }, else, {, Node, node, =, IR, ., exprResult, (, IR]
[;, }, else, {, Node, node, =, IR, ., exprResult, (, IR, ., string, (, directive, ), ), ;, parent]
[., setDirectives, (, directives, ), ;, }, else, {, Node, node, =, IR, ., exprResult, (, IR, ., string, (]
[), ;, }, else, {, Node, node, =, IR, ., exprResult, (, IR, ., string, (, directive, ), ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, }, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent, )]
[., exprResult, (, IR, ., string, (, directive, ), ), ;, parent, ., addChildToBack, (, node, ), ;, }, }]
[), ;, parent, ., addChildToBack, (, node, ), ;, }, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent]
[., string, (, directive, ), ), ;, parent, ., addChildToBack, (, node, ), ;, }, }, private, void, transformRegExpExpr, (]
[), ), ;, parent, ., addChildToBack, (, node, ), ;, }, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node]
[;, }, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[., addChildToBack, (, node, ), ;, }, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[), ;, }, }, private, void, transformRegExpExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, .]
[., REGEXP, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,]
[), ;, parent, ., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, )]
[;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;, node, ., addChildToBack, (, IR, ., string]
[., addChildToBack, (, node, ), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;, node, .]
[), ;, String, body, =, getStringAttribute, (, element, ,, TagAttr, ., BODY, ), ;, node, ., addChildToBack, (, IR, .]
[;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,]
[,, TagAttr, ., BODY, ), ;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags]
[), ;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =, getStringAttribute, (, element]
[., BODY, ), ;, node, ., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =, getStringAttribute]
[;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (, flags, ., equals]
[., addChildToBack, (, IR, ., string, (, body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, .]
[), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (, flags, .]
[., string, (, body, ), ), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if]
[), ), ;, String, flags, =, getStringAttribute, (, element, ,, TagAttr, ., FLAGS, ), ;, if, (, !, (, flags]
[;, if, (, !, (, flags, ., equals, (, "", ), ), ), {, node, ., addChildToBack, (, IR, .]
[,, TagAttr, ., FLAGS, ), ;, if, (, !, (, flags, ., equals, (, "", ), ), ), {, node]
[), ;, if, (, !, (, flags, ., equals, (, "", ), ), ), {, node, ., addChildToBack, (, IR]
[., FLAGS, ), ;, if, (, !, (, flags, ., equals, (, "", ), ), ), {, node, ., addChildToBack]
[), {, node, ., addChildToBack, (, IR, ., string, (, flags, ), ), ;, }, }, private, void, transformReturnStmt, (]
[), {, node, ., addChildToBack, (, IR, ., string, (, flags, ), ), ;, }, }, private, void, transformReturnStmt, (]
[), ), {, node, ., addChildToBack, (, IR, ., string, (, flags, ), ), ;, }, }, private, void, transformReturnStmt]
[., equals, (, "", ), ), ), {, node, ., addChildToBack, (, IR, ., string, (, flags, ), ), ;]
[), ), ), {, node, ., addChildToBack, (, IR, ., string, (, flags, ), ), ;, }, }, private, void]
[;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[., addChildToBack, (, IR, ., string, (, flags, ), ), ;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,]
[), ;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState]
[., string, (, flags, ), ), ;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws]
[), ), ;, }, }, private, void, transformReturnStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, .]
[;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;]
[), ;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;, parent, ., addChildToBack, (, node, )]
[==, true, ), ;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;, parent, ., addChildToBack, (]
[), ;, Node, node, =, createNode, (, Token, ., RETURN, ,, element, ), ;, parent, ., addChildToBack, (, node, )]
[;, parent, ., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {]
[., RETURN, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, )]
[), ;, parent, ., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =]
[;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (]
[., addChildToBack, (, node, ), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement]
[), ;, if, (, element, ., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild]
[), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =]
[., hasChildren, (, ), ), {, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node]
[=, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =, true, ;, }]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =, true, ;, }, }, private]
[;, insertExprResultState, =, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, node, ), ;, insertExprResultState, =, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, )]
[., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML]
[), ,, node, ), ;, insertExprResultState, =, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent]
[), ;, insertExprResultState, =, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[=, true, ;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, .]
[;, }, }, private, void, transformSwitchStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, ., addChildToBack]
[., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, .]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, .]
[=, false, ;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, ., addChildToBack, (, node]
[;, Node, node, =, createNode, (, Token, ., SWITCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., SWITCH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, for, (]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, for]
[;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =, 1, ;, i, <, element, ., childrenSize]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =, 1, ;]
[), ;, transformElement, (, child, ,, node, ), ;, for, (, int, i, =, 1, ;, i, <, element, .]
[;, for, (, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;, ++, i, ), {]
[,, node, ), ;, for, (, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;, ++]
[), ;, for, (, int, i, =, 1, ;, i, <, element, ., childrenSize, (, ), ;, ++, i, )]
[;, i, <, element, ., childrenSize, (, ), ;, ++, i, ), {, child, =, element, ., getChild, (, i]
[;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (, child, ,, node, )]
[<, element, ., childrenSize, (, ), ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;]
[;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (, child, ,, node, )]
[., childrenSize, (, ), ;, ++, i, ), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (]
[), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (, child, ,, node, ), ;, }, insertExprResultState]
[), {, child, =, element, ., getChild, (, i, ), ;, transformElement, (, child, ,, node, ), ;, }, insertExprResultState]
[=, element, ., getChild, (, i, ), ;, transformElement, (, child, ,, node, ), ;, }, insertExprResultState, =, true, ;]
[;, transformElement, (, child, ,, node, ), ;, }, insertExprResultState, =, true, ;, }, private, void, transformThisExpr, (, JsonML, element]
[., getChild, (, i, ), ;, transformElement, (, child, ,, node, ), ;, }, insertExprResultState, =, true, ;, }, private]
[), ;, transformElement, (, child, ,, node, ), ;, }, insertExprResultState, =, true, ;, }, private, void, transformThisExpr, (, JsonML]
[;, }, insertExprResultState, =, true, ;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, node, ), ;, }, insertExprResultState, =, true, ;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, )]
[), ;, }, insertExprResultState, =, true, ;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[=, true, ;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, parent, ., addChildToBack]
[;, }, private, void, transformThisExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, parent, ., addChildToBack, (, createNode]
[;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState]
[., addChildToBack, (, createNode, (, Token, ., THIS, ,, element, ), ), ;, }, private, void, transformThrowStmt, (, JsonML, element]
[), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[,, element, ), ), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions]
[., THIS, ,, element, ), ), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException]
[), ), ;, }, private, void, transformThrowStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState]
[;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;]
[), ;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, )]
[==, true, ), ;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (]
[), ;, Node, node, =, createNode, (, Token, ., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, )]
[;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, )]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild]
[., THROW, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element]
[), ;, parent, ., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0]
[;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =, true]
[., addChildToBack, (, node, ), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node]
[), ;, insertExprResultState, =, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =]
[=, false, ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =, true, ;, }]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void]
[;, insertExprResultState, =, true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions]
[,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws]
[., getChild, (, 0, ), ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformTryStmt, (, JsonML, element]
[), ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, )]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[=, true, ;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState]
[;, }, private, void, transformTryStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState]
[;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[., checkState, (, insertExprResultState, ==, true, ), ;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;]
[), ;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;, parent, ., addChildToBack, (, node, )]
[==, true, ), ;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;, parent, ., addChildToBack, (]
[), ;, Node, node, =, createNode, (, Token, ., TRY, ,, element, ), ;, parent, ., addChildToBack, (, node, )]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., TRY, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node]
[;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (]
[), ;, transformElement, (, child, ,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, node, .]
[;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack, (, block, ), ;, child, =, element]
[,, node, ), ;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack, (, block, ), ;]
[), ;, Node, block, =, IR, ., block, (, ), ;, node, ., addChildToBack, (, block, ), ;, child, =]
[;, node, ., addChildToBack, (, block, ), ;, child, =, element, ., getChild, (, 1, ), ;, if, (, child]
[., block, (, ), ;, node, ., addChildToBack, (, block, ), ;, child, =, element, ., getChild, (, 1, )]
[;, child, =, element, ., getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==, TagType, .]
[., addChildToBack, (, block, ), ;, child, =, element, ., getChild, (, 1, ), ;, if, (, child, ., getType]
[), ;, child, =, element, ., getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==, TagType]
[=, element, ., getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., CatchClause, )]
[;, if, (, child, ., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement, (, child, ,, block, )]
[., getChild, (, 1, ), ;, if, (, child, ., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement]
[), ;, if, (, child, ., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement, (, child, ,, block]
[), {, transformElement, (, child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (, element, .]
[==, TagType, ., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }]
[., getType, (, ), ==, TagType, ., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {]
[), {, transformElement, (, child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (, element, .]
[., CatchClause, ), {, transformElement, (, child, ,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (]
[;, }, else, {, nodeIndex, ++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {, child]
[,, block, ), ;, }, else, {, nodeIndex, ++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3]
[), ;, }, else, {, nodeIndex, ++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {]
[;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {, child, =, element, ., getChild, (, 2]
[++, ;, }, if, (, element, ., childrenSize, (, ), ==, 3, ), {, child, =, element, ., getChild, (]
[), {, child, =, element, ., getChild, (, 2, ), ;, transformElement, (, child, ,, node, ), ;, }, }]
[==, 3, ), {, child, =, element, ., getChild, (, 2, ), ;, transformElement, (, child, ,, node, ), ;]
[., childrenSize, (, ), ==, 3, ), {, child, =, element, ., getChild, (, 2, ), ;, transformElement, (, child]
[), {, child, =, element, ., getChild, (, 2, ), ;, transformElement, (, child, ,, node, ), ;, }, }]
[=, element, ., getChild, (, 2, ), ;, transformElement, (, child, ,, node, ), ;, }, }, private, void, transformTypeofExpr]
[;, transformElement, (, child, ,, node, ), ;, }, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent, )]
[., getChild, (, 2, ), ;, transformElement, (, child, ,, node, ), ;, }, }, private, void, transformTypeofExpr, (, JsonML]
[), ;, transformElement, (, child, ,, node, ), ;, }, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent]
[;, }, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[,, node, ), ;, }, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node]
[), ;, }, }, private, void, transformTypeofExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =]
[;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,]
[., TYPEOF, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, )]
[;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformUnaryExpr, (, JsonML, element]
[., addChildToBack, (, node, ), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private]
[), ;, transformElement, (, element, ., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformUnaryExpr, (, JsonML]
[;, }, private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute, (]
[,, node, ), ;, }, private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op]
[., getChild, (, 0, ), ,, node, ), ;, }, private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, )]
[), ,, node, ), ;, }, private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String]
[), ;, }, private, void, transformUnaryExpr, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, String, op, =, getStringAttribute]
[;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type, ,, element, )]
[,, TagAttr, ., OP, ), ;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode]
[), ;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type, ,, element]
[., OP, ), ;, int, type, =, Operator, ., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type]
[;, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (]
[., getNodeTypeForUnaryOp, (, op, ), ;, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (]
[), ;, Node, node, =, createNode, (, type, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformVarDecl, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformVarDecl]
[;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformVarDecl, (, JsonML, element]
[), ;, transformAllChildren, (, element, ,, node, ), ;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, )]
[;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode, (]
[,, node, ), ;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node]
[), ;, }, private, void, transformVarDecl, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Node, node, =, createNode]
[;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ,, false, ), ;, }, private, void]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ,, false, ), ;]
[., VAR, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ,, false]
[), ;, parent, ., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ,, false, ), ;, }, private]
[;, transformAllChildren, (, element, ,, node, ,, false, ), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent]
[., addChildToBack, (, node, ), ;, transformAllChildren, (, element, ,, node, ,, false, ), ;, }, private, void, transformWhileStmt, (]
[), ;, transformAllChildren, (, element, ,, node, ,, false, ), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node]
[;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState]
[,, node, ,, false, ), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[,, false, ), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, .]
[), ;, }, private, void, transformWhileStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (]
[;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, ., addChildToBack]
[., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, .]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, .]
[=, false, ;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, ., addChildToBack, (, node]
[;, Node, node, =, createNode, (, Token, ., WHILE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., WHILE, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child]
[;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (]
[;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =]
[=, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }]
[;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,]
[., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformWithStmt, (, JsonML, element]
[;, insertExprResultState, =, true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions]
[,, node, ), ;, insertExprResultState, =, true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws]
[), ;, insertExprResultState, =, true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {]
[=, true, ;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState]
[;, }, private, void, transformWithStmt, (, JsonML, element, ,, Node, parent, ), throws, JsonMLException, {, Preconditions, ., checkState, (, insertExprResultState]
[;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;, parent, ., addChildToBack]
[., checkState, (, insertExprResultState, ==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;, parent, .]
[==, true, ), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;]
[), ;, insertExprResultState, =, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;, parent, .]
[=, false, ;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;, parent, ., addChildToBack, (, node]
[;, Node, node, =, createNode, (, Token, ., WITH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;]
[;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (]
[,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, )]
[., WITH, ,, element, ), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (]
[), ;, parent, ., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement]
[;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =]
[., addChildToBack, (, node, ), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,]
[), ;, JsonML, child, =, element, ., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child]
[;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child]
[., getChild, (, 0, ), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1]
[), ;, transformElement, (, child, ,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (]
[;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true]
[,, node, ), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;]
[), ;, child, =, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =]
[=, element, ., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }]
[;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, Node, createNode, (, int, type, ,]
[., getChild, (, 1, ), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, Node]
[), ;, transformPotentiallyUnwrappedBlock, (, child, ,, node, ), ;, insertExprResultState, =, true, ;, }, private, Node, createNode, (, int, type]
[;, insertExprResultState, =, true, ;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new, Node]
[,, node, ), ;, insertExprResultState, =, true, ;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {]
[), ;, insertExprResultState, =, true, ;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new]
[=, true, ;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new, Node, (, type]
[;, }, private, Node, createNode, (, int, type, ,, JsonML, element, ), {, return, new, Node, (, type, ,, nodeIndex]
[;, }, private, void, setPosition, (, Node, node, ), {, node, ., setLineno, (, nodeIndex, ), ;, }, private, enum]
[,, nodeIndex, ,, -, 1, ), ;, }, private, void, setPosition, (, Node, node, ), {, node, ., setLineno, (]
[,, -, 1, ), ;, }, private, void, setPosition, (, Node, node, ), {, node, ., setLineno, (, nodeIndex, )]
[), ;, }, private, void, setPosition, (, Node, node, ), {, node, ., setLineno, (, nodeIndex, ), ;, }, private]
[), ;, }, private, void, setPosition, (, Node, node, ), {, node, ., setLineno, (, nodeIndex, ), ;, }, private]
[;, }, private, enum, Operator, {, ASSIGN, (, "=", ), ,, ASSIGN_BITOR, (, "|=", ), ,, ASSIGN_BITXOR, (, "^=", )]
[., setLineno, (, nodeIndex, ), ;, }, private, enum, Operator, {, ASSIGN, (, "=", ), ,, ASSIGN_BITOR, (, "|=", )]
[), ;, }, private, enum, Operator, {, ASSIGN, (, "=", ), ,, ASSIGN_BITOR, (, "|=", ), ,, ASSIGN_BITXOR, (, "^="]
[;, static, {, for, (, Operator, op, :, Operator, ., values, (, ), ), {, lookup, ., put, (, op]
[., newHashMap, (, ), ;, static, {, for, (, Operator, op, :, Operator, ., values, (, ), ), {, lookup]
[), {, lookup, ., put, (, op, ., getName, (, ), ,, op, ), ;, }, }, private, String, getName]
[., values, (, ), ), {, lookup, ., put, (, op, ., getName, (, ), ,, op, ), ;, }]
[;, }, }, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Operator, (, String, name]
[., put, (, op, ., getName, (, ), ,, op, ), ;, }, }, private, String, getName, (, ), {]
[,, op, ), ;, }, }, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Operator]
[., getName, (, ), ,, op, ), ;, }, }, private, String, getName, (, ), {, return, this, ., name]
[), ;, }, }, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Operator, (, String]
[;, }, private, Operator, (, String, name, ), {, this, ., name, =, name, ;, }, private, static, Operator, get]
[., name, ;, }, private, Operator, (, String, name, ), {, this, ., name, =, name, ;, }, private, static]
[=, name, ;, }, private, static, Operator, get, (, String, name, ), {, return, lookup, ., get, (, name, )]
[., name, =, name, ;, }, private, static, Operator, get, (, String, name, ), {, return, lookup, ., get, (]
[;, }, private, static, Operator, get, (, String, name, ), {, return, lookup, ., get, (, name, ), ;, }]
[;, }, private, static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if]
[., get, (, name, ), ;, }, private, static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =, get]
[), ;, }, private, static, int, getNodeTypeForAssignOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;]
[;, if, (, op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op]
[), ;, if, (, op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (]
[), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN, :, type]
[==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN]
[), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN, :, type]
[;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN, :, type, =, Token, ., ASSIGN, ;, break]
[., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, ASSIGN, :, type, =, Token, ., ASSIGN]
[), {, case, ASSIGN, :, type, =, Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, .]
[:, type, =, Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;]
[=, Token, ., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR]
[;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token]
[., ASSIGN, ;, break, ;, case, ASSIGN_BITOR, :, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type]
[:, type, =, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;]
[=, Token, ., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND]
[;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token]
[., ASSIGN_BITOR, ;, break, ;, case, ASSIGN_BITXOR, :, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type]
[:, type, =, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;]
[=, Token, ., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH]
[;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token]
[., ASSIGN_BITXOR, ;, break, ;, case, ASSIGN_BITAND, :, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type]
[:, type, =, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;]
[=, Token, ., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH]
[;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token]
[., ASSIGN_BITAND, ;, break, ;, case, ASSIGN_LSH, :, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type]
[:, type, =, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;]
[=, Token, ., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH]
[;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token]
[., ASSIGN_LSH, ;, break, ;, case, ASSIGN_RSH, :, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type]
[:, type, =, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;]
[=, Token, ., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD]
[;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token]
[., ASSIGN_RSH, ;, break, ;, case, ASSIGN_URSH, :, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type]
[:, type, =, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;]
[=, Token, ., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB]
[;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token]
[., ASSIGN_URSH, ;, break, ;, case, ASSIGN_ADD, :, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type]
[:, type, =, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;]
[=, Token, ., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL]
[;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token]
[., ASSIGN_ADD, ;, break, ;, case, ASSIGN_SUB, :, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type]
[:, type, =, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;]
[=, Token, ., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV]
[;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token]
[., ASSIGN_SUB, ;, break, ;, case, ASSIGN_MUL, :, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type]
[:, type, =, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;]
[=, Token, ., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD]
[;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type, =, Token]
[., ASSIGN_MUL, ;, break, ;, case, ASSIGN_DIV, :, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type]
[:, type, =, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;]
[=, Token, ., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :]
[;, break, ;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[., ASSIGN_DIV, ;, break, ;, case, ASSIGN_MOD, :, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new]
[:, type, =, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of assign expression.", ), ;]
[=, Token, ., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of assign expression.", ), ;, }, return]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of assign expression.", ), ;, }, return, type, ;, }, private]
[., ASSIGN_MOD, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of assign expression.", ), ;, }, return, type, ;]
[;, }, return, type, ;, }, private, static, int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op, =, get, (]
[), ;, }, return, type, ;, }, private, static, int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op, =, get]
[+, "Invalid type of assign expression.", ), ;, }, return, type, ;, }, private, static, int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op]
[), ;, }, return, type, ;, }, private, static, int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op, =, get]
[;, }, private, static, int, getNodeTypeForBinaryOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, int]
[;, int, type, ;, switch, (, op, ), {, case, BITOR, :, type, =, Token, ., BITOR, ;, break, ;]
[), ;, int, type, ;, switch, (, op, ), {, case, BITOR, :, type, =, Token, ., BITOR, ;, break]
[), {, case, BITOR, :, type, =, Token, ., BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, .]
[:, type, =, Token, ., BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;]
[=, Token, ., BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;, case, BITAND]
[;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;, case, BITAND, :, type, =, Token]
[., BITOR, ;, break, ;, case, BITXOR, :, type, =, Token, ., BITXOR, ;, break, ;, case, BITAND, :, type]
[:, type, =, Token, ., BITXOR, ;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;]
[=, Token, ., BITXOR, ;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;, case, EQ]
[;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;, case, EQ, :, type, =, Token]
[., BITXOR, ;, break, ;, case, BITAND, :, type, =, Token, ., BITAND, ;, break, ;, case, EQ, :, type]
[:, type, =, Token, ., BITAND, ;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;]
[=, Token, ., BITAND, ;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;, case, NE]
[;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;, case, NE, :, type, =, Token]
[., BITAND, ;, break, ;, case, EQ, :, type, =, Token, ., EQ, ;, break, ;, case, NE, :, type]
[:, type, =, Token, ., EQ, ;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;]
[=, Token, ., EQ, ;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;, case, LT]
[;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;, case, LT, :, type, =, Token]
[., EQ, ;, break, ;, case, NE, :, type, =, Token, ., NE, ;, break, ;, case, LT, :, type]
[:, type, =, Token, ., NE, ;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;]
[=, Token, ., NE, ;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;, case, LE]
[;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;, case, LE, :, type, =, Token]
[., NE, ;, break, ;, case, LT, :, type, =, Token, ., LT, ;, break, ;, case, LE, :, type]
[:, type, =, Token, ., LT, ;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;]
[=, Token, ., LT, ;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;, case, GT]
[;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;, case, GT, :, type, =, Token]
[., LT, ;, break, ;, case, LE, :, type, =, Token, ., LE, ;, break, ;, case, GT, :, type]
[:, type, =, Token, ., LE, ;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;]
[=, Token, ., LE, ;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;, case, GE]
[;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;, case, GE, :, type, =, Token]
[., LE, ;, break, ;, case, GT, :, type, =, Token, ., GT, ;, break, ;, case, GE, :, type]
[:, type, =, Token, ., GT, ;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;]
[=, Token, ., GT, ;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;, case, LSH]
[;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;, case, LSH, :, type, =, Token]
[., GT, ;, break, ;, case, GE, :, type, =, Token, ., GE, ;, break, ;, case, LSH, :, type]
[:, type, =, Token, ., GE, ;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;]
[=, Token, ., GE, ;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;, case, RSH]
[;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;, case, RSH, :, type, =, Token]
[., GE, ;, break, ;, case, LSH, :, type, =, Token, ., LSH, ;, break, ;, case, RSH, :, type]
[:, type, =, Token, ., LSH, ;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;]
[=, Token, ., LSH, ;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;, case, URSH]
[;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;, case, URSH, :, type, =, Token]
[., LSH, ;, break, ;, case, RSH, :, type, =, Token, ., RSH, ;, break, ;, case, URSH, :, type]
[:, type, =, Token, ., RSH, ;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;]
[=, Token, ., RSH, ;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;, case, ADD]
[;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;, case, ADD, :, type, =, Token]
[., RSH, ;, break, ;, case, URSH, :, type, =, Token, ., URSH, ;, break, ;, case, ADD, :, type]
[:, type, =, Token, ., URSH, ;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;]
[=, Token, ., URSH, ;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;, case, SUB]
[;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;, case, SUB, :, type, =, Token]
[., URSH, ;, break, ;, case, ADD, :, type, =, Token, ., ADD, ;, break, ;, case, SUB, :, type]
[:, type, =, Token, ., ADD, ;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;]
[=, Token, ., ADD, ;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;, case, MUL]
[;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;, case, MUL, :, type, =, Token]
[., ADD, ;, break, ;, case, SUB, :, type, =, Token, ., SUB, ;, break, ;, case, MUL, :, type]
[:, type, =, Token, ., SUB, ;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;]
[=, Token, ., SUB, ;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;, case, DIV]
[;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;, case, DIV, :, type, =, Token]
[., SUB, ;, break, ;, case, MUL, :, type, =, Token, ., MUL, ;, break, ;, case, DIV, :, type]
[:, type, =, Token, ., MUL, ;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;]
[=, Token, ., MUL, ;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;, case, MOD]
[;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;, case, MOD, :, type, =, Token]
[., MUL, ;, break, ;, case, DIV, :, type, =, Token, ., DIV, ;, break, ;, case, MOD, :, type]
[:, type, =, Token, ., DIV, ;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;]
[=, Token, ., DIV, ;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;, case, SHEQ]
[;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;, case, SHEQ, :, type, =, Token]
[., DIV, ;, break, ;, case, MOD, :, type, =, Token, ., MOD, ;, break, ;, case, SHEQ, :, type]
[:, type, =, Token, ., MOD, ;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;]
[=, Token, ., MOD, ;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;, case, SHNE]
[;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;, case, SHNE, :, type, =, Token]
[., MOD, ;, break, ;, case, SHEQ, :, type, =, Token, ., SHEQ, ;, break, ;, case, SHNE, :, type]
[:, type, =, Token, ., SHEQ, ;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;]
[=, Token, ., SHEQ, ;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;, case, COMMA]
[;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;, case, COMMA, :, type, =, Token]
[., SHEQ, ;, break, ;, case, SHNE, :, type, =, Token, ., SHNE, ;, break, ;, case, COMMA, :, type]
[:, type, =, Token, ., SHNE, ;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;]
[=, Token, ., SHNE, ;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF]
[;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token]
[., SHNE, ;, break, ;, case, COMMA, :, type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type]
[:, type, =, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;]
[=, Token, ., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;, case, IN]
[;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;, case, IN, :, type, =, Token]
[., COMMA, ;, break, ;, case, INSTANCEOF, :, type, =, Token, ., INSTANCEOF, ;, break, ;, case, IN, :, type]
[:, type, =, Token, ., INSTANCEOF, ;, break, ;, case, IN, :, type, =, Token, ., IN, ;, break, ;]
[=, Token, ., INSTANCEOF, ;, break, ;, case, IN, :, type, =, Token, ., IN, ;, break, ;, default, :]
[;, break, ;, case, IN, :, type, =, Token, ., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[., INSTANCEOF, ;, break, ;, case, IN, :, type, =, Token, ., IN, ;, break, ;, default, :, throw, new]
[:, type, =, Token, ., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of binary expression.", ), ;]
[=, Token, ., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of binary expression.", ), ;, }, return]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of binary expression.", ), ;, }, return, type, ;, }, private]
[., IN, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of binary expression.", ), ;, }, return, type, ;]
[;, }, return, type, ;, }, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get, (]
[), ;, }, return, type, ;, }, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get]
[+, "Invalid type of binary expression.", ), ;, }, return, type, ;, }, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op]
[), ;, }, return, type, ;, }, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get]
[;, }, private, static, int, getNodeTypeForCountOp, (, String, name, ), {, Operator, op, =, get, (, name, ), ;, if]
[;, if, (, op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op]
[), ;, if, (, op, ==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (]
[), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, DEC, :, type]
[==, null, ), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, DEC]
[), {, return, Token, ., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, DEC, :, type]
[;, }, int, type, ;, switch, (, op, ), {, case, DEC, :, type, =, Token, ., DEC, ;, break]
[., ERROR, ;, }, int, type, ;, switch, (, op, ), {, case, DEC, :, type, =, Token, ., DEC]
[), {, case, DEC, :, type, =, Token, ., DEC, ;, break, ;, case, INC, :, type, =, Token, .]
[:, type, =, Token, ., DEC, ;, break, ;, case, INC, :, type, =, Token, ., INC, ;, break, ;]
[=, Token, ., DEC, ;, break, ;, case, INC, :, type, =, Token, ., INC, ;, break, ;, default, :]
[;, break, ;, case, INC, :, type, =, Token, ., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[., DEC, ;, break, ;, case, INC, :, type, =, Token, ., INC, ;, break, ;, default, :, throw, new]
[:, type, =, Token, ., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of count expression.", ), ;]
[=, Token, ., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of count expression.", ), ;, }, return]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of count expression.", ), ;, }, return, type, ;, }, private]
[., INC, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of count expression.", ), ;, }, return, type, ;]
[;, }, return, type, ;, }, private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new, String]
[), ;, }, return, type, ;, }, private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new]
[+, "Invalid type of count expression.", ), ;, }, return, type, ;, }, private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName]
[), ;, }, return, type, ;, }, private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new]
[;, }, private, static, int, getNodeTypeForUnaryOp, (, String, name, ), {, String, realName, =, new, String, (, name, ), ;]
[;, if, (, name, ., equals, (, "+", ), ||, name, ., equals, (, "-", ), ), {, realName, +=]
[), ;, if, (, name, ., equals, (, "+", ), ||, name, ., equals, (, "-", ), ), {, realName]
[), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch, (]
[||, name, ., equals, (, "-", ), ), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (, realName]
[., equals, (, "+", ), ||, name, ., equals, (, "-", ), ), {, realName, +=, "_unary", ;, }, Operator]
[), ||, name, ., equals, (, "-", ), ), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (]
[), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch, (]
[., equals, (, "-", ), ), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (, realName, ), ;]
[), ), {, realName, +=, "_unary", ;, }, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch]
[+=, "_unary", ;, }, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch, (, op, ), {]
[;, }, Operator, op, =, get, (, realName, ), ;, int, type, ;, switch, (, op, ), {, case, NOT]
[;, int, type, ;, switch, (, op, ), {, case, NOT, :, type, =, Token, ., NOT, ;, break, ;]
[), ;, int, type, ;, switch, (, op, ), {, case, NOT, :, type, =, Token, ., NOT, ;, break]
[), {, case, NOT, :, type, =, Token, ., NOT, ;, break, ;, case, BITNOT, :, type, =, Token, .]
[:, type, =, Token, ., NOT, ;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;]
[=, Token, ., NOT, ;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;, case, POS]
[;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;, case, POS, :, type, =, Token]
[., NOT, ;, break, ;, case, BITNOT, :, type, =, Token, ., BITNOT, ;, break, ;, case, POS, :, type]
[:, type, =, Token, ., BITNOT, ;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;]
[=, Token, ., BITNOT, ;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;, case, NEG]
[;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;, case, NEG, :, type, =, Token]
[., BITNOT, ;, break, ;, case, POS, :, type, =, Token, ., POS, ;, break, ;, case, NEG, :, type]
[:, type, =, Token, ., POS, ;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;]
[=, Token, ., POS, ;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;, case, VOID]
[;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;, case, VOID, :, type, =, Token]
[., POS, ;, break, ;, case, NEG, :, type, =, Token, ., NEG, ;, break, ;, case, VOID, :, type]
[:, type, =, Token, ., NEG, ;, break, ;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;]
[=, Token, ., NEG, ;, break, ;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;, default, :]
[;, break, ;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (]
[., NEG, ;, break, ;, case, VOID, :, type, =, Token, ., VOID, ;, break, ;, default, :, throw, new]
[:, type, =, Token, ., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of unary expression.", ), ;]
[=, Token, ., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of unary expression.", ), ;, }, return]
[;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of unary expression.", ), ;, }, return, type, ;, }, }]
[., VOID, ;, break, ;, default, :, throw, new, IllegalArgumentException, (, "", +, "Invalid type of unary expression.", ), ;, }, return, type, ;]
[;, }, return, type, ;, }, }, private, enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL, (, "null", )]
[), ;, }, return, type, ;, }, }, private, enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL, (, "null"]
[+, "Invalid type of unary expression.", ), ;, }, return, type, ;, }, }, private, enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL]
[), ;, }, return, type, ;, }, }, private, enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL, (, "null"]
[;, }, }, private, enum, Type, {, BOOLEAN, (, "boolean", ), ,, NULL, (, "null", ), ,, NUMBER, (, "number"]
[), ,, ASSIGN_BITOR, (, "|=", ), ,, ASSIGN_BITXOR, (, "^=", ), ,, ASSIGN_BITAND, (, "&=", ), ,, ASSIGN_LSH, (, "<<="]
[), ,, ASSIGN_BITXOR, (, "^=", ), ,, ASSIGN_BITAND, (, "&=", ), ,, ASSIGN_LSH, (, "<<=", ), ,, ASSIGN_RSH, (, ">>="]
[), ,, ASSIGN_BITAND, (, "&=", ), ,, ASSIGN_LSH, (, "<<=", ), ,, ASSIGN_RSH, (, ">>=", ), ,, ASSIGN_URSH, (, ">>>="]
[), ,, ASSIGN_LSH, (, "<<=", ), ,, ASSIGN_RSH, (, ">>=", ), ,, ASSIGN_URSH, (, ">>>=", ), ,, ASSIGN_ADD, (, "+="]
[), ,, ASSIGN_RSH, (, ">>=", ), ,, ASSIGN_URSH, (, ">>>=", ), ,, ASSIGN_ADD, (, "+=", ), ,, ASSIGN_SUB, (, "-="]
[), ,, ASSIGN_URSH, (, ">>>=", ), ,, ASSIGN_ADD, (, "+=", ), ,, ASSIGN_SUB, (, "-=", ), ,, ASSIGN_MUL, (, "*="]
[), ,, ASSIGN_ADD, (, "+=", ), ,, ASSIGN_SUB, (, "-=", ), ,, ASSIGN_MUL, (, "*=", ), ,, ASSIGN_DIV, (, "/="]
[), ,, ASSIGN_SUB, (, "-=", ), ,, ASSIGN_MUL, (, "*=", ), ,, ASSIGN_DIV, (, "/=", ), ,, ASSIGN_MOD, (, "%="]
[), ,, ASSIGN_MUL, (, "*=", ), ,, ASSIGN_DIV, (, "/=", ), ,, ASSIGN_MOD, (, "%=", ), ,, BITOR, (, "|"]
[), ,, ASSIGN_DIV, (, "/=", ), ,, ASSIGN_MOD, (, "%=", ), ,, BITOR, (, "|", ), ,, BITXOR, (, "^"]
[), ,, ASSIGN_MOD, (, "%=", ), ,, BITOR, (, "|", ), ,, BITXOR, (, "^", ), ,, BITAND, (, "&"]
[), ,, BITOR, (, "|", ), ,, BITXOR, (, "^", ), ,, BITAND, (, "&", ), ,, EQ, (, "=="]
[), ,, BITXOR, (, "^", ), ,, BITAND, (, "&", ), ,, EQ, (, "==", ), ,, NE, (, "!="]
[), ,, BITAND, (, "&", ), ,, EQ, (, "==", ), ,, NE, (, "!=", ), ,, LT, (, "<"]
[), ,, EQ, (, "==", ), ,, NE, (, "!=", ), ,, LT, (, "<", ), ,, LE, (, "<="]
[), ,, NE, (, "!=", ), ,, LT, (, "<", ), ,, LE, (, "<=", ), ,, GT, (, ">"]
[), ,, LT, (, "<", ), ,, LE, (, "<=", ), ,, GT, (, ">", ), ,, GE, (, ">="]
[), ,, LE, (, "<=", ), ,, GT, (, ">", ), ,, GE, (, ">=", ), ,, LSH, (, "<<"]
[), ,, GT, (, ">", ), ,, GE, (, ">=", ), ,, LSH, (, "<<", ), ,, RSH, (, ">>"]
[), ,, GE, (, ">=", ), ,, LSH, (, "<<", ), ,, RSH, (, ">>", ), ,, URSH, (, ">>>"]
[), ,, LSH, (, "<<", ), ,, RSH, (, ">>", ), ,, URSH, (, ">>>", ), ,, ADD, (, "+"]
[), ,, RSH, (, ">>", ), ,, URSH, (, ">>>", ), ,, ADD, (, "+", ), ,, SUB, (, "-"]
[), ,, URSH, (, ">>>", ), ,, ADD, (, "+", ), ,, SUB, (, "-", ), ,, MUL, (, "*"]
[), ,, ADD, (, "+", ), ,, SUB, (, "-", ), ,, MUL, (, "*", ), ,, DIV, (, "/"]
[), ,, SUB, (, "-", ), ,, MUL, (, "*", ), ,, DIV, (, "/", ), ,, MOD, (, "%"]
[), ,, MUL, (, "*", ), ,, DIV, (, "/", ), ,, MOD, (, "%", ), ,, SHEQ, (, "==="]
[), ,, DIV, (, "/", ), ,, MOD, (, "%", ), ,, SHEQ, (, "===", ), ,, SHNE, (, "!=="]
[), ,, MOD, (, "%", ), ,, SHEQ, (, "===", ), ,, SHNE, (, "!==", ), ,, COMMA, (, ","]
[), ,, SHEQ, (, "===", ), ,, SHNE, (, "!==", ), ,, COMMA, (, ",", ), ,, INSTANCEOF, (, "instanceof"]
[), ,, SHNE, (, "!==", ), ,, COMMA, (, ",", ), ,, INSTANCEOF, (, "instanceof", ), ,, IN, (, "in"]
[), ,, COMMA, (, ",", ), ,, INSTANCEOF, (, "instanceof", ), ,, IN, (, "in", ), ,, DEC, (, "--"]
[), ,, INSTANCEOF, (, "instanceof", ), ,, IN, (, "in", ), ,, DEC, (, "--", ), ,, INC, (, "++"]
[), ,, IN, (, "in", ), ,, DEC, (, "--", ), ,, INC, (, "++", ), ,, NOT, (, "!"]
[), ,, DEC, (, "--", ), ,, INC, (, "++", ), ,, NOT, (, "!", ), ,, BITNOT, (, "~"]
[), ,, INC, (, "++", ), ,, NOT, (, "!", ), ,, BITNOT, (, "~", ), ,, POS, (, "+_unary"]
[), ,, NOT, (, "!", ), ,, BITNOT, (, "~", ), ,, POS, (, "+_unary", ), ,, NEG, (, "-_unary"]
[), ,, BITNOT, (, "~", ), ,, POS, (, "+_unary", ), ,, NEG, (, "-_unary", ), ,, VOID, (, "void"]
[), ,, POS, (, "+_unary", ), ,, NEG, (, "-_unary", ), ,, VOID, (, "void", ), ;, private, final, String]
[), ,, NEG, (, "-_unary", ), ,, VOID, (, "void", ), ;, private, final, String, name, ;, private, static, Map]
[), ,, VOID, (, "void", ), ;, private, final, String, name, ;, private, static, Map, <, String, ,, Operator, >]
[), ;, private, final, String, name, ;, private, static, Map, <, String, ,, Operator, >, lookup, =, Maps, ., newHashMap]
[;, static, {, for, (, Type, type, :, Type, ., values, (, ), ), {, lookup, ., put, (, type]
[), {, lookup, ., put, (, type, ., getName, (, ), ,, type, ), ;, }, }, private, String, getName]
[., values, (, ), ), {, lookup, ., put, (, type, ., getName, (, ), ,, type, ), ;, }]
[;, }, }, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Type, (, String, name]
[., put, (, type, ., getName, (, ), ,, type, ), ;, }, }, private, String, getName, (, ), {]
[,, type, ), ;, }, }, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Type]
[., getName, (, ), ,, type, ), ;, }, }, private, String, getName, (, ), {, return, this, ., name]
[), ;, }, }, private, String, getName, (, ), {, return, this, ., name, ;, }, private, Type, (, String]
[;, }, private, Type, (, String, name, ), {, this, ., name, =, name, ;, }, private, static, Type, get]
[., name, ;, }, private, Type, (, String, name, ), {, this, ., name, =, name, ;, }, private, static]
[=, name, ;, }, private, static, Type, get, (, String, name, ), {, return, lookup, ., get, (, name, )]
[., name, =, name, ;, }, private, static, Type, get, (, String, name, ), {, return, lookup, ., get, (]
[;, }, private, static, Type, get, (, String, name, ), {, return, lookup, ., get, (, name, ), ;, }]
[;, }, }, }]
[., get, (, name, ), ;, }, }, }]
[), ;, }, }, }]
[), ,, NULL, (, "null", ), ,, NUMBER, (, "number", ), ,, STRING, (, "string", ), ;, private, final, String]
[), ,, NUMBER, (, "number", ), ,, STRING, (, "string", ), ;, private, final, String, name, ;, private, static, Map]
[), ,, STRING, (, "string", ), ;, private, final, String, name, ;, private, static, Map, <, String, ,, Type, >]
[), ;, private, final, String, name, ;, private, static, Map, <, String, ,, Type, >, lookup, =, new, HashMap, <]
