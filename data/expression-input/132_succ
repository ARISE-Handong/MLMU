[;, DataFlowAnalysis, (, ControlFlowGraph, <, N, >, targetCfg, ,, JoinOp, <, L, >, joinOp, ), {, this, ., cfg, =]
[=, targetCfg, ;, this, ., joinOp, =, joinOp, ;, Comparator, <, DiGraphNode, <, N, ,, Branch, >, >, nodeComparator, =]
[., cfg, =, targetCfg, ;, this, ., joinOp, =, joinOp, ;, Comparator, <, DiGraphNode, <, N, ,, Branch, >, >]
[;, this, ., joinOp, =, joinOp, ;, Comparator, <, DiGraphNode, <, N, ,, Branch, >, >, nodeComparator, =, cfg, .]
[=, joinOp, ;, Comparator, <, DiGraphNode, <, N, ,, Branch, >, >, nodeComparator, =, cfg, ., getOptionalNodeComparator, (, isForward, (]
[., joinOp, =, joinOp, ;, Comparator, <, DiGraphNode, <, N, ,, Branch, >, >, nodeComparator, =, cfg, ., getOptionalNodeComparator, (]
[;, Comparator, <, DiGraphNode, <, N, ,, Branch, >, >, nodeComparator, =, cfg, ., getOptionalNodeComparator, (, isForward, (, ), )]
[;, if, (, nodeComparator, !=, null, ), {, this, ., orderedWorkSet, =, Sets, ., newTreeSet, (, nodeComparator, ), ;, }]
[., getOptionalNodeComparator, (, isForward, (, ), ), ;, if, (, nodeComparator, !=, null, ), {, this, ., orderedWorkSet, =, Sets]
[), ;, if, (, nodeComparator, !=, null, ), {, this, ., orderedWorkSet, =, Sets, ., newTreeSet, (, nodeComparator, ), ;]
[), {, this, ., orderedWorkSet, =, Sets, ., newTreeSet, (, nodeComparator, ), ;, }, else, {, this, ., orderedWorkSet, =]
[!=, null, ), {, this, ., orderedWorkSet, =, Sets, ., newTreeSet, (, nodeComparator, ), ;, }, else, {, this, .]
[), {, this, ., orderedWorkSet, =, Sets, ., newTreeSet, (, nodeComparator, ), ;, }, else, {, this, ., orderedWorkSet, =]
[=, Sets, ., newTreeSet, (, nodeComparator, ), ;, }, else, {, this, ., orderedWorkSet, =, Sets, ., newLinkedHashSet, (, )]
[., orderedWorkSet, =, Sets, ., newTreeSet, (, nodeComparator, ), ;, }, else, {, this, ., orderedWorkSet, =, Sets, ., newLinkedHashSet]
[;, }, else, {, this, ., orderedWorkSet, =, Sets, ., newLinkedHashSet, (, ), ;, }, }, final, ControlFlowGraph, <, N]
[., newTreeSet, (, nodeComparator, ), ;, }, else, {, this, ., orderedWorkSet, =, Sets, ., newLinkedHashSet, (, ), ;, }]
[), ;, }, else, {, this, ., orderedWorkSet, =, Sets, ., newLinkedHashSet, (, ), ;, }, }, final, ControlFlowGraph, <]
[=, Sets, ., newLinkedHashSet, (, ), ;, }, }, final, ControlFlowGraph, <, N, >, getCfg, (, ), {, return, cfg]
[., orderedWorkSet, =, Sets, ., newLinkedHashSet, (, ), ;, }, }, final, ControlFlowGraph, <, N, >, getCfg, (, ), {]
[;, }, }, final, ControlFlowGraph, <, N, >, getCfg, (, ), {, return, cfg, ;, }, L, getExitLatticeElement, (, )]
[., newLinkedHashSet, (, ), ;, }, }, final, ControlFlowGraph, <, N, >, getCfg, (, ), {, return, cfg, ;, }]
[;, }, L, getExitLatticeElement, (, ), {, DiGraphNode, <, N, ,, Branch, >, node, =, getCfg, (, ), ., getImplicitReturn]
[;, FlowState, <, L, >, state, =, node, ., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ;]
[., getImplicitReturn, (, ), ;, FlowState, <, L, >, state, =, node, ., getAnnotation, (, ), ;, return, state, .]
[;, return, state, ., getIn, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), protected, L, join, (, L, latticeA]
[., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), protected, L]
[;, }, @, SuppressWarnings, (, "unchecked", ), protected, L, join, (, L, latticeA, ,, L, latticeB, ), {, return, joinOp]
[., getIn, (, ), ;, }, @, SuppressWarnings, (, "unchecked", ), protected, L, join, (, L, latticeA, ,, L, latticeB]
[protected, L, join, (, L, latticeA, ,, L, latticeB, ), {, return, joinOp, ., apply, (, Lists, ., <, L]
[), protected, L, join, (, L, latticeA, ,, L, latticeB, ), {, return, joinOp, ., apply, (, Lists, ., <]
[;, }, abstract, boolean, isForward, (, ), ;, abstract, L, flowThrough, (, N, node, ,, L, input, ), ;, final]
[., apply, (, Lists, ., <, L, >, newArrayList, (, latticeA, ,, latticeB, ), ), ;, }, abstract, boolean, isForward]
[), ;, }, abstract, boolean, isForward, (, ), ;, abstract, L, flowThrough, (, N, node, ,, L, input, ), ;]
[., <, L, >, newArrayList, (, latticeA, ,, latticeB, ), ), ;, }, abstract, boolean, isForward, (, ), ;, abstract]
[,, latticeB, ), ), ;, }, abstract, boolean, isForward, (, ), ;, abstract, L, flowThrough, (, N, node, ,, L]
[), ), ;, }, abstract, boolean, isForward, (, ), ;, abstract, L, flowThrough, (, N, node, ,, L, input, )]
[;, }, final, void, analyze, (, int, maxSteps, ), {, initialize, (, ), ;, int, step, =, 0, ;, while]
[), ;, }, final, void, analyze, (, int, maxSteps, ), {, initialize, (, ), ;, int, step, =, 0, ;]
[;, int, step, =, 0, ;, while, (, !, orderedWorkSet, ., isEmpty, (, ), ), {, if, (, step, >]
[;, while, (, !, orderedWorkSet, ., isEmpty, (, ), ), {, if, (, step, >, maxSteps, ), {, throw, new]
[), {, if, (, step, >, maxSteps, ), {, throw, new, MaxIterationsExceededException, (, "Analysis did not terminate after ", +, maxSteps, +, " iterations", ), ;]
[), {, if, (, step, >, maxSteps, ), {, throw, new, MaxIterationsExceededException, (, "Analysis did not terminate after ", +, maxSteps, +, " iterations", ), ;]
[., isEmpty, (, ), ), {, if, (, step, >, maxSteps, ), {, throw, new, MaxIterationsExceededException, (, "Analysis did not terminate after ", +, maxSteps]
[), {, throw, new, MaxIterationsExceededException, (, "Analysis did not terminate after ", +, maxSteps, +, " iterations", ), ;, }, DiGraphNode, <, N, ,, Branch, >]
[>, maxSteps, ), {, throw, new, MaxIterationsExceededException, (, "Analysis did not terminate after ", +, maxSteps, +, " iterations", ), ;, }, DiGraphNode, <, N, ,]
[), {, throw, new, MaxIterationsExceededException, (, "Analysis did not terminate after ", +, maxSteps, +, " iterations", ), ;, }, DiGraphNode, <, N, ,, Branch, >]
[;, }, DiGraphNode, <, N, ,, Branch, >, curNode, =, orderedWorkSet, ., iterator, (, ), ., next, (, ), ;]
[), ;, }, DiGraphNode, <, N, ,, Branch, >, curNode, =, orderedWorkSet, ., iterator, (, ), ., next, (, )]
[+, " iterations", ), ;, }, DiGraphNode, <, N, ,, Branch, >, curNode, =, orderedWorkSet, ., iterator, (, ), ., next]
[+, maxSteps, +, " iterations", ), ;, }, DiGraphNode, <, N, ,, Branch, >, curNode, =, orderedWorkSet, ., iterator, (, )]
[+, " iterations", ), ;, }, DiGraphNode, <, N, ,, Branch, >, curNode, =, orderedWorkSet, ., iterator, (, ), ., next]
[), ;, }, DiGraphNode, <, N, ,, Branch, >, curNode, =, orderedWorkSet, ., iterator, (, ), ., next, (, )]
[;, orderedWorkSet, ., remove, (, curNode, ), ;, joinInputs, (, curNode, ), ;, if, (, flow, (, curNode, ), )]
[., next, (, ), ;, orderedWorkSet, ., remove, (, curNode, ), ;, joinInputs, (, curNode, ), ;, if, (, flow]
[., iterator, (, ), ., next, (, ), ;, orderedWorkSet, ., remove, (, curNode, ), ;, joinInputs, (, curNode, )]
[;, joinInputs, (, curNode, ), ;, if, (, flow, (, curNode, ), ), {, List, <, DiGraphNode, <, N, ,]
[., remove, (, curNode, ), ;, joinInputs, (, curNode, ), ;, if, (, flow, (, curNode, ), ), {, List]
[), ;, joinInputs, (, curNode, ), ;, if, (, flow, (, curNode, ), ), {, List, <, DiGraphNode, <, N]
[;, if, (, flow, (, curNode, ), ), {, List, <, DiGraphNode, <, N, ,, Branch, >, >, nextNodes, =]
[), ;, if, (, flow, (, curNode, ), ), {, List, <, DiGraphNode, <, N, ,, Branch, >, >, nextNodes]
[), {, List, <, DiGraphNode, <, N, ,, Branch, >, >, nextNodes, =, isForward, (, ), ?, cfg, ., getDirectedSuccNodes]
[), ), {, List, <, DiGraphNode, <, N, ,, Branch, >, >, nextNodes, =, isForward, (, ), ?, cfg, .]
[;, for, (, DiGraphNode, <, N, ,, Branch, >, nextNode, :, nextNodes, ), {, if, (, nextNode, !=, cfg, .]
[?, cfg, ., getDirectedSuccNodes, (, curNode, ), :, cfg, ., getDirectedPredNodes, (, curNode, ), ;, for, (, DiGraphNode, <, N]
[:, cfg, ., getDirectedPredNodes, (, curNode, ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, nextNode, :, nextNodes, )]
[., getDirectedSuccNodes, (, curNode, ), :, cfg, ., getDirectedPredNodes, (, curNode, ), ;, for, (, DiGraphNode, <, N, ,, Branch]
[), :, cfg, ., getDirectedPredNodes, (, curNode, ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, nextNode, :, nextNodes]
[;, for, (, DiGraphNode, <, N, ,, Branch, >, nextNode, :, nextNodes, ), {, if, (, nextNode, !=, cfg, .]
[., getDirectedPredNodes, (, curNode, ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, nextNode, :, nextNodes, ), {, if]
[), ;, for, (, DiGraphNode, <, N, ,, Branch, >, nextNode, :, nextNodes, ), {, if, (, nextNode, !=, cfg]
[), {, if, (, nextNode, !=, cfg, ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, nextNode, ), ;]
[), {, orderedWorkSet, ., add, (, nextNode, ), ;, }, }, }, step, ++, ;, }, if, (, isForward, (]
[!=, cfg, ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, nextNode, ), ;, }, }, }, step, ++]
[), {, orderedWorkSet, ., add, (, nextNode, ), ;, }, }, }, step, ++, ;, }, if, (, isForward, (]
[., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, nextNode, ), ;, }, }, }, step, ++, ;, }]
[;, }, }, }, step, ++, ;, }, if, (, isForward, (, ), ), {, joinInputs, (, getCfg, (, )]
[., add, (, nextNode, ), ;, }, }, }, step, ++, ;, }, if, (, isForward, (, ), ), {]
[), ;, }, }, }, step, ++, ;, }, if, (, isForward, (, ), ), {, joinInputs, (, getCfg, (]
[;, }, if, (, isForward, (, ), ), {, joinInputs, (, getCfg, (, ), ., getImplicitReturn, (, ), ), ;]
[++, ;, }, if, (, isForward, (, ), ), {, joinInputs, (, getCfg, (, ), ., getImplicitReturn, (, ), )]
[), {, joinInputs, (, getCfg, (, ), ., getImplicitReturn, (, ), ), ;, }, }, abstract, L, createInitialEstimateLattice, (, )]
[;, }, }, abstract, L, createInitialEstimateLattice, (, ), ;, abstract, L, createEntryLattice, (, ), ;, protected, void, initialize, (, )]
[), ;, }, }, abstract, L, createInitialEstimateLattice, (, ), ;, abstract, L, createEntryLattice, (, ), ;, protected, void, initialize, (]
[., getImplicitReturn, (, ), ), ;, }, }, abstract, L, createInitialEstimateLattice, (, ), ;, abstract, L, createEntryLattice, (, ), ;]
[;, for, (, DiGraphNode, <, N, ,, Branch, >, node, :, cfg, ., getDirectedGraphNodes, (, ), ), {, node, .]
[., clear, (, ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, node, :, cfg, ., getDirectedGraphNodes, (, )]
[), {, node, ., setAnnotation, (, new, FlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, createInitialEstimateLattice, (, ), )]
[., getDirectedGraphNodes, (, ), ), {, node, ., setAnnotation, (, new, FlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,]
[;, if, (, node, !=, cfg, ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, ), ;, }]
[., setAnnotation, (, new, FlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, createInitialEstimateLattice, (, ), ), ), ;, if]
[), ;, if, (, node, !=, cfg, ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, ), ;]
[,, createInitialEstimateLattice, (, ), ), ), ;, if, (, node, !=, cfg, ., getImplicitReturn, (, ), ), {, orderedWorkSet, .]
[), ), ;, if, (, node, !=, cfg, ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, )]
[), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }, protected, boolean, flow, (, DiGraphNode, <, N, ,]
[!=, cfg, ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }, protected, boolean]
[), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }, protected, boolean, flow, (, DiGraphNode, <, N, ,]
[., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }, protected, boolean, flow, (]
[;, }, }, }, protected, boolean, flow, (, DiGraphNode, <, N, ,, Branch, >, node, ), {, FlowState, <, L]
[., add, (, node, ), ;, }, }, }, protected, boolean, flow, (, DiGraphNode, <, N, ,, Branch, >, node]
[), ;, }, }, }, protected, boolean, flow, (, DiGraphNode, <, N, ,, Branch, >, node, ), {, FlowState, <]
[;, if, (, isForward, (, ), ), {, L, outBefore, =, state, ., out, ;, state, ., out, =, flowThrough]
[., getAnnotation, (, ), ;, if, (, isForward, (, ), ), {, L, outBefore, =, state, ., out, ;, state]
[), {, L, outBefore, =, state, ., out, ;, state, ., out, =, flowThrough, (, node, ., getValue, (, )]
[;, state, ., out, =, flowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;, return, !]
[., out, ;, state, ., out, =, flowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;]
[=, flowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;, return, !, outBefore, ., equals, (]
[., out, =, flowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;, return, !, outBefore, .]
[;, return, !, outBefore, ., equals, (, state, ., out, ), ;, }, else, {, L, inBefore, =, state, .]
[,, state, ., in, ), ;, return, !, outBefore, ., equals, (, state, ., out, ), ;, }, else, {]
[., getValue, (, ), ,, state, ., in, ), ;, return, !, outBefore, ., equals, (, state, ., out, )]
[), ;, return, !, outBefore, ., equals, (, state, ., out, ), ;, }, else, {, L, inBefore, =, state]
[., in, ), ;, return, !, outBefore, ., equals, (, state, ., out, ), ;, }, else, {, L, inBefore]
[;, }, else, {, L, inBefore, =, state, ., in, ;, state, ., in, =, flowThrough, (, node, ., getValue]
[;, }, else, {, L, inBefore, =, state, ., in, ;, state, ., in, =, flowThrough, (, node, ., getValue]
[., equals, (, state, ., out, ), ;, }, else, {, L, inBefore, =, state, ., in, ;, state, .]
[), ;, }, else, {, L, inBefore, =, state, ., in, ;, state, ., in, =, flowThrough, (, node, .]
[., out, ), ;, }, else, {, L, inBefore, =, state, ., in, ;, state, ., in, =, flowThrough, (]
[;, state, ., in, =, flowThrough, (, node, ., getValue, (, ), ,, state, ., out, ), ;, return, !]
[., in, ;, state, ., in, =, flowThrough, (, node, ., getValue, (, ), ,, state, ., out, ), ;]
[=, flowThrough, (, node, ., getValue, (, ), ,, state, ., out, ), ;, return, !, inBefore, ., equals, (]
[., in, =, flowThrough, (, node, ., getValue, (, ), ,, state, ., out, ), ;, return, !, inBefore, .]
[;, return, !, inBefore, ., equals, (, state, ., in, ), ;, }, }, protected, void, joinInputs, (, DiGraphNode, <]
[,, state, ., out, ), ;, return, !, inBefore, ., equals, (, state, ., in, ), ;, }, }, protected]
[., getValue, (, ), ,, state, ., out, ), ;, return, !, inBefore, ., equals, (, state, ., in, )]
[), ;, return, !, inBefore, ., equals, (, state, ., in, ), ;, }, }, protected, void, joinInputs, (, DiGraphNode]
[., out, ), ;, return, !, inBefore, ., equals, (, state, ., in, ), ;, }, }, protected, void, joinInputs]
[;, }, }, protected, void, joinInputs, (, DiGraphNode, <, N, ,, Branch, >, node, ), {, FlowState, <, L, >]
[;, }, }, protected, void, joinInputs, (, DiGraphNode, <, N, ,, Branch, >, node, ), {, FlowState, <, L, >]
[., equals, (, state, ., in, ), ;, }, }, protected, void, joinInputs, (, DiGraphNode, <, N, ,, Branch, >]
[), ;, }, }, protected, void, joinInputs, (, DiGraphNode, <, N, ,, Branch, >, node, ), {, FlowState, <, L]
[., in, ), ;, }, }, protected, void, joinInputs, (, DiGraphNode, <, N, ,, Branch, >, node, ), {, FlowState]
[;, if, (, isForward, (, ), ), {, if, (, cfg, ., getEntry, (, ), ==, node, ), {, state]
[., getAnnotation, (, ), ;, if, (, isForward, (, ), ), {, if, (, cfg, ., getEntry, (, ), ==]
[), {, if, (, cfg, ., getEntry, (, ), ==, node, ), {, state, ., setIn, (, createEntryLattice, (, )]
[), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, {, List, <, DiGraphNode, <, N, ,]
[==, node, ), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, {, List, <, DiGraphNode, <]
[., getEntry, (, ), ==, node, ), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, {]
[), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, {, List, <, DiGraphNode, <, N, ,]
[;, }, else, {, List, <, DiGraphNode, <, N, ,, Branch, >, >, inNodes, =, cfg, ., getDirectedPredNodes, (, node]
[., setIn, (, createEntryLattice, (, ), ), ;, }, else, {, List, <, DiGraphNode, <, N, ,, Branch, >, >]
[), ;, }, else, {, List, <, DiGraphNode, <, N, ,, Branch, >, >, inNodes, =, cfg, ., getDirectedPredNodes, (]
[;, if, (, inNodes, ., size, (, ), ==, 1, ), {, FlowState, <, L, >, inNodeState, =, inNodes, .]
[., getDirectedPredNodes, (, node, ), ;, if, (, inNodes, ., size, (, ), ==, 1, ), {, FlowState, <, L]
[), ;, if, (, inNodes, ., size, (, ), ==, 1, ), {, FlowState, <, L, >, inNodeState, =, inNodes]
[), {, FlowState, <, L, >, inNodeState, =, inNodes, ., get, (, 0, ), ., getAnnotation, (, ), ;, state]
[==, 1, ), {, FlowState, <, L, >, inNodeState, =, inNodes, ., get, (, 0, ), ., getAnnotation, (, )]
[., size, (, ), ==, 1, ), {, FlowState, <, L, >, inNodeState, =, inNodes, ., get, (, 0, )]
[), {, FlowState, <, L, >, inNodeState, =, inNodes, ., get, (, 0, ), ., getAnnotation, (, ), ;, state]
[;, state, ., setIn, (, inNodeState, ., getOut, (, ), ), ;, }, else, if, (, inNodes, ., size, (]
[., getAnnotation, (, ), ;, state, ., setIn, (, inNodeState, ., getOut, (, ), ), ;, }, else, if, (]
[., get, (, 0, ), ., getAnnotation, (, ), ;, state, ., setIn, (, inNodeState, ., getOut, (, ), )]
[), ., getAnnotation, (, ), ;, state, ., setIn, (, inNodeState, ., getOut, (, ), ), ;, }, else, if]
[;, }, else, if, (, inNodes, ., size, (, ), >, 1, ), {, List, <, L, >, values, =]
[., setIn, (, inNodeState, ., getOut, (, ), ), ;, }, else, if, (, inNodes, ., size, (, ), >]
[), ;, }, else, if, (, inNodes, ., size, (, ), >, 1, ), {, List, <, L, >, values]
[., getOut, (, ), ), ;, }, else, if, (, inNodes, ., size, (, ), >, 1, ), {, List]
[), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (, inNodes, ., size, (, ), )]
[>, 1, ), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (, inNodes, ., size, (]
[., size, (, ), >, 1, ), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (]
[), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (, inNodes, ., size, (, ), )]
[;, for, (, DiGraphNode, <, N, ,, Branch, >, currentNode, :, inNodes, ), {, FlowState, <, L, >, currentNodeState, =]
[), ;, for, (, DiGraphNode, <, N, ,, Branch, >, currentNode, :, inNodes, ), {, FlowState, <, L, >, currentNodeState]
[., size, (, ), ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, currentNode, :, inNodes, ), {, FlowState]
[), {, FlowState, <, L, >, currentNodeState, =, currentNode, ., getAnnotation, (, ), ;, values, ., add, (, currentNodeState, .]
[;, values, ., add, (, currentNodeState, ., getOut, (, ), ), ;, }, state, ., setIn, (, joinOp, ., apply]
[., getAnnotation, (, ), ;, values, ., add, (, currentNodeState, ., getOut, (, ), ), ;, }, state, ., setIn]
[;, }, state, ., setIn, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, else, {, List]
[., add, (, currentNodeState, ., getOut, (, ), ), ;, }, state, ., setIn, (, joinOp, ., apply, (, values]
[), ;, }, state, ., setIn, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, else, {]
[., getOut, (, ), ), ;, }, state, ., setIn, (, joinOp, ., apply, (, values, ), ), ;, }]
[;, }, }, }, else, {, List, <, DiGraphNode, <, N, ,, Branch, >, >, inNodes, =, cfg, ., getDirectedSuccNodes]
[., setIn, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, else, {, List, <, DiGraphNode, <]
[), ;, }, }, }, else, {, List, <, DiGraphNode, <, N, ,, Branch, >, >, inNodes, =, cfg, .]
[., apply, (, values, ), ), ;, }, }, }, else, {, List, <, DiGraphNode, <, N, ,, Branch, >]
[), ), ;, }, }, }, else, {, List, <, DiGraphNode, <, N, ,, Branch, >, >, inNodes, =, cfg]
[;, if, (, inNodes, ., size, (, ), ==, 1, ), {, DiGraphNode, <, N, ,, Branch, >, inNode, =]
[., getDirectedSuccNodes, (, node, ), ;, if, (, inNodes, ., size, (, ), ==, 1, ), {, DiGraphNode, <, N]
[), ;, if, (, inNodes, ., size, (, ), ==, 1, ), {, DiGraphNode, <, N, ,, Branch, >, inNode]
[), {, DiGraphNode, <, N, ,, Branch, >, inNode, =, inNodes, ., get, (, 0, ), ;, if, (, inNode]
[==, 1, ), {, DiGraphNode, <, N, ,, Branch, >, inNode, =, inNodes, ., get, (, 0, ), ;, if]
[., size, (, ), ==, 1, ), {, DiGraphNode, <, N, ,, Branch, >, inNode, =, inNodes, ., get, (]
[), {, DiGraphNode, <, N, ,, Branch, >, inNode, =, inNodes, ., get, (, 0, ), ;, if, (, inNode]
[;, if, (, inNode, ==, cfg, ., getImplicitReturn, (, ), ), {, state, ., setOut, (, createEntryLattice, (, ), )]
[., get, (, 0, ), ;, if, (, inNode, ==, cfg, ., getImplicitReturn, (, ), ), {, state, ., setOut]
[), ;, if, (, inNode, ==, cfg, ., getImplicitReturn, (, ), ), {, state, ., setOut, (, createEntryLattice, (, )]
[), {, state, ., setOut, (, createEntryLattice, (, ), ), ;, }, else, {, FlowState, <, L, >, inNodeState, =]
[==, cfg, ., getImplicitReturn, (, ), ), {, state, ., setOut, (, createEntryLattice, (, ), ), ;, }, else, {]
[), {, state, ., setOut, (, createEntryLattice, (, ), ), ;, }, else, {, FlowState, <, L, >, inNodeState, =]
[., getImplicitReturn, (, ), ), {, state, ., setOut, (, createEntryLattice, (, ), ), ;, }, else, {, FlowState, <]
[;, }, else, {, FlowState, <, L, >, inNodeState, =, inNode, ., getAnnotation, (, ), ;, state, ., setOut, (]
[., setOut, (, createEntryLattice, (, ), ), ;, }, else, {, FlowState, <, L, >, inNodeState, =, inNode, ., getAnnotation]
[), ;, }, else, {, FlowState, <, L, >, inNodeState, =, inNode, ., getAnnotation, (, ), ;, state, ., setOut]
[;, state, ., setOut, (, inNodeState, ., getIn, (, ), ), ;, }, }, else, if, (, inNodes, ., size]
[., getAnnotation, (, ), ;, state, ., setOut, (, inNodeState, ., getIn, (, ), ), ;, }, }, else, if]
[;, }, }, else, if, (, inNodes, ., size, (, ), >, 1, ), {, List, <, L, >, values]
[., setOut, (, inNodeState, ., getIn, (, ), ), ;, }, }, else, if, (, inNodes, ., size, (, )]
[), ;, }, }, else, if, (, inNodes, ., size, (, ), >, 1, ), {, List, <, L, >]
[., getIn, (, ), ), ;, }, }, else, if, (, inNodes, ., size, (, ), >, 1, ), {]
[), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (, inNodes, ., size, (, ), )]
[>, 1, ), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (, inNodes, ., size, (]
[., size, (, ), >, 1, ), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (]
[), {, List, <, L, >, values, =, new, ArrayList, <, L, >, (, inNodes, ., size, (, ), )]
[;, for, (, DiGraphNode, <, N, ,, Branch, >, currentNode, :, inNodes, ), {, FlowState, <, L, >, currentNodeState, =]
[), ;, for, (, DiGraphNode, <, N, ,, Branch, >, currentNode, :, inNodes, ), {, FlowState, <, L, >, currentNodeState]
[., size, (, ), ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, currentNode, :, inNodes, ), {, FlowState]
[), {, FlowState, <, L, >, currentNodeState, =, currentNode, ., getAnnotation, (, ), ;, values, ., add, (, currentNodeState, .]
[;, values, ., add, (, currentNodeState, ., getIn, (, ), ), ;, }, state, ., setOut, (, joinOp, ., apply]
[., getAnnotation, (, ), ;, values, ., add, (, currentNodeState, ., getIn, (, ), ), ;, }, state, ., setOut]
[;, }, state, ., setOut, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, static, class, FlowState]
[., add, (, currentNodeState, ., getIn, (, ), ), ;, }, state, ., setOut, (, joinOp, ., apply, (, values]
[), ;, }, state, ., setOut, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, static, class]
[., getIn, (, ), ), ;, }, state, ., setOut, (, joinOp, ., apply, (, values, ), ), ;, }]
[;, }, }, }, static, class, FlowState, <, L, extends, LatticeElement, >, implements, Annotation, {, private, L, in, ;, private]
[., setOut, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, static, class, FlowState, <, L, extends]
[), ;, }, }, }, static, class, FlowState, <, L, extends, LatticeElement, >, implements, Annotation, {, private, L, in, ;]
[., apply, (, values, ), ), ;, }, }, }, static, class, FlowState, <, L, extends, LatticeElement, >, implements, Annotation]
[), ), ;, }, }, }, static, class, FlowState, <, L, extends, LatticeElement, >, implements, Annotation, {, private, L, in]
[;, Preconditions, ., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this, ., out, =, outState, ;]
[., checkNotNull, (, inState, ), ;, Preconditions, ., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this]
[), ;, Preconditions, ., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this, ., out, =, outState]
[;, this, ., in, =, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return]
[., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this, ., out, =, outState, ;, }, L]
[), ;, this, ., in, =, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {]
[=, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void]
[., in, =, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;]
[;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (]
[=, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (, L, in, ), {]
[., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (, L, in]
[;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (, L, in, ), {, Preconditions, .]
[;, }, void, setIn, (, L, in, ), {, Preconditions, ., checkNotNull, (, in, ), ;, this, ., in, =]
[;, this, ., in, =, in, ;, }, L, getOut, (, ), {, return, out, ;, }, void, setOut, (]
[., checkNotNull, (, in, ), ;, this, ., in, =, in, ;, }, L, getOut, (, ), {, return, out]
[), ;, this, ., in, =, in, ;, }, L, getOut, (, ), {, return, out, ;, }, void, setOut]
[=, in, ;, }, L, getOut, (, ), {, return, out, ;, }, void, setOut, (, L, out, ), {]
[., in, =, in, ;, }, L, getOut, (, ), {, return, out, ;, }, void, setOut, (, L, out]
[;, }, L, getOut, (, ), {, return, out, ;, }, void, setOut, (, L, out, ), {, Preconditions, .]
[;, }, void, setOut, (, L, out, ), {, Preconditions, ., checkNotNull, (, out, ), ;, this, ., out, =]
[;, this, ., out, =, out, ;, }, @, Override, public, String, toString, (, ), {, return, String, ., format]
[., checkNotNull, (, out, ), ;, this, ., out, =, out, ;, }, @, Override, public, String, toString, (, )]
[), ;, this, ., out, =, out, ;, }, @, Override, public, String, toString, (, ), {, return, String, .]
[=, out, ;, }, @, Override, public, String, toString, (, ), {, return, String, ., format, (, "IN: %s OUT: %s", ,, in]
[., out, =, out, ;, }, @, Override, public, String, toString, (, ), {, return, String, ., format, (, "IN: %s OUT: %s"]
[;, }, @, Override, public, String, toString, (, ), {, return, String, ., format, (, "IN: %s OUT: %s", ,, in, ,, out]
[;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, in, ,, out, ), ;]
[., format, (, "IN: %s OUT: %s", ,, in, ,, out, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[,, in, ,, out, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (]
[,, out, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, in, ,]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, in, ,, out, )]
[;, }, }, static, class, MaxIterationsExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 1L, ;, MaxIterationsExceededException, (, String]
[., hashCode, (, in, ,, out, ), ;, }, }, static, class, MaxIterationsExceededException, extends, RuntimeException, {, private, static, final, long]
[,, out, ), ;, }, }, static, class, MaxIterationsExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 1L, ;]
[), ;, }, }, static, class, MaxIterationsExceededException, extends, RuntimeException, {, private, static, final, long, serialVersionUID, =, 1L, ;, MaxIterationsExceededException, (]
[;, MaxIterationsExceededException, (, String, msg, ), {, super, (, msg, ), ;, }, }, abstract, static, class, BranchedForwardDataFlowAnalysis, <, N]
[), ;, }, }, abstract, static, class, BranchedForwardDataFlowAnalysis, <, N, ,, L, extends, LatticeElement, >, extends, DataFlowAnalysis, <, N, ,]
[;, for, (, DiGraphNode, <, N, ,, Branch, >, node, :, getCfg, (, ), ., getDirectedGraphNodes, (, ), ), {]
[., clear, (, ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, node, :, getCfg, (, ), ., getDirectedGraphNodes]
[), {, int, outEdgeCount, =, getCfg, (, ), ., getOutEdges, (, node, ., getValue, (, ), ), ., size, (]
[., getDirectedGraphNodes, (, ), ), {, int, outEdgeCount, =, getCfg, (, ), ., getOutEdges, (, node, ., getValue, (, )]
[;, List, <, L, >, outLattices, =, Lists, ., newArrayList, (, ), ;, for, (, int, i, =, 0, ;]
[., size, (, ), ;, List, <, L, >, outLattices, =, Lists, ., newArrayList, (, ), ;, for, (, int]
[., getOutEdges, (, node, ., getValue, (, ), ), ., size, (, ), ;, List, <, L, >, outLattices, =]
[), ., size, (, ), ;, List, <, L, >, outLattices, =, Lists, ., newArrayList, (, ), ;, for, (]
[., getValue, (, ), ), ., size, (, ), ;, List, <, L, >, outLattices, =, Lists, ., newArrayList, (]
[;, for, (, int, i, =, 0, ;, i, <, outEdgeCount, ;, i, ++, ), {, outLattices, ., add, (]
[., newArrayList, (, ), ;, for, (, int, i, =, 0, ;, i, <, outEdgeCount, ;, i, ++, ), {]
[;, i, <, outEdgeCount, ;, i, ++, ), {, outLattices, ., add, (, createInitialEstimateLattice, (, ), ), ;, }, node]
[;, i, ++, ), {, outLattices, ., add, (, createInitialEstimateLattice, (, ), ), ;, }, node, ., setAnnotation, (, new]
[<, outEdgeCount, ;, i, ++, ), {, outLattices, ., add, (, createInitialEstimateLattice, (, ), ), ;, }, node, ., setAnnotation]
[;, i, ++, ), {, outLattices, ., add, (, createInitialEstimateLattice, (, ), ), ;, }, node, ., setAnnotation, (, new]
[), {, outLattices, ., add, (, createInitialEstimateLattice, (, ), ), ;, }, node, ., setAnnotation, (, new, BranchedFlowState, <, L]
[++, ), {, outLattices, ., add, (, createInitialEstimateLattice, (, ), ), ;, }, node, ., setAnnotation, (, new, BranchedFlowState, <]
[;, }, node, ., setAnnotation, (, new, BranchedFlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, outLattices, ), ), ;]
[., add, (, createInitialEstimateLattice, (, ), ), ;, }, node, ., setAnnotation, (, new, BranchedFlowState, <, L, >, (, createInitialEstimateLattice]
[), ;, }, node, ., setAnnotation, (, new, BranchedFlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, outLattices, ), )]
[;, if, (, node, !=, getCfg, (, ), ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, )]
[., setAnnotation, (, new, BranchedFlowState, <, L, >, (, createInitialEstimateLattice, (, ), ,, outLattices, ), ), ;, if, (, node]
[), ;, if, (, node, !=, getCfg, (, ), ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node]
[,, outLattices, ), ), ;, if, (, node, !=, getCfg, (, ), ., getImplicitReturn, (, ), ), {, orderedWorkSet, .]
[), ), ;, if, (, node, !=, getCfg, (, ), ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (]
[), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }, BranchedForwardDataFlowAnalysis, (, ControlFlowGraph, <, N, >, targetCfg, ,]
[!=, getCfg, (, ), ., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }]
[), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }, BranchedForwardDataFlowAnalysis, (, ControlFlowGraph, <, N, >, targetCfg, ,]
[., getImplicitReturn, (, ), ), {, orderedWorkSet, ., add, (, node, ), ;, }, }, }, BranchedForwardDataFlowAnalysis, (, ControlFlowGraph, <]
[;, }, }, }, BranchedForwardDataFlowAnalysis, (, ControlFlowGraph, <, N, >, targetCfg, ,, JoinOp, <, L, >, joinOp, ), {, super]
[., add, (, node, ), ;, }, }, }, BranchedForwardDataFlowAnalysis, (, ControlFlowGraph, <, N, >, targetCfg, ,, JoinOp, <, L]
[), ;, }, }, }, BranchedForwardDataFlowAnalysis, (, ControlFlowGraph, <, N, >, targetCfg, ,, JoinOp, <, L, >, joinOp, ), {]
[,, joinOp, ), ;, }, @, Override, L, getExitLatticeElement, (, ), {, DiGraphNode, <, N, ,, Branch, >, node, =]
[), ;, }, @, Override, L, getExitLatticeElement, (, ), {, DiGraphNode, <, N, ,, Branch, >, node, =, getCfg, (]
[;, BranchedFlowState, <, L, >, state, =, node, ., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ;]
[., getImplicitReturn, (, ), ;, BranchedFlowState, <, L, >, state, =, node, ., getAnnotation, (, ), ;, return, state, .]
[;, return, state, ., getIn, (, ), ;, }, @, Override, final, boolean, isForward, (, ), {, return, true, ;]
[., getAnnotation, (, ), ;, return, state, ., getIn, (, ), ;, }, @, Override, final, boolean, isForward, (, )]
[;, }, @, Override, final, boolean, isForward, (, ), {, return, true, ;, }, abstract, List, <, L, >, branchedFlowThrough]
[., getIn, (, ), ;, }, @, Override, final, boolean, isForward, (, ), {, return, true, ;, }, abstract, List]
[;, }, abstract, List, <, L, >, branchedFlowThrough, (, N, node, ,, L, input, ), ;, @, Override, protected, final]
[;, List, <, L, >, outBefore, =, state, ., out, ;, state, ., out, =, branchedFlowThrough, (, node, ., getValue]
[., getAnnotation, (, ), ;, List, <, L, >, outBefore, =, state, ., out, ;, state, ., out, =, branchedFlowThrough]
[;, state, ., out, =, branchedFlowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;, Preconditions, .]
[., out, ;, state, ., out, =, branchedFlowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;]
[=, branchedFlowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;, Preconditions, ., checkState, (, outBefore, .]
[., out, =, branchedFlowThrough, (, node, ., getValue, (, ), ,, state, ., in, ), ;, Preconditions, ., checkState, (]
[;, Preconditions, ., checkState, (, outBefore, ., size, (, ), ==, state, ., out, ., size, (, ), ), ;]
[,, state, ., in, ), ;, Preconditions, ., checkState, (, outBefore, ., size, (, ), ==, state, ., out, .]
[., getValue, (, ), ,, state, ., in, ), ;, Preconditions, ., checkState, (, outBefore, ., size, (, ), ==]
[), ;, Preconditions, ., checkState, (, outBefore, ., size, (, ), ==, state, ., out, ., size, (, ), )]
[., in, ), ;, Preconditions, ., checkState, (, outBefore, ., size, (, ), ==, state, ., out, ., size, (]
[;, for, (, int, i, =, 0, ;, i, <, outBefore, ., size, (, ), ;, i, ++, ), {]
[., checkState, (, outBefore, ., size, (, ), ==, state, ., out, ., size, (, ), ), ;, for, (]
[), ;, for, (, int, i, =, 0, ;, i, <, outBefore, ., size, (, ), ;, i, ++, )]
[==, state, ., out, ., size, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, outBefore]
[., size, (, ), ==, state, ., out, ., size, (, ), ), ;, for, (, int, i, =, 0]
[), ;, for, (, int, i, =, 0, ;, i, <, outBefore, ., size, (, ), ;, i, ++, )]
[., size, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, outBefore, ., size, (, )]
[., out, ., size, (, ), ), ;, for, (, int, i, =, 0, ;, i, <, outBefore, ., size]
[;, i, <, outBefore, ., size, (, ), ;, i, ++, ), {, if, (, !, outBefore, ., get, (]
[;, i, ++, ), {, if, (, !, outBefore, ., get, (, i, ), ., equals, (, state, ., out]
[<, outBefore, ., size, (, ), ;, i, ++, ), {, if, (, !, outBefore, ., get, (, i, )]
[;, i, ++, ), {, if, (, !, outBefore, ., get, (, i, ), ., equals, (, state, ., out]
[., size, (, ), ;, i, ++, ), {, if, (, !, outBefore, ., get, (, i, ), ., equals]
[), {, if, (, !, outBefore, ., get, (, i, ), ., equals, (, state, ., out, ., get, (]
[++, ), {, if, (, !, outBefore, ., get, (, i, ), ., equals, (, state, ., out, ., get]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected, void, joinInputs, (, DiGraphNode, <, N]
[), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected, void, joinInputs, (, DiGraphNode, <, N]
[., equals, (, state, ., out, ., get, (, i, ), ), ), {, return, true, ;, }, }, return]
[., get, (, i, ), ., equals, (, state, ., out, ., get, (, i, ), ), ), {, return]
[), ., equals, (, state, ., out, ., get, (, i, ), ), ), {, return, true, ;, }, }]
[), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected, void, joinInputs, (, DiGraphNode, <]
[., get, (, i, ), ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected]
[., out, ., get, (, i, ), ), ), {, return, true, ;, }, }, return, false, ;, }, @]
[), ), ), {, return, true, ;, }, }, return, false, ;, }, @, Override, protected, void, joinInputs, (, DiGraphNode]
[;, }, }, return, false, ;, }, @, Override, protected, void, joinInputs, (, DiGraphNode, <, N, ,, Branch, >, node]
[;, }, @, Override, protected, void, joinInputs, (, DiGraphNode, <, N, ,, Branch, >, node, ), {, BranchedFlowState, <, L]
[;, List, <, DiGraphNode, <, N, ,, Branch, >, >, predNodes, =, getCfg, (, ), ., getDirectedPredNodes, (, node, )]
[., getAnnotation, (, ), ;, List, <, DiGraphNode, <, N, ,, Branch, >, >, predNodes, =, getCfg, (, ), .]
[;, List, <, L, >, values, =, new, ArrayList, <, L, >, (, predNodes, ., size, (, ), ), ;]
[., getDirectedPredNodes, (, node, ), ;, List, <, L, >, values, =, new, ArrayList, <, L, >, (, predNodes, .]
[), ;, List, <, L, >, values, =, new, ArrayList, <, L, >, (, predNodes, ., size, (, ), )]
[;, for, (, DiGraphNode, <, N, ,, Branch, >, predNode, :, predNodes, ), {, BranchedFlowState, <, L, >, predNodeState, =]
[), ;, for, (, DiGraphNode, <, N, ,, Branch, >, predNode, :, predNodes, ), {, BranchedFlowState, <, L, >, predNodeState]
[., size, (, ), ), ;, for, (, DiGraphNode, <, N, ,, Branch, >, predNode, :, predNodes, ), {, BranchedFlowState]
[), {, BranchedFlowState, <, L, >, predNodeState, =, predNode, ., getAnnotation, (, ), ;, L, in, =, predNodeState, ., out]
[;, L, in, =, predNodeState, ., out, ., get, (, getCfg, (, ), ., getDirectedSuccNodes, (, predNode, ), ., indexOf]
[., getAnnotation, (, ), ;, L, in, =, predNodeState, ., out, ., get, (, getCfg, (, ), ., getDirectedSuccNodes, (]
[;, values, ., add, (, in, ), ;, }, if, (, getCfg, (, ), ., getEntry, (, ), ==, node]
[., get, (, getCfg, (, ), ., getDirectedSuccNodes, (, predNode, ), ., indexOf, (, node, ), ), ;, values, .]
[., out, ., get, (, getCfg, (, ), ., getDirectedSuccNodes, (, predNode, ), ., indexOf, (, node, ), ), ;]
[), ;, values, ., add, (, in, ), ;, }, if, (, getCfg, (, ), ., getEntry, (, ), ==]
[., indexOf, (, node, ), ), ;, values, ., add, (, in, ), ;, }, if, (, getCfg, (, )]
[., getDirectedSuccNodes, (, predNode, ), ., indexOf, (, node, ), ), ;, values, ., add, (, in, ), ;, }]
[), ., indexOf, (, node, ), ), ;, values, ., add, (, in, ), ;, }, if, (, getCfg, (]
[), ), ;, values, ., add, (, in, ), ;, }, if, (, getCfg, (, ), ., getEntry, (, )]
[;, }, if, (, getCfg, (, ), ., getEntry, (, ), ==, node, ), {, state, ., setIn, (, createEntryLattice]
[., add, (, in, ), ;, }, if, (, getCfg, (, ), ., getEntry, (, ), ==, node, ), {]
[), ;, }, if, (, getCfg, (, ), ., getEntry, (, ), ==, node, ), {, state, ., setIn, (]
[), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, if, (, !, values, ., isEmpty, (]
[==, node, ), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, if, (, !, values, .]
[., getEntry, (, ), ==, node, ), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, if]
[), {, state, ., setIn, (, createEntryLattice, (, ), ), ;, }, else, if, (, !, values, ., isEmpty, (]
[;, }, else, if, (, !, values, ., isEmpty, (, ), ), {, state, ., setIn, (, joinOp, ., apply]
[., setIn, (, createEntryLattice, (, ), ), ;, }, else, if, (, !, values, ., isEmpty, (, ), ), {]
[), ;, }, else, if, (, !, values, ., isEmpty, (, ), ), {, state, ., setIn, (, joinOp, .]
[), {, state, ., setIn, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, static, class, BranchedFlowState]
[), {, state, ., setIn, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, static, class, BranchedFlowState]
[., isEmpty, (, ), ), {, state, ., setIn, (, joinOp, ., apply, (, values, ), ), ;, }, }]
[;, }, }, }, static, class, BranchedFlowState, <, L, extends, LatticeElement, >, implements, Annotation, {, private, L, in, ;, private]
[., setIn, (, joinOp, ., apply, (, values, ), ), ;, }, }, }, static, class, BranchedFlowState, <, L, extends]
[), ;, }, }, }, static, class, BranchedFlowState, <, L, extends, LatticeElement, >, implements, Annotation, {, private, L, in, ;]
[., apply, (, values, ), ), ;, }, }, }, static, class, BranchedFlowState, <, L, extends, LatticeElement, >, implements, Annotation]
[), ), ;, }, }, }, static, class, BranchedFlowState, <, L, extends, LatticeElement, >, implements, Annotation, {, private, L, in]
[;, Preconditions, ., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this, ., out, =, outState, ;]
[., checkNotNull, (, inState, ), ;, Preconditions, ., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this]
[), ;, Preconditions, ., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this, ., out, =, outState]
[;, this, ., in, =, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return]
[., checkNotNull, (, outState, ), ;, this, ., in, =, inState, ;, this, ., out, =, outState, ;, }, L]
[), ;, this, ., in, =, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {]
[=, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void]
[., in, =, inState, ;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;]
[;, this, ., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (]
[=, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (, L, in, ), {]
[., out, =, outState, ;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (, L, in]
[;, }, L, getIn, (, ), {, return, in, ;, }, void, setIn, (, L, in, ), {, Preconditions, .]
[;, }, void, setIn, (, L, in, ), {, Preconditions, ., checkNotNull, (, in, ), ;, this, ., in, =]
[;, this, ., in, =, in, ;, }, List, <, L, >, getOut, (, ), {, return, out, ;, }]
[., checkNotNull, (, in, ), ;, this, ., in, =, in, ;, }, List, <, L, >, getOut, (, )]
[), ;, this, ., in, =, in, ;, }, List, <, L, >, getOut, (, ), {, return, out, ;]
[=, in, ;, }, List, <, L, >, getOut, (, ), {, return, out, ;, }, void, setOut, (, List]
[., in, =, in, ;, }, List, <, L, >, getOut, (, ), {, return, out, ;, }, void, setOut]
[;, }, List, <, L, >, getOut, (, ), {, return, out, ;, }, void, setOut, (, List, <, L]
[;, }, void, setOut, (, List, <, L, >, out, ), {, Preconditions, ., checkNotNull, (, out, ), ;, for]
[;, for, (, L, item, :, out, ), {, Preconditions, ., checkNotNull, (, item, ), ;, }, this, ., out]
[., checkNotNull, (, out, ), ;, for, (, L, item, :, out, ), {, Preconditions, ., checkNotNull, (, item, )]
[), ;, for, (, L, item, :, out, ), {, Preconditions, ., checkNotNull, (, item, ), ;, }, this, .]
[), {, Preconditions, ., checkNotNull, (, item, ), ;, }, this, ., out, =, out, ;, }, @, Override, public]
[;, }, this, ., out, =, out, ;, }, @, Override, public, String, toString, (, ), {, return, String, .]
[., checkNotNull, (, item, ), ;, }, this, ., out, =, out, ;, }, @, Override, public, String, toString, (]
[), ;, }, this, ., out, =, out, ;, }, @, Override, public, String, toString, (, ), {, return, String]
[=, out, ;, }, @, Override, public, String, toString, (, ), {, return, String, ., format, (, "IN: %s OUT: %s", ,, in]
[., out, =, out, ;, }, @, Override, public, String, toString, (, ), {, return, String, ., format, (, "IN: %s OUT: %s"]
[;, }, @, Override, public, String, toString, (, ), {, return, String, ., format, (, "IN: %s OUT: %s", ,, in, ,, out]
[;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, in, ,, out, ), ;]
[., format, (, "IN: %s OUT: %s", ,, in, ,, out, ), ;, }, @, Override, public, int, hashCode, (, ), {, return]
[,, in, ,, out, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (]
[,, out, ), ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, in, ,]
[), ;, }, @, Override, public, int, hashCode, (, ), {, return, Objects, ., hashCode, (, in, ,, out, )]
[;, }, }, static, void, computeEscaped, (, final, Scope, jsScope, ,, final, Set, <, Var, >, escaped, ,, AbstractCompiler, compiler]
[., hashCode, (, in, ,, out, ), ;, }, }, static, void, computeEscaped, (, final, Scope, jsScope, ,, final, Set]
[,, out, ), ;, }, }, static, void, computeEscaped, (, final, Scope, jsScope, ,, final, Set, <, Var, >, escaped]
[), ;, }, }, static, void, computeEscaped, (, final, Scope, jsScope, ,, final, Set, <, Var, >, escaped, ,, AbstractCompiler]
[;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, finder, ), ;, t, ., traverseAtScope, (, jsScope, ), ;, for]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Var, var, =, t, ., getScope]
[||, parent, ., isFunction, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;]
[||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return, ;, }, String, name]
[==, t, ., getScope, (, ), ||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, ), )]
[||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return, ;, }, String, name]
[., getScope, (, ), ||, !, n, ., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return]
[||, parent, ., isFunction, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;]
[||, parent, ., isFunction, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;]
[., isName, (, ), ||, parent, ., isFunction, (, ), ), {, return, ;, }, String, name, =, n, .]
[), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Var, var, =, t, ., getScope]
[., isFunction, (, ), ), {, return, ;, }, String, name, =, n, ., getString, (, ), ;, Var, var]
[;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null]
[., getString, (, ), ;, Var, var, =, t, ., getScope, (, ), ., getVar, (, name, ), ;, if]
[;, if, (, var, !=, null, &&, var, ., scope, ==, jsScope, ), {, escaped, ., add, (, jsScope, .]
[., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., scope, ==, jsScope, ), {, escaped]
[., getScope, (, ), ., getVar, (, name, ), ;, if, (, var, !=, null, &&, var, ., scope, ==]
[), ;, if, (, var, !=, null, &&, var, ., scope, ==, jsScope, ), {, escaped, ., add, (, jsScope]
[), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;, }, }, }, ;, NodeTraversal, t]
[&&, var, ., scope, ==, jsScope, ), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;]
[!=, null, &&, var, ., scope, ==, jsScope, ), {, escaped, ., add, (, jsScope, ., getVar, (, name, )]
[&&, var, ., scope, ==, jsScope, ), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;]
[), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;, }, }, }, ;, NodeTraversal, t]
[==, jsScope, ), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;, }, }, }, ;]
[., scope, ==, jsScope, ), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;, }, }]
[), {, escaped, ., add, (, jsScope, ., getVar, (, name, ), ), ;, }, }, }, ;, NodeTraversal, t]
[;, }, }, }, ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, finder, ), ;, t, ., traverseAtScope, (]
[., add, (, jsScope, ., getVar, (, name, ), ), ;, }, }, }, ;, NodeTraversal, t, =, new, NodeTraversal]
[), ;, }, }, }, ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, finder, ), ;, t, ., traverseAtScope]
[., getVar, (, name, ), ), ;, }, }, }, ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, finder]
[), ), ;, }, }, }, ;, NodeTraversal, t, =, new, NodeTraversal, (, compiler, ,, finder, ), ;, t, .]
[;, t, ., traverseAtScope, (, jsScope, ), ;, for, (, Iterator, <, Var, >, i, =, jsScope, ., getVars, (]
[,, finder, ), ;, t, ., traverseAtScope, (, jsScope, ), ;, for, (, Iterator, <, Var, >, i, =, jsScope]
[), ;, t, ., traverseAtScope, (, jsScope, ), ;, for, (, Iterator, <, Var, >, i, =, jsScope, ., getVars]
[;, for, (, Iterator, <, Var, >, i, =, jsScope, ., getVars, (, ), ;, i, ., hasNext, (, )]
[., traverseAtScope, (, jsScope, ), ;, for, (, Iterator, <, Var, >, i, =, jsScope, ., getVars, (, ), ;]
[), ;, for, (, Iterator, <, Var, >, i, =, jsScope, ., getVars, (, ), ;, i, ., hasNext, (]
[;, i, ., hasNext, (, ), ;, ), {, Var, var, =, i, ., next, (, ), ;, if, (]
[., getVars, (, ), ;, i, ., hasNext, (, ), ;, ), {, Var, var, =, i, ., next, (]
[;, ), {, Var, var, =, i, ., next, (, ), ;, if, (, var, ., getParentNode, (, ), .]
[., hasNext, (, ), ;, ), {, Var, var, =, i, ., next, (, ), ;, if, (, var, .]
[;, if, (, var, ., getParentNode, (, ), ., isCatch, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported]
[., next, (, ), ;, if, (, var, ., getParentNode, (, ), ., isCatch, (, ), ||, compiler, ., getCodingConvention]
[), {, escaped, ., add, (, var, ), ;, }, }, }, }]
[||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., getName, (, ), ), ), {, escaped, ., add]
[., isCatch, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., getName, (, ), ), )]
[., getParentNode, (, ), ., isCatch, (, ), ||, compiler, ., getCodingConvention, (, ), ., isExported, (, var, ., getName]
[), {, escaped, ., add, (, var, ), ;, }, }, }, }]
[., isExported, (, var, ., getName, (, ), ), ), {, escaped, ., add, (, var, ), ;, }, }]
[., getCodingConvention, (, ), ., isExported, (, var, ., getName, (, ), ), ), {, escaped, ., add, (, var]
[), ), {, escaped, ., add, (, var, ), ;, }, }, }, }]
[., getName, (, ), ), ), {, escaped, ., add, (, var, ), ;, }, }, }, }]
[;, }, }, }, }]
[., add, (, var, ), ;, }, }, }, }]
[), ;, }, }, }, }]
