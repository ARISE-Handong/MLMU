[;, protected, final, RandomGenerator, random, ;, private, final, List, <, T, >, singletons, ;, private, final, double, [, ], probabilities]
[,, pmf, ), ;, }, public, EnumeratedDistribution, (, final, RandomGenerator, rng, ,, final, List, <, Pair, <, T, ,, Double]
[), ;, }, public, EnumeratedDistribution, (, final, RandomGenerator, rng, ,, final, List, <, Pair, <, T, ,, Double, >, >]
[=, rng, ;, singletons, =, new, ArrayList, <, T, >, (, pmf, ., size, (, ), ), ;, final, double]
[;, singletons, =, new, ArrayList, <, T, >, (, pmf, ., size, (, ), ), ;, final, double, [, ]]
[=, new, ArrayList, <, T, >, (, pmf, ., size, (, ), ), ;, final, double, [, ], probs, =]
[;, final, double, [, ], probs, =, new, double, [, pmf, ., size, (, ), ], ;, for, (, int]
[), ;, final, double, [, ], probs, =, new, double, [, pmf, ., size, (, ), ], ;, for, (]
[., size, (, ), ), ;, final, double, [, ], probs, =, new, double, [, pmf, ., size, (, )]
[;, for, (, int, i, =, 0, ;, i, <, pmf, ., size, (, ), ;, i, ++, ), {]
[], ;, for, (, int, i, =, 0, ;, i, <, pmf, ., size, (, ), ;, i, ++, )]
[., size, (, ), ], ;, for, (, int, i, =, 0, ;, i, <, pmf, ., size, (, )]
[;, i, <, pmf, ., size, (, ), ;, i, ++, ), {, final, Pair, <, T, ,, Double, >]
[;, i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, )]
[<, pmf, ., size, (, ), ;, i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =]
[;, i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, )]
[., size, (, ), ;, i, ++, ), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, .]
[), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, ), ;, singletons, .]
[++, ), {, final, Pair, <, T, ,, Double, >, sample, =, pmf, ., get, (, i, ), ;, singletons]
[;, singletons, ., add, (, sample, ., getKey, (, ), ), ;, final, double, p, =, sample, ., getValue, (]
[., get, (, i, ), ;, singletons, ., add, (, sample, ., getKey, (, ), ), ;, final, double, p]
[), ;, singletons, ., add, (, sample, ., getKey, (, ), ), ;, final, double, p, =, sample, ., getValue]
[;, final, double, p, =, sample, ., getValue, (, ), ;, if, (, p, <, 0, ), {, throw, new]
[., add, (, sample, ., getKey, (, ), ), ;, final, double, p, =, sample, ., getValue, (, ), ;]
[), ;, final, double, p, =, sample, ., getValue, (, ), ;, if, (, p, <, 0, ), {, throw]
[., getKey, (, ), ), ;, final, double, p, =, sample, ., getValue, (, ), ;, if, (, p, <]
[;, if, (, p, <, 0, ), {, throw, new, NotPositiveException, (, sample, ., getValue, (, ), ), ;, }]
[., getValue, (, ), ;, if, (, p, <, 0, ), {, throw, new, NotPositiveException, (, sample, ., getValue, (]
[), {, throw, new, NotPositiveException, (, sample, ., getValue, (, ), ), ;, }, if, (, Double, ., isInfinite, (]
[<, 0, ), {, throw, new, NotPositiveException, (, sample, ., getValue, (, ), ), ;, }, if, (, Double, .]
[), {, throw, new, NotPositiveException, (, sample, ., getValue, (, ), ), ;, }, if, (, Double, ., isInfinite, (]
[;, }, if, (, Double, ., isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException, (, p, ), ;, }]
[), ;, }, if, (, Double, ., isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException, (, p, ), ;]
[., getValue, (, ), ), ;, }, if, (, Double, ., isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException]
[), {, throw, new, NotFiniteNumberException, (, p, ), ;, }, if, (, Double, ., isNaN, (, p, ), ), {]
[., isInfinite, (, p, ), ), {, throw, new, NotFiniteNumberException, (, p, ), ;, }, if, (, Double, ., isNaN]
[), ), {, throw, new, NotFiniteNumberException, (, p, ), ;, }, if, (, Double, ., isNaN, (, p, ), )]
[;, }, if, (, Double, ., isNaN, (, p, ), ), {, throw, new, NotANumberException, (, ), ;, }, probs]
[), ;, }, if, (, Double, ., isNaN, (, p, ), ), {, throw, new, NotANumberException, (, ), ;, }]
[), {, throw, new, NotANumberException, (, ), ;, }, probs, [, i, ], =, p, ;, }, probabilities, =, MathArrays]
[., isNaN, (, p, ), ), {, throw, new, NotANumberException, (, ), ;, }, probs, [, i, ], =, p]
[), ), {, throw, new, NotANumberException, (, ), ;, }, probs, [, i, ], =, p, ;, }, probabilities, =]
[;, }, probs, [, i, ], =, p, ;, }, probabilities, =, MathArrays, ., normalizeArray, (, probs, ,, 1.0, )]
[=, p, ;, }, probabilities, =, MathArrays, ., normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (]
[[, i, ], =, p, ;, }, probabilities, =, MathArrays, ., normalizeArray, (, probs, ,, 1.0, ), ;, }, public]
[], =, p, ;, }, probabilities, =, MathArrays, ., normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator]
[;, }, probabilities, =, MathArrays, ., normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (, long, seed]
[=, MathArrays, ., normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random]
[;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;, }, double, probability]
[., normalizeArray, (, probs, ,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed]
[,, 1.0, ), ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;]
[), ;, }, public, void, reseedRandomGenerator, (, long, seed, ), {, random, ., setSeed, (, seed, ), ;, }, double]
[;, }, double, probability, (, final, T, x, ), {, double, probability, =, 0, ;, for, (, int, i, =]
[., setSeed, (, seed, ), ;, }, double, probability, (, final, T, x, ), {, double, probability, =, 0, ;]
[), ;, }, double, probability, (, final, T, x, ), {, double, probability, =, 0, ;, for, (, int, i]
[;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (]
[;, i, <, probabilities, ., length, ;, i, ++, ), {, if, (, (, x, ==, null, &&, singletons, .]
[;, i, ++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null]
[<, probabilities, ., length, ;, i, ++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (]
[;, i, ++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null]
[., length, ;, i, ++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, )]
[), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (]
[++, ), {, if, (, (, x, ==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||]
[), {, probability, +=, probabilities, [, i, ], ;, }, }, return, probability, ;, }, public, List, <, Pair, <]
[||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {]
[), ||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), )]
[&&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&, x, ., equals, (]
[==, null, &&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&, x, .]
[&&, singletons, ., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&, x, ., equals, (]
[), ||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), )]
[==, null, ), ||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), )]
[., get, (, i, ), ==, null, ), ||, (, x, !=, null, &&, x, ., equals, (, singletons, .]
[), ==, null, ), ||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, )]
[), ||, (, x, !=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), )]
[), {, probability, +=, probabilities, [, i, ], ;, }, }, return, probability, ;, }, public, List, <, Pair, <]
[), ), {, probability, +=, probabilities, [, i, ], ;, }, }, return, probability, ;, }, public, List, <, Pair]
[&&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {, probability, +=, probabilities, [, i]
[!=, null, &&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {, probability, +=, probabilities]
[&&, x, ., equals, (, singletons, ., get, (, i, ), ), ), ), {, probability, +=, probabilities, [, i]
[), ), {, probability, +=, probabilities, [, i, ], ;, }, }, return, probability, ;, }, public, List, <, Pair]
[., equals, (, singletons, ., get, (, i, ), ), ), ), {, probability, +=, probabilities, [, i, ], ;]
[), ), ), {, probability, +=, probabilities, [, i, ], ;, }, }, return, probability, ;, }, public, List, <]
[., get, (, i, ), ), ), ), {, probability, +=, probabilities, [, i, ], ;, }, }, return, probability]
[), ), ), ), {, probability, +=, probabilities, [, i, ], ;, }, }, return, probability, ;, }, public, List]
[+=, probabilities, [, i, ], ;, }, }, return, probability, ;, }, public, List, <, Pair, <, T, ,, Double]
[;, }, }, return, probability, ;, }, public, List, <, Pair, <, T, ,, Double, >, >, getPmf, (, )]
[[, i, ], ;, }, }, return, probability, ;, }, public, List, <, Pair, <, T, ,, Double, >, >]
[], ;, }, }, return, probability, ;, }, public, List, <, Pair, <, T, ,, Double, >, >, getPmf, (]
[;, }, public, List, <, Pair, <, T, ,, Double, >, >, getPmf, (, ), {, final, List, <, Pair]
[;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, samples, .]
[), ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, samples]
[., length, ), ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, )]
[;, i, <, probabilities, ., length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,]
[;, i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get]
[<, probabilities, ., length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >]
[;, i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get]
[., length, ;, i, ++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons]
[), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get, (, i, )]
[++, ), {, samples, ., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get, (, i]
[;, }, return, samples, ;, }, public, T, sample, (, ), {, final, double, randomValue, =, random, ., nextDouble, (]
[., add, (, new, Pair, <, T, ,, Double, >, (, singletons, ., get, (, i, ), ,, probabilities, []
[), ;, }, return, samples, ;, }, public, T, sample, (, ), {, final, double, randomValue, =, random, ., nextDouble]
[,, probabilities, [, i, ], ), ), ;, }, return, samples, ;, }, public, T, sample, (, ), {, final]
[., get, (, i, ), ,, probabilities, [, i, ], ), ), ;, }, return, samples, ;, }, public, T]
[), ,, probabilities, [, i, ], ), ), ;, }, return, samples, ;, }, public, T, sample, (, ), {]
[), ), ;, }, return, samples, ;, }, public, T, sample, (, ), {, final, double, randomValue, =, random, .]
[[, i, ], ), ), ;, }, return, samples, ;, }, public, T, sample, (, ), {, final, double, randomValue]
[], ), ), ;, }, return, samples, ;, }, public, T, sample, (, ), {, final, double, randomValue, =, random]
[;, }, public, T, sample, (, ), {, final, double, randomValue, =, random, ., nextDouble, (, ), ;, double, sum]
[;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i]
[., nextDouble, (, ), ;, double, sum, =, 0, ;, for, (, int, i, =, 0, ;, i, <, probabilities]
[;, for, (, int, i, =, 0, ;, i, <, probabilities, ., length, ;, i, ++, ), {, sum, +=]
[;, i, <, probabilities, ., length, ;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (]
[;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return]
[<, probabilities, ., length, ;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <]
[;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return]
[., length, ;, i, ++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, )]
[), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return, singletons, ., get]
[++, ), {, sum, +=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return, singletons, .]
[+=, probabilities, [, i, ], ;, if, (, randomValue, <, sum, ), {, return, singletons, ., get, (, i, )]
[;, if, (, randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return, singletons]
[[, i, ], ;, if, (, randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }]
[], ;, if, (, randomValue, <, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return]
[), {, return, singletons, ., get, (, i, ), ;, }, }, return, singletons, ., get, (, singletons, ., size]
[<, sum, ), {, return, singletons, ., get, (, i, ), ;, }, }, return, singletons, ., get, (, singletons]
[), {, return, singletons, ., get, (, i, ), ;, }, }, return, singletons, ., get, (, singletons, ., size]
[;, }, }, return, singletons, ., get, (, singletons, ., size, (, ), -, 1, ), ;, }, public, Object]
[., get, (, i, ), ;, }, }, return, singletons, ., get, (, singletons, ., size, (, ), -, 1]
[), ;, }, }, return, singletons, ., get, (, singletons, ., size, (, ), -, 1, ), ;, }, public]
[;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0, )]
[., get, (, singletons, ., size, (, ), -, 1, ), ;, }, public, Object, [, ], sample, (, int]
[), ;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0]
[-, 1, ), ;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize]
[., size, (, ), -, 1, ), ;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException]
[), ;, }, public, Object, [, ], sample, (, int, sampleSize, ), throws, NotStrictlyPositiveException, {, if, (, sampleSize, <=, 0]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, Object, [, ], out, =]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, Object, [, ]]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, Object, [, ], out, =]
[;, }, final, Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =, 0]
[,, sampleSize, ), ;, }, final, Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for, (, int]
[., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, final, Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for]
[), ;, }, final, Object, [, ], out, =, new, Object, [, sampleSize, ], ;, for, (, int, i, =]
[;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ]]
[], ;, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public]
[<, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public]
[), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public, T, [, ]]
[++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, public, T, []
[=, sample, (, ), ;, }, return, out, ;, }, public, T, [, ], sample, (, int, sampleSize, ,, final]
[[, i, ], =, sample, (, ), ;, }, return, out, ;, }, public, T, [, ], sample, (, int]
[], =, sample, (, ), ;, }, return, out, ;, }, public, T, [, ], sample, (, int, sampleSize, ,]
[;, }, return, out, ;, }, public, T, [, ], sample, (, int, sampleSize, ,, final, T, [, ], array]
[;, }, public, T, [, ], sample, (, int, sampleSize, ,, final, T, [, ], array, ), throws, NotStrictlyPositiveException, {]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==, null, )]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==, null, )]
[;, }, if, (, array, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T]
[,, sampleSize, ), ;, }, if, (, array, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, )]
[., NUMBER_OF_SAMPLES, ,, sampleSize, ), ;, }, if, (, array, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, .]
[), ;, }, if, (, array, ==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (, array]
[==, null, ), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if]
[), {, throw, new, NullArgumentException, (, LocalizedFormats, ., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (, array]
[;, }, T, [, ], out, ;, if, (, array, ., length, <, sampleSize, ), {, @, SuppressWarnings, (, "unchecked"]
[), ;, }, T, [, ], out, ;, if, (, array, ., length, <, sampleSize, ), {, @, SuppressWarnings, (]
[., INPUT_ARRAY, ), ;, }, T, [, ], out, ;, if, (, array, ., length, <, sampleSize, ), {, @]
[), {, @, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], ), Array, .]
[<, sampleSize, ), {, @, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], )]
[., length, <, sampleSize, ), {, @, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, []
[), {, @, SuppressWarnings, (, "unchecked", ), final, T, [, ], unchecked, =, (, T, [, ], ), Array, .]
[final, T, [, ], unchecked, =, (, T, [, ], ), Array, ., newInstance, (, array, ., getClass, (, )]
[), final, T, [, ], unchecked, =, (, T, [, ], ), Array, ., newInstance, (, array, ., getClass, (]
[;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;]
[;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;]
[., newInstance, (, array, ., getClass, (, ), ., getComponentType, (, ), ,, sampleSize, ), ;, out, =, unchecked, ;]
[,, sampleSize, ), ;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i]
[., getComponentType, (, ), ,, sampleSize, ), ;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }]
[., getClass, (, ), ., getComponentType, (, ), ,, sampleSize, ), ;, out, =, unchecked, ;, }, else, {, out]
[), ;, out, =, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0]
[=, unchecked, ;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;, i, <]
[;, }, else, {, out, =, array, ;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;]
[=, array, ;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out]
[;, }, for, (, int, i, =, 0, ;, i, <, sampleSize, ;, i, ++, ), {, out, [, i]
[;, i, <, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, }]
[<, sampleSize, ;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;]
[;, i, ++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, }]
[), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, }]
[++, ), {, out, [, i, ], =, sample, (, ), ;, }, return, out, ;, }, }]
[=, sample, (, ), ;, }, return, out, ;, }, }]
[[, i, ], =, sample, (, ), ;, }, return, out, ;, }, }]
[], =, sample, (, ), ;, }, return, out, ;, }, }]
[;, }, return, out, ;, }, }]
[;, }, }]
