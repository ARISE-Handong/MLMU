[;, private, NumberFormat, formatter, ;, public, NumberTickUnit, (, double, size, ), {, this, (, size, ,, NumberFormat, ., getNumberInstance, (]
[,, NumberFormat, ., getNumberInstance, (, ), ), ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ), {, super]
[), ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ), {, super, (, size, ), ;, if, (]
[., getNumberInstance, (, ), ), ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ), {, super, (, size]
[), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter]
[), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public, NumberTickUnit, (]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public]
[), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public, NumberTickUnit, (]
[;, }, this, ., formatter, =, formatter, ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount]
[), ;, }, this, ., formatter, =, formatter, ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ,, int]
[=, formatter, ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super, (, size]
[., formatter, =, formatter, ;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super]
[;, }, public, NumberTickUnit, (, double, size, ,, NumberFormat, formatter, ,, int, minorTickCount, ), {, super, (, size, ,, minorTickCount]
[,, minorTickCount, ), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this]
[), ;, if, (, formatter, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter]
[), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public, String, valueToString]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public]
[), {, throw, new, IllegalArgumentException, (, "Null 'formatter' argument.", ), ;, }, this, ., formatter, =, formatter, ;, }, public, String, valueToString]
[;, }, this, ., formatter, =, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return, this, .]
[), ;, }, this, ., formatter, =, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return, this]
[=, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return, this, ., formatter, ., format, (, value]
[., formatter, =, formatter, ;, }, public, String, valueToString, (, double, value, ), {, return, this, ., formatter, ., format]
[;, }, public, String, valueToString, (, double, value, ), {, return, this, ., formatter, ., format, (, value, ), ;]
[;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;]
[., format, (, value, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this]
[., formatter, ., format, (, value, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj]
[), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false, ;, }]
[==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false]
[), {, return, true, ;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false, ;, }]
[;, }, if, (, !, (, obj, instanceof, NumberTickUnit, ), ), {, return, false, ;, }, if, (, !, super]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;]
[), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false]
[instanceof, NumberTickUnit, ), ), {, return, false, ;, }, if, (, !, super, ., equals, (, obj, ), ), {]
[;, }, if, (, !, super, ., equals, (, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =]
[), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !, this, ., formatter]
[), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !, this, ., formatter]
[., equals, (, obj, ), ), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if]
[), ), {, return, false, ;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !, this, .]
[;, }, NumberTickUnit, that, =, (, NumberTickUnit, ), obj, ;, if, (, !, this, ., formatter, ., equals, (, that]
[;, if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }]
[;, if, (, !, this, ., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }]
[), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +, this]
[), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +, this]
[., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, String, toString]
[., formatter, ., equals, (, that, ., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public]
[), ), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +]
[., formatter, ), ), {, return, false, ;, }, return, true, ;, }, public, String, toString, (, ), {, return]
[;, }, return, true, ;, }, public, String, toString, (, ), {, return, "[size=", +, this, ., valueToString, (, this]
[;, }, public, String, toString, (, ), {, return, "[size=", +, this, ., valueToString, (, this, ., getSize, (, )]
[;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29]
[+, "]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result]
[+, this, ., valueToString, (, this, ., getSize, (, ), ), +, "]", ;, }, public, int, hashCode, (, )]
[+, "]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result]
[., valueToString, (, this, ., getSize, (, ), ), +, "]", ;, }, public, int, hashCode, (, ), {, int]
[), +, "]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;]
[., getSize, (, ), ), +, "]", ;, }, public, int, hashCode, (, ), {, int, result, =, super, .]
[;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29]
[;, result, =, 29, *, result, +, (, this, ., formatter, !=, null, ?, this, ., formatter, ., hashCode, (]
[., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., formatter, !=, null, ?, this, .]
[=, 29, *, result, +, (, this, ., formatter, !=, null, ?, this, ., formatter, ., hashCode, (, ), :]
[;, return, result, ;, }, }]
[+, (, this, ., formatter, !=, null, ?, this, ., formatter, ., hashCode, (, ), :, 0, ), ;, return]
[*, result, +, (, this, ., formatter, !=, null, ?, this, ., formatter, ., hashCode, (, ), :, 0, )]
[+, (, this, ., formatter, !=, null, ?, this, ., formatter, ., hashCode, (, ), :, 0, ), ;, return]
[;, return, result, ;, }, }]
[), ;, return, result, ;, }, }]
[?, this, ., formatter, ., hashCode, (, ), :, 0, ), ;, return, result, ;, }, }]
[!=, null, ?, this, ., formatter, ., hashCode, (, ), :, 0, ), ;, return, result, ;, }, }]
[., formatter, !=, null, ?, this, ., formatter, ., hashCode, (, ), :, 0, ), ;, return, result, ;, }]
[?, this, ., formatter, ., hashCode, (, ), :, 0, ), ;, return, result, ;, }, }]
[:, 0, ), ;, return, result, ;, }, }]
[., hashCode, (, ), :, 0, ), ;, return, result, ;, }, }]
[., formatter, ., hashCode, (, ), :, 0, ), ;, return, result, ;, }, }]
[), ;, return, result, ;, }, }]
[;, }, }]
