[private, static, final, long, serialVersionUID, =, 4240986525305515528L, ;, private, final, BasicChronology, iChronology, ;, GJEraDateTimeField, (, BasicChronology, chronology, ), {, super]
[), private, static, final, long, serialVersionUID, =, 4240986525305515528L, ;, private, final, BasicChronology, iChronology, ;, GJEraDateTimeField, (, BasicChronology, chronology, ), {]
[;, private, final, BasicChronology, iChronology, ;, GJEraDateTimeField, (, BasicChronology, chronology, ), {, super, (, DateTimeFieldType, ., era, (, ), )]
[), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get]
[., era, (, ), ), ;, iChronology, =, chronology, ;, }, public, boolean, isLenient, (, ), {, return, false, ;]
[=, chronology, ;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant]
[;, }, public, boolean, isLenient, (, ), {, return, false, ;, }, public, int, get, (, long, instant, ), {]
[;, }, public, int, get, (, long, instant, ), {, if, (, iChronology, ., getYear, (, instant, ), <=, 0]
[), {, return, DateTimeConstants, ., BCE, ;, }, else, {, return, DateTimeConstants, ., CE, ;, }, }, public, String, getAsText]
[<=, 0, ), {, return, DateTimeConstants, ., BCE, ;, }, else, {, return, DateTimeConstants, ., CE, ;, }, }, public]
[., getYear, (, instant, ), <=, 0, ), {, return, DateTimeConstants, ., BCE, ;, }, else, {, return, DateTimeConstants, .]
[), <=, 0, ), {, return, DateTimeConstants, ., BCE, ;, }, else, {, return, DateTimeConstants, ., CE, ;, }, }]
[), {, return, DateTimeConstants, ., BCE, ;, }, else, {, return, DateTimeConstants, ., CE, ;, }, }, public, String, getAsText]
[;, }, else, {, return, DateTimeConstants, ., CE, ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale]
[., BCE, ;, }, else, {, return, DateTimeConstants, ., CE, ;, }, }, public, String, getAsText, (, int, fieldValue, ,]
[;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, GJLocaleSymbols, ., forLocale, (, locale]
[., CE, ;, }, }, public, String, getAsText, (, int, fieldValue, ,, Locale, locale, ), {, return, GJLocaleSymbols, ., forLocale]
[;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,, era]
[., eraValueToText, (, fieldValue, ), ;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, .]
[., forLocale, (, locale, ), ., eraValueToText, (, fieldValue, ), ;, }, public, long, set, (, long, instant, ,, int]
[), ., eraValueToText, (, fieldValue, ), ;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils]
[), ;, }, public, long, set, (, long, instant, ,, int, era, ), {, FieldUtils, ., verifyValueBounds, (, this, ,]
[;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=, era, ), {, int, year, =, iChronology]
[., verifyValueBounds, (, this, ,, era, ,, DateTimeConstants, ., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get]
[,, era, ,, DateTimeConstants, ., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (, instant, ), ;]
[,, DateTimeConstants, ., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (, instant, ), ;, if, (]
[,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=, era, )]
[., BCE, ,, DateTimeConstants, ., CE, ), ;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=]
[), ;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=, era, ), {, int, year, =]
[., CE, ), ;, int, oldEra, =, get, (, instant, ), ;, if, (, oldEra, !=, era, ), {, int]
[;, if, (, oldEra, !=, era, ), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return, iChronology]
[), ;, if, (, oldEra, !=, era, ), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return]
[), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return, iChronology, ., setYear, (, instant, ,, -]
[!=, era, ), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return, iChronology, ., setYear, (, instant]
[), {, int, year, =, iChronology, ., getYear, (, instant, ), ;, return, iChronology, ., setYear, (, instant, ,, -]
[;, return, iChronology, ., setYear, (, instant, ,, -, year, ), ;, }, else, {, return, instant, ;, }, }]
[., getYear, (, instant, ), ;, return, iChronology, ., setYear, (, instant, ,, -, year, ), ;, }, else, {]
[), ;, return, iChronology, ., setYear, (, instant, ,, -, year, ), ;, }, else, {, return, instant, ;, }]
[;, }, else, {, return, instant, ;, }, }, public, long, set, (, long, instant, ,, String, text, ,, Locale]
[., setYear, (, instant, ,, -, year, ), ;, }, else, {, return, instant, ;, }, }, public, long, set]
[,, -, year, ), ;, }, else, {, return, instant, ;, }, }, public, long, set, (, long, instant, ,]
[), ;, }, else, {, return, instant, ;, }, }, public, long, set, (, long, instant, ,, String, text, ,]
[), ;, }, else, {, return, instant, ;, }, }, public, long, set, (, long, instant, ,, String, text, ,]
[;, }, }, public, long, set, (, long, instant, ,, String, text, ,, Locale, locale, ), {, return, set, (]
[;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, ., CE]
[,, GJLocaleSymbols, ., forLocale, (, locale, ), ., eraTextToValue, (, text, ), ), ;, }, public, long, roundFloor, (, long]
[), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, .]
[., eraTextToValue, (, text, ), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get, (]
[., forLocale, (, locale, ), ., eraTextToValue, (, text, ), ), ;, }, public, long, roundFloor, (, long, instant, )]
[), ., eraTextToValue, (, text, ), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get]
[), ), ;, }, public, long, roundFloor, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants]
[), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, ., MIN_VALUE, ;]
[==, DateTimeConstants, ., CE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return]
[), ==, DateTimeConstants, ., CE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {]
[), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, ., MIN_VALUE, ;]
[., CE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, .]
[;, }, else, {, return, Long, ., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if]
[., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, ., MIN_VALUE, ;, }, }, public, long]
[,, 1, ), ;, }, else, {, return, Long, ., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant]
[), ;, }, else, {, return, Long, ., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {]
[;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, get, (, instant, ), ==, DateTimeConstants, .]
[., MIN_VALUE, ;, }, }, public, long, roundCeiling, (, long, instant, ), {, if, (, get, (, instant, ), ==]
[), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, ., MAX_VALUE, ;]
[==, DateTimeConstants, ., BCE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return]
[), ==, DateTimeConstants, ., BCE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {]
[), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, ., MAX_VALUE, ;]
[., BCE, ), {, return, iChronology, ., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, .]
[;, }, else, {, return, Long, ., MAX_VALUE, ;, }, }, public, long, roundHalfFloor, (, long, instant, ), {, return]
[., setYear, (, 0, ,, 1, ), ;, }, else, {, return, Long, ., MAX_VALUE, ;, }, }, public, long]
[,, 1, ), ;, }, else, {, return, Long, ., MAX_VALUE, ;, }, }, public, long, roundHalfFloor, (, long, instant]
[), ;, }, else, {, return, Long, ., MAX_VALUE, ;, }, }, public, long, roundHalfFloor, (, long, instant, ), {]
[;, }, }, public, long, roundHalfFloor, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, long]
[., MAX_VALUE, ;, }, }, public, long, roundHalfFloor, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }]
[;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, long, roundHalfEven]
[), ;, }, public, long, roundHalfCeiling, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, long]
[;, }, public, long, roundHalfEven, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, DurationField, getDurationField]
[), ;, }, public, long, roundHalfEven, (, long, instant, ), {, return, roundFloor, (, instant, ), ;, }, public, DurationField]
[;, }, public, DurationField, getDurationField, (, ), {, return, UnsupportedDurationField, ., getInstance, (, DurationFieldType, ., eras, (, ), ), ;]
[), ;, }, public, DurationField, getDurationField, (, ), {, return, UnsupportedDurationField, ., getInstance, (, DurationFieldType, ., eras, (, ), )]
[;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, int, getMinimumValue, (, ), {, return, DateTimeConstants]
[., getInstance, (, DurationFieldType, ., eras, (, ), ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;]
[), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, int, getMinimumValue, (, ), {, return]
[., eras, (, ), ), ;, }, public, DurationField, getRangeDurationField, (, ), {, return, null, ;, }, public, int, getMinimumValue]
[;, }, public, int, getMinimumValue, (, ), {, return, DateTimeConstants, ., BCE, ;, }, public, int, getMaximumValue, (, ), {]
[;, }, public, int, getMaximumValue, (, ), {, return, DateTimeConstants, ., CE, ;, }, public, int, getMaximumTextLength, (, Locale, locale]
[., BCE, ;, }, public, int, getMaximumValue, (, ), {, return, DateTimeConstants, ., CE, ;, }, public, int, getMaximumTextLength, (]
[;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, GJLocaleSymbols, ., forLocale, (, locale, ), ., getEraMaxTextLength, (]
[., CE, ;, }, public, int, getMaximumTextLength, (, Locale, locale, ), {, return, GJLocaleSymbols, ., forLocale, (, locale, ), .]
[;, }, private, Object, readResolve, (, ), {, return, iChronology, ., era, (, ), ;, }, }]
[., getEraMaxTextLength, (, ), ;, }, private, Object, readResolve, (, ), {, return, iChronology, ., era, (, ), ;, }]
[., forLocale, (, locale, ), ., getEraMaxTextLength, (, ), ;, }, private, Object, readResolve, (, ), {, return, iChronology, .]
[), ., getEraMaxTextLength, (, ), ;, }, private, Object, readResolve, (, ), {, return, iChronology, ., era, (, ), ;]
[;, }, }]
[., era, (, ), ;, }, }]
