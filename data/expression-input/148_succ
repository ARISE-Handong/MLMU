[=, optimizer, ;, this, ., optimizer, =, null, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }]
[., oldOptimizer, =, optimizer, ;, this, ., optimizer, =, null, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, )]
[;, this, ., optimizer, =, null, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, CurveFitter]
[=, null, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, CurveFitter, (, final, MultivariateDifferentiableVectorOptimizer, optimizer]
[., optimizer, =, null, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, CurveFitter, (, final]
[;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, CurveFitter, (, final, MultivariateDifferentiableVectorOptimizer, optimizer, ), {]
[=, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, CurveFitter, (, final, MultivariateDifferentiableVectorOptimizer, optimizer, ), {, this, .]
[;, }, public, CurveFitter, (, final, MultivariateDifferentiableVectorOptimizer, optimizer, ), {, this, ., oldOptimizer, =, null, ;, this, ., optimizer, =]
[=, null, ;, this, ., optimizer, =, optimizer, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }]
[., oldOptimizer, =, null, ;, this, ., optimizer, =, optimizer, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, )]
[;, this, ., optimizer, =, optimizer, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, void]
[=, optimizer, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, void, addObservedPoint, (, double, x]
[., optimizer, =, optimizer, ;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, void, addObservedPoint, (]
[;, observations, =, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, void, addObservedPoint, (, double, x, ,, double]
[=, new, ArrayList, <, WeightedObservedPoint, >, (, ), ;, }, public, void, addObservedPoint, (, double, x, ,, double, y, )]
[;, }, public, void, addObservedPoint, (, double, x, ,, double, y, ), {, addObservedPoint, (, 1.0, ,, x, ,, y]
[;, }, public, void, addObservedPoint, (, double, weight, ,, double, x, ,, double, y, ), {, observations, ., add, (]
[,, x, ,, y, ), ;, }, public, void, addObservedPoint, (, double, weight, ,, double, x, ,, double, y, )]
[,, y, ), ;, }, public, void, addObservedPoint, (, double, weight, ,, double, x, ,, double, y, ), {, observations]
[), ;, }, public, void, addObservedPoint, (, double, weight, ,, double, x, ,, double, y, ), {, observations, ., add]
[;, }, public, void, addObservedPoint, (, WeightedObservedPoint, observed, ), {, observations, ., add, (, observed, ), ;, }, public, WeightedObservedPoint]
[., add, (, new, WeightedObservedPoint, (, weight, ,, x, ,, y, ), ), ;, }, public, void, addObservedPoint, (, WeightedObservedPoint]
[), ;, }, public, void, addObservedPoint, (, WeightedObservedPoint, observed, ), {, observations, ., add, (, observed, ), ;, }, public]
[,, x, ,, y, ), ), ;, }, public, void, addObservedPoint, (, WeightedObservedPoint, observed, ), {, observations, ., add, (]
[,, y, ), ), ;, }, public, void, addObservedPoint, (, WeightedObservedPoint, observed, ), {, observations, ., add, (, observed, )]
[), ), ;, }, public, void, addObservedPoint, (, WeightedObservedPoint, observed, ), {, observations, ., add, (, observed, ), ;, }]
[;, }, public, WeightedObservedPoint, [, ], getObservations, (, ), {, return, observations, ., toArray, (, new, WeightedObservedPoint, [, observations, .]
[., add, (, observed, ), ;, }, public, WeightedObservedPoint, [, ], getObservations, (, ), {, return, observations, ., toArray, (]
[), ;, }, public, WeightedObservedPoint, [, ], getObservations, (, ), {, return, observations, ., toArray, (, new, WeightedObservedPoint, [, observations]
[;, }, public, void, clearObservations, (, ), {, observations, ., clear, (, ), ;, }, public, double, [, ], fit]
[., toArray, (, new, WeightedObservedPoint, [, observations, ., size, (, ), ], ), ;, }, public, void, clearObservations, (, )]
[), ;, }, public, void, clearObservations, (, ), {, observations, ., clear, (, ), ;, }, public, double, [, ]]
[], ), ;, }, public, void, clearObservations, (, ), {, observations, ., clear, (, ), ;, }, public, double, []
[., size, (, ), ], ), ;, }, public, void, clearObservations, (, ), {, observations, ., clear, (, ), ;]
[;, }, public, double, [, ], fit, (, T, f, ,, final, double, [, ], initialGuess, ), {, return, fit]
[., clear, (, ), ;, }, public, double, [, ], fit, (, T, f, ,, final, double, [, ], initialGuess]
[;, }, public, double, [, ], fit, (, int, maxEval, ,, T, f, ,, final, double, [, ], initialGuess, )]
[,, f, ,, initialGuess, ), ;, }, public, double, [, ], fit, (, int, maxEval, ,, T, f, ,, final]
[., MAX_VALUE, ,, f, ,, initialGuess, ), ;, }, public, double, [, ], fit, (, int, maxEval, ,, T, f]
[,, initialGuess, ), ;, }, public, double, [, ], fit, (, int, maxEval, ,, T, f, ,, final, double, []
[), ;, }, public, double, [, ], fit, (, int, maxEval, ,, T, f, ,, final, double, [, ], initialGuess]
[;, double, [, ], weights, =, new, double, [, observations, ., size, (, ), ], ;, int, i, =, 0]
[], ;, double, [, ], weights, =, new, double, [, observations, ., size, (, ), ], ;, int, i, =]
[., size, (, ), ], ;, double, [, ], weights, =, new, double, [, observations, ., size, (, ), ]]
[;, int, i, =, 0, ;, for, (, WeightedObservedPoint, point, :, observations, ), {, target, [, i, ], =, point]
[], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, point, :, observations, ), {, target, [, i, ], =]
[., size, (, ), ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, point, :, observations, ), {, target]
[;, for, (, WeightedObservedPoint, point, :, observations, ), {, target, [, i, ], =, point, ., getY, (, ), ;]
[), {, target, [, i, ], =, point, ., getY, (, ), ;, weights, [, i, ], =, point, .]
[=, point, ., getY, (, ), ;, weights, [, i, ], =, point, ., getWeight, (, ), ;, ++, i]
[[, i, ], =, point, ., getY, (, ), ;, weights, [, i, ], =, point, ., getWeight, (, )]
[], =, point, ., getY, (, ), ;, weights, [, i, ], =, point, ., getWeight, (, ), ;, ++]
[;, weights, [, i, ], =, point, ., getWeight, (, ), ;, ++, i, ;, }, final, PointVectorValuePair, optimum, ;]
[., getY, (, ), ;, weights, [, i, ], =, point, ., getWeight, (, ), ;, ++, i, ;, }]
[=, point, ., getWeight, (, ), ;, ++, i, ;, }, final, PointVectorValuePair, optimum, ;, if, (, optimizer, ==, null]
[[, i, ], =, point, ., getWeight, (, ), ;, ++, i, ;, }, final, PointVectorValuePair, optimum, ;, if, (]
[], =, point, ., getWeight, (, ), ;, ++, i, ;, }, final, PointVectorValuePair, optimum, ;, if, (, optimizer, ==]
[;, ++, i, ;, }, final, PointVectorValuePair, optimum, ;, if, (, optimizer, ==, null, ), {, optimum, =, oldOptimizer, .]
[., getWeight, (, ), ;, ++, i, ;, }, final, PointVectorValuePair, optimum, ;, if, (, optimizer, ==, null, ), {]
[;, }, final, PointVectorValuePair, optimum, ;, if, (, optimizer, ==, null, ), {, optimum, =, oldOptimizer, ., optimize, (, maxEval]
[;, }, final, PointVectorValuePair, optimum, ;, if, (, optimizer, ==, null, ), {, optimum, =, oldOptimizer, ., optimize, (, maxEval]
[), {, optimum, =, oldOptimizer, ., optimize, (, maxEval, ,, new, OldTheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,]
[==, null, ), {, optimum, =, oldOptimizer, ., optimize, (, maxEval, ,, new, OldTheoreticalValuesFunction, (, f, ), ,, target, ,]
[), {, optimum, =, oldOptimizer, ., optimize, (, maxEval, ,, new, OldTheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,]
[=, oldOptimizer, ., optimize, (, maxEval, ,, new, OldTheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,, initialGuess, ), ;]
[;, }, else, {, optimum, =, optimizer, ., optimize, (, maxEval, ,, new, TheoreticalValuesFunction, (, f, ), ,, target, ,]
[., optimize, (, maxEval, ,, new, OldTheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,, initialGuess, ), ;, }, else]
[,, new, OldTheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,, initialGuess, ), ;, }, else, {, optimum, =, optimizer]
[,, target, ,, weights, ,, initialGuess, ), ;, }, else, {, optimum, =, optimizer, ., optimize, (, maxEval, ,, new]
[), ,, target, ,, weights, ,, initialGuess, ), ;, }, else, {, optimum, =, optimizer, ., optimize, (, maxEval, ,]
[,, weights, ,, initialGuess, ), ;, }, else, {, optimum, =, optimizer, ., optimize, (, maxEval, ,, new, TheoreticalValuesFunction, (]
[,, initialGuess, ), ;, }, else, {, optimum, =, optimizer, ., optimize, (, maxEval, ,, new, TheoreticalValuesFunction, (, f, )]
[), ;, }, else, {, optimum, =, optimizer, ., optimize, (, maxEval, ,, new, TheoreticalValuesFunction, (, f, ), ,, target]
[=, optimizer, ., optimize, (, maxEval, ,, new, TheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,, initialGuess, ), ;]
[;, }, return, optimum, ., getPointRef, (, ), ;, }, @, Deprecated, private, class, OldTheoreticalValuesFunction, implements, DifferentiableMultivariateVectorFunction, {, private, final]
[., optimize, (, maxEval, ,, new, TheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,, initialGuess, ), ;, }, return]
[,, new, TheoreticalValuesFunction, (, f, ), ,, target, ,, weights, ,, initialGuess, ), ;, }, return, optimum, ., getPointRef, (]
[,, target, ,, weights, ,, initialGuess, ), ;, }, return, optimum, ., getPointRef, (, ), ;, }, @, Deprecated, private]
[), ,, target, ,, weights, ,, initialGuess, ), ;, }, return, optimum, ., getPointRef, (, ), ;, }, @, Deprecated]
[,, weights, ,, initialGuess, ), ;, }, return, optimum, ., getPointRef, (, ), ;, }, @, Deprecated, private, class, OldTheoreticalValuesFunction]
[,, initialGuess, ), ;, }, return, optimum, ., getPointRef, (, ), ;, }, @, Deprecated, private, class, OldTheoreticalValuesFunction, implements, DifferentiableMultivariateVectorFunction]
[), ;, }, return, optimum, ., getPointRef, (, ), ;, }, @, Deprecated, private, class, OldTheoreticalValuesFunction, implements, DifferentiableMultivariateVectorFunction, {, private]
[;, }, @, Deprecated, private, class, OldTheoreticalValuesFunction, implements, DifferentiableMultivariateVectorFunction, {, private, final, ParametricUnivariateFunction, f, ;, public, OldTheoreticalValuesFunction, (, final, ParametricUnivariateFunction]
[., getPointRef, (, ), ;, }, @, Deprecated, private, class, OldTheoreticalValuesFunction, implements, DifferentiableMultivariateVectorFunction, {, private, final, ParametricUnivariateFunction, f, ;, public]
[=, f, ;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double, [, ]]
[., f, =, f, ;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double]
[;, }, public, MultivariateMatrixFunction, jacobian, (, ), {, return, new, MultivariateMatrixFunction, (, ), {, public, double, [, ], [, ]]
[;, }, public, double, [, ], value, (, double, [, ], point, ), {, final, double, [, ], values, =]
[;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, jacobian, [, i, ++, ], =]
[], [, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, jacobian, [, i]
[., size, (, ), ], [, ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, )]
[;, for, (, WeightedObservedPoint, observed, :, observations, ), {, jacobian, [, i, ++, ], =, f, ., gradient, (, observed]
[), {, jacobian, [, i, ++, ], =, f, ., gradient, (, observed, ., getX, (, ), ,, point, )]
[=, f, ., gradient, (, observed, ., getX, (, ), ,, point, ), ;, }, return, jacobian, ;, }, }]
[[, i, ++, ], =, f, ., gradient, (, observed, ., getX, (, ), ,, point, ), ;, }, return]
[], =, f, ., gradient, (, observed, ., getX, (, ), ,, point, ), ;, }, return, jacobian, ;, }]
[++, ], =, f, ., gradient, (, observed, ., getX, (, ), ,, point, ), ;, }, return, jacobian, ;]
[;, }, return, jacobian, ;, }, }, ;, }, public, double, [, ], value, (, double, [, ], point, )]
[., gradient, (, observed, ., getX, (, ), ,, point, ), ;, }, return, jacobian, ;, }, }, ;, }]
[,, point, ), ;, }, return, jacobian, ;, }, }, ;, }, public, double, [, ], value, (, double, []
[., getX, (, ), ,, point, ), ;, }, return, jacobian, ;, }, }, ;, }, public, double, [, ]]
[), ;, }, return, jacobian, ;, }, }, ;, }, public, double, [, ], value, (, double, [, ], point]
[;, }, }, ;, }, public, double, [, ], value, (, double, [, ], point, ), {, final, double, []
[;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values, [, i, ++, ], =]
[], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values, [, i, ++, ]]
[., size, (, ), ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values]
[;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values, [, i, ++, ], =, f, ., value, (, observed]
[), {, values, [, i, ++, ], =, f, ., value, (, observed, ., getX, (, ), ,, point, )]
[=, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;, }, }]
[[, i, ++, ], =, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return]
[], =, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;, }]
[++, ], =, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;]
[;, }, return, values, ;, }, }, private, class, TheoreticalValuesFunction, implements, MultivariateDifferentiableVectorFunction, {, private, final, ParametricUnivariateFunction, f, ;, public, TheoreticalValuesFunction]
[., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;, }, }, private, class]
[,, point, ), ;, }, return, values, ;, }, }, private, class, TheoreticalValuesFunction, implements, MultivariateDifferentiableVectorFunction, {, private, final, ParametricUnivariateFunction, f]
[., getX, (, ), ,, point, ), ;, }, return, values, ;, }, }, private, class, TheoreticalValuesFunction, implements, MultivariateDifferentiableVectorFunction, {]
[), ;, }, return, values, ;, }, }, private, class, TheoreticalValuesFunction, implements, MultivariateDifferentiableVectorFunction, {, private, final, ParametricUnivariateFunction, f, ;, public]
[;, }, }, private, class, TheoreticalValuesFunction, implements, MultivariateDifferentiableVectorFunction, {, private, final, ParametricUnivariateFunction, f, ;, public, TheoreticalValuesFunction, (, final, ParametricUnivariateFunction, f]
[=, f, ;, }, public, double, [, ], value, (, double, [, ], point, ), {, final, double, [, ]]
[., f, =, f, ;, }, public, double, [, ], value, (, double, [, ], point, ), {, final, double]
[;, }, public, double, [, ], value, (, double, [, ], point, ), {, final, double, [, ], values, =]
[;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values, [, i, ++, ], =]
[], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values, [, i, ++, ]]
[., size, (, ), ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values]
[;, for, (, WeightedObservedPoint, observed, :, observations, ), {, values, [, i, ++, ], =, f, ., value, (, observed]
[), {, values, [, i, ++, ], =, f, ., value, (, observed, ., getX, (, ), ,, point, )]
[=, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;, }, public]
[[, i, ++, ], =, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return]
[], =, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;, }]
[++, ], =, f, ., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;]
[;, }, return, values, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], point, ), {, final, double]
[., value, (, observed, ., getX, (, ), ,, point, ), ;, }, return, values, ;, }, public, DerivativeStructure, []
[,, point, ), ;, }, return, values, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], point, )]
[., getX, (, ), ,, point, ), ;, }, return, values, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure]
[), ;, }, return, values, ;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], point, ), {, final]
[;, }, public, DerivativeStructure, [, ], value, (, DerivativeStructure, [, ], point, ), {, final, double, [, ], parameters, =]
[;, for, (, int, k, =, 0, ;, k, <, point, ., length, ;, ++, k, ), {, parameters, []
[], ;, for, (, int, k, =, 0, ;, k, <, point, ., length, ;, ++, k, ), {, parameters]
[., length, ], ;, for, (, int, k, =, 0, ;, k, <, point, ., length, ;, ++, k, )]
[;, k, <, point, ., length, ;, ++, k, ), {, parameters, [, k, ], =, point, [, k, ]]
[;, ++, k, ), {, parameters, [, k, ], =, point, [, k, ], ., getValue, (, ), ;, }]
[<, point, ., length, ;, ++, k, ), {, parameters, [, k, ], =, point, [, k, ], ., getValue]
[;, ++, k, ), {, parameters, [, k, ], =, point, [, k, ], ., getValue, (, ), ;, }]
[., length, ;, ++, k, ), {, parameters, [, k, ], =, point, [, k, ], ., getValue, (, )]
[), {, parameters, [, k, ], =, point, [, k, ], ., getValue, (, ), ;, }, final, DerivativeStructure, []
[), {, parameters, [, k, ], =, point, [, k, ], ., getValue, (, ), ;, }, final, DerivativeStructure, []
[=, point, [, k, ], ., getValue, (, ), ;, }, final, DerivativeStructure, [, ], values, =, new, DerivativeStructure, []
[[, k, ], =, point, [, k, ], ., getValue, (, ), ;, }, final, DerivativeStructure, [, ], values, =]
[], =, point, [, k, ], ., getValue, (, ), ;, }, final, DerivativeStructure, [, ], values, =, new, DerivativeStructure]
[;, }, final, DerivativeStructure, [, ], values, =, new, DerivativeStructure, [, observations, ., size, (, ), ], ;, int, i]
[., getValue, (, ), ;, }, final, DerivativeStructure, [, ], values, =, new, DerivativeStructure, [, observations, ., size, (, )]
[[, k, ], ., getValue, (, ), ;, }, final, DerivativeStructure, [, ], values, =, new, DerivativeStructure, [, observations, .]
[], ., getValue, (, ), ;, }, final, DerivativeStructure, [, ], values, =, new, DerivativeStructure, [, observations, ., size, (]
[;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, DerivativeStructure, vi, =, new, DerivativeStructure, (]
[], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, DerivativeStructure, vi, =, new, DerivativeStructure]
[., size, (, ), ], ;, int, i, =, 0, ;, for, (, WeightedObservedPoint, observed, :, observations, ), {, DerivativeStructure]
[;, for, (, WeightedObservedPoint, observed, :, observations, ), {, DerivativeStructure, vi, =, new, DerivativeStructure, (, point, ., length, ,, 1]
[), {, DerivativeStructure, vi, =, new, DerivativeStructure, (, point, ., length, ,, 1, ,, f, ., value, (, observed, .]
[;, for, (, int, k, =, 0, ;, k, <, point, ., length, ;, ++, k, ), {, vi, =]
[,, 1, ,, f, ., value, (, observed, ., getX, (, ), ,, parameters, ), ), ;, for, (, int]
[., length, ,, 1, ,, f, ., value, (, observed, ., getX, (, ), ,, parameters, ), ), ;, for]
[,, f, ., value, (, observed, ., getX, (, ), ,, parameters, ), ), ;, for, (, int, k, =]
[), ;, for, (, int, k, =, 0, ;, k, <, point, ., length, ;, ++, k, ), {, vi]
[., value, (, observed, ., getX, (, ), ,, parameters, ), ), ;, for, (, int, k, =, 0, ;]
[,, parameters, ), ), ;, for, (, int, k, =, 0, ;, k, <, point, ., length, ;, ++, k]
[., getX, (, ), ,, parameters, ), ), ;, for, (, int, k, =, 0, ;, k, <, point, .]
[), ), ;, for, (, int, k, =, 0, ;, k, <, point, ., length, ;, ++, k, ), {]
[;, k, <, point, ., length, ;, ++, k, ), {, vi, =, vi, ., add, (, new, DerivativeStructure, (]
[;, ++, k, ), {, vi, =, vi, ., add, (, new, DerivativeStructure, (, point, ., length, ,, 1, ,]
[<, point, ., length, ;, ++, k, ), {, vi, =, vi, ., add, (, new, DerivativeStructure, (, point, .]
[;, ++, k, ), {, vi, =, vi, ., add, (, new, DerivativeStructure, (, point, ., length, ,, 1, ,]
[., length, ;, ++, k, ), {, vi, =, vi, ., add, (, new, DerivativeStructure, (, point, ., length, ,]
[), {, vi, =, vi, ., add, (, new, DerivativeStructure, (, point, ., length, ,, 1, ,, k, ,, 0.0]
[), {, vi, =, vi, ., add, (, new, DerivativeStructure, (, point, ., length, ,, 1, ,, k, ,, 0.0]
[=, vi, ., add, (, new, DerivativeStructure, (, point, ., length, ,, 1, ,, k, ,, 0.0, ), ), ;]
[;, }, values, [, i, ++, ], =, vi, ;, }, return, values, ;, }, }, }]
[., add, (, new, DerivativeStructure, (, point, ., length, ,, 1, ,, k, ,, 0.0, ), ), ;, }, values]
[), ;, }, values, [, i, ++, ], =, vi, ;, }, return, values, ;, }, }, }]
[,, 1, ,, k, ,, 0.0, ), ), ;, }, values, [, i, ++, ], =, vi, ;, }, return]
[., length, ,, 1, ,, k, ,, 0.0, ), ), ;, }, values, [, i, ++, ], =, vi, ;]
[,, k, ,, 0.0, ), ), ;, }, values, [, i, ++, ], =, vi, ;, }, return, values, ;]
[,, 0.0, ), ), ;, }, values, [, i, ++, ], =, vi, ;, }, return, values, ;, }, }]
[), ), ;, }, values, [, i, ++, ], =, vi, ;, }, return, values, ;, }, }, }]
[=, vi, ;, }, return, values, ;, }, }, }]
[[, i, ++, ], =, vi, ;, }, return, values, ;, }, }, }]
[], =, vi, ;, }, return, values, ;, }, }, }]
[++, ], =, vi, ;, }, return, values, ;, }, }, }]
[;, }, return, values, ;, }, }, }]
[;, }, }, }]
