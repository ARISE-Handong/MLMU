[jfree, ., data, ., Range, ;, public, class, BorderArrangement, implements, Arrangement, ,, Serializable, {, private, static, final, long, serialVersionUID, =]
[;, public, BorderArrangement, (, ), {, }, public, void, add, (, Block, block, ,, Object, key, ), {, if, (]
[;, public, BorderArrangement, (, ), {, }, public, void, add, (, Block, block, ,, Object, key, ), {, if, (]
[BorderArrangement, (, ), {, }, public, void, add, (, Block, block, ,, Object, key, ), {, if, (, key, ==]
[{, }, public, void, add, (, Block, block, ,, Object, key, ), {, if, (, key, ==, null, ), {]
[{, }, public, void, add, (, Block, block, ,, Object, key, ), {, if, (, key, ==, null, ), {]
[add, (, Block, block, ,, Object, key, ), {, if, (, key, ==, null, ), {, this, ., centerBlock, =]
[{, if, (, key, ==, null, ), {, this, ., centerBlock, =, block, ;, }, else, {, RectangleEdge, edge, =]
[key, ==, null, ), {, this, ., centerBlock, =, block, ;, }, else, {, RectangleEdge, edge, =, (, RectangleEdge, )]
[{, this, ., centerBlock, =, block, ;, }, else, {, RectangleEdge, edge, =, (, RectangleEdge, ), key, ;, if, (]
[{, this, ., centerBlock, =, block, ;, }, else, {, RectangleEdge, edge, =, (, RectangleEdge, ), key, ;, if, (]
[., centerBlock, =, block, ;, }, else, {, RectangleEdge, edge, =, (, RectangleEdge, ), key, ;, if, (, edge, ==]
[., centerBlock, =, block, ;, }, else, {, RectangleEdge, edge, =, (, RectangleEdge, ), key, ;, if, (, edge, ==]
[}, else, {, RectangleEdge, edge, =, (, RectangleEdge, ), key, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[}, else, {, RectangleEdge, edge, =, (, RectangleEdge, ), key, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {]
[edge, =, (, RectangleEdge, ), key, ;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this, ., topBlock, =]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this, ., topBlock, =, block, ;, }, else, if, (]
[;, if, (, edge, ==, RectangleEdge, ., TOP, ), {, this, ., topBlock, =, block, ;, }, else, if, (]
[(, edge, ==, RectangleEdge, ., TOP, ), {, this, ., topBlock, =, block, ;, }, else, if, (, edge, ==]
[(, edge, ==, RectangleEdge, ., TOP, ), {, this, ., topBlock, =, block, ;, }, else, if, (, edge, ==]
[TOP, ), {, this, ., topBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[TOP, ), {, this, ., topBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {]
[., topBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottomBlock, =]
[else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottomBlock, =, block, ;, }, else, if, (]
[else, if, (, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottomBlock, =, block, ;, }, else, if, (]
[(, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottomBlock, =, block, ;, }, else, if, (, edge, ==]
[(, edge, ==, RectangleEdge, ., BOTTOM, ), {, this, ., bottomBlock, =, block, ;, }, else, if, (, edge, ==]
[BOTTOM, ), {, this, ., bottomBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[BOTTOM, ), {, this, ., bottomBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {]
[., bottomBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., leftBlock, =]
[else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., leftBlock, =, block, ;, }, else, if, (]
[else, if, (, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., leftBlock, =, block, ;, }, else, if, (]
[(, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., leftBlock, =, block, ;, }, else, if, (, edge, ==]
[(, edge, ==, RectangleEdge, ., LEFT, ), {, this, ., leftBlock, =, block, ;, }, else, if, (, edge, ==]
[LEFT, ), {, this, ., leftBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[LEFT, ), {, this, ., leftBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {]
[., leftBlock, =, block, ;, }, else, if, (, edge, ==, RectangleEdge, ., RIGHT, ), {, this, ., rightBlock, =]
[}, }, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, contentConstraint, =]
[}, }, }, public, Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, contentConstraint, =]
[Size2D, arrange, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, contentConstraint, =, container, ., toContentConstraint, (]
[Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, contentConstraint, =, container, ., toContentConstraint, (, constraint, ), ;, Size2D, contentSize, =]
[), {, RectangleConstraint, contentConstraint, =, container, ., toContentConstraint, (, constraint, ), ;, Size2D, contentSize, =, null, ;, LengthConstraintType, w, =]
[), {, RectangleConstraint, contentConstraint, =, container, ., toContentConstraint, (, constraint, ), ;, Size2D, contentSize, =, null, ;, LengthConstraintType, w, =]
[constraint, ), ;, Size2D, contentSize, =, null, ;, LengthConstraintType, w, =, contentConstraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[constraint, ), ;, Size2D, contentSize, =, null, ;, LengthConstraintType, w, =, contentConstraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[LengthConstraintType, w, =, contentConstraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (]
[LengthConstraintType, w, =, contentConstraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (]
[=, contentConstraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[=, contentConstraint, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==]
[LengthConstraintType, h, =, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[LengthConstraintType, h, =, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[=, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[=, contentConstraint, ., getHeightConstraintType, (, ), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[), ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (]
[LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, container, ,]
[h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (]
[LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==]
[=, arrangeNN, (, container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[container, ,, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[new, RuntimeException, (, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[(, "Not implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[}, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (]
[LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, container, ,]
[FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, container, ,, g2, ,]
[FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, container, ,, g2, ,]
[{, contentSize, =, arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), ), ;, }, else, if, (]
[{, contentSize, =, arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), ), ;, }, else, if, (]
[=, arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), ), ;, }, else, if, (, h, ==]
[=, arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), ), ;, }, else, if, (, h, ==]
[g2, ,, constraint, ., getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {]
[constraint, ., getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, contentSize, =]
[getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, contentSize, =, arrangeFF, (]
[), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, contentSize, =, arrangeFF, (, container, ,]
[;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, contentSize, =, arrangeFF, (, container, ,, g2, ,]
[LengthConstraintType, ., FIXED, ), {, contentSize, =, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[LengthConstraintType, ., FIXED, ), {, contentSize, =, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (]
[FIXED, ), {, contentSize, =, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[FIXED, ), {, contentSize, =, arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==]
[arrangeFF, (, container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[container, ,, g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =]
[g2, ,, constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeFR, (]
[constraint, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeFR, (, container, ,]
[;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeFR, (, container, ,, g2, ,]
[., RANGE, ), {, contentSize, =, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[., RANGE, ), {, contentSize, =, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (]
[), {, contentSize, =, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[), {, contentSize, =, arrangeFR, (, container, ,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, g2, ,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[,, constraint, ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw]
[w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., NONE, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==]
[), {, throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[throw, new, RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =]
[RuntimeException, (, "Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (]
["Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, container, ,]
["Not implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, container, ,]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, container, ,, constraint, ., getWidthRange, (, ), ,]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, container, ,, constraint, ., getWidthRange, (, ), ,]
[), {, contentSize, =, arrangeRR, (, container, ,, constraint, ., getWidthRange, (, ), ,, constraint, ., getHeightRange, (, ), ,]
[container, ,, constraint, ., getWidthRange, (, ), ,, constraint, ., getHeightRange, (, ), ,, g2, ), ;, }, }, return]
[., getWidthRange, (, ), ,, constraint, ., getHeightRange, (, ), ,, g2, ), ;, }, }, return, new, Size2D, (]
[., getWidthRange, (, ), ,, constraint, ., getHeightRange, (, ), ,, g2, ), ;, }, }, return, new, Size2D, (]
[,, constraint, ., getHeightRange, (, ), ,, g2, ), ;, }, }, return, new, Size2D, (, container, ., calculateTotalWidth, (]
[,, constraint, ., getHeightRange, (, ), ,, g2, ), ;, }, }, return, new, Size2D, (, container, ., calculateTotalWidth, (]
[g2, ), ;, }, }, return, new, Size2D, (, container, ., calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,]
[g2, ), ;, }, }, return, new, Size2D, (, container, ., calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,]
[}, return, new, Size2D, (, container, ., calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, container, ., calculateTotalHeight, (]
[}, return, new, Size2D, (, container, ., calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, container, ., calculateTotalHeight, (]
[), ), ;, }, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, [, ], w, =]
[}, protected, Size2D, arrangeNN, (, BlockContainer, container, ,, Graphics2D, g2, ), {, double, [, ], w, =, new, double, []
[Graphics2D, g2, ), {, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =]
[{, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =, new, double, []
[=, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (]
[=, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (]
[=, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (]
[5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (, this, ., topBlock, !=]
[h, =, new, double, [, 5, ], ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =]
[h, =, new, double, [, 5, ], ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =]
[h, =, new, double, [, 5, ], ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =]
[], ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (]
[if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,]
[if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,]
[!=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, []
[size, =, this, ., topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 0, ], =]
[size, =, this, ., topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 0, ], =]
[topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 0, ], =, size, ., width, ;]
[topBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 0, ], =, size, ., width, ;]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 0, ], =, size, ., width, ;, h, []
[,, RectangleConstraint, ., NONE, ), ;, w, [, 0, ], =, size, ., width, ;, h, [, 0, ], =]
[,, RectangleConstraint, ., NONE, ), ;, w, [, 0, ], =, size, ., width, ;, h, [, 0, ], =]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =]
[;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (]
[if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,]
[if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,]
[!=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, []
[size, =, this, ., bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 1, ], =]
[size, =, this, ., bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 1, ], =]
[bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 1, ], =, size, ., width, ;]
[bottomBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 1, ], =, size, ., width, ;]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 1, ], =, size, ., width, ;, h, []
[,, RectangleConstraint, ., NONE, ), ;, w, [, 1, ], =, size, ., width, ;, h, [, 1, ], =]
[,, RectangleConstraint, ., NONE, ), ;, w, [, 1, ], =, size, ., width, ;, h, [, 1, ], =]
[[, 1, ], =, size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, if, (]
[[, 1, ], =, size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, if, (]
[[, 1, ], =, size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, if, (]
[size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, if, (, this, ., leftBlock, !=]
[1, ], =, size, ., height, ;, }, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =]
[1, ], =, size, ., height, ;, }, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =]
[1, ], =, size, ., height, ;, }, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =]
[;, }, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (]
[if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,]
[if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,]
[!=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, []
[size, =, this, ., leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 2, ], =]
[size, =, this, ., leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 2, ], =]
[leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 2, ], =, size, ., width, ;]
[leftBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 2, ], =, size, ., width, ;]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 2, ], =, size, ., width, ;, h, []
[,, RectangleConstraint, ., NONE, ), ;, w, [, 2, ], =, size, ., width, ;, h, [, 2, ], =]
[,, RectangleConstraint, ., NONE, ), ;, w, [, 2, ], =, size, ., width, ;, h, [, 2, ], =]
[[, 2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (]
[[, 2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (]
[[, 2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (]
[size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (, this, ., rightBlock, !=]
[2, ], =, size, ., height, ;, }, if, (, this, ., rightBlock, !=, null, ), {, Size2D, size, =]
[2, ], =, size, ., height, ;, }, if, (, this, ., rightBlock, !=, null, ), {, Size2D, size, =]
[2, ], =, size, ., height, ;, }, if, (, this, ., rightBlock, !=, null, ), {, Size2D, size, =]
[;, }, if, (, this, ., rightBlock, !=, null, ), {, Size2D, size, =, this, ., rightBlock, ., arrange, (]
[if, (, this, ., rightBlock, !=, null, ), {, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,]
[if, (, this, ., rightBlock, !=, null, ), {, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,]
[!=, null, ), {, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), {, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, []
[size, =, this, ., rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 3, ], =]
[size, =, this, ., rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 3, ], =]
[rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 3, ], =, size, ., width, ;]
[rightBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 3, ], =, size, ., width, ;]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 3, ], =, size, ., width, ;, h, []
[,, RectangleConstraint, ., NONE, ), ;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =]
[,, RectangleConstraint, ., NONE, ), ;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =]
[;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }]
[;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }]
[[, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, []
[=, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =]
[=, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =]
[;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (]
[;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (]
[[, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, []
[=, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,]
[=, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,]
[., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, []
[h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;]
[h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;]
[2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, []
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =]
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =]
[max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, []
[], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (, this, ., centerBlock, !=]
[3, ], =, h, [, 2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, Size2D, size, =]
[3, ], =, h, [, 2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, Size2D, size, =]
[3, ], =, h, [, 2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, Size2D, size, =]
[], ;, if, (, this, ., centerBlock, !=, null, ), {, Size2D, size, =, this, ., centerBlock, ., arrange, (]
[if, (, this, ., centerBlock, !=, null, ), {, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,]
[if, (, this, ., centerBlock, !=, null, ), {, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,]
[!=, null, ), {, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;]
[), {, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, []
[size, =, this, ., centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 4, ], =]
[size, =, this, ., centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 4, ], =]
[centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 4, ], =, size, ., width, ;]
[centerBlock, ., arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 4, ], =, size, ., width, ;]
[arrange, (, g2, ,, RectangleConstraint, ., NONE, ), ;, w, [, 4, ], =, size, ., width, ;, h, []
[,, RectangleConstraint, ., NONE, ), ;, w, [, 4, ], =, size, ., width, ;, h, [, 4, ], =]
[,, RectangleConstraint, ., NONE, ), ;, w, [, 4, ], =, size, ., width, ;, h, [, 4, ], =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =]
[., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (]
[., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (]
[;, h, [, 4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (, w, []
[4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,]
[4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,]
[., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (]
[., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (]
[;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, []
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, []
[(, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +]
[(, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +]
[[, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, []
[,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +]
[,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +]
[., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +, w, []
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, centerHeight, =]
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, centerHeight, =]
[+, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, centerHeight, =, Math, ., max, (]
[+, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, centerHeight, =, Math, ., max, (]
[[, 4, ], +, w, [, 3, ], ), ), ;, double, centerHeight, =, Math, ., max, (, h, []
[+, w, [, 3, ], ), ), ;, double, centerHeight, =, Math, ., max, (, h, [, 2, ], ,]
[+, w, [, 3, ], ), ), ;, double, centerHeight, =, Math, ., max, (, h, [, 2, ], ,]
[], ), ), ;, double, centerHeight, =, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (]
[], ), ), ;, double, centerHeight, =, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (]
[), ;, double, centerHeight, =, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, []
[centerHeight, =, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,]
[centerHeight, =, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,]
[Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, []
[,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, double, height, =]
[,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, double, height, =]
[,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, double, height, =]
[,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, double, height, =]
[., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, double, height, =, h, []
[h, [, 3, ], ,, h, [, 4, ], ), ), ;, double, height, =, h, [, 0, ], +]
[h, [, 3, ], ,, h, [, 4, ], ), ), ;, double, height, =, h, [, 0, ], +]
[3, ], ,, h, [, 4, ], ), ), ;, double, height, =, h, [, 0, ], +, h, []
[h, [, 4, ], ), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +]
[), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +, centerHeight, ;, if, (]
[), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +, centerHeight, ;, if, (]
[), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +, centerHeight, ;, if, (]
[height, =, h, [, 0, ], +, h, [, 1, ], +, centerHeight, ;, if, (, this, ., topBlock, !=]
[[, 0, ], +, h, [, 1, ], +, centerHeight, ;, if, (, this, ., topBlock, !=, null, ), {]
[[, 0, ], +, h, [, 1, ], +, centerHeight, ;, if, (, this, ., topBlock, !=, null, ), {]
[[, 0, ], +, h, [, 1, ], +, centerHeight, ;, if, (, this, ., topBlock, !=, null, ), {]
[1, ], +, centerHeight, ;, if, (, this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (]
[if, (, this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,]
[null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,]
[{, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, []
[Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (]
[Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (]
[Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (]
[0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=]
[,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (]
[if, (, this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -]
[bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -]
[null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, []
[this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,]
[bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,]
[bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,]
[setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,, h, []
[,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (]
[,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (]
[,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (]
[[, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=]
[,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (]
[if, (, this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, []
[), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,]
[), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,]
[this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, []
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,]
[(, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, centerHeight, ), ), ;, }, if, (]
[(, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, centerHeight, ), ), ;, }, if, (]
[(, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, centerHeight, ), ), ;, }, if, (]
[[, 0, ], ,, w, [, 2, ], ,, centerHeight, ), ), ;, }, if, (, this, ., rightBlock, !=]
[,, w, [, 2, ], ,, centerHeight, ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[,, w, [, 2, ], ,, centerHeight, ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[,, w, [, 2, ], ,, centerHeight, ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[centerHeight, ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (]
[if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -]
[this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -]
[rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, []
[), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,]
[), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,]
[this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, []
[., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,]
[(, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, []
[., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,]
[3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, centerHeight, ), ), ;, }, if, (]
[3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, centerHeight, ), ), ;, }, if, (]
[3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, centerHeight, ), ), ;, }, if, (]
[[, 0, ], ,, w, [, 3, ], ,, centerHeight, ), ), ;, }, if, (, this, ., centerBlock, !=]
[,, w, [, 3, ], ,, centerHeight, ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[,, w, [, 3, ], ,, centerHeight, ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[,, w, [, 3, ], ,, centerHeight, ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[centerHeight, ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (]
[if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, []
[!=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,]
[!=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,]
[), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, []
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -]
[., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -]
[(, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, []
[., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -]
[., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -]
[(, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, []
[2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,]
[], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, centerHeight, ), ), ;, }, return]
[-, w, [, 2, ], -, w, [, 3, ], ,, centerHeight, ), ), ;, }, return, new, Size2D, (]
[[, 2, ], -, w, [, 3, ], ,, centerHeight, ), ), ;, }, return, new, Size2D, (, width, ,]
[), ;, }, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =]
[}, protected, Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrangeFN, (]
[Size2D, arrangeFR, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrangeFN, (, container, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrangeFN, (, container, ,, g2, ,]
[(, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, Size2D, size1, =, arrangeFN, (, container, ,, g2, ,]
[), {, Size2D, size1, =, arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), ), ;, if, (]
[), {, Size2D, size1, =, arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), ), ;, if, (]
[), {, Size2D, size1, =, arrangeFN, (, container, ,, g2, ,, constraint, ., getWidth, (, ), ), ;, if, (]
[,, g2, ,, constraint, ., getWidth, (, ), ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[,, g2, ,, constraint, ., getWidth, (, ), ), ;, if, (, constraint, ., getHeightRange, (, ), ., contains, (]
[;, if, (, constraint, ., getHeightRange, (, ), ., contains, (, size1, ., getHeight, (, ), ), ), {, return]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[., contains, (, size1, ., getHeight, (, ), ), ), {, return, size1, ;, }, else, {, double, h, =]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[), ), {, return, size1, ;, }, else, {, double, h, =, constraint, ., getHeightRange, (, ), ., constrain, (]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =]
[h, =, constraint, ., getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =]
[getHeightRange, (, ), ., constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (]
[constrain, (, size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return]
[size1, ., getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (]
[getHeight, (, ), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,]
[), ), ;, RectangleConstraint, c2, =, constraint, ., toFixedHeight, (, h, ), ;, return, arrange, (, container, ,, g2, ,]
[}, protected, Size2D, arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, double, width, ), {, double, [, ], w, =]
[arrangeFN, (, BlockContainer, container, ,, Graphics2D, g2, ,, double, width, ), {, double, [, ], w, =, new, double, []
[double, width, ), {, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =]
[{, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =, new, double, []
[new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, RectangleConstraint, c1, =]
[5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (]
[;, double, [, ], h, =, new, double, [, 5, ], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (, width, ,]
[[, ], h, =, new, double, [, 5, ], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (, width, ,, null, ,]
[[, ], h, =, new, double, [, 5, ], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (, width, ,, null, ,]
[new, double, [, 5, ], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (, width, ,, null, ,, LengthConstraintType, ., FIXED, ,]
[[, 5, ], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (, width, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,]
[], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (, width, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,]
[], ;, RectangleConstraint, c1, =, new, RectangleConstraint, (, width, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,]
[(, width, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (]
[(, width, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (]
[(, width, ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (]
[,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., topBlock, !=]
[,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =]
[,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =]
[,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =]
[), ;, if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (]
[if, (, this, ., topBlock, !=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,]
[., topBlock, !=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;]
[., topBlock, !=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, []
[{, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =]
[{, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =]
[this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;]
[this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;]
[topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;, h, []
[(, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;, h, [, 0, ], =]
[(, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;, h, [, 0, ], =]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =]
[;, }, if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (]
[if, (, this, ., bottomBlock, !=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,]
[., bottomBlock, !=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c1, ), ;]
[., bottomBlock, !=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c1, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c1, ), ;, w, []
[{, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 1, ], =]
[{, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 1, ], =]
[this, ., bottomBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 1, ], =, size, ., width, ;]
[this, ., bottomBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 1, ], =, size, ., width, ;]
[bottomBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 1, ], =, size, ., width, ;, h, []
[(, g2, ,, c1, ), ;, w, [, 1, ], =, size, ., width, ;, h, [, 1, ], =]
[(, g2, ,, c1, ), ;, w, [, 1, ], =, size, ., width, ;, h, [, 1, ], =]
[1, ], =, size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, RectangleConstraint, c2, =]
[size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, RectangleConstraint, c2, =, new, RectangleConstraint, (]
[width, ;, h, [, 1, ], =, size, ., height, ;, }, RectangleConstraint, c2, =, new, RectangleConstraint, (, 0.0, ,]
[[, 1, ], =, size, ., height, ;, }, RectangleConstraint, c2, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (]
[], =, size, ., height, ;, }, RectangleConstraint, c2, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,]
[., height, ;, }, RectangleConstraint, c2, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, width, ), ,]
[., height, ;, }, RectangleConstraint, c2, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, width, ), ,]
[RectangleConstraint, c2, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,]
[=, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,]
[RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,]
[RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,]
[0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (]
[0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (]
[0.0, ,, width, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (]
[,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., leftBlock, !=]
[,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =]
[,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =]
[,, null, ,, LengthConstraintType, ., NONE, ), ;, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =]
[), ;, if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (]
[if, (, this, ., leftBlock, !=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,]
[., leftBlock, !=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c2, ), ;]
[., leftBlock, !=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c2, ), ;]
[!=, null, ), {, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c2, ), ;, w, []
[{, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 2, ], =]
[{, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 2, ], =]
[this, ., leftBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 2, ], =, size, ., width, ;]
[this, ., leftBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 2, ], =, size, ., width, ;]
[leftBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 2, ], =, size, ., width, ;, h, []
[(, g2, ,, c2, ), ;, w, [, 2, ], =, size, ., width, ;, h, [, 2, ], =]
[(, g2, ,, c2, ), ;, w, [, 2, ], =, size, ., width, ;, h, [, 2, ], =]
[[, 2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (]
[[, 2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (]
[[, 2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (]
[size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, if, (, this, ., rightBlock, !=]
[2, ], =, size, ., height, ;, }, if, (, this, ., rightBlock, !=, null, ), {, double, maxW, =]
[2, ], =, size, ., height, ;, }, if, (, this, ., rightBlock, !=, null, ), {, double, maxW, =]
[., height, ;, }, if, (, this, ., rightBlock, !=, null, ), {, double, maxW, =, Math, ., max, (]
[., height, ;, }, if, (, this, ., rightBlock, !=, null, ), {, double, maxW, =, Math, ., max, (]
[;, }, if, (, this, ., rightBlock, !=, null, ), {, double, maxW, =, Math, ., max, (, width, -]
[;, }, if, (, this, ., rightBlock, !=, null, ), {, double, maxW, =, Math, ., max, (, width, -]
[if, (, this, ., rightBlock, !=, null, ), {, double, maxW, =, Math, ., max, (, width, -, w, []
[., rightBlock, !=, null, ), {, double, maxW, =, Math, ., max, (, width, -, w, [, 2, ], ,]
[double, maxW, =, Math, ., max, (, width, -, w, [, 2, ], ,, 0.0, ), ;, RectangleConstraint, c3, =]
[Math, ., max, (, width, -, w, [, 2, ], ,, 0.0, ), ;, RectangleConstraint, c3, =, new, RectangleConstraint, (]
[max, (, width, -, w, [, 2, ], ,, 0.0, ), ;, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,]
[-, w, [, 2, ], ,, 0.0, ), ;, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (]
[-, w, [, 2, ], ,, 0.0, ), ;, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (]
[], ,, 0.0, ), ;, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, Math, ., min, (]
[], ,, 0.0, ), ;, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, Math, ., min, (]
[0.0, ), ;, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, Math, ., min, (, w, []
[RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, Math, ., min, (, w, [, 2, ], ,]
[new, RectangleConstraint, (, 0.0, ,, new, Range, (, Math, ., min, (, w, [, 2, ], ,, maxW, ), ,]
[0.0, ,, new, Range, (, Math, ., min, (, w, [, 2, ], ,, maxW, ), ,, maxW, ), ,]
[0.0, ,, new, Range, (, Math, ., min, (, w, [, 2, ], ,, maxW, ), ,, maxW, ), ,]
[(, Math, ., min, (, w, [, 2, ], ,, maxW, ), ,, maxW, ), ,, LengthConstraintType, ., RANGE, ,]
[., min, (, w, [, 2, ], ,, maxW, ), ,, maxW, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,]
[(, w, [, 2, ], ,, maxW, ), ,, maxW, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,]
[(, w, [, 2, ], ,, maxW, ), ,, maxW, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,]
[,, maxW, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =]
[,, maxW, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =]
[,, maxW, ), ,, LengthConstraintType, ., RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =]
[RANGE, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (]
[0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,]
[,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c3, ), ;]
[,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c3, ), ;]
[., NONE, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c3, ), ;, w, []
[;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 3, ], =]
[;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 3, ], =]
[this, ., rightBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 3, ], =, size, ., width, ;]
[this, ., rightBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 3, ], =, size, ., width, ;]
[rightBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 3, ], =, size, ., width, ;, h, []
[(, g2, ,, c3, ), ;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =]
[(, g2, ,, c3, ), ;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =]
[;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }]
[;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }]
[[, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, []
[=, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =]
[=, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =]
[;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (]
[;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (]
[[, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, []
[=, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,]
[=, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,]
[., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, []
[h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;]
[h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;]
[2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, []
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =]
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =]
[max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, []
[], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, if, (, this, ., centerBlock, !=]
[3, ], =, h, [, 2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =]
[h, [, 2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (]
[h, [, 2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (]
[h, [, 2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (]
[2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -]
[2, ], ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -]
[;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -, w, []
[this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -, w, [, 2, ], -]
[this, ., centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -, w, [, 2, ], -]
[centerBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -, w, [, 2, ], -, w, []
[), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -, w, [, 2, ], -, w, [, 3, ], ,]
[RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -, w, [, 2, ], -, w, [, 3, ], ,, null, ,]
[RectangleConstraint, c4, =, new, RectangleConstraint, (, width, -, w, [, 2, ], -, w, [, 3, ], ,, null, ,]
[RectangleConstraint, (, width, -, w, [, 2, ], -, w, [, 3, ], ,, null, ,, LengthConstraintType, ., FIXED, ,]
[width, -, w, [, 2, ], -, w, [, 3, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,]
[w, [, 2, ], -, w, [, 3, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,]
[w, [, 2, ], -, w, [, 3, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,]
[], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =]
[], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =]
[], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =]
[FIXED, ,, 0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (]
[0.0, ,, null, ,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,]
[,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c4, ), ;]
[,, LengthConstraintType, ., NONE, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c4, ), ;]
[., NONE, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c4, ), ;, w, []
[;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 4, ], =]
[;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 4, ], =]
[this, ., centerBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 4, ], =, size, ., width, ;]
[this, ., centerBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 4, ], =, size, ., width, ;]
[centerBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 4, ], =, size, ., width, ;, h, []
[(, g2, ,, c4, ), ;, w, [, 4, ], =, size, ., width, ;, h, [, 4, ], =]
[(, g2, ,, c4, ), ;, w, [, 4, ], =, size, ., width, ;, h, [, 4, ], =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, height, =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, height, =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, height, =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, height, =]
[=, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, height, =, h, []
[width, ;, h, [, 4, ], =, size, ., height, ;, }, double, height, =, h, [, 0, ], +]
[width, ;, h, [, 4, ], =, size, ., height, ;, }, double, height, =, h, [, 0, ], +]
[h, [, 4, ], =, size, ., height, ;, }, double, height, =, h, [, 0, ], +, h, []
[], =, size, ., height, ;, }, double, height, =, h, [, 0, ], +, h, [, 1, ], +]
[], =, size, ., height, ;, }, double, height, =, h, [, 0, ], +, h, [, 1, ], +]
[height, ;, }, double, height, =, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (]
[height, ;, }, double, height, =, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (]
[}, double, height, =, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, []
[=, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,]
[=, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,]
[], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (]
[], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (]
[h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, []
[], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,]
[], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,]
[Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, []
[2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, return]
[,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, return, arrange, (]
[., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, return, arrange, (, container, ,]
[(, h, [, 3, ], ,, h, [, 4, ], ), ), ;, return, arrange, (, container, ,, g2, ,]
[3, ], ,, h, [, 4, ], ), ), ;, return, arrange, (, container, ,, g2, ,, new, RectangleConstraint, (]
[,, h, [, 4, ], ), ), ;, return, arrange, (, container, ,, g2, ,, new, RectangleConstraint, (, width, ,]
[arrangeRR, (, BlockContainer, container, ,, Range, widthRange, ,, Range, heightRange, ,, Graphics2D, g2, ), {, double, [, ], w, =]
[container, ,, Range, widthRange, ,, Range, heightRange, ,, Graphics2D, g2, ), {, double, [, ], w, =, new, double, []
[Graphics2D, g2, ), {, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =]
[{, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =, new, double, []
[=, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (]
[=, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (]
[=, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (]
[5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, if, (, this, ., topBlock, !=]
[h, =, new, double, [, 5, ], ;, if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =]
[double, [, 5, ], ;, if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (]
[5, ], ;, if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, widthRange, ,]
[., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, widthRange, ,, heightRange, ), ;, Size2D, size, =]
[., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, widthRange, ,, heightRange, ), ;, Size2D, size, =]
[., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, widthRange, ,, heightRange, ), ;, Size2D, size, =]
[RectangleConstraint, c1, =, new, RectangleConstraint, (, widthRange, ,, heightRange, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (]
[=, new, RectangleConstraint, (, widthRange, ,, heightRange, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,]
[(, widthRange, ,, heightRange, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;]
[(, widthRange, ,, heightRange, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;]
[,, heightRange, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, []
[;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =]
[;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =]
[this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;]
[this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;]
[topBlock, ., arrange, (, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;, h, []
[(, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;, h, [, 0, ], =]
[(, g2, ,, c1, ), ;, w, [, 0, ], =, size, ., width, ;, h, [, 0, ], =]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[[, 0, ], =, size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (]
[size, ., width, ;, h, [, 0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Range, heightRange2, =]
[0, ], =, size, ., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Range, heightRange2, =]
[., height, ;, }, if, (, this, ., bottomBlock, !=, null, ), {, Range, heightRange2, =, Range, ., shift, (]
[;, }, if, (, this, ., bottomBlock, !=, null, ), {, Range, heightRange2, =, Range, ., shift, (, heightRange, ,]
[}, if, (, this, ., bottomBlock, !=, null, ), {, Range, heightRange2, =, Range, ., shift, (, heightRange, ,, -]
[}, if, (, this, ., bottomBlock, !=, null, ), {, Range, heightRange2, =, Range, ., shift, (, heightRange, ,, -]
[(, this, ., bottomBlock, !=, null, ), {, Range, heightRange2, =, Range, ., shift, (, heightRange, ,, -, h, []
[bottomBlock, !=, null, ), {, Range, heightRange2, =, Range, ., shift, (, heightRange, ,, -, h, [, 0, ], ,]
[heightRange2, =, Range, ., shift, (, heightRange, ,, -, h, [, 0, ], ,, false, ), ;, RectangleConstraint, c2, =]
[., shift, (, heightRange, ,, -, h, [, 0, ], ,, false, ), ;, RectangleConstraint, c2, =, new, RectangleConstraint, (]
[(, heightRange, ,, -, h, [, 0, ], ,, false, ), ;, RectangleConstraint, c2, =, new, RectangleConstraint, (, widthRange, ,]
[0, ], ,, false, ), ;, RectangleConstraint, c2, =, new, RectangleConstraint, (, widthRange, ,, heightRange2, ), ;, Size2D, size, =]
[0, ], ,, false, ), ;, RectangleConstraint, c2, =, new, RectangleConstraint, (, widthRange, ,, heightRange2, ), ;, Size2D, size, =]
[0, ], ,, false, ), ;, RectangleConstraint, c2, =, new, RectangleConstraint, (, widthRange, ,, heightRange2, ), ;, Size2D, size, =]
[RectangleConstraint, c2, =, new, RectangleConstraint, (, widthRange, ,, heightRange2, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (]
[=, new, RectangleConstraint, (, widthRange, ,, heightRange2, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,]
[(, widthRange, ,, heightRange2, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;]
[(, widthRange, ,, heightRange2, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;]
[,, heightRange2, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, w, []
[;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 1, ], =]
[;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 1, ], =]
[this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 1, ], =, size, ., width, ;]
[this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 1, ], =, size, ., width, ;]
[bottomBlock, ., arrange, (, g2, ,, c2, ), ;, w, [, 1, ], =, size, ., width, ;, h, []
[(, g2, ,, c2, ), ;, w, [, 1, ], =, size, ., width, ;, h, [, 1, ], =]
[(, g2, ,, c2, ), ;, w, [, 1, ], =, size, ., width, ;, h, [, 1, ], =]
[1, ], =, size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, Range, heightRange3, =]
[1, ], =, size, ., width, ;, h, [, 1, ], =, size, ., height, ;, }, Range, heightRange3, =]
[., width, ;, h, [, 1, ], =, size, ., height, ;, }, Range, heightRange3, =, Range, ., shift, (]
[;, h, [, 1, ], =, size, ., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,]
[h, [, 1, ], =, size, ., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -]
[[, 1, ], =, size, ., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -, (]
[[, 1, ], =, size, ., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -, (]
[[, 1, ], =, size, ., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -, (]
[], =, size, ., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -, (, h, []
[., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -, (, h, [, 0, ], +]
[., height, ;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -, (, h, [, 0, ], +]
[;, }, Range, heightRange3, =, Range, ., shift, (, heightRange, ,, -, (, h, [, 0, ], +, h, []
[shift, (, heightRange, ,, -, (, h, [, 0, ], +, h, [, 1, ], ), ), ;, if, (]
[shift, (, heightRange, ,, -, (, h, [, 0, ], +, h, [, 1, ], ), ), ;, if, (]
[shift, (, heightRange, ,, -, (, h, [, 0, ], +, h, [, 1, ], ), ), ;, if, (]
[-, (, h, [, 0, ], +, h, [, 1, ], ), ), ;, if, (, this, ., leftBlock, !=]
[+, h, [, 1, ], ), ), ;, if, (, this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =]
[1, ], ), ), ;, if, (, this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (]
[), ), ;, if, (, this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, widthRange, ,]
[., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, widthRange, ,, heightRange3, ), ;, Size2D, size, =]
[., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, widthRange, ,, heightRange3, ), ;, Size2D, size, =]
[., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, widthRange, ,, heightRange3, ), ;, Size2D, size, =]
[RectangleConstraint, c3, =, new, RectangleConstraint, (, widthRange, ,, heightRange3, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (]
[=, new, RectangleConstraint, (, widthRange, ,, heightRange3, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,]
[(, widthRange, ,, heightRange3, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;]
[(, widthRange, ,, heightRange3, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;]
[,, heightRange3, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, []
[;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =]
[;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =]
[this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;]
[this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;]
[leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, h, []
[(, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, h, [, 2, ], =]
[(, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, h, [, 2, ], =]
[2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, Range, widthRange2, =]
[2, ], =, size, ., width, ;, h, [, 2, ], =, size, ., height, ;, }, Range, widthRange2, =]
[., width, ;, h, [, 2, ], =, size, ., height, ;, }, Range, widthRange2, =, Range, ., shift, (]
[;, h, [, 2, ], =, size, ., height, ;, }, Range, widthRange2, =, Range, ., shift, (, widthRange, ,]
[h, [, 2, ], =, size, ., height, ;, }, Range, widthRange2, =, Range, ., shift, (, widthRange, ,, -]
[h, [, 2, ], =, size, ., height, ;, }, Range, widthRange2, =, Range, ., shift, (, widthRange, ,, -]
[2, ], =, size, ., height, ;, }, Range, widthRange2, =, Range, ., shift, (, widthRange, ,, -, w, []
[size, ., height, ;, }, Range, widthRange2, =, Range, ., shift, (, widthRange, ,, -, w, [, 2, ], ,]
[Range, widthRange2, =, Range, ., shift, (, widthRange, ,, -, w, [, 2, ], ,, false, ), ;, if, (]
[Range, widthRange2, =, Range, ., shift, (, widthRange, ,, -, w, [, 2, ], ,, false, ), ;, if, (]
[Range, widthRange2, =, Range, ., shift, (, widthRange, ,, -, w, [, 2, ], ,, false, ), ;, if, (]
[., shift, (, widthRange, ,, -, w, [, 2, ], ,, false, ), ;, if, (, this, ., rightBlock, !=]
[w, [, 2, ], ,, false, ), ;, if, (, this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =]
[], ,, false, ), ;, if, (, this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (]
[false, ), ;, if, (, this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, widthRange2, ,]
[., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, widthRange2, ,, heightRange3, ), ;, Size2D, size, =]
[., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, widthRange2, ,, heightRange3, ), ;, Size2D, size, =]
[., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, widthRange2, ,, heightRange3, ), ;, Size2D, size, =]
[RectangleConstraint, c4, =, new, RectangleConstraint, (, widthRange2, ,, heightRange3, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (]
[=, new, RectangleConstraint, (, widthRange2, ,, heightRange3, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,]
[(, widthRange2, ,, heightRange3, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;]
[(, widthRange2, ,, heightRange3, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;]
[,, heightRange3, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, []
[;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =]
[;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =]
[this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;]
[this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;]
[rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, h, []
[(, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =]
[(, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =]
[;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }]
[;, w, [, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }]
[[, 3, ], =, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, []
[=, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =]
[=, size, ., width, ;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =]
[;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (]
[;, h, [, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (]
[[, 3, ], =, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, []
[=, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,]
[=, size, ., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,]
[., height, ;, }, h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, []
[h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;]
[h, [, 2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;]
[2, ], =, Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, []
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =]
[Math, ., max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =]
[max, (, h, [, 2, ], ,, h, [, 3, ], ), ;, h, [, 3, ], =, h, []
[,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =]
[,, h, [, 3, ], ), ;, h, [, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =]
[], ), ;, h, [, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =, Range, ., shift, (]
[;, h, [, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,]
[h, [, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -]
[[, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -, (]
[[, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -, (]
[[, 3, ], =, h, [, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -, (]
[], =, h, [, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -, (, w, []
[[, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -, (, w, [, 2, ], +]
[[, 2, ], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -, (, w, [, 2, ], +]
[], ;, Range, widthRange3, =, Range, ., shift, (, widthRange, ,, -, (, w, [, 2, ], +, w, []
[=, Range, ., shift, (, widthRange, ,, -, (, w, [, 2, ], +, w, [, 3, ], ), ,]
[widthRange, ,, -, (, w, [, 2, ], +, w, [, 3, ], ), ,, false, ), ;, if, (]
[widthRange, ,, -, (, w, [, 2, ], +, w, [, 3, ], ), ,, false, ), ;, if, (]
[widthRange, ,, -, (, w, [, 2, ], +, w, [, 3, ], ), ,, false, ), ;, if, (]
[w, [, 2, ], +, w, [, 3, ], ), ,, false, ), ;, if, (, this, ., centerBlock, !=]
[[, 3, ], ), ,, false, ), ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c5, =]
[), ,, false, ), ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c5, =, new, RectangleConstraint, (]
[false, ), ;, if, (, this, ., centerBlock, !=, null, ), {, RectangleConstraint, c5, =, new, RectangleConstraint, (, widthRange3, ,]
[., centerBlock, !=, null, ), {, RectangleConstraint, c5, =, new, RectangleConstraint, (, widthRange3, ,, heightRange3, ), ;, Size2D, size, =]
[., centerBlock, !=, null, ), {, RectangleConstraint, c5, =, new, RectangleConstraint, (, widthRange3, ,, heightRange3, ), ;, Size2D, size, =]
[., centerBlock, !=, null, ), {, RectangleConstraint, c5, =, new, RectangleConstraint, (, widthRange3, ,, heightRange3, ), ;, Size2D, size, =]
[RectangleConstraint, c5, =, new, RectangleConstraint, (, widthRange3, ,, heightRange3, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (]
[=, new, RectangleConstraint, (, widthRange3, ,, heightRange3, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,]
[(, widthRange3, ,, heightRange3, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;]
[(, widthRange3, ,, heightRange3, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;]
[,, heightRange3, ), ;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, w, []
[;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, w, [, 4, ], =]
[;, Size2D, size, =, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, w, [, 4, ], =]
[this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, w, [, 4, ], =, size, ., width, ;]
[this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, w, [, 4, ], =, size, ., width, ;]
[centerBlock, ., arrange, (, g2, ,, c5, ), ;, w, [, 4, ], =, size, ., width, ;, h, []
[(, g2, ,, c5, ), ;, w, [, 4, ], =, size, ., width, ;, h, [, 4, ], =]
[(, g2, ,, c5, ), ;, w, [, 4, ], =, size, ., width, ;, h, [, 4, ], =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =]
[4, ], =, size, ., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =]
[., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (]
[., width, ;, h, [, 4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (]
[;, h, [, 4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (, w, []
[4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,]
[4, ], =, size, ., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,]
[., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (]
[., height, ;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (]
[;, }, double, width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, []
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[width, =, Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,]
[Math, ., max, (, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, []
[(, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +]
[(, w, [, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +]
[[, 0, ], ,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, []
[,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +]
[,, Math, ., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +]
[., max, (, w, [, 1, ], ,, w, [, 2, ], +, w, [, 4, ], +, w, []
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, height, =]
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, height, =]
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, height, =]
[w, [, 2, ], +, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, height, =]
[2, ], +, w, [, 4, ], +, w, [, 3, ], ), ), ;, double, height, =, h, []
[w, [, 4, ], +, w, [, 3, ], ), ), ;, double, height, =, h, [, 0, ], +]
[w, [, 4, ], +, w, [, 3, ], ), ), ;, double, height, =, h, [, 0, ], +]
[4, ], +, w, [, 3, ], ), ), ;, double, height, =, h, [, 0, ], +, h, []
[w, [, 3, ], ), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +]
[w, [, 3, ], ), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +]
[), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (]
[), ), ;, double, height, =, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (]
[;, double, height, =, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, []
[=, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,]
[=, h, [, 0, ], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,]
[], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (]
[], +, h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (]
[h, [, 1, ], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, []
[], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,]
[], +, Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,]
[Math, ., max, (, h, [, 2, ], ,, Math, ., max, (, h, [, 3, ], ,, h, []
[], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, if, (]
[], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, if, (]
[], ,, Math, ., max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, if, (]
[max, (, h, [, 3, ], ,, h, [, 4, ], ), ), ;, if, (, this, ., topBlock, !=]
[[, 3, ], ,, h, [, 4, ], ), ), ;, if, (, this, ., topBlock, !=, null, ), {]
[[, 3, ], ,, h, [, 4, ], ), ), ;, if, (, this, ., topBlock, !=, null, ), {]
[[, 3, ], ,, h, [, 4, ], ), ), ;, if, (, this, ., topBlock, !=, null, ), {]
[4, ], ), ), ;, if, (, this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (]
[if, (, this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,]
[null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,]
[{, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, []
[Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (]
[Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (]
[Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (]
[0.0, ,, 0.0, ,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=]
[,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[,, width, ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (]
[if, (, this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -]
[bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -]
[null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, []
[this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,]
[bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,]
[bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,]
[setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, height, -, h, [, 1, ], ,, width, ,, h, []
[,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (]
[,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (]
[,, height, -, h, [, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (]
[[, 1, ], ,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=]
[,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[,, width, ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (]
[if, (, this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, []
[), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,]
[), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,]
[this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, []
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,]
[(, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, h, []
[h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (]
[,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=]
[2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (]
[if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -]
[this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -]
[rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, []
[), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,]
[), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,]
[this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, []
[., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,]
[(, new, Rectangle2D, ., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, []
[., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,]
[., Double, (, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,]
[(, width, -, w, [, 3, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, h, []
[h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (]
[,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=]
[3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (]
[if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, []
[!=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,]
[!=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,]
[), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, []
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -]
[., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -]
[(, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, []
[., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -]
[., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -]
[(, w, [, 2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, []
[2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,]
[2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,]
[2, ], ,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,]
[,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, height, -]
[,, h, [, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, height, -]
[[, 0, ], ,, width, -, w, [, 2, ], -, w, [, 3, ], ,, height, -, h, []
[,, width, -, w, [, 2, ], -, w, [, 3, ], ,, height, -, h, [, 0, ], -]
[,, width, -, w, [, 2, ], -, w, [, 3, ], ,, height, -, h, [, 0, ], -]
[-, w, [, 2, ], -, w, [, 3, ], ,, height, -, h, [, 0, ], -, h, []
[[, 3, ], ,, height, -, h, [, 0, ], -, h, [, 1, ], ), ), ;, }, return]
[,, height, -, h, [, 0, ], -, h, [, 1, ], ), ), ;, }, return, new, Size2D, (]
[-, h, [, 0, ], -, h, [, 1, ], ), ), ;, }, return, new, Size2D, (, width, ,]
[}, protected, Size2D, arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, [, ], w, =]
[arrangeFF, (, BlockContainer, container, ,, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, double, [, ], w, =, new, double, []
[RectangleConstraint, constraint, ), {, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =]
[{, double, [, ], w, =, new, double, [, 5, ], ;, double, [, ], h, =, new, double, []
[], w, =, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;]
[], w, =, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;]
[=, new, double, [, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, w, []
[[, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, w, [, 0, ], =]
[[, 5, ], ;, double, [, ], h, =, new, double, [, 5, ], ;, w, [, 0, ], =]
[=, new, double, [, 5, ], ;, w, [, 0, ], =, constraint, ., getWidth, (, ), ;, if, (]
[=, new, double, [, 5, ], ;, w, [, 0, ], =, constraint, ., getWidth, (, ), ;, if, (]
[=, new, double, [, 5, ], ;, w, [, 0, ], =, constraint, ., getWidth, (, ), ;, if, (]
[5, ], ;, w, [, 0, ], =, constraint, ., getWidth, (, ), ;, if, (, this, ., topBlock, !=]
[], =, constraint, ., getWidth, (, ), ;, if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =]
[., getWidth, (, ), ;, if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (]
[., getWidth, (, ), ;, if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (]
[(, ), ;, if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, w, []
[if, (, this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, w, [, 0, ], ,]
[this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,]
[this, ., topBlock, !=, null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,]
[null, ), {, RectangleConstraint, c1, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,]
[{, RectangleConstraint, c1, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,]
[=, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (]
[RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,]
[RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,]
[null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), ), ,]
[null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), ), ,]
[new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =]
[new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =]
[new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =]
[., getHeight, (, ), ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (]
[(, ), ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,]
[,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;]
[,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;]
[., RANGE, ), ;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, h, []
[;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, h, [, 0, ], =]
[;, Size2D, size, =, this, ., topBlock, ., arrange, (, g2, ,, c1, ), ;, h, [, 0, ], =]
[., topBlock, ., arrange, (, g2, ,, c1, ), ;, h, [, 0, ], =, size, ., height, ;, }]
[., topBlock, ., arrange, (, g2, ,, c1, ), ;, h, [, 0, ], =, size, ., height, ;, }]
[., arrange, (, g2, ,, c1, ), ;, h, [, 0, ], =, size, ., height, ;, }, w, []
[g2, ,, c1, ), ;, h, [, 0, ], =, size, ., height, ;, }, w, [, 1, ], =]
[g2, ,, c1, ), ;, h, [, 0, ], =, size, ., height, ;, }, w, [, 1, ], =]
[c1, ), ;, h, [, 0, ], =, size, ., height, ;, }, w, [, 1, ], =, w, []
[0, ], =, size, ., height, ;, }, w, [, 1, ], =, w, [, 0, ], ;, if, (]
[0, ], =, size, ., height, ;, }, w, [, 1, ], =, w, [, 0, ], ;, if, (]
[0, ], =, size, ., height, ;, }, w, [, 1, ], =, w, [, 0, ], ;, if, (]
[., height, ;, }, w, [, 1, ], =, w, [, 0, ], ;, if, (, this, ., bottomBlock, !=]
[1, ], =, w, [, 0, ], ;, if, (, this, ., bottomBlock, !=, null, ), {, RectangleConstraint, c2, =]
[w, [, 0, ], ;, if, (, this, ., bottomBlock, !=, null, ), {, RectangleConstraint, c2, =, new, RectangleConstraint, (]
[w, [, 0, ], ;, if, (, this, ., bottomBlock, !=, null, ), {, RectangleConstraint, c2, =, new, RectangleConstraint, (]
[0, ], ;, if, (, this, ., bottomBlock, !=, null, ), {, RectangleConstraint, c2, =, new, RectangleConstraint, (, w, []
[if, (, this, ., bottomBlock, !=, null, ), {, RectangleConstraint, c2, =, new, RectangleConstraint, (, w, [, 0, ], ,]
[this, ., bottomBlock, !=, null, ), {, RectangleConstraint, c2, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,]
[this, ., bottomBlock, !=, null, ), {, RectangleConstraint, c2, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,]
[null, ), {, RectangleConstraint, c2, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,]
[{, RectangleConstraint, c2, =, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,]
[=, new, RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (]
[RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,]
[RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,]
[RectangleConstraint, (, w, [, 0, ], ,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,]
[,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), -]
[,, null, ,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), -]
[,, LengthConstraintType, ., FIXED, ,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), -, h, []
[,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), -, h, [, 0, ], ), ,]
[,, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getHeight, (, ), -, h, [, 0, ], ), ,]
[constraint, ., getHeight, (, ), -, h, [, 0, ], ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =]
[constraint, ., getHeight, (, ), -, h, [, 0, ], ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =]
[constraint, ., getHeight, (, ), -, h, [, 0, ], ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =]
[h, [, 0, ], ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (]
[0, ], ), ,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,]
[,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;]
[,, LengthConstraintType, ., RANGE, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;]
[., RANGE, ), ;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, h, []
[;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, h, [, 1, ], =]
[;, Size2D, size, =, this, ., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, h, [, 1, ], =]
[., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, h, [, 1, ], =, size, ., height, ;, }]
[., bottomBlock, ., arrange, (, g2, ,, c2, ), ;, h, [, 1, ], =, size, ., height, ;, }]
[., arrange, (, g2, ,, c2, ), ;, h, [, 1, ], =, size, ., height, ;, }, h, []
[g2, ,, c2, ), ;, h, [, 1, ], =, size, ., height, ;, }, h, [, 2, ], =]
[g2, ,, c2, ), ;, h, [, 1, ], =, size, ., height, ;, }, h, [, 2, ], =]
[g2, ,, c2, ), ;, h, [, 1, ], =, size, ., height, ;, }, h, [, 2, ], =]
[g2, ,, c2, ), ;, h, [, 1, ], =, size, ., height, ;, }, h, [, 2, ], =]
[[, 1, ], =, size, ., height, ;, }, h, [, 2, ], =, constraint, ., getHeight, (, ), -]
[[, 1, ], =, size, ., height, ;, }, h, [, 2, ], =, constraint, ., getHeight, (, ), -]
[], =, size, ., height, ;, }, h, [, 2, ], =, constraint, ., getHeight, (, ), -, h, []
[., height, ;, }, h, [, 2, ], =, constraint, ., getHeight, (, ), -, h, [, 1, ], -]
[., height, ;, }, h, [, 2, ], =, constraint, ., getHeight, (, ), -, h, [, 1, ], -]
[;, }, h, [, 2, ], =, constraint, ., getHeight, (, ), -, h, [, 1, ], -, h, []
[], =, constraint, ., getHeight, (, ), -, h, [, 1, ], -, h, [, 0, ], ;, if, (]
[], =, constraint, ., getHeight, (, ), -, h, [, 1, ], -, h, [, 0, ], ;, if, (]
[], =, constraint, ., getHeight, (, ), -, h, [, 1, ], -, h, [, 0, ], ;, if, (]
[getHeight, (, ), -, h, [, 1, ], -, h, [, 0, ], ;, if, (, this, ., leftBlock, !=]
[1, ], -, h, [, 0, ], ;, if, (, this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =]
[h, [, 0, ], ;, if, (, this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (]
[0, ], ;, if, (, this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,]
[if, (, this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (]
[this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,]
[this, ., leftBlock, !=, null, ), {, RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,]
[RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getWidth, (, ), ), ,]
[RectangleConstraint, c3, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getWidth, (, ), ), ,]
[RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getWidth, (, ), ), ,, LengthConstraintType, ., RANGE, ,]
[RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, constraint, ., getWidth, (, ), ), ,, LengthConstraintType, ., RANGE, ,]
[0.0, ,, new, Range, (, 0.0, ,, constraint, ., getWidth, (, ), ), ,, LengthConstraintType, ., RANGE, ,, h, []
[Range, (, 0.0, ,, constraint, ., getWidth, (, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,]
[0.0, ,, constraint, ., getWidth, (, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,]
[0.0, ,, constraint, ., getWidth, (, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,]
[,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =]
[,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =]
[,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =]
[[, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (]
[], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,]
[,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;]
[,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;]
[., FIXED, ), ;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, []
[;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =]
[;, Size2D, size, =, this, ., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =]
[., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, }]
[., leftBlock, ., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, }]
[., arrange, (, g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, }, h, []
[g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, }, h, [, 3, ], =]
[g2, ,, c3, ), ;, w, [, 2, ], =, size, ., width, ;, }, h, [, 3, ], =]
[c3, ), ;, w, [, 2, ], =, size, ., width, ;, }, h, [, 3, ], =, h, []
[2, ], =, size, ., width, ;, }, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[2, ], =, size, ., width, ;, }, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[2, ], =, size, ., width, ;, }, h, [, 3, ], =, h, [, 2, ], ;, if, (]
[., width, ;, }, h, [, 3, ], =, h, [, 2, ], ;, if, (, this, ., rightBlock, !=]
[3, ], =, h, [, 2, ], ;, if, (, this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =]
[h, [, 2, ], ;, if, (, this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (]
[2, ], ;, if, (, this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, 0.0, ,]
[if, (, this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (]
[this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,]
[this, ., rightBlock, !=, null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,]
[null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, Math, ., max, (]
[null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, Math, ., max, (]
[null, ), {, RectangleConstraint, c4, =, new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, Math, ., max, (]
[new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, Math, ., max, (, constraint, ., getWidth, (, ), -]
[new, RectangleConstraint, (, 0.0, ,, new, Range, (, 0.0, ,, Math, ., max, (, constraint, ., getWidth, (, ), -]
[(, 0.0, ,, new, Range, (, 0.0, ,, Math, ., max, (, constraint, ., getWidth, (, ), -, w, []
[new, Range, (, 0.0, ,, Math, ., max, (, constraint, ., getWidth, (, ), -, w, [, 2, ], ,]
[,, Math, ., max, (, constraint, ., getWidth, (, ), -, w, [, 2, ], ,, 0.0, ), ), ,]
[,, Math, ., max, (, constraint, ., getWidth, (, ), -, w, [, 2, ], ,, 0.0, ), ), ,]
[(, constraint, ., getWidth, (, ), -, w, [, 2, ], ,, 0.0, ), ), ,, LengthConstraintType, ., RANGE, ,]
[(, constraint, ., getWidth, (, ), -, w, [, 2, ], ,, 0.0, ), ), ,, LengthConstraintType, ., RANGE, ,]
[., getWidth, (, ), -, w, [, 2, ], ,, 0.0, ), ), ,, LengthConstraintType, ., RANGE, ,, h, []
[), -, w, [, 2, ], ,, 0.0, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,]
[w, [, 2, ], ,, 0.0, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,]
[w, [, 2, ], ,, 0.0, ), ), ,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,]
[,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =]
[,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =]
[,, LengthConstraintType, ., RANGE, ,, h, [, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =]
[[, 2, ], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (]
[], ,, null, ,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,]
[,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;]
[,, LengthConstraintType, ., FIXED, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;]
[., FIXED, ), ;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, []
[;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =]
[;, Size2D, size, =, this, ., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =]
[., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, }]
[., rightBlock, ., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, }]
[., arrange, (, g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, }, h, []
[g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, }, h, [, 4, ], =]
[g2, ,, c4, ), ;, w, [, 3, ], =, size, ., width, ;, }, h, [, 4, ], =]
[c4, ), ;, w, [, 3, ], =, size, ., width, ;, }, h, [, 4, ], =, h, []
[w, [, 3, ], =, size, ., width, ;, }, h, [, 4, ], =, h, [, 2, ], ;]
[w, [, 3, ], =, size, ., width, ;, }, h, [, 4, ], =, h, [, 2, ], ;]
[3, ], =, size, ., width, ;, }, h, [, 4, ], =, h, [, 2, ], ;, w, []
[size, ., width, ;, }, h, [, 4, ], =, h, [, 2, ], ;, w, [, 4, ], =]
[size, ., width, ;, }, h, [, 4, ], =, h, [, 2, ], ;, w, [, 4, ], =]
[size, ., width, ;, }, h, [, 4, ], =, h, [, 2, ], ;, w, [, 4, ], =]
[size, ., width, ;, }, h, [, 4, ], =, h, [, 2, ], ;, w, [, 4, ], =]
[[, 4, ], =, h, [, 2, ], ;, w, [, 4, ], =, constraint, ., getWidth, (, ), -]
[[, 4, ], =, h, [, 2, ], ;, w, [, 4, ], =, constraint, ., getWidth, (, ), -]
[], =, h, [, 2, ], ;, w, [, 4, ], =, constraint, ., getWidth, (, ), -, w, []
[[, 2, ], ;, w, [, 4, ], =, constraint, ., getWidth, (, ), -, w, [, 3, ], -]
[[, 2, ], ;, w, [, 4, ], =, constraint, ., getWidth, (, ), -, w, [, 3, ], -]
[], ;, w, [, 4, ], =, constraint, ., getWidth, (, ), -, w, [, 3, ], -, w, []
[=, constraint, ., getWidth, (, ), -, w, [, 3, ], -, w, [, 2, ], ;, RectangleConstraint, c5, =]
[getWidth, (, ), -, w, [, 3, ], -, w, [, 2, ], ;, RectangleConstraint, c5, =, new, RectangleConstraint, (]
[getWidth, (, ), -, w, [, 3, ], -, w, [, 2, ], ;, RectangleConstraint, c5, =, new, RectangleConstraint, (]
[), -, w, [, 3, ], -, w, [, 2, ], ;, RectangleConstraint, c5, =, new, RectangleConstraint, (, w, []
[[, 3, ], -, w, [, 2, ], ;, RectangleConstraint, c5, =, new, RectangleConstraint, (, w, [, 4, ], ,]
[[, 3, ], -, w, [, 2, ], ;, RectangleConstraint, c5, =, new, RectangleConstraint, (, w, [, 4, ], ,]
[], -, w, [, 2, ], ;, RectangleConstraint, c5, =, new, RectangleConstraint, (, w, [, 4, ], ,, h, []
[;, RectangleConstraint, c5, =, new, RectangleConstraint, (, w, [, 4, ], ,, h, [, 4, ], ), ;, if, (]
[;, RectangleConstraint, c5, =, new, RectangleConstraint, (, w, [, 4, ], ,, h, [, 4, ], ), ;, if, (]
[;, RectangleConstraint, c5, =, new, RectangleConstraint, (, w, [, 4, ], ,, h, [, 4, ], ), ;, if, (]
[new, RectangleConstraint, (, w, [, 4, ], ,, h, [, 4, ], ), ;, if, (, this, ., centerBlock, !=]
[w, [, 4, ], ,, h, [, 4, ], ), ;, if, (, this, ., centerBlock, !=, null, ), {]
[w, [, 4, ], ,, h, [, 4, ], ), ;, if, (, this, ., centerBlock, !=, null, ), {]
[w, [, 4, ], ,, h, [, 4, ], ), ;, if, (, this, ., centerBlock, !=, null, ), {]
[[, 4, ], ), ;, if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., arrange, (]
[], ), ;, if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., arrange, (, g2, ,]
[., centerBlock, !=, null, ), {, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, }, if, (]
[., centerBlock, !=, null, ), {, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, }, if, (]
[., centerBlock, !=, null, ), {, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, }, if, (]
[), {, this, ., centerBlock, ., arrange, (, g2, ,, c5, ), ;, }, if, (, this, ., topBlock, !=]
[., centerBlock, ., arrange, (, g2, ,, c5, ), ;, }, if, (, this, ., topBlock, !=, null, ), {]
[., centerBlock, ., arrange, (, g2, ,, c5, ), ;, }, if, (, this, ., topBlock, !=, null, ), {]
[., centerBlock, ., arrange, (, g2, ,, c5, ), ;, }, if, (, this, ., topBlock, !=, null, ), {]
[,, c5, ), ;, }, if, (, this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (]
[if, (, this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[topBlock, !=, null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,]
[null, ), {, this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, w, []
[this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, w, [, 0, ], ,]
[this, ., topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, w, [, 0, ], ,]
[topBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, 0.0, ,, w, [, 0, ], ,, h, []
[(, 0.0, ,, 0.0, ,, w, [, 0, ], ,, h, [, 0, ], ), ), ;, }, if, (]
[(, 0.0, ,, 0.0, ,, w, [, 0, ], ,, h, [, 0, ], ), ), ;, }, if, (]
[(, 0.0, ,, 0.0, ,, w, [, 0, ], ,, h, [, 0, ], ), ), ;, }, if, (]
[,, w, [, 0, ], ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=]
[0, ], ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[0, ], ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[0, ], ,, h, [, 0, ], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (]
[if, (, this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[this, ., bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[bottomBlock, !=, null, ), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, []
[), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +]
[), {, this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +]
[this, ., bottomBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +, h, []
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,]
[(, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,, w, []
[., Double, (, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,, w, [, 1, ], ,]
[., Double, (, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,, w, [, 1, ], ,]
[(, 0.0, ,, h, [, 0, ], +, h, [, 2, ], ,, w, [, 1, ], ,, h, []
[h, [, 2, ], ,, w, [, 1, ], ,, h, [, 1, ], ), ), ;, }, if, (]
[h, [, 2, ], ,, w, [, 1, ], ,, h, [, 1, ], ), ), ;, }, if, (]
[h, [, 2, ], ,, w, [, 1, ], ,, h, [, 1, ], ), ), ;, }, if, (]
[,, w, [, 1, ], ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=]
[1, ], ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[1, ], ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[1, ], ,, h, [, 1, ], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (]
[if, (, this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[this, ., leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,]
[leftBlock, !=, null, ), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, []
[), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,]
[), {, this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,]
[this, ., leftBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, []
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,]
[(, new, Rectangle2D, ., Double, (, 0.0, ,, h, [, 0, ], ,, w, [, 2, ], ,, h, []
[h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (]
[,, w, [, 2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=]
[2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[2, ], ,, h, [, 2, ], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (]
[if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., rightBlock, !=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, []
[!=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], +]
[!=, null, ), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], +]
[), {, this, ., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, []
[., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, [, 4, ], ,]
[., rightBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, [, 4, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, [, 4, ], ,, h, []
[new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, [, 4, ], ,, h, [, 0, ], ,]
[new, Rectangle2D, ., Double, (, w, [, 2, ], +, w, [, 4, ], ,, h, [, 0, ], ,]
[., Double, (, w, [, 2, ], +, w, [, 4, ], ,, h, [, 0, ], ,, w, []
[w, [, 2, ], +, w, [, 4, ], ,, h, [, 0, ], ,, w, [, 3, ], ,]
[w, [, 2, ], +, w, [, 4, ], ,, h, [, 0, ], ,, w, [, 3, ], ,]
[2, ], +, w, [, 4, ], ,, h, [, 0, ], ,, w, [, 3, ], ,, h, []
[h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (]
[h, [, 0, ], ,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (]
[,, w, [, 3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=]
[3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[3, ], ,, h, [, 3, ], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {]
[], ), ), ;, }, if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (]
[if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[if, (, this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (]
[this, ., centerBlock, !=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, []
[!=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,]
[!=, null, ), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,]
[), {, this, ., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, []
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., centerBlock, ., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,]
[., setBounds, (, new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, w, []
[new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, w, [, 4, ], ,]
[new, Rectangle2D, ., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, w, [, 4, ], ,]
[., Double, (, w, [, 2, ], ,, h, [, 0, ], ,, w, [, 4, ], ,, h, []
[,, h, [, 0, ], ,, w, [, 4, ], ,, h, [, 4, ], ), ), ;, }, return]
[0, ], ,, w, [, 4, ], ,, h, [, 4, ], ), ), ;, }, return, new, Size2D, (]
[0, ], ,, w, [, 4, ], ,, h, [, 4, ], ), ), ;, }, return, new, Size2D, (]
[], ,, h, [, 4, ], ), ), ;, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,]
[], ,, h, [, 4, ], ), ), ;, }, return, new, Size2D, (, constraint, ., getWidth, (, ), ,]
[constraint, ., getWidth, (, ), ,, constraint, ., getHeight, (, ), ), ;, }, public, void, clear, (, ), {]
[constraint, ., getWidth, (, ), ,, constraint, ., getHeight, (, ), ), ;, }, public, void, clear, (, ), {]
[), ,, constraint, ., getHeight, (, ), ), ;, }, public, void, clear, (, ), {, this, ., centerBlock, =]
[constraint, ., getHeight, (, ), ), ;, }, public, void, clear, (, ), {, this, ., centerBlock, =, null, ;]
[constraint, ., getHeight, (, ), ), ;, }, public, void, clear, (, ), {, this, ., centerBlock, =, null, ;]
[), ), ;, }, public, void, clear, (, ), {, this, ., centerBlock, =, null, ;, this, ., topBlock, =]
[;, }, public, void, clear, (, ), {, this, ., centerBlock, =, null, ;, this, ., topBlock, =, null, ;]
[;, }, public, void, clear, (, ), {, this, ., centerBlock, =, null, ;, this, ., topBlock, =, null, ;]
[clear, (, ), {, this, ., centerBlock, =, null, ;, this, ., topBlock, =, null, ;, this, ., bottomBlock, =]
[), {, this, ., centerBlock, =, null, ;, this, ., topBlock, =, null, ;, this, ., bottomBlock, =, null, ;]
[), {, this, ., centerBlock, =, null, ;, this, ., topBlock, =, null, ;, this, ., bottomBlock, =, null, ;]
[centerBlock, =, null, ;, this, ., topBlock, =, null, ;, this, ., bottomBlock, =, null, ;, this, ., leftBlock, =]
[null, ;, this, ., topBlock, =, null, ;, this, ., bottomBlock, =, null, ;, this, ., leftBlock, =, null, ;]
[null, ;, this, ., topBlock, =, null, ;, this, ., bottomBlock, =, null, ;, this, ., leftBlock, =, null, ;]
[topBlock, =, null, ;, this, ., bottomBlock, =, null, ;, this, ., leftBlock, =, null, ;, this, ., rightBlock, =]
[=, null, ;, this, ., rightBlock, =, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[=, null, ;, this, ., rightBlock, =, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[;, this, ., rightBlock, =, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[=, null, ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, BorderArrangement, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, BorderArrangement, ), ), {, return, false, ;, }, BorderArrangement, that, =]
[if, (, !, (, obj, instanceof, BorderArrangement, ), ), {, return, false, ;, }, BorderArrangement, that, =, (, BorderArrangement, )]
[obj, instanceof, BorderArrangement, ), ), {, return, false, ;, }, BorderArrangement, that, =, (, BorderArrangement, ), obj, ;, if, (]
[instanceof, BorderArrangement, ), ), {, return, false, ;, }, BorderArrangement, that, =, (, BorderArrangement, ), obj, ;, if, (, !]
[instanceof, BorderArrangement, ), ), {, return, false, ;, }, BorderArrangement, that, =, (, BorderArrangement, ), obj, ;, if, (, !]
[{, return, false, ;, }, BorderArrangement, that, =, (, BorderArrangement, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[{, return, false, ;, }, BorderArrangement, that, =, (, BorderArrangement, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[}, BorderArrangement, that, =, (, BorderArrangement, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., topBlock, ,]
[}, BorderArrangement, that, =, (, BorderArrangement, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., topBlock, ,]
[obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., topBlock, ,, that, ., topBlock, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., topBlock, ,, that, ., topBlock, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., topBlock, ,, that, ., topBlock, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., topBlock, ,, that, ., topBlock, ), ), {, return, false, ;, }, if, (, !]
[., topBlock, ,, that, ., topBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., topBlock, ,, that, ., topBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., topBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., bottomBlock, ,]
[., topBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., bottomBlock, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., bottomBlock, ,, that, ., bottomBlock, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., bottomBlock, ,, that, ., bottomBlock, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., bottomBlock, ,, that, ., bottomBlock, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., bottomBlock, ,, that, ., bottomBlock, ), ), {, return, false, ;, }, if, (, !]
[., bottomBlock, ,, that, ., bottomBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., bottomBlock, ,, that, ., bottomBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., bottomBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., leftBlock, ,]
[., bottomBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., leftBlock, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., leftBlock, ,, that, ., leftBlock, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., leftBlock, ,, that, ., leftBlock, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., leftBlock, ,, that, ., leftBlock, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., leftBlock, ,, that, ., leftBlock, ), ), {, return, false, ;, }, if, (, !]
[., leftBlock, ,, that, ., leftBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., leftBlock, ,, that, ., leftBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., leftBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., rightBlock, ,]
[., leftBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., rightBlock, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., rightBlock, ,, that, ., rightBlock, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., rightBlock, ,, that, ., rightBlock, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., rightBlock, ,, that, ., rightBlock, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., rightBlock, ,, that, ., rightBlock, ), ), {, return, false, ;, }, if, (, !]
[., rightBlock, ,, that, ., rightBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., rightBlock, ,, that, ., rightBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., rightBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., centerBlock, ,]
[., rightBlock, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., centerBlock, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., centerBlock, ,, that, ., centerBlock, ), ), {, return]
[!, ObjectUtilities, ., equal, (, this, ., centerBlock, ,, that, ., centerBlock, ), ), {, return, false, ;, }, return]
