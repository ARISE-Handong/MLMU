[commons, ., math3, ., random, ., Well19937c, ;, public, class, PascalDistribution, extends, AbstractIntegerDistribution, {, private, static, final, long, serialVersionUID, =]
[final, double, probabilityOfSuccess, ;, public, PascalDistribution, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, this, (]
[PascalDistribution, (, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, this, (, new, Well19937c, (, ), ,]
[int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, this, (, new, Well19937c, (, ), ,, r, ,]
[}, public, PascalDistribution, (, RandomGenerator, rng, ,, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, super, (]
[rng, ,, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, super, (, rng, ), ;, if, (]
[rng, ,, int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, super, (, rng, ), ;, if, (]
[int, r, ,, double, p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, super, (, rng, ), ;, if, (, r, <=]
[p, ), throws, NotStrictlyPositiveException, ,, OutOfRangeException, {, super, (, rng, ), ;, if, (, r, <=, 0, ), {, throw]
[NotStrictlyPositiveException, ,, OutOfRangeException, {, super, (, rng, ), ;, if, (, r, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[NotStrictlyPositiveException, ,, OutOfRangeException, {, super, (, rng, ), ;, if, (, r, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (]
[super, (, rng, ), ;, if, (, r, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,]
[(, r, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (]
[(, r, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (]
[(, r, <=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (]
[<=, 0, ), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <, 0, ||]
[), {, throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <, 0, ||]
[throw, new, NotStrictlyPositiveException, (, LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <, 0, ||, p, >]
[LocalizedFormats, ., NUMBER_OF_SUCCESSES, ,, r, ), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw]
[,, r, ), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (]
[), ;, }, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,]
[}, if, (, p, <, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,]
[<, 0, ||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }]
[||, p, >, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =]
[>, 1, ), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =, r, ;]
[), {, throw, new, OutOfRangeException, (, p, ,, 0, ,, 1, ), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =]
[1, ), ;, }, numberOfSuccesses, =, r, ;, probabilityOfSuccess, =, p, ;, }, public, int, getNumberOfSuccesses, (, ), {, return]
[p, ;, }, public, int, getNumberOfSuccesses, (, ), {, return, numberOfSuccesses, ;, }, public, double, getProbabilityOfSuccess, (, ), {, return]
[(, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (]
[(, ), {, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (]
[{, return, probabilityOfSuccess, ;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <]
[;, }, public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[public, double, probability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =]
[x, ), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {]
[{, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[{, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[{, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[{, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (]
[if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (]
[if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +]
[0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -]
[{, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,]
[{, ret, =, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,]
[=, 0.0, ;, }, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -]
[}, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *]
[}, else, {, ret, =, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *]
[=, CombinatoricsUtils, ., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (]
[., binomialCoefficientDouble, (, x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,]
[x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *]
[x, +, numberOfSuccesses, -, 1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *]
[1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (]
[1, ,, numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (]
[numberOfSuccesses, -, 1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -]
[1, ), *, FastMath, ., pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,]
[pow, (, probabilityOfSuccess, ,, numberOfSuccesses, ), *, FastMath, ., pow, (, 1.0, -, probabilityOfSuccess, ,, x, ), ;, }, return]
[), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (]
[), ;, }, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (]
[}, return, ret, ;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <]
[;, }, public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {]
[public, double, cumulativeProbability, (, int, x, ), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =]
[x, ), {, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {]
[{, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[{, double, ret, ;, if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =]
[if, (, x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (]
[x, <, 0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,]
[0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,]
[0, ), {, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,]
[{, ret, =, 0.0, ;, }, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x, +]
[}, else, {, ret, =, Beta, ., regularizedBeta, (, probabilityOfSuccess, ,, numberOfSuccesses, ,, x, +, 1.0, ), ;, }, return]
[x, +, 1.0, ), ;, }, return, ret, ;, }, public, double, getNumericalMean, (, ), {, final, double, p, =]
[;, }, public, double, getNumericalMean, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =]
[(, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return]
[(, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return]
[), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (]
[), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (]
[final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (, r, *]
[double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (, r, *, (]
[double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (, r, *, (]
[=, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (, r, *, (, 1, -]
[;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, (, r, *, (, 1, -, p, ), ), /]
[(, 1, -, p, ), ), /, p, ;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =]
[;, }, public, double, getNumericalVariance, (, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =]
[(, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return]
[(, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return]
[(, ), {, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return]
[{, final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *]
[final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (]
[final, double, p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (]
[p, =, getProbabilityOfSuccess, (, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (, 1, -]
[(, ), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (, 1, -, p, ), /]
[), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (, 1, -, p, ), /, (]
[), ;, final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (, 1, -, p, ), /, (]
[final, double, r, =, getNumberOfSuccesses, (, ), ;, return, r, *, (, 1, -, p, ), /, (, p, *]
[(, 1, -, p, ), /, (, p, *, p, ), ;, }, public, int, getSupportLowerBound, (, ), {, return]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[), ;, }, public, int, getSupportLowerBound, (, ), {, return, 0, ;, }, public, int, getSupportUpperBound, (, ), {, return]
[}, public, int, getSupportUpperBound, (, ), {, return, Integer, ., MAX_VALUE, ;, }, public, boolean, isSupportConnected, (, ), {, return]
