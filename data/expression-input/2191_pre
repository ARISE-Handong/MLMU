[Range, ;, public, class, TextTitle, extends, Title, implements, Serializable, ,, Cloneable, ,, PublicCloneable, {, private, static, final, long, serialVersionUID, =]
[Serializable, ,, Cloneable, ,, PublicCloneable, {, private, static, final, long, serialVersionUID, =, 8372008692127477443L, ;, public, static, final, Font, DEFAULT_FONT, =]
[,, PublicCloneable, {, private, static, final, long, serialVersionUID, =, 8372008692127477443L, ;, public, static, final, Font, DEFAULT_FONT, =, new, Font, (]
[{, private, static, final, long, serialVersionUID, =, 8372008692127477443L, ;, public, static, final, Font, DEFAULT_FONT, =, new, Font, (, "Tahoma", ,]
[{, private, static, final, long, serialVersionUID, =, 8372008692127477443L, ;, public, static, final, Font, DEFAULT_FONT, =, new, Font, (, "Tahoma", ,]
[long, serialVersionUID, =, 8372008692127477443L, ;, public, static, final, Font, DEFAULT_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,]
[DEFAULT_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,, 12, ), ;, public, static, final, Paint, DEFAULT_TEXT_PAINT, =]
[DEFAULT_FONT, =, new, Font, (, "Tahoma", ,, Font, ., BOLD, ,, 12, ), ;, public, static, final, Paint, DEFAULT_TEXT_PAINT, =]
[transient, Paint, backgroundPaint, ;, private, String, toolTipText, ;, private, String, urlText, ;, private, TextBlock, content, ;, private, boolean, expandToFitSpace, =]
[toolTipText, ;, private, String, urlText, ;, private, TextBlock, content, ;, private, boolean, expandToFitSpace, =, false, ;, private, int, maximumLinesToDisplay, =]
[toolTipText, ;, private, String, urlText, ;, private, TextBlock, content, ;, private, boolean, expandToFitSpace, =, false, ;, private, int, maximumLinesToDisplay, =]
[boolean, expandToFitSpace, =, false, ;, private, int, maximumLinesToDisplay, =, Integer, ., MAX_VALUE, ;, public, TextTitle, (, ), {, this, (]
[public, TextTitle, (, ), {, this, (, "", ), ;, }, public, TextTitle, (, String, text, ), {, this, (]
[(, ), {, this, (, "", ), ;, }, public, TextTitle, (, String, text, ), {, this, (, text, ,]
[(, ), {, this, (, "", ), ;, }, public, TextTitle, (, String, text, ), {, this, (, text, ,]
[(, "", ), ;, }, public, TextTitle, (, String, text, ), {, this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,]
[(, "", ), ;, }, public, TextTitle, (, String, text, ), {, this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,]
[}, public, TextTitle, (, String, text, ), {, this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,]
[}, public, TextTitle, (, String, text, ), {, this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,]
[String, text, ), {, this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,]
[String, text, ), {, this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,]
[this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,]
[this, (, text, ,, TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,]
[TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,, Title, ., DEFAULT_VERTICAL_ALIGNMENT, ,]
[TextTitle, ., DEFAULT_FONT, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,, Title, ., DEFAULT_VERTICAL_ALIGNMENT, ,]
[DEFAULT_VERTICAL_ALIGNMENT, ,, Title, ., DEFAULT_PADDING, ), ;, }, public, TextTitle, (, String, text, ,, Font, font, ), {, this, (]
[Title, ., DEFAULT_PADDING, ), ;, }, public, TextTitle, (, String, text, ,, Font, font, ), {, this, (, text, ,]
[DEFAULT_PADDING, ), ;, }, public, TextTitle, (, String, text, ,, Font, font, ), {, this, (, text, ,, font, ,]
[DEFAULT_PADDING, ), ;, }, public, TextTitle, (, String, text, ,, Font, font, ), {, this, (, text, ,, font, ,]
[public, TextTitle, (, String, text, ,, Font, font, ), {, this, (, text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,]
[public, TextTitle, (, String, text, ,, Font, font, ), {, this, (, text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,]
[text, ,, Font, font, ), {, this, (, text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,]
[text, ,, Font, font, ), {, this, (, text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,]
[), {, this, (, text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,]
[), {, this, (, text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,]
[text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,, Title, ., DEFAULT_VERTICAL_ALIGNMENT, ,]
[text, ,, font, ,, TextTitle, ., DEFAULT_TEXT_PAINT, ,, Title, ., DEFAULT_POSITION, ,, Title, ., DEFAULT_HORIZONTAL_ALIGNMENT, ,, Title, ., DEFAULT_VERTICAL_ALIGNMENT, ,]
[font, ,, Paint, paint, ,, RectangleEdge, position, ,, HorizontalAlignment, horizontalAlignment, ,, VerticalAlignment, verticalAlignment, ,, RectangleInsets, padding, ), {, super, (]
[Paint, paint, ,, RectangleEdge, position, ,, HorizontalAlignment, horizontalAlignment, ,, VerticalAlignment, verticalAlignment, ,, RectangleInsets, padding, ), {, super, (, position, ,]
[,, RectangleEdge, position, ,, HorizontalAlignment, horizontalAlignment, ,, VerticalAlignment, verticalAlignment, ,, RectangleInsets, padding, ), {, super, (, position, ,, horizontalAlignment, ,]
[position, ,, HorizontalAlignment, horizontalAlignment, ,, VerticalAlignment, verticalAlignment, ,, RectangleInsets, padding, ), {, super, (, position, ,, horizontalAlignment, ,, verticalAlignment, ,]
[VerticalAlignment, verticalAlignment, ,, RectangleInsets, padding, ), {, super, (, position, ,, horizontalAlignment, ,, verticalAlignment, ,, padding, ), ;, if, (]
[VerticalAlignment, verticalAlignment, ,, RectangleInsets, padding, ), {, super, (, position, ,, horizontalAlignment, ,, verticalAlignment, ,, padding, ), ;, if, (]
[,, RectangleInsets, padding, ), {, super, (, position, ,, horizontalAlignment, ,, verticalAlignment, ,, padding, ), ;, if, (, text, ==]
[{, super, (, position, ,, horizontalAlignment, ,, verticalAlignment, ,, padding, ), ;, if, (, text, ==, null, ), {, throw]
[position, ,, horizontalAlignment, ,, verticalAlignment, ,, padding, ), ;, if, (, text, ==, null, ), {, throw, new, NullPointerException, (]
[padding, ), ;, if, (, text, ==, null, ), {, throw, new, NullPointerException, (, "Null 'text' argument.", ), ;, }, if, (]
[padding, ), ;, if, (, text, ==, null, ), {, throw, new, NullPointerException, (, "Null 'text' argument.", ), ;, }, if, (]
[;, if, (, text, ==, null, ), {, throw, new, NullPointerException, (, "Null 'text' argument.", ), ;, }, if, (, font, ==]
[==, null, ), {, throw, new, NullPointerException, (, "Null 'text' argument.", ), ;, }, if, (, font, ==, null, ), {, throw]
[{, throw, new, NullPointerException, (, "Null 'text' argument.", ), ;, }, if, (, font, ==, null, ), {, throw, new, NullPointerException, (]
[), ;, }, if, (, font, ==, null, ), {, throw, new, NullPointerException, (, "Null 'font' argument.", ), ;, }, if, (]
[), ;, }, if, (, font, ==, null, ), {, throw, new, NullPointerException, (, "Null 'font' argument.", ), ;, }, if, (]
[}, if, (, font, ==, null, ), {, throw, new, NullPointerException, (, "Null 'font' argument.", ), ;, }, if, (, paint, ==]
[==, null, ), {, throw, new, NullPointerException, (, "Null 'font' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw]
[{, throw, new, NullPointerException, (, "Null 'font' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw, new, NullPointerException, (]
[(, "Null 'font' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }]
[(, "Null 'font' argument.", ), ;, }, if, (, paint, ==, null, ), {, throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }]
[}, if, (, paint, ==, null, ), {, throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }, this, ., text, =]
[(, paint, ==, null, ), {, throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }, this, ., text, =, text, ;]
[(, paint, ==, null, ), {, throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }, this, ., text, =, text, ;]
[), {, throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }, this, ., text, =, text, ;, this, ., font, =]
[throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }, this, ., text, =, text, ;, this, ., font, =, font, ;]
[throw, new, NullPointerException, (, "Null 'paint' argument.", ), ;, }, this, ., text, =, text, ;, this, ., font, =, font, ;]
["Null 'paint' argument.", ), ;, }, this, ., text, =, text, ;, this, ., font, =, font, ;, this, ., paint, =]
[;, }, this, ., text, =, text, ;, this, ., font, =, font, ;, this, ., paint, =, paint, ;]
[;, }, this, ., text, =, text, ;, this, ., font, =, font, ;, this, ., paint, =, paint, ;]
[text, =, text, ;, this, ., font, =, font, ;, this, ., paint, =, paint, ;, this, ., textAlignment, =]
[text, ;, this, ., font, =, font, ;, this, ., paint, =, paint, ;, this, ., textAlignment, =, horizontalAlignment, ;]
[text, ;, this, ., font, =, font, ;, this, ., paint, =, paint, ;, this, ., textAlignment, =, horizontalAlignment, ;]
[font, =, font, ;, this, ., paint, =, paint, ;, this, ., textAlignment, =, horizontalAlignment, ;, this, ., backgroundPaint, =]
[font, ;, this, ., paint, =, paint, ;, this, ., textAlignment, =, horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;]
[font, ;, this, ., paint, =, paint, ;, this, ., textAlignment, =, horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;]
[paint, =, paint, ;, this, ., textAlignment, =, horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;, this, ., content, =]
[paint, ;, this, ., textAlignment, =, horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;, this, ., content, =, null, ;]
[paint, ;, this, ., textAlignment, =, horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;, this, ., content, =, null, ;]
[textAlignment, =, horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;, this, ., content, =, null, ;, this, ., toolTipText, =]
[horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;, this, ., content, =, null, ;, this, ., toolTipText, =, null, ;]
[horizontalAlignment, ;, this, ., backgroundPaint, =, null, ;, this, ., content, =, null, ;, this, ., toolTipText, =, null, ;]
[backgroundPaint, =, null, ;, this, ., content, =, null, ;, this, ., toolTipText, =, null, ;, this, ., urlText, =]
[this, ., toolTipText, =, null, ;, this, ., urlText, =, null, ;, }, public, String, getText, (, ), {, return]
[this, ., toolTipText, =, null, ;, this, ., urlText, =, null, ;, }, public, String, getText, (, ), {, return]
[getText, (, ), {, return, this, ., text, ;, }, public, void, setText, (, String, text, ), {, if, (]
[getText, (, ), {, return, this, ., text, ;, }, public, void, setText, (, String, text, ), {, if, (]
[), {, return, this, ., text, ;, }, public, void, setText, (, String, text, ), {, if, (, text, ==]
[., text, ;, }, public, void, setText, (, String, text, ), {, if, (, text, ==, null, ), {, throw]
[}, public, void, setText, (, String, text, ), {, if, (, text, ==, null, ), {, throw, new, IllegalArgumentException, (]
[text, ), {, if, (, text, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'text' argument.", ), ;, }, if, (]
[), {, if, (, text, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'text' argument.", ), ;, }, if, (, !]
[), {, if, (, text, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'text' argument.", ), ;, }, if, (, !]
[), {, if, (, text, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'text' argument.", ), ;, }, if, (, !]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'text' argument.", ), ;, }, if, (, !, this, ., text, ., equals, (]
[new, IllegalArgumentException, (, "Null 'text' argument.", ), ;, }, if, (, !, this, ., text, ., equals, (, text, ), ), {]
[new, IllegalArgumentException, (, "Null 'text' argument.", ), ;, }, if, (, !, this, ., text, ., equals, (, text, ), ), {]
[), ;, }, if, (, !, this, ., text, ., equals, (, text, ), ), {, this, ., text, =]
[}, if, (, !, this, ., text, ., equals, (, text, ), ), {, this, ., text, =, text, ;]
[(, !, this, ., text, ., equals, (, text, ), ), {, this, ., text, =, text, ;, notifyListeners, (]
[., text, ., equals, (, text, ), ), {, this, ., text, =, text, ;, notifyListeners, (, new, TitleChangeEvent, (]
[text, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, }, public, HorizontalAlignment, getTextAlignment, (, ), {, return]
[text, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, }, public, HorizontalAlignment, getTextAlignment, (, ), {, return]
[getTextAlignment, (, ), {, return, this, ., textAlignment, ;, }, public, void, setTextAlignment, (, HorizontalAlignment, alignment, ), {, if, (]
[getTextAlignment, (, ), {, return, this, ., textAlignment, ;, }, public, void, setTextAlignment, (, HorizontalAlignment, alignment, ), {, if, (]
[), {, return, this, ., textAlignment, ;, }, public, void, setTextAlignment, (, HorizontalAlignment, alignment, ), {, if, (, alignment, ==]
[., textAlignment, ;, }, public, void, setTextAlignment, (, HorizontalAlignment, alignment, ), {, if, (, alignment, ==, null, ), {, throw]
[}, public, void, setTextAlignment, (, HorizontalAlignment, alignment, ), {, if, (, alignment, ==, null, ), {, throw, new, IllegalArgumentException, (]
[(, HorizontalAlignment, alignment, ), {, if, (, alignment, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'alignment' argument.", ), ;, }]
[(, HorizontalAlignment, alignment, ), {, if, (, alignment, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'alignment' argument.", ), ;, }]
[{, if, (, alignment, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'alignment' argument.", ), ;, }, this, ., textAlignment, =]
[(, alignment, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'alignment' argument.", ), ;, }, this, ., textAlignment, =, alignment, ;]
[==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'alignment' argument.", ), ;, }, this, ., textAlignment, =, alignment, ;, notifyListeners, (]
[{, throw, new, IllegalArgumentException, (, "Null 'alignment' argument.", ), ;, }, this, ., textAlignment, =, alignment, ;, notifyListeners, (, new, TitleChangeEvent, (]
[=, alignment, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, Font, getFont, (, ), {, return]
[=, alignment, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, Font, getFont, (, ), {, return]
[getFont, (, ), {, return, this, ., font, ;, }, public, void, setFont, (, Font, font, ), {, if, (]
[getFont, (, ), {, return, this, ., font, ;, }, public, void, setFont, (, Font, font, ), {, if, (]
[), {, return, this, ., font, ;, }, public, void, setFont, (, Font, font, ), {, if, (, font, ==]
[., font, ;, }, public, void, setFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw]
[}, public, void, setFont, (, Font, font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (]
[font, ), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (]
[), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !]
[), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !]
[), {, if, (, font, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., font, ., equals, (]
[new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., font, ., equals, (, font, ), ), {]
[new, IllegalArgumentException, (, "Null 'font' argument.", ), ;, }, if, (, !, this, ., font, ., equals, (, font, ), ), {]
[), ;, }, if, (, !, this, ., font, ., equals, (, font, ), ), {, this, ., font, =]
[}, if, (, !, this, ., font, ., equals, (, font, ), ), {, this, ., font, =, font, ;]
[(, !, this, ., font, ., equals, (, font, ), ), {, this, ., font, =, font, ;, notifyListeners, (]
[., font, ., equals, (, font, ), ), {, this, ., font, =, font, ;, notifyListeners, (, new, TitleChangeEvent, (]
[font, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, }, public, Paint, getPaint, (, ), {, return]
[font, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, }, public, Paint, getPaint, (, ), {, return]
[getPaint, (, ), {, return, this, ., paint, ;, }, public, void, setPaint, (, Paint, paint, ), {, if, (]
[getPaint, (, ), {, return, this, ., paint, ;, }, public, void, setPaint, (, Paint, paint, ), {, if, (]
[), {, return, this, ., paint, ;, }, public, void, setPaint, (, Paint, paint, ), {, if, (, paint, ==]
[., paint, ;, }, public, void, setPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw]
[}, public, void, setPaint, (, Paint, paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (]
[paint, ), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (]
[), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !]
[), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !]
[), {, if, (, paint, ==, null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !]
[null, ), {, throw, new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., paint, ., equals, (]
[new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., paint, ., equals, (, paint, ), ), {]
[new, IllegalArgumentException, (, "Null 'paint' argument.", ), ;, }, if, (, !, this, ., paint, ., equals, (, paint, ), ), {]
[), ;, }, if, (, !, this, ., paint, ., equals, (, paint, ), ), {, this, ., paint, =]
[}, if, (, !, this, ., paint, ., equals, (, paint, ), ), {, this, ., paint, =, paint, ;]
[(, !, this, ., paint, ., equals, (, paint, ), ), {, this, ., paint, =, paint, ;, notifyListeners, (]
[., paint, ., equals, (, paint, ), ), {, this, ., paint, =, paint, ;, notifyListeners, (, new, TitleChangeEvent, (]
[paint, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, }, public, Paint, getBackgroundPaint, (, ), {, return]
[paint, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, }, public, Paint, getBackgroundPaint, (, ), {, return]
[public, Paint, getBackgroundPaint, (, ), {, return, this, ., backgroundPaint, ;, }, public, void, setBackgroundPaint, (, Paint, paint, ), {]
[public, Paint, getBackgroundPaint, (, ), {, return, this, ., backgroundPaint, ;, }, public, void, setBackgroundPaint, (, Paint, paint, ), {]
[), {, return, this, ., backgroundPaint, ;, }, public, void, setBackgroundPaint, (, Paint, paint, ), {, this, ., backgroundPaint, =]
[return, this, ., backgroundPaint, ;, }, public, void, setBackgroundPaint, (, Paint, paint, ), {, this, ., backgroundPaint, =, paint, ;]
[., backgroundPaint, ;, }, public, void, setBackgroundPaint, (, Paint, paint, ), {, this, ., backgroundPaint, =, paint, ;, notifyListeners, (]
[}, public, void, setBackgroundPaint, (, Paint, paint, ), {, this, ., backgroundPaint, =, paint, ;, notifyListeners, (, new, TitleChangeEvent, (]
[=, paint, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, String, getToolTipText, (, ), {, return]
[=, paint, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, String, getToolTipText, (, ), {, return]
[public, String, getToolTipText, (, ), {, return, this, ., toolTipText, ;, }, public, void, setToolTipText, (, String, text, ), {]
[public, String, getToolTipText, (, ), {, return, this, ., toolTipText, ;, }, public, void, setToolTipText, (, String, text, ), {]
[), {, return, this, ., toolTipText, ;, }, public, void, setToolTipText, (, String, text, ), {, this, ., toolTipText, =]
[return, this, ., toolTipText, ;, }, public, void, setToolTipText, (, String, text, ), {, this, ., toolTipText, =, text, ;]
[., toolTipText, ;, }, public, void, setToolTipText, (, String, text, ), {, this, ., toolTipText, =, text, ;, notifyListeners, (]
[}, public, void, setToolTipText, (, String, text, ), {, this, ., toolTipText, =, text, ;, notifyListeners, (, new, TitleChangeEvent, (]
[=, text, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, String, getURLText, (, ), {, return]
[=, text, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, String, getURLText, (, ), {, return]
[public, String, getURLText, (, ), {, return, this, ., urlText, ;, }, public, void, setURLText, (, String, text, ), {]
[public, String, getURLText, (, ), {, return, this, ., urlText, ;, }, public, void, setURLText, (, String, text, ), {]
[), {, return, this, ., urlText, ;, }, public, void, setURLText, (, String, text, ), {, this, ., urlText, =]
[return, this, ., urlText, ;, }, public, void, setURLText, (, String, text, ), {, this, ., urlText, =, text, ;]
[., urlText, ;, }, public, void, setURLText, (, String, text, ), {, this, ., urlText, =, text, ;, notifyListeners, (]
[}, public, void, setURLText, (, String, text, ), {, this, ., urlText, =, text, ;, notifyListeners, (, new, TitleChangeEvent, (]
[=, text, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, boolean, getExpandToFitSpace, (, ), {, return]
[=, text, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, boolean, getExpandToFitSpace, (, ), {, return]
[public, boolean, getExpandToFitSpace, (, ), {, return, this, ., expandToFitSpace, ;, }, public, void, setExpandToFitSpace, (, boolean, expand, ), {]
[public, boolean, getExpandToFitSpace, (, ), {, return, this, ., expandToFitSpace, ;, }, public, void, setExpandToFitSpace, (, boolean, expand, ), {]
[), {, return, this, ., expandToFitSpace, ;, }, public, void, setExpandToFitSpace, (, boolean, expand, ), {, this, ., expandToFitSpace, =]
[return, this, ., expandToFitSpace, ;, }, public, void, setExpandToFitSpace, (, boolean, expand, ), {, this, ., expandToFitSpace, =, expand, ;]
[., expandToFitSpace, ;, }, public, void, setExpandToFitSpace, (, boolean, expand, ), {, this, ., expandToFitSpace, =, expand, ;, notifyListeners, (]
[}, public, void, setExpandToFitSpace, (, boolean, expand, ), {, this, ., expandToFitSpace, =, expand, ;, notifyListeners, (, new, TitleChangeEvent, (]
[=, expand, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, int, getMaximumLinesToDisplay, (, ), {, return]
[=, expand, ;, notifyListeners, (, new, TitleChangeEvent, (, this, ), ), ;, }, public, int, getMaximumLinesToDisplay, (, ), {, return]
[public, int, getMaximumLinesToDisplay, (, ), {, return, this, ., maximumLinesToDisplay, ;, }, public, void, setMaximumLinesToDisplay, (, int, max, ), {]
[public, int, getMaximumLinesToDisplay, (, ), {, return, this, ., maximumLinesToDisplay, ;, }, public, void, setMaximumLinesToDisplay, (, int, max, ), {]
[), {, return, this, ., maximumLinesToDisplay, ;, }, public, void, setMaximumLinesToDisplay, (, int, max, ), {, this, ., maximumLinesToDisplay, =]
[return, this, ., maximumLinesToDisplay, ;, }, public, void, setMaximumLinesToDisplay, (, int, max, ), {, this, ., maximumLinesToDisplay, =, max, ;]
[., maximumLinesToDisplay, ;, }, public, void, setMaximumLinesToDisplay, (, int, max, ), {, this, ., maximumLinesToDisplay, =, max, ;, notifyListeners, (]
[}, public, void, setMaximumLinesToDisplay, (, int, max, ), {, this, ., maximumLinesToDisplay, =, max, ;, notifyListeners, (, new, TitleChangeEvent, (]
[(, this, ), ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =]
[), ), ;, }, public, Size2D, arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (]
[arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =]
[arrange, (, Graphics2D, g2, ,, RectangleConstraint, constraint, ), {, RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =]
[RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[RectangleConstraint, cc, =, toContentConstraint, (, constraint, ), ;, LengthConstraintType, w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =]
[w, =, cc, ., getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =]
[getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (]
[getWidthConstraintType, (, ), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (]
[), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==]
[), ;, LengthConstraintType, h, =, cc, ., getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==]
[getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[getHeightConstraintType, (, ), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (]
[), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[), ;, Size2D, contentSize, =, null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==]
[null, ;, if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., NONE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==]
[{, contentSize, =, arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[arrangeNN, (, g2, ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==]
[}, else, if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (]
[LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,]
[LengthConstraintType, ., RANGE, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeRN, (, g2, ,]
[NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (]
[NONE, ), {, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (]
[{, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==]
[{, contentSize, =, arrangeRN, (, g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==]
[g2, ,, cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {]
[cc, ., getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =]
[getWidthRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (]
[), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,]
[), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,]
[(, h, ==, LengthConstraintType, ., RANGE, ), {, contentSize, =, arrangeRR, (, g2, ,, cc, ., getWidthRange, (, ), ,]
[(, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (]
[(, g2, ,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (]
[,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==]
[,, cc, ., getWidthRange, (, ), ,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==]
[,, cc, ., getHeightRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[getHeightRange, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[(, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[(, "Not yet implemented.", ), ;, }, }, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==]
[}, else, if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {]
[if, (, w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =]
[w, ==, LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (]
[LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,]
[LengthConstraintType, ., FIXED, ), {, if, (, h, ==, LengthConstraintType, ., NONE, ), {, contentSize, =, arrangeFN, (, g2, ,]
[NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (]
[NONE, ), {, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (]
[{, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==]
[{, contentSize, =, arrangeFN, (, g2, ,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==]
[,, cc, ., getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw]
[getWidth, (, ), ), ;, }, else, if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[if, (, h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[h, ==, LengthConstraintType, ., RANGE, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==]
[{, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw]
[RuntimeException, (, "Not yet implemented.", ), ;, }, else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (]
[else, if, (, h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, return]
[h, ==, LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, return, new, Size2D, (]
[LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, return, new, Size2D, (, calculateTotalWidth, (]
[LengthConstraintType, ., FIXED, ), {, throw, new, RuntimeException, (, "Not yet implemented.", ), ;, }, }, return, new, Size2D, (, calculateTotalWidth, (]
[RuntimeException, (, "Not yet implemented.", ), ;, }, }, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,]
["Not yet implemented.", ), ;, }, }, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, calculateTotalHeight, (]
["Not yet implemented.", ), ;, }, }, return, new, Size2D, (, calculateTotalWidth, (, contentSize, ., getWidth, (, ), ), ,, calculateTotalHeight, (]
[contentSize, ., getHeight, (, ), ), ), ;, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =]
[(, ), ), ), ;, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (]
[), ), ;, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,]
[), ), ;, }, protected, Size2D, arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,]
[arrangeNN, (, Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return]
[Graphics2D, g2, ), {, Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return, arrangeRR, (]
[), {, Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return, arrangeRR, (, g2, ,]
[Range, max, =, new, Range, (, 0.0, ,, Float, ., MAX_VALUE, ), ;, return, arrangeRR, (, g2, ,, max, ,]
[max, ,, max, ), ;, }, protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, RectangleEdge, position, =]
[protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[protected, Size2D, arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[arrangeFN, (, Graphics2D, g2, ,, double, w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[,, double, w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||]
[,, double, w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||]
[w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==]
[w, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==]
[), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =]
[(, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, )]
[==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, ), w, ;]
[==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, ), w, ;]
[||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, ), w, ;, g2, ., setFont, (]
[||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, ), w, ;, g2, ., setFont, (]
[BOTTOM, ), {, float, maxWidth, =, (, float, ), w, ;, g2, ., setFont, (, this, ., font, ), ;]
[BOTTOM, ), {, float, maxWidth, =, (, float, ), w, ;, g2, ., setFont, (, this, ., font, ), ;]
[maxWidth, =, (, float, ), w, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[maxWidth, =, (, float, ), w, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[), w, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[), w, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,]
[., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return]
[this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (]
[content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (, maxWidth, ,]
[content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (, maxWidth, ,]
[expandToFitSpace, ), {, return, new, Size2D, (, maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return]
[maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (]
[maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (]
[maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (]
[contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==]
[contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==]
[), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||]
[), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||]
[;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==]
[;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==]
[}, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =]
[}, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =]
[position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, Float, ., MAX_VALUE, ;]
[position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, Float, ., MAX_VALUE, ;]
[LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, Float, ., MAX_VALUE, ;, g2, ., setFont, (]
[LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, Float, ., MAX_VALUE, ;, g2, ., setFont, (]
[., RIGHT, ), {, float, maxWidth, =, Float, ., MAX_VALUE, ;, g2, ., setFont, (, this, ., font, ), ;]
[., RIGHT, ), {, float, maxWidth, =, Float, ., MAX_VALUE, ;, g2, ., setFont, (, this, ., font, ), ;]
[float, maxWidth, =, Float, ., MAX_VALUE, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[float, maxWidth, =, Float, ., MAX_VALUE, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[., MAX_VALUE, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[., MAX_VALUE, ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,]
[., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return]
[this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (]
[this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (]
[g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (, contentSize, ., getHeight, (, ), ,]
[expandToFitSpace, ), {, return, new, Size2D, (, contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return]
[return, new, Size2D, (, contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (]
[return, new, Size2D, (, contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (]
[contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (, contentSize, ., height, ,]
[contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (, contentSize, ., height, ,]
[else, {, return, new, Size2D, (, contentSize, ., height, ,, contentSize, ., width, ), ;, }, }, else, {, throw]
[new, Size2D, (, contentSize, ., height, ,, contentSize, ., width, ), ;, }, }, else, {, throw, new, RuntimeException, (]
[(, "Unrecognised exception.", ), ;, }, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =]
[), ;, }, }, protected, Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (]
[Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (]
[Size2D, arrangeRN, (, Graphics2D, g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (]
[g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (, widthRange, ., contains, (]
[g2, ,, Range, widthRange, ), {, Size2D, s, =, arrangeNN, (, g2, ), ;, if, (, widthRange, ., contains, (]
[arrangeNN, (, g2, ), ;, if, (, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return]
[(, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =]
[(, widthRange, ., contains, (, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =]
[(, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =, widthRange, ., constrain, (]
[(, s, ., getWidth, (, ), ), ), {, return, s, ;, }, double, ww, =, widthRange, ., constrain, (]
[{, return, s, ;, }, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;, return]
[s, ;, }, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;, return, arrangeFN, (]
[}, double, ww, =, widthRange, ., constrain, (, s, ., getWidth, (, ), ), ;, return, arrangeFN, (, g2, ,]
[), ;, }, protected, Size2D, arrangeRR, (, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {, RectangleEdge, position, =]
[(, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[(, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[(, Graphics2D, g2, ,, Range, widthRange, ,, Range, heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[g2, ,, Range, widthRange, ,, Range, heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[g2, ,, Range, widthRange, ,, Range, heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[,, Range, heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||]
[,, Range, heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||]
[heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==]
[heightRange, ), {, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==]
[), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =]
[(, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, )]
[(, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, )]
[||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, ), widthRange, ., getUpperBound, (, ), ;]
[||, position, ==, RectangleEdge, ., BOTTOM, ), {, float, maxWidth, =, (, float, ), widthRange, ., getUpperBound, (, ), ;]
[., BOTTOM, ), {, float, maxWidth, =, (, float, ), widthRange, ., getUpperBound, (, ), ;, g2, ., setFont, (]
[., BOTTOM, ), {, float, maxWidth, =, (, float, ), widthRange, ., getUpperBound, (, ), ;, g2, ., setFont, (]
[maxWidth, =, (, float, ), widthRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[maxWidth, =, (, float, ), widthRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[), widthRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[), widthRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[(, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[(, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,]
[., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return]
[this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (]
[content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (, maxWidth, ,]
[content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (, maxWidth, ,]
[expandToFitSpace, ), {, return, new, Size2D, (, maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return]
[maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (]
[maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (]
[maxWidth, ,, contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (]
[contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==]
[contentSize, ., getHeight, (, ), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==]
[), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||]
[), ), ;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||]
[;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==]
[;, }, else, {, return, contentSize, ;, }, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==]
[}, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =]
[(, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, (, float, )]
[(, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, (, float, )]
[||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, (, float, ), heightRange, ., getUpperBound, (, ), ;]
[||, position, ==, RectangleEdge, ., RIGHT, ), {, float, maxWidth, =, (, float, ), heightRange, ., getUpperBound, (, ), ;]
[., RIGHT, ), {, float, maxWidth, =, (, float, ), heightRange, ., getUpperBound, (, ), ;, g2, ., setFont, (]
[., RIGHT, ), {, float, maxWidth, =, (, float, ), heightRange, ., getUpperBound, (, ), ;, g2, ., setFont, (]
[maxWidth, =, (, float, ), heightRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[maxWidth, =, (, float, ), heightRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[), heightRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[), heightRange, ., getUpperBound, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =]
[(, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[(, ), ;, g2, ., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., setFont, (, this, ., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[., font, ), ;, this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,]
[this, ., content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[content, =, TextUtilities, ., createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,]
[createTextBlock, (, this, ., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,]
[., text, ,, this, ., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[., font, ,, this, ., paint, ,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[,, maxWidth, ,, this, ., maximumLinesToDisplay, ,, new, G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[G2TextMeasurer, (, g2, ), ), ;, this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =]
[this, ., content, ., setLineAlignment, (, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[(, this, ., textAlignment, ), ;, Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (]
[Size2D, contentSize, =, this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return]
[this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (]
[this, ., content, ., calculateDimensions, (, g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (]
[g2, ), ;, if, (, this, ., expandToFitSpace, ), {, return, new, Size2D, (, contentSize, ., getHeight, (, ), ,]
[expandToFitSpace, ), {, return, new, Size2D, (, contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return]
[return, new, Size2D, (, contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (]
[return, new, Size2D, (, contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (]
[contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (, contentSize, ., height, ,]
[contentSize, ., getHeight, (, ), ,, maxWidth, ), ;, }, else, {, return, new, Size2D, (, contentSize, ., height, ,]
[else, {, return, new, Size2D, (, contentSize, ., height, ,, contentSize, ., width, ), ;, }, }, else, {, throw]
[new, Size2D, (, contentSize, ., height, ,, contentSize, ., width, ), ;, }, }, else, {, throw, new, RuntimeException, (]
[throw, new, RuntimeException, (, "Unrecognised exception.", ), ;, }, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {]
[RuntimeException, (, "Unrecognised exception.", ), ;, }, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, draw, (]
["Unrecognised exception.", ), ;, }, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, draw, (, g2, ,]
[;, }, }, public, void, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, draw, (, g2, ,, area, ,]
[null, ), ;, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (]
[null, ), ;, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (]
[null, ), ;, }, public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (]
[public, Object, draw, (, Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (, this, ., content, ==]
[Graphics2D, g2, ,, Rectangle2D, area, ,, Object, params, ), {, if, (, this, ., content, ==, null, ), {, return]
[Rectangle2D, area, ,, Object, params, ), {, if, (, this, ., content, ==, null, ), {, return, null, ;, }]
[,, Object, params, ), {, if, (, this, ., content, ==, null, ), {, return, null, ;, }, area, =]
[params, ), {, if, (, this, ., content, ==, null, ), {, return, null, ;, }, area, =, trimMargin, (]
[if, (, this, ., content, ==, null, ), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;]
[this, ., content, ==, null, ), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (]
[content, ==, null, ), {, return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,]
[return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, if, (]
[return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, if, (]
[return, null, ;, }, area, =, trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, if, (]
[trimMargin, (, area, ), ;, drawBorder, (, g2, ,, area, ), ;, if, (, this, ., text, ., equals, (]
[drawBorder, (, g2, ,, area, ), ;, if, (, this, ., text, ., equals, (, "", ), ), {, return]
[;, if, (, this, ., text, ., equals, (, "", ), ), {, return, null, ;, }, ChartEntity, entity, =]
[., text, ., equals, (, "", ), ), {, return, null, ;, }, ChartEntity, entity, =, null, ;, if, (]
[., text, ., equals, (, "", ), ), {, return, null, ;, }, ChartEntity, entity, =, null, ;, if, (]
[{, return, null, ;, }, ChartEntity, entity, =, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, EntityBlockParams, p, =]
[;, }, ChartEntity, entity, =, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, EntityBlockParams, p, =, (, EntityBlockParams, )]
[=, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, EntityBlockParams, p, =, (, EntityBlockParams, ), params, ;, if, (]
[=, null, ;, if, (, params, instanceof, EntityBlockParams, ), {, EntityBlockParams, p, =, (, EntityBlockParams, ), params, ;, if, (]
[EntityBlockParams, ), {, EntityBlockParams, p, =, (, EntityBlockParams, ), params, ;, if, (, p, ., getGenerateEntities, (, ), ), {]
[{, EntityBlockParams, p, =, (, EntityBlockParams, ), params, ;, if, (, p, ., getGenerateEntities, (, ), ), {, entity, =]
[=, (, EntityBlockParams, ), params, ;, if, (, p, ., getGenerateEntities, (, ), ), {, entity, =, new, TitleEntity, (]
[EntityBlockParams, ), params, ;, if, (, p, ., getGenerateEntities, (, ), ), {, entity, =, new, TitleEntity, (, area, ,]
[params, ;, if, (, p, ., getGenerateEntities, (, ), ), {, entity, =, new, TitleEntity, (, area, ,, this, ,]
[params, ;, if, (, p, ., getGenerateEntities, (, ), ), {, entity, =, new, TitleEntity, (, area, ,, this, ,]
[p, ., getGenerateEntities, (, ), ), {, entity, =, new, TitleEntity, (, area, ,, this, ,, this, ., toolTipText, ,]
[p, ., getGenerateEntities, (, ), ), {, entity, =, new, TitleEntity, (, area, ,, this, ,, this, ., toolTipText, ,]
[entity, =, new, TitleEntity, (, area, ,, this, ,, this, ., toolTipText, ,, this, ., urlText, ), ;, }, }]
[new, TitleEntity, (, area, ,, this, ,, this, ., toolTipText, ,, this, ., urlText, ), ;, }, }, area, =]
[(, area, ,, this, ,, this, ., toolTipText, ,, this, ., urlText, ), ;, }, }, area, =, trimBorder, (]
[this, ., toolTipText, ,, this, ., urlText, ), ;, }, }, area, =, trimBorder, (, area, ), ;, if, (]
[this, ., toolTipText, ,, this, ., urlText, ), ;, }, }, area, =, trimBorder, (, area, ), ;, if, (]
[this, ., toolTipText, ,, this, ., urlText, ), ;, }, }, area, =, trimBorder, (, area, ), ;, if, (]
[this, ., urlText, ), ;, }, }, area, =, trimBorder, (, area, ), ;, if, (, this, ., backgroundPaint, !=]
[), ;, }, }, area, =, trimBorder, (, area, ), ;, if, (, this, ., backgroundPaint, !=, null, ), {]
[), ;, }, }, area, =, trimBorder, (, area, ), ;, if, (, this, ., backgroundPaint, !=, null, ), {]
[area, =, trimBorder, (, area, ), ;, if, (, this, ., backgroundPaint, !=, null, ), {, g2, ., setPaint, (]
[area, =, trimBorder, (, area, ), ;, if, (, this, ., backgroundPaint, !=, null, ), {, g2, ., setPaint, (]
[), ;, if, (, this, ., backgroundPaint, !=, null, ), {, g2, ., setPaint, (, this, ., backgroundPaint, ), ;]
[), ;, if, (, this, ., backgroundPaint, !=, null, ), {, g2, ., setPaint, (, this, ., backgroundPaint, ), ;]
[this, ., backgroundPaint, !=, null, ), {, g2, ., setPaint, (, this, ., backgroundPaint, ), ;, g2, ., fill, (]
[null, ), {, g2, ., setPaint, (, this, ., backgroundPaint, ), ;, g2, ., fill, (, area, ), ;, }]
[{, g2, ., setPaint, (, this, ., backgroundPaint, ), ;, g2, ., fill, (, area, ), ;, }, area, =]
[., setPaint, (, this, ., backgroundPaint, ), ;, g2, ., fill, (, area, ), ;, }, area, =, trimPadding, (]
[), ;, g2, ., fill, (, area, ), ;, }, area, =, trimPadding, (, area, ), ;, RectangleEdge, position, =]
[area, ), ;, }, area, =, trimPadding, (, area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[area, ), ;, }, area, =, trimPadding, (, area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[area, ), ;, }, area, =, trimPadding, (, area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[;, }, area, =, trimPadding, (, area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[;, }, area, =, trimPadding, (, area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[trimPadding, (, area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||]
[trimPadding, (, area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||]
[area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==]
[area, ), ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==]
[=, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {]
[(, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, drawHorizontal, (]
[;, if, (, position, ==, RectangleEdge, ., TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, drawHorizontal, (, g2, ,]
[TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (]
[TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (]
[TOP, ||, position, ==, RectangleEdge, ., BOTTOM, ), {, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (]
[position, ==, RectangleEdge, ., BOTTOM, ), {, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (, position, ==]
[position, ==, RectangleEdge, ., BOTTOM, ), {, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (, position, ==]
[BOTTOM, ), {, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||]
[BOTTOM, ), {, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||]
[{, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==]
[{, drawHorizontal, (, g2, ,, area, ), ;, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==]
[area, ), ;, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {]
[;, }, else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, drawVertical, (]
[else, if, (, position, ==, RectangleEdge, ., LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, drawVertical, (, g2, ,]
[LEFT, ||, position, ==, RectangleEdge, ., RIGHT, ), {, drawVertical, (, g2, ,, area, ), ;, }, BlockResult, result, =]
[), {, drawVertical, (, g2, ,, area, ), ;, }, BlockResult, result, =, new, BlockResult, (, ), ;, if, (]
[), {, drawVertical, (, g2, ,, area, ), ;, }, BlockResult, result, =, new, BlockResult, (, ), ;, if, (]
[drawVertical, (, g2, ,, area, ), ;, }, BlockResult, result, =, new, BlockResult, (, ), ;, if, (, entity, !=]
[;, }, BlockResult, result, =, new, BlockResult, (, ), ;, if, (, entity, !=, null, ), {, StandardEntityCollection, sec, =]
[new, BlockResult, (, ), ;, if, (, entity, !=, null, ), {, StandardEntityCollection, sec, =, new, StandardEntityCollection, (, ), ;]
[new, BlockResult, (, ), ;, if, (, entity, !=, null, ), {, StandardEntityCollection, sec, =, new, StandardEntityCollection, (, ), ;]
[;, if, (, entity, !=, null, ), {, StandardEntityCollection, sec, =, new, StandardEntityCollection, (, ), ;, sec, ., add, (]
[entity, !=, null, ), {, StandardEntityCollection, sec, =, new, StandardEntityCollection, (, ), ;, sec, ., add, (, entity, ), ;]
[entity, !=, null, ), {, StandardEntityCollection, sec, =, new, StandardEntityCollection, (, ), ;, sec, ., add, (, entity, ), ;]
[{, StandardEntityCollection, sec, =, new, StandardEntityCollection, (, ), ;, sec, ., add, (, entity, ), ;, result, ., setEntityCollection, (]
[StandardEntityCollection, (, ), ;, sec, ., add, (, entity, ), ;, result, ., setEntityCollection, (, sec, ), ;, }, return]
[;, }, return, result, ;, }, protected, void, drawHorizontal, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =]
[result, ;, }, protected, void, drawHorizontal, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, )]
[result, ;, }, protected, void, drawHorizontal, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, )]
[(, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;]
[(, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;]
[Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (]
[Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (]
[titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, g2, ., setPaint, (]
[), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, g2, ., setPaint, (]
[., setFont, (, this, ., font, ), ;, g2, ., setPaint, (, this, ., paint, ), ;, TextBlockAnchor, anchor, =]
[font, ), ;, g2, ., setPaint, (, this, ., paint, ), ;, TextBlockAnchor, anchor, =, null, ;, float, x, =]
[setPaint, (, this, ., paint, ), ;, TextBlockAnchor, anchor, =, null, ;, float, x, =, 0.0f, ;, HorizontalAlignment, horizontalAlignment, =]
[;, TextBlockAnchor, anchor, =, null, ;, float, x, =, 0.0f, ;, HorizontalAlignment, horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (]
[;, TextBlockAnchor, anchor, =, null, ;, float, x, =, 0.0f, ;, HorizontalAlignment, horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (]
[anchor, =, null, ;, float, x, =, 0.0f, ;, HorizontalAlignment, horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (, horizontalAlignment, ==]
[anchor, =, null, ;, float, x, =, 0.0f, ;, HorizontalAlignment, horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (, horizontalAlignment, ==]
[x, =, 0.0f, ;, HorizontalAlignment, horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {]
[0.0f, ;, HorizontalAlignment, horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, x, =]
[horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, x, =, (, float, )]
[horizontalAlignment, =, getHorizontalAlignment, (, ), ;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, x, =, (, float, )]
[if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, x, =, (, float, ), titleArea, ., getX, (, ), ;]
[horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, x, =, (, float, ), titleArea, ., getX, (, ), ;, anchor, =]
[horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, x, =, (, float, ), titleArea, ., getX, (, ), ;, anchor, =]
[=, (, float, ), titleArea, ., getX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (]
[=, (, float, ), titleArea, ., getX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (]
[float, ), titleArea, ., getX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, horizontalAlignment, ==]
[float, ), titleArea, ., getX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, horizontalAlignment, ==]
[(, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {]
[;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, x, =]
[TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, x, =, (, float, )]
[TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, x, =, (, float, )]
[if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, x, =, (, float, ), titleArea, ., getMaxX, (, ), ;]
[horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, x, =, (, float, ), titleArea, ., getMaxX, (, ), ;, anchor, =]
[horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, x, =, (, float, ), titleArea, ., getMaxX, (, ), ;, anchor, =]
[=, (, float, ), titleArea, ., getMaxX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (]
[=, (, float, ), titleArea, ., getMaxX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (]
[float, ), titleArea, ., getMaxX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, horizontalAlignment, ==]
[float, ), titleArea, ., getMaxX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, horizontalAlignment, ==]
[(, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {]
[;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, x, =]
[TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, x, =, (, float, )]
[TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, x, =, (, float, )]
[if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, x, =, (, float, ), titleArea, ., getCenterX, (, ), ;]
[horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, x, =, (, float, ), titleArea, ., getCenterX, (, ), ;, anchor, =]
[horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, x, =, (, float, ), titleArea, ., getCenterX, (, ), ;, anchor, =]
[=, (, float, ), titleArea, ., getCenterX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_CENTER, ;, }, float, y, =]
[., getCenterX, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_CENTER, ;, }, float, y, =, 0.0f, ;, RectangleEdge, position, =]
[=, TextBlockAnchor, ., TOP_CENTER, ;, }, float, y, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[=, TextBlockAnchor, ., TOP_CENTER, ;, }, float, y, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[., TOP_CENTER, ;, }, float, y, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[., TOP_CENTER, ;, }, float, y, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[y, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ), {]
[0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ), {, y, =]
[position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ), {, y, =, (, float, )]
[position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., TOP, ), {, y, =, (, float, )]
[RectangleEdge, ., TOP, ), {, y, =, (, float, ), titleArea, ., getY, (, ), ;, }, else, if, (]
[RectangleEdge, ., TOP, ), {, y, =, (, float, ), titleArea, ., getY, (, ), ;, }, else, if, (]
[TOP, ), {, y, =, (, float, ), titleArea, ., getY, (, ), ;, }, else, if, (, position, ==]
[TOP, ), {, y, =, (, float, ), titleArea, ., getY, (, ), ;, }, else, if, (, position, ==]
[(, float, ), titleArea, ., getY, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., BOTTOM, ), {]
[), titleArea, ., getY, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., BOTTOM, ), {, y, =]
[getY, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., BOTTOM, ), {, y, =, (, float, )]
[getY, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., BOTTOM, ), {, y, =, (, float, )]
[position, ==, RectangleEdge, ., BOTTOM, ), {, y, =, (, float, ), titleArea, ., getMaxY, (, ), ;, if, (]
[position, ==, RectangleEdge, ., BOTTOM, ), {, y, =, (, float, ), titleArea, ., getMaxY, (, ), ;, if, (]
[RectangleEdge, ., BOTTOM, ), {, y, =, (, float, ), titleArea, ., getMaxY, (, ), ;, if, (, horizontalAlignment, ==]
[RectangleEdge, ., BOTTOM, ), {, y, =, (, float, ), titleArea, ., getMaxY, (, ), ;, if, (, horizontalAlignment, ==]
[y, =, (, float, ), titleArea, ., getMaxY, (, ), ;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {]
[(, float, ), titleArea, ., getMaxY, (, ), ;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, anchor, =]
[(, float, ), titleArea, ., getMaxY, (, ), ;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, anchor, =]
[;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, else, if, (]
[;, if, (, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, else, if, (]
[(, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, else, if, (, horizontalAlignment, ==]
[(, horizontalAlignment, ==, HorizontalAlignment, ., LEFT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, else, if, (, horizontalAlignment, ==]
[LEFT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, anchor, =]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, anchor, =]
[else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (]
[else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (]
[(, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, horizontalAlignment, ==]
[(, horizontalAlignment, ==, HorizontalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, horizontalAlignment, ==]
[CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, anchor, =]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, anchor, =]
[;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, }]
[;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, }]
[;, }, else, if, (, horizontalAlignment, ==, HorizontalAlignment, ., RIGHT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, }]
[==, HorizontalAlignment, ., RIGHT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, }, this, ., content, ., draw, (]
[., RIGHT, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, }, this, ., content, ., draw, (, g2, ,]
[), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, }, this, ., content, ., draw, (, g2, ,, x, ,]
[anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, }, this, ., content, ., draw, (, g2, ,, x, ,, y, ,]
[y, ,, anchor, ), ;, }, protected, void, drawVertical, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =]
[), ;, }, protected, void, drawVertical, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, )]
[), ;, }, protected, void, drawVertical, (, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, )]
[(, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;]
[(, Graphics2D, g2, ,, Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;]
[Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (]
[Rectangle2D, area, ), {, Rectangle2D, titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (]
[titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[titleArea, =, (, Rectangle2D, ), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;]
[), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, g2, ., setPaint, (]
[), area, ., clone, (, ), ;, g2, ., setFont, (, this, ., font, ), ;, g2, ., setPaint, (]
[., setFont, (, this, ., font, ), ;, g2, ., setPaint, (, this, ., paint, ), ;, TextBlockAnchor, anchor, =]
[font, ), ;, g2, ., setPaint, (, this, ., paint, ), ;, TextBlockAnchor, anchor, =, null, ;, float, y, =]
[setPaint, (, this, ., paint, ), ;, TextBlockAnchor, anchor, =, null, ;, float, y, =, 0.0f, ;, VerticalAlignment, verticalAlignment, =]
[;, TextBlockAnchor, anchor, =, null, ;, float, y, =, 0.0f, ;, VerticalAlignment, verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (]
[;, TextBlockAnchor, anchor, =, null, ;, float, y, =, 0.0f, ;, VerticalAlignment, verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (]
[anchor, =, null, ;, float, y, =, 0.0f, ;, VerticalAlignment, verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (, verticalAlignment, ==]
[anchor, =, null, ;, float, y, =, 0.0f, ;, VerticalAlignment, verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (, verticalAlignment, ==]
[y, =, 0.0f, ;, VerticalAlignment, verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {]
[0.0f, ;, VerticalAlignment, verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, y, =]
[verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, y, =, (, float, )]
[verticalAlignment, =, getVerticalAlignment, (, ), ;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, y, =, (, float, )]
[if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, y, =, (, float, ), titleArea, ., getY, (, ), ;]
[verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, y, =, (, float, ), titleArea, ., getY, (, ), ;, anchor, =]
[verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, y, =, (, float, ), titleArea, ., getY, (, ), ;, anchor, =]
[=, (, float, ), titleArea, ., getY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (]
[=, (, float, ), titleArea, ., getY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (]
[float, ), titleArea, ., getY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, verticalAlignment, ==]
[float, ), titleArea, ., getY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, verticalAlignment, ==]
[(, ), ;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {]
[;, anchor, =, TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, y, =]
[TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, y, =, (, float, )]
[TextBlockAnchor, ., TOP_RIGHT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, y, =, (, float, )]
[if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, y, =, (, float, ), titleArea, ., getMaxY, (, ), ;]
[verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, y, =, (, float, ), titleArea, ., getMaxY, (, ), ;, anchor, =]
[verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, y, =, (, float, ), titleArea, ., getMaxY, (, ), ;, anchor, =]
[=, (, float, ), titleArea, ., getMaxY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (]
[=, (, float, ), titleArea, ., getMaxY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (]
[float, ), titleArea, ., getMaxY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, verticalAlignment, ==]
[float, ), titleArea, ., getMaxY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, verticalAlignment, ==]
[(, ), ;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {]
[;, anchor, =, TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, y, =]
[TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, y, =, (, float, )]
[TextBlockAnchor, ., TOP_LEFT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, y, =, (, float, )]
[if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, y, =, (, float, ), titleArea, ., getCenterY, (, ), ;]
[verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, y, =, (, float, ), titleArea, ., getCenterY, (, ), ;, anchor, =]
[verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, y, =, (, float, ), titleArea, ., getCenterY, (, ), ;, anchor, =]
[=, (, float, ), titleArea, ., getCenterY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_CENTER, ;, }, float, x, =]
[., getCenterY, (, ), ;, anchor, =, TextBlockAnchor, ., TOP_CENTER, ;, }, float, x, =, 0.0f, ;, RectangleEdge, position, =]
[=, TextBlockAnchor, ., TOP_CENTER, ;, }, float, x, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[=, TextBlockAnchor, ., TOP_CENTER, ;, }, float, x, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (]
[., TOP_CENTER, ;, }, float, x, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[., TOP_CENTER, ;, }, float, x, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==]
[x, =, 0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., LEFT, ), {]
[0.0f, ;, RectangleEdge, position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., LEFT, ), {, x, =]
[position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., LEFT, ), {, x, =, (, float, )]
[position, =, getPosition, (, ), ;, if, (, position, ==, RectangleEdge, ., LEFT, ), {, x, =, (, float, )]
[RectangleEdge, ., LEFT, ), {, x, =, (, float, ), titleArea, ., getX, (, ), ;, }, else, if, (]
[RectangleEdge, ., LEFT, ), {, x, =, (, float, ), titleArea, ., getX, (, ), ;, }, else, if, (]
[LEFT, ), {, x, =, (, float, ), titleArea, ., getX, (, ), ;, }, else, if, (, position, ==]
[LEFT, ), {, x, =, (, float, ), titleArea, ., getX, (, ), ;, }, else, if, (, position, ==]
[(, float, ), titleArea, ., getX, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., RIGHT, ), {]
[), titleArea, ., getX, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., RIGHT, ), {, x, =]
[getX, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., RIGHT, ), {, x, =, (, float, )]
[getX, (, ), ;, }, else, if, (, position, ==, RectangleEdge, ., RIGHT, ), {, x, =, (, float, )]
[position, ==, RectangleEdge, ., RIGHT, ), {, x, =, (, float, ), titleArea, ., getMaxX, (, ), ;, if, (]
[position, ==, RectangleEdge, ., RIGHT, ), {, x, =, (, float, ), titleArea, ., getMaxX, (, ), ;, if, (]
[RectangleEdge, ., RIGHT, ), {, x, =, (, float, ), titleArea, ., getMaxX, (, ), ;, if, (, verticalAlignment, ==]
[RectangleEdge, ., RIGHT, ), {, x, =, (, float, ), titleArea, ., getMaxX, (, ), ;, if, (, verticalAlignment, ==]
[x, =, (, float, ), titleArea, ., getMaxX, (, ), ;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {]
[(, float, ), titleArea, ., getMaxX, (, ), ;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, anchor, =]
[(, float, ), titleArea, ., getMaxX, (, ), ;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, anchor, =]
[;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, else, if, (]
[;, if, (, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, else, if, (]
[(, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, else, if, (, verticalAlignment, ==]
[(, verticalAlignment, ==, VerticalAlignment, ., TOP, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, else, if, (, verticalAlignment, ==]
[TOP, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, anchor, =]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_RIGHT, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, anchor, =]
[else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (]
[else, if, (, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (]
[(, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, verticalAlignment, ==]
[(, verticalAlignment, ==, VerticalAlignment, ., CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, verticalAlignment, ==]
[CENTER, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, anchor, =]
[{, anchor, =, TextBlockAnchor, ., BOTTOM_CENTER, ;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, anchor, =]
[;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }]
[;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }]
[;, }, else, if, (, verticalAlignment, ==, VerticalAlignment, ., BOTTOM, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }]
[==, VerticalAlignment, ., BOTTOM, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }, this, ., content, ., draw, (]
[., BOTTOM, ), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }, this, ., content, ., draw, (, g2, ,]
[), {, anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }, this, ., content, ., draw, (, g2, ,, x, ,]
[anchor, =, TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }, this, ., content, ., draw, (, g2, ,, x, ,, y, ,]
[TextBlockAnchor, ., BOTTOM_LEFT, ;, }, }, this, ., content, ., draw, (, g2, ,, x, ,, y, ,, anchor, ,]
[BOTTOM_LEFT, ;, }, }, this, ., content, ., draw, (, g2, ,, x, ,, y, ,, anchor, ,, x, ,]
[}, }, this, ., content, ., draw, (, g2, ,, x, ,, y, ,, anchor, ,, x, ,, y, ,]
[}, }, this, ., content, ., draw, (, g2, ,, x, ,, y, ,, anchor, ,, x, ,, y, ,]
[}, this, ., content, ., draw, (, g2, ,, x, ,, y, ,, anchor, ,, x, ,, y, ,, -]
[}, this, ., content, ., draw, (, g2, ,, x, ,, y, ,, anchor, ,, x, ,, y, ,, -]
[., draw, (, g2, ,, x, ,, y, ,, anchor, ,, x, ,, y, ,, -, Math, ., PI, /]
[,, -, Math, ., PI, /, 2.0, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[,, -, Math, ., PI, /, 2.0, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (]
[Math, ., PI, /, 2.0, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==]
[2.0, ), ;, }, public, boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return]
[boolean, equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (]
[equals, (, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[(, Object, obj, ), {, if, (, obj, ==, this, ), {, return, true, ;, }, if, (, !, (]
[obj, ==, this, ), {, return, true, ;, }, if, (, !, (, obj, instanceof, TextTitle, ), ), {, return]
[true, ;, }, if, (, !, (, obj, instanceof, TextTitle, ), ), {, return, false, ;, }, TextTitle, that, =]
[if, (, !, (, obj, instanceof, TextTitle, ), ), {, return, false, ;, }, TextTitle, that, =, (, TextTitle, )]
[obj, instanceof, TextTitle, ), ), {, return, false, ;, }, TextTitle, that, =, (, TextTitle, ), obj, ;, if, (]
[instanceof, TextTitle, ), ), {, return, false, ;, }, TextTitle, that, =, (, TextTitle, ), obj, ;, if, (, !]
[instanceof, TextTitle, ), ), {, return, false, ;, }, TextTitle, that, =, (, TextTitle, ), obj, ;, if, (, !]
[{, return, false, ;, }, TextTitle, that, =, (, TextTitle, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[{, return, false, ;, }, TextTitle, that, =, (, TextTitle, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (]
[}, TextTitle, that, =, (, TextTitle, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., text, ,]
[}, TextTitle, that, =, (, TextTitle, ), obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., text, ,]
[obj, ;, if, (, !, ObjectUtilities, ., equal, (, this, ., text, ,, that, ., text, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., text, ,, that, ., text, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., text, ,, that, ., text, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., text, ,, that, ., text, ), ), {, return, false, ;, }, if, (, !]
[., text, ,, that, ., text, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., text, ,, that, ., text, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., text, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., font, ,]
[., text, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., font, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., font, ,, that, ., font, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., font, ,, that, ., font, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., font, ,, that, ., font, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., font, ,, that, ., font, ), ), {, return, false, ;, }, if, (, !]
[., font, ,, that, ., font, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., font, ,, that, ., font, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[., font, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., paint, ,]
[., font, ), ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., paint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., paint, ,, that, ., paint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., paint, ,, that, ., paint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., paint, ,, that, ., paint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., paint, ,, that, ., paint, ), ), {, return, false, ;, }, if, (]
[this, ., paint, ,, that, ., paint, ), ), {, return, false, ;, }, if, (, this, ., textAlignment, !=]
[this, ., paint, ,, that, ., paint, ), ), {, return, false, ;, }, if, (, this, ., textAlignment, !=]
[paint, ), ), {, return, false, ;, }, if, (, this, ., textAlignment, !=, that, ., textAlignment, ), {, return]
[false, ;, }, if, (, this, ., textAlignment, !=, that, ., textAlignment, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., textAlignment, !=, that, ., textAlignment, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., textAlignment, !=, that, ., textAlignment, ), {, return, false, ;, }, if, (, !]
[this, ., textAlignment, !=, that, ., textAlignment, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[this, ., textAlignment, !=, that, ., textAlignment, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (]
[that, ., textAlignment, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., backgroundPaint, ,]
[that, ., textAlignment, ), {, return, false, ;, }, if, (, !, PaintUtilities, ., equal, (, this, ., backgroundPaint, ,]
[;, }, if, (, !, PaintUtilities, ., equal, (, this, ., backgroundPaint, ,, that, ., backgroundPaint, ), ), {, return]
[PaintUtilities, ., equal, (, this, ., backgroundPaint, ,, that, ., backgroundPaint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., backgroundPaint, ,, that, ., backgroundPaint, ), ), {, return, false, ;, }, if, (]
[PaintUtilities, ., equal, (, this, ., backgroundPaint, ,, that, ., backgroundPaint, ), ), {, return, false, ;, }, if, (]
[this, ., backgroundPaint, ,, that, ., backgroundPaint, ), ), {, return, false, ;, }, if, (, this, ., maximumLinesToDisplay, !=]
[this, ., backgroundPaint, ,, that, ., backgroundPaint, ), ), {, return, false, ;, }, if, (, this, ., maximumLinesToDisplay, !=]
[backgroundPaint, ), ), {, return, false, ;, }, if, (, this, ., maximumLinesToDisplay, !=, that, ., maximumLinesToDisplay, ), {, return]
[false, ;, }, if, (, this, ., maximumLinesToDisplay, !=, that, ., maximumLinesToDisplay, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., maximumLinesToDisplay, !=, that, ., maximumLinesToDisplay, ), {, return, false, ;, }, if, (]
[false, ;, }, if, (, this, ., maximumLinesToDisplay, !=, that, ., maximumLinesToDisplay, ), {, return, false, ;, }, if, (]
[(, this, ., maximumLinesToDisplay, !=, that, ., maximumLinesToDisplay, ), {, return, false, ;, }, if, (, this, ., expandToFitSpace, !=]
[(, this, ., maximumLinesToDisplay, !=, that, ., maximumLinesToDisplay, ), {, return, false, ;, }, if, (, this, ., expandToFitSpace, !=]
[., maximumLinesToDisplay, ), {, return, false, ;, }, if, (, this, ., expandToFitSpace, !=, that, ., expandToFitSpace, ), {, return]
[false, ;, }, if, (, this, ., expandToFitSpace, !=, that, ., expandToFitSpace, ), {, return, false, ;, }, if, (]
[;, }, if, (, this, ., expandToFitSpace, !=, that, ., expandToFitSpace, ), {, return, false, ;, }, if, (, !]
[;, }, if, (, this, ., expandToFitSpace, !=, that, ., expandToFitSpace, ), {, return, false, ;, }, if, (, !]
[this, ., expandToFitSpace, !=, that, ., expandToFitSpace, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[this, ., expandToFitSpace, !=, that, ., expandToFitSpace, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[that, ., expandToFitSpace, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., toolTipText, ,]
[that, ., expandToFitSpace, ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., toolTipText, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., toolTipText, ,, that, ., toolTipText, ), ), {, return]
[ObjectUtilities, ., equal, (, this, ., toolTipText, ,, that, ., toolTipText, ), ), {, return, false, ;, }, if, (]
[., equal, (, this, ., toolTipText, ,, that, ., toolTipText, ), ), {, return, false, ;, }, if, (, !]
[., equal, (, this, ., toolTipText, ,, that, ., toolTipText, ), ), {, return, false, ;, }, if, (, !]
[., toolTipText, ,, that, ., toolTipText, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., toolTipText, ,, that, ., toolTipText, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (]
[., toolTipText, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., urlText, ,]
[., toolTipText, ), ), {, return, false, ;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., urlText, ,]
[;, }, if, (, !, ObjectUtilities, ., equal, (, this, ., urlText, ,, that, ., urlText, ), ), {, return]
[!, ObjectUtilities, ., equal, (, this, ., urlText, ,, that, ., urlText, ), ), {, return, false, ;, }, return]
[!, ObjectUtilities, ., equal, (, this, ., urlText, ,, that, ., urlText, ), ), {, return, false, ;, }, return]
[(, this, ., urlText, ,, that, ., urlText, ), ), {, return, false, ;, }, return, super, ., equals, (]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =]
[;, }, return, super, ., equals, (, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =]
[(, obj, ), ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;]
[), ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
[), ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
[), ;, }, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =]
[}, public, int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *]
[int, hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[hashCode, (, ), {, int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (]
[int, result, =, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., text, !=]
[=, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., text, !=, null, ?]
[=, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., text, !=, null, ?]
[=, super, ., hashCode, (, ), ;, result, =, 29, *, result, +, (, this, ., text, !=, null, ?]
[=, 29, *, result, +, (, this, ., text, !=, null, ?, this, ., text, ., hashCode, (, ), :]
[result, +, (, this, ., text, !=, null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;]
[(, this, ., text, !=, null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =]
[(, this, ., text, !=, null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =]
[(, this, ., text, !=, null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =]
[., text, !=, null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *]
[!=, null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +]
[null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., text, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[text, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., font, !=]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., font, !=, null, ?]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., font, !=, null, ?]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., font, !=, null, ?]
[=, 29, *, result, +, (, this, ., font, !=, null, ?, this, ., font, ., hashCode, (, ), :]
[result, +, (, this, ., font, !=, null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;]
[(, this, ., font, !=, null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =]
[(, this, ., font, !=, null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =]
[(, this, ., font, !=, null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =]
[., font, !=, null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *]
[!=, null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +]
[null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., font, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[font, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., paint, !=]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., paint, !=, null, ?]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., paint, !=, null, ?]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., paint, !=, null, ?]
[=, 29, *, result, +, (, this, ., paint, !=, null, ?, this, ., paint, ., hashCode, (, ), :]
[result, +, (, this, ., paint, !=, null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;]
[(, this, ., paint, !=, null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =]
[(, this, ., paint, !=, null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =]
[(, this, ., paint, !=, null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =]
[., paint, !=, null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *]
[!=, null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +]
[null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[null, ?, this, ., paint, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (]
[paint, ., hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., backgroundPaint, !=]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., backgroundPaint, !=, null, ?]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., backgroundPaint, !=, null, ?]
[hashCode, (, ), :, 0, ), ;, result, =, 29, *, result, +, (, this, ., backgroundPaint, !=, null, ?]
[=, 29, *, result, +, (, this, ., backgroundPaint, !=, null, ?, this, ., backgroundPaint, ., hashCode, (, ), :]
[+, (, this, ., backgroundPaint, !=, null, ?, this, ., backgroundPaint, ., hashCode, (, ), :, 0, ), ;, return]
[hashCode, (, ), :, 0, ), ;, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[hashCode, (, ), :, 0, ), ;, return, result, ;, }, public, Object, clone, (, ), throws, CloneNotSupportedException, {, return]
[CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[CloneNotSupportedException, {, return, super, ., clone, (, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {]
[(, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[(, ), ;, }, private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[private, void, writeObject, (, ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (]
[ObjectOutputStream, stream, ), throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., paint, ,]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., paint, ,, stream, ), ;]
[throws, IOException, {, stream, ., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., paint, ,, stream, ), ;]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., paint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[., defaultWriteObject, (, ), ;, SerialUtilities, ., writePaint, (, this, ., paint, ,, stream, ), ;, SerialUtilities, ., writePaint, (]
[;, SerialUtilities, ., writePaint, (, this, ., paint, ,, stream, ), ;, SerialUtilities, ., writePaint, (, this, ., backgroundPaint, ,]
[this, ., backgroundPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[this, ., backgroundPaint, ,, stream, ), ;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[;, }, private, void, readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =]
[readObject, (, ObjectInputStream, stream, ), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =]
[), throws, IOException, ,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =, SerialUtilities, ., readPaint, (]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[,, ClassNotFoundException, {, stream, ., defaultReadObject, (, ), ;, this, ., paint, =, SerialUtilities, ., readPaint, (, stream, ), ;]
[., defaultReadObject, (, ), ;, this, ., paint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., backgroundPaint, =]
[., defaultReadObject, (, ), ;, this, ., paint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., backgroundPaint, =]
[;, this, ., paint, =, SerialUtilities, ., readPaint, (, stream, ), ;, this, ., backgroundPaint, =, SerialUtilities, ., readPaint, (]
